{"sha": "2f351415e53b9214d9a536f84f232a58f46698b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzUxNDE1ZTUzYjkyMTRkOWE1MzZmODRmMjMyYTU4ZjQ2Njk4YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T00:11:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T00:11:40Z"}, "message": "Auto merge of #46641 - petrochenkov:nohelp2, r=nikomatsakis\n\nMove compile-fail tests with NOTE/HELP annotations to UI\n\nRemove NOTE/HELP annotations from UI tests\n\ncc https://github.com/rust-lang/rust/issues/44844 @oli-obk @est31\nr? @nikomatsakis", "tree": {"sha": "ea4862523a774d874ab7208e71b7832a0d73ec68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4862523a774d874ab7208e71b7832a0d73ec68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f351415e53b9214d9a536f84f232a58f46698b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f351415e53b9214d9a536f84f232a58f46698b6", "html_url": "https://github.com/rust-lang/rust/commit/2f351415e53b9214d9a536f84f232a58f46698b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f351415e53b9214d9a536f84f232a58f46698b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0077d128d33543290140763ce7d84d05eb57c40a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0077d128d33543290140763ce7d84d05eb57c40a", "html_url": "https://github.com/rust-lang/rust/commit/0077d128d33543290140763ce7d84d05eb57c40a"}, {"sha": "66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "html_url": "https://github.com/rust-lang/rust/commit/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b"}], "stats": {"total": 8683, "additions": 6707, "deletions": 1976}, "files": [{"sha": "00f556bf0b28f72643a5fb274ea591d3c0eb38bb", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -375,6 +375,7 @@ dependencies = [\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "021f27dacbe0ffff62cc2a1d6b72741614e04ef3", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -133,13 +133,15 @@ Sometimes these built-in normalizations are not enough. In such cases, you\n may provide custom normalization rules using the header commands, e.g.\n \n ```\n-// normalize-stderr-32bit: \"fn() (32 bits)\" -> \"fn() ($PTR bits)\"\n-// normalize-stderr-64bit: \"fn() (64 bits)\" -> \"fn() ($PTR bits)\"\n+// normalize-stdout-test: \"foo\" -> \"bar\"\n+// normalize-stderr-32bit: \"fn\\(\\) \\(32 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n+// normalize-stderr-64bit: \"fn\\(\\) \\(64 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n ```\n \n This tells the test, on 32-bit platforms, whenever the compiler writes\n `fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n-instead. Similar for 64-bit.\n+instead. Similar for 64-bit. The replacement is performed by regexes using\n+default regex flavor provided by `regex` crate.\n \n The corresponding reference file will use the normalized output to test both\n 32-bit and 64-bit platforms:\n@@ -156,4 +158,5 @@ Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n \n Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n information or stage supported by `ignore-X` here as well (e.g.\n-`normalize-stderr-windows`).\n+`normalize-stderr-windows` or simply `normalize-stderr-test` for unconditional\n+replacement)."}, {"sha": "0405bba81b585d81a7a2d0ac63c3827210b46964", "filename": "src/test/compile-fail/E0005.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0005.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let x = Some(1);\n     let Some(y) = x; //~ ERROR E0005\n-    //~| NOTE pattern `None` not covered\n }"}, {"sha": "d5acbdebbe9b9276564c49088b2b1e82eadac96b", "filename": "src/test/compile-fail/E0007.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0007.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,9 +13,7 @@ fn main() {\n     match x {\n         op_string @ Some(s) => {},\n         //~^ ERROR E0007\n-        //~| NOTE binds an already bound by-move value by moving it\n         //~| ERROR E0303\n-        //~| NOTE not allowed after `@`\n         None => {},\n     }\n }"}, {"sha": "ba5720e6f0abdd998c5b8e341d7ac1c8c7dcd133", "filename": "src/test/compile-fail/E0008.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0008.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     match Some(\"hi\".to_string()) {\n         Some(s) if s.len() == 0 => {},\n         //~^ ERROR E0008\n-        //~| NOTE moves value into pattern guard\n         _ => {},\n     }\n }"}, {"sha": "02e2e80e7eab151d5ef7c04bb6b07ce7d2c348ad", "filename": "src/test/compile-fail/E0009.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0009.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,8 +14,6 @@ fn main() {\n     match x {\n         Some((y, ref z)) => {},\n         //~^ ERROR E0009\n-        //~| NOTE by-move pattern here\n-        //~| NOTE both by-ref and by-move used\n         None => panic!()\n     }\n }"}, {"sha": "66a9319a7df4345c03a622818760910fb8adc696", "filename": "src/test/compile-fail/E0010.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0010.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,6 +12,5 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n-                              //~| NOTE allocation not allowed in\n \n fn main() {}"}, {"sha": "c98c35a1442add7ec66fd110eeef3d6da2fbf593", "filename": "src/test/compile-fail/E0017.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0017.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,10 +12,7 @@ static X: i32 = 1;\n const C: i32 = 2;\n \n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n-                                     //~| NOTE constants require immutable values\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n-                                              //~| NOTE statics require immutable values\n                                               //~| ERROR cannot borrow\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n-                                             //~| NOTE statics require immutable values\n fn main() {}"}, {"sha": "24032c59844dcf491881384a510ad52b193e6ee7", "filename": "src/test/compile-fail/E0023.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0023.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,10 +18,7 @@ fn main() {\n     let x = Fruit::Apple(String::new(), String::new());\n     match x {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n-                               //~| NOTE expected 2 fields, found 1\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n-                                     //~| NOTE expected 2 fields, found 3\n         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n-                                 //~| NOTE expected 1 field, found 2\n     }\n }"}, {"sha": "81d0ea8a5e21d1f5e16c68a49c2ee2daf68d5a17", "filename": "src/test/compile-fail/E0025.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0025.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -17,6 +17,4 @@ fn main() {\n     let x = Foo { a:1, b:2 };\n     let Foo { a: x, a: y, b: 0 } = x;\n     //~^ ERROR field `a` bound multiple times in the pattern\n-    //~| NOTE multiple uses of `a` in pattern\n-    //~| NOTE first use of `a`\n }"}, {"sha": "f8ad7b5a30e1c0f88ff23aa46a30309e0f2bef2b", "filename": "src/test/compile-fail/E0026.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0026.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,6 +18,5 @@ fn main() {\n     match thing {\n         Thing { x, y, z } => {}\n         //~^ ERROR struct `Thing` does not have a field named `z` [E0026]\n-        //~| NOTE struct `Thing` does not have field `z`\n     }\n }"}, {"sha": "b63b0ab5dfdef5fe45356e93d9ccf1efaf821f48", "filename": "src/test/compile-fail/E0027.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0027.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,6 +19,5 @@ fn main() {\n     match d {\n         Dog { age: x } => {}\n         //~^ ERROR pattern does not mention field `name`\n-        //~| NOTE missing field `name`\n     }\n }"}, {"sha": "80d215bd327c9f04757dc241e565795ea9893008", "filename": "src/test/compile-fail/E0029.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0029.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,9 +14,6 @@ fn main() {\n     match s {\n         \"hello\" ... \"world\" => {}\n         //~^ ERROR only char and numeric types are allowed in range patterns\n-        //~| NOTE ranges require char or numeric types\n-        //~| NOTE start type: &'static str\n-        //~| NOTE end type: &'static str\n         //~| ERROR non-reference pattern used to match a reference\n         _ => {}\n     }"}, {"sha": "ef3bded4beffbfb8dd9badf22ca7691c997b6e8c", "filename": "src/test/compile-fail/E0030.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0030.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,6 +13,5 @@ fn main() {\n     match 5u32 {\n         1000 ... 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n-        //~| NOTE lower bound larger than upper bound\n     }\n }"}, {"sha": "3cdbb55f6deafb1e8c60198f8d86edb0caf709a4", "filename": "src/test/compile-fail/E0033.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0033.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,12 +15,9 @@ trait SomeTrait {\n fn main() {\n     let trait_obj: &SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n-    //~| NOTE not a value\n     //~| ERROR E0038\n     //~| method `foo` has no receiver\n-    //~| NOTE the trait `SomeTrait` cannot be made into an object\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033\n-    //~| NOTE type `&SomeTrait` cannot be dereferenced\n }"}, {"sha": "6eebd4d4d53606fc2279c2395f591e9676f20d66", "filename": "src/test/compile-fail/E0034.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0034.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,15 +20,12 @@ trait Trait2 {\n \n impl Trait1 for Test {\n     fn foo() {}\n-    //~^ NOTE candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n }\n \n impl Trait2 for Test {\n     fn foo() {}\n-    //~^ NOTE candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n }\n \n fn main() {\n     Test::foo() //~ ERROR multiple applicable items in scope\n-    //~| NOTE multiple `foo` found\n }"}, {"sha": "8087928c051bb1055b3c0490b9aefabead0f1ffa", "filename": "src/test/compile-fail/E0038.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0038.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,8 +14,6 @@ trait Trait {\n \n fn call_foo(x: Box<Trait>) {\n     //~^ ERROR E0038\n-    //~| NOTE the trait `Trait` cannot be made into an object\n-    //~| NOTE method `foo` references the `Self` type in its arguments or return type\n     let y = x.foo();\n }\n "}, {"sha": "8385d68c540dd372cac0a2c253e2b149c6bb2f0f", "filename": "src/test/compile-fail/E0040.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,5 +22,4 @@ fn main() {\n     let mut x = Foo { x: -7 };\n     x.drop();\n     //~^ ERROR E0040\n-    //~| NOTE explicit destructor calls not allowed\n }"}, {"sha": "57c639dd143a2c1137378606962858615275e4c5", "filename": "src/test/compile-fail/E0045.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0045.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n extern \"Rust\" { fn foo(x: u8, ...); }   //~ ERROR E0045\n-                                        //~| NOTE variadics require C or cdecl calling convention\n \n fn main() {\n }"}, {"sha": "5867e11e9acc606e890b16c7964c74fa2865ff7e", "filename": "src/test/compile-fail/E0049.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0049.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,14 +9,13 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo<T: Default>(x: T) -> Self; //~ NOTE expected 1 type parameter\n+    fn foo<T: Default>(x: T) -> Self;\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n-                                    //~| NOTE found 0 type parameters\n }\n \n fn main() {"}, {"sha": "2ccc380c540d264cbe7c14e268ac6a1862eaed35", "filename": "src/test/compile-fail/E0050.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0050.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,20 +9,17 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(&self, x: u8) -> bool; //~ NOTE trait requires 2 parameters\n-    fn bar(&self, x: u8, y: u8, z: u8); //~ NOTE trait requires 4 parameters\n-    fn less(&self); //~ NOTE trait requires 1 parameter\n+    fn foo(&self, x: u8) -> bool;\n+    fn bar(&self, x: u8, y: u8, z: u8);\n+    fn less(&self);\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(&self) -> bool { true } //~ ERROR E0050\n-                                   //~| NOTE expected 2 parameters, found 1\n     fn bar(&self) { } //~ ERROR E0050\n-                      //~| NOTE expected 4 parameters, found 1\n     fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n-                                            //~| NOTE expected 1 parameter, found 4\n }\n \n fn main() {"}, {"sha": "6e186b81cad8db791595c6012f324ab8cc6439f4", "filename": "src/test/compile-fail/E0055.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0055.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,5 +20,4 @@ fn main() {\n     let ref_foo = &&Foo;\n     ref_foo.foo();\n     //~^ ERROR E0055\n-    //~| NOTE deref recursion limit reached\n }"}, {"sha": "f4505209b66894c6623af12be11d08016561b46f", "filename": "src/test/compile-fail/E0060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0060.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,7 +10,6 @@\n \n extern \"C\" {\n     fn printf(_: *const u8, ...) -> u32;\n-    //~^ NOTE defined here\n }\n \n fn main() {"}, {"sha": "221e18cf89dd56a3d49325a6f285c355b93d77f5", "filename": "src/test/compile-fail/E0061.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0061.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n fn f(a: u16, b: &str) {}\n-//~^ NOTE defined here\n \n fn f2(a: u16) {}\n-//~^ NOTE defined here\n \n fn main() {\n     f(0);"}, {"sha": "684c9464ff824a86da0a3413c8f0d985b77b500f", "filename": "src/test/compile-fail/E0062.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0062.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,9 +14,8 @@ struct Foo {\n \n fn main() {\n     let x = Foo {\n-        x: 0, //~ NOTE first use of `x`\n+        x: 0,\n         x: 0,\n         //~^ ERROR E0062\n-        //~| NOTE used more than once\n     };\n }"}, {"sha": "0208aff066b4d3ad4a36cd55dcd542b538d76bc4", "filename": "src/test/compile-fail/E0063.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0063.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -41,14 +41,10 @@ struct TruncatedPluralFoo {\n fn main() {\n     let w = SingleFoo { };\n     //~^ ERROR missing field `x` in initializer of `SingleFoo`\n-    //~| NOTE missing `x`\n     let x = PluralFoo {x: 1};\n     //~^ ERROR missing fields `y`, `z` in initializer of `PluralFoo`\n-    //~| NOTE missing `y`, `z`\n     let y = TruncatedFoo{x:1};\n     //~^ missing fields `a`, `b`, `y` and 1 other field in initializer of `TruncatedFoo`\n-    //~| NOTE `a`, `b`, `y` and 1 other field\n     let z = TruncatedPluralFoo{x:1};\n     //~^ ERROR missing fields `a`, `b`, `c` and 2 other fields in initializer of `TruncatedPluralFoo`\n-    //~| NOTE missing `a`, `b`, `c` and 2 other fields\n }"}, {"sha": "a3fc30ee1c71ab8813637c84e880cf154117934f", "filename": "src/test/compile-fail/E0067.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0067.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,6 +13,4 @@ use std::collections::LinkedList;\n fn main() {\n     LinkedList::new() += 1; //~ ERROR E0368\n                             //~^ ERROR E0067\n-                            //~^^ NOTE invalid expression for left-hand side\n-                            //~| NOTE cannot use `+=` on type `std::collections::LinkedList<_>`\n }"}, {"sha": "a6a7898ed4e8950ee64f8200370c30bd675dca61", "filename": "src/test/compile-fail/E0069.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0069.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n fn foo() -> u8 {\n     return;\n     //~^ ERROR `return;` in a function whose return type is not `()`\n-    //~| NOTE return type is not ()\n }\n \n fn main() {"}, {"sha": "d71dc7966fa91b501f4b3048c125df81576264af", "filename": "src/test/compile-fail/E0071.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0071.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,5 +14,4 @@ type FooAlias = Foo;\n fn main() {\n     let u = FooAlias { value: 0 };\n     //~^ ERROR expected struct, variant or union type, found enum `Foo` [E0071]\n-    //~| NOTE not a struct\n }"}, {"sha": "b159cf107cefb0cc5b99bd623099ea7126ea1131", "filename": "src/test/compile-fail/E0076.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0076.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,7 +13,6 @@\n #[repr(simd)]\n struct Bad(u16, u32, u32);\n //~^ ERROR E0076\n-//~| NOTE SIMD elements must have the same type\n \n fn main() {\n }"}, {"sha": "3b571667336ac9956baf27ed188d00a2e0355d63", "filename": "src/test/compile-fail/E0081.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0081.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n enum Enum {\n-    P = 3, //~ NOTE first use of `3isize`\n+    P = 3,\n     X = 3,\n     //~^ ERROR discriminant value `3isize` already exists\n-    //~| NOTE enum already has `3isize`\n     Y = 5\n }\n "}, {"sha": "2be206c9702bf4b40151da6d568905d1fb638b0e", "filename": "src/test/compile-fail/E0084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[repr(i32)] //~ ERROR: E0084\n-enum Foo {} //~ NOTE: zero-variant enum\n+enum Foo {}\n \n fn main() {\n }"}, {"sha": "6dc08860614d7af836f1984c0dad5564d8a9f67b", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,8 +13,6 @@ fn bar<T>() {}\n \n fn main() {\n     foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n-                  //~^ NOTE expected 0 type parameters\n \n     bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n-                       //~^ NOTE expected 1 type parameter\n }"}, {"sha": "21df9abd0932e2e3cda269020d3eef3d54415d30", "filename": "src/test/compile-fail/E0089.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0089.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,5 +12,4 @@ fn foo<T, U>() {}\n \n fn main() {\n     foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n-                  //~| NOTE expected 2 type parameters\n }"}, {"sha": "13b2131cc8be0d2aedb7df4a33841fe5aa26516e", "filename": "src/test/compile-fail/E0090.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0090.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,5 +12,4 @@ fn foo<'a: 'b, 'b: 'a>() {}\n \n fn main() {\n     foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n-                      //~^ NOTE expected 2 lifetime parameters\n }"}, {"sha": "da988dbf819ac8c681a28d3bd4341c112c8e7d34", "filename": "src/test/compile-fail/E0091.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0091.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n type Foo<T> = u32; //~ ERROR E0091\n-                   //~| NOTE unused type parameter\n type Foo2<A, B> = Box<A>; //~ ERROR E0091\n-                          //~| NOTE unused type parameter\n \n fn main() {\n }"}, {"sha": "b08164ac06d4235c0e95907f583406db6118efe9", "filename": "src/test/compile-fail/E0092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0092.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,7 @@\n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n     fn atomic_foo(); //~ ERROR E0092\n-}                    //~| NOTE unrecognized atomic operation\n+}\n \n fn main() {\n }"}, {"sha": "d84f9f649113c1c2d282f40e02c1f1a0a29a8541", "filename": "src/test/compile-fail/E0093.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0093.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@\n extern \"rust-intrinsic\" {\n     fn foo();\n     //~^ ERROR E0093\n-    //~| NOTE unrecognized intrinsic\n }\n \n fn main() {"}, {"sha": "3a31874b244229c272515034a16247a2da7efcdf", "filename": "src/test/compile-fail/E0094.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0094.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n     fn size_of<T, U>() -> usize; //~ ERROR E0094\n-                                 //~| NOTE expected 1 type parameter\n }\n \n fn main() {"}, {"sha": "0674930a11cca8e5d2ae1c830c82d99d6efdabcc", "filename": "src/test/compile-fail/E0106.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0106.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,17 +11,14 @@\n struct Foo {\n     x: &bool,\n     //~^ ERROR E0106\n-    //~| NOTE expected lifetime parameter\n }\n enum Bar {\n     A(u8),\n     B(&bool),\n    //~^ ERROR E0106\n-   //~| NOTE expected lifetime parameter\n }\n type MyStr = &str;\n         //~^ ERROR E0106\n-        //~| NOTE expected lifetime parameter\n \n struct Baz<'a>(&'a str);\n struct Buzz<'a, 'b>(&'a str, &'b str);"}, {"sha": "9fc478422504bbe750c2f3b230f022bdb56c61cc", "filename": "src/test/compile-fail/E0109.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0109.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n type X = u32<i32>; //~ ERROR E0109\n-                   //~| NOTE type parameter not allowed\n \n fn main() {\n }"}, {"sha": "fd169f4acc5eb0250ad5fae39283d51883764ee0", "filename": "src/test/compile-fail/E0110.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0110.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n type X = u32<'static>; //~ ERROR E0110\n-                       //~| NOTE lifetime parameter not allowed on this type\n \n fn main() {\n }"}, {"sha": "cd7d8dc3efb986e9118da5707b93dc47caa08aba", "filename": "src/test/compile-fail/E0116.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0116.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,8 +10,6 @@\n \n impl Vec<u8> {}\n //~^ ERROR E0116\n-//~| NOTE impl for type defined outside of crate.\n-//~| NOTE define and implement a trait or new type instead\n \n fn main() {\n }"}, {"sha": "982f875c7b0a85108e75d4b315f392124780a083", "filename": "src/test/compile-fail/E0117.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0117.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,9 +9,6 @@\n // except according to those terms.\n \n impl Drop for u32 {} //~ ERROR E0117\n-//~^ NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n //~| ERROR the Drop trait may only be implemented on structures\n //~| implementing Drop requires a struct\n "}, {"sha": "d37ff34b861f41d272970920bf135f222773d5ff", "filename": "src/test/compile-fail/E0118.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n impl (u8, u8) { //~ ERROR E0118\n-//~^ NOTE impl requires a base type\n-//~| NOTE either implement a trait on it or create a newtype to wrap it instead\n     fn get_state(&self) -> String {\n         String::new()\n     }"}, {"sha": "9528631b3047b6bd749b3aad2db3a7f1ea5cd4a0", "filename": "src/test/compile-fail/E0119.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0119.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,7 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-impl<T> MyTrait for T { //~ NOTE first implementation here\n+impl<T> MyTrait for T {\n     fn get(&self) -> usize { 0 }\n }\n \n@@ -21,7 +21,6 @@ struct Foo {\n }\n \n impl MyTrait for Foo { //~ ERROR E0119\n-                       //~| NOTE conflicting implementation for `Foo`\n     fn get(&self) -> usize { self.value }\n }\n "}, {"sha": "8d09b877f002b7ee4a72d5d7592251ccec60492b", "filename": "src/test/compile-fail/E0120.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0120.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ trait MyTrait { fn foo() {} }\n \n impl Drop for MyTrait {\n               //~^ ERROR E0120\n-              //~| NOTE implementing Drop requires a struct\n     fn drop(&mut self) {}\n }\n "}, {"sha": "3ef20c6dd4084ce66e49b00fe71e88817a904ead", "filename": "src/test/compile-fail/E0124.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0124.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n struct Foo {\n-    field1: i32, //~ NOTE `field1` first declared here\n+    field1: i32,\n     field1: i32,\n     //~^ ERROR field `field1` is already declared [E0124]\n-    //~| NOTE field already declared\n }\n \n fn main() {"}, {"sha": "37071012825ec9b67f9984e7f202300f80eee315", "filename": "src/test/compile-fail/E0128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0128.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n struct Foo<T=U, U=()> { //~ ERROR E0128\n-                        //~| NOTE defaulted type parameters cannot be forward declared\n     field1: T,\n     field2: U,\n }"}, {"sha": "d11b59cdf334d336439497c47174669f0e3577a0", "filename": "src/test/compile-fail/E0130.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0130.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n extern {\n     fn foo((a, b): (u32, u32));\n     //~^ ERROR E0130\n-    //~| NOTE pattern not allowed in foreign function\n }\n \n fn main() {"}, {"sha": "c7e31edd301d454e9be032b518fef3946b2e3365", "filename": "src/test/compile-fail/E0131.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0131.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,5 +10,4 @@\n \n fn main<T>() {\n     //~^ ERROR E0131\n-    //~| NOTE main cannot have type parameters\n }"}, {"sha": "25ccb344aba34805c55161cbb90c273cce12c298", "filename": "src/test/compile-fail/E0132.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0132.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@\n \n #[start]\n fn f< T >() {} //~ ERROR E0132\n-             //~| NOTE start function cannot have type parameters\n \n fn main() {\n }"}, {"sha": "2e54f65e7bff49400970f5febb7486c262b89bc6", "filename": "src/test/compile-fail/E0133.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0133.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,5 +13,4 @@ unsafe fn f() { return; }\n fn main() {\n     f();\n     //~^ ERROR E0133\n-    //~| NOTE call to unsafe function\n }"}, {"sha": "067ebcc727cea79d074d3039fa9a7d6158eac53c", "filename": "src/test/compile-fail/E0137.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0137.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,9 +11,8 @@\n #![feature(main)]\n \n #[main]\n-fn foo() {} //~ NOTE first #[main] function\n+fn foo() {}\n \n #[main]\n fn f() {}\n //~^ ERROR E0137\n-//~| NOTE additional #[main] function"}, {"sha": "856616c857085501bd341bf109575d65a9eee582", "filename": "src/test/compile-fail/E0138.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0138.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,9 +12,7 @@\n \n #[start]\n fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n-//~^ NOTE previous `start` function here\n \n #[start]\n fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n //~^ ERROR E0138\n-//~| NOTE multiple `start` functions"}, {"sha": "e13b0af6f7977436c43684f1ee62b89eb1582cea", "filename": "src/test/compile-fail/E0162.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0162.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,7 +13,6 @@ struct Irrefutable(i32);\n fn main() {\n     let irr = Irrefutable(0);\n     if let Irrefutable(x) = irr { //~ ERROR E0162\n-        //~| NOTE irrefutable pattern\n         println!(\"{}\", x);\n     }\n }"}, {"sha": "a7f10ddb5a7f83cefc2f8e70aabfa361228bbcf7", "filename": "src/test/compile-fail/E0164.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0164.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,7 +18,6 @@ impl Foo {\n fn bar(foo: Foo) -> u32 {\n     match foo {\n         Foo::B(i) => i, //~ ERROR E0164\n-                        //~| NOTE not a tuple variant or struct\n     }\n }\n "}, {"sha": "5d72d00ffe8765bb7ade9cda1f14eb4afa4ccd2d", "filename": "src/test/compile-fail/E0184.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0184.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #[derive(Copy)] //~ ERROR E0184\n-                //~| NOTE Copy not allowed on types with destructors\n-                //~| NOTE in this expansion of #[derive(Copy)]\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "489ebb033f84e8133c98961750ff7530ba4878dc", "filename": "src/test/compile-fail/E0191.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0191.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,7 +13,6 @@ trait Trait {\n }\n \n type Foo = Trait; //~ ERROR E0191\n-                  //~| NOTE missing associated type `Bar` value\n \n fn main() {\n }"}, {"sha": "17e0751859d9ffd0425186212c3090ce805f76ee", "filename": "src/test/compile-fail/E0194.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0194.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo<T> { //~ NOTE first `T` declared here\n+trait Foo<T> {\n     fn do_something(&self) -> T;\n     fn do_something_else<T: Clone>(&self, bar: T);\n     //~^ ERROR E0194\n-    //~| NOTE shadows another type parameter\n }\n \n fn main() {"}, {"sha": "da0370b301b5b51d4054053c5d18fe8525785895", "filename": "src/test/compile-fail/E0206.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0206.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,18 +12,13 @@ type Foo = i32;\n \n impl Copy for Foo { }\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n \n #[derive(Copy, Clone)]\n struct Bar;\n \n impl Copy for &'static Bar { }\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n \n fn main() {\n }"}, {"sha": "bd87dbaf786a518407bc28a07c8e5c8528e5ef8f", "filename": "src/test/compile-fail/E0207.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0207.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n struct Foo;\n \n impl<T: Default> Foo { //~ ERROR E0207\n-                       //~| NOTE unconstrained type parameter\n     fn get(&self) -> T {\n         <T as Default>::default()\n     }"}, {"sha": "2b090391c743b02dcd22b13fae3bb4f41daf4ee8", "filename": "src/test/compile-fail/E0214.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0214.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let v: Vec(&str) = vec![\"foo\"];\n     //~^ ERROR E0214\n-    //~| NOTE only traits may use parentheses\n }"}, {"sha": "2866ffcd637921301f86c128bdabe3996441b8cb", "filename": "src/test/compile-fail/E0220.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0220.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,8 +13,6 @@ trait Trait {\n }\n \n type Foo = Trait<F=i32>; //~ ERROR E0220\n-                         //~| NOTE associated type `F` not found\n                          //~| ERROR E0191\n-                         //~| NOTE missing associated type `Bar` value\n fn main() {\n }"}, {"sha": "99092465b0ae75e3dc9331bc020bd94dc81dfe98", "filename": "src/test/compile-fail/E0221.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0221.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,27 +12,24 @@ trait T1 {}\n trait T2 {}\n \n trait Foo {\n-    type A: T1; //~ NOTE: ambiguous `A` from `Foo`\n+    type A: T1;\n }\n \n trait Bar : Foo {\n-    type A: T2; //~ NOTE: ambiguous `A` from `Bar`\n+    type A: T2;\n     fn do_something() {\n         let _: Self::A;\n         //~^ ERROR E0221\n-        //~| NOTE ambiguous associated type `A`\n     }\n }\n \n trait T3 {}\n \n trait My : std::str::FromStr {\n-    type Err: T3; //~ NOTE: ambiguous `Err` from `My`\n+    type Err: T3;\n     fn test() {\n         let _: Self::Err;\n         //~^ ERROR E0221\n-        //~| NOTE ambiguous associated type `Err`\n-        //~| NOTE associated type `Self` could derive from `std::str::FromStr`\n     }\n }\n "}, {"sha": "0683197b2b67084702f9f3ea15404e85c177105d", "filename": "src/test/compile-fail/E0223.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0223.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,6 +13,4 @@ trait MyTrait { type X; }\n fn main() {\n     let foo: MyTrait::X;\n     //~^ ERROR ambiguous associated type\n-    //~| NOTE ambiguous associated type\n-    //~| NOTE specify the type using the syntax `<Type as MyTrait>::X`\n }"}, {"sha": "6c77443c5ede9bfdd928e08aeebbc26824576c09", "filename": "src/test/compile-fail/E0225.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0225.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let _: Box<std::io::Read + std::io::Write>;\n     //~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n-    //~| NOTE non-auto additional trait\n }"}, {"sha": "b70fb092a54103af875f9665c98c258783f8ed76", "filename": "src/test/compile-fail/E0229.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0229.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,7 +22,6 @@ impl Foo for isize {\n \n fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}\n //~^ ERROR associated type bindings are not allowed here [E0229]\n-//~| NOTE associated type not allowed here\n \n fn main() {\n }"}, {"sha": "04657c65c8e450280f94d612b5f782b88a19634d", "filename": "src/test/compile-fail/E0232.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0232.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,8 +12,6 @@\n \n #[rustc_on_unimplemented]\n //~^ ERROR E0232\n-//~| NOTE value required here\n-//~| NOTE eg `#[rustc_on_unimplemented = \"foo\"]`\n trait Bar {}\n \n fn main() {"}, {"sha": "615ce0b5d4265028f1f0212c1f17fcd530d2c5a5", "filename": "src/test/compile-fail/E0243.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0243.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n struct Foo<T> { x: T }\n struct Bar { x: Foo }\n                 //~^ ERROR wrong number of type arguments: expected 1, found 0 [E0243]\n-                //~| NOTE expected 1 type argument\n \n fn main() {\n }"}, {"sha": "9a78b3139d0643c2a798f90f57da23e368bb0d3b", "filename": "src/test/compile-fail/E0244.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0244.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n struct Foo { x: bool }\n struct Bar<S, T> { x: Foo<S, T> }\n                       //~^ ERROR wrong number of type arguments: expected 0, found 2 [E0244]\n-                      //~| NOTE expected no type arguments\n \n \n fn main() {"}, {"sha": "186d9019aaeba73b5c1672b56909b7a4079e5458", "filename": "src/test/compile-fail/E0253.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0253.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,6 +16,5 @@ mod foo {\n \n use foo::MyTrait::do_something;\n     //~^ ERROR E0253\n-    //~|NOTE cannot be imported directly\n \n fn main() {}"}, {"sha": "46c74fe3735a36f0b1d6e79c0571a7c8e7e7a7c5", "filename": "src/test/compile-fail/E0254.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0254.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_extern_crates)]\n \n extern crate alloc;\n-//~^ NOTE previous import of the extern crate `alloc` here\n \n mod foo {\n     pub trait alloc {\n@@ -22,7 +21,5 @@ mod foo {\n \n use foo::alloc;\n //~^ ERROR E0254\n-//~| NOTE `alloc` reimported here\n-//~| NOTE `alloc` must be defined only once in the type namespace of this module\n \n fn main() {}"}, {"sha": "5a47541c708bec187ee40a29793867aec21166f8", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,12 +12,8 @@\n #![allow(unused_extern_crates)]\n \n extern crate alloc;\n-//~^ NOTE previous import of the extern crate `alloc` here\n \n extern crate libc as alloc;\n //~^ ERROR E0259\n-//~| NOTE `alloc` reimported here\n-//~| NOTE `alloc` must be defined only once in the type namespace of this module\n-//~| NOTE You can use `as` to change the binding name of the import\n \n fn main() {}"}, {"sha": "1b01bb12203d3949a5a85d6be3951bfbf8cd97fc", "filename": "src/test/compile-fail/E0260.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0260.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,12 +12,9 @@\n #![allow(unused_extern_crates)]\n \n extern crate alloc;\n-//~^ NOTE previous import of the extern crate `alloc` here\n \n mod alloc {\n //~^ ERROR the name `alloc` is defined multiple times [E0260]\n-//~| NOTE `alloc` redefined here\n-//~| NOTE `alloc` must be defined only once in the type namespace of this module\n     pub trait MyTrait {\n         fn do_something();\n     }"}, {"sha": "722f1c25e07d17365674d2fff578e2f9b5dcdd2e", "filename": "src/test/compile-fail/E0263.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0263.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,8 +10,6 @@\n \n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n     //~^ ERROR E0263\n-    //~| NOTE declared twice\n-    //~| NOTE previous declaration here\n }\n \n fn main() {}"}, {"sha": "6287256e866c9e948cc79d1291188979c932f372", "filename": "src/test/compile-fail/E0267.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0267.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,5 +10,4 @@\n \n fn main() {\n     let w = || { break; }; //~ ERROR E0267\n-            //~| NOTE cannot break inside of a closure\n }"}, {"sha": "41e88e2f492a9c77a8441ddcaaa368dc07c1faff", "filename": "src/test/compile-fail/E0268.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0268.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,5 +10,4 @@\n \n fn main() {\n     break; //~ ERROR E0268\n-    //~| NOTE cannot break outside of a loop\n }"}, {"sha": "4d1c50002a39c1f6e6b53dbdcd10d1a03fb00329", "filename": "src/test/compile-fail/E0277-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277-2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -25,9 +25,4 @@ fn is_send<T: Send>() { }\n fn main() {\n     is_send::<Foo>();\n     //~^ ERROR the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n-    //~| NOTE: `*const u8` cannot be sent between threads safely\n-    //~| NOTE: required because it appears within the type `Baz`\n-    //~| NOTE: required because it appears within the type `Bar`\n-    //~| NOTE: required because it appears within the type `Foo`\n-    //~| NOTE: required by `is_send`\n }"}, {"sha": "784f7465d439b293308922be286bd6ddaa8a7bf2", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,13 +20,8 @@ fn some_func<T: Foo>(foo: T) {\n \n fn f(p: Path) { }\n //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n-//~| NOTE `[u8]` does not have a constant size known at compile-time\n-//~| NOTE required because it appears within the type `std::path::Path`\n-//~| NOTE all local variables must have a statically known size\n \n fn main() {\n     some_func(5i32);\n     //~^ ERROR the trait bound `i32: Foo` is not satisfied\n-    //~| NOTE the trait `Foo` is not implemented for `i32`\n-    //~| NOTE required by `some_func`\n }"}, {"sha": "afe4444c7afdfa4c265623269b4edb48a923c985", "filename": "src/test/compile-fail/E0297.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0297.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,5 +13,4 @@ fn main() {\n \n     for Some(x) in xs {}\n     //~^ ERROR E0005\n-    //~| NOTE pattern `None` not covered\n }"}, {"sha": "06e98289b0d57ab20c9b9aa481b16713fd00479d", "filename": "src/test/compile-fail/E0301.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0301.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if option.take().is_none() => {}, //~ ERROR E0301\n-        //~| NOTE borrowed mutably in pattern guard\n         Some(_) => { }\n     }\n }"}, {"sha": "6a5ad40b10907222bad96a92c9b4096b46d019d4", "filename": "src/test/compile-fail/E0302.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0302.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if { option = None; false } => { }, //~ ERROR E0302\n-        //~| NOTE assignment in pattern guard\n         Some(_) => { }\n     }\n }"}, {"sha": "6027414fdbd4b197ca7fea0d9fc3b4736284814e", "filename": "src/test/compile-fail/E0303.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0303.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,10 +12,7 @@ fn main() {\n     match Some(\"hi\".to_string()) {\n         ref op_string_ref @ Some(s) => {},\n         //~^ ERROR pattern bindings are not allowed after an `@` [E0303]\n-        //~| NOTE not allowed after `@`\n         //~| ERROR E0009\n-        //~| NOTE by-move pattern here\n-        //~| NOTE both by-ref and by-move used\n         None => {},\n     }\n }"}, {"sha": "a1efcde42b05bdc9054a75624c2ecf2cf06827f4", "filename": "src/test/compile-fail/E0365.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0365.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,7 +14,5 @@ mod foo {\n \n pub use foo as foo2;\n //~^ ERROR `foo` is private, and cannot be reexported [E0365]\n-//~| NOTE reexport of private `foo`\n-//~| NOTE consider declaring type or module `foo` with `pub`\n \n fn main() {}"}, {"sha": "094ed35cc2d6dfd078a1b81bf08f7bfc05a45f2b", "filename": "src/test/compile-fail/E0375.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0375.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -21,8 +21,5 @@ struct Foo<T: ?Sized, U: ?Sized> {\n \n impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n //~^ ERROR E0375\n-//~| NOTE requires multiple coercions\n-//~| NOTE `CoerceUnsized` may only be implemented for a coercion between structures with one field being coerced\n-//~| NOTE currently, 2 fields need coercions: b (T to U), c (U to T)\n \n fn main() {}"}, {"sha": "445831bf8d7f7d4ba885c791d534d8cab90f6191", "filename": "src/test/compile-fail/E0389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0389.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,6 +16,5 @@ fn main() {\n     let mut fancy = FancyNum{ num: 5 };\n     let fancy_ref = &(&mut fancy);\n     fancy_ref.num = 6; //~ ERROR E0389\n-                       //~^ NOTE assignment into an immutable reference\n     println!(\"{}\", fancy_ref.num);\n }"}, {"sha": "4c3efcf4e8d75637c03b00e46dfdc6c9a562d577", "filename": "src/test/compile-fail/E0392.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0392.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n enum Foo<T> { Bar } //~ ERROR E0392\n-                    //~| NOTE unused type parameter\n \n fn main() {\n }"}, {"sha": "9165bc2837b517968d34c3921a97c16aed798569", "filename": "src/test/compile-fail/E0393.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0393.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,8 +12,6 @@ trait A<T=Self> {}\n \n fn together_we_will_rule_the_galaxy(son: &A) {}\n //~^ ERROR E0393\n-//~| NOTE missing reference to `T`\n-//~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n \n fn main() {\n }"}, {"sha": "dae8e14c5ef181e5a70fdf0a0aa080310c5aadfb", "filename": "src/test/compile-fail/E0394.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0394.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,8 +13,6 @@\n static A: u32 = 0;\n static B: u32 = A;\n //~^ ERROR E0394\n-//~| NOTE referring to another static by value\n-//~| NOTE use the address-of operator or a constant instead\n \n fn main() {\n }"}, {"sha": "00008ea6b6f376a08a4460e2a8e1b2d10befb2e7", "filename": "src/test/compile-fail/E0395.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0395.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,6 +12,5 @@ static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR E0395\n-                   //~| NOTE comparing raw pointers in static\n fn main() {\n }"}, {"sha": "7f34acdfb90075f32480553b877b6573c223ab06", "filename": "src/test/compile-fail/E0396.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0396.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n-                  //~| NOTE dereference of raw pointer in constant\n \n fn main() {\n }"}, {"sha": "6a68013dc6ffe3c675751599d2b55c8625370d06", "filename": "src/test/compile-fail/E0403.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0403.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n fn foo<T, T>(s: T, u: T) {} //~ ERROR E0403\n-                            //~| NOTE already used\n-                            //~| NOTE first use of `T`\n \n fn main() {\n }"}, {"sha": "41d8b4513ce53ce2c8cf4e85d3bd2153639548e7", "filename": "src/test/compile-fail/E0407.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0407.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,7 +18,6 @@ impl Foo for Bar {\n     fn a() {}\n     fn b() {}\n     //~^ ERROR E0407\n-    //~| NOTE not a member of trait `Foo`\n }\n \n fn main() {"}, {"sha": "8ddeb20afdc1e1497b372edcc4683ccd18942c49", "filename": "src/test/compile-fail/E0408.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0408.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,7 +13,6 @@ fn main() {\n \n     match x {\n         Some(y) | None => {} //~  ERROR variable `y` is not bound in all patterns\n-        _ => ()              //~| NOTE pattern doesn't bind `y`\n-                             //~| NOTE variable not in all patterns\n+        _ => ()\n     }\n }"}, {"sha": "d6261d3a74e1554a8ce6ecdea01f1bad2734c148", "filename": "src/test/compile-fail/E0426.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0426.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0426.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0426.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,6 +12,5 @@ fn main () {\n     loop {\n         break 'a;\n         //~^ ERROR E0426\n-        //~| NOTE undeclared label `'a`\n     }\n }"}, {"sha": "3c709f3a399227fecda203ec702ca83b242d55ab", "filename": "src/test/compile-fail/E0428.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0428.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,8 +10,6 @@\n \n struct Bar; //~ previous definition of the type `Bar` here\n struct Bar; //~ ERROR E0428\n-            //~| NOTE `Bar` redefined here\n-            //~| NOTE `Bar` must be defined only once in the type namespace of this module\n \n fn main () {\n }"}, {"sha": "5246fda6aaf6fb20f7ab5d1eed02af6d54a8568a", "filename": "src/test/compile-fail/E0435.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0435.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main () {\n     let foo = 42u32;\n     let _: [u8; foo]; //~ ERROR E0435\n-    //~| NOTE non-constant value\n }"}, {"sha": "7440a82773e7af4675c6cd91096b8dc38054e1e3", "filename": "src/test/compile-fail/E0437.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0437.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ trait Foo {}\n \n impl Foo for i32 {\n     type Bar = bool; //~ ERROR E0437\n-    //~| NOTE not a member of trait `Foo`\n }\n \n fn main () {"}, {"sha": "61d25134993f03049be0054dab1d161fb23908a7", "filename": "src/test/compile-fail/E0438.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0438.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0438.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0438.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,7 +13,6 @@ trait Bar {}\n \n impl Bar for i32 {\n     const BAR: bool = true; //~ ERROR E0438\n-        //~| NOTE not a member of trait `Bar`\n }\n \n fn main () {"}, {"sha": "a1447e7ebcddca230ab2cc8b962bddfafa4cc3b2", "filename": "src/test/compile-fail/E0445.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0445.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,12 +14,9 @@ trait Foo {\n \n pub trait Bar : Foo {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n-//~| NOTE private trait can't be public\n pub struct Bar2<T: Foo>(pub T);\n //~^ ERROR private trait `Foo` in public interface [E0445]\n-//~| NOTE private trait can't be public\n pub fn foo<T: Foo> (t: T) {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n-//~| NOTE private trait can't be public\n \n fn main() {}"}, {"sha": "c576661828471abf71e304c1cae2e8c69de94260", "filename": "src/test/compile-fail/E0446.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0446.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@ mod Foo {\n     struct Bar(u32);\n \n     pub fn bar() -> Bar { //~ ERROR E0446\n-                          //~| NOTE can't leak private type\n         Bar(0)\n     }\n }"}, {"sha": "ac365db33e5cdadc546c7f4e7cbe4b377b75a652", "filename": "src/test/compile-fail/E0449.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0449.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,13 +15,9 @@ trait Foo {\n }\n \n pub impl Bar {} //~ ERROR E0449\n-                //~| NOTE `pub` not needed here\n-                //~| NOTE place qualifiers on individual impl items instead\n \n pub impl Foo for Bar { //~ ERROR E0449\n-                       //~| NOTE `pub` not needed here\n     pub fn foo() {} //~ ERROR E0449\n-                    //~| NOTE `pub` not needed here\n }\n \n fn main() {"}, {"sha": "af4e7d628bb25e331e2493e5c8ae16586977bdf5", "filename": "src/test/compile-fail/E0451.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0451.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,10 +22,8 @@ mod Bar {\n \n fn pat_match(foo: Bar::Foo) {\n     let Bar::Foo{a:a, b:b} = foo; //~ ERROR E0451\n-                                  //~^ NOTE field `b` is private\n }\n \n fn main() {\n     let f = Bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n-                                    //~^ NOTE field `b` is private\n }"}, {"sha": "8e51b84bab8e600895b761c68a873277986a52bf", "filename": "src/test/compile-fail/E0453.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0453.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n #![forbid(non_snake_case)]\n-//~^ NOTE `forbid` level set here\n \n #[allow(non_snake_case)]\n //~^ ERROR allow(non_snake_case) overruled by outer forbid(non_snake_case)\n-//~| NOTE overruled by previous forbid\n fn main() {\n }"}, {"sha": "afd0f5f5e461ef59d31fc22978ec3cd04310753d", "filename": "src/test/compile-fail/E0454.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0454.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,7 +10,6 @@\n \n #[link(name = \"\")] extern {}\n //~^ ERROR E0454\n-//~| NOTE empty name given\n \n fn main() {\n }"}, {"sha": "fea27ef8115866cf925cd483753b352b7bf3f00b", "filename": "src/test/compile-fail/E0458.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0458.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n #[link(kind = \"wonderful_unicorn\")] extern {} //~ ERROR E0458\n-                                              //~| NOTE unknown kind\n                                               //~| ERROR E0459\n-                                              //~| NOTE missing `name` argument\n \n fn main() {\n }"}, {"sha": "dc7ac714f22395feddc48a4e5f71dc1ef7553871", "filename": "src/test/compile-fail/E0459.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0459.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #[link(kind = \"dylib\")] extern {} //~ ERROR E0459\n-                                  //~| NOTE missing `name` argument\n \n fn main() {\n }"}, {"sha": "aae83975b22f8a81cf119a322bcccc1bb6222d04", "filename": "src/test/compile-fail/E0463.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0463.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,6 @@\n #![feature(plugin)]\n #![plugin(cookie_monster)]\n //~^ ERROR E0463\n-//~| NOTE can't find crate\n extern crate cake_is_a_lie;\n \n fn main() {"}, {"sha": "4ca3cd9c13da60a26586e54da1fe11ada301b509", "filename": "src/test/compile-fail/E0496.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0496.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,9 +13,7 @@ struct Foo<'a> {\n }\n \n impl<'a> Foo<'a> {\n-   //~^  NOTE first declared here\n     fn f<'a>(x: &'a i32) { //~ ERROR E0496\n-       //~^ NOTE lifetime 'a already in scope\n     }\n }\n "}, {"sha": "561223ccdf11e8755cf58417f4102f78ae759ebe", "filename": "src/test/compile-fail/E0517.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0517.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n #[repr(C)] //~ ERROR: E0517\n-type Foo = u8; //~ NOTE: not a struct, enum or union\n+type Foo = u8;\n \n #[repr(packed)] //~ ERROR: E0517\n-enum Foo2 {Bar, Baz} //~ NOTE: not a struct\n+enum Foo2 {Bar, Baz}\n \n #[repr(u8)] //~ ERROR: E0517\n-struct Foo3 {bar: bool, baz: bool} //~ NOTE: not an enum\n+struct Foo3 {bar: bool, baz: bool}\n \n #[repr(C)] //~ ERROR: E0517\n-impl Foo3 { //~ NOTE: not a struct, enum or union\n+impl Foo3 {\n }\n \n fn main() {"}, {"sha": "6d5b6e48e0dabc834af58bac0f50aff8f4781e5c", "filename": "src/test/compile-fail/E0518.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0518.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n #[inline(always)] //~ ERROR: E0518\n-struct Foo;       //~ NOTE: not a function\n+struct Foo;\n \n #[inline(never)] //~ ERROR: E0518\n-impl Foo {       //~ NOTE: not a function\n+impl Foo {\n }\n \n fn main() {"}, {"sha": "eae5b11a8190492c18bf083b829f595b6d82a05a", "filename": "src/test/compile-fail/E0520.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0520.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,15 +19,12 @@ impl<T> SpaceLlama for T {\n }\n \n impl<T: Clone> SpaceLlama for T {\n-//~^ NOTE parent `impl` is here\n     fn fly(&self) {}\n }\n \n impl SpaceLlama for i32 {\n     default fn fly(&self) {}\n     //~^ ERROR E0520\n-    //~| NOTE cannot specialize default item `fly`\n-    //~| NOTE `fly` in the parent `impl` must be marked `default`\n }\n \n fn main() {"}, {"sha": "67d222e867e638dc2c3dfb975aea834a6c321bb1", "filename": "src/test/compile-fail/E0527.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0527.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0527.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0527.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,7 +15,6 @@ fn main() {\n     match r {\n         &[a, b] => {\n             //~^ ERROR E0527\n-            //~| NOTE expected 4 elements\n             println!(\"a={}, b={}\", a, b);\n         }\n     }"}, {"sha": "e2aa2c067cbcd1528d12bbdeb5a535e882820d9f", "filename": "src/test/compile-fail/E0528.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0528.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0528.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0528.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,7 +15,6 @@ fn main() {\n     match r {\n         &[a, b, c, rest..] => {\n         //~^ ERROR E0528\n-        //~| NOTE pattern cannot match array of 2 elements\n         }\n     }\n }"}, {"sha": "5262ad7b716f5e25be27bb6842a9981dba335ec9", "filename": "src/test/compile-fail/E0529.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0529.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,7 +15,6 @@ fn main() {\n     match r {\n         [a, b] => {\n         //~^ ERROR E0529\n-        //~| NOTE pattern cannot match with input type `f32`\n         }\n     }\n }"}, {"sha": "64a6ee4cf5872b658cfe88a4a4d8ef666b0c4cfb", "filename": "src/test/compile-fail/E0558.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0558.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0558.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0558.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,7 +10,6 @@\n \n #[export_name]\n //~^ ERROR E0558\n-//~| NOTE did you mean #[export_name=\"*\"]?\n \n pub fn something() {}\n "}, {"sha": "da0f692cc2839c04e57a11fd93b3aedd54e10442", "filename": "src/test/compile-fail/E0559.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0559.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,6 +15,4 @@ enum Field {\n fn main() {\n     let s = Field::Fool { joke: 0 };\n     //~^ ERROR E0559\n-    //~| NOTE `Field::Fool` does not have this field\n-    //~| NOTE available fields are: `x`\n }"}, {"sha": "bbb7f08d62e35ded215a12113c8b4522185525de", "filename": "src/test/compile-fail/E0560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0560.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,6 +15,4 @@ struct Simba {\n fn main() {\n     let s = Simba { mother: 1, father: 0 };\n     //~^ ERROR E0560\n-    //~| NOTE `Simba` does not have this field\n-    //~| NOTE available fields are: `mother`\n }"}, {"sha": "4b5b8beb36865dedcf38b33b40756c7f3464d530", "filename": "src/test/compile-fail/E0605.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0605.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,9 +11,7 @@\n fn main() {\n     let x = 0u8;\n     x as Vec<u8>; //~ ERROR E0605\n-                  //~| NOTE an `as` expression can only be used to convert between primitive types\n \n     let v = 0 as *const u8;\n     v as &u8; //~ ERROR E0605\n-              //~| NOTE an `as` expression can only be used to convert between primitive types\n }"}, {"sha": "f28ac200dea5a29fe6be2ec6fafb8e8028fb4729", "filename": "src/test/compile-fail/E0618.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fcompile-fail%2FE0618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0618.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,7 +14,6 @@ enum X {\n \n fn main() {\n     X::Entry(); //~ ERROR expected function, found `X::Entry` [E0618]\n-                //~| HELP did you mean to write `X::Entry`?\n     let x = 0i32;\n     x(); //~ ERROR expected function, found `i32` [E0618]\n }"}, {"sha": "2c38d8d2e28ba2e3e1f6355a79df3e80b8883d2d", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0077d128d33543290140763ce7d84d05eb57c40a/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=0077d128d33543290140763ce7d84d05eb57c40a", "patch": "@@ -1,69 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::mem;\n-\n-struct Misc<T:?Sized>(T);\n-\n-fn check<T: Iterator, U: ?Sized>() {\n-    // suggest a where-clause, if needed\n-    mem::size_of::<U>();\n-    //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| HELP consider adding a `where U: std::marker::Sized` bound\n-    //~| NOTE required by `std::mem::size_of`\n-    //~| NOTE `U` does not have a constant size known at compile-time\n-    //~| HELP the trait `std::marker::Sized` is not implemented for `U`\n-\n-    mem::size_of::<Misc<U>>();\n-    //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| HELP consider adding a `where U: std::marker::Sized` bound\n-    //~| NOTE required because it appears within the type `Misc<U>`\n-    //~| NOTE required by `std::mem::size_of`\n-    //~| NOTE `U` does not have a constant size known at compile-time\n-    //~| HELP within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-\n-    // ... even if T occurs as a type parameter\n-\n-    <u64 as From<T>>::from;\n-    //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n-    //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n-    //~| NOTE required by `std::convert::From::from`\n-    //~| NOTE the trait `std::convert::From<T>` is not implemented for `u64`\n-\n-    <u64 as From<<T as Iterator>::Item>>::from;\n-    //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-    //~| HELP consider adding a `where u64:\n-    //~| NOTE required by `std::convert::From::from`\n-    //~| NOTE the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented\n-\n-    // ... but not if there are inference variables\n-\n-    <Misc<_> as From<T>>::from;\n-    //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n-    //~| NOTE required by `std::convert::From::from`\n-    //~| NOTE the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n-\n-    // ... and also not if the error is not related to the type\n-\n-    mem::size_of::<[T]>();\n-    //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n-    //~| NOTE `[T]` does not have a constant size\n-    //~| NOTE required by `std::mem::size_of`\n-    //~| HELP the trait `std::marker::Sized` is not implemented for `[T]`\n-\n-    mem::size_of::<[&U]>();\n-    //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n-    //~| NOTE `[&U]` does not have a constant size\n-    //~| NOTE required by `std::mem::size_of`\n-    //~| HELP the trait `std::marker::Sized` is not implemented for `[&U]`\n-}\n-\n-fn main() {\n-}"}, {"sha": "21b8057431b869220d84dc183e8bd8ea27825514", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,14 +14,11 @@\n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n #![forbid(test_lint)]\n-//~^ NOTE lint level defined here\n-//~| NOTE `forbid` level set here\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)]\n //~^ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n-//~| NOTE overruled by previous forbid\n pub fn main() {\n     lintme();\n }", "previous_filename": "src/test/compile-fail-fulldeps/lint-plugin-forbid-attrs.rs"}, {"sha": "459be9db578aff5dbcf03294871f4822ef92dce1", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,23 @@\n+error: item is named 'lintme'\n+  --> $DIR/lint-plugin-forbid-attrs.rs:18:1\n+   |\n+18 | fn lintme() { } //~ ERROR item is named 'lintme'\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-plugin-forbid-attrs.rs:16:11\n+   |\n+16 | #![forbid(test_lint)]\n+   |           ^^^^^^^^^\n+\n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n+   |\n+16 | #![forbid(test_lint)]\n+   |           --------- `forbid` level set here\n+...\n+20 | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3274f0324e1cbd25b10c52a5e0fb6549687c4e01", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-panic.rs"}, {"sha": "328f398efd5c6c9e6bd7640b1b678bb1198b7539", "filename": "src/test/ui-fulldeps/proc-macro/load-panic.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,7 +15,6 @@ extern crate derive_panic;\n \n #[derive(A)]\n //~^ ERROR: proc-macro derive panicked\n-//~| HELP: message: nope!\n struct Foo;\n \n fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/load-panic.rs"}, {"sha": "1be1609d45b2b2ded2fadcc3ca8d55b5183836fc", "filename": "src/test/ui-fulldeps/proc-macro/load-panic.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error: proc-macro derive panicked\n+  --> $DIR/load-panic.rs:16:10\n+   |\n+16 | #[derive(A)]\n+   |          ^\n+   |\n+   = help: message: nope!\n+"}, {"sha": "f2ea6f778cd2628df6725555d467433a8b57a178", "filename": "src/test/ui-fulldeps/proc-macro/signature.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,7 +16,5 @@ extern crate proc_macro;\n #[proc_macro_derive(A)]\n pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n     //~^ ERROR: mismatched types\n-    //~| NOTE: expected normal fn, found unsafe fn\n-    //~| NOTE: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n     loop {}\n }", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/signature.rs"}, {"sha": "2beb0aac8626e89f8cbc9519e44c4db3dc5a9aad", "filename": "src/test/ui-fulldeps/proc-macro/signature.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fsignature.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/signature.rs:17:1\n+   |\n+17 | / pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n+18 | |     //~^ ERROR: mismatched types\n+19 | |     loop {}\n+20 | | }\n+   | |_^ expected normal fn, found unsafe fn\n+   |\n+   = note: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found type `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "bfc6f923f9d2eb0b196ebd6d8c8b52fee321dfa1", "filename": "src/test/ui-fulldeps/update-all-references.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fupdate-all-references.sh?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" != \"\" ]]; then\n+    echo \"usage: $0 <build-directory>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui\"\n+fi\n+\n+BUILD_DIR=$PWD/$1\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "b9ded7d1e951cefcda20b1f3c2be8d83167a1986", "filename": "src/test/ui-fulldeps/update-references.sh", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui-fulldeps%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fupdate-references.sh?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDOUT_NAME\n+        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n+    fi\n+    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NAME\n+        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n+    fi\n+done\n+\n+"}, {"sha": "48918b996ef5989aa9e9b67d10a805295fea5d26", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -39,12 +39,7 @@ impl Bar for usize {\n fn make_foo() {\n     let x = Box::new(5usize) as Box<Foo>;\n     //~^ ERROR E0038\n-    //~| NOTE method `foo` has a non-standard `self` type\n-    //~| NOTE the trait `Foo` cannot be made into an object\n     //~| ERROR E0038\n-    //~| NOTE method `foo` has a non-standard `self` type\n-    //~| NOTE the trait `Foo` cannot be made into an object\n-    //~| NOTE requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>`\n }\n \n fn make_bar() {", "previous_filename": "src/test/compile-fail/arbitrary-self-types-not-object-safe.rs"}, {"sha": "a1090fe031eb9d33ce533aeeba66fbccc34b27cc", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,19 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:33\n+   |\n+40 |     let x = Box::new(5usize) as Box<Foo>;\n+   |                                 ^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: method `foo` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:13\n+   |\n+40 |     let x = Box::new(5usize) as Box<Foo>;\n+   |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: method `foo` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "49084e01a15dbb42d7583ac8e2ad6c21cdd6ebae", "filename": "src/test/ui/asm-out-assign-imm.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -23,12 +23,11 @@ fn foo(x: isize) { println!(\"{}\", x); }\n           target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: isize;\n-    x = 1; //~ NOTE first assignment\n+    x = 1;\n     foo(x);\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR cannot assign twice to immutable variable `x`\n-        //~| NOTE cannot assign twice to immutable\n     }\n     foo(x);\n }", "previous_filename": "src/test/compile-fail/asm-out-assign-imm.rs"}, {"sha": "cf5486fec5f93d1fe4fa05d59fa7979c64ae84f2", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/asm-out-assign-imm.rs:29:9\n+   |\n+26 |     x = 1;\n+   |     ----- first assignment to `x`\n+...\n+29 |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+"}, {"sha": "77653b27fb53874cb0268f38d8684450a9b31eb2", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,12 +15,8 @@ trait Foo {\n \n \n impl<'a> Foo for &'a () {\n-//~^ NOTE the lifetime 'a as defined\n     const NAME: &'a str = \"unit\";\n     //~^ ERROR mismatched types [E0308]\n-    //~| NOTE lifetime mismatch\n-    //~| NOTE expected type `&'static str`\n-    //~| NOTE ...does not necessarily outlive the static lifetime\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/associated-const-impl-wrong-lifetime.rs"}, {"sha": "a7aee9b19f1a1e7c0f80e8c9bb739000fb585554", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:18:5\n+   |\n+18 |     const NAME: &'a str = \"unit\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&'static str`\n+              found type `&'a str`\n+note: the lifetime 'a as defined on the impl at 17:1...\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n+   |\n+17 | / impl<'a> Foo for &'a () {\n+18 | |     const NAME: &'a str = \"unit\";\n+19 | |     //~^ ERROR mismatched types [E0308]\n+20 | | }\n+   | |_^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "240dfd160974b06e55ec64b9f00670a9acb3b088", "filename": "src/test/ui/associated-const-impl-wrong-type.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,15 +10,14 @@\n \n \n trait Foo {\n-    const BAR: u32; //~ NOTE type in trait\n+    const BAR: u32;\n }\n \n struct SignedBar;\n \n impl Foo for SignedBar {\n     const BAR: i32 = -1;\n     //~^ ERROR implemented const `BAR` has an incompatible type for trait [E0326]\n-    //~| NOTE expected u32, found i32\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs"}, {"sha": "a2afe905cb505525fcde4c0dd8fada6e0e1a42a8", "filename": "src/test/ui/associated-const-impl-wrong-type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0326]: implemented const `BAR` has an incompatible type for trait\n+  --> $DIR/associated-const-impl-wrong-type.rs:19:16\n+   |\n+13 |     const BAR: u32;\n+   |                --- type in trait\n+...\n+19 |     const BAR: i32 = -1;\n+   |                ^^^ expected u32, found i32\n+\n+error: aborting due to previous error\n+"}, {"sha": "5536566c61992607bdeb9f4a566398501d27f842", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,18 +13,12 @@\n \n pub trait Vehicle {\n     type Color;\n-    //~^ NOTE ambiguous `Color` from `Vehicle`\n-    //~| NOTE ambiguous `Color` from `Vehicle`\n-    //~| NOTE ambiguous `Color` from `Vehicle`\n \n     fn go(&self) {  }\n }\n \n pub trait Box {\n     type Color;\n-    //~^ NOTE ambiguous `Color` from `Box`\n-    //~| NOTE ambiguous `Color` from `Box`\n-    //~| NOTE ambiguous `Color` from `Box`\n     //\n     fn mail(&self) {  }\n }\n@@ -34,19 +28,15 @@ pub trait BoxCar : Box + Vehicle {\n \n fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n-    //~| NOTE ambiguous associated type `Color`\n }\n \n fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n-    //~| NOTE ambiguous associated type `Color`\n-    //~| NOTE missing associated type `Color` value\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n-    //~| NOTE ambiguous associated type `Color`\n }\n \n pub fn main() { }", "previous_filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs"}, {"sha": "6215c1dc089d26b9bc62d03baf4c988cfa2527e4", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,44 @@\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:29:32\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+21 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+29 | fn dent<C:BoxCar>(c: C, color: C::Color) {\n+   |                                ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:33\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+21 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+   |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:26\n+   |\n+33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+   |                          ^^^^^^^^^^^^^^^^^^^ missing associated type `Color` value\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:38:29\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+21 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+38 | fn paint<C:BoxCar>(c: C, d: C::Color) {\n+   |                             ^^^^^^^^ ambiguous associated type `Color`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "75b60aa8d10b7b392033577ec1c78cb197b1969f", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -32,5 +32,4 @@ fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n     //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n-    //~| NOTE the trait `Add<A>` is not implemented for `()`\n }", "previous_filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs"}, {"sha": "1a49cc7a283bb938a12d4384e1be25d269ea871a", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0277]: the trait bound `(): Add<A>` is not satisfied\n+  --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n+   |\n+33 |     r = r + a;\n+   |           ^ the trait `Add<A>` is not implemented for `()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "becbc27138b770e700d524844357252c7c017c95", "filename": "src/test/ui/associated-types-in-ambiguous-context.rs", "status": "renamed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,21 +15,15 @@ trait Get {\n \n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n-//~| NOTE ambiguous associated type\n-//~| NOTE specify the type using the syntax `<Type as Get>::Value`\n \n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n-    //~| NOTE ambiguous associated type\n-    //~| NOTE specify the type using the syntax `<Type as Grab>::Value`\n }\n \n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n-//~| NOTE ambiguous associated type\n-//~| NOTE specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n fn main() {\n }", "previous_filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs"}, {"sha": "b0196234bda04a756d883912043c624f5307b16c", "filename": "src/test/ui/associated-types-in-ambiguous-context.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,26 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:16:36\n+   |\n+16 | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n+   |                                    ^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as Get>::Value`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n+   |\n+25 | type X = std::ops::Deref::Target;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:21:23\n+   |\n+21 |     fn grab(&self) -> Grab::Value;\n+   |                       ^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as Grab>::Value`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "82f5c49eeb7ae520d81ccd85cdce3e14e01794df", "filename": "src/test/ui/augmented-assignments.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,7 +22,6 @@ fn main() {\n     let mut x = Int(1);\n     x   //~ error: use of moved value: `x`\n     //~^ value used here after move\n-    //~| note: move occurs because `x` has type `Int`\n     +=\n     x;  //~ value moved here\n ", "previous_filename": "src/test/compile-fail/augmented-assignments.rs"}, {"sha": "0367270d16676a7c9fc2ee0fc7b82bfee0b9a0e7", "filename": "src/test/ui/augmented-assignments.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,22 @@\n+error[E0596]: cannot borrow immutable local variable `y` as mutable\n+  --> $DIR/augmented-assignments.rs:30:5\n+   |\n+28 |     let y = Int(2);\n+   |         - consider changing this to `mut y`\n+29 |     //~^ consider changing this to `mut y`\n+30 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+   |     ^ cannot borrow mutably\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/augmented-assignments.rs:23:5\n+   |\n+23 |     x   //~ error: use of moved value: `x`\n+   |     ^ value used here after move\n+...\n+26 |     x;  //~ value moved here\n+   |     - value moved here\n+   |\n+   = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "18162c5f756b8ed3644b742c22726d7eebf95973", "filename": "src/test/ui/auxiliary/changing-crates-a1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-a1.rs"}, {"sha": "28eae023d684b6186682116279b3965266e74323", "filename": "src/test/ui/auxiliary/changing-crates-a2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-a2.rs"}, {"sha": "7b1190fc085802ce00142236eec74bbbb979b127", "filename": "src/test/ui/auxiliary/changing-crates-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-b.rs"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/ui/auxiliary/coherence_lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Remote {\n+    fn foo(&self) { }\n+}\n+\n+pub trait Remote1<T> {\n+    fn foo(&self, t: T) { }\n+}\n+\n+pub trait Remote2<T, U> {\n+    fn foo(&self, t: T, u: U) { }\n+}\n+\n+pub struct Pair<T,U>(T,U);"}, {"sha": "4a302865634224b5f541664e70f1fe5921c17f2e", "filename": "src/test/ui/auxiliary/empty-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct XEmpty1 {}\n+pub struct XEmpty2;\n+pub struct XEmpty6();\n+\n+pub enum XE {\n+    XEmpty3 {},\n+    XEmpty4,\n+    XEmpty5(),\n+}"}, {"sha": "e64e63a2139e9d6f037400d31b49414785ed18af", "filename": "src/test/ui/auxiliary/issue-36708.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/issue-36708.rs"}, {"sha": "0553b4a49b7aed9fc08ea927a9ea56fd6e041426", "filename": "src/test/ui/auxiliary/lint_output_format.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"lint_output_format\"]\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n+\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+pub fn foo() -> usize {\n+    20\n+}\n+\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n+pub fn bar() -> usize {\n+    40\n+}\n+\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n+pub fn baz() -> usize {\n+    30\n+}"}, {"sha": "5fea97da03ee38f5cdf2107610c6d979d8f31338", "filename": "src/test/ui/auxiliary/struct_field_privacy.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct A {\n+    a: isize,\n+    pub b: isize,\n+}\n+\n+pub struct B {\n+    pub a: isize,\n+    b: isize,\n+}"}, {"sha": "31a97f695f06cdbfcf20cd27edf87cb961020bb0", "filename": "src/test/ui/auxiliary/svh-a-base.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-base.rs"}, {"sha": "5339fc8295c6f57f56cfd7820e41cdb3d88be0fc", "filename": "src/test/ui/auxiliary/svh-a-change-lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-lit.rs"}, {"sha": "2a5d9446f879ac65f8d8a4dff31c9616e89c7993", "filename": "src/test/ui/auxiliary/svh-a-change-significant-cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-significant-cfg.rs"}, {"sha": "61f2f2803ab1891dc586ab781cea0158d513b8ed", "filename": "src/test/ui/auxiliary/svh-a-change-trait-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-trait-bound.rs"}, {"sha": "270ce95be2bb62d70a0366920373362fb5a8e2ae", "filename": "src/test/ui/auxiliary/svh-a-change-type-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-arg.rs"}, {"sha": "de4cc85a7dc4746bc238bbf344b797eb212de426", "filename": "src/test/ui/auxiliary/svh-a-change-type-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-ret.rs"}, {"sha": "62f7986f1c3bd729b67c8f50677d01395f20914e", "filename": "src/test/ui/auxiliary/svh-a-change-type-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-static.rs"}, {"sha": "b8946fdc99553bbfbfa4fdc908e25a16cbd67dd2", "filename": "src/test/ui/auxiliary/svh-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-b.rs"}, {"sha": "6bd3ddab06c72426877cec82686ff2a69112ef3b", "filename": "src/test/ui/auxiliary/svh-uta-base.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-uta-base.rs"}, {"sha": "e863416817735b1a0de7a2a089aca9aea064ccd0", "filename": "src/test/ui/auxiliary/svh-uta-change-use-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-uta-change-use-trait.rs"}, {"sha": "eb3da985242be45b8b7ac34a7505b6da878a4c57", "filename": "src/test/ui/auxiliary/svh-utb.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/auxiliary/svh-utb.rs"}, {"sha": "060960f0dbc88cd40b16ede1144175c463a0bfdb", "filename": "src/test/ui/auxiliary/two_macros.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! macro_one { () => (\"one\") }\n+\n+#[macro_export]\n+macro_rules! macro_two { () => (\"two\") }"}, {"sha": "8b31be911b89a53b696405cf29de687fd296720e", "filename": "src/test/ui/binary-op-on-double-ref.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -13,8 +13,6 @@ fn main() {\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n         //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n-        //~| NOTE this is a reference to a type that `%` can be applied to\n-        //~| NOTE an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n     });\n     println!(\"{:?}\", vr);\n }", "previous_filename": "src/test/compile-fail/binary-op-on-double-ref.rs"}, {"sha": "4a2490bac91ab8b253066bd142037e9d984b1f64", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n+  --> $DIR/binary-op-on-double-ref.rs:14:9\n+   |\n+14 |         x % 2 == 0\n+   |         ^^^^^\n+   |\n+   = note: this is a reference to a type that `%` can be applied to; you need to dereference this variable once for this operation to work\n+   = note: an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "38f9a552e1b04c4026b154a80713bfdb04752689", "filename": "src/test/ui/blind-item-item-shadow.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod foo { pub mod foo {  } } //~ NOTE previous definition of the module `foo` here\n+mod foo { pub mod foo {  } }\n \n use foo::foo;\n //~^ ERROR the name `foo` is defined multiple times\n //~| `foo` reimported here\n-//~| NOTE `foo` must be defined only once in the type namespace of this module\n \n fn main() {}", "previous_filename": "src/test/compile-fail/blind-item-item-shadow.rs"}, {"sha": "b9f3e742c66f477ed284a0df3a3da0b594ced222", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,17 @@\n+error[E0255]: the name `foo` is defined multiple times\n+  --> $DIR/blind-item-item-shadow.rs:13:5\n+   |\n+11 | mod foo { pub mod foo {  } }\n+   | ---------------------------- previous definition of the module `foo` here\n+12 | \n+13 | use foo::foo;\n+   |     ^^^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+13 | use foo::foo as Otherfoo;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d4deb3c8041b2a72cdce0e5b06ea815e063a8a6", "filename": "src/test/ui/block-result/consider-removing-last-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,12 +10,12 @@\n \n fn f() -> String {  //~ ERROR mismatched types\n     0u8;\n-    \"bla\".to_string();  //~ HELP consider removing this semicolon\n+    \"bla\".to_string();\n }\n \n fn g() -> String {  //~ ERROR mismatched types\n     \"this won't work\".to_string();\n-    \"removeme\".to_string(); //~ HELP consider removing this semicolon\n+    \"removeme\".to_string();\n }\n \n fn main() {}"}, {"sha": "453f3879f4ba25e5a4043f8708f511a138c5aaf2", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n 11 |   fn f() -> String {  //~ ERROR mismatched types\n    |  __________________^\n 12 | |     0u8;\n-13 | |     \"bla\".to_string();  //~ HELP consider removing this semicolon\n+13 | |     \"bla\".to_string();\n    | |                      - help: consider removing this semicolon\n 14 | | }\n    | |_^ expected struct `std::string::String`, found ()\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n 16 |   fn g() -> String {  //~ ERROR mismatched types\n    |  __________________^\n 17 | |     \"this won't work\".to_string();\n-18 | |     \"removeme\".to_string(); //~ HELP consider removing this semicolon\n+18 | |     \"removeme\".to_string();\n    | |                           - help: consider removing this semicolon\n 19 | | }\n    | |_^ expected struct `std::string::String`, found ()"}, {"sha": "bc3936582aae9011ebcf34628b6d7ad6043e70f0", "filename": "src/test/ui/block-result/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,7 +11,7 @@\n fn blah() -> i32 { //~ ERROR mismatched types\n     1\n \n-    ; //~ HELP consider removing this semicolon\n+    ;\n }\n \n fn main() { }"}, {"sha": "946d18048944f0749a554e08e7b6bede2601d56e", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |  __________________^\n 12 | |     1\n 13 | |\n-14 | |     ; //~ HELP consider removing this semicolon\n+14 | |     ;\n    | |     - help: consider removing this semicolon\n 15 | | }\n    | |_^ expected i32, found ()"}, {"sha": "36520301f552dd605cf708dd130aebf71845e453", "filename": "src/test/ui/block-result/issue-13428.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,12 +15,12 @@ fn foo() -> String {  //~ ERROR mismatched types\n             \"world\")\n     // Put the trailing semicolon on its own line to test that the\n     // note message gets the offending semicolon exactly\n-    ;   //~ HELP consider removing this semicolon\n+    ;\n }\n \n fn bar() -> String {  //~ ERROR mismatched types\n     \"foobar\".to_string()\n-    ;   //~ HELP consider removing this semicolon\n+    ;\n }\n \n pub fn main() {}"}, {"sha": "22bbb2aadf61c790be86c0b056ca4ccaf2a7cf63", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n 15 | |             \"world\")\n 16 | |     // Put the trailing semicolon on its own line to test that the\n 17 | |     // note message gets the offending semicolon exactly\n-18 | |     ;   //~ HELP consider removing this semicolon\n+18 | |     ;\n    | |     - help: consider removing this semicolon\n 19 | | }\n    | |_^ expected struct `std::string::String`, found ()\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n 21 |   fn bar() -> String {  //~ ERROR mismatched types\n    |  ____________________^\n 22 | |     \"foobar\".to_string()\n-23 | |     ;   //~ HELP consider removing this semicolon\n+23 | |     ;\n    | |     - help: consider removing this semicolon\n 24 | | }\n    | |_^ expected struct `std::string::String`, found ()"}, {"sha": "46536cc85750c67bbb980aebfcac320aedc97608", "filename": "src/test/ui/bogus-tag.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,14 +10,12 @@\n \n \n enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n-//~^ NOTE variant `hsl` not found here\n \n fn main() {\n     let red: color = color::rgb(255, 0, 0);\n     match red {\n       color::rgb(r, g, b) => { println!(\"rgb\"); }\n       color::hsl(h, s, l) => { println!(\"hsl\"); }\n       //~^ ERROR no variant\n-      //~| NOTE variant not found in `color`\n     }\n }", "previous_filename": "src/test/compile-fail/bogus-tag.rs"}, {"sha": "49dedcd07427959893d3c0d1cd11cde4547af3aa", "filename": "src/test/ui/bogus-tag.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no variant named `hsl` found for type `color` in the current scope\n+  --> $DIR/bogus-tag.rs:18:7\n+   |\n+12 | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n+   | ---------- variant `hsl` not found here\n+...\n+18 |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n+   |       ^^^^^^^^^^^^^^^^^^^ variant not found in `color`\n+\n+error: aborting due to previous error\n+"}, {"sha": "75bf6bce04b396caf622938672dba1c5031872d9", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "renamed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -60,7 +60,6 @@ fn borrow_after_move() {\n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -69,15 +68,12 @@ fn move_after_borrow() {\n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n-    //~^ NOTE use of borrowed `a.x`\n }\n \n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -86,27 +82,22 @@ fn move_after_mut_borrow() {\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE mutable borrow occurs here (via `a.x`)\n     let _y = &a.y; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    //~^ NOTE immutable borrow occurs here (via `a.x`)\n     let _y = &mut a.y; //~ ERROR cannot borrow\n     //~^ mutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE immutable borrow ends here\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -115,7 +106,6 @@ fn move_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -124,7 +114,6 @@ fn borrow_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -140,15 +129,12 @@ fn move_after_borrow_nested() {\n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n-    //~^ NOTE use of borrowed `a.x.x`\n }\n \n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -161,7 +147,6 @@ fn borrow_after_mut_borrow_nested() {\n     let _y = &a.y; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here\n }\n-//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n@@ -170,7 +155,6 @@ fn mut_borrow_after_borrow_nested() {\n     let _y = &mut a.y; //~ ERROR cannot borrow\n     //~^ mutable borrow occurs here\n }\n-//~^ NOTE immutable borrow ends here\n \n fn main() {\n     copy_after_move();", "previous_filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs"}, {"sha": "88e8490843d3134ea613af090fe164e3bf8eea98", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,163 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:37:9\n+   |\n+35 |     let _x = a.x;\n+   |         -- value moved here\n+36 |     //~^ value moved here\n+37 |     let _y = a.y; //~ ERROR use of moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:46:9\n+   |\n+44 |     let _x = a.x;\n+   |         -- value moved here\n+45 |     //~^ value moved here\n+46 |     let _y = a.y; //~ ERROR use of moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:55:15\n+   |\n+53 |     let _x = a.x;\n+   |         -- value moved here\n+54 |     //~^ value moved here\n+55 |     let _y = &a.y; //~ ERROR use of moved\n+   |               ^^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:63:9\n+   |\n+62 |     let _x = &a.x;\n+   |               --- borrow of `a.x` occurs here\n+63 |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n+\n+error[E0503]: cannot use `a.y` because it was mutably borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:71:9\n+   |\n+70 |     let _x = &mut a.x;\n+   |                   --- borrow of `a.x` occurs here\n+71 |     let _y = a.y; //~ ERROR cannot use\n+   |         ^^ use of borrowed `a.x`\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:77:9\n+   |\n+76 |     let _x = &mut a.x;\n+   |                   --- borrow of `a.x` occurs here\n+77 |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n+\n+error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)\n+  --> $DIR/borrowck-box-insensitivity.rs:85:15\n+   |\n+84 |     let _x = &mut a.x;\n+   |                   --- mutable borrow occurs here (via `a.x`)\n+85 |     let _y = &a.y; //~ ERROR cannot borrow\n+   |               ^^^ immutable borrow occurs here (via `a.y`)\n+86 |     //~^ immutable borrow occurs here (via `a.y`)\n+87 | }\n+   | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)\n+  --> $DIR/borrowck-box-insensitivity.rs:92:19\n+   |\n+91 |     let _x = &a.x;\n+   |               --- immutable borrow occurs here (via `a.x`)\n+92 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+   |                   ^^^ mutable borrow occurs here (via `a.y`)\n+93 |     //~^ mutable borrow occurs here (via `a.y`)\n+94 | }\n+   | - immutable borrow ends here\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:100:9\n+    |\n+98  |     let _x = a.x.x;\n+    |         -- value moved here\n+99  |     //~^ value moved here\n+100 |     let _y = a.y; //~ ERROR use of collaterally moved\n+    |         ^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:108:9\n+    |\n+106 |     let _x = a.x.x;\n+    |         -- value moved here\n+107 |     //~^ value moved here\n+108 |     let _y = a.y; //~ ERROR use of collaterally moved\n+    |         ^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:116:15\n+    |\n+114 |     let _x = a.x.x;\n+    |         -- value moved here\n+115 |     //~^ value moved here\n+116 |     let _y = &a.y; //~ ERROR use of collaterally moved\n+    |               ^^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:124:9\n+    |\n+122 |     let _x = &a.x.x;\n+    |               ----- borrow of `a.x.x` occurs here\n+123 |     //~^ borrow of `a.x.x` occurs here\n+124 |     let _y = a.y;\n+    |         ^^ move out of `a.y` occurs here\n+\n+error[E0503]: cannot use `a.y` because it was mutably borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:132:9\n+    |\n+131 |     let _x = &mut a.x.x;\n+    |                   ----- borrow of `a.x.x` occurs here\n+132 |     let _y = a.y; //~ ERROR cannot use\n+    |         ^^ use of borrowed `a.x.x`\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:138:9\n+    |\n+137 |     let _x = &mut a.x.x;\n+    |                   ----- borrow of `a.x.x` occurs here\n+138 |     let _y = a.y;\n+    |         ^^ move out of `a.y` occurs here\n+\n+error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable\n+   --> $DIR/borrowck-box-insensitivity.rs:147:15\n+    |\n+145 |     let _x = &mut a.x.x;\n+    |                   ----- mutable borrow occurs here\n+146 |     //~^ mutable borrow occurs here\n+147 |     let _y = &a.y; //~ ERROR cannot borrow\n+    |               ^^^ immutable borrow occurs here\n+148 |     //~^ immutable borrow occurs here\n+149 | }\n+    | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable\n+   --> $DIR/borrowck-box-insensitivity.rs:155:19\n+    |\n+153 |     let _x = &a.x.x;\n+    |               ----- immutable borrow occurs here\n+154 |     //~^ immutable borrow occurs here\n+155 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+    |                   ^^^ mutable borrow occurs here\n+156 |     //~^ mutable borrow occurs here\n+157 | }\n+    | - immutable borrow ends here\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "87e40df7663baacabd7c522321104fc0e7c82a61", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,6 +22,4 @@ fn main() {\n     let mut books = vec![1,2,3];\n     spawn(|| books.push(4));\n     //~^ ERROR E0373\n-    //~| NOTE `books` is borrowed here\n-    //~| NOTE may outlive borrowed value `books`\n }", "previous_filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-1.rs"}, {"sha": "cc0bd15c489ea146791276969c46159d04943088", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:23:11\n+   |\n+23 |     spawn(|| books.push(4));\n+   |           ^^ ----- `books` is borrowed here\n+   |           |\n+   |           may outlive borrowed value `books`\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+23 |     spawn(move || books.push(4));\n+   |           ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "67700be890b1faa8a9c9090fdb0ea8382ddfd854", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,8 +20,6 @@ fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n     let mut books = vec![1,2,3];\n     Box::new(|| books.push(4))\n     //~^ ERROR E0373\n-    //~| NOTE `books` is borrowed here\n-    //~| NOTE may outlive borrowed value `books`\n }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-2.rs"}, {"sha": "f8963c175c8ab10cf50c18e10ab84a6bd57c8a01", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:21:14\n+   |\n+21 |     Box::new(|| books.push(4))\n+   |              ^^ ----- `books` is borrowed here\n+   |              |\n+   |              may outlive borrowed value `books`\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+21 |     Box::new(move || books.push(4))\n+   |              ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "16b0e8638de3916bb720e9e8ebb5f3a751d42cdd", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,9 +11,8 @@\n // check that borrowck looks inside consts/statics\n \n static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n-    let x = Box::new(0); //~ NOTE captured outer variable\n+    let x = Box::new(0);\n     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n-    //~^ NOTE cannot move out of captured outer variable\n };\n \n fn main() {"}, {"sha": "6e47c46cdec946a9dfdde6163fa3e9c50071cc32", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n-14 |     let x = Box::new(0); //~ NOTE captured outer variable\n+14 |     let x = Box::new(0);\n    |         - captured outer variable\n 15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure"}, {"sha": "e0491159a687ebf24b50ff350378d0fdbc7095f3", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,9 +20,9 @@ fn blah() {\n     let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n                            //~| cannot move out\n-        Foo::Foo1(num1,         //~ NOTE to prevent move\n-                  num2) => (),  //~ NOTE and here\n-        Foo::Foo2(num) => (),   //~ NOTE and here\n+        Foo::Foo1(num1,\n+                  num2) => (),\n+        Foo::Foo2(num) => (),\n         Foo::Foo3 => ()\n     }\n }\n@@ -39,8 +39,8 @@ fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n         //~| cannot move out of here\n-            f: _s,  //~ NOTE to prevent move\n-            g: _t   //~ NOTE and here\n+            f: _s,\n+            g: _t\n         } => {}\n     }\n }\n@@ -56,7 +56,7 @@ fn blah2() {\n     let a = &A { a: box 1 };\n     match a.a {           //~ ERROR cannot move out of\n                           //~| cannot move out\n-        n => {            //~ NOTE to prevent move\n+        n => {\n             free(n)\n         }\n     }", "previous_filename": "src/test/compile-fail/borrowck/borrowck-move-error-with-note.rs"}, {"sha": "c16c80345d5136ef32afeaf6a4bfaff0bae7c1a5", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,36 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:21:11\n+   |\n+21 |     match *f {             //~ ERROR cannot move out of\n+   |           ^^ cannot move out of borrowed content\n+22 |                            //~| cannot move out\n+23 |         Foo::Foo1(num1,\n+   |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n+24 |                   num2) => (),\n+   |                   ---- ...and here (use `ref num2` or `ref mut num2`)\n+25 |         Foo::Foo2(num) => (),\n+   |                   --- ...and here (use `ref num` or `ref mut num`)\n+\n+error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:40:9\n+   |\n+40 | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+41 | |         //~| cannot move out of here\n+42 | |             f: _s,\n+   | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n+43 | |             g: _t\n+   | |                -- ...and here (use `ref _t` or `ref mut _t`)\n+44 | |         } => {}\n+   | |_________^ cannot move out of here\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:57:11\n+   |\n+57 |     match a.a {           //~ ERROR cannot move out of\n+   |           ^ cannot move out of borrowed content\n+58 |                           //~| cannot move out\n+59 |         n => {\n+   |         - hint: to prevent move, use `ref n` or `ref mut n`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "938ce3f2cb880d1316964afb30d15fb1a3eba1d2", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -32,7 +32,6 @@ pub fn main() {\n                 //~| cannot move out\n                 //~| to prevent move\n                   Foo { string: b }] => {\n-                    //~^ NOTE and here\n                 }\n                 _ => {\n                     unreachable!();", "previous_filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-vec-tail.rs"}, {"sha": "f99bbb20ccdf15a66507d345900a3c2bdfb733e9", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,17 @@\n+error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:18\n+   |\n+30 |                   &[Foo { string: a },\n+   |                    ^              - hint: to prevent move, use `ref a` or `ref mut a`\n+   |  __________________|\n+   | |\n+31 | |                 //~^ ERROR cannot move out of type `[Foo]`\n+32 | |                 //~| cannot move out\n+33 | |                 //~| to prevent move\n+34 | |                   Foo { string: b }] => {\n+   | |_________________________________-__^ cannot move out of here\n+   |                                   |\n+   |                                   ...and here (use `ref b` or `ref mut b`)\n+\n+error: aborting due to previous error\n+"}, {"sha": "a6553160557e433dace0d71fae72f1eb505c817a", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -17,7 +17,6 @@ fn main() {\n     let z = &x; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here\n }\n-//~^ NOTE mutable borrow ends here\n \n fn foo() {\n     match true {\n@@ -29,7 +28,6 @@ fn foo() {\n             let z = &mut x; //~ ERROR cannot borrow\n             //~^ mutable borrow occurs here\n         }\n-     //~^ NOTE immutable borrow ends here\n         false => ()\n     }\n }\n@@ -43,5 +41,4 @@ fn bar() {\n         let z = &mut x; //~ ERROR cannot borrow\n         //~^ second mutable borrow occurs here\n     };\n- //~^ NOTE first borrow ends here\n }", "previous_filename": "src/test/compile-fail/borrowck/borrowck-report-with-custom-diagnostic.rs"}, {"sha": "fb6917141fc973e364696bfa0dcd1c4c4918f9e8", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,38 @@\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:17:14\n+   |\n+15 |     let y = &mut x;\n+   |                  - mutable borrow occurs here\n+16 |     //~^ mutable borrow occurs here\n+17 |     let z = &x; //~ ERROR cannot borrow\n+   |              ^ immutable borrow occurs here\n+18 |     //~^ immutable borrow occurs here\n+19 | }\n+   | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:28:26\n+   |\n+26 |             let y = &x;\n+   |                      - immutable borrow occurs here\n+27 |             //~^ immutable borrow occurs here\n+28 |             let z = &mut x; //~ ERROR cannot borrow\n+   |                          ^ mutable borrow occurs here\n+29 |             //~^ mutable borrow occurs here\n+30 |         }\n+   |         - immutable borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:41:22\n+   |\n+39 |         let y = &mut x;\n+   |                      - first mutable borrow occurs here\n+40 |         //~^ first mutable borrow occurs here\n+41 |         let z = &mut x; //~ ERROR cannot borrow\n+   |                      ^ second mutable borrow occurs here\n+42 |         //~^ second mutable borrow occurs here\n+43 |     };\n+   |     - first borrow ends here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "07b268f1a4b015a44dd4f5aa5d6b16c99f4b053b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -63,7 +63,7 @@ fn d() {\n     match vec {\n         &mut [ //~ ERROR cannot move out\n         //~^ cannot move out\n-         _b] => {} //~ NOTE to prevent move\n+         _b] => {}\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n@@ -76,9 +76,6 @@ fn e() {\n     match vec {\n         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n         //~| cannot move out\n-        //~| NOTE to prevent move\n-        //~| NOTE and here\n-        //~| NOTE and here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out", "previous_filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs"}, {"sha": "899ffb446b96b85496d644d3a13ff353c3ea053a", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,82 @@\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:21:13\n+   |\n+19 |         [box ref _a, _, _] => {\n+   |              ------ borrow of `vec[..]` occurs here\n+20 |         //~^ borrow of `vec[..]` occurs here\n+21 |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n+\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n+   |\n+31 |         &mut [ref _b..] => {\n+   |               ------ borrow of `vec[..]` occurs here\n+32 |         //~^ borrow of `vec[..]` occurs here\n+33 |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:43:14\n+   |\n+43 |           &mut [_a, //~ ERROR cannot move out\n+   |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n+   |  ______________|\n+   | |\n+44 | |             //~| cannot move out\n+45 | |             //~| to prevent move\n+46 | |             ..\n+47 | |         ] => {\n+   | |_________^ cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:56:13\n+   |\n+56 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:64:14\n+   |\n+64 |           &mut [ //~ ERROR cannot move out\n+   |  ______________^\n+65 | |         //~^ cannot move out\n+66 | |          _b] => {}\n+   | |__________--^ cannot move out of here\n+   |            |\n+   |            hint: to prevent move, use `ref _b` or `ref mut _b`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:69:13\n+   |\n+69 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:77:14\n+   |\n+77 |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |              ^--^^--^^--^\n+   |              ||   |   |\n+   |              ||   |   ...and here (use `ref _c` or `ref mut _c`)\n+   |              ||   ...and here (use `ref _b` or `ref mut _b`)\n+   |              |hint: to prevent move, use `ref _a` or `ref mut _a`\n+   |              cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:81:13\n+   |\n+81 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "cd9f1636c3f4dbe9a065d7f36f8d6266014df6d3", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,10 +16,9 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n+    let y = vec![format!(\"World\")];\n     call(|| {\n         y.into_iter();\n         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure\n-        //~| NOTE cannot move out of\n     });\n }"}, {"sha": "6aa0846f53e262a82bf1a52ea0cbe9db4b3eee3c", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n-19 |     let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n+19 |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n 20 |     call(|| {\n 21 |         y.into_iter();"}, {"sha": "68e26c23e443253c6376bf4b0f3e6d84d4846f6a", "filename": "src/test/ui/cast-as-bool.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let u = 5 as bool;\n     //~^ ERROR cannot cast as `bool`\n-    //~| HELP compare with zero instead\n }", "previous_filename": "src/test/compile-fail/cast-as-bool.rs"}, {"sha": "346ebf07fc3f5d773e895dd5c11e87c893834804", "filename": "src/test/ui/cast-as-bool.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,10 @@\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:12:13\n+   |\n+12 |     let u = 5 as bool;\n+   |             ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "0dac707688d6657abc7803b01595bd5ec876cffd", "filename": "src/test/ui/cast-rfc0401-2.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,5 +15,4 @@\n fn main() {\n     let _ = 3 as bool;\n     //~^ ERROR cannot cast as `bool`\n-    //~| HELP compare with zero\n }", "previous_filename": "src/test/compile-fail/cast-rfc0401-2.rs"}, {"sha": "1febe6a618fdeac46672b2c12ead33a20eaa7f72", "filename": "src/test/ui/cast-rfc0401-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,10 @@\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-rfc0401-2.rs:16:13\n+   |\n+16 |     let _ = 3 as bool;\n+   |             ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "5963a58a2d2f9fc2752a9195ca8b85b3780baec6", "filename": "src/test/ui/changing-crates.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,10 +14,9 @@\n // aux-build:changing-crates-a1.rs\n // aux-build:changing-crates-b.rs\n // aux-build:changing-crates-a2.rs\n+// normalize-stderr-test: \"(crate `(\\w+)`:) .*\" -> \"$1 $$PATH_$2\"\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~| NOTE: the following crate versions were found\n-//~| NOTE: perhaps that crate needs to be recompiled\n \n fn main() {}", "previous_filename": "src/test/compile-fail/changing-crates.rs"}, {"sha": "50287fa3fde9f69bbdd178a4201d4a89a92b6408", "filename": "src/test/ui/changing-crates.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,13 @@\n+error[E0460]: found possibly newer version of crate `a` which `b` depends on\n+  --> $DIR/changing-crates.rs:20:1\n+   |\n+20 | extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: perhaps that crate needs to be recompiled?\n+   = note: the following crate versions were found:\n+           crate `a`: $PATH_a\n+           crate `b`: $PATH_b\n+\n+error: aborting due to previous error\n+"}, {"sha": "9daa76d858ffb0eb677c3c88d06fbbd71e1f0908", "filename": "src/test/ui/closure_context/issue-42065.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,13 +14,10 @@ fn main() {\n     let dict: HashMap<i32, i32> = HashMap::new();\n     let debug_dump_dict = || {\n         for (key, value) in dict {\n-            //~^ NOTE closure cannot be invoked more than once\n             println!(\"{:?} - {:?}\", key, value);\n         }\n     };\n     debug_dump_dict();\n-    //~^ NOTE: value moved here\n     debug_dump_dict();\n     //~^ ERROR use of moved value: `debug_dump_dict`\n-    //~| NOTE value used here after move\n }"}, {"sha": "c195940ade6fa931275e620ca43d705acba29257", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -1,10 +1,9 @@\n error[E0382]: use of moved value: `debug_dump_dict`\n-  --> $DIR/issue-42065.rs:23:5\n+  --> $DIR/issue-42065.rs:21:5\n    |\n-21 |     debug_dump_dict();\n+20 |     debug_dump_dict();\n    |     --------------- value moved here\n-22 |     //~^ NOTE: value moved here\n-23 |     debug_dump_dict();\n+21 |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n note: closure cannot be invoked more than once because it moves the variable `dict` out of its environment"}, {"sha": "56d2455ca2126033e1bf305a7acc2731fce693af", "filename": "src/test/ui/coherence-error-suppression.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/coherence-error-suppression.rs"}, {"sha": "57b746f19e856798ca488ae124d8474e7472597f", "filename": "src/test/ui/coherence-error-suppression.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0412]: cannot find type `DoesNotExist` in this scope\n+  --> $DIR/coherence-error-suppression.rs:19:14\n+   |\n+19 | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+   |              ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+"}, {"sha": "51f43d27c34d20ad5c38127823f600fad416109a", "filename": "src/test/ui/coherence-impls-copy.rs", "status": "renamed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -28,36 +28,22 @@ impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n \n impl Copy for &'static NotSync {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n \n impl Copy for [MyType] {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n-//~| NOTE impl doesn't use types inside crate\n \n impl Copy for &'static [NotSync] {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n \n fn main() {\n }", "previous_filename": "src/test/compile-fail/coherence-impls-copy.rs"}, {"sha": "e5e91df771fdc224a74eb08157236553077224c3", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,59 @@\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:29:15\n+   |\n+29 | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:33:15\n+   |\n+33 | impl Copy for (MyType, MyType) {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:37:15\n+   |\n+37 | impl Copy for &'static NotSync {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:40:15\n+   |\n+40 | impl Copy for [MyType] {}\n+   |               ^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:44:15\n+   |\n+44 | impl Copy for &'static [NotSync] {}\n+   |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:33:1\n+   |\n+33 | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:40:1\n+   |\n+40 | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:44:1\n+   |\n+44 | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "fd6e1d339f383847fd3f2ecfb3afda4bdb69fb20", "filename": "src/test/ui/coherence-overlap-downstream-inherent.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,17 +16,12 @@ pub trait Sugar {}\n pub trait Fruit {}\n impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n trait Bar<X> {}\n struct A<T, X>(T, X);\n impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `f`\n-//~| NOTE downstream crates may implement trait `Bar<_>` for type `i32`\n impl<X> A<i32, X> { fn f(&self) {} }\n-//~^ NOTE other definition for `f`\n \n fn main() {}", "previous_filename": "src/test/compile-fail/coherence-overlap-downstream-inherent.rs"}, {"sha": "aca6800deb5ccb291b38c6aa1744e1273f730e34", "filename": "src/test/ui/coherence-overlap-downstream-inherent.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,22 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:17:26\n+   |\n+17 | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+18 | //~^ ERROR E0592\n+19 | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+   |                          ------------------- other definition for `dummy`\n+\n+error[E0592]: duplicate definitions with name `f`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:23:38\n+   |\n+23 | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+24 | //~^ ERROR E0592\n+25 | impl<X> A<i32, X> { fn f(&self) {} }\n+   |                     -------------- other definition for `f`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "63898ef9a20a7f7fb62784440748abd4a763c2be", "filename": "src/test/ui/coherence-overlap-downstream.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,18 +15,13 @@ pub trait Sugar {}\n pub trait Fruit {}\n pub trait Sweet {}\n impl<T:Sugar> Sweet for T { }\n-//~^ NOTE first implementation here\n impl<T:Fruit> Sweet for T { }\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation\n \n pub trait Foo<X> {}\n pub trait Bar<X> {}\n impl<X, T> Foo<X> for T where T: Bar<X> {}\n-//~^ NOTE first implementation here\n impl<X> Foo<X> for i32 {}\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `i32`\n-//~| NOTE downstream crates may implement trait `Bar<_>` for type `i32`\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-overlap-downstream.rs"}, {"sha": "8a3ef97fd5564b90de27f4152ffab62c5108125e", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,20 @@\n+error[E0119]: conflicting implementations of trait `Sweet`:\n+  --> $DIR/coherence-overlap-downstream.rs:18:1\n+   |\n+17 | impl<T:Sugar> Sweet for T { }\n+   | ----------------------------- first implementation here\n+18 | impl<T:Fruit> Sweet for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+  --> $DIR/coherence-overlap-downstream.rs:24:1\n+   |\n+23 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+   | ------------------------------------------ first implementation here\n+24 | impl<X> Foo<X> for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "94a7bdbc69e41bc735ba1bb0180414748c0d01dc", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,9 +18,6 @@ struct Cake<X>(X);\n \n impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n-//~| NOTE downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-overlap-issue-23516-inherent.rs"}, {"sha": "24d9b26fe9d62b95d6d1ff3dc4169d26a038da4e", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,13 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:19:25\n+   |\n+19 | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+20 | //~^ ERROR E0592\n+21 | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+   |                              ------------------- other definition for `dummy`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3cd184b9be9c6acba2ce9ba86e63d86c8e4bd259", "filename": "src/test/ui/coherence-overlap-issue-23516.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,10 +15,7 @@\n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n impl<T:Sugar> Sweet for T { }\n-//~^ NOTE first implementation here\n impl<U:Sugar> Sweet for Box<U> { }\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `std::boxed::Box<_>`\n-//~| NOTE downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-overlap-issue-23516.rs"}, {"sha": "8e107e06a9e04460af65fc8113c56323e5027331", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+  --> $DIR/coherence-overlap-issue-23516.rs:18:1\n+   |\n+17 | impl<T:Sugar> Sweet for T { }\n+   | ----------------------------- first implementation here\n+18 | impl<U:Sugar> Sweet for Box<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a5a6a88a128bedb727bae02e4ab047158e25a2a5", "filename": "src/test/ui/coherence-overlap-upstream-inherent.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -20,9 +20,6 @@ use coherence_lib::Remote;\n struct A<X>(X);\n impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n-//~| NOTE upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16`\n impl A<i16> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n fn main() {}", "previous_filename": "src/test/compile-fail/coherence-overlap-upstream-inherent.rs"}, {"sha": "db32bcb81c6eed394cb4596abc16436dcdc1a468", "filename": "src/test/ui/coherence-overlap-upstream-inherent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,13 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:21:32\n+   |\n+21 | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+22 | //~^ ERROR E0592\n+23 | impl A<i16> { fn dummy(&self) { } }\n+   |               ------------------- other definition for `dummy`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+"}, {"sha": "f772848cb5869fa57c1717a1702247f370fb7612", "filename": "src/test/ui/coherence-overlap-upstream.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,10 +19,7 @@ use coherence_lib::Remote;\n \n trait Foo {}\n impl<T> Foo for T where T: Remote {}\n-//~^ NOTE first implementation here\n impl Foo for i16 {}\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `i16`\n-//~| NOTE upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16`\n \n fn main() {}", "previous_filename": "src/test/compile-fail/coherence-overlap-upstream.rs"}, {"sha": "48961572b72ca48858ad80419ad2d20f25f1444f", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+  --> $DIR/coherence-overlap-upstream.rs:22:1\n+   |\n+21 | impl<T> Foo for T where T: Remote {}\n+   | ------------------------------------ first implementation here\n+22 | impl Foo for i16 {}\n+   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+"}, {"sha": "fa15f3e87c6947a4083579f9fe5d27afacf227d3", "filename": "src/test/ui/const-deref-ptr.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,6 +12,5 @@\n \n fn main() {\n     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n-                    //~| NOTE dereference of raw pointer in constant\n     println!(\"{}\", C);\n }", "previous_filename": "src/test/compile-fail/const-deref-ptr.rs"}, {"sha": "60f9a3a37ba99ccc05ca6b5ab487dda54fe181ba", "filename": "src/test/ui/const-deref-ptr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0396]: raw pointers cannot be dereferenced in statics\n+  --> $DIR/const-deref-ptr.rs:14:29\n+   |\n+14 |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer in constant\n+\n+error: aborting due to previous error\n+"}, {"sha": "6b7f631ff4c8d2e3cdd354f28baf011af34e54c5", "filename": "src/test/ui/const-eval-overflow-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -24,7 +24,7 @@ const NEG_NEG_128: i8 = -NEG_128;\n \n fn main() {\n     match -128i8 {\n-        NEG_NEG_128 => println!(\"A\"), //~ NOTE for pattern here\n+        NEG_NEG_128 => println!(\"A\"),\n         _ => println!(\"B\"),\n     }\n }", "previous_filename": "src/test/compile-fail/const-eval-overflow-2.rs"}, {"sha": "a9d29d0107192d9863c4d35b415557ee7b0cb8f0", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-eval-overflow-2.rs:21:25\n+   |\n+21 | const NEG_NEG_128: i8 = -NEG_128;\n+   |                         ^^^^^^^^ attempt to negate with overflow\n+   |\n+note: for pattern here\n+  --> $DIR/const-eval-overflow-2.rs:27:9\n+   |\n+27 |         NEG_NEG_128 => println!(\"A\"),\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4423fdec33a85d800a9b248a4004f5ac20d0ec76", "filename": "src/test/ui/const-eval-overflow-4.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,9 +22,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n     //~^ ERROR constant evaluation error\n-    //~^^ NOTE attempt to add with overflow\n     //~| WARNING constant evaluation error\n-    //~| NOTE on by default\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {\n@@ -34,4 +32,3 @@ fn main() {\n fn foo<T:fmt::Debug>(x: T) {\n     println!(\"{:?}\", x);\n }\n-", "previous_filename": "src/test/compile-fail/const-eval-overflow-4.rs"}, {"sha": "98c6ae1b9bcac89d5bc77fd4d777c623bc87d2ef", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,16 @@\n+warning: constant evaluation error: attempt to add with overflow\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n+   |\n+23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n+   |\n+23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0fa1c0b9b47d6b69b21c62bd9ce67da24ea846b", "filename": "src/test/ui/const-eval-span.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,7 +19,6 @@ enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n     //~| expected isize, found struct `S`\n-    //~| NOTE expected type `isize`\n     //~|         found type `S`\n }\n ", "previous_filename": "src/test/compile-fail/const-eval-span.rs"}, {"sha": "e64af57a186499a4a07300e7dd01226a04a5013a", "filename": "src/test/ui/const-eval-span.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-eval-span.rs:19:9\n+   |\n+19 |     V = CONSTANT,\n+   |         ^^^^^^^^ expected isize, found struct `S`\n+   |\n+   = note: expected type `isize`\n+              found type `S`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac1c2fe5432dedf6b6bac401447761afc8aac1aa", "filename": "src/test/ui/const-fn-error.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -24,7 +24,6 @@ const fn f(x: usize) -> usize {\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)]; //~ NOTE for constant expression here\n-    //~| WARNING constant evaluation error: non-constant path\n-    //~| on by default\n+    let a : [i32; f(X)];\n+    //~^ WARNING constant evaluation error: non-constant path\n }", "previous_filename": "src/test/compile-fail/const-fn-error.rs"}, {"sha": "0e275e78fc68c83cd9dcc8f3a60d0c597f88949d", "filename": "src/test/ui/const-fn-error.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,46 @@\n+warning: constant evaluation error: non-constant path in constant expression\n+  --> $DIR/const-fn-error.rs:27:19\n+   |\n+27 |     let a : [i32; f(X)];\n+   |                   ^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+error[E0016]: blocks in constant functions are limited to items and tail expressions\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+16 |     let mut sum = 0; //~ ERROR blocks in constant functions are limited\n+   |                   ^\n+\n+error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n+  --> $DIR/const-fn-error.rs:17:5\n+   |\n+17 | /     for i in 0..x { //~ ERROR calls in constant functions\n+18 | |     //~| ERROR constant function contains unimplemented\n+19 | |         sum += i;\n+20 | |     }\n+   | |_____^\n+\n+error[E0019]: constant function contains unimplemented expression type\n+  --> $DIR/const-fn-error.rs:17:5\n+   |\n+17 | /     for i in 0..x { //~ ERROR calls in constant functions\n+18 | |     //~| ERROR constant function contains unimplemented\n+19 | |         sum += i;\n+20 | |     }\n+   | |_____^\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-fn-error.rs:21:5\n+   |\n+21 |     sum //~ ERROR E0080\n+   |     ^^^ non-constant path in constant expression\n+   |\n+note: for constant expression here\n+  --> $DIR/const-fn-error.rs:27:13\n+   |\n+27 |     let a : [i32; f(X)];\n+   |             ^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4e1fa6bd186eca106e81ec3dfd9790a1021ff034", "filename": "src/test/ui/const-fn-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -22,7 +22,6 @@ trait Foo {\n impl Foo for u32 {\n     const fn f() -> u32 { 22 }\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/const-fn-mismatch.rs"}, {"sha": "4f6a98fb8eb0511dee071c740d1f0a017ce617ca", "filename": "src/test/ui/const-fn-mismatch.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-mismatch.rs:23:5\n+   |\n+23 |     const fn f() -> u32 { 22 }\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: aborting due to previous error\n+"}, {"sha": "1877929173d46cbb13efe8aeab5a3d79e87d1d6b", "filename": "src/test/ui/const-fn-not-in-trait.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,10 +16,8 @@\n trait Foo {\n     const fn f() -> u32;\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n     const fn g() -> u32 { 0 }\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/const-fn-not-in-trait.rs"}, {"sha": "d23bf3b411b28411cb4ec8ad4d6e4e7509d54f2e", "filename": "src/test/ui/const-fn-not-in-trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-not-in-trait.rs:17:5\n+   |\n+17 |     const fn f() -> u32;\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-not-in-trait.rs:19:5\n+   |\n+19 |     const fn g() -> u32 { 0 }\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "823cc988947cb0aeead65453a554c134dfbf5913", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "renamed", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,12 +15,9 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR E0080\n-//~| attempt to subtract with overflow\n-//~| NOTE attempt to subtract with overflow\n-//~| NOTE on by default\n+//~^ ERROR constant evaluation error [E0080]\n+//~| WARN attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n-    //~^ NOTE for constant expression here\n }", "previous_filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs"}, {"sha": "6e6c2130e1ccd50a831cedaff3f5200ae2e576c7", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,22 @@\n+warning: constant evaluation error: attempt to subtract with overflow\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+   |\n+17 | const LEN: usize = ONE - TWO;\n+   |                    ^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+   |\n+17 | const LEN: usize = ONE - TWO;\n+   |                    ^^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: for constant expression here\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+   |\n+22 |     let a: [i8; LEN] = unimplemented!();\n+   |            ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "263c0bdc64c6f40208930ef2a0a3c5b02235efc8", "filename": "src/test/ui/const-pattern-not-const-evaluable.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -34,7 +34,7 @@ const GOO: Cake = foo();\n \n fn main() {\n     match BlackForest {\n-        FOO => println!(\"hi\"), //~ NOTE: for pattern here\n+        FOO => println!(\"hi\"),\n         GOO => println!(\"meh\"),\n         WORKS => println!(\"m\u00f6p\"),\n         _ => println!(\"bye\"),", "previous_filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs"}, {"sha": "5441937e4dd60c8788d327c65d143ee11c2f3cc3", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-pattern-not-const-evaluable.rs:22:31\n+   |\n+22 | const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n+   |                               ^^^^ unimplemented constant expression: tuple struct constructors\n+   |\n+note: for pattern here\n+  --> $DIR/const-pattern-not-const-evaluable.rs:37:9\n+   |\n+37 |         FOO => println!(\"hi\"),\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c6ce34b60ca770d11733b2fd88914429ab352b87", "filename": "src/test/ui/const-unsized.rs", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,23 +12,15 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n fn main() {\n     println!(\"{:?} {:?} {:?} {:?}\", &CONST_0, &CONST_FOO, &STATIC_1, &STATIC_BAR);", "previous_filename": "src/test/compile-fail/const-unsized.rs"}, {"sha": "ba948643a37b0fc472bb9d8d62b0b3aa78dea36a", "filename": "src/test/ui/const-unsized.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:13:29\n+   |\n+13 | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:16:24\n+   |\n+16 | const CONST_FOO: str = *\"foo\";\n+   |                        ^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:19:31\n+   |\n+19 | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:22:26\n+   |\n+22 | static STATIC_BAR: str = *\"bar\";\n+   |                          ^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: constant expressions must have a statically known size\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c3b0276bcf9cba078af046eaf9515c84d901f72f", "filename": "src/test/ui/cycle-trait-supertrait-indirect.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,16 +12,13 @@\n // a direct participant in the cycle.\n \n trait A: B {\n-    //~^ NOTE the cycle begins when computing the supertraits of `B`...\n }\n \n trait B: C {\n-    //~^ NOTE ...which then requires computing the supertraits of `C`...\n }\n \n trait C: B { }\n     //~^ ERROR unsupported cyclic reference\n     //~| cyclic reference\n-    //~| NOTE ...which then again requires computing the supertraits of `B`, completing the cycle\n \n fn main() { }", "previous_filename": "src/test/compile-fail/cycle-trait-supertrait-indirect.rs"}, {"sha": "107644037a9caac62dfde589335872fe253551f8", "filename": "src/test/ui/cycle-trait-supertrait-indirect.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,20 @@\n+error[E0391]: unsupported cyclic reference between types/traits detected\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:20:1\n+   |\n+20 | trait C: B { }\n+   | ^^^^^^^^^^ cyclic reference\n+   |\n+note: the cycle begins when computing the supertraits of `B`...\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:14:1\n+   |\n+14 | trait A: B {\n+   | ^^^^^^^^^^\n+note: ...which then requires computing the supertraits of `C`...\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:17:1\n+   |\n+17 | trait B: C {\n+   | ^^^^^^^^^^\n+   = note: ...which then again requires computing the supertraits of `B`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "dce80698dea396d92202f52ee39bcf5737703def", "filename": "src/test/ui/deprecated-macro_escape-inner.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -12,7 +12,6 @@\n \n mod foo {\n     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n-    //~^ HELP consider an outer attribute\n }\n \n fn main() {"}, {"sha": "7d79c48c06ae2a789da006b3ebd8bbb5198cdefd", "filename": "src/test/ui/derived-errors/issue-31997-1.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -29,7 +29,6 @@ fn main() {\n \n     let mut map = HashMap::new();\n     //~^ ERROR E0433\n-    //~| NOTE Use of undeclared type or module `HashMap`\n \n     for line in input.lines() {\n         let line = line.unwrap();", "previous_filename": "src/test/compile-fail/derived-errors/issue-31997-1.rs"}, {"sha": "732cf9bacbcd1a4eaf19fc5c2eb2c19781035a01", "filename": "src/test/ui/derived-errors/issue-31997-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0433]: failed to resolve. Use of undeclared type or module `HashMap`\n+  --> $DIR/issue-31997-1.rs:30:19\n+   |\n+30 |     let mut map = HashMap::new();\n+   |                   ^^^^^^^ Use of undeclared type or module `HashMap`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f77e77d158cd08c9d18528cec41ee96edfe88c9", "filename": "src/test/ui/discrim-overflow-2.rs", "status": "renamed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -25,8 +25,6 @@ fn f_i8() {\n         Ok = i8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 127i8\n-              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n }\n \n@@ -36,8 +34,6 @@ fn f_u8() {\n         Ok = u8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 255u8\n-              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n }\n \n@@ -47,8 +43,6 @@ fn f_i16() {\n         Ok = i16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 32767i16\n-              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n }\n \n@@ -58,8 +52,6 @@ fn f_u16() {\n         Ok = u16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 65535u16\n-              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n }\n \n@@ -69,8 +61,6 @@ fn f_i32() {\n         Ok = i32::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 2147483647i32\n-              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n }\n \n@@ -80,8 +70,6 @@ fn f_u32() {\n         Ok = u32::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 4294967295u32\n-              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n }\n \n@@ -91,8 +79,6 @@ fn f_i64() {\n         Ok = i64::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 9223372036854775807i64\n-              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n }\n \n@@ -102,8 +88,6 @@ fn f_u64() {\n         Ok = u64::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 18446744073709551615u64\n-              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n }\n ", "previous_filename": "src/test/compile-fail/discrim-overflow-2.rs"}, {"sha": "660110cd73715ff2e7ac9d60f279e883d36a05b6", "filename": "src/test/ui/discrim-overflow-2.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,66 @@\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:27:9\n+   |\n+27 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 127i8\n+   |\n+   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:36:9\n+   |\n+36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 255u8\n+   |\n+   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:45:9\n+   |\n+45 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 32767i16\n+   |\n+   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:54:9\n+   |\n+54 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 65535u16\n+   |\n+   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:63:9\n+   |\n+63 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 2147483647i32\n+   |\n+   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:72:9\n+   |\n+72 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 4294967295u32\n+   |\n+   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:81:9\n+   |\n+81 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |\n+   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:90:9\n+   |\n+90 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 18446744073709551615u64\n+   |\n+   = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "0b31d9f97f174274dc56dca788fa2028ed3f6b88", "filename": "src/test/ui/discrim-overflow.rs", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -23,8 +23,6 @@ fn f_i8() {\n         Ok = i8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 127i8\n-              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -36,8 +34,6 @@ fn f_u8() {\n         Ok = u8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 255u8\n-              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -49,8 +45,6 @@ fn f_i16() {\n         Ok = i16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 32767i16\n-              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -63,7 +57,6 @@ fn f_u16() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 65535u16\n-              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -76,7 +69,6 @@ fn f_i32() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 2147483647i32\n-              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -89,7 +81,6 @@ fn f_u32() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 4294967295u32\n-              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -102,7 +93,6 @@ fn f_i64() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 9223372036854775807i64\n-              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -115,7 +105,6 @@ fn f_u64() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 18446744073709551615u64\n-              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n \n     let x = A::Ok;", "previous_filename": "src/test/compile-fail/discrim-overflow.rs"}, {"sha": "733810006d74af143fe0074271098ffd65573b48", "filename": "src/test/ui/discrim-overflow.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,66 @@\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:25:9\n+   |\n+25 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 127i8\n+   |\n+   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:36:9\n+   |\n+36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 255u8\n+   |\n+   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:47:9\n+   |\n+47 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 32767i16\n+   |\n+   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:58:9\n+   |\n+58 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 65535u16\n+   |\n+   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:70:9\n+   |\n+70 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 2147483647i32\n+   |\n+   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:82:9\n+   |\n+82 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 4294967295u32\n+   |\n+   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:94:9\n+   |\n+94 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |\n+   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+   --> $DIR/discrim-overflow.rs:106:9\n+    |\n+106 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+    |         ^^^^ overflowed on value after 18446744073709551615u64\n+    |\n+    = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "154c9bebb0feab94c748c7d94dce1f1cdb9bfb6e", "filename": "src/test/ui/double-import.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,9 +19,7 @@ mod sub2 {\n     pub fn foo() {} // implementation 2\n }\n \n-use sub1::foo; //~ NOTE previous import of the value `foo` here\n+use sub1::foo;\n use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n-               //~| NOTE `foo` reimported here\n-               //~| NOTE `foo` must be defined only once in the value namespace of this module\n \n fn main() {}", "previous_filename": "src/test/compile-fail/double-import.rs"}, {"sha": "fcd3f2696f200122d19bd51677572e20aecd1190", "filename": "src/test/ui/double-import.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,16 @@\n+error[E0252]: the name `foo` is defined multiple times\n+  --> $DIR/double-import.rs:23:5\n+   |\n+22 | use sub1::foo;\n+   |     --------- previous import of the value `foo` here\n+23 | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n+   |     ^^^^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the value namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+23 | use sub2::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d874a43d53d793ab11a94b947745d1c8bf915457", "filename": "src/test/ui/duplicate-check-macro-exports.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,10 +10,9 @@\n \n #![feature(use_extern_macros)]\n \n-pub use std::panic; //~ NOTE previous macro export here\n+pub use std::panic;\n \n #[macro_export]\n macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n-//~| NOTE `panic` already exported\n \n fn main() {}", "previous_filename": "src/test/compile-fail/duplicate-check-macro-exports.rs"}, {"sha": "4e7176f351888d3fcb66ac7d75197445fd06df8b", "filename": "src/test/ui/duplicate-check-macro-exports.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,14 @@\n+error: a macro named `panic` has already been exported\n+  --> $DIR/duplicate-check-macro-exports.rs:16:1\n+   |\n+16 | macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `panic` already exported\n+   |\n+note: previous macro export here\n+  --> $DIR/duplicate-check-macro-exports.rs:13:9\n+   |\n+13 | pub use std::panic;\n+   |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c33960193b0526b2b677ed5606cb832779294dbb", "filename": "src/test/ui/empty-struct-unit-expr.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -25,9 +25,7 @@ fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n     let e4 = E::Empty4();\n     //~^ ERROR expected function, found `E::Empty4` [E0618]\n-    //~| HELP did you mean to write `E::Empty4`?\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n     let xe4 = XE::XEmpty4();\n     //~^ ERROR expected function, found `XE::XEmpty4` [E0618]\n-    //~| HELP did you mean to write `XE::XEmpty4`?\n }", "previous_filename": "src/test/compile-fail/empty-struct-unit-expr.rs"}, {"sha": "3ce63ed9f423bfd46d61c2b8185f39648bef0f3f", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,41 @@\n+error[E0618]: expected function, found `Empty2`\n+  --> $DIR/empty-struct-unit-expr.rs:25:14\n+   |\n+25 |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+   |              ^^^^^^^^\n+   |\n+note: defined here\n+  --> $DIR/empty-struct-unit-expr.rs:18:1\n+   |\n+18 | struct Empty2;\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0618]: expected function, found `E::Empty4`\n+  --> $DIR/empty-struct-unit-expr.rs:26:14\n+   |\n+26 |     let e4 = E::Empty4();\n+   |              ^^^^^^^^^^^\n+   |\n+   = help: did you mean to write `E::Empty4`?\n+note: defined here\n+  --> $DIR/empty-struct-unit-expr.rs:21:5\n+   |\n+21 |     Empty4\n+   |     ^^^^^^\n+\n+error[E0618]: expected function, found `empty_struct::XEmpty2`\n+  --> $DIR/empty-struct-unit-expr.rs:28:15\n+   |\n+28 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+   |               ^^^^^^^^^\n+\n+error[E0618]: expected function, found `XE::XEmpty4`\n+  --> $DIR/empty-struct-unit-expr.rs:29:15\n+   |\n+29 |     let xe4 = XE::XEmpty4();\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = help: did you mean to write `XE::XEmpty4`?\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "9b6c8712f69b22fd69f2d8384f36e0c44dce90f2", "filename": "src/test/ui/enum-and-module-in-same-scope.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo { //~ NOTE previous definition of the type `Foo` here\n+enum Foo {\n     X\n }\n \n mod Foo { //~ ERROR the name `Foo` is defined multiple times\n-          //~| NOTE `Foo` redefined here\n-          //~| NOTE `Foo` must be defined only once in the type namespace of this module\n     pub static X: isize = 42;\n     fn f() { f() } // Check that this does not result in a resolution error\n }", "previous_filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs"}, {"sha": "723e13f41093c76d65896453c6c1ce31c01a46a8", "filename": "src/test/ui/enum-and-module-in-same-scope.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,18 @@\n+error[E0428]: the name `Foo` is defined multiple times\n+  --> $DIR/enum-and-module-in-same-scope.rs:15:1\n+   |\n+11 | / enum Foo {\n+12 | |     X\n+13 | | }\n+   | |_- previous definition of the type `Foo` here\n+14 | \n+15 | / mod Foo { //~ ERROR the name `Foo` is defined multiple times\n+16 | |     pub static X: isize = 42;\n+17 | |     fn f() { f() } // Check that this does not result in a resolution error\n+18 | | }\n+   | |_^ `Foo` redefined here\n+   |\n+   = note: `Foo` must be defined only once in the type namespace of this module\n+\n+error: aborting due to previous error\n+"}, {"sha": "0802963ad228ffccbca5c6f10a01b817c5d9d94d", "filename": "src/test/ui/fat-ptr-cast.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,14 +18,12 @@ fn main() {\n     let q = a.as_ptr();\n \n     a as usize; //~ ERROR casting\n-    //~^ HELP cast through a raw pointer first\n     a as isize; //~ ERROR casting\n     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n     b as usize; //~ ERROR non-primitive cast\n     p as usize;\n     //~^ ERROR casting\n-    //~^^ HELP cast through a thin pointer\n \n     // #22955\n     q as *const [i32]; //~ ERROR cannot cast", "previous_filename": "src/test/compile-fail/fat-ptr-cast.rs"}, {"sha": "35a97749e0024f3a23c7b8b4f6fff7ede41ce593", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,62 @@\n+error[E0606]: casting `&[i32]` as `usize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:20:5\n+   |\n+20 |     a as usize; //~ ERROR casting\n+   |     ^^^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n+\n+error[E0606]: casting `&[i32]` as `isize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:21:5\n+   |\n+21 |     a as isize; //~ ERROR casting\n+   |     ^^^^^^^^^^\n+\n+error[E0606]: casting `&[i32]` as `i16` is invalid\n+  --> $DIR/fat-ptr-cast.rs:22:5\n+   |\n+22 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n+   |     ^^^^^^^^\n+\n+error[E0606]: casting `&[i32]` as `u32` is invalid\n+  --> $DIR/fat-ptr-cast.rs:23:5\n+   |\n+23 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n+   |     ^^^^^^^^\n+\n+error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n+  --> $DIR/fat-ptr-cast.rs:24:5\n+   |\n+24 |     b as usize; //~ ERROR non-primitive cast\n+   |     ^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error[E0606]: casting `*const [i32]` as `usize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:25:5\n+   |\n+25 |     p as usize;\n+   |     ^^^^^^^^^^\n+   |\n+   = help: cast through a thin pointer first\n+\n+error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]`\n+  --> $DIR/fat-ptr-cast.rs:29:5\n+   |\n+29 |     q as *const [i32]; //~ ERROR cannot cast\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0606]: casting `usize` as `*mut Trait + 'static` is invalid\n+  --> $DIR/fat-ptr-cast.rs:32:37\n+   |\n+32 |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+   |                                     ^^^^^^^^^^^\n+\n+error[E0606]: casting `usize` as `*const str` is invalid\n+  --> $DIR/fat-ptr-cast.rs:33:32\n+   |\n+33 |     let mut fail: *const str = 0 as *const str; //~ ERROR casting\n+   |                                ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "4cb34c8274d8d9d5cdbc1075f15ec390029f467e", "filename": "src/test/ui/feature-gate-decl_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,6 +11,5 @@\n #![allow(unused_macros)]\n \n macro m() {} //~ ERROR `macro` is experimental (see issue #39412)\n-//~| HELP add #![feature(decl_macro)] to the crate attributes to enable\n \n fn main() {}"}, {"sha": "ace9fe9ab2759154178ebca58c182d15902947a1", "filename": "src/test/ui/feature-gate-may-dangle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -17,6 +17,5 @@\n struct Pt<A>(A);\n impl<#[may_dangle] A> Drop for Pt<A> {\n     //~^ ERROR may_dangle has unstable semantics and may be removed in the future\n-    //~| HELP add #![feature(dropck_eyepatch)] to the crate attributes to enable\n     fn drop(&mut self) { }\n }"}, {"sha": "f5753f1c7fbe1bdda05f826a13d46d677e7850cc", "filename": "src/test/ui/feature-gate-repr128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,7 +10,6 @@\n \n #[repr(u128)]\n enum A { //~ ERROR repr with 128-bit type is unstable\n-    //~| HELP: add #![feature(repr128)]\n     A(u64)\n }\n "}, {"sha": "c59964887b58f92a30409d62263bca95d92eea62", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -2,9 +2,8 @@ error: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-repr128.rs:12:1\n    |\n 12 | / enum A { //~ ERROR repr with 128-bit type is unstable\n-13 | |     //~| HELP: add #![feature(repr128)]\n-14 | |     A(u64)\n-15 | | }\n+13 | |     A(u64)\n+14 | | }\n    | |_^\n    |\n    = help: add #![feature(repr128)] to the crate attributes to enable"}, {"sha": "c873fa676008d9905e8fc496b717302760961502", "filename": "src/test/ui/generic-type-less-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,5 +18,4 @@ struct Vec<T, A = Heap>(\n fn main() {\n     let _: Vec;\n     //~^ ERROR wrong number of type arguments: expected at least 1, found 0 [E0243]\n-    //~| NOTE expected at least 1 type argument\n }", "previous_filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs"}, {"sha": "0351923eff65108cfaf42a7a588f177c19e9bc8b", "filename": "src/test/ui/generic-type-less-params-with-defaults.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0243]: wrong number of type arguments: expected at least 1, found 0\n+  --> $DIR/generic-type-less-params-with-defaults.rs:19:12\n+   |\n+19 |     let _: Vec;\n+   |            ^^^ expected at least 1 type argument\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d1b1943ca2203df062fd91a7b7cecb61acf2d36", "filename": "src/test/ui/generic-type-more-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,5 +18,4 @@ struct Vec<T, A = Heap>(\n fn main() {\n     let _: Vec<isize, Heap, bool>;\n     //~^ ERROR wrong number of type arguments: expected at most 2, found 3 [E0244]\n-    //~| NOTE expected at most 2 type arguments\n }", "previous_filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs"}, {"sha": "11ce6b1656ded103a8937415a2d595b358073648", "filename": "src/test/ui/generic-type-more-params-with-defaults.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0244]: wrong number of type arguments: expected at most 2, found 3\n+  --> $DIR/generic-type-more-params-with-defaults.rs:19:12\n+   |\n+19 |     let _: Vec<isize, Heap, bool>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n+\n+error: aborting due to previous error\n+"}, {"sha": "331fdc444ca5a23893cd64df68ea24d0986ff6e2", "filename": "src/test/ui/if-let-arm-types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         //~| expected type `()`\n         //~| found type `{integer}`\n         ()\n-    } else {                //~ NOTE: `if let` arm with an incompatible type\n+    } else {\n         1\n     };\n }", "previous_filename": "src/test/compile-fail/if-let-arm-types.rs"}, {"sha": "fb8e00bfa94eae76d558f9e1bed5a01de2e81e23", "filename": "src/test/ui/if-let-arm-types.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: `if let` arms have incompatible types\n+  --> $DIR/if-let-arm-types.rs:12:5\n+   |\n+12 | /     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n+13 | |         //~^ expected (), found integral variable\n+14 | |         //~| expected type `()`\n+15 | |         //~| found type `{integer}`\n+...  |\n+18 | |         1\n+19 | |     };\n+   | |_____^ expected (), found integral variable\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+note: `if let` arm with an incompatible type\n+  --> $DIR/if-let-arm-types.rs:17:12\n+   |\n+17 |       } else {\n+   |  ____________^\n+18 | |         1\n+19 | |     };\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "884991407512f5cf17faf5ab15b327a97b627c1e", "filename": "src/test/ui/impl-duplicate-methods.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,10 +11,9 @@\n struct Foo;\n \n impl Foo {\n-    fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+    fn orange(&self) {}\n     fn orange(&self) {}\n     //~^ ERROR duplicate definition\n-    //~| NOTE duplicate definition\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/impl-duplicate-methods.rs"}, {"sha": "73d470cc29e563c0e077cea2c9254060ae032e78", "filename": "src/test/ui/impl-duplicate-methods.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,10 @@\n+error[E0201]: duplicate definitions with name `orange`:\n+  --> $DIR/impl-duplicate-methods.rs:15:5\n+   |\n+14 |     fn orange(&self) {}\n+   |     ------------------- previous definition of `orange` here\n+15 |     fn orange(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to previous error\n+"}, {"sha": "705390e3b969c7625be0d7d863073436e9339fce", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -26,17 +26,9 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-    //~| NOTE required because it appears within the type `[closure\n-    //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-    //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-    //~| NOTE required because it appears within the type `[closure\n-    //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-    //~| NOTE required by `send`\n }\n \n // Deferred path, main has to wait until typeck finishes,\n@@ -52,17 +44,12 @@ fn after() -> impl Fn(i32) {\n fn cycle1() -> impl Clone {\n     //~^ ERROR unsupported cyclic reference between types/traits detected\n     //~| cyclic reference\n-    //~| NOTE the cycle begins when processing `cycle1`...\n-    //~| NOTE ...which then requires processing `cycle1::{{impl-Trait}}`...\n-    //~| NOTE ...which then again requires processing `cycle1`, completing the cycle.\n     send(cycle2().clone());\n \n     Rc::new(Cell::new(5))\n }\n \n fn cycle2() -> impl Clone {\n-    //~^ NOTE ...which then requires processing `cycle2::{{impl-Trait}}`...\n-    //~| NOTE ...which then requires processing `cycle2`...\n     send(cycle1().clone());\n \n     Rc::new(String::from(\"foo\"))"}, {"sha": "ffd6a3fe4ffb1fbc240b137bbd6d3bdb39eb6f05", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -10,41 +10,41 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = note: required by `send`\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n-  --> $DIR/auto-trait-leak.rs:34:5\n+  --> $DIR/auto-trait-leak.rs:30:5\n    |\n-34 |     send(after());\n+30 |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:46:5: 46:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n    = note: required by `send`\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n-  --> $DIR/auto-trait-leak.rs:52:1\n+  --> $DIR/auto-trait-leak.rs:44:1\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:52:1\n+  --> $DIR/auto-trait-leak.rs:44:1\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle2::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:63:16\n+  --> $DIR/auto-trait-leak.rs:52:16\n    |\n-63 | fn cycle2() -> impl Clone {\n+52 | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which then requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:63:1\n+  --> $DIR/auto-trait-leak.rs:52:1\n    |\n-63 | fn cycle2() -> impl Clone {\n+52 | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle1::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:52:16\n+  --> $DIR/auto-trait-leak.rs:44:16\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    = note: ...which then again requires processing `cycle1`, completing the cycle.\n "}, {"sha": "79d487493e877b05f84cc32f7c0689b4c06b00f3", "filename": "src/test/ui/impl-trait/issue-21659-show-relevant-trait-impls-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -29,5 +29,4 @@ fn main() {\n \n     f1.foo(1usize);\n     //~^ error: method named `foo` found for type `Bar` in the current scope\n-    //~| help: items from traits can only be used if the trait is implemented and in scope\n }"}, {"sha": "28028922e3286236617165026d8095a94e0c7927", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -18,5 +18,4 @@ fn foo<F>(f: F) where F: FnMut(Foo) {}\n fn main() {\n     foo(|s| s.is_empty());\n     //~^ ERROR no method named `is_empty` found\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n }"}, {"sha": "07c0e6f529f3cef18dfbadc11700251f3dc10adc", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,12 +11,7 @@\n // aux-build:no_method_suggested_traits.rs\n extern crate no_method_suggested_traits;\n \n-struct Foo; //~ HELP perhaps add a `use` for it\n-//~^ HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for one of them\n-//~| HELP perhaps add a `use` for one of them\n+struct Foo;\n enum Bar { X }\n \n mod foo {\n@@ -44,57 +39,41 @@ fn main() {\n \n     'a'.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&'a')).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n \n     1i32.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n \n     Foo.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     1u64.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     no_method_suggested_traits::Foo.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     no_method_suggested_traits::Bar::X.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     Foo.method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     Bar::X.method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     // should have no help:\n     1_usize.method3(); //~ ERROR no method named"}, {"sha": "4517f09d07c32c608ed4f3f15fd136f7de6a7aac", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `method` found for type `u32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:38:10\n+  --> $DIR/no-method-suggested-traits.rs:33:10\n    |\n-38 |     1u32.method();\n+33 |     1u32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -17,9 +17,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:41:44\n+  --> $DIR/no-method-suggested-traits.rs:36:44\n    |\n-41 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n+36 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -35,9 +35,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:45:9\n+  --> $DIR/no-method-suggested-traits.rs:40:9\n    |\n-45 |     'a'.method();\n+40 |     'a'.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -47,9 +47,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:48:43\n+  --> $DIR/no-method-suggested-traits.rs:42:43\n    |\n-48 |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n+42 |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -59,9 +59,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:52:10\n+  --> $DIR/no-method-suggested-traits.rs:45:10\n    |\n-52 |     1i32.method();\n+45 |     1i32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -71,9 +71,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:55:44\n+  --> $DIR/no-method-suggested-traits.rs:47:44\n    |\n-55 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n+47 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -83,12 +83,12 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:59:9\n+  --> $DIR/no-method-suggested-traits.rs:50:9\n    |\n-14 | struct Foo; //~ HELP perhaps add a `use` for it\n+14 | struct Foo;\n    | ----------- method `method` not found for this\n ...\n-59 |     Foo.method();\n+50 |     Foo.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -101,9 +101,9 @@ error[E0599]: no method named `method` found for type `Foo` in the current scope\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:62:43\n+  --> $DIR/no-method-suggested-traits.rs:52:43\n    |\n-62 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n+52 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -116,146 +116,146 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method2` found for type `u64` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:66:10\n+  --> $DIR/no-method-suggested-traits.rs:55:10\n    |\n-66 |     1u64.method2();\n+55 |     1u64.method2();\n    |          ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:69:44\n+  --> $DIR/no-method-suggested-traits.rs:57:44\n    |\n-69 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n+57 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n    |                                            ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:73:37\n+  --> $DIR/no-method-suggested-traits.rs:60:37\n    |\n-73 |     no_method_suggested_traits::Foo.method2();\n+60 |     no_method_suggested_traits::Foo.method2();\n    |                                     ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:76:71\n+  --> $DIR/no-method-suggested-traits.rs:62:71\n    |\n-76 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n+62 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n    |                                                                       ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Bar` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:79:40\n+  --> $DIR/no-method-suggested-traits.rs:64:40\n    |\n-79 |     no_method_suggested_traits::Bar::X.method2();\n+64 |     no_method_suggested_traits::Bar::X.method2();\n    |                                        ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:82:74\n+  --> $DIR/no-method-suggested-traits.rs:66:74\n    |\n-82 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n+66 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n    |                                                                          ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method3` found for type `Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:86:9\n+  --> $DIR/no-method-suggested-traits.rs:69:9\n    |\n-14 | struct Foo; //~ HELP perhaps add a `use` for it\n+14 | struct Foo;\n    | ----------- method `method3` not found for this\n ...\n-86 |     Foo.method3();\n+69 |     Foo.method3();\n    |         ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:89:43\n+  --> $DIR/no-method-suggested-traits.rs:71:43\n    |\n-89 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n+71 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n    |                                           ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `Bar` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:92:12\n+  --> $DIR/no-method-suggested-traits.rs:73:12\n    |\n-20 | enum Bar { X }\n+15 | enum Bar { X }\n    | -------- method `method3` not found for this\n ...\n-92 |     Bar::X.method3();\n+73 |     Bar::X.method3();\n    |            ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Bar>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:95:46\n+  --> $DIR/no-method-suggested-traits.rs:75:46\n    |\n-95 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n+75 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n    |                                              ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `usize` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:100:13\n-    |\n-100 |     1_usize.method3(); //~ ERROR no method named\n-    |             ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:79:13\n+   |\n+79 |     1_usize.method3(); //~ ERROR no method named\n+   |             ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&usize>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:101:47\n-    |\n-101 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n-    |                                               ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:80:47\n+   |\n+80 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n+   |                                               ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Foo` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:102:37\n-    |\n-102 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n-    |                                     ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:81:37\n+   |\n+81 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n+   |                                     ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:103:71\n-    |\n-103 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n-    |                                                                       ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:82:71\n+   |\n+82 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n+   |                                                                       ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Bar` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:105:40\n-    |\n-105 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n-    |                                        ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:84:40\n+   |\n+84 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n+   |                                        ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:106:74\n-    |\n-106 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n-    |                                                                          ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:85:74\n+   |\n+85 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n+   |                                                                          ^^^^^^^\n \n error: aborting due to 24 previous errors\n "}, {"sha": "23401db21d89063643045ccf10d4fcac92783807", "filename": "src/test/ui/impl-unused-rps-in-assoc-type.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,7 +19,6 @@ trait Fun {\n struct Holder { x: String }\n \n impl<'a> Fun for Holder { //~ ERROR E0207\n-                          //~| NOTE unconstrained lifetime parameter\n     type Output = &'a str;\n     fn call<'b>(&'b self) -> &'b str {\n         &self.x[..]", "previous_filename": "src/test/compile-fail/impl-unused-rps-in-assoc-type.rs"}, {"sha": "ec261ed63b1e826f6421edd6c1341d30408d2793", "filename": "src/test/ui/impl-unused-rps-in-assoc-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/impl-unused-rps-in-assoc-type.rs:21:6\n+   |\n+21 | impl<'a> Fun for Holder { //~ ERROR E0207\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "2ac8e3ef983da48c0e165dc406c121c1ed00f897", "filename": "src/test/ui/imports/auxiliary/two_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/imports/auxiliary/two_macros.rs"}, {"sha": "dd2dcbe2e68085804943bfef944f1142225baa75", "filename": "src/test/ui/imports/duplicate.rs", "status": "renamed", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -21,10 +21,8 @@ mod c {\n }\n \n mod d {\n-    use a::foo; //~ NOTE previous import of the value `foo` here\n+    use a::foo;\n     use a::foo; //~ ERROR the name `foo` is defined multiple times\n-                //~| NOTE `foo` reimported here\n-                //~| NOTE `foo` must be defined only once in the value namespace of this module\n }\n \n mod e {\n@@ -33,37 +31,31 @@ mod e {\n }\n \n mod f {\n-    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n-    pub use b::*; //~ NOTE `foo` could also refer to the name imported here\n+    pub use a::*;\n+    pub use b::*;\n }\n \n mod g {\n-    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n-    pub use f::*; //~ NOTE `foo` could also refer to the name imported here\n+    pub use a::*;\n+    pub use f::*;\n }\n \n fn main() {\n     e::foo();\n     f::foo(); //~ ERROR `foo` is ambiguous\n-              //~| NOTE consider adding an explicit import of `foo` to disambiguate\n     g::foo(); //~ ERROR `foo` is ambiguous\n-              //~| NOTE consider adding an explicit import of `foo` to disambiguate\n }\n \n mod ambiguous_module_errors {\n     pub mod m1 { pub use super::m1 as foo; }\n     pub mod m2 { pub use super::m2 as foo; }\n \n-    use self::m1::*; //~ NOTE\n-                     //~| NOTE\n-    use self::m2::*; //~ NOTE\n-                     //~| NOTE\n+    use self::m1::*;\n+    use self::m2::*;\n \n     use self::foo::bar; //~ ERROR `foo` is ambiguous\n-                        //~| NOTE\n \n     fn f() {\n         foo::bar(); //~ ERROR `foo` is ambiguous\n-                    //~| NOTE\n     }\n }", "previous_filename": "src/test/compile-fail/imports/duplicate.rs"}, {"sha": "30f2f517115f49ad83381ac6c212ff8acf1a3adf", "filename": "src/test/ui/imports/duplicate.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,88 @@\n+error[E0252]: the name `foo` is defined multiple times\n+  --> $DIR/duplicate.rs:25:9\n+   |\n+24 |     use a::foo;\n+   |         ------ previous import of the value `foo` here\n+25 |     use a::foo; //~ ERROR the name `foo` is defined multiple times\n+   |         ^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the value namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+25 |     use a::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:56:9\n+   |\n+56 |     use self::foo::bar; //~ ERROR `foo` is ambiguous\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:53:9\n+   |\n+53 |     use self::m1::*;\n+   |         ^^^^^^^^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:54:9\n+   |\n+54 |     use self::m2::*;\n+   |         ^^^^^^^^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:45:5\n+   |\n+45 |     f::foo(); //~ ERROR `foo` is ambiguous\n+   |     ^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:34:13\n+   |\n+34 |     pub use a::*;\n+   |             ^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:35:13\n+   |\n+35 |     pub use b::*;\n+   |             ^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:46:5\n+   |\n+46 |     g::foo(); //~ ERROR `foo` is ambiguous\n+   |     ^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:39:13\n+   |\n+39 |     pub use a::*;\n+   |             ^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:40:13\n+   |\n+40 |     pub use f::*;\n+   |             ^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:59:9\n+   |\n+59 |         foo::bar(); //~ ERROR `foo` is ambiguous\n+   |         ^^^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:53:9\n+   |\n+53 |     use self::m1::*;\n+   |         ^^^^^^^^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:54:9\n+   |\n+54 |     use self::m2::*;\n+   |         ^^^^^^^^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "88a6e1c0d92e66283fd6a2d365f5150002e163ed", "filename": "src/test/ui/imports/macro-paths.rs", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -21,20 +21,18 @@ mod foo {\n }\n \n fn f() {\n-    use foo::*; //~ NOTE could also refer to the name imported here\n+    use foo::*;\n     bar::m! { //~ ERROR ambiguous\n-              //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod bar { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+        mod bar { pub use two_macros::m; }\n     }\n }\n \n-pub mod baz { //~ NOTE could also refer to the name defined here\n+pub mod baz {\n     pub use two_macros::m;\n }\n \n fn g() {\n     baz::m! { //~ ERROR ambiguous\n-              //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod baz { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+        mod baz { pub use two_macros::m; }\n     }\n }", "previous_filename": "src/test/compile-fail/imports/macro-paths.rs"}, {"sha": "91b0b9756dad93066c1ea1e9a19e8aa0f4f9e8b6", "filename": "src/test/ui/imports/macro-paths.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,42 @@\n+error: `bar` is ambiguous\n+  --> $DIR/macro-paths.rs:25:5\n+   |\n+25 |     bar::m! { //~ ERROR ambiguous\n+   |     ^^^^^^\n+   |\n+note: `bar` could refer to the name defined here\n+  --> $DIR/macro-paths.rs:26:9\n+   |\n+26 |         mod bar { pub use two_macros::m; }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `bar` could also refer to the name imported here\n+  --> $DIR/macro-paths.rs:24:9\n+   |\n+24 |     use foo::*;\n+   |         ^^^^^^\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error: `baz` is ambiguous\n+  --> $DIR/macro-paths.rs:35:5\n+   |\n+35 |     baz::m! { //~ ERROR ambiguous\n+   |     ^^^^^^\n+   |\n+note: `baz` could refer to the name defined here\n+  --> $DIR/macro-paths.rs:36:9\n+   |\n+36 |         mod baz { pub use two_macros::m; }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `baz` could also refer to the name defined here\n+  --> $DIR/macro-paths.rs:30:1\n+   |\n+30 | / pub mod baz {\n+31 | |     pub use two_macros::m;\n+32 | | }\n+   | |_^\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "98577d73ee0f6008f5a95d64cc715ce1a1a31149", "filename": "src/test/ui/imports/macros.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -24,30 +24,28 @@ mod m1 {\n }\n \n mod m2 {\n-    use two_macros::*; //~ NOTE could also refer\n+    use two_macros::*;\n     m! { //~ ERROR ambiguous\n-         //~| NOTE macro-expanded macro imports do not shadow\n-        use foo::m; //~ NOTE could refer to the name imported here\n+        use foo::m;\n     }\n }\n \n mod m3 {\n-    use two_macros::m; //~ NOTE could also refer\n+    use two_macros::m;\n     fn f() {\n         use two_macros::n as m; // This shadows the above import\n         m!();\n     }\n \n     fn g() {\n         m! { //~ ERROR ambiguous\n-             //~| NOTE macro-expanded macro imports do not shadow\n-            use two_macros::n as m; //~ NOTE could refer to the name imported here\n+            use two_macros::n as m;\n         }\n     }\n }\n \n mod m4 {\n-    macro_rules! m { () => {} } //~ NOTE could refer to the macro defined here\n-    use two_macros::m; //~ NOTE could also refer to the macro imported here\n+    macro_rules! m { () => {} }\n+    use two_macros::m;\n     m!(); //~ ERROR ambiguous\n }", "previous_filename": "src/test/compile-fail/imports/macros.rs"}, {"sha": "0b67613eb14b63efe6306df2ff7e6249ad69ade3", "filename": "src/test/ui/imports/macros.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,57 @@\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:50:5\n+   |\n+50 |     m!(); //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `m` could refer to the macro defined here\n+  --> $DIR/macros.rs:48:5\n+   |\n+48 |     macro_rules! m { () => {} }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the macro imported here\n+  --> $DIR/macros.rs:49:9\n+   |\n+49 |     use two_macros::m;\n+   |         ^^^^^^^^^^^^^\n+\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:28:5\n+   |\n+28 |     m! { //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `m` could refer to the name imported here\n+  --> $DIR/macros.rs:29:13\n+   |\n+29 |         use foo::m;\n+   |             ^^^^^^\n+note: `m` could also refer to the name imported here\n+  --> $DIR/macros.rs:27:9\n+   |\n+27 |     use two_macros::*;\n+   |         ^^^^^^^^^^^^^\n+   = note: macro-expanded macro imports do not shadow\n+\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:41:9\n+   |\n+41 |         m! { //~ ERROR ambiguous\n+   |         ^\n+   |\n+note: `m` could refer to the name imported here\n+  --> $DIR/macros.rs:42:17\n+   |\n+42 |             use two_macros::n as m;\n+   |                 ^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the name imported here\n+  --> $DIR/macros.rs:34:9\n+   |\n+34 |     use two_macros::m;\n+   |         ^^^^^^^^^^^^^\n+   = note: macro-expanded macro imports do not shadow\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f94fc3633e341819ebbb7e1f8a5bd857c8d47f54", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -16,13 +16,11 @@ mod bar {\n     struct Foo;\n \n     mod baz {\n-        use *; //~ NOTE `Foo` could refer to the name imported here\n-        use bar::*; //~ NOTE `Foo` could also refer to the name imported here\n+        use *;\n+        use bar::*;\n         fn f(_: Foo) {}\n         //~^ ERROR `Foo` is ambiguous\n         //~| WARN hard error in a future release\n-        //~| NOTE see issue #38260\n-        //~| NOTE #[deny(legacy_imports)] on by default\n     }\n }\n ", "previous_filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs"}, {"sha": "1fec73112721d08ba1c1a1f5e520dfe00b11bbe2", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,16 @@\n+error: `Foo` is ambiguous\n+  --> $DIR/rfc-1560-warning-cycle.rs:21:17\n+   |\n+19 |         use *;\n+   |             - `Foo` could refer to the name imported here\n+20 |         use bar::*;\n+   |             ------ `Foo` could also refer to the name imported here\n+21 |         fn f(_: Foo) {}\n+   |                 ^^^\n+   |\n+   = note: #[deny(legacy_imports)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+\n+error: aborting due to previous error\n+"}, {"sha": "93de136c4051d6875345c8e420cd38e9048961d7", "filename": "src/test/ui/imports/shadow_builtin_macros.rs", "status": "renamed", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -23,17 +23,13 @@ mod m1 {\n }\n \n mod m2 {\n-    use foo::*; //~ NOTE `panic` could refer to the name imported here\n+    use foo::*;\n     fn f() { panic!(); } //~ ERROR ambiguous\n-    //~| NOTE `panic` is also a builtin macro\n-    //~| NOTE consider adding an explicit import of `panic` to disambiguate\n }\n \n mod m3 {\n-    ::two_macros::m!(use foo::panic;); //~ NOTE `panic` could refer to the name imported here\n+    ::two_macros::m!(use foo::panic;);\n     fn f() { panic!(); } //~ ERROR ambiguous\n-    //~| NOTE `panic` is also a builtin macro\n-    //~| NOTE macro-expanded macro imports do not shadow\n }\n \n mod m4 {\n@@ -44,14 +40,12 @@ mod m4 {\n mod m5 {\n     macro_rules! m { () => {\n         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n-        //~| NOTE macro-expanded `macro_rules!`s may not shadow existing macros\n     } }\n-    m!(); //~ NOTE in this expansion\n-    //~| NOTE in this expansion\n+    m!();\n     panic!();\n }\n \n-#[macro_use(n)] //~ NOTE `n` could also refer to the name imported here\n+#[macro_use(n)]\n extern crate two_macros;\n mod bar {\n     pub use two_macros::m as n;\n@@ -63,9 +57,8 @@ mod m6 {\n }\n \n mod m7 {\n-    use bar::*; //~ NOTE `n` could refer to the name imported here\n+    use bar::*;\n     n!(); //~ ERROR ambiguous\n-    //~| NOTE consider adding an explicit import of `n` to disambiguate\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/imports/shadow_builtin_macros.rs"}, {"sha": "853ed98c30d4dce672bc10ba3eb0ee8b272d8375", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,59 @@\n+error: `panic` is already in scope\n+  --> $DIR/shadow_builtin_macros.rs:42:9\n+   |\n+42 |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+43 |     } }\n+44 |     m!();\n+   |     ----- in this macro invocation\n+   |\n+   = note: macro-expanded `macro_rules!`s may not shadow existing macros (see RFC 1560)\n+\n+error: `panic` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:27:14\n+   |\n+27 |     fn f() { panic!(); } //~ ERROR ambiguous\n+   |              ^^^^^\n+   |\n+note: `panic` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:26:9\n+   |\n+26 |     use foo::*;\n+   |         ^^^^^^\n+   = note: `panic` is also a builtin macro\n+   = note: consider adding an explicit import of `panic` to disambiguate\n+\n+error: `panic` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:32:14\n+   |\n+32 |     fn f() { panic!(); } //~ ERROR ambiguous\n+   |              ^^^^^\n+   |\n+note: `panic` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:31:26\n+   |\n+31 |     ::two_macros::m!(use foo::panic;);\n+   |                          ^^^^^^^^^^\n+   = note: `panic` is also a builtin macro\n+   = note: macro-expanded macro imports do not shadow\n+\n+error: `n` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:61:5\n+   |\n+61 |     n!(); //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `n` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:60:9\n+   |\n+60 |     use bar::*;\n+   |         ^^^^^^\n+note: `n` could also refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:48:13\n+   |\n+48 | #[macro_use(n)]\n+   |             ^\n+   = note: consider adding an explicit import of `n` to disambiguate\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "330a9213bc71dbf2a5a296110777fa749a141129", "filename": "src/test/ui/impossible_range.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -19,9 +19,7 @@ pub fn main() {\n     0..1;\n \n     ..=; //~ERROR inclusive range with no end\n-         //~^HELP bounded at the end\n     0..=; //~ERROR inclusive range with no end\n-          //~^HELP bounded at the end\n     ..=1;\n     0..=1;\n }", "previous_filename": "src/test/compile-fail/impossible_range.rs"}, {"sha": "75c6d859621ab7d12a145c7c4f1fb9193e838512", "filename": "src/test/ui/impossible_range.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,18 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/impossible_range.rs:21:8\n+   |\n+21 |     ..=; //~ERROR inclusive range with no end\n+   |        ^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/impossible_range.rs:22:9\n+   |\n+22 |     0..=; //~ERROR inclusive range with no end\n+   |         ^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4a64d6c4cc5181c1300e3a21def17e018e1e991a", "filename": "src/test/ui/index-help.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Findex-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Findex-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let x = vec![1];\n     x[0i32]; //~ ERROR E0277\n-             //~| NOTE vector indices are of type `usize` or ranges of `usize`\n }", "previous_filename": "src/test/compile-fail/index-help.rs"}, {"sha": "e1652b6c262c7820f3724c1ff94feddc3bacabd7", "filename": "src/test/ui/index-help.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,10 @@\n+error[E0277]: the trait bound `std::vec::Vec<{integer}>: std::ops::Index<i32>` is not satisfied\n+  --> $DIR/index-help.rs:13:5\n+   |\n+13 |     x[0i32]; //~ ERROR E0277\n+   |     ^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::ops::Index<i32>` is not implemented for `std::vec::Vec<{integer}>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab839e7630de907904093b4f3ac54e70285a7f0b", "filename": "src/test/ui/invalid-path-in-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Finvalid-path-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Finvalid-path-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-path-in-const.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "previous_filename": "src/test/compile-fail/invalid-path-in-const.rs"}, {"sha": "be1de60bca559c82e1313aecd664eace303b4ec4", "filename": "src/test/ui/invalid-path-in-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,8 @@\n+error[E0599]: no associated item named `DOESNOTEXIST` found for type `u32` in the current scope\n+  --> $DIR/invalid-path-in-const.rs:12:18\n+   |\n+12 |     fn f(a: [u8; u32::DOESNOTEXIST]) {}\n+   |                  ^^^^^^^^^^^^^^^^^ associated item not found in `u32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4ab4a8b579abc2f532159607f45d9b54780c400b", "filename": "src/test/ui/issue-10969.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-10969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-10969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn func(i: i32) { //~NOTE defined here\n+fn func(i: i32) {\n     i(); //~ERROR expected function, found `i32`\n }\n fn main() {\n-    let i = 0i32; //~NOTE defined here\n+    let i = 0i32;\n     i(); //~ERROR expected function, found `i32`\n }", "previous_filename": "src/test/compile-fail/issue-10969.rs"}, {"sha": "8aea63e0bbdaa3f0656d98f929a8c32405c05917", "filename": "src/test/ui/issue-10969.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.stderr?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -0,0 +1,26 @@\n+error[E0618]: expected function, found `i32`\n+  --> $DIR/issue-10969.rs:12:5\n+   |\n+12 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^\n+   |\n+note: defined here\n+  --> $DIR/issue-10969.rs:11:9\n+   |\n+11 | fn func(i: i32) {\n+   |         ^\n+\n+error[E0618]: expected function, found `i32`\n+  --> $DIR/issue-10969.rs:16:5\n+   |\n+16 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^\n+   |\n+note: defined here\n+  --> $DIR/issue-10969.rs:15:9\n+   |\n+15 |     let i = 0i32;\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "503fa64751274e027a3ce6c67ed72ed8be6cc56c", "filename": "src/test/ui/issue-11004.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f351415e53b9214d9a536f84f232a58f46698b6/src%2Ftest%2Fui%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.rs?ref=2f351415e53b9214d9a536f84f232a58f46698b6", "patch": "@@ -15,9 +15,7 @@ struct A { x: i32, y: f64 }\n #[cfg(not(works))]\n unsafe fn access(n:*mut A) -> (i32, f64) {\n     let x : i32 = n.x; //~ no field `x` on type `*mut A`\n-                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).x`\n     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n-                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).y`\n     (x, y)\n }\n ", "previous_filename": "src/test/compile-fail/issue-11004.rs"}]}