{"sha": "51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTFjNjQzN2U2NGNkZjdmYTZjNzVhM2JmYjJiYjNmNTdkNzMxM2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-16T20:36:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "conservative_is_uninhabited implies abi.is_uninhabited", "tree": {"sha": "6e710f2003d54754d8decd74c1d8ba4b79cbf224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e710f2003d54754d8decd74c1d8ba4b79cbf224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "html_url": "https://github.com/rust-lang/rust/commit/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d065a499417e03ac8e3ab0f48aeddbe13741a2b4", "html_url": "https://github.com/rust-lang/rust/commit/d065a499417e03ac8e3ab0f48aeddbe13741a2b4"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "c210372c4e7bbe38b77e1da32d9d56847520cb54", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "patch": "@@ -191,7 +191,14 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         ty::tls::enter_context(&icx, |_| {\n             let cx = LayoutCx { tcx, param_env };\n-            cx.layout_raw_uncached(ty)\n+            let layout = cx.layout_raw_uncached(ty);\n+            // Type-level uninhabitedness should always imply ABI uninhabitedness.\n+            if let Ok(layout) = layout {\n+                if ty.conservative_is_uninhabited(tcx) {\n+                    assert!(layout.abi.is_uninhabited());\n+                }\n+            }\n+            layout\n         })\n     })\n }\n@@ -205,12 +212,11 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n \n pub struct LayoutCx<'tcx, C> {\n     pub tcx: C,\n-    pub param_env: ty::ParamEnv<'tcx>\n+    pub param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n-    fn layout_raw_uncached(&self, ty: Ty<'tcx>)\n-                           -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n+    fn layout_raw_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n         let tcx = self.tcx;\n         let param_env = self.param_env;\n         let dl = self.data_layout();"}]}