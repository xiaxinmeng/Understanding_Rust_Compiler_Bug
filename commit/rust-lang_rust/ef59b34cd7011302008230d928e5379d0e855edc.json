{"sha": "ef59b34cd7011302008230d928e5379d0e855edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNTliMzRjZDcwMTEzMDIwMDgyMzBkOTI4ZTUzNzlkMGU4NTVlZGM=", "commit": {"author": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-13T12:05:54Z"}, "committer": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-13T17:12:43Z"}, "message": "Avoid control flow expressions conditions to go multi line\n\nExtends the multi line condition to over other control flow\nexpressions, it now covers: `if`, `if let`, `for`, `loop`, `while`,\n`while let` and `match`.\n\nRefs: #3029\n\nSigned-off-by: Otavio Salvador <otavio@ossystems.com.br>", "tree": {"sha": "0ab5962160f21be6f2894c14790f698a3fda8e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab5962160f21be6f2894c14790f698a3fda8e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef59b34cd7011302008230d928e5379d0e855edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef59b34cd7011302008230d928e5379d0e855edc", "html_url": "https://github.com/rust-lang/rust/commit/ef59b34cd7011302008230d928e5379d0e855edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef59b34cd7011302008230d928e5379d0e855edc/comments", "author": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8feeddf1f88cb3753b51c894cffea4f11b0036d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8feeddf1f88cb3753b51c894cffea4f11b0036d3", "html_url": "https://github.com/rust-lang/rust/commit/8feeddf1f88cb3753b51c894cffea4f11b0036d3"}], "stats": {"total": 188, "additions": 171, "deletions": 17}, "files": [{"sha": "fc1803b2ab6af98802e5732c35bad0ac0b51b337", "filename": "src/overflow.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef59b34cd7011302008230d928e5379d0e855edc/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59b34cd7011302008230d928e5379d0e855edc/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=ef59b34cd7011302008230d928e5379d0e855edc", "patch": "@@ -404,7 +404,15 @@ impl<'a> Context<'a> {\n                             closures::rewrite_last_closure(self.context, expr, shape)\n                         }\n                     }\n-                    ast::ExprKind::Match(..) => {\n+                    // When overflowing the expressions which consists of a control flow\n+                    // expression, avoid condition to use multi line.\n+                    ast::ExprKind::If(..)\n+                    | ast::ExprKind::IfLet(..)\n+                    | ast::ExprKind::ForLoop(..)\n+                    | ast::ExprKind::Loop(..)\n+                    | ast::ExprKind::While(..)\n+                    | ast::ExprKind::WhileLet(..)\n+                    | ast::ExprKind::Match(..) => {\n                         let multi_line = rewrite_cond(self.context, expr, shape)\n                             .map_or(false, |cond| cond.contains('\\n'));\n "}, {"sha": "a7ac5c32b066f3380cf35610d44075412f17f0e4", "filename": "tests/source/issue-3029.rs", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ef59b34cd7011302008230d928e5379d0e855edc/tests%2Fsource%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59b34cd7011302008230d928e5379d0e855edc/tests%2Fsource%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3029.rs?ref=ef59b34cd7011302008230d928e5379d0e855edc", "patch": "@@ -1,13 +1,86 @@\n-fn foo() {\n-    EvaluateJSReply::NumberValue(\n-        match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n-            Ok(ConversionResult::Success(v)) => v,\n-            _ => unreachable!(),\n-        },\n-    )\n+fn keep_if() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_if_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_for() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    for conv in FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_loop() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(loop {\n+                    FromJSValConvertible::from_jsval(cx, rval.handle(), ());\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n }\n \n-fn bar() {\n+fn keep_match() {\n     {\n         {\n             EvaluateJSReply::NumberValue("}, {"sha": "a7ac5c32b066f3380cf35610d44075412f17f0e4", "filename": "tests/target/issue-3029.rs", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ef59b34cd7011302008230d928e5379d0e855edc/tests%2Ftarget%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59b34cd7011302008230d928e5379d0e855edc/tests%2Ftarget%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3029.rs?ref=ef59b34cd7011302008230d928e5379d0e855edc", "patch": "@@ -1,13 +1,86 @@\n-fn foo() {\n-    EvaluateJSReply::NumberValue(\n-        match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n-            Ok(ConversionResult::Success(v)) => v,\n-            _ => unreachable!(),\n-        },\n-    )\n+fn keep_if() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_if_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_for() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    for conv in FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_loop() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(loop {\n+                    FromJSValConvertible::from_jsval(cx, rval.handle(), ());\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n }\n \n-fn bar() {\n+fn keep_match() {\n     {\n         {\n             EvaluateJSReply::NumberValue("}]}