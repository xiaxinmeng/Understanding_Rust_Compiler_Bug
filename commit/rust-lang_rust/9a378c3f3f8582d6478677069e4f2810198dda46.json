{"sha": "9a378c3f3f8582d6478677069e4f2810198dda46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMzc4YzNmM2Y4NTgyZDY0Nzg2NzcwNjllNGYyODEwMTk4ZGRhNDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-16T12:27:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-17T08:57:20Z"}, "message": "Fix transmute of non-scalar to scalar\n\nFixes #967", "tree": {"sha": "970597e2d0c7313ae7317748c363dbfe33377264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970597e2d0c7313ae7317748c363dbfe33377264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a378c3f3f8582d6478677069e4f2810198dda46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a378c3f3f8582d6478677069e4f2810198dda46", "html_url": "https://github.com/rust-lang/rust/commit/9a378c3f3f8582d6478677069e4f2810198dda46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a378c3f3f8582d6478677069e4f2810198dda46/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78f851ea40f0c03095368e6fae6e92a2d3062de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78f851ea40f0c03095368e6fae6e92a2d3062de", "html_url": "https://github.com/rust-lang/rust/commit/a78f851ea40f0c03095368e6fae6e92a2d3062de"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "5779009535b6413b3a8f5e0df55ba041104785d7", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a378c3f3f8582d6478677069e4f2810198dda46/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a378c3f3f8582d6478677069e4f2810198dda46/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=9a378c3f3f8582d6478677069e4f2810198dda46", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> CValue<'tcx> {\n                         scalar_to_clif_type(fx.tcx, element.clone())\n                             .by(u16::try_from(count).unwrap()).unwrap()\n                     }\n-                    _ => unreachable!(),\n+                    _ => unreachable!(\"{:?}\", layout.ty),\n                 };\n                 ptr.load(fx, clif_ty, MemFlags::new())\n             }\n@@ -458,7 +458,7 @@ impl<'tcx> CPlace<'tcx> {\n         let dst_layout = self.layout();\n         let to_ptr = match self.inner {\n             CPlaceInner::Var(var) => {\n-                let data = from.load_scalar(fx);\n+                let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let src_ty = fx.bcx.func.dfg.value_type(data);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n                 let data = match (src_ty, dst_ty) {\n@@ -487,7 +487,7 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n         };\n \n-        match self.layout().abi {\n+        match from.layout().abi {\n             // FIXME make Abi::Vector work too\n             Abi::Scalar(_) => {\n                 let val = from.load_scalar(fx);"}]}