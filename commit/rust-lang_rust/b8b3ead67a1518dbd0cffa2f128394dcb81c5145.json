{"sha": "b8b3ead67a1518dbd0cffa2f128394dcb81c5145", "node_id": "C_kwDOAAsO6NoAKGI4YjNlYWQ2N2ExNTE4ZGJkMGNmZmEyZjEyODM5NGRjYjgxYzUxNDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-14T18:16:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-14T18:16:00Z"}, "message": "Rollup merge of #100249 - Meziu:master, r=joshtriplett\n\nFix HorizonOS regression in FileTimes\n\nThe changes in #98246 caused a regression for multiple Newlib-based systems. This is just a fix including HorizonOS to the list of  targets which require a workaround.\n\n``@AzureMarker`` ``@ian-h-chamberlain``\nr? ``@nagisa``", "tree": {"sha": "8788e13533f564c53503625074bde3e92120209e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8788e13533f564c53503625074bde3e92120209e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b3ead67a1518dbd0cffa2f128394dcb81c5145", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+TvgCRBK7hj4Ov3rIwAAXuAIAH1ez6kitZpT0xVSK8kPX8Fa\nGFgZijxBrIp5ZlT+YPNW51tKtHI0bLBN3nSyhOm7ENAKNQPutXY8hNMcAsU/XzOG\nrxdKtFwt1VHFQL22TloSR5Sx5plahnlt/CPMahEVhbifbVgTuyBJ+Ixx7UMxJZZh\nKNmUT/WbfaHXcPpr1dBTc70/F00AbkU3rzy9yXIusqIGph/adW7ZqAHz3xdL5MsP\nLfT6FXKTo2gm1vnWWZGlT1Eb8v1EYp/aDMoOVOqXIgVc/7naT0UZ49IH8coyCy8n\n4NyKuqO2ljzIz1EsZNXz4dMLnGMct9g0OIwVO82OJr4xMtUID6ccbRSwJaLkfdo=\n=BMPD\n-----END PGP SIGNATURE-----\n", "payload": "tree 8788e13533f564c53503625074bde3e92120209e\nparent 801821d1560f84e4716fcbd9244ec959320a13d5\nparent 926f58745eca4995c16ced841074055bfbae58cf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660500960 +0200\ncommitter GitHub <noreply@github.com> 1660500960 +0200\n\nRollup merge of #100249 - Meziu:master, r=joshtriplett\n\nFix HorizonOS regression in FileTimes\n\nThe changes in #98246 caused a regression for multiple Newlib-based systems. This is just a fix including HorizonOS to the list of  targets which require a workaround.\n\n``@AzureMarker`` ``@ian-h-chamberlain``\nr? ``@nagisa``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b3ead67a1518dbd0cffa2f128394dcb81c5145", "html_url": "https://github.com/rust-lang/rust/commit/b8b3ead67a1518dbd0cffa2f128394dcb81c5145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b3ead67a1518dbd0cffa2f128394dcb81c5145/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5"}, {"sha": "926f58745eca4995c16ced841074055bfbae58cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/926f58745eca4995c16ced841074055bfbae58cf", "html_url": "https://github.com/rust-lang/rust/commit/926f58745eca4995c16ced841074055bfbae58cf"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "7778033eaa98c6d1bd5e460b174a54e49f0ef4cb", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8b3ead67a1518dbd0cffa2f128394dcb81c5145/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b3ead67a1518dbd0cffa2f128394dcb81c5145/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=b8b3ead67a1518dbd0cffa2f128394dcb81c5145", "patch": "@@ -544,11 +544,11 @@ impl Default for FileTimes {\n     fn default() -> Self {\n         // Redox doesn't appear to support `UTIME_OMIT`, so we stub it out here, and always return\n         // an error in `set_times`.\n-        // ESP-IDF does not support `futimens` at all and the behavior for that OS is therefore\n+        // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n         // the same as for Redox.\n-        #[cfg(any(target_os = \"redox\", target_os = \"espidf\"))]\n+        #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))]\n         let omit = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\")))]\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n         let omit = libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ };\n         Self([omit; 2])\n     }\n@@ -1083,9 +1083,9 @@ impl File {\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n         cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"redox\", target_os = \"espidf\"))] {\n+            if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n-                // ESP-IDF does not support `futimens` at all and the behavior for that OS is therefore\n+                // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n                 // the same as for Redox.\n                 drop(times);\n                 Err(io::const_io_error!("}]}