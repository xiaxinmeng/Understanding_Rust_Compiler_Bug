{"sha": "7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "node_id": "C_kwDOAAsO6NoAKDdhZmNmOWZjZDE0YWY1MmU1M2UzOGZmZTYwYjFlYWM5YjMyMzJiMjE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-18T18:34:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Add generator_kind table.", "tree": {"sha": "e669dc68876a71907987c68e4efa5c1e811123fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e669dc68876a71907987c68e4efa5c1e811123fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "html_url": "https://github.com/rust-lang/rust/commit/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "381d32e7d6ac5037be4ce23aca7c7b38404928a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/381d32e7d6ac5037be4ce23aca7c7b38404928a8", "html_url": "https://github.com/rust-lang/rust/commit/381d32e7d6ac5037be4ce23aca7c7b38404928a8"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "f43dcea343d64b727d74ed2498ee5457d1046844", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "patch": "@@ -1439,13 +1439,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {\n-        match self.kind(id) {\n-            EntryKind::Generator(data) => Some(data),\n-            _ => None,\n-        }\n-    }\n-\n     #[inline]\n     fn def_key(self, index: DefIndex) -> DefKey {\n         *self"}, {"sha": "192ad9608b87c756acb17ff3689a06d5fd0c4624", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "patch": "@@ -140,6 +140,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     rendered_const => { table }\n     asyncness => { table }\n     fn_arg_names => { table }\n+    generator_kind => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -153,7 +154,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n-    generator_kind => { cdata.generator_kind(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }"}, {"sha": "da8995df1ac9e43b24b142afed566950ffac3c66", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "patch": "@@ -1569,7 +1569,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         match ty.kind() {\n             ty::Generator(..) => {\n                 let data = self.tcx.generator_kind(def_id).unwrap();\n-                record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));\n+                record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator);\n+                record!(self.tables.generator_kind[def_id.to_def_id()] <- data);\n             }\n \n             ty::Closure(..) => {"}, {"sha": "da17d9d4c6706405b7fc1549b2a1049543aae76b", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afcf9fcd14af52e53e38ffe60b1eac9b3232b21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7afcf9fcd14af52e53e38ffe60b1eac9b3232b21", "patch": "@@ -312,6 +312,7 @@ define_tables! {\n     rendered_const: Table<DefIndex, Lazy!(String)>,\n     asyncness: Table<DefIndex, Lazy!(hir::IsAsync)>,\n     fn_arg_names: Table<DefIndex, Lazy!([Ident])>,\n+    generator_kind: Table<DefIndex, Lazy!(hir::GeneratorKind)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -352,7 +353,7 @@ enum EntryKind {\n     MacroDef(Lazy<MacroDef>),\n     ProcMacro(MacroKind),\n     Closure,\n-    Generator(hir::GeneratorKind),\n+    Generator,\n     Trait(Lazy<TraitData>),\n     Impl,\n     AssocFn(Lazy<AssocFnData>),"}]}