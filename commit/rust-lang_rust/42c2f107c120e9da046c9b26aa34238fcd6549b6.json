{"sha": "42c2f107c120e9da046c9b26aa34238fcd6549b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzJmMTA3YzEyMGU5ZGEwNDZjOWIyNmFhMzQyMzhmY2Q2NTQ5YjY=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T18:02:45Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T18:02:45Z"}, "message": "flesh out void types", "tree": {"sha": "6784524b646a206e15219e30f0323853b2f343f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6784524b646a206e15219e30f0323853b2f343f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c2f107c120e9da046c9b26aa34238fcd6549b6", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c2f107c120e9da046c9b26aa34238fcd6549b6", "html_url": "https://github.com/rust-lang/rust/commit/42c2f107c120e9da046c9b26aa34238fcd6549b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c2f107c120e9da046c9b26aa34238fcd6549b6/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94a89e561a62d54d25dd64329ef8af396d8ec032", "url": "https://api.github.com/repos/rust-lang/rust/commits/94a89e561a62d54d25dd64329ef8af396d8ec032", "html_url": "https://github.com/rust-lang/rust/commit/94a89e561a62d54d25dd64329ef8af396d8ec032"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "d4df9492da7787cd7ca4892942d0ceb91c9eb0b3", "filename": "src/doc/tarpl/exotic-sizes.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/42c2f107c120e9da046c9b26aa34238fcd6549b6/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/42c2f107c120e9da046c9b26aa34238fcd6549b6/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md?ref=42c2f107c120e9da046c9b26aa34238fcd6549b6", "patch": "@@ -81,9 +81,33 @@ consider passing in `0` as Undefined Behaviour.\n \n Rust also enables types to be declared that *cannot even be instantiated*. These\n types can only be talked about at the type level, and never at the value level.\n+Empty types can be declared by specifying an enum with no variants:\n \n ```rust\n-enum Foo { } // No variants = EMPTY\n+enum Void {} // No variants = EMPTY\n ```\n \n-TODO: WHY?!\n+Empty types are even more marginal than ZSTs. The primary motivating example for\n+Void types is type-level unreachability. For instance, suppose an API needs to\n+return a Result in general, but a specific case actually is infallible. It's\n+actually possible to communicate this at the type level by returning a\n+`Result<T, Void>`. Consumers of the API can confidently unwrap such a Result\n+knowing that it's *statically impossible* for this value to be an `Err`, as\n+this would require providing a value of type Void.\n+\n+In principle, Rust can do some interesting analysees and optimizations based\n+on this fact. For instance, `Result<T, Void>` could be represented as just `T`,\n+because the Err case doesn't actually exist. Also in principle the following\n+could compile:\n+\n+```rust,ignore\n+enum Void {}\n+\n+let res: Result<u32, Void> = Ok(0);\n+\n+// Err doesn't exist anymore, so Ok is actually irrefutable.\n+let Ok(num) = res;\n+```\n+\n+But neither of these tricks work today, so all Void types get you today is\n+the ability to be confident that certain situations are statically impossible."}]}