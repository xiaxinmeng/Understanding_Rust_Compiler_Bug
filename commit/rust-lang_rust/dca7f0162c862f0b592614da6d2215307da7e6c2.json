{"sha": "dca7f0162c862f0b592614da6d2215307da7e6c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTdmMDE2MmM4NjJmMGI1OTI2MTRkYTZkMjIxNTMwN2RhN2U2YzI=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-20T15:30:26Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-24T06:17:14Z"}, "message": "Remove, now unnecessary, workaround\n\nThis used to be done to avoid inlining impls referencing private items,\nbut is now unnecessary since we actually check that impls do not\nreference non-doc-reachable items.", "tree": {"sha": "a778873198f281b27b08314e8ff547ea12172a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a778873198f281b27b08314e8ff547ea12172a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca7f0162c862f0b592614da6d2215307da7e6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca7f0162c862f0b592614da6d2215307da7e6c2", "html_url": "https://github.com/rust-lang/rust/commit/dca7f0162c862f0b592614da6d2215307da7e6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca7f0162c862f0b592614da6d2215307da7e6c2/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc615b2072e497a5ca6a77fee550c3314606b2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc615b2072e497a5ca6a77fee550c3314606b2b0", "html_url": "https://github.com/rust-lang/rust/commit/cc615b2072e497a5ca6a77fee550c3314606b2b0"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "e13b2688788904e5d480dde122d505d5f7ddeaa5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -248,12 +248,10 @@ pub fn build_impls(cx: &DocContext,\n     // Primarily, the impls will be used to populate the documentation for this\n     // type being inlined, but impls can also be used when generating\n     // documentation for primitives (no way to find those specifically).\n-    if !cx.all_crate_impls.borrow_mut().contains_key(&did.krate) {\n-        let mut impls = Vec::new();\n+    if cx.populated_crate_impls.borrow_mut().insert(did.krate) {\n         for item in tcx.sess.cstore.crate_top_level_items(did.krate) {\n             populate_impls(cx, tcx, item.def, &mut impls);\n         }\n-        cx.all_crate_impls.borrow_mut().insert(did.krate, impls);\n \n         fn populate_impls(cx: &DocContext, tcx: &TyCtxt,\n                           def: cstore::DefLike,\n@@ -270,21 +268,7 @@ pub fn build_impls(cx: &DocContext,\n         }\n     }\n \n-    let mut candidates = cx.all_crate_impls.borrow_mut();\n-    let candidates = candidates.get_mut(&did.krate).unwrap();\n-    for i in (0..candidates.len()).rev() {\n-        let remove = match candidates[i].inner {\n-            clean::ImplItem(ref i) => {\n-                i.for_.def_id() == Some(did) || i.for_.primitive_type().is_some()\n-            }\n-            _ => continue,\n-        };\n-        if remove {\n-            impls.push(candidates.swap_remove(i));\n-        }\n-    }\n-\n-    return impls;\n+    impls\n }\n \n pub fn build_impl(cx: &DocContext,"}, {"sha": "0b3a0c19dacc46151bc8fe048597acb6a60927b6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -30,7 +30,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -54,7 +54,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub map: &'a hir_map::Map<'tcx>,\n     pub maybe_typed: MaybeTyped<'a, 'tcx>,\n     pub input: Input,\n-    pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n+    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -189,7 +189,7 @@ pub fn run_core(search_paths: SearchPaths,\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n-            all_crate_impls: RefCell::new(HashMap::new()),\n+            populated_crate_impls: RefCell::new(HashSet::new()),\n             deref_trait_did: Cell::new(None),\n             access_levels: RefCell::new(access_levels),\n             external_traits: RefCell::new(HashMap::new()),"}, {"sha": "81fd1128afac84c16b31c92d70cf339d26209edd", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -111,7 +111,7 @@ pub fn run(input: &str,\n         maybe_typed: core::NotTyped(&sess),\n         input: input,\n         external_traits: RefCell::new(HashMap::new()),\n-        all_crate_impls: RefCell::new(HashMap::new()),\n+        populated_crate_impls: RefCell::new(HashSet::new()),\n         deref_trait_did: Cell::new(None),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),"}, {"sha": "c476dda26902907040368bf2a447c156ffc5de31", "filename": "src/test/auxiliary/issue-33113.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-33113.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"bar\"]\n+\n+pub trait Bar {}\n+pub struct Foo;\n+\n+impl<'a> Bar for &'a char {}\n+impl Bar for Foo {}"}, {"sha": "317262f417512f2c37bc6b8ac4b843e76b54e1c1", "filename": "src/test/auxiliary/rustdoc-trait-object-impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+pub trait Bar {}\n+\n+impl<'a> Bar + 'a {\n+    pub fn bar(&self) -> usize { 42 }\n+}\n+\n+impl<'a> fmt::Debug for Bar + 'a {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+"}, {"sha": "948061bdcbed58fef6bb39215c6081be9fc30121", "filename": "src/test/rustdoc/inline_cross/issue-32881.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-trait-object-impl.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_trait_object_impl;\n+\n+// @has issue_32881/trait.Bar.html\n+// @has - '//code' \"impl<'a> Bar\"\n+// @has - '//code' \"impl<'a> Debug for Bar\"\n+\n+pub use rustdoc_trait_object_impl::Bar;\n+"}, {"sha": "9ae8fefe730effd1f6f68d7c46a7b1f2d6148623", "filename": "src/test/rustdoc/inline_cross/issue-33113.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca7f0162c862f0b592614da6d2215307da7e6c2/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs?ref=dca7f0162c862f0b592614da6d2215307da7e6c2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-33113.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate bar;\n+\n+// @has issue_33113/trait.Bar.html\n+// @has - '//code' \"for &'a char\"\n+// @has - '//code' \"for Foo\"\n+pub use bar::Bar;"}]}