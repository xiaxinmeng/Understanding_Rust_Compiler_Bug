{"sha": "e05d7c3ac1e72edff337719fe58da69e959c4cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNWQ3YzNhYzFlNzJlZGZmMzM3NzE5ZmU1OGRhNjllOTU5YzRjZjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-23T01:41:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-23T01:41:32Z"}, "message": "Support mach types in rustc, enable 5 more tests.", "tree": {"sha": "b040d23dac019f8caf1157b385e4b6f915696815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b040d23dac019f8caf1157b385e4b6f915696815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05d7c3ac1e72edff337719fe58da69e959c4cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05d7c3ac1e72edff337719fe58da69e959c4cf4", "html_url": "https://github.com/rust-lang/rust/commit/e05d7c3ac1e72edff337719fe58da69e959c4cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05d7c3ac1e72edff337719fe58da69e959c4cf4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e01b2d529a81ac7b2d7ba3deb5d1f116efc7b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e01b2d529a81ac7b2d7ba3deb5d1f116efc7b34", "html_url": "https://github.com/rust-lang/rust/commit/3e01b2d529a81ac7b2d7ba3deb5d1f116efc7b34"}], "stats": {"total": 164, "additions": 130, "deletions": 34}, "files": [{"sha": "83a3df32046de92733b9c883ecf6e99992a28f40", "filename": "src/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -529,10 +529,15 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         fact.rs \\\n                         hello.rs \\\n                         int.rs \\\n+                        i32-sub.rs \\\n+                        i8-incr.rs \\\n                         item-name-overload.rs \\\n                         lazy-init.rs \\\n                         multiline-comment.rs \\\n                         return-nil.rs \\\n+                        u32-decr.rs \\\n+                        u8-incr.rs \\\n+                        u8-incr-decr.rs \\\n                         uint.rs \\\n                         unit.rs \\\n                         while-and-do-while.rs \\"}, {"sha": "ddd02a03125cbedd12e5e264a10139de21dfed67", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -4,6 +4,7 @@ import std.option;\n import middle.typeck;\n import util.common.span;\n import util.common.spanned;\n+import util.common.ty_mach;\n \n type ident = str;\n \n@@ -116,6 +117,7 @@ tag lit_ {\n     lit_char(char);\n     lit_int(int);\n     lit_uint(uint);\n+    lit_mach_int(ty_mach, int);\n     lit_nil;\n     lit_bool(bool);\n }"}, {"sha": "0506ce6c3607d74e45b0855ef862ae8afade20eb", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 95, "deletions": 34, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -302,9 +302,102 @@ impure fn consume_block_comment(reader rdr) {\n     be consume_any_whitespace(rdr);\n }\n \n+impure fn scan_number(mutable char c, reader rdr) -> token.token {\n+    auto accum_int = 0;\n+    auto n = rdr.next();\n+\n+    if (c == '0' && n == 'x') {\n+        rdr.bump();\n+        rdr.bump();\n+        c = rdr.curr();\n+        while (is_hex_digit(c) || c == '_') {\n+            if (c != '_') {\n+                accum_int *= 16;\n+                accum_int += hex_digit_val(c);\n+            }\n+            rdr.bump();\n+            c = rdr.curr();\n+        }\n+    }\n+\n+    if (c == '0' && n == 'b') {\n+        rdr.bump();\n+        rdr.bump();\n+        c = rdr.curr();\n+        while (is_bin_digit(c) || c == '_') {\n+            if (c != '_') {\n+                accum_int *= 2;\n+                accum_int += bin_digit_value(c);\n+            }\n+            rdr.bump();\n+            c = rdr.curr();\n+        }\n+    }\n+\n+    while (is_dec_digit(c) || c == '_') {\n+        if (c != '_') {\n+            accum_int *= 10;\n+            accum_int += dec_digit_val(c);\n+        }\n+        rdr.bump();\n+        c = rdr.curr();\n+    }\n+\n+    if (c == 'u' || c == 'i') {\n+        let bool signed = (c == 'i');\n+        rdr.bump();\n+        c = rdr.curr();\n+        if (c == '8') {\n+            rdr.bump();\n+            if (signed) {\n+                ret token.LIT_MACH_INT(common.ty_i8, accum_int);\n+            } else {\n+                ret token.LIT_MACH_INT(common.ty_u8, accum_int);\n+            }\n+        }\n+\n+        n = rdr.next();\n+        if (c == '1' && n == '6') {\n+            rdr.bump();\n+            rdr.bump();\n+            if (signed) {\n+                ret token.LIT_MACH_INT(common.ty_i16, accum_int);\n+            } else {\n+                ret token.LIT_MACH_INT(common.ty_u16, accum_int);\n+            }\n+        }\n+        if (c == '3' && n == '2') {\n+            rdr.bump();\n+            rdr.bump();\n+            if (signed) {\n+                ret token.LIT_MACH_INT(common.ty_i32, accum_int);\n+            } else {\n+                ret token.LIT_MACH_INT(common.ty_u32, accum_int);\n+            }\n+        }\n+\n+        if (c == '6' && n == '4') {\n+            rdr.bump();\n+            rdr.bump();\n+            if (signed) {\n+                ret token.LIT_MACH_INT(common.ty_i64, accum_int);\n+            } else {\n+                ret token.LIT_MACH_INT(common.ty_u64, accum_int);\n+            }\n+        }\n+\n+        if (signed) {\n+            ret token.LIT_INT(accum_int);\n+        } else {\n+            // FIXME: should cast in the target bit-width.\n+            ret token.LIT_UINT(accum_int as uint);\n+        }\n+    }\n+    ret token.LIT_INT(accum_int);\n+}\n+\n impure fn next_token(reader rdr) -> token.token {\n     auto accum_str = \"\";\n-    auto accum_int = 0;\n \n     consume_any_whitespace(rdr);\n \n@@ -328,39 +421,7 @@ impure fn next_token(reader rdr) -> token.token {\n     }\n \n     if (is_dec_digit(c)) {\n-        auto n = rdr.next();\n-        if (c == '0' && n == 'x') {\n-            rdr.bump();\n-            rdr.bump();\n-            c = rdr.curr();\n-            while (is_hex_digit(c) || c == '_') {\n-                accum_int *= 16;\n-                accum_int += hex_digit_val(c);\n-                rdr.bump();\n-                c = rdr.curr();\n-            }\n-        }\n-\n-        if (c == '0' && n == 'b') {\n-            rdr.bump();\n-            rdr.bump();\n-            c = rdr.curr();\n-            while (is_bin_digit(c) || c == '_') {\n-                accum_int *= 2;\n-                accum_int += bin_digit_value(c);\n-                rdr.bump();\n-                c = rdr.curr();\n-            }\n-        }\n-\n-        while (is_dec_digit(c) || c == '_') {\n-            accum_int *= 10;\n-            accum_int += dec_digit_val(c);\n-            rdr.bump();\n-            c = rdr.curr();\n-        }\n-\n-        ret token.LIT_INT(accum_int);\n+        ret scan_number(c, rdr);\n     }\n \n     impure fn binop(reader rdr, token.binop op) -> token.token {"}, {"sha": "732e5b170aeb5be59b0d79dbce62a51f59559a51", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -287,6 +287,10 @@ impure fn parse_lit(parser p) -> option.t[ast.lit] {\n             p.bump();\n             lit = ast.lit_uint(u);\n         }\n+        case (token.LIT_MACH_INT(?tm, ?i)) {\n+            p.bump();\n+            lit = ast.lit_mach_int(tm, i);\n+        }\n         case (token.LIT_CHAR(?c)) {\n             p.bump();\n             lit = ast.lit_char(c);"}, {"sha": "f7ee82f6715284fdcbfd904a91193d6072740ef0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -529,6 +529,27 @@ impure fn trans_lit(@block_ctxt cx, &ast.lit lit) -> result {\n         case (ast.lit_uint(?u)) {\n             ret res(cx, C_int(u as int));\n         }\n+        case (ast.lit_mach_int(?tm, ?i)) {\n+            // FIXME: the entire handling of mach types falls apart\n+            // if target int width is larger than host, at the moment;\n+            // re-do the mach-int types using 'big' when that works.\n+            auto t = T_int();\n+            alt (tm) {\n+                case (common.ty_u8) { t =  T_i8(); }\n+                case (common.ty_u16) { t =  T_i16(); }\n+                case (common.ty_u32) { t =  T_i32(); }\n+                case (common.ty_u64) { t =  T_i64(); }\n+\n+                case (common.ty_i8) { t =  T_i8(); }\n+                case (common.ty_i16) { t =  T_i16(); }\n+                case (common.ty_i32) { t =  T_i32(); }\n+                case (common.ty_i64) { t =  T_i64(); }\n+                case (_) {\n+                    cx.fcx.ccx.sess.bug(\"bad mach int literal type\");\n+                }\n+            }\n+            ret res(cx, C_integral(i, t));\n+        }\n         case (ast.lit_char(?c)) {\n             ret res(cx, C_integral(c as int, T_char()));\n         }"}, {"sha": "4bbf3cf495bff776412c4297c02c1bcde73ebc83", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05d7c3ac1e72edff337719fe58da69e959c4cf4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e05d7c3ac1e72edff337719fe58da69e959c4cf4", "patch": "@@ -944,6 +944,9 @@ fn check_lit(@ast.lit lit) -> @ty {\n         case (ast.lit_char(_))  { sty = ty_char; }\n         case (ast.lit_int(_))   { sty = ty_int;  }\n         case (ast.lit_uint(_))  { sty = ty_uint; }\n+        case (ast.lit_mach_int(?tm, _)) {\n+            sty = ty_machine(tm);\n+        }\n         case (ast.lit_nil)      { sty = ty_nil;  }\n         case (ast.lit_bool(_))  { sty = ty_bool; }\n     }"}]}