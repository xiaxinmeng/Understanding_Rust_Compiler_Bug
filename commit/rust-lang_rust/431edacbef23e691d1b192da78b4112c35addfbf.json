{"sha": "431edacbef23e691d1b192da78b4112c35addfbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWVkYWNiZWYyM2U2OTFkMWIxOTJkYTc4YjQxMTJjMzVhZGRmYmY=", "commit": {"author": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-29T17:19:23Z"}, "committer": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-31T12:47:25Z"}, "message": "Use __pthread_get_minstack() when available.\n\nglibc >= 2.15 has a __pthread_get_minstack() function that returns\nPTHREAD_STACK_MIN plus however many bytes are needed for thread-local\nstorage.  Use it when it's available because just PTHREAD_STACK_MIN is\nnot enough in applications that have big thread-local storage\nrequirements.\n\nFixes #6233.", "tree": {"sha": "2bd5f9664b3b572ac447b18deef2a931950fed54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd5f9664b3b572ac447b18deef2a931950fed54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431edacbef23e691d1b192da78b4112c35addfbf", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431edacbef23e691d1b192da78b4112c35addfbf", "html_url": "https://github.com/rust-lang/rust/commit/431edacbef23e691d1b192da78b4112c35addfbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431edacbef23e691d1b192da78b4112c35addfbf/comments", "author": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489", "html_url": "https://github.com/rust-lang/rust/commit/b02b5cdcf42b4fe6b1e3ebe56ad0cd43fd907489"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "b762c1173f56b32d4bfe034097a2b768e6bfc7d6", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/431edacbef23e691d1b192da78b4112c35addfbf/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431edacbef23e691d1b192da78b4112c35addfbf/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=431edacbef23e691d1b192da78b4112c35addfbf", "patch": "@@ -221,7 +221,7 @@ mod imp {\n                                                PTHREAD_CREATE_JOINABLE), 0);\n \n         // Reserve room for the red zone, the runtime's stack of last resort.\n-        let stack_size = cmp::max(stack, RED_ZONE + PTHREAD_STACK_MIN as uint);\n+        let stack_size = cmp::max(stack, RED_ZONE + __pthread_get_minstack(&attr) as uint);\n         match pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t) {\n             0 => {\n             },\n@@ -261,6 +261,51 @@ mod imp {\n     #[cfg(not(target_os = \"macos\"), not(target_os = \"android\"))]\n     pub unsafe fn yield_now() { assert_eq!(pthread_yield(), 0); }\n \n+    #[cfg(not(target_os = \"linux\"))]\n+    unsafe fn __pthread_get_minstack(_: *libc::pthread_attr_t) -> libc::size_t {\n+        libc::PTHREAD_STACK_MIN\n+    }\n+\n+    // glibc >= 2.15 has a __pthread_get_minstack() function that returns\n+    // PTHREAD_STACK_MIN plus however many bytes are needed for thread-local\n+    // storage.  We need that information to avoid blowing up when a small stack\n+    // is created in an application with big thread-local storage requirements.\n+    // See #6233 for rationale and details.\n+    //\n+    // Dynamically resolve the symbol for compatibility with older versions\n+    // of glibc.  Assumes that we've been dynamically linked to libpthread\n+    // but that is currently always the case.  Note that this means we take\n+    // a dlopen/dlsym/dlclose hit for every new thread.  Mitigating that by\n+    // caching the symbol or the function's return value has its drawbacks:\n+    //\n+    //  * Caching the symbol breaks when libpthread.so is reloaded because\n+    //    its address changes.\n+    //\n+    //  * Caching the return value assumes that it's a fixed quantity.\n+    //    Not very future-proof and untrue in the presence of guard pages\n+    //    The reason __pthread_get_minstack() takes a *libc::pthread_attr_t\n+    //    as its argument is because it takes pthread_attr_setguardsize() into\n+    //    account.\n+    //\n+    // A better solution is to define __pthread_get_minstack() as a weak symbol\n+    // but there is currently no way to express that in Rust code.\n+    #[cfg(target_os = \"linux\")]\n+    unsafe fn __pthread_get_minstack(attr: *libc::pthread_attr_t) -> libc::size_t {\n+        use option::None;\n+        use result::{Err, Ok};\n+        use unstable::dynamic_lib;\n+        match dynamic_lib::DynamicLibrary::open(None) {\n+            Err(err) => fail!(\"DynamicLibrary::open(): {}\", err),\n+            Ok(handle) => {\n+                match handle.symbol::<extern \"C\" fn(*libc::pthread_attr_t) ->\n+                                     libc::size_t>(\"__pthread_get_minstack\") {\n+                    Err(_) => libc::PTHREAD_STACK_MIN,\n+                    Ok(__pthread_get_minstack) => __pthread_get_minstack(attr),\n+                }\n+            }\n+        }\n+    }\n+\n     extern {\n         fn pthread_create(native: *mut libc::pthread_t,\n                           attr: *libc::pthread_attr_t,"}]}