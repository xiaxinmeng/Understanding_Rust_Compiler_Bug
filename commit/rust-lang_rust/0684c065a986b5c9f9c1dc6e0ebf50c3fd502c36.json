{"sha": "0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODRjMDY1YTk4NmI1YzlmOWMxZGM2ZTBlYmY1MGMzZmQ1MDJjMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:35:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T21:35:43Z"}, "message": "std: Camel case treemap", "tree": {"sha": "7ef499df1820bd2712039fe375cff9d79eacfadc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef499df1820bd2712039fe375cff9d79eacfadc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "html_url": "https://github.com/rust-lang/rust/commit/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb", "html_url": "https://github.com/rust-lang/rust/commit/3764fe3f2a7d04d99d7c69137b7a7724a6546bcb"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "da96e871bebe89aa16fd7a935d7110c084850456", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "patch": "@@ -69,7 +69,6 @@ mod rope;\n mod smallintmap;\n #[allow(non_camel_case_types)] // XXX\n mod sort;\n-#[allow(non_camel_case_types)] // XXX\n mod treemap;\n \n // And ... other stuff"}, {"sha": "9d6c8dade61f64ac94ef726abef797b8b6e88ecb", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=0684c065a986b5c9f9c1dc6e0ebf50c3fd502c36", "patch": "@@ -12,30 +12,30 @@ use core::cmp::{Eq, Ord};\n use core::option::{Some, None};\n use Option = core::Option;\n \n-export treemap;\n+export TreeMap;\n export insert;\n export find;\n export traverse;\n \n-type treemap<K, V> = @mut tree_edge<K, V>;\n+type TreeMap<K, V> = @mut TreeEdge<K, V>;\n \n-type tree_edge<K, V> = Option<@tree_node<K, V>>;\n+type TreeEdge<K, V> = Option<@TreeNode<K, V>>;\n \n-enum tree_node<K, V> = {\n+enum TreeNode<K, V> = {\n     key: K,\n     mut value: V,\n-    mut left: tree_edge<K, V>,\n-    mut right: tree_edge<K, V>\n+    mut left: TreeEdge<K, V>,\n+    mut right: TreeEdge<K, V>\n };\n \n /// Create a treemap\n-fn treemap<K, V>() -> treemap<K, V> { @mut None }\n+fn TreeMap<K, V>() -> TreeMap<K, V> { @mut None }\n \n /// Insert a value into the map\n-fn insert<K: copy Eq Ord, V: copy>(m: &mut tree_edge<K, V>, +k: K, +v: V) {\n+fn insert<K: copy Eq Ord, V: copy>(m: &mut TreeEdge<K, V>, +k: K, +v: V) {\n     match copy *m {\n       None => {\n-        *m = Some(@tree_node({key: k,\n+        *m = Some(@TreeNode({key: k,\n                               mut value: v,\n                               mut left: None,\n                               mut right: None}));\n@@ -54,7 +54,7 @@ fn insert<K: copy Eq Ord, V: copy>(m: &mut tree_edge<K, V>, +k: K, +v: V) {\n }\n \n /// Find a value based on the key\n-fn find<K: copy Eq Ord, V: copy>(m: &const tree_edge<K, V>, +k: K)\n+fn find<K: copy Eq Ord, V: copy>(m: &const TreeEdge<K, V>, +k: K)\n                               -> Option<V> {\n     match copy *m {\n       None => None,\n@@ -73,7 +73,7 @@ fn find<K: copy Eq Ord, V: copy>(m: &const tree_edge<K, V>, +k: K)\n }\n \n /// Visit all pairs in the map in order.\n-fn traverse<K, V: copy>(m: &const tree_edge<K, V>, f: fn(K, V)) {\n+fn traverse<K, V: copy>(m: &const TreeEdge<K, V>, f: fn(K, V)) {\n     match copy *m {\n       None => (),\n       Some(node) => {\n@@ -89,36 +89,36 @@ fn traverse<K, V: copy>(m: &const tree_edge<K, V>, f: fn(K, V)) {\n mod tests {\n \n     #[test]\n-    fn init_treemap() { let _m = treemap::<int, int>(); }\n+    fn init_treemap() { let _m = TreeMap::<int, int>(); }\n \n     #[test]\n-    fn insert_one() { let m = treemap(); insert(m, 1, 2); }\n+    fn insert_one() { let m = TreeMap(); insert(m, 1, 2); }\n \n     #[test]\n-    fn insert_two() { let m = treemap(); insert(m, 1, 2); insert(m, 3, 4); }\n+    fn insert_two() { let m = TreeMap(); insert(m, 1, 2); insert(m, 3, 4); }\n \n     #[test]\n     fn insert_find() {\n-        let m = treemap();\n+        let m = TreeMap();\n         insert(m, 1, 2);\n         assert (find(m, 1) == Some(2));\n     }\n \n     #[test]\n     fn find_empty() {\n-        let m = treemap::<int, int>(); assert (find(m, 1) == None);\n+        let m = TreeMap::<int, int>(); assert (find(m, 1) == None);\n     }\n \n     #[test]\n     fn find_not_found() {\n-        let m = treemap();\n+        let m = TreeMap();\n         insert(m, 1, 2);\n         assert (find(m, 2) == None);\n     }\n \n     #[test]\n     fn traverse_in_order() {\n-        let m = treemap();\n+        let m = TreeMap();\n         insert(m, 3, ());\n         insert(m, 0, ());\n         insert(m, 4, ());\n@@ -134,7 +134,7 @@ mod tests {\n \n     #[test]\n     fn u8_map() {\n-        let m = treemap();\n+        let m = TreeMap();\n \n         let k1 = str::to_bytes(~\"foo\");\n         let k2 = str::to_bytes(~\"bar\");"}]}