{"sha": "8320345221362e0a504e1d5efba7495bc895cb58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMjAzNDUyMjEzNjJlMGE1MDRlMWQ1ZWZiYTc0OTViYzg5NWNiNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T08:09:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-15T08:09:20Z"}, "message": "Auto merge of #28268 - petrochenkov:fnptr, r=alexcrichton\n\nCloses https://github.com/rust-lang/rust/issues/26082", "tree": {"sha": "93427aeeb57e17181f304a52636a266de3e74129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93427aeeb57e17181f304a52636a266de3e74129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8320345221362e0a504e1d5efba7495bc895cb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8320345221362e0a504e1d5efba7495bc895cb58", "html_url": "https://github.com/rust-lang/rust/commit/8320345221362e0a504e1d5efba7495bc895cb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8320345221362e0a504e1d5efba7495bc895cb58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b3eed7505d913788b18cac60097345ef21902e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b3eed7505d913788b18cac60097345ef21902e", "html_url": "https://github.com/rust-lang/rust/commit/a7b3eed7505d913788b18cac60097345ef21902e"}, {"sha": "bc7c4304ab2af12e782945f139eb73e4842b9d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7c4304ab2af12e782945f139eb73e4842b9d68", "html_url": "https://github.com/rust-lang/rust/commit/bc7c4304ab2af12e782945f139eb73e4842b9d68"}], "stats": {"total": 140, "additions": 71, "deletions": 69}, "files": [{"sha": "979ddd454121dc349fdc9523f651bd7909bba11a", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8320345221362e0a504e1d5efba7495bc895cb58/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8320345221362e0a504e1d5efba7495bc895cb58/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=8320345221362e0a504e1d5efba7495bc895cb58", "patch": "@@ -86,45 +86,3 @@ clone_impl! { f64 }\n clone_impl! { () }\n clone_impl! { bool }\n clone_impl! { char }\n-\n-macro_rules! extern_fn_clone {\n-    ($($A:ident),*) => (\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($A,)* ReturnType> Clone for extern \"Rust\" fn($($A),*) -> ReturnType {\n-            /// Returns a copy of a function pointer.\n-            #[inline]\n-            fn clone(&self) -> extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($A,)* ReturnType> Clone for extern \"C\" fn($($A),*) -> ReturnType {\n-            /// Returns a copy of a function pointer.\n-            #[inline]\n-            fn clone(&self) -> extern \"C\" fn($($A),*) -> ReturnType { *self }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($A,)* ReturnType> Clone for unsafe extern \"Rust\" fn($($A),*) -> ReturnType {\n-            /// Returns a copy of a function pointer.\n-            #[inline]\n-            fn clone(&self) -> unsafe extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($A,)* ReturnType> Clone for unsafe extern \"C\" fn($($A),*) -> ReturnType {\n-            /// Returns a copy of a function pointer.\n-            #[inline]\n-            fn clone(&self) -> unsafe extern \"C\" fn($($A),*) -> ReturnType { *self }\n-        }\n-    )\n-}\n-\n-extern_fn_clone! {}\n-extern_fn_clone! { A }\n-extern_fn_clone! { A, B }\n-extern_fn_clone! { A, B, C }\n-extern_fn_clone! { A, B, C, D }\n-extern_fn_clone! { A, B, C, D, E }\n-extern_fn_clone! { A, B, C, D, E, F }\n-extern_fn_clone! { A, B, C, D, E, F, G }\n-extern_fn_clone! { A, B, C, D, E, F, G, H }"}, {"sha": "406a5dffdb084b219069ceec40734fcd8f344af9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 71, "deletions": 27, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8320345221362e0a504e1d5efba7495bc895cb58/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8320345221362e0a504e1d5efba7495bc895cb58/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8320345221362e0a504e1d5efba7495bc895cb58", "patch": "@@ -20,6 +20,7 @@ use clone::Clone;\n use intrinsics;\n use ops::Deref;\n use fmt;\n+use hash;\n use option::Option::{self, Some, None};\n use marker::{PhantomData, Send, Sized, Sync};\n use mem;\n@@ -308,40 +309,83 @@ impl<T: ?Sized> Clone for *mut T {\n     }\n }\n \n-// Equality for extern \"C\" fn pointers\n-mod externfnpointers {\n-    use cmp::PartialEq;\n+// Impls for function pointers\n+macro_rules! fnptr_impls_safety_abi {\n+    ($FnTy: ty, $($Arg: ident),*) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<Ret, $($Arg),*> Clone for $FnTy {\n+            #[inline]\n+            fn clone(&self) -> Self {\n+                *self\n+            }\n+        }\n \n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<_R> PartialEq for extern \"C\" fn() -> _R {\n-        #[inline]\n-        fn eq(&self, other: &extern \"C\" fn() -> _R) -> bool {\n-            let self_ = *self as usize;\n-            let other_ = *other as usize;\n-            self_ == other_\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> PartialEq for $FnTy {\n+            #[inline]\n+            fn eq(&self, other: &Self) -> bool {\n+                *self as usize == *other as usize\n+            }\n         }\n-    }\n-    macro_rules! fnptreq {\n-        ($($p:ident),*) => {\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<_R,$($p),*> PartialEq for extern \"C\" fn($($p),*) -> _R {\n-                #[inline]\n-                fn eq(&self, other: &extern \"C\" fn($($p),*) -> _R) -> bool {\n-                    let self_ = *self as usize;\n-\n-                    let other_ = *other as usize;\n-                    self_ == other_\n-                }\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> Eq for $FnTy {}\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n+            #[inline]\n+            fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+                (*self as usize).partial_cmp(&(*other as usize))\n+            }\n+        }\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> Ord for $FnTy {\n+            #[inline]\n+            fn cmp(&self, other: &Self) -> Ordering {\n+                (*self as usize).cmp(&(*other as usize))\n+            }\n+        }\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n+            fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n+                state.write_usize(*self as usize)\n+            }\n+        }\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fmt::Pointer::fmt(&(*self as *const ()), f)\n+            }\n+        }\n+\n+        #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+        impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fmt::Pointer::fmt(&(*self as *const ()), f)\n             }\n         }\n     }\n-    fnptreq! { A }\n-    fnptreq! { A,B }\n-    fnptreq! { A,B,C }\n-    fnptreq! { A,B,C,D }\n-    fnptreq! { A,B,C,D,E }\n }\n \n+macro_rules! fnptr_impls_args {\n+    ($($Arg: ident),*) => {\n+        fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n+    }\n+}\n+\n+fnptr_impls_args! { }\n+fnptr_impls_args! { A }\n+fnptr_impls_args! { A, B }\n+fnptr_impls_args! { A, B, C }\n+fnptr_impls_args! { A, B, C, D }\n+fnptr_impls_args! { A, B, C, D, E }\n+\n // Comparison for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Ord for *const T {"}]}