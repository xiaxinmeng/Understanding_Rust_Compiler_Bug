{"sha": "ca98fefd04b2a0ccd784f96538c824c49210a418", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOThmZWZkMDRiMmEwY2NkNzg0Zjk2NTM4YzgyNGM0OTIxMGE0MTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-05T01:06:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-11T00:45:19Z"}, "message": "Fix two bugs in HRTB: 1. Categorize early-vs-late bindings on impls when constructing    generics, so that we don't add unnecessary region parameters. 2. Correct the DeBruijn indices when substituting the self type    into the method signature.\n\nPreviously, the DeBruijn index for the self type was not being\nadjusted to account for the fn binder. This mean that when late-bound\nregions were instantiated, you sometimes wind up with two distinct\nlifetimes.\n\nFixes #19537.", "tree": {"sha": "e5230aebe1d9cdd1d53d3f070050869c444c7e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5230aebe1d9cdd1d53d3f070050869c444c7e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca98fefd04b2a0ccd784f96538c824c49210a418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca98fefd04b2a0ccd784f96538c824c49210a418", "html_url": "https://github.com/rust-lang/rust/commit/ca98fefd04b2a0ccd784f96538c824c49210a418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca98fefd04b2a0ccd784f96538c824c49210a418/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38e73fef53e8520e5170c40713e32ab965a8abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38e73fef53e8520e5170c40713e32ab965a8abe", "html_url": "https://github.com/rust-lang/rust/commit/c38e73fef53e8520e5170c40713e32ab965a8abe"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "790d882f836f5b8230173673db6bdfa020015138", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ca98fefd04b2a0ccd784f96538c824c49210a418", "patch": "@@ -54,6 +54,7 @@ use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, AssocSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n use middle::ty::{mod, Ty};\n+use middle::ty_fold;\n use rscope::{mod, UnelidableRscope, RegionScope, SpecificRscope,\n              ShiftedRscope, BindingRscope};\n use TypeAndSubsts;\n@@ -1062,7 +1063,8 @@ fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n                            opt_self_info: Option<SelfInfo<'a, 'tcx>>,\n                            decl: &ast::FnDecl)\n                            -> (ty::BareFnTy<'tcx>,\n-                               Option<ty::ExplicitSelfCategory>) {\n+                               Option<ty::ExplicitSelfCategory>)\n+{\n     debug!(\"ty_of_method_or_bare_fn\");\n \n     // New region names that appear inside of the arguments of the function\n@@ -1078,6 +1080,11 @@ fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n     let (self_ty, mut implied_output_region) = match opt_self_info {\n         None => (None, None),\n         Some(self_info) => {\n+            // Shift regions in the self type by 1 to account for the binding\n+            // level introduced by the function itself.\n+            let untransformed_self_ty =\n+                ty_fold::shift_regions(this.tcx(), 1, &self_info.untransformed_self_ty);\n+\n             // Figure out and record the explicit self category.\n             let explicit_self_category =\n                 determine_explicit_self_category(this, &rb, &self_info);\n@@ -1087,21 +1094,19 @@ fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n                     (None, None)\n                 }\n                 ty::ByValueExplicitSelfCategory => {\n-                    (Some(self_info.untransformed_self_ty), None)\n+                    (Some(untransformed_self_ty), None)\n                 }\n                 ty::ByReferenceExplicitSelfCategory(region, mutability) => {\n                     (Some(ty::mk_rptr(this.tcx(),\n                                       region,\n                                       ty::mt {\n-                                        ty: self_info.untransformed_self_ty,\n+                                        ty: untransformed_self_ty,\n                                         mutbl: mutability\n                                       })),\n                      Some(region))\n                 }\n                 ty::ByBoxExplicitSelfCategory => {\n-                    (Some(ty::mk_uniq(this.tcx(),\n-                                      self_info.untransformed_self_ty)),\n-                     None)\n+                    (Some(ty::mk_uniq(this.tcx(), untransformed_self_ty)), None)\n                 }\n             }\n         }"}, {"sha": "4ad6dc292a72dea910aa223402e0e04331d8bb64", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ca98fefd04b2a0ccd784f96538c824c49210a418", "patch": "@@ -1055,7 +1055,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                       ref selfty,\n                       ref impl_items) => {\n             // Create generics from the generics specified in the impl head.\n-            let ty_generics = ty_generics_for_type(\n+            let ty_generics = ty_generics_for_impl(\n                     ccx,\n                     generics,\n                     CreateTypeParametersForAssociatedTypes);\n@@ -1655,6 +1655,24 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     generics\n }\n \n+fn ty_generics_for_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                  generics: &ast::Generics,\n+                                  create_type_parameters_for_associated_types:\n+                                      CreateTypeParametersForAssociatedTypesFlag)\n+                                  -> ty::Generics<'tcx>\n+{\n+    let early_lifetimes = resolve_lifetime::early_bound_lifetimes(generics);\n+    debug!(\"ty_generics_for_impl: early_lifetimes={}\",\n+           early_lifetimes);\n+    ty_generics(ccx,\n+                subst::TypeSpace,\n+                early_lifetimes.as_slice(),\n+                generics.ty_params.as_slice(),\n+                ty::Generics::empty(),\n+                &generics.where_clause,\n+                create_type_parameters_for_associated_types)\n+}\n+\n fn ty_generics_for_fn_or_method<'tcx,AC>(\n         this: &AC,\n         generics: &ast::Generics,"}, {"sha": "2dbd16107b0d5ddf9ef10da2f1116872bdd8335d", "filename": "src/test/compile-fail/hrtb-debruijn-in-receiver.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca98fefd04b2a0ccd784f96538c824c49210a418/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs?ref=ca98fefd04b2a0ccd784f96538c824c49210a418", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test the case where the `Self` type has a bound lifetime that must\n+// be adjusted in the fn signature. Issue #19537.\n+\n+use std::collections::HashMap;\n+\n+struct Foo<'a> {\n+    map: HashMap<uint, &'a str>\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn new() -> Foo<'a> { panic!() }\n+    fn insert(&'a mut self) { }\n+}\n+fn main() {\n+    let mut foo = Foo::new();\n+    foo.insert();\n+    foo.insert(); //~ ERROR cannot borrow\n+}"}]}