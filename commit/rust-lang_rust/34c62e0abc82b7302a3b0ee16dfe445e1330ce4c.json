{"sha": "34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzYyZTBhYmM4MmI3MzAyYTNiMGVlMTZkZmU0NDVlMTMzMGNlNGM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-01T09:41:38Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-20T10:42:44Z"}, "message": "Add a query for dereferencing constants of reference type", "tree": {"sha": "6e199f1ddac1e8d5432768c29f08dba327de70a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e199f1ddac1e8d5432768c29f08dba327de70a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "html_url": "https://github.com/rust-lang/rust/commit/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b54f122a1cb2593325501a2ed5b3fbfc47293615", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54f122a1cb2593325501a2ed5b3fbfc47293615", "html_url": "https://github.com/rust-lang/rust/commit/b54f122a1cb2593325501a2ed5b3fbfc47293615"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "68bad428ea25bc5e8e55b2966715ca93ed22ca3d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "patch": "@@ -749,6 +749,14 @@ rustc_queries! {\n             desc { \"destructure constant\" }\n         }\n \n+        /// Dereference a constant reference or raw pointer and turn the result into a constant\n+        /// again.\n+        query deref_const(\n+            key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>\n+        ) -> &'tcx ty::Const<'tcx> {\n+            desc { \"deref constant\" }\n+        }\n+\n         query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n             desc { \"get a &core::panic::Location referring to a span\" }\n         }"}, {"sha": "451fa1458fda82b6310a09a6adb625774ca826ad", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "patch": "@@ -2,11 +2,14 @@\n \n use std::convert::TryFrom;\n \n+use rustc_hir::Mutability;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n \n-use crate::interpret::{intern_const_alloc_recursive, ConstValue, InternKind, InterpCx};\n+use crate::interpret::{\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, MemPlaceMeta, Scalar,\n+};\n \n mod error;\n mod eval_queries;\n@@ -67,3 +70,40 @@ pub(crate) fn destructure_const<'tcx>(\n \n     mir::DestructuredConst { variant, fields }\n }\n+\n+pub(crate) fn deref_const<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    val: &'tcx ty::Const<'tcx>,\n+) -> &'tcx ty::Const<'tcx> {\n+    trace!(\"deref_const: {:?}\", val);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n+    let op = ecx.const_to_op(val, None).unwrap();\n+    let mplace = ecx.deref_operand(op).unwrap();\n+    if let Scalar::Ptr(ptr) = mplace.ptr {\n+        assert_eq!(\n+            ecx.memory.get_raw(ptr.alloc_id).unwrap().mutability,\n+            Mutability::Not,\n+            \"deref_const cannot be used with mutable allocations as \\\n+            that could allow pattern matching to observe mutable statics\",\n+        );\n+    }\n+\n+    let ty = match mplace.meta {\n+        MemPlaceMeta::None => mplace.layout.ty,\n+        MemPlaceMeta::Poison => bug!(\"poison metadata in `deref_const`: {:#?}\", mplace),\n+        // In case of unsized types, figure out the real type behind.\n+        MemPlaceMeta::Meta(scalar) => match mplace.layout.ty.kind {\n+            ty::Dynamic(..) => ecx.read_drop_type_from_vtable(scalar).unwrap().1,\n+            ty::Str => bug!(\"there's no sized equivalent of a `str`\"),\n+            ty::Slice(elem_ty) => tcx.mk_array(elem_ty, scalar.to_machine_usize(&tcx).unwrap()),\n+            _ => bug!(\n+                \"type {} should not have metadata, but had {:?}\",\n+                mplace.layout.ty,\n+                mplace.meta\n+            ),\n+        },\n+    };\n+\n+    tcx.mk_const(ty::Const { val: ty::ConstKind::Value(op_to_const(&ecx, mplace.into())), ty })\n+}"}, {"sha": "504c4ecd85ce30fe94ab0ced54f558b887029e8a", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c62e0abc82b7302a3b0ee16dfe445e1330ce4c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=34c62e0abc82b7302a3b0ee16dfe445e1330ce4c", "patch": "@@ -60,4 +60,8 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)\n     };\n+    providers.deref_const = |tcx, param_env_and_value| {\n+        let (param_env, value) = param_env_and_value.into_parts();\n+        const_eval::deref_const(tcx, param_env, value)\n+    };\n }"}]}