{"sha": "15a0299299e438b1e8624989231c44cc3738896a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTAyOTkyOTllNDM4YjFlODYyNDk4OTIzMWM0NGNjMzczODg5NmE=", "commit": {"author": {"name": "Jonathan Price", "email": "jonmarkprice@users.noreply.github.com", "date": "2016-06-27T23:06:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-27T23:06:40Z"}, "message": "many small grammatical and stylistic changes\n\ngrammatical: \"Here's\" should be \"Here are\", \"rules\" is plural.\r\nstylistic: \"rules for\" is more idiomatic than \"rules about\".\r\ngrammatical: No verb in \"One or the other\"; changed to \"It's one or the other\".\r\ncode: added implied `fn main() { ... }` because it is referenced in \"note: previous borrow ends here\"\r\nsemantic: \"But\" seems like the wrong word here, there is now, contrast, only further explanation. \"so\", \"thus\" or \"therefor\" is clearer.\r\ngrammatical: Another misuse of \"Here's\", should be \"Here are\" (or possibly \"Here're\").\r\ngrammatical: \"use\" should be capitalized. All other subheadings capitalize the first word.", "tree": {"sha": "e0d325c0a40810df1ab6fb66d7ac125e1d2c238e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d325c0a40810df1ab6fb66d7ac125e1d2c238e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a0299299e438b1e8624989231c44cc3738896a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a0299299e438b1e8624989231c44cc3738896a", "html_url": "https://github.com/rust-lang/rust/commit/15a0299299e438b1e8624989231c44cc3738896a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a0299299e438b1e8624989231c44cc3738896a/comments", "author": {"login": "jonmarkprice", "id": 6698070, "node_id": "MDQ6VXNlcjY2OTgwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/6698070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonmarkprice", "html_url": "https://github.com/jonmarkprice", "followers_url": "https://api.github.com/users/jonmarkprice/followers", "following_url": "https://api.github.com/users/jonmarkprice/following{/other_user}", "gists_url": "https://api.github.com/users/jonmarkprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonmarkprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonmarkprice/subscriptions", "organizations_url": "https://api.github.com/users/jonmarkprice/orgs", "repos_url": "https://api.github.com/users/jonmarkprice/repos", "events_url": "https://api.github.com/users/jonmarkprice/events{/privacy}", "received_events_url": "https://api.github.com/users/jonmarkprice/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd554054034ec65e4a3ba4db127163dedd96743", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd554054034ec65e4a3ba4db127163dedd96743", "html_url": "https://github.com/rust-lang/rust/commit/9dd554054034ec65e4a3ba4db127163dedd96743"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "57bfbce8b84debab2f26a638ae1aed85ecc491ed", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/15a0299299e438b1e8624989231c44cc3738896a/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/15a0299299e438b1e8624989231c44cc3738896a/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=15a0299299e438b1e8624989231c44cc3738896a", "patch": "@@ -179,7 +179,7 @@ As it turns out, there are rules.\n \n # The Rules\n \n-Here\u2019s the rules about borrowing in Rust:\n+Here are the rules for borrowing in Rust:\n \n First, any borrow must last for a scope no greater than that of the owner.\n Second, you may have one or the other of these two kinds of borrows, but not\n@@ -208,12 +208,14 @@ With this in mind, let\u2019s consider our example again.\n Here\u2019s the code:\n \n ```rust,ignore\n-let mut x = 5;\n-let y = &mut x;\n+fn main() {\n+    let mut x = 5;\n+    let y = &mut x;\n \n-*y += 1;\n+    *y += 1;\n \n-println!(\"{}\", x);\n+    println!(\"{}\", x);\n+}\n ```\n \n This code gives us this error:\n@@ -225,7 +227,7 @@ error: cannot borrow `x` as immutable because it is also borrowed as mutable\n ```\n \n This is because we\u2019ve violated the rules: we have a `&mut T` pointing to `x`,\n-and so we aren\u2019t allowed to create any `&T`s. One or the other. The note\n+and so we aren\u2019t allowed to create any `&T`s. It's one or the other. The note\n hints at how to think about this problem:\n \n ```text\n@@ -243,14 +245,16 @@ In Rust, borrowing is tied to the scope that the borrow is valid for. And our\n scopes look like this:\n \n ```rust,ignore\n-let mut x = 5;\n-\n-let y = &mut x;    // -+ &mut borrow of x starts here\n-                   //  |\n-*y += 1;           //  |\n-                   //  |\n-println!(\"{}\", x); // -+ - try to borrow x here\n-                   // -+ &mut borrow of x ends here\n+fn main() {\n+    let mut x = 5;\n+\n+    let y = &mut x;    // -+ &mut borrow of x starts here\n+                       //  |\n+    *y += 1;           //  |\n+                       //  |\n+    println!(\"{}\", x); // -+ - try to borrow x here\n+}                      // -+ &mut borrow of x ends here\n+                       \n ```\n \n The scopes conflict: we can\u2019t make an `&x` while `y` is in scope.\n@@ -269,12 +273,12 @@ println!(\"{}\", x);  // <- try to borrow x here\n ```\n \n There\u2019s no problem. Our mutable borrow goes out of scope before we create an\n-immutable one. But scope is the key to seeing how long a borrow lasts for.\n+immutable one. So scope is the key to seeing how long a borrow lasts for.\n \n ## Issues borrowing prevents\n \n Why have these restrictive rules? Well, as we noted, these rules prevent data\n-races. What kinds of issues do data races cause? Here\u2019s a few.\n+races. What kinds of issues do data races cause? Here are a few.\n \n ### Iterator invalidation\n \n@@ -323,7 +327,7 @@ for i in &v {\n \n We can\u2019t modify `v` because it\u2019s borrowed by the loop.\n \n-### use after free\n+### Use after free\n \n References must not live longer than the resource they refer to. Rust will\n check the scopes of your references to ensure that this is true."}]}