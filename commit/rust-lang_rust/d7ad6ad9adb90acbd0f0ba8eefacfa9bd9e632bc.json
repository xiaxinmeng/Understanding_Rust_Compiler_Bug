{"sha": "d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "node_id": "C_kwDOAAsO6NoAKGQ3YWQ2YWQ5YWRiOTBhY2JkMGYwYmE4ZWVmYWNmYTliZDllNjMyYmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-27T07:25:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T07:25:09Z"}, "message": "Rollup merge of #103475 - oli-obk:generic_param_indices, r=lcnr\n\nMake param index generation a bit more robust\n\nr? ````@lcnr````\n\nWhile not really necessary for closure and anon const ids, it's strictly more correct", "tree": {"sha": "261987aa7e5992b9295df0b72f5f102855a85cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261987aa7e5992b9295df0b72f5f102855a85cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWjJVCRBK7hj4Ov3rIwAAnRwIADY9UhfltJGeQr76KFDLpZg8\nKrT3+0bdWJ1deYOFZopba6tCUyD1I4C1aFLWGqxPfg44+J02NHdzj2NEdZNxB1A+\n0QzXCqaGKhZ4kxr7OSyq1Q06GwIH4SD2Zz5GY+6ag+651H40EWP0UMhGMztYlVpS\n39vm31tMmBGoZI1WMMIhs8+BYeJep9ydeGNFI02rURg6Bz1y+JPAghtR/yCKDOD7\nZrY+g9oPjTH7YPPYS93qtti2TCRqXuQvdNSN6kroHO9EHYyQpwyLDbydgLPX01S2\nn9aWK3ALrSBMXmi7LfoH/oYMAxthI29pIgeQrbY4VsGESKE3AAR1x0Ep9Q58K+M=\n=qnGg\n-----END PGP SIGNATURE-----\n", "payload": "tree 261987aa7e5992b9295df0b72f5f102855a85cfc\nparent 0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7\nparent b6824ba52adda195f6279cd84e248936788188b9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666855509 +0200\ncommitter GitHub <noreply@github.com> 1666855509 +0200\n\nRollup merge of #103475 - oli-obk:generic_param_indices, r=lcnr\n\nMake param index generation a bit more robust\n\nr? ````@lcnr````\n\nWhile not really necessary for closure and anon const ids, it's strictly more correct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "html_url": "https://github.com/rust-lang/rust/commit/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "html_url": "https://github.com/rust-lang/rust/commit/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7"}, {"sha": "b6824ba52adda195f6279cd84e248936788188b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6824ba52adda195f6279cd84e248936788188b9", "html_url": "https://github.com/rust-lang/rust/commit/b6824ba52adda195f6279cd84e248936788188b9"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c7777a946893a689e3eb56b45109a7138320f38a", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "patch": "@@ -249,6 +249,11 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n+    let mut next_index = || {\n+        let prev = i;\n+        i += 1;\n+        prev as u32 + type_start\n+    };\n \n     const TYPE_DEFAULT_NOT_ALLOWED: &'static str = \"defaults for type parameters are only allowed in \\\n     `struct`, `enum`, `type`, or `trait` definitions\";\n@@ -278,15 +283,13 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n             let kind = ty::GenericParamDefKind::Type { has_default: default.is_some(), synthetic };\n \n-            let param_def = ty::GenericParamDef {\n-                index: type_start + i as u32,\n+            Some(ty::GenericParamDef {\n+                index: next_index(),\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind,\n-            };\n-            i += 1;\n-            Some(param_def)\n+            })\n         }\n         GenericParamKind::Const { default, .. } => {\n             if !matches!(allow_defaults, Defaults::Allowed) && default.is_some() {\n@@ -297,15 +300,13 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 );\n             }\n \n-            let param_def = ty::GenericParamDef {\n-                index: type_start + i as u32,\n+            Some(ty::GenericParamDef {\n+                index: next_index(),\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n-            };\n-            i += 1;\n-            Some(param_def)\n+            })\n         }\n     }));\n \n@@ -323,8 +324,8 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             &[\"<closure_kind>\", \"<closure_signature>\", \"<upvars>\"][..]\n         };\n \n-        params.extend(dummy_args.iter().enumerate().map(|(i, &arg)| ty::GenericParamDef {\n-            index: type_start + i as u32,\n+        params.extend(dummy_args.iter().map(|&arg| ty::GenericParamDef {\n+            index: next_index(),\n             name: Symbol::intern(arg),\n             def_id,\n             pure_wrt_drop: false,\n@@ -337,7 +338,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n         if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n             params.push(ty::GenericParamDef {\n-                index: type_start,\n+                index: next_index(),\n                 name: Symbol::intern(\"<const_ty>\"),\n                 def_id,\n                 pure_wrt_drop: false,"}]}