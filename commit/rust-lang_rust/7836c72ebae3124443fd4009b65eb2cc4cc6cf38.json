{"sha": "7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MzZjNzJlYmFlMzEyNDQ0M2ZkNDAwOWI2NWViMmNjNGNjNmNmMzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-26T20:37:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:22Z"}, "message": "Patch tests and create new tests related to projection from a HRTB.", "tree": {"sha": "aa03ee35782093c0fcbddce93e5b8399197bec6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa03ee35782093c0fcbddce93e5b8399197bec6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "html_url": "https://github.com/rust-lang/rust/commit/7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3657ae13f5f7ef4367a6de4b61bd4143fc6b52b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3657ae13f5f7ef4367a6de4b61bd4143fc6b52b4", "html_url": "https://github.com/rust-lang/rust/commit/3657ae13f5f7ef4367a6de4b61bd4143fc6b52b4"}], "stats": {"total": 439, "additions": 399, "deletions": 40}, "files": [{"sha": "b89cdd8c0eed7c233ca1efc07385c85fdf382694", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -25,6 +25,7 @@ impl Foo for int {\n     fn boo(&self) -> uint { 42 }\n }\n \n-fn baz<I: Foo>(x: &<I as Foo<A=Bar>>::A) {} //~ERROR equality constraints are not allowed in this\n+fn baz<I: Foo>(x: &<I as Foo<A=Bar>>::A) {}\n+//~^ ERROR associated type bindings are not allowed here\n \n pub fn main() {}"}, {"sha": "e5974925d7370b6d813962e3cfa8858f6f08c6d6", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -43,6 +43,6 @@ pub fn baz(x: &Foo<A=Bar>) {\n \n pub fn main() {\n     let a = 42i;\n-    foo1(a); //~ERROR the trait `Foo` is not implemented for the type `int`\n-    baz(&a); //~ERROR the trait `Foo` is not implemented for the type `int`\n+    foo1(a); //~ERROR expected uint, found struct Bar\n+    baz(&a); //~ERROR expected uint, found struct Bar\n }"}, {"sha": "aad55745c25dfb9eceeeecff9073a1a860106f89", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check testing of equality constraints in a higher-ranked context.\n+\n+#![feature(associated_types)]\n+\n+pub trait TheTrait<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+struct IntStruct {\n+    x: int\n+}\n+\n+impl<'a> TheTrait<&'a int> for IntStruct {\n+    type A = &'a int;\n+\n+    fn get(&self, t: &'a int) -> &'a int {\n+        t\n+    }\n+}\n+\n+struct UintStruct {\n+    x: int\n+}\n+\n+impl<'a> TheTrait<&'a int> for UintStruct {\n+    type A = &'a uint;\n+\n+    fn get(&self, t: &'a int) -> &'a uint {\n+        panic!()\n+    }\n+}\n+\n+fn foo<T>()\n+    where T : for<'x> TheTrait<&'x int, A = &'x int>\n+{\n+    // ok for IntStruct, but not UintStruct\n+}\n+\n+fn bar<T>()\n+    where T : for<'x> TheTrait<&'x int, A = &'x uint>\n+{\n+    // ok for UintStruct, but not IntStruct\n+}\n+\n+fn baz<T>()\n+    where T : for<'x,'y> TheTrait<&'x int, A = &'y int>\n+{\n+    // not ok for either struct, due to the use of two lifetimes\n+}\n+\n+pub fn main() {\n+    foo::<IntStruct>();\n+    foo::<UintStruct>(); //~ ERROR type mismatch\n+\n+    bar::<IntStruct>(); //~ ERROR type mismatch\n+    bar::<UintStruct>();\n+\n+    baz::<IntStruct>(); //~ ERROR type mismatch\n+    baz::<UintStruct>(); //~ ERROR type mismatch\n+}"}, {"sha": "fcd3e4d1636468379318c1529e6d177801126726", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -18,16 +18,6 @@ trait Get {\n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n \n-trait Other {\n-    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR no suitable bound on `Self`\n-}\n-\n-impl<T:Get> Other for T {\n-    fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-    //~^ ERROR currently unsupported\n-}\n-\n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;"}, {"sha": "7e4e1315110af5e29281044b22111db0f1fe08d2", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the user gets an errror if they omit a binding from an\n+// object type.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo {\n+    type A;\n+    type B;\n+    fn boo(&self) -> <Self as Foo>::A;\n+}\n+\n+struct Bar;\n+\n+impl Foo for int {\n+    type A = uint;\n+    type B = char;\n+    fn boo(&self) -> uint {\n+        42\n+    }\n+}\n+\n+pub fn main() {\n+    let a = &42i as &Foo<A=uint, B=char>;\n+\n+    let b = &42i as &Foo<A=uint>;\n+    //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n+\n+    let c = &42i as &Foo<B=char>;\n+    //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n+\n+    let d = &42i as &Foo;\n+    //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n+    //~| ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n+}"}, {"sha": "6b856204091516dd47b31839ae9d46fccad15ed6", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -21,7 +21,7 @@ struct Struct {\n \n impl Struct {\n     fn uhoh<T>(foo: <T as Get>::Value) {}\n-    //~^ ERROR no suitable bound on `T`\n+    //~^ ERROR the trait `Get` is not implemented for the type `T`\n }\n \n fn main() {", "previous_filename": "src/test/compile-fail/associated-types-in-wrong-context.rs"}, {"sha": "c4110a6946d9d1267509058ba43ae47ebcb69e1d", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,21 @@\n+#![feature(associated_types)]\n+\n+// Check that we get an error when you use `<Self as Get>::Value` in\n+// the trait definition but `Self` does not, in fact, implement `Get`.\n+\n+trait Get {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n+    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+}\n+\n+impl<T:Get> Other for T {\n+    fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n+    //~^ ERROR the trait `Get` is not implemented for the type `(T, U)`\n+    //~| ERROR the trait `Get` is not implemented for the type `(T, U)`\n+}\n+\n+fn main() { }"}, {"sha": "1f0f044a4c0c390797287276d8aa36613bdac1be", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-explicit.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test you can't use a higher-ranked trait bound inside of a qualified\n+// path (just won't parse).\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I>(x: <I as for<'x> Foo<&'x int>>::A)\n+    //~^ ERROR expected identifier, found keyword `for`\n+    //~| ERROR expected one of `::` or `>`\n+{\n+}\n+\n+pub fn main() {}"}, {"sha": "6d2392c124b30170f239832200d833c3cd78d0e1", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38"}, {"sha": "8cdca50d9b6bd077401d1098cd0dd3b50da51418", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check projection of an associated type out of a higher-ranked\n+// trait-bound in the context of a function body.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo<'a, I : for<'x> Foo<&'x int>>(\n+    x: <I as Foo<&'a int>>::A)\n+{\n+    let y: I::A = x;\n+}\n+\n+fn bar<'a, 'b, I : for<'x> Foo<&'x int>>(\n+    x: <I as Foo<&'a int>>::A,\n+    y: <I as Foo<&'b int>>::A,\n+    cond: bool)\n+{ //~ ERROR cannot infer\n+    // x and y here have two distinct lifetimes:\n+    let z: I::A = if cond { x } else { y };\n+}\n+\n+pub fn main() {}"}, {"sha": "0d5c69591423b8605414358a77a133aaa977b001", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a function signature.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I : for<'x> Foo<&'x int>>(\n+    x: I::A)\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+{\n+    // This case is illegal because we have to instantiate `'x`, and\n+    // we don't know what region to instantiate it with.\n+    //\n+    // This could perhaps be made equivalent to the examples below,\n+    // specifically for fn signatures.\n+}\n+\n+fn foo3<I : for<'x> Foo<&'x int>>(\n+    x: <I as Foo<&int>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved, though we left one of\n+    // them anonymous.\n+}\n+\n+fn foo4<'a, I : for<'x> Foo<&'x int>>(\n+    x: <I as Foo<&'a int>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved.\n+}\n+\n+\n+pub fn main() {}"}, {"sha": "5016c6448a50e7322eb2117526540e951c46900d", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a struct definition.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+struct SomeStruct<I : for<'x> Foo<&'x int>> {\n+    field: I::A\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n+struct AnotherStruct<I : for<'x> Foo<&'x int>> {\n+    field: <I as Foo<&int>>::A\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+struct YetAnotherStruct<'a, I : for<'x> Foo<&'x int>> {\n+    field: <I as Foo<&'a int>>::A\n+}\n+\n+pub fn main() {}"}, {"sha": "a92d4ec04cb20ca6bef96d2f2455f88831e0b6e5", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a method definition in a trait.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+trait SomeTrait<I : for<'x> Foo<&'x int>> {\n+    fn some_method(&self, arg: I::A);\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n+trait AnotherTrait<I : for<'x> Foo<&'x int>> {\n+    fn some_method(&self, arg: <I as Foo<&int>>::A);\n+}\n+\n+trait YetAnotherTrait<I : for<'x> Foo<&'x int>> {\n+    fn some_method<'a>(&self, arg: <I as Foo<&'a int>>::A);\n+}\n+\n+pub fn main() {}"}, {"sha": "c11b5d2287855d9e71fa7a4ee442f375afac07fe", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -41,14 +41,14 @@ enum Boo {\n     Quux(Bar<uint>),\n }\n \n-struct Badness<T> {\n+struct Badness<U> {\n //~^ ERROR not implemented\n-    b: Foo<T>,\n+    b: Foo<U>,\n }\n \n-enum MoreBadness<T> {\n+enum MoreBadness<V> {\n //~^ ERROR not implemented\n-    EvenMoreBadness(Bar<T>),\n+    EvenMoreBadness(Bar<V>),\n }\n \n trait PolyTrait<T> {"}, {"sha": "2c8a2b361d596be0a6e15ade8dff5ea4d9f19143", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test sized-ness checking in substitution in impls.\n+\n+// impl - struct\n+\n+struct S5<Y>;\n+\n+impl<Sized? X> S5<X> { //~ ERROR not implemented\n+}\n+\n+fn main() { }"}, {"sha": "0f0a97fab4d7580560e214803861d4d8b99f3953", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test sized-ness checking in substitution in impls.\n+\n+// impl - struct\n+trait T3<Sized? Z> {\n+}\n+\n+struct S5<Y>;\n+\n+impl<Sized? X> T3<X> for S5<X> { //~ ERROR not implemented\n+}\n+\n+fn main() { }"}, {"sha": "bdb652b168a8c5fac1bd12379f53bb7d416b3c3c", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test sized-ness checking in substitution in impls.\n+\n+// impl - unbounded\n+trait T2<Z> {\n+}\n+struct S4<Sized? Y>;\n+impl<Sized? X> T2<X> for S4<X> {\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `X`\n+}\n+\n+fn main() { }"}, {"sha": "0537fc1f94ad77dfaef5aa2fa7389501da7773e0", "filename": "src/test/compile-fail/unsized4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized4.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -13,7 +13,7 @@\n trait T {}\n \n fn f<Sized? Y: T>() {\n-//~^ERROR incompatible bounds on type parameter `Y`, bound `T` does not allow unsized type\n+//~^ERROR incompatible bounds on `Y`, bound `T` does not allow unsized type\n }\n \n pub fn main() {"}, {"sha": "c0e6ae1db92c4aacc0a8b914eb81a81fe14b8c38", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -21,23 +21,4 @@ impl<Sized? X: T> T1<X> for S3<X> {\n     //~^ ERROR `core::kinds::Sized` is not implemented for the type `X`\n }\n \n-// impl - unbounded\n-trait T2<Z> {\n-}\n-struct S4<Sized? Y>;\n-impl<Sized? X> T2<X> for S4<X> {\n-    //~^ ERROR `core::kinds::Sized` is not implemented for the type `X`\n-}\n-\n-// impl - struct\n-trait T3<Sized? Z> {\n-}\n-struct S5<Y>;\n-impl<Sized? X> T3<X> for S5<X> { //~ ERROR not implemented\n-}\n-\n-impl<Sized? X> S5<X> { //~ ERROR not implemented\n-}\n-\n-\n fn main() { }"}, {"sha": "aeb140874779d6c8590605c0297c76b9a64ac40b", "filename": "src/test/run-pass/issue-19081.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19081.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty -- currently pretty prints as `Hash<<Self as Hasher...` which fails to parse\n+\n #![feature(associated_types)]\n \n pub trait Hasher {\n     type State;\n \n     fn hash<T: Hash<\n-        <Self as Hasher>::State //~ ERROR no suitable bound on `Self`\n+        <Self as Hasher>::State\n     >>(&self, value: &T) -> u64;\n }\n ", "previous_filename": "src/test/compile-fail/issue-19081.rs"}, {"sha": "79afb856be26fce01c2f50d15ea59f236e296157", "filename": "src/test/run-pass/issue-19121.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7836c72ebae3124443fd4009b65eb2cc4cc6cf38/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19121.rs?ref=7836c72ebae3124443fd4009b65eb2cc4cc6cf38", "patch": "@@ -17,6 +17,8 @@ trait Foo {\n     type A;\n }\n \n-fn bar(x: &Foo) {} //~ERROR missing type for associated type `A`\n+fn bar(x: &Foo) {}\n+// FIXME(#19482) -- `Foo` should specify `A`, but this is not\n+// currently enforced except at object creation\n \n pub fn main() {}", "previous_filename": "src/test/compile-fail/issue-19121.rs"}]}