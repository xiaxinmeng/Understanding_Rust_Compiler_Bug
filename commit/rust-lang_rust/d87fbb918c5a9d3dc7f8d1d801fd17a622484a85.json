{"sha": "d87fbb918c5a9d3dc7f8d1d801fd17a622484a85", "node_id": "C_kwDOAAsO6NoAKGQ4N2ZiYjkxOGM1YTlkM2RjN2Y4ZDFkODAxZmQxN2E2MjI0ODRhODU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-08T08:46:15Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-15T12:02:00Z"}, "message": "Deduplicate logic between projection normalization with and without escaping bound vars", "tree": {"sha": "231b98213db757c1e6f023e8f5dd2c2fb8d10ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231b98213db757c1e6f023e8f5dd2c2fb8d10ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85", "html_url": "https://github.com/rust-lang/rust/commit/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3d537b9728697da09b974fd9ac76a14197de514", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d537b9728697da09b974fd9ac76a14197de514", "html_url": "https://github.com/rust-lang/rust/commit/d3d537b9728697da09b974fd9ac76a14197de514"}], "stats": {"total": 80, "additions": 21, "deletions": 59}, "files": [{"sha": "a986a9b6a71b13597cd72125de3684527845408b", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 21, "deletions": 59, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87fbb918c5a9d3dc7f8d1d801fd17a622484a85/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d87fbb918c5a9d3dc7f8d1d801fd17a622484a85", "patch": "@@ -257,62 +257,20 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n \n             ty::Opaque => ty.try_super_fold_with(self)?,\n \n-            ty::Projection if !data.has_escaping_bound_vars() => {\n-                // This branch is just an optimization: when we don't have escaping bound vars,\n-                // we don't need to replace them with placeholders (see branch below).\n-\n-                let tcx = self.infcx.tcx;\n-                let data = data.try_fold_with(self)?;\n-\n-                let mut orig_values = OriginalQueryValues::default();\n-                // HACK(matthewjasper) `'static` is special-cased in selection,\n-                // so we cannot canonicalize it.\n-                let c_data = self\n-                    .infcx\n-                    .canonicalize_query_keep_static(self.param_env.and(data), &mut orig_values);\n-                debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n-                debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n-                let result = tcx.normalize_projection_ty(c_data)?;\n-                // We don't expect ambiguity.\n-                if result.is_ambiguous() {\n-                    // Rustdoc normalizes possibly not well-formed types, so only\n-                    // treat this as a bug if we're not in rustdoc.\n-                    if !tcx.sess.opts.actually_rustdoc {\n-                        tcx.sess.delay_span_bug(\n-                            DUMMY_SP,\n-                            format!(\"unexpected ambiguity: {:?} {:?}\", c_data, result),\n-                        );\n-                    }\n-                    return Err(NoSolution);\n-                }\n-                let InferOk { value: result, obligations } =\n-                    self.infcx.instantiate_query_response_and_region_obligations(\n-                        self.cause,\n-                        self.param_env,\n-                        &orig_values,\n-                        result,\n-                    )?;\n-                debug!(\"QueryNormalizer: result = {:#?}\", result);\n-                debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n-                self.obligations.extend(obligations);\n-\n-                let res = result.normalized_ty;\n-                // `tcx.normalize_projection_ty` may normalize to a type that still has\n-                // unevaluated consts, so keep normalizing here if that's the case.\n-                if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n-                    res.try_super_fold_with(self)?\n-                } else {\n-                    res\n-                }\n-            }\n-\n             ty::Projection => {\n                 // See note in `rustc_trait_selection::traits::project`\n \n                 let tcx = self.infcx.tcx;\n                 let infcx = self.infcx;\n-                let (data, mapped_regions, mapped_types, mapped_consts) =\n-                    BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n+                // Just an optimization: When we don't have escaping bound vars,\n+                // we don't need to replace them with placeholders.\n+                let (data, maps) = if data.has_escaping_bound_vars() {\n+                    let (data, mapped_regions, mapped_types, mapped_consts) =\n+                        BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n+                    (data, Some((mapped_regions, mapped_types, mapped_consts)))\n+                } else {\n+                    (data, None)\n+                };\n                 let data = data.try_fold_with(self)?;\n \n                 let mut orig_values = OriginalQueryValues::default();\n@@ -346,14 +304,18 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-                let res = PlaceholderReplacer::replace_placeholders(\n-                    infcx,\n-                    mapped_regions,\n-                    mapped_types,\n-                    mapped_consts,\n-                    &self.universes,\n-                    result.normalized_ty,\n-                );\n+                let res = if let Some((mapped_regions, mapped_types, mapped_consts)) = maps {\n+                    PlaceholderReplacer::replace_placeholders(\n+                        infcx,\n+                        mapped_regions,\n+                        mapped_types,\n+                        mapped_consts,\n+                        &self.universes,\n+                        result.normalized_ty,\n+                    )\n+                } else {\n+                    result.normalized_ty\n+                };\n                 // `tcx.normalize_projection_ty` may normalize to a type that still has\n                 // unevaluated consts, so keep normalizing here if that's the case.\n                 if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {"}]}