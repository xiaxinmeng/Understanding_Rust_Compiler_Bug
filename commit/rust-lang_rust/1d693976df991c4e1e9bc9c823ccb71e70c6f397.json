{"sha": "1d693976df991c4e1e9bc9c823ccb71e70c6f397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjkzOTc2ZGY5OTFjNGUxZTliYzljODIzY2NiNzFlNzBjNmYzOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-05T15:42:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-05T15:42:48Z"}, "message": "`EmbargoVisitor::reexports` isn't needed", "tree": {"sha": "379ab5e67c1eb277fcfe2a04b86fdbc91f3cdc41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379ab5e67c1eb277fcfe2a04b86fdbc91f3cdc41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d693976df991c4e1e9bc9c823ccb71e70c6f397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d693976df991c4e1e9bc9c823ccb71e70c6f397", "html_url": "https://github.com/rust-lang/rust/commit/1d693976df991c4e1e9bc9c823ccb71e70c6f397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d693976df991c4e1e9bc9c823ccb71e70c6f397/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5092b09648f40d393252b3d16cf36abbc33b21e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5092b09648f40d393252b3d16cf36abbc33b21e5", "html_url": "https://github.com/rust-lang/rust/commit/5092b09648f40d393252b3d16cf36abbc33b21e5"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "491c8a2c4524ac833783cdeab14cd524d7fa6642", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d693976df991c4e1e9bc9c823ccb71e70c6f397/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d693976df991c4e1e9bc9c823ccb71e70c6f397/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1d693976df991c4e1e9bc9c823ccb71e70c6f397", "patch": "@@ -165,13 +165,6 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n     // may jump across private boundaries through reexport statements or type aliases.\n     exported_items: ExportedItems,\n \n-    // This sets contains all the destination nodes which are publicly\n-    // re-exported. This is *not* a set of all reexported nodes, only a set of\n-    // all nodes which are reexported *and* reachable from external crates. This\n-    // means that the destination of the reexport is exported, and hence the\n-    // destination must also be exported.\n-    reexports: NodeSet,\n-\n     // Items that are directly public without help of reexports or type aliases.\n     // These two fields are closely related to one another in that they are only\n     // used for generation of the `public_items` set, not for privacy checking at\n@@ -237,7 +230,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             _ => {\n                 self.prev_public = self.prev_public && item.vis == hir::Public;\n                 self.prev_exported = (self.prev_exported && item.vis == hir::Public) ||\n-                                     self.reexports.contains(&item.id);\n+                                     self.exported_items.contains(&item.id);\n \n                 self.maybe_insert_id(item.id);\n             }\n@@ -347,7 +340,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 for foreign_item in &foreign_mod.items {\n                     let public = self.prev_public && foreign_item.vis == hir::Public;\n                     let exported = (self.prev_exported && foreign_item.vis == hir::Public) ||\n-                                   self.reexports.contains(&foreign_item.id);\n+                                   self.exported_items.contains(&foreign_item.id);\n \n                     if public {\n                         self.public_items.insert(foreign_item.id);\n@@ -387,7 +380,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             assert!(self.export_map.contains_key(&id), \"wut {}\", id);\n             for export in self.export_map.get(&id).unwrap() {\n                 if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n-                    self.reexports.insert(node_id);\n+                    self.exported_items.insert(node_id);\n                 }\n             }\n         }\n@@ -1532,17 +1525,14 @@ pub fn check_crate(tcx: &ty::ctxt,\n         tcx: tcx,\n         exported_items: NodeSet(),\n         public_items: NodeSet(),\n-        reexports: NodeSet(),\n         export_map: export_map,\n         prev_exported: true,\n         prev_public: true,\n     };\n     loop {\n-        let before = (visitor.exported_items.len(), visitor.public_items.len(),\n-                      visitor.reexports.len());\n+        let before = (visitor.exported_items.len(), visitor.public_items.len());\n         visit::walk_crate(&mut visitor, krate);\n-        let after = (visitor.exported_items.len(), visitor.public_items.len(),\n-                     visitor.reexports.len());\n+        let after = (visitor.exported_items.len(), visitor.public_items.len());\n         if after == before {\n             break\n         }"}]}