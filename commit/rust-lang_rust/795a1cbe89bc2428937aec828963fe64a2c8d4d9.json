{"sha": "795a1cbe89bc2428937aec828963fe64a2c8d4d9", "node_id": "C_kwDOAAsO6NoAKDc5NWExY2JlODliYzI0Mjg5MzdhZWM4Mjg5NjNmZTY0YTJjOGQ0ZDk", "commit": {"author": {"name": "bruno-ortiz", "email": "brunortiz11@gmail.com", "date": "2022-02-26T00:37:55Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:48:33Z"}, "message": "Creating rust dependencies tree view", "tree": {"sha": "0e07a8bfd2c0cef3e401bad15755a425528916cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e07a8bfd2c0cef3e401bad15755a425528916cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795a1cbe89bc2428937aec828963fe64a2c8d4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795a1cbe89bc2428937aec828963fe64a2c8d4d9", "html_url": "https://github.com/rust-lang/rust/commit/795a1cbe89bc2428937aec828963fe64a2c8d4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795a1cbe89bc2428937aec828963fe64a2c8d4d9/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cffc402c058f9d4d0675ed20bd920fa700c361ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cffc402c058f9d4d0675ed20bd920fa700c361ec", "html_url": "https://github.com/rust-lang/rust/commit/cffc402c058f9d4d0675ed20bd920fa700c361ec"}], "stats": {"total": 480, "additions": 410, "deletions": 70}, "files": [{"sha": "5e2a1c69e94409c63e90980443f3a355b18e4f40", "filename": "editors/code/package.json", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -284,6 +284,14 @@\n                 \"command\": \"rust-analyzer.clearFlycheck\",\n                 \"title\": \"Clear flycheck diagnostics\",\n                 \"category\": \"rust-analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.openFile\",\n+                \"title\": \"Open File\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.revealDependency\",\n+                \"title\": \"Reveal File\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1956,11 +1964,19 @@\n                 }\n             ]\n         },\n+        \"views\": {\n+            \"explorer\": [\n+                {\n+                    \"id\": \"rustDependencies\",\n+                    \"name\": \"Rust Dependencies\"\n+                }\n+            ]\n+        },\n         \"jsonValidation\": [\n             {\n                 \"fileMatch\": \"rust-project.json\",\n                 \"url\": \"https://json.schemastore.org/rust-project.json\"\n             }\n         ]\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "e5aa06025b21a4e3207594a416b4791871b80de1", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -8,10 +8,11 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from \"./util\";\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from './util';\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";\n+import { DependencyId } from './dependencies_provider';\n \n export * from \"./ast_inspector\";\n export * from \"./run\";\n@@ -266,6 +267,44 @@ export function openCargoToml(ctx: CtxInit): Cmd {\n     };\n }\n \n+export function openFile(_ctx: CtxInit): Cmd {\n+    return async (uri: vscode.Uri) => {\n+        try {\n+            await vscode.window.showTextDocument(uri);\n+        } catch (err) {\n+            await vscode.window.showErrorMessage(err.message);\n+        }\n+    };\n+}\n+\n+export function revealDependency(ctx: CtxInit): Cmd {\n+    return async (editor: RustEditor) => {\n+        const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n+        const documentPath = editor.document.uri.fsPath;\n+        if (documentPath.startsWith(rootPath)) return;\n+        const dep = ctx.dependencies.getDependency(documentPath);\n+        if (dep) {\n+            await ctx.treeView.reveal(dep, { select: true, expand: true });\n+        } else {\n+            let documentPath = editor.document.uri.fsPath;\n+            const parentChain: DependencyId[] = [{ id: documentPath.toLowerCase() }];\n+            do {\n+                documentPath = path.dirname(documentPath);\n+                parentChain.push({ id: documentPath.toLowerCase() });\n+            }\n+            while (!ctx.dependencies.contains(documentPath));\n+            parentChain.reverse();\n+            for (const idx in parentChain) {\n+                await ctx.treeView.reveal(parentChain[idx], { select: true, expand: true });\n+            }\n+        }\n+    };\n+}\n+\n+export async function execRevealDependency(e: RustEditor): Promise<void> {\n+    await vscode.commands.executeCommand('rust-analyzer.revealDependency', e);\n+}\n+\n export function ssr(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;"}, {"sha": "e6829ac4b9ee72b1c7377218df797ab5953c1fd7", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -3,20 +3,22 @@ import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import { Config, prepareVSCodeConfig } from \"./config\";\n-import { createClient } from \"./client\";\n+import {Config, prepareVSCodeConfig} from './config';\n+import {createClient} from './client';\n import {\n     executeDiscoverProject,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n     log,\n     RustEditor,\n-} from \"./util\";\n-import { ServerStatusParams } from \"./lsp_ext\";\n-import { PersistentState } from \"./persistent_state\";\n-import { bootstrap } from \"./bootstrap\";\n-import { ExecOptions } from \"child_process\";\n+} from './util';\n+import {ServerStatusParams} from './lsp_ext';\n+import {Dependency, DependencyFile, RustDependenciesProvider, DependencyId} from './dependencies_provider';\n+import {execRevealDependency} from './commands';\n+import {PersistentState} from \"./persistent_state\";\n+import {bootstrap} from \"./bootstrap\";\n+import {ExecOptions} from \"child_process\";\n \n // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n // only those are in use. We use \"Empty\" to represent these scenarios\n@@ -25,12 +27,12 @@ import { ExecOptions } from \"child_process\";\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n-          kind: \"Workspace Folder\";\n-      }\n+    kind: \"Workspace Folder\";\n+}\n     | {\n-          kind: \"Detached Files\";\n-          files: vscode.TextDocument[];\n-      };\n+    kind: \"Detached Files\";\n+    files: vscode.TextDocument[];\n+};\n \n export function fetchWorkspace(): Workspace {\n     const folders = (vscode.workspace.workspaceFolders || []).filter(\n@@ -42,12 +44,12 @@ export function fetchWorkspace(): Workspace {\n \n     return folders.length === 0\n         ? rustDocuments.length === 0\n-            ? { kind: \"Empty\" }\n+            ? {kind: \"Empty\"}\n             : {\n-                  kind: \"Detached Files\",\n-                  files: rustDocuments,\n-              }\n-        : { kind: \"Workspace Folder\" };\n+                kind: \"Detached Files\",\n+                files: rustDocuments,\n+            }\n+        : {kind: \"Workspace Folder\"};\n }\n \n export async function discoverWorkspace(\n@@ -84,6 +86,8 @@ export class Ctx {\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n     private unlinkedFiles: vscode.Uri[];\n+    readonly dependencies: RustDependenciesProvider;\n+    readonly treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId>;\n \n     get client() {\n         return this._client;\n@@ -92,7 +96,9 @@ export class Ctx {\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n-        workspace: Workspace\n+        workspace: Workspace,\n+        dependencies: RustDependenciesProvider,\n+        treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId>\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -101,6 +107,8 @@ export class Ctx {\n         this.commandDisposables = [];\n         this.commandFactories = commandFactories;\n         this.unlinkedFiles = [];\n+        this.dependencies = dependencies;\n+        this.treeView = treeView;\n \n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n@@ -109,6 +117,13 @@ export class Ctx {\n         this.setServerStatus({\n             health: \"stopped\",\n         });\n+        vscode.window.onDidChangeActiveTextEditor(e => {\n+            if (e && isRustEditor(e)) {\n+                execRevealDependency(e).catch(reason => {\n+                    void vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n+                });\n+            }\n+        });\n     }\n \n     dispose() {\n@@ -174,7 +189,7 @@ export class Ctx {\n             const newEnv = Object.assign({}, process.env, this.config.serverExtraEnv);\n             const run: lc.Executable = {\n                 command: this._serverPath,\n-                options: { env: newEnv },\n+                options: {env: newEnv},\n             };\n             const serverOptions = {\n                 run,\n@@ -348,6 +363,7 @@ export class Ctx {\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n                 statusBar.command = \"rust-analyzer.stopServer\";\n+                this.dependencies.refresh();\n                 break;\n             case \"warning\":\n                 if (status.message) {\n@@ -410,4 +426,5 @@ export class Ctx {\n export interface Disposable {\n     dispose(): void;\n }\n+\n export type Cmd = (...args: any[]) => unknown;"}, {"sha": "0f2e5e5ea077fece155dbae28f0f69e0f1031c21", "filename": "editors/code/src/dependencies_provider.ts", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -0,0 +1,151 @@\n+import * as vscode from 'vscode';\n+import * as fspath from 'path';\n+import * as fs from 'fs';\n+import * as os from 'os';\n+import { activeToolchain, Cargo, Crate, getRustcVersion } from './toolchain';\n+\n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+\n+export class RustDependenciesProvider implements vscode.TreeDataProvider<Dependency | DependencyFile>{\n+  cargo: Cargo;\n+  dependenciesMap: { [id: string]: Dependency | DependencyFile };\n+\n+  constructor(\n+    private readonly workspaceRoot: string,\n+  ) {\n+    this.cargo = new Cargo(this.workspaceRoot || '.', debugOutput);\n+    this.dependenciesMap = {};\n+  }\n+\n+  private _onDidChangeTreeData: vscode.EventEmitter<Dependency | DependencyFile | undefined | null | void> = new vscode.EventEmitter<Dependency | undefined | null | void>();\n+\n+  readonly onDidChangeTreeData: vscode.Event<Dependency | DependencyFile | undefined | null | void> = this._onDidChangeTreeData.event;\n+\n+\n+  getDependency(filePath: string): Dependency | DependencyFile | undefined {\n+    return this.dependenciesMap[filePath.toLowerCase()];\n+  }\n+\n+  contains(filePath: string): boolean {\n+    return filePath.toLowerCase() in this.dependenciesMap;\n+  }\n+\n+  refresh(): void {\n+    this._onDidChangeTreeData.fire();\n+  }\n+\n+  getParent?(element: Dependency | DependencyFile): vscode.ProviderResult<Dependency | DependencyFile> {\n+    if (element instanceof Dependency) return undefined;\n+    return element.parent;\n+  }\n+\n+  getTreeItem(element: Dependency | DependencyFile): vscode.TreeItem | Thenable<vscode.TreeItem> {\n+    if (element.id! in this.dependenciesMap) return this.dependenciesMap[element.id!];\n+    return element;\n+  }\n+\n+  getChildren(element?: Dependency | DependencyFile): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n+    return new Promise((resolve, _reject) => {\n+      if (!this.workspaceRoot) {\n+        void vscode.window.showInformationMessage('No dependency in empty workspace');\n+        return Promise.resolve([]);\n+      }\n+\n+      if (element) {\n+        const files = fs.readdirSync(element.dependencyPath).map(fileName => {\n+          const filePath = fspath.join(element.dependencyPath, fileName);\n+          const collapsibleState = fs.lstatSync(filePath).isDirectory() ?\n+            vscode.TreeItemCollapsibleState.Collapsed :\n+            vscode.TreeItemCollapsibleState.None;\n+          const dep = new DependencyFile(\n+            fileName,\n+            filePath,\n+            element,\n+            collapsibleState\n+          );\n+          this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+          return dep;\n+        });\n+        return resolve(\n+          files\n+        );\n+      } else {\n+        return resolve(this.getRootDependencies());\n+      }\n+    });\n+  }\n+\n+  private async getRootDependencies(): Promise<Dependency[]> {\n+    const registryDir = fspath.join(os.homedir(), '.cargo', 'registry', 'src');\n+    const basePath = fspath.join(registryDir, fs.readdirSync(registryDir)[0]);\n+    const deps = await this.getDepsInCartoTree(basePath);\n+    const stdlib = await this.getStdLib();\n+    return [stdlib].concat(deps);\n+  }\n+\n+  private async getStdLib(): Promise<Dependency> {\n+    const toolchain = await activeToolchain();\n+    const rustVersion = await getRustcVersion(os.homedir());\n+    const stdlibPath = fspath.join(os.homedir(), '.rustup', 'toolchains', toolchain, 'lib', 'rustlib', 'src', 'rust', 'library');\n+    return new Dependency(\n+      \"stdlib\",\n+      rustVersion,\n+      stdlibPath,\n+      vscode.TreeItemCollapsibleState.Collapsed\n+    );\n+  }\n+\n+  private async getDepsInCartoTree(basePath: string): Promise<Dependency[]> {\n+    const crates: Crate[] = await this.cargo.crates();\n+    const toDep = (moduleName: string, version: string): Dependency => {\n+      const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n+      return new Dependency(\n+        moduleName,\n+        version,\n+        cratePath,\n+        vscode.TreeItemCollapsibleState.Collapsed\n+      );\n+    };\n+\n+    const deps = crates.map(crate => {\n+      const dep = toDep(crate.name, crate.version);\n+      this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+      return dep;\n+    });\n+    return deps;\n+  }\n+}\n+\n+\n+export class Dependency extends vscode.TreeItem {\n+  constructor(\n+    public readonly label: string,\n+    private version: string,\n+    readonly dependencyPath: string,\n+    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+  ) {\n+    super(label, collapsibleState);\n+    this.tooltip = `${this.label}-${this.version}`;\n+    this.description = this.version;\n+    this.resourceUri = vscode.Uri.file(dependencyPath);\n+  }\n+}\n+\n+export class DependencyFile extends vscode.TreeItem {\n+\n+  constructor(\n+    readonly label: string,\n+    readonly dependencyPath: string,\n+    readonly parent: Dependency | DependencyFile,\n+    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+  ) {\n+    super(vscode.Uri.file(dependencyPath), collapsibleState);\n+    const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n+    this.id = this.dependencyPath.toLowerCase();\n+    if (!isDir) {\n+      this.command = { command: 'rust-analyzer.openFile', title: \"Open File\", arguments: [vscode.Uri.file(this.dependencyPath)], };\n+    }\n+  }\n+}\n+\n+export type DependencyId = { id: string };\n\\ No newline at end of file"}, {"sha": "62b2e7a2771eb510ea624e2765595a460d8d1e3f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -2,10 +2,10 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n-import { CommandFactory, Ctx, fetchWorkspace } from \"./ctx\";\n+import {CommandFactory, Ctx, fetchWorkspace} from \"./ctx\";\n import * as diagnostics from \"./diagnostics\";\n-import { activateTaskProvider } from \"./tasks\";\n-import { setContextValue } from \"./util\";\n+import {activateTaskProvider} from \"./tasks\";\n+import {setContextValue} from \"./util\";\n \n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n@@ -24,11 +24,12 @@ export async function activate(\n         vscode.window\n             .showWarningMessage(\n                 `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n-                    \"both plugins to not work correctly. You should disable one of them.\",\n+                \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                \"both plugins to not work correctly. You should disable one of them.\",\n                 \"Got it\"\n             )\n-            .then(() => {}, console.error);\n+            .then(() => {\n+            }, console.error);\n     }\n \n     const ctx = new Ctx(context, createCommands(), fetchWorkspace());\n@@ -118,7 +119,7 @@ function createCommands(): Record<string, CommandFactory> {\n     return {\n         onEnter: {\n             enabled: commands.onEnter,\n-            disabled: (_) => () => vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" }),\n+            disabled: (_) => () => vscode.commands.executeCommand(\"default:type\", {text: \"\\n\"}),\n         },\n         restartServer: {\n             enabled: (ctx) => async () => {\n@@ -144,51 +145,54 @@ function createCommands(): Record<string, CommandFactory> {\n                     health: \"stopped\",\n                 });\n             },\n-            disabled: (_) => async () => {},\n+            disabled: (_) => async () => {\n+            },\n         },\n \n-        analyzerStatus: { enabled: commands.analyzerStatus },\n-        memoryUsage: { enabled: commands.memoryUsage },\n-        shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n-        reloadWorkspace: { enabled: commands.reloadWorkspace },\n-        rebuildProcMacros: { enabled: commands.rebuildProcMacros },\n-        addProject: { enabled: commands.addProject },\n-        matchingBrace: { enabled: commands.matchingBrace },\n-        joinLines: { enabled: commands.joinLines },\n-        parentModule: { enabled: commands.parentModule },\n-        syntaxTree: { enabled: commands.syntaxTree },\n-        viewHir: { enabled: commands.viewHir },\n-        viewMir: { enabled: commands.viewMir },\n+        analyzerStatus: {enabled: commands.analyzerStatus},\n+        memoryUsage: {enabled: commands.memoryUsage},\n+        shuffleCrateGraph: {enabled: commands.shuffleCrateGraph},\n+        reloadWorkspace: {enabled: commands.reloadWorkspace},\n+        rebuildProcMacros: {enabled: commands.rebuildProcMacros},\n+        addProject: {enabled: commands.addProject},\n+        matchingBrace: {enabled: commands.matchingBrace},\n+        joinLines: {enabled: commands.joinLines},\n+        parentModule: {enabled: commands.parentModule},\n+        syntaxTree: {enabled: commands.syntaxTree},\n+        viewHir: {enabled: commands.viewHir},\n+        viewMir: {enabled: commands.viewMir},\n         interpretFunction: { enabled: commands.interpretFunction },\n-        viewFileText: { enabled: commands.viewFileText },\n-        viewItemTree: { enabled: commands.viewItemTree },\n-        viewCrateGraph: { enabled: commands.viewCrateGraph },\n-        viewFullCrateGraph: { enabled: commands.viewFullCrateGraph },\n-        expandMacro: { enabled: commands.expandMacro },\n-        run: { enabled: commands.run },\n-        copyRunCommandLine: { enabled: commands.copyRunCommandLine },\n-        debug: { enabled: commands.debug },\n-        newDebugConfig: { enabled: commands.newDebugConfig },\n-        openDocs: { enabled: commands.openDocs },\n-        openCargoToml: { enabled: commands.openCargoToml },\n-        peekTests: { enabled: commands.peekTests },\n-        moveItemUp: { enabled: commands.moveItemUp },\n-        moveItemDown: { enabled: commands.moveItemDown },\n-        cancelFlycheck: { enabled: commands.cancelFlycheck },\n-        clearFlycheck: { enabled: commands.clearFlycheck },\n-        runFlycheck: { enabled: commands.runFlycheck },\n-        ssr: { enabled: commands.ssr },\n-        serverVersion: { enabled: commands.serverVersion },\n+        viewFileText: {enabled: commands.viewFileText},\n+        viewItemTree: {enabled: commands.viewItemTree},\n+        viewCrateGraph: {enabled: commands.viewCrateGraph},\n+        viewFullCrateGraph: {enabled: commands.viewFullCrateGraph},\n+        expandMacro: {enabled: commands.expandMacro},\n+        run: {enabled: commands.run},\n+        copyRunCommandLine: {enabled: commands.copyRunCommandLine},\n+        debug: {enabled: commands.debug},\n+        newDebugConfig: {enabled: commands.newDebugConfig},\n+        openDocs: {enabled: commands.openDocs},\n+        openCargoToml: {enabled: commands.openCargoToml},\n+        peekTests: {enabled: commands.peekTests},\n+        moveItemUp: {enabled: commands.moveItemUp},\n+        moveItemDown: {enabled: commands.moveItemDown},\n+        cancelFlycheck: {enabled: commands.cancelFlycheck},\n+        clearFlycheck: {enabled: commands.clearFlycheck},\n+        runFlycheck: {enabled: commands.runFlycheck},\n+        ssr: {enabled: commands.ssr},\n+        serverVersion: {enabled: commands.serverVersion},\n         // Internal commands which are invoked by the server.\n-        applyActionGroup: { enabled: commands.applyActionGroup },\n-        applySnippetWorkspaceEdit: { enabled: commands.applySnippetWorkspaceEditCommand },\n-        debugSingle: { enabled: commands.debugSingle },\n-        gotoLocation: { enabled: commands.gotoLocation },\n-        linkToCommand: { enabled: commands.linkToCommand },\n-        resolveCodeAction: { enabled: commands.resolveCodeAction },\n-        runSingle: { enabled: commands.runSingle },\n-        showReferences: { enabled: commands.showReferences },\n-        triggerParameterHints: { enabled: commands.triggerParameterHints },\n-        openLogs: { enabled: commands.openLogs },\n+        applyActionGroup: {enabled: commands.applyActionGroup},\n+        applySnippetWorkspaceEdit: {enabled: commands.applySnippetWorkspaceEditCommand},\n+        debugSingle: {enabled: commands.debugSingle},\n+        gotoLocation: {enabled: commands.gotoLocation},\n+        linkToCommand: {enabled: commands.linkToCommand},\n+        resolveCodeAction: {enabled: commands.resolveCodeAction},\n+        runSingle: {enabled: commands.runSingle},\n+        showReferences: {enabled: commands.showReferences},\n+        triggerParameterHints: {enabled: commands.triggerParameterHints},\n+        openLogs: {enabled: commands.openLogs},\n+        openFile: {enabled: commands.openFile},\n+        revealDependency: {enabled: commands.revealDependency}\n     };\n }"}, {"sha": "6f37451edd20a6fe252a06e1084dd89fd226be28", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/795a1cbe89bc2428937aec828963fe64a2c8d4d9/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=795a1cbe89bc2428937aec828963fe64a2c8d4d9", "patch": "@@ -5,6 +5,15 @@ import * as readline from \"readline\";\n import * as vscode from \"vscode\";\n import { execute, log, memoizeAsync } from \"./util\";\n \n+\n+const TREE_LINE_PATTERN = new RegExp(/(.+)\\sv(\\d+\\.\\d+\\.\\d+)(?:\\s\\((.+)\\))?/);\n+const TOOLCHAIN_PATTERN = new RegExp(/(.*)\\s\\(.*\\)/);\n+\n+export interface Crate {\n+    name: string;\n+    version: string;\n+}\n+\n interface CompilationArtifact {\n     fileName: string;\n     name: string;\n@@ -96,6 +105,43 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n+    async crates(): Promise<Crate[]> {\n+        const pathToCargo = await cargoPath();\n+        return await new Promise((resolve, reject) => {\n+            const crates: Crate[] = [];\n+\n+            const cargo = cp.spawn(pathToCargo, ['tree', '--prefix', 'none'], {\n+                stdio: ['ignore', 'pipe', 'pipe'],\n+                cwd: this.rootFolder\n+            });\n+            const rl = readline.createInterface({ input: cargo.stdout });\n+            rl.on('line', line => {\n+                const match = line.match(TREE_LINE_PATTERN);\n+                if (match) {\n+                    const name = match[1];\n+                    const version = match[2];\n+                    const extraInfo = match[3];\n+                    // ignore duplicates '(*)' and path dependencies\n+                    if (this.shouldIgnore(extraInfo)) {\n+                        return;\n+                    }\n+                    crates.push({ name, version });\n+                }\n+            });\n+            cargo.on('exit', (exitCode, _) => {\n+                if (exitCode === 0)\n+                    resolve(crates);\n+                else\n+                    reject(new Error(`exit code: ${exitCode}.`));\n+            });\n+\n+        });\n+    }\n+\n+    private shouldIgnore(extraInfo: string): boolean {\n+        return extraInfo !== undefined && (extraInfo === '*' || path.isAbsolute(extraInfo));\n+    }\n+\n     private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n@@ -127,6 +173,58 @@ export class Cargo {\n     }\n }\n \n+export async function activeToolchain(): Promise<string> {\n+    const pathToRustup = await rustupPath();\n+    return await new Promise((resolve, reject) => {\n+        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n+            stdio: ['ignore', 'pipe', 'pipe'],\n+            cwd: os.homedir()\n+        });\n+        const rl = readline.createInterface({ input: execution.stdout });\n+\n+        let currToolchain: string | undefined = undefined;\n+        rl.on('line', line => {\n+            const match = line.match(TOOLCHAIN_PATTERN);\n+            if (match) {\n+                currToolchain = match[1];\n+            }\n+        });\n+        execution.on('exit', (exitCode, _) => {\n+            if (exitCode === 0 && currToolchain)\n+                resolve(currToolchain);\n+            else\n+                reject(new Error(`exit code: ${exitCode}.`));\n+        });\n+\n+    });\n+}\n+\n+export async function rustVersion(): Promise<string> {\n+    const pathToRustup = await rustupPath();\n+    return await new Promise((resolve, reject) => {\n+        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n+            stdio: ['ignore', 'pipe', 'pipe'],\n+            cwd: os.homedir()\n+        });\n+        const rl = readline.createInterface({ input: execution.stdout });\n+\n+        let currToolchain: string | undefined = undefined;\n+        rl.on('line', line => {\n+            const match = line.match(TOOLCHAIN_PATTERN);\n+            if (match) {\n+                currToolchain = match[1];\n+            }\n+        });\n+        execution.on('exit', (exitCode, _) => {\n+            if (exitCode === 1 && currToolchain)\n+                resolve(currToolchain);\n+            else\n+                reject(new Error(`exit code: ${exitCode}.`));\n+        });\n+\n+    });\n+}\n+\n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n@@ -145,11 +243,26 @@ export async function getRustcId(dir: string): Promise<string> {\n     return rx.exec(data)![1];\n }\n \n+export async function getRustcVersion(dir: string): Promise<string> {\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n+\n+    // do not memoize the result because the toolchain may change between runs\n+    const data = await execute(`${rustcPath} -V`, { cwd: dir });\n+    const rx = /(\\d\\.\\d+\\.\\d+)/;\n+\n+    return rx.exec(data)![1];\n+}\n+\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");\n }\n \n+/** Mirrors `toolchain::cargo()` implementation */\n+export function rustupPath(): Promise<string> {\n+    return getPathForExecutable(\"rustup\");\n+}\n+\n /** Mirrors `toolchain::get_path_for_executable()` implementation */\n export const getPathForExecutable = memoizeAsync(\n     // We apply caching to decrease file-system interactions"}]}