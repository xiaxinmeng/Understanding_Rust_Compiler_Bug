{"sha": "9329957d321a3612fe9c95cf58a67115b0bbda5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMjk5NTdkMzIxYTM2MTJmZTljOTVjZjU4YTY3MTE1YjBiYmRhNWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T12:23:07Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T16:52:43Z"}, "message": "Const-propagate casts", "tree": {"sha": "e2d1fb7fb1508f6d00bde640f2a5df837c30c89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d1fb7fb1508f6d00bde640f2a5df837c30c89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9329957d321a3612fe9c95cf58a67115b0bbda5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9329957d321a3612fe9c95cf58a67115b0bbda5f", "html_url": "https://github.com/rust-lang/rust/commit/9329957d321a3612fe9c95cf58a67115b0bbda5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9329957d321a3612fe9c95cf58a67115b0bbda5f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "html_url": "https://github.com/rust-lang/rust/commit/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "d15dd14084aad5faf2521d3e91942d012bf6ff8d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9329957d321a3612fe9c95cf58a67115b0bbda5f", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::mir::interpret::ConstEvalErr;\n+use rustc::mir::interpret::{ConstEvalErr, EvalErrorKind};\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;\n@@ -145,17 +145,23 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         let r = match f(self) {\n             Ok(val) => Some(val),\n             Err(err) => {\n-                let (frames, span) = self.ecx.generate_stacktrace(None);\n-                let err = ConstEvalErr {\n-                    span,\n-                    error: err,\n-                    stacktrace: frames,\n-                };\n-                err.report_as_lint(\n-                    self.ecx.tcx,\n-                    \"this expression will panic at runtime\",\n-                    lint_root,\n-                );\n+                match err.kind {\n+                    // don't report these, they make no sense in a const prop context\n+                    EvalErrorKind::MachineError(_) => {},\n+                    _ => {\n+                        let (frames, span) = self.ecx.generate_stacktrace(None);\n+                        let err = ConstEvalErr {\n+                            span,\n+                            error: err,\n+                            stacktrace: frames,\n+                        };\n+                        err.report_as_lint(\n+                            self.ecx.tcx,\n+                            \"this expression will panic at runtime\",\n+                            lint_root,\n+                        );\n+                    }\n+                }\n                 None\n             },\n         };\n@@ -257,10 +263,25 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n             },\n             Rvalue::Repeat(..) |\n             Rvalue::Ref(..) |\n-            Rvalue::Cast(..) |\n             Rvalue::Aggregate(..) |\n             Rvalue::NullaryOp(NullOp::Box, _) |\n             Rvalue::Discriminant(..) => None,\n+\n+            Rvalue::Cast(kind, ref operand, _) => {\n+                let (value, ty, span) = self.eval_operand(operand, source_info)?;\n+                self.use_ecx(source_info, |this| {\n+                    let dest_ptr = this.ecx.alloc_ptr(place_ty)?;\n+                    let place_align = this.ecx.layout_of(place_ty)?.align;\n+                    let dest = ::interpret::Place::from_ptr(dest_ptr, place_align);\n+                    this.ecx.cast(ValTy { value, ty }, kind, place_ty, dest)?;\n+                    Ok((\n+                        Value::ByRef(dest_ptr.into(), place_align),\n+                        place_ty,\n+                        span,\n+                    ))\n+                })\n+            }\n+\n             // FIXME(oli-obk): evaluate static/constant slice lengths\n             Rvalue::Len(_) => None,\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n@@ -354,7 +375,6 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        use rustc::mir::interpret::EvalErrorKind;\n                         let err = EvalErrorKind::Overflow(op).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "022ed6c28c3bdf8400f205951a08f4f6ec14955a", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=9329957d321a3612fe9c95cf58a67115b0bbda5f", "patch": "@@ -166,7 +166,12 @@ fn main()\n \n     assert!(foo as usize != bar as usize);\n \n-    assert_eq!(foo as i16, foo as usize as i16);\n+    // Taking a few bits of a function's address is totally pointless and we detect that\n+    // Disabling the lint to ensure that the assertion can still be run\n+    #[allow(const_err)]\n+    {\n+        assert_eq!(foo as i16, foo as usize as i16);\n+    }\n \n     // fptr-ptr-cast\n "}, {"sha": "04e9bfbc03e27bbe6267d0e851674c3dc3643b9d", "filename": "src/test/ui/const-eval/promoted_errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs?ref=9329957d321a3612fe9c95cf58a67115b0bbda5f", "patch": "@@ -24,5 +24,8 @@ fn main() {\n     //~| WARN const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ WARN const_err\n+    //~| WARN const_err\n     let _x = 1/(false as u32);\n+    //~^ WARN const_err\n+    //~| WARN const_err\n }"}, {"sha": "9afe5f20af39402071ba632d149c00d671821bde", "filename": "src/test/ui/const-eval/promoted_errors.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9329957d321a3612fe9c95cf58a67115b0bbda5f/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr?ref=9329957d321a3612fe9c95cf58a67115b0bbda5f", "patch": "@@ -34,9 +34,27 @@ warning: this expression will panic at runtime\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:25:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:25:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:28:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^\n+\n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:28:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}]}