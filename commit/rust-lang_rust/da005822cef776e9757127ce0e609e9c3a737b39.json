{"sha": "da005822cef776e9757127ce0e609e9c3a737b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDA1ODIyY2VmNzc2ZTk3NTcxMjdjZTBlNjA5ZTljM2E3MzdiMzk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-09T17:23:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-09T17:23:34Z"}, "message": "Rollup merge of #68913 - Areredify:gat_pretty, r=cramertj\n\nPretty-print generic params and where clauses on associated types\n\ncloses #67509", "tree": {"sha": "52c5691c43d22163c42bf951294e106957a1ac47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c5691c43d22163c42bf951294e106957a1ac47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da005822cef776e9757127ce0e609e9c3a737b39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQEAWCRBK7hj4Ov3rIwAAdHIIAA7dWyqTMoY8ubEnPYgsPMTM\nOwKUtJhAXifDZyY/voohae+Z+9CcbC2ZuLvc0MdbsOr1FrXGoKKEaWfzfISuajwC\nAQW5rqkkTjfGTyUedJTjjWZV0Myx/aWHB4DSdIRveSZt7WScDcvs4JeRLVZ78SI9\no6nkTNT7n74uJSZIHPKR5SSmBTe/FyoIozsYwIt9kCYW1DOOu2iUrgPct4v+/ecu\ntSRj+Qugue+arQuJb7aCgZ7x0kKcNBXhSD1NpcrvpH2YV41yIjVeKrv8morhCkGE\nzkCX3iLBxLECCBTsbN7ChfsjcpUqsc/+rQG5PAmWKPYK18waGAXeyT6HS4v/FWE=\n=PzU/\n-----END PGP SIGNATURE-----\n", "payload": "tree 52c5691c43d22163c42bf951294e106957a1ac47\nparent f6b8281d34c9b272f097d7a6f8589d391526427b\nparent bf82582d6f8de744df5c34e80a04ad72f40afed7\nauthor Jonas Schievink <jonasschievink@gmail.com> 1581269014 +0100\ncommitter GitHub <noreply@github.com> 1581269014 +0100\n\nRollup merge of #68913 - Areredify:gat_pretty, r=cramertj\n\nPretty-print generic params and where clauses on associated types\n\ncloses #67509\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da005822cef776e9757127ce0e609e9c3a737b39", "html_url": "https://github.com/rust-lang/rust/commit/da005822cef776e9757127ce0e609e9c3a737b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da005822cef776e9757127ce0e609e9c3a737b39/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b8281d34c9b272f097d7a6f8589d391526427b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8281d34c9b272f097d7a6f8589d391526427b", "html_url": "https://github.com/rust-lang/rust/commit/f6b8281d34c9b272f097d7a6f8589d391526427b"}, {"sha": "bf82582d6f8de744df5c34e80a04ad72f40afed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf82582d6f8de744df5c34e80a04ad72f40afed7", "html_url": "https://github.com/rust-lang/rust/commit/bf82582d6f8de744df5c34e80a04ad72f40afed7"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "78bf149f0e01a4c569196aa21ee6952594a3963d", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da005822cef776e9757127ce0e609e9c3a737b39/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da005822cef776e9757127ce0e609e9c3a737b39/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=da005822cef776e9757127ce0e609e9c3a737b39", "patch": "@@ -1074,12 +1074,15 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n+        generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n     ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n+        self.print_generic_params(&generics.params);\n         self.print_type_bounds(\":\", bounds);\n+        self.print_where_clause(&generics.where_clause);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -1474,7 +1477,7 @@ impl<'a> State<'a> {\n                 self.print_fn_full(sig, item.ident, &item.generics, &item.vis, body, &item.attrs);\n             }\n             ast::AssocItemKind::TyAlias(bounds, ty) => {\n-                self.print_associated_type(item.ident, bounds, ty.as_deref());\n+                self.print_associated_type(item.ident, &item.generics, bounds, ty.as_deref());\n             }\n             ast::AssocItemKind::Macro(mac) => {\n                 self.print_mac(mac);"}, {"sha": "071c3de4b1c2c8d247b31664697bf83d6d17f602", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da005822cef776e9757127ce0e609e9c3a737b39/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da005822cef776e9757127ce0e609e9c3a737b39/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=da005822cef776e9757127ce0e609e9c3a737b39", "patch": "@@ -454,14 +454,17 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n+        generics: &hir::Generics<'_>,\n         bounds: Option<hir::GenericBounds<'_>>,\n         ty: Option<&hir::Ty<'_>>,\n     ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n+        self.print_generic_params(&generics.params);\n         if let Some(bounds) = bounds {\n             self.print_bounds(\":\", bounds);\n         }\n+        self.print_where_clause(&generics.where_clause);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -902,6 +905,7 @@ impl<'a> State<'a> {\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 self.print_associated_type(\n                     ti.ident,\n+                    &ti.generics,\n                     Some(bounds),\n                     default.as_ref().map(|ty| &**ty),\n                 );\n@@ -930,7 +934,7 @@ impl<'a> State<'a> {\n                 self.ann.nested(self, Nested::Body(body));\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {\n-                self.print_associated_type(ii.ident, None, Some(ty));\n+                self.print_associated_type(ii.ident, &ii.generics, None, Some(ty));\n             }\n             hir::ImplItemKind::OpaqueTy(bounds) => {\n                 self.word_space(\"type\");"}, {"sha": "0c95add490110babd0de86c8bd6d85714cf1ca0d", "filename": "src/test/pretty/gat-bounds.pp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da005822cef776e9757127ce0e609e9c3a737b39/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "raw_url": "https://github.com/rust-lang/rust/raw/da005822cef776e9757127ce0e609e9c3a737b39/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.pp?ref=da005822cef776e9757127ce0e609e9c3a737b39", "patch": "@@ -0,0 +1,25 @@\n+// Check that associated types print generic parameters and where clauses.\n+// See issue #67509.\n+\n+// pretty-compare-only\n+// pp-exact:gat-bounds.pp\n+\n+#![feature(generic_associated_types)]\n+\n+trait X {\n+    type\n+    Y<T>: Trait\n+    where\n+    Self: Sized;\n+}\n+\n+impl X for () {\n+    type\n+    Y<T>\n+    where\n+    Self: Sized\n+    =\n+    u32;\n+}\n+\n+fn main() { }"}, {"sha": "1275f432a3c500e156de02e79ef7ad4ae732e51c", "filename": "src/test/pretty/gat-bounds.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da005822cef776e9757127ce0e609e9c3a737b39/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da005822cef776e9757127ce0e609e9c3a737b39/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.rs?ref=da005822cef776e9757127ce0e609e9c3a737b39", "patch": "@@ -0,0 +1,17 @@\n+// Check that associated types print generic parameters and where clauses.\n+// See issue #67509.\n+\n+// pretty-compare-only\n+// pp-exact:gat-bounds.pp\n+\n+#![feature(generic_associated_types)]\n+\n+trait X {\n+    type Y<T>: Trait where Self: Sized;\n+}\n+\n+impl X for () {\n+    type Y<T> where Self: Sized = u32;\n+}\n+\n+fn main() { }"}]}