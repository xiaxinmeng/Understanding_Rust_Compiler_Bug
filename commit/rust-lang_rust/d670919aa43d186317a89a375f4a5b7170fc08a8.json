{"sha": "d670919aa43d186317a89a375f4a5b7170fc08a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzA5MTlhYTQzZDE4NjMxN2E4OWEzNzVmNGE1YjcxNzBmYzA4YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T15:12:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T15:12:11Z"}, "message": "auto merge of #18105 : nikomatsakis/rust/issue-18055, r=pcwalton\n\nCheck object lifetime bounds in coercions, not just trait bounds.  Fixes #18055.\r\n\r\nr? @pcwalton \r\n\r\nThis is a [breaking change]. Change code like this:\r\n\r\n    fn foo(v: &[u8]) -> Box<Clone+'static> { ... }\r\n\r\nto make the lifetimes agree:\r\n\r\n    // either...\r\n    fn foo(v: &'static[u8]) -> Box<Clone+'static> { box v }\r\n\r\n    // or ...\r\n    fn foo<'a>(v: &'a [u8]) -> Box<Clone+'a> { box v }", "tree": {"sha": "c4778d4047ff7d7822f56da5853009a1ca2fe604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4778d4047ff7d7822f56da5853009a1ca2fe604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d670919aa43d186317a89a375f4a5b7170fc08a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d670919aa43d186317a89a375f4a5b7170fc08a8", "html_url": "https://github.com/rust-lang/rust/commit/d670919aa43d186317a89a375f4a5b7170fc08a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d670919aa43d186317a89a375f4a5b7170fc08a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a79104a412989b802852f9ee6e589b06391d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a79104a412989b802852f9ee6e589b06391d61", "html_url": "https://github.com/rust-lang/rust/commit/41a79104a412989b802852f9ee6e589b06391d61"}, {"sha": "7876cf9ca915724d1888043a9cbfedd45009e5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7876cf9ca915724d1888043a9cbfedd45009e5f2", "html_url": "https://github.com/rust-lang/rust/commit/7876cf9ca915724d1888043a9cbfedd45009e5f2"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "8c37567bcd7583f48324425037bb9e4eb5e53a68", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d670919aa43d186317a89a375f4a5b7170fc08a8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d670919aa43d186317a89a375f4a5b7170fc08a8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d670919aa43d186317a89a375f4a5b7170fc08a8", "patch": "@@ -1681,10 +1681,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.register_unsize_obligations(span, &**u)\n             }\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n+                // If the type is `Foo+'a`, ensures that the type\n+                // being cast to `Foo+'a` implements `Foo`:\n                 vtable2::register_object_cast_obligations(self,\n                                                           span,\n                                                           ty_trait,\n                                                           self_ty);\n+\n+                // If the type is `Foo+'a`, ensures that the type\n+                // being cast to `Foo+'a` outlives `'a`:\n+                let origin = infer::RelateObjectBound(span);\n+                self.register_region_obligation(origin, self_ty, ty_trait.bounds.region_bound);\n             }\n         }\n     }"}, {"sha": "6791b7c5870e06b41c9ef80f0d6ede0494ad028c", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d670919aa43d186317a89a375f4a5b7170fc08a8/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d670919aa43d186317a89a375f4a5b7170fc08a8/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=d670919aa43d186317a89a375f4a5b7170fc08a8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that attempts to implicitly coerce a value into an\n+// object respect the lifetime bound on the object type.\n+\n+fn a(v: &[u8]) -> Box<Clone + 'static> {\n+    let x: Box<Clone + 'static> = box v; //~ ERROR does not outlive\n+    x\n+}\n+\n+fn b(v: &[u8]) -> Box<Clone + 'static> {\n+    box v //~ ERROR does not outlive\n+}\n+\n+fn c(v: &[u8]) -> Box<Clone> {\n+    box v // OK thanks to lifetime elision\n+}\n+\n+fn d<'a,'b>(v: &'a [u8]) -> Box<Clone+'b> {\n+    box v //~ ERROR does not outlive\n+}\n+\n+fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Clone+'b> {\n+    box v // OK, thanks to 'a:'b\n+}\n+\n+fn main() { }"}]}