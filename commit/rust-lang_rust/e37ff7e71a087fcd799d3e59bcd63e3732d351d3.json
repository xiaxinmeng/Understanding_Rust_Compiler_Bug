{"sha": "e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "node_id": "C_kwDOAAsO6NoAKGUzN2ZmN2U3MWEwODdmY2Q3OTlkM2U1OWJjZDYzZTM3MzJkMzUxZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T16:46:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T16:46:08Z"}, "message": "Auto merge of #106256 - matthiaskrgr:rollup-g1ovcqq, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #106208 (Make trait/impl `where` clause mismatch on region error a bit more actionable)\n - #106216 (Powershell: Use `WaitForExit` instead of `-Wait`)\n - #106217 (rustdoc: remove unnecessary `.tooltip::after { text-align: center }`)\n - #106218 (Migrate css var scraped examples)\n - #106221 (Rename `Rptr` to `Ref` in AST and HIR)\n - #106223 (On unsized locals with explicit types suggest `&`)\n - #106225 (Remove CraftSpider from review rotation)\n - #106229 (update Miri)\n - #106242 (Detect diff markers in the parser)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "07ea573e09bd231f4de878cfbf137f7164b31bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ea573e09bd231f4de878cfbf137f7164b31bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "html_url": "https://github.com/rust-lang/rust/commit/e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d76cc6f5064e393440019198328b4424302633", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d76cc6f5064e393440019198328b4424302633", "html_url": "https://github.com/rust-lang/rust/commit/29d76cc6f5064e393440019198328b4424302633"}, {"sha": "031a2143f0ef78e9b080b20481507ec0268e7bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/031a2143f0ef78e9b080b20481507ec0268e7bab", "html_url": "https://github.com/rust-lang/rust/commit/031a2143f0ef78e9b080b20481507ec0268e7bab"}], "stats": {"total": 1586, "additions": 1174, "deletions": 412}, "files": [{"sha": "9581099c210ea2ece000212a3783dcab78c45cdc", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -3295,9 +3295,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-build-sysroot\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"20c4b4625eeb148cccf82d5e9b90ad7fab3b11a0204cf75cc7fa04981a0fdffd\"\n+checksum = \"d65b1271cdac365b71b59570ea35d945dea2dd2cc47eba3d33b4bd1e0190ac6d\"\n dependencies = [\n  \"anyhow\",\n  \"rustc_version\","}, {"sha": "9cc81f391672e8b8dc561068f536c427b04e6a1a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -572,7 +572,7 @@ impl Pat {\n             PatKind::MacCall(mac) => TyKind::MacCall(mac.clone()),\n             // `&mut? P` can be reinterpreted as `&mut? T` where `T` is `P` reparsed as a type.\n             PatKind::Ref(pat, mutbl) => {\n-                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?\n+                pat.to_ty().map(|ty| TyKind::Ref(None, MutTy { ty, mutbl: *mutbl }))?\n             }\n             // A slice/array pattern `[P]` can be reparsed as `[T]`, an unsized array,\n             // when `P` can be reparsed as a type `T`.\n@@ -1193,7 +1193,7 @@ impl Expr {\n             ExprKind::Paren(expr) => expr.to_ty().map(TyKind::Paren)?,\n \n             ExprKind::AddrOf(BorrowKind::Ref, mutbl, expr) => {\n-                expr.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?\n+                expr.to_ty().map(|ty| TyKind::Ref(None, MutTy { ty, mutbl: *mutbl }))?\n             }\n \n             ExprKind::Repeat(expr, expr_len) => {\n@@ -2031,7 +2031,7 @@ impl Clone for Ty {\n impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n             final_ty = ty;\n         }\n         final_ty\n@@ -2058,7 +2058,7 @@ pub enum TyKind {\n     /// A raw pointer (`*const T` or `*mut T`).\n     Ptr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`).\n-    Rptr(Option<Lifetime>, MutTy),\n+    Ref(Option<Lifetime>, MutTy),\n     /// A bare function (e.g., `fn(usize) -> bool`).\n     BareFn(P<BareFnTy>),\n     /// The never type (`!`).\n@@ -2286,7 +2286,7 @@ impl Param {\n             if ident.name == kw::SelfLower {\n                 return match self.ty.kind {\n                     TyKind::ImplicitSelf => Some(respan(self.pat.span, SelfKind::Value(mutbl))),\n-                    TyKind::Rptr(lt, MutTy { ref ty, mutbl }) if ty.kind.is_implicit_self() => {\n+                    TyKind::Ref(lt, MutTy { ref ty, mutbl }) if ty.kind.is_implicit_self() => {\n                         Some(respan(self.pat.span, SelfKind::Region(lt, mutbl)))\n                     }\n                     _ => Some(respan(\n@@ -2319,7 +2319,7 @@ impl Param {\n                 Mutability::Not,\n                 P(Ty {\n                     id: DUMMY_NODE_ID,\n-                    kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),\n+                    kind: TyKind::Ref(lt, MutTy { ty: infer_ty, mutbl }),\n                     span,\n                     tokens: None,\n                 }),"}, {"sha": "c572171e8f44393c65f7eba5ce499cd2e8286672", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -459,7 +459,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err | TyKind::Never | TyKind::CVarArgs => {}\n         TyKind::Slice(ty) => vis.visit_ty(ty),\n         TyKind::Ptr(mt) => vis.visit_mt(mt),\n-        TyKind::Rptr(lt, mt) => {\n+        TyKind::Ref(lt, mt) => {\n             visit_opt(lt, |lt| noop_visit_lifetime(lt, vis));\n             vis.visit_mt(mt);\n         }"}, {"sha": "df7145a722a46e52c9de6072d6467d7a525f0b09", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -92,7 +92,7 @@ impl<'a> FnKind<'a> {\n #[derive(Copy, Clone, Debug)]\n pub enum LifetimeCtxt {\n     /// Appears in a reference type.\n-    Rptr,\n+    Ref,\n     /// Appears as a bound on a type or another lifetime.\n     Bound,\n     /// Appears as a generic argument.\n@@ -396,8 +396,8 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n     match &typ.kind {\n         TyKind::Slice(ty) | TyKind::Paren(ty) => visitor.visit_ty(ty),\n         TyKind::Ptr(mutable_type) => visitor.visit_ty(&mutable_type.ty),\n-        TyKind::Rptr(opt_lifetime, mutable_type) => {\n-            walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Rptr);\n+        TyKind::Ref(opt_lifetime, mutable_type) => {\n+            walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Ref);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n         TyKind::Tup(tuple_element_types) => {"}, {"sha": "c9d7477b5283670d3bd91caf8970383266b85e3b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1238,7 +1238,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::Err => hir::TyKind::Err,\n             TyKind::Slice(ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n-            TyKind::Rptr(region, mt) => {\n+            TyKind::Ref(region, mt) => {\n                 let region = region.unwrap_or_else(|| {\n                     let id = if let Some(LifetimeRes::ElidedAnchor { start, end }) =\n                         self.resolver.get_lifetime_res(t.id)\n@@ -1252,7 +1252,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n                 let lifetime = self.lower_lifetime(&region);\n-                hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n+                hir::TyKind::Ref(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(f) => {\n                 let generic_params = self.lower_lifetime_binder(t.id, &f.generic_params);\n@@ -1771,7 +1771,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Given we are only considering `ImplicitSelf` types, we needn't consider\n                     // the case where we have a mutable pattern to a reference as that would\n                     // no longer be an `ImplicitSelf`.\n-                    TyKind::Rptr(_, mt) if mt.ty.kind.is_implicit_self() => match mt.mutbl {\n+                    TyKind::Ref(_, mt) if mt.ty.kind.is_implicit_self() => match mt.mutbl {\n                         hir::Mutability::Not => hir::ImplicitSelfKind::ImmRef,\n                         hir::Mutability::Mut => hir::ImplicitSelfKind::MutRef,\n                     },"}, {"sha": "3989fc486193e6d25922c6100b0ba91917f17e6d", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -83,7 +83,7 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n                 visit::walk_ty(self, t);\n                 self.current_binders.pop();\n             }\n-            TyKind::Rptr(None, _) => {\n+            TyKind::Ref(None, _) => {\n                 self.record_elided_anchor(t.id, t.span);\n                 visit::walk_ty(self, t);\n             }"}, {"sha": "104cdd3a8e119476c4a6f527e9f5dcd21eb9fe20", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1025,7 +1025,7 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n                 self.print_mt(mt, true);\n             }\n-            ast::TyKind::Rptr(lifetime, mt) => {\n+            ast::TyKind::Ref(lifetime, mt) => {\n                 self.word(\"&\");\n                 self.print_opt_lifetime(lifetime);\n                 self.print_mt(mt, false);"}, {"sha": "3c3cb8c6b9c2ac4fa1eaeebdff4fc9f64dce5805", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2681,7 +2681,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             // Need to use the `rustc_middle::ty` types to compare against the\n                             // `return_region`. Then use the `rustc_hir` type to get only\n                             // the lifetime span.\n-                            if let hir::TyKind::Rptr(lifetime, _) = &fn_decl.inputs[index].kind {\n+                            if let hir::TyKind::Ref(lifetime, _) = &fn_decl.inputs[index].kind {\n                                 // With access to the lifetime, we can get\n                                 // the span of it.\n                                 arguments.push((*argument, lifetime.ident.span));\n@@ -2702,7 +2702,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let return_ty = sig.output().skip_binder();\n                 let mut return_span = fn_decl.output.span();\n                 if let hir::FnRetTy::Return(ty) = &fn_decl.output {\n-                    if let hir::TyKind::Rptr(lifetime, _) = ty.kind {\n+                    if let hir::TyKind::Ref(lifetime, _) = ty.kind {\n                         return_span = lifetime.ident.span;\n                     }\n                 }"}, {"sha": "f13fb842bb601f75f447a2e8afbd4be2cb2aebff", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1209,7 +1209,7 @@ fn get_mut_span_in_struct_field<'tcx>(\n         // Now we're dealing with the actual struct that we're going to suggest a change to,\n         // we can expect a field that is an immutable reference to a type.\n         && let hir::Node::Field(field) = node\n-        && let hir::TyKind::Rptr(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n+        && let hir::TyKind::Ref(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n     {\n         return Some(lt.ident.span.between(ty.span));\n     }"}, {"sha": "dbd4cac7b1432f2e3785838144f09e49a41a4c2b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -493,10 +493,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 //\n                 //     &\n                 //     - let's call the lifetime of this reference `'1`\n-                (\n-                    ty::Ref(region, referent_ty, _),\n-                    hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n-                ) => {\n+                (ty::Ref(region, referent_ty, _), hir::TyKind::Ref(_lifetime, referent_hir_ty)) => {\n                     if region.to_region_vid() == needle_fr {\n                         // Just grab the first character, the `&`.\n                         let source_map = self.infcx.tcx.sess.source_map();"}, {"sha": "5b1b7e6804c86d7235d0597e074901dba8fa0b37", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -117,8 +117,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         // `let names: &'static _ = &[\"field1\", \"field2\"];`\n         let names_let = if is_struct {\n             let lt_static = Some(cx.lifetime_static(span));\n-            let ty_static_ref =\n-                cx.ty_rptr(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n+            let ty_static_ref = cx.ty_ref(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n             Some(cx.stmt_let_ty(\n                 span,\n                 false,\n@@ -138,13 +137,13 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         );\n         let ty_slice = cx.ty(\n             span,\n-            ast::TyKind::Slice(cx.ty_rptr(span, ty_dyn_debug, None, ast::Mutability::Not)),\n+            ast::TyKind::Slice(cx.ty_ref(span, ty_dyn_debug, None, ast::Mutability::Not)),\n         );\n         let values_let = cx.stmt_let_ty(\n             span,\n             false,\n             Ident::new(sym::values, span),\n-            Some(cx.ty_rptr(span, ty_slice, None, ast::Mutability::Not)),\n+            Some(cx.ty_ref(span, ty_slice, None, ast::Mutability::Not)),\n             cx.expr_array_ref(span, value_exprs),\n         );\n "}, {"sha": "c6f5f5d080706be7d41c7c52d8840edf6b545b42", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -97,7 +97,7 @@ impl Ty {\n         match self {\n             Ref(ty, mutbl) => {\n                 let raw_ty = ty.to_ty(cx, span, self_ty, self_generics);\n-                cx.ty_rptr(span, raw_ty, None, *mutbl)\n+                cx.ty_ref(span, raw_ty, None, *mutbl)\n             }\n             Path(p) => p.to_ty(cx, span, self_ty, self_generics),\n             Self_ => cx.ty_path(self.to_path(cx, span, self_ty, self_generics)),"}, {"sha": "84d06b69a9d976c3d7c260dfe723693139dfe80b", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -30,7 +30,7 @@ pub fn expand_option_env<'cx>(\n                 sp,\n                 true,\n                 cx.std_path(&[sym::option, sym::Option, sym::None]),\n-                vec![GenericArg::Type(cx.ty_rptr(\n+                vec![GenericArg::Type(cx.ty_ref(\n                     sp,\n                     cx.ty_ident(sp, Ident::new(sym::str, sp)),\n                     Some(lt),"}, {"sha": "21c8caa658f24422567d56bf8474f5b9c6104d22", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -349,7 +349,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         .item_static(\n             span,\n             Ident::new(sym::_DECLS, span),\n-            cx.ty_rptr(\n+            cx.ty_ref(\n                 span,\n                 cx.ty(\n                     span,"}, {"sha": "93b3af4ab973df72f3577c846ab34511cec49adf", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -87,14 +87,14 @@ impl<'a> ExtCtxt<'a> {\n         self.anon_const(span, ast::ExprKind::Path(None, self.path_ident(span, ident)))\n     }\n \n-    pub fn ty_rptr(\n+    pub fn ty_ref(\n         &self,\n         span: Span,\n         ty: P<ast::Ty>,\n         lifetime: Option<ast::Lifetime>,\n         mutbl: ast::Mutability,\n     ) -> P<ast::Ty> {\n-        self.ty(span, ast::TyKind::Rptr(lifetime, self.ty_mt(ty, mutbl)))\n+        self.ty(span, ast::TyKind::Ref(lifetime, self.ty_mt(ty, mutbl)))\n     }\n \n     pub fn ty_ptr(&self, span: Span, ty: P<ast::Ty>, mutbl: ast::Mutability) -> P<ast::Ty> {"}, {"sha": "e923ec26a488fda25f34d200c305d9cded23a676", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2431,7 +2431,7 @@ impl<'hir> Ty<'hir> {\n \n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n             final_ty = ty;\n         }\n         final_ty\n@@ -2588,7 +2588,7 @@ pub enum TyKind<'hir> {\n     /// A raw pointer (i.e., `*const T` or `*mut T`).\n     Ptr(MutTy<'hir>),\n     /// A reference (i.e., `&'a T` or `&'a mut T`).\n-    Rptr(&'hir Lifetime, MutTy<'hir>),\n+    Ref(&'hir Lifetime, MutTy<'hir>),\n     /// A bare function (e.g., `fn(usize) -> bool`).\n     BareFn(&'hir BareFnTy<'hir>),\n     /// The never type (`!`)."}, {"sha": "6c475b659eba0a87aaf65d8959dae479bbcac42c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -809,7 +809,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n     match typ.kind {\n         TyKind::Slice(ref ty) => visitor.visit_ty(ty),\n         TyKind::Ptr(ref mutable_type) => visitor.visit_ty(mutable_type.ty),\n-        TyKind::Rptr(ref lifetime, ref mutable_type) => {\n+        TyKind::Ref(ref lifetime, ref mutable_type) => {\n             visitor.visit_lifetime(lifetime);\n             visitor.visit_ty(mutable_type.ty)\n         }"}, {"sha": "d7ab942665b33aa032a7137efb4392f55d763f98", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2657,7 +2657,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Ptr(ref mt) => {\n                 tcx.mk_ptr(ty::TypeAndMut { ty: self.ast_ty_to_ty(mt.ty), mutbl: mt.mutbl })\n             }\n-            hir::TyKind::Rptr(ref region, ref mt) => {\n+            hir::TyKind::Ref(ref region, ref mt) => {\n                 let r = self.ast_region_to_region(region, None);\n                 debug!(?r);\n                 let t = self.ast_ty_to_ty_inner(mt.ty, true, false);"}, {"sha": "0d1aa39c5d956bdb5d423780f5883f8a846326d3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -291,7 +291,7 @@ fn check_trait_item(tcx: TyCtxt<'_>, trait_item: &hir::TraitItem<'_>) {\n         // Do some rudimentary sanity checking to avoid an ICE later (issue #83471).\n         if let Some(hir::FnSig { decl, span, .. }) = method_sig {\n             if let [self_ty, _] = decl.inputs {\n-                if !matches!(self_ty.kind, hir::TyKind::Rptr(_, _)) {\n+                if !matches!(self_ty.kind, hir::TyKind::Ref(_, _)) {\n                     tcx.sess\n                         .struct_span_err(\n                             self_ty.span,"}, {"sha": "1ff7429e415f89f8bac36cabf1064f2e20f61466", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1063,7 +1063,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n             is_suggestable_infer_ty(ty) || matches!(length, hir::ArrayLen::Infer(_, _))\n         }\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n-        Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n+        Ptr(mut_ty) | Ref(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n         OpaqueDef(_, generic_args, _) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n             is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.args().args)"}, {"sha": "fb519d6731df929f7a875c92e2a212ceb7ea3c0d", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -617,7 +617,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     LifetimeName::Error => {}\n                 }\n             }\n-            hir::TyKind::Rptr(ref lifetime_ref, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime_ref, ref mt) => {\n                 self.visit_lifetime(lifetime_ref);\n                 let scope = Scope::ObjectLifetimeDefault {\n                     lifetime: self.map.defs.get(&lifetime_ref.hir_id).cloned(),"}, {"sha": "24a67cc14c4fed5e4af9fda9e817aa67a42af97e", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -307,7 +307,7 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n                 self.print_mt(mt, true);\n             }\n-            hir::TyKind::Rptr(ref lifetime, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime, ref mt) => {\n                 self.word(\"&\");\n                 self.print_opt_lifetime(lifetime);\n                 self.print_mt(mt, false);"}, {"sha": "28e959b7c6a193e03340c766aa530daad2e762d8", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1921,7 +1921,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected = self.shallow_resolve(expected);\n-        let (rptr_ty, inner_ty) = if self.check_dereferenceable(pat.span, expected, inner) {\n+        let (ref_ty, inner_ty) = if self.check_dereferenceable(pat.span, expected, inner) {\n             // `demand::subtype` would be good enough, but using `eqtype` turns\n             // out to be equally general. See (note_1) for details.\n \n@@ -1936,25 +1936,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         kind: TypeVariableOriginKind::TypeInference,\n                         span: inner.span,\n                     });\n-                    let rptr_ty = self.new_ref_ty(pat.span, mutbl, inner_ty);\n-                    debug!(\"check_pat_ref: demanding {:?} = {:?}\", expected, rptr_ty);\n-                    let err = self.demand_eqtype_pat_diag(pat.span, expected, rptr_ty, ti);\n+                    let ref_ty = self.new_ref_ty(pat.span, mutbl, inner_ty);\n+                    debug!(\"check_pat_ref: demanding {:?} = {:?}\", expected, ref_ty);\n+                    let err = self.demand_eqtype_pat_diag(pat.span, expected, ref_ty, ti);\n \n                     // Look for a case like `fn foo(&foo: u32)` and suggest\n                     // `fn foo(foo: &u32)`\n                     if let Some(mut err) = err {\n                         self.borrow_pat_suggestion(&mut err, pat);\n                         err.emit();\n                     }\n-                    (rptr_ty, inner_ty)\n+                    (ref_ty, inner_ty)\n                 }\n             }\n         } else {\n             let err = tcx.ty_error();\n             (err, err)\n         };\n         self.check_pat(inner, inner_ty, def_bm, ti);\n-        rptr_ty\n+        ref_ty\n     }\n \n     /// Create a reference type with a fresh region variable."}, {"sha": "4430acf34db9ac1549eaeea8bd916ca4d5aede45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -369,8 +369,8 @@ impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n     {\n         let mut mk_suggestion = || {\n             let (\n-                hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n-                hir::Ty { kind: hir::TyKind::Rptr(lifetime_sup, _), .. },\n+                hir::Ty { kind: hir::TyKind::Ref(lifetime_sub, _), .. },\n+                hir::Ty { kind: hir::TyKind::Ref(lifetime_sup, _), .. },\n             ) = (self.ty_sub, self.ty_sup) else {\n                 return false;\n             };"}, {"sha": "39f4d5022598d05acfd70ba263fb04c2c239826c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -96,8 +96,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                 }\n             }\n \n-            hir::TyKind::Rptr(ref lifetime, _) => {\n-                // the lifetime of the TyRptr\n+            hir::TyKind::Ref(ref lifetime, _) => {\n+                // the lifetime of the Ref\n                 let hir_id = lifetime.hir_id;\n                 match (self.tcx.named_region(hir_id), self.bound_region) {\n                     // Find the index of the named region that was part of the"}, {"sha": "dc1dc8989221cf969c79ecbd0b904ee1d99aba6b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n         match arg.kind {\n-            hir::TyKind::Rptr(_, ref mut_ty) => {\n+            hir::TyKind::Ref(_, ref mut_ty) => {\n                 // We don't want to suggest looking into borrowing `&T` or `&Self`.\n                 hir::intravisit::walk_ty(self, mut_ty.ty);\n                 return;"}, {"sha": "d91ef882bc4b8e93da9d28dc49bc3fce328ca8f1", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 84, "deletions": 39, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2,11 +2,14 @@ use crate::errors::RegionOriginNote;\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n use rustc_errors::{\n-    fluent, struct_span_err, AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    fluent, struct_span_err, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder,\n+    ErrorGuaranteed,\n };\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::{self, Region};\n+use rustc_middle::ty::{self, IsSuggestable, Region};\n+use rustc_span::symbol::kw;\n \n use super::ObligationCauseAsDiagArg;\n \n@@ -313,55 +316,38 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => self\n-                .report_extra_impl_obligation(\n+            infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => {\n+                let mut err = self.report_extra_impl_obligation(\n                     span,\n                     impl_item_def_id,\n                     trait_item_def_id,\n                     &format!(\"`{}: {}`\", sup, sub),\n-                ),\n+                );\n+                // We should only suggest rewriting the `where` clause if the predicate is within that `where` clause\n+                if let Some(generics) = self.tcx.hir().get_generics(impl_item_def_id)\n+                    && generics.where_clause_span.contains(span)\n+                {\n+                    self.suggest_copy_trait_method_bounds(\n+                        trait_item_def_id,\n+                        impl_item_def_id,\n+                        &mut err,\n+                    );\n+                }\n+                err\n+            }\n             infer::CheckAssociatedTypeBounds { impl_item_def_id, trait_item_def_id, parent } => {\n                 let mut err = self.report_concrete_failure(*parent, sub, sup);\n-\n                 let trait_item_span = self.tcx.def_span(trait_item_def_id);\n                 let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n                 err.span_label(\n                     trait_item_span,\n                     format!(\"definition of `{}` from trait\", item_name),\n                 );\n-\n-                let trait_predicates = self.tcx.explicit_predicates_of(trait_item_def_id);\n-                let impl_predicates = self.tcx.explicit_predicates_of(impl_item_def_id);\n-\n-                let impl_predicates: rustc_data_structures::fx::FxHashSet<_> =\n-                    impl_predicates.predicates.into_iter().map(|(pred, _)| pred).collect();\n-                let clauses: Vec<_> = trait_predicates\n-                    .predicates\n-                    .into_iter()\n-                    .filter(|&(pred, _)| !impl_predicates.contains(pred))\n-                    .map(|(pred, _)| format!(\"{}\", pred))\n-                    .collect();\n-\n-                if !clauses.is_empty() {\n-                    let generics = self.tcx.hir().get_generics(impl_item_def_id).unwrap();\n-                    let where_clause_span = generics.tail_span_for_predicate_suggestion();\n-\n-                    let suggestion = format!(\n-                        \"{} {}\",\n-                        generics.add_where_or_trailing_comma(),\n-                        clauses.join(\", \"),\n-                    );\n-                    err.span_suggestion(\n-                        where_clause_span,\n-                        &format!(\n-                            \"try copying {} from the trait\",\n-                            if clauses.len() > 1 { \"these clauses\" } else { \"this clause\" }\n-                        ),\n-                        suggestion,\n-                        rustc_errors::Applicability::MaybeIncorrect,\n-                    );\n-                }\n-\n+                self.suggest_copy_trait_method_bounds(\n+                    trait_item_def_id,\n+                    impl_item_def_id,\n+                    &mut err,\n+                );\n                 err\n             }\n             infer::AscribeUserTypeProvePredicate(span) => {\n@@ -388,6 +374,65 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_copy_trait_method_bounds(\n+        &self,\n+        trait_item_def_id: DefId,\n+        impl_item_def_id: LocalDefId,\n+        err: &mut Diagnostic,\n+    ) {\n+        // FIXME(compiler-errors): Right now this is only being used for region\n+        // predicate mismatches. Ideally, we'd use it for *all* predicate mismatches,\n+        // but right now it's not really very smart when it comes to implicit `Sized`\n+        // predicates and bounds on the trait itself.\n+\n+        let Some(impl_def_id) =\n+            self.tcx.associated_item(impl_item_def_id).impl_container(self.tcx) else { return; };\n+        let Some(trait_ref) = self\n+            .tcx\n+            .impl_trait_ref(impl_def_id)\n+            else { return; };\n+        let trait_substs = trait_ref\n+            // Replace the explicit self type with `Self` for better suggestion rendering\n+            .with_self_ty(self.tcx, self.tcx.mk_ty_param(0, kw::SelfUpper))\n+            .substs;\n+        let trait_item_substs =\n+            ty::InternalSubsts::identity_for_item(self.tcx, impl_item_def_id.to_def_id())\n+                .rebase_onto(self.tcx, impl_def_id, trait_substs);\n+\n+        let Ok(trait_predicates) = self\n+            .tcx\n+            .bound_explicit_predicates_of(trait_item_def_id)\n+            .map_bound(|p| p.predicates)\n+            .subst_iter_copied(self.tcx, trait_item_substs)\n+            .map(|(pred, _)| {\n+                if pred.is_suggestable(self.tcx, false) {\n+                    Ok(pred.to_string())\n+                } else {\n+                    Err(())\n+                }\n+            })\n+            .collect::<Result<Vec<_>, ()>>() else { return; };\n+\n+        let Some(generics) = self.tcx.hir().get_generics(impl_item_def_id) else { return; };\n+\n+        if trait_predicates.is_empty() {\n+            err.span_suggestion_verbose(\n+                generics.where_clause_span,\n+                \"remove the `where` clause\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            let space = if generics.where_clause_span.is_empty() { \" \" } else { \"\" };\n+            err.span_suggestion_verbose(\n+                generics.where_clause_span,\n+                \"copy the `where` clause predicates from the trait\",\n+                format!(\"{space}where {}\", trait_predicates.join(\", \")),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     pub(super) fn report_placeholder_failure(\n         &self,\n         placeholder_origin: SubregionOrigin<'tcx>,"}, {"sha": "22caadfab177d40b087c2ecee4433eaa078809a8", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -22,7 +22,7 @@ declare_lint_pass!(PassByValue => [PASS_BY_VALUE]);\n impl<'tcx> LateLintPass<'tcx> for PassByValue {\n     fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n         match &ty.kind {\n-            TyKind::Rptr(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n+            TyKind::Ref(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n                 if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;"}, {"sha": "b3231f55bc6e64375960c8e09b56b2ebccb19587", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -31,7 +31,8 @@ use rustc_ast::{\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n-    fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n+    fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, FatalError, Handler, MultiSpan,\n+    PResult,\n };\n use rustc_errors::{pluralize, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n@@ -1229,7 +1230,7 @@ impl<'a> Parser<'a> {\n         let sum_span = ty.span.to(self.prev_token.span);\n \n         let sub = match &ty.kind {\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 let sum_with_parens = pprust::to_string(|s| {\n                     s.s.word(\"&\");\n                     s.print_opt_lifetime(lifetime);\n@@ -2556,6 +2557,75 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    pub fn is_diff_marker(&mut self, long_kind: &TokenKind, short_kind: &TokenKind) -> bool {\n+        (0..3).all(|i| self.look_ahead(i, |tok| tok == long_kind))\n+            && self.look_ahead(3, |tok| tok == short_kind)\n+    }\n+\n+    fn diff_marker(&mut self, long_kind: &TokenKind, short_kind: &TokenKind) -> Option<Span> {\n+        if self.is_diff_marker(long_kind, short_kind) {\n+            let lo = self.token.span;\n+            for _ in 0..4 {\n+                self.bump();\n+            }\n+            return Some(lo.to(self.prev_token.span));\n+        }\n+        None\n+    }\n+\n+    pub fn recover_diff_marker(&mut self) {\n+        let Some(start) = self.diff_marker(&TokenKind::BinOp(token::Shl), &TokenKind::Lt) else {\n+            return;\n+        };\n+        let mut spans = Vec::with_capacity(3);\n+        spans.push(start);\n+        let mut middlediff3 = None;\n+        let mut middle = None;\n+        let mut end = None;\n+        loop {\n+            if self.token.kind == TokenKind::Eof {\n+                break;\n+            }\n+            if let Some(span) = self.diff_marker(&TokenKind::OrOr, &TokenKind::BinOp(token::Or)) {\n+                middlediff3 = Some(span);\n+            }\n+            if let Some(span) = self.diff_marker(&TokenKind::EqEq, &TokenKind::Eq) {\n+                middle = Some(span);\n+            }\n+            if let Some(span) = self.diff_marker(&TokenKind::BinOp(token::Shr), &TokenKind::Gt) {\n+                spans.push(span);\n+                end = Some(span);\n+                break;\n+            }\n+            self.bump();\n+        }\n+        let mut err = self.struct_span_err(spans, \"encountered diff marker\");\n+        err.span_label(start, \"after this is the code before the merge\");\n+        if let Some(middle) = middlediff3 {\n+            err.span_label(middle, \"\");\n+        }\n+        if let Some(middle) = middle {\n+            err.span_label(middle, \"\");\n+        }\n+        if let Some(end) = end {\n+            err.span_label(end, \"above this are the incoming code changes\");\n+        }\n+        err.help(\n+            \"if you're having merge conflicts after pulling new code, the top section is the code \\\n+             you already had and the bottom section is the remote code\",\n+        );\n+        err.help(\n+            \"if you're in the middle of a rebase, the top section is the code being rebased onto \\\n+             and the bottom section is the code coming from the current commit being rebased\",\n+        );\n+        err.note(\n+            \"for an explanation on these markers from the `git` documentation, visit \\\n+             <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\",\n+        );\n+        err.emit();\n+        FatalError.raise()\n+    }\n+\n     /// Parse and throw away a parenthesized comma separated\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {"}, {"sha": "1fc1ffd6cb6ed39e70463a7743fc48d8c9fabecd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -3039,6 +3039,7 @@ impl<'a> Parser<'a> {\n     /// Parses `ident (COLON expr)?`.\n     fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {\n         let attrs = self.parse_outer_attributes()?;\n+        self.recover_diff_marker();\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n "}, {"sha": "c6b6c04de85042afabc17e2463f60e4a8a205128", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -98,7 +98,9 @@ impl<'a> Parser<'a> {\n         fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Item>> {\n+        self.recover_diff_marker();\n         let attrs = self.parse_outer_attributes()?;\n+        self.recover_diff_marker();\n         self.parse_item_common(attrs, true, false, fn_parse_mode, force_collect)\n     }\n \n@@ -704,6 +706,7 @@ impl<'a> Parser<'a> {\n             if self.recover_doc_comment_before_brace() {\n                 continue;\n             }\n+            self.recover_diff_marker();\n             match parse_item(self) {\n                 Ok(None) => {\n                     let mut is_unnecessary_semicolon = !items.is_empty()\n@@ -1039,8 +1042,11 @@ impl<'a> Parser<'a> {\n     /// USE_TREE_LIST = \u00d8 | (USE_TREE `,`)* USE_TREE [`,`]\n     /// ```\n     fn parse_use_tree_list(&mut self) -> PResult<'a, Vec<(UseTree, ast::NodeId)>> {\n-        self.parse_delim_comma_seq(Delimiter::Brace, |p| Ok((p.parse_use_tree()?, DUMMY_NODE_ID)))\n-            .map(|(r, _)| r)\n+        self.parse_delim_comma_seq(Delimiter::Brace, |p| {\n+            p.recover_diff_marker();\n+            Ok((p.parse_use_tree()?, DUMMY_NODE_ID))\n+        })\n+        .map(|(r, _)| r)\n     }\n \n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n@@ -1379,7 +1385,9 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_enum_variant(&mut self) -> PResult<'a, Option<Variant>> {\n+        self.recover_diff_marker();\n         let variant_attrs = self.parse_outer_attributes()?;\n+        self.recover_diff_marker();\n         self.collect_tokens_trailing_token(\n             variant_attrs,\n             ForceCollect::No,\n@@ -1573,9 +1581,32 @@ impl<'a> Parser<'a> {\n         self.parse_paren_comma_seq(|p| {\n             let attrs = p.parse_outer_attributes()?;\n             p.collect_tokens_trailing_token(attrs, ForceCollect::No, |p, attrs| {\n+                let mut snapshot = None;\n+                if p.is_diff_marker(&TokenKind::BinOp(token::Shl), &TokenKind::Lt) {\n+                    // Account for `<<<<<<<` diff markers. We can't proactively error here because\n+                    // that can be a valid type start, so we snapshot and reparse only we've\n+                    // encountered another parse error.\n+                    snapshot = Some(p.create_snapshot_for_diagnostic());\n+                }\n                 let lo = p.token.span;\n-                let vis = p.parse_visibility(FollowedByType::Yes)?;\n-                let ty = p.parse_ty()?;\n+                let vis = match p.parse_visibility(FollowedByType::Yes) {\n+                    Ok(vis) => vis,\n+                    Err(err) => {\n+                        if let Some(ref mut snapshot) = snapshot {\n+                            snapshot.recover_diff_marker();\n+                        }\n+                        return Err(err);\n+                    }\n+                };\n+                let ty = match p.parse_ty() {\n+                    Ok(ty) => ty,\n+                    Err(err) => {\n+                        if let Some(ref mut snapshot) = snapshot {\n+                            snapshot.recover_diff_marker();\n+                        }\n+                        return Err(err);\n+                    }\n+                };\n \n                 Ok((\n                     FieldDef {\n@@ -1596,7 +1627,9 @@ impl<'a> Parser<'a> {\n \n     /// Parses an element of a struct declaration.\n     fn parse_field_def(&mut self, adt_ty: &str) -> PResult<'a, FieldDef> {\n+        self.recover_diff_marker();\n         let attrs = self.parse_outer_attributes()?;\n+        self.recover_diff_marker();\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n             let vis = this.parse_visibility(FollowedByType::No)?;\n@@ -2427,6 +2460,7 @@ impl<'a> Parser<'a> {\n         let mut first_param = true;\n         // Parse the arguments, starting out with `self` being allowed...\n         let (mut params, _) = self.parse_paren_comma_seq(|p| {\n+            p.recover_diff_marker();\n             let param = p.parse_param_general(req_name, first_param).or_else(|mut e| {\n                 e.emit();\n                 let lo = p.prev_token.span;"}, {"sha": "0daae457d30224caee7db8d154d93c01537c167e", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -531,13 +531,23 @@ impl<'a> Parser<'a> {\n         recover: AttemptLocalParseRecovery,\n     ) -> PResult<'a, P<Block>> {\n         let mut stmts = vec![];\n+        let mut snapshot = None;\n         while !self.eat(&token::CloseDelim(Delimiter::Brace)) {\n             if self.token == token::Eof {\n                 break;\n             }\n+            if self.is_diff_marker(&TokenKind::BinOp(token::Shl), &TokenKind::Lt) {\n+                // Account for `<<<<<<<` diff markers. We can't proactively error here because\n+                // that can be a valid path start, so we snapshot and reparse only we've\n+                // encountered another parse error.\n+                snapshot = Some(self.create_snapshot_for_diagnostic());\n+            }\n             let stmt = match self.parse_full_stmt(recover) {\n                 Err(mut err) if recover.yes() => {\n                     self.maybe_annotate_with_ascription(&mut err, false);\n+                    if let Some(ref mut snapshot) = snapshot {\n+                        snapshot.recover_diff_marker();\n+                    }\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(self.mk_stmt_err(self.token.span))"}, {"sha": "c50b2877bab3ebb2c6f25413ba9bb376351247af", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -504,7 +504,7 @@ impl<'a> Parser<'a> {\n             self.bump_with((dyn_tok, dyn_tok_sp));\n         }\n         let ty = self.parse_ty_no_plus()?;\n-        Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))\n+        Ok(TyKind::Ref(opt_lifetime, MutTy { ty, mutbl }))\n     }\n \n     // Parses the `typeof(EXPR)`."}, {"sha": "b86d2316820cec75ab3fa744079775fa22151d6c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -324,7 +324,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n                 Slice,\n                 Array,\n                 Ptr,\n-                Rptr,\n+                Ref,\n                 BareFn,\n                 Never,\n                 Tup,\n@@ -580,7 +580,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n                 Slice,\n                 Array,\n                 Ptr,\n-                Rptr,\n+                Ref,\n                 BareFn,\n                 Never,\n                 Tup,"}, {"sha": "c44635b85f8f0b82bc5e52a66c50f6d747f4388b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -651,7 +651,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let prev = self.diagnostic_metadata.current_trait_object;\n         let prev_ty = self.diagnostic_metadata.current_type_path;\n         match ty.kind {\n-            TyKind::Rptr(None, _) => {\n+            TyKind::Ref(None, _) => {\n                 // Elided lifetime in reference: we resolve as if there was some lifetime `'_` with\n                 // NodeId `ty.id`.\n                 // This span will be used in case of elision failure.\n@@ -2004,7 +2004,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         impl<'a> Visitor<'a> for SelfVisitor<'_, '_> {\n             fn visit_ty(&mut self, ty: &'a Ty) {\n                 trace!(\"SelfVisitor considering ty={:?}\", ty);\n-                if let TyKind::Rptr(lt, ref mt) = ty.kind && self.is_self_ty(&mt.ty) {\n+                if let TyKind::Ref(lt, ref mt) = ty.kind && self.is_self_ty(&mt.ty) {\n                     let lt_id = if let Some(lt) = lt {\n                         lt.id\n                     } else {"}, {"sha": "74522f185422d45eb948d01335284ff0e457427b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1554,7 +1554,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         fn extract_node_id(t: &Ty) -> Option<NodeId> {\n             match t.kind {\n                 TyKind::Path(None, _) => Some(t.id),\n-                TyKind::Rptr(_, ref mut_ty) => extract_node_id(&mut_ty.ty),\n+                TyKind::Ref(_, ref mut_ty) => extract_node_id(&mut_ty.ty),\n                 // This doesn't handle the remaining `Ty` variants as they are not\n                 // that commonly the self_type, it might be interesting to provide\n                 // support for those in future.\n@@ -2189,7 +2189,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 Some(LifetimeUseSet::One { use_span, use_ctxt }) => {\n                     debug!(?param.ident, ?param.ident.span, ?use_span);\n \n-                    let elidable = matches!(use_ctxt, LifetimeCtxt::Rptr);\n+                    let elidable = matches!(use_ctxt, LifetimeCtxt::Ref);\n \n                     let deletion_span = deletion_span();\n                     self.r.lint_buffer.buffer_lint_with_diagnostic("}, {"sha": "5a1bcb8fdc87be9a82047dbed9040ee4e3c17afd", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -165,7 +165,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"{}{}\", prefix, nested.text);\n                 Ok(replace_text(nested, text))\n             }\n-            hir::TyKind::Rptr(ref lifetime, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime, ref mt) => {\n                 let mut prefix = \"&\".to_owned();\n                 prefix.push_str(&lifetime.ident.to_string());\n                 prefix.push(' ');"}, {"sha": "8a08c7533aa1e16eaf4d8cdfb2f439b27a146c5d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2771,7 +2771,7 @@ impl<'v> Visitor<'v> for FindTypeParam {\n         // and suggest `T: ?Sized` regardless of their obligations. This is fine because the errors\n         // in that case should make what happened clear enough.\n         match ty.kind {\n-            hir::TyKind::Ptr(_) | hir::TyKind::Rptr(..) | hir::TyKind::TraitObject(..) => {}\n+            hir::TyKind::Ptr(_) | hir::TyKind::Ref(..) | hir::TyKind::TraitObject(..) => {}\n             hir::TyKind::Path(hir::QPath::Resolved(None, path))\n                 if path.segments.len() == 1 && path.segments[0].ident.name == self.param =>\n             {"}, {"sha": "26ba3d780d55928df5e287bccd12fbb669eb4a92", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2514,6 +2514,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::VariableType(hir_id) => {\n                 let parent_node = self.tcx.hir().get_parent_node(hir_id);\n                 match self.tcx.hir().find(parent_node) {\n+                    Some(Node::Local(hir::Local { ty: Some(ty), .. })) => {\n+                        err.span_suggestion_verbose(\n+                            ty.span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            \"&\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n                     Some(Node::Local(hir::Local {\n                         init: Some(hir::Expr { kind: hir::ExprKind::Index(_, _), span, .. }),\n                         .."}, {"sha": "8f4099653562e040b9d753563f9de583fad8fbc5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1612,7 +1612,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n     match ty.kind {\n         TyKind::Never => Primitive(PrimitiveType::Never),\n         TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(clean_ty(m.ty, cx))),\n-        TyKind::Rptr(ref l, ref m) => {\n+        TyKind::Ref(ref l, ref m) => {\n             let lifetime = if l.is_anonymous() { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }"}, {"sha": "e2d6379c2cbb4c7780efc8f9fffeeeec79d618cd", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1106,7 +1106,6 @@ pre.rust .doccomment {\n }\n \n .example-wrap .tooltip:hover::after {\n-\ttext-align: center;\n \tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n@@ -1956,6 +1955,13 @@ in storage.js\n \toverflow-x: hidden;\n }\n \n+.scraped-example .example-wrap .rust span.highlight {\n+\tbackground: var(--scrape-example-code-line-highlight);\n+}\n+.scraped-example .example-wrap .rust span.highlight.focus {\n+\tbackground: var(--scrape-example-code-line-highlight-focus);\n+}\n+\n .more-examples-toggle {\n \tmax-width: calc(100% + 25px);\n \tmargin-top: 10px;"}, {"sha": "3d0025054221c2129dc76af418c8540e31ffd6a9", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -91,6 +91,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--codeblock-link-background: #333;\n \t--scrape-example-toggle-line-background: #999;\n \t--scrape-example-toggle-line-hover-background: #c5c5c5;\n+\t--scrape-example-code-line-highlight: rgb(91, 59, 1);\n+\t--scrape-example-code-line-highlight-focus: rgb(124, 75, 15);\n }\n \n h1, h2, h3, h4 {\n@@ -206,12 +208,6 @@ above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n \tborder-color: white;\n \tcolor: white;\n }\n-.scraped-example .example-wrap .rust span.highlight {\n-\tbackground: rgb(91, 59, 1);\n-}\n-.scraped-example .example-wrap .rust span.highlight.focus {\n-\tbackground: rgb(124, 75, 15);\n-}\n .scraped-example:not(.expanded) .code-wrapper::before {\n \tbackground: linear-gradient(to bottom, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n }"}, {"sha": "b88eeedddf3cecf231281896b1edf474c2264cfb", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -86,6 +86,8 @@\n \t--codeblock-link-background: #333;\n \t--scrape-example-toggle-line-background: #999;\n \t--scrape-example-toggle-line-hover-background: #c5c5c5;\n+\t--scrape-example-code-line-highlight: rgb(91, 59, 1);\n+\t--scrape-example-code-line-highlight-focus: rgb(124, 75, 15);\n }\n \n #search-tabs > button:not(.selected) {\n@@ -106,12 +108,6 @@\n \tborder-color: white;\n \tcolor: white;\n }\n-.scraped-example .example-wrap .rust span.highlight {\n-\tbackground: rgb(91, 59, 1);\n-}\n-.scraped-example .example-wrap .rust span.highlight.focus {\n-\tbackground: rgb(124, 75, 15);\n-}\n .scraped-example:not(.expanded) .code-wrapper::before {\n \tbackground: linear-gradient(to bottom, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n }"}, {"sha": "fff59d4e9c98c07010783935f7202d586019dbb4", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -83,6 +83,8 @@\n \t--codeblock-link-background: #eee;\n \t--scrape-example-toggle-line-background: #ccc;\n \t--scrape-example-toggle-line-hover-background: #999;\n+\t--scrape-example-code-line-highlight: #fcffd6;\n+\t--scrape-example-code-line-highlight-focus: #f6fdb0;\n }\n \n #search-tabs > button:not(.selected) {\n@@ -103,12 +105,6 @@\n \tborder-color: black;\n \tcolor: black;\n }\n-.scraped-example .example-wrap .rust span.highlight {\n-\tbackground: #fcffd6;\n-}\n-.scraped-example .example-wrap .rust span.highlight.focus {\n-\tbackground: #f6fdb0;\n-}\n .scraped-example:not(.expanded) .code-wrapper::before {\n \tbackground: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n }"}, {"sha": "d4443f821d2a7770879bc0cc0bae6cf3ffd7012e", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -34,7 +34,6 @@ define-function: (\n             \".docblock .example-wrap.compile_fail .tooltip::after\",\n             {\n                 \"content\": '\"This example deliberately fails to compile\"',\n-                \"text-align\": \"center\",\n                 \"padding\": \"5px 3px 3px\",\n                 \"background-color\": |background|,\n                 \"color\": |color|,\n@@ -74,7 +73,6 @@ define-function: (\n             \".docblock .example-wrap.should_panic .tooltip::after\",\n             {\n                 \"content\": '\"This example panics\"',\n-                \"text-align\": \"center\",\n                 \"padding\": \"5px 3px 3px\",\n                 \"background-color\": |background|,\n                 \"color\": |color|,\n@@ -114,7 +112,6 @@ define-function: (\n             \".docblock .example-wrap.ignore .tooltip::after\",\n             {\n                 \"content\": '\"This example is not tested\"',\n-                \"text-align\": \"center\",\n                 \"padding\": \"5px 3px 3px\",\n                 \"background-color\": |background|,\n                 \"color\": |color|,"}, {"sha": "5175891e7ba69817c67a34e78984995f9057dc2a", "filename": "src/test/rustdoc-gui/scrape-examples-color.goml", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-color.goml?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,34 @@\n+// Check that scrape example code blocks have the expected colors.\n+goto: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test_many.html\"\n+\n+define-function: (\n+    \"check-colors\",\n+    (theme, highlight, highlight_focus),\n+    [\n+        (\"local-storage\", { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\", }),\n+        (\"reload\"),\n+        (\"wait-for\", \".more-examples-toggle\"),\n+        (\"assert-css\", (\".scraped-example .example-wrap .rust span.highlight:not(.focus)\", {\n+            \"background-color\": |highlight|,\n+        }, ALL)),\n+        (\"assert-css\", (\".scraped-example .example-wrap .rust span.highlight.focus\", {\n+            \"background-color\": |highlight_focus|,\n+        }, ALL)),\n+    ]\n+)\n+\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"highlight\": \"rgb(91, 59, 1)\",\n+    \"highlight_focus\": \"rgb(124, 75, 15)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"highlight\": \"rgb(91, 59, 1)\",\n+    \"highlight_focus\": \"rgb(124, 75, 15)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"highlight\": \"rgb(252, 255, 214)\",\n+    \"highlight_focus\": \"rgb(246, 253, 176)\",\n+})"}, {"sha": "af765c51ace391da7ea7608e5d85b46f9d9939af", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -59,7 +59,7 @@ pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n-// See `impl Clean for TyKind::Rptr`.\n+// See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}"}, {"sha": "eb19d57ab05acfaa65ccec8d8ea43299482a388a", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -6,6 +6,11 @@ LL |     fn renew<'b: 'a>(self) -> &'b mut [T];\n ...\n LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n    |                                                     ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     fn renew<'b: 'a>(self) -> &'b mut [T] where 'b: 'a {\n+   |                                           ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "1a471e18d9dc1f5291f11f7eddc5cf659728d6a2", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -6,6 +6,12 @@ LL |     fn foo();\n ...\n LL |     fn foo() where 'a: 'b { }\n    |                        ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: remove the `where` clause\n+   |\n+LL -     fn foo() where 'a: 'b { }\n+LL +     fn foo()  { }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "3456b345cc28c04c329be128cc5b6d40c6d5a5b4", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -15,6 +15,11 @@ LL |     type B<'a, 'b> where 'a: 'b;\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                                                ^^ impl has extra requirement `'b: 'a`\n+   |\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'a: 'b;\n+   |                                      ~~~~~~~~~~~~\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:18:33"}, {"sha": "b4b1bc7da7f455056c3809bb260ef41bb2e0e8f1", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -5,13 +5,17 @@ LL |     type Fut<'a> where Self: 'a;\n    |     ------------ definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:13:14\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |              ^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type Fut<'a> = impl Future<Output = ()> where Self: 'a;\n+   |                                             ++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d5db962094ce99f67ef6b80fa97d1e373f701c7c", "filename": "src/test/ui/generic-associated-types/issue-91883.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91883.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -5,7 +5,7 @@ LL |     type Cursor<'tx>: Cursor<'tx>\n    |     ----------------------------- definition of `Cursor` from trait\n ...\n LL |     type Cursor<'tx> = CursorImpl<'tx>;\n-   |                        ^^^^^^^^^^^^^^^- help: try copying these clauses from the trait: `where 'db: 'tx, Self: 'tx`\n+   |                        ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'db` as defined here\n   --> $DIR/issue-91883.rs:29:6\n@@ -17,6 +17,10 @@ note: but lifetime parameter must outlive the lifetime `'tx` as defined here\n    |\n LL |     type Cursor<'tx> = CursorImpl<'tx>;\n    |                 ^^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type Cursor<'tx> = CursorImpl<'tx> where 'db: 'tx, Self: 'tx;\n+   |                                        +++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ddc420a7b4e610eed042330682d4c2f6117e1bc0", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -5,13 +5,17 @@ LL |     type TextureIter<'a>: Iterator<Item = &'a Texture>\n    |     -------------------------------------------------- definition of `TextureIter` from trait\n ...\n LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-92033.rs:20:22\n    |\n LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n    |                      ^^\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture> where Self: 'a;\n+   |                                                               ++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "8caf5317693ee0da26ddc8c33b5bc8723c5b6236", "filename": "src/test/ui/generic-associated-types/mismatched-where-clause-regions.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,12 @@\n+trait Foo {\n+    type T<'a1, 'b1>\n+    where\n+        'a1: 'b1;\n+}\n+\n+impl Foo for () {\n+    type T<'a2, 'b2> = () where 'b2: 'a2;\n+    //~^ ERROR impl has stricter requirements than trait\n+}\n+\n+fn main() {}"}, {"sha": "91a0300764084b3dac3312c236c659b660f90445", "filename": "src/test/ui/generic-associated-types/mismatched-where-clause-regions.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmismatched-where-clause-regions.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,17 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/mismatched-where-clause-regions.rs:8:38\n+   |\n+LL |     type T<'a1, 'b1>\n+   |     ---------------- definition of `T` from trait\n+...\n+LL |     type T<'a2, 'b2> = () where 'b2: 'a2;\n+   |                                      ^^^ impl has extra requirement `'b2: 'a2`\n+   |\n+help: copy the `where` clause predicates from the trait\n+   |\n+LL |     type T<'a2, 'b2> = () where 'a2: 'b2;\n+   |                           ~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "8a71fc73a9d2d3fa82d6a68ad206d2e3d06c6f3b", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -6,6 +6,12 @@ LL |     type Assoc<'a, 'b>;\n ...\n LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n    |                                       ^^ impl has extra requirement `'a: 'b`\n+   |\n+help: remove the `where` clause\n+   |\n+LL -     type Assoc<'a, 'b> = () where 'a: 'b;\n+LL +     type Assoc<'a, 'b> = () ;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5cd217df6fc2ff91c814e5c6abb980571141b802", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -801,7 +801,7 @@ fn test_ty() {\n     assert_eq!(stringify_ty!(*const T), \"*const T\");\n     assert_eq!(stringify_ty!(*mut T), \"*mut T\");\n \n-    // TyKind::Rptr\n+    // TyKind::Ref\n     assert_eq!(stringify_ty!(&T), \"&T\");\n     assert_eq!(stringify_ty!(&mut T), \"&mut T\");\n     assert_eq!(stringify_ty!(&'a T), \"&'a T\");"}, {"sha": "76ea980fc628d562a351a626cf37a20686d2cdd0", "filename": "src/test/ui/parser/diff-markers/enum-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,11 @@\n+enum E {\n+    Foo {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+        x: u8,\n+|||||||\n+        z: (),\n+=======\n+        y: i8,\n+>>>>>>> branch\n+    }\n+}"}, {"sha": "63da5c2a6e1f3b8d57ac8f74c2bbcccbd2f3a89c", "filename": "src/test/ui/parser/diff-markers/enum-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum-2.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,21 @@\n+error: encountered diff marker\n+  --> $DIR/enum-2.rs:3:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |         x: u8,\n+LL | |||||||\n+   | -------\n+LL |         z: (),\n+LL | =======\n+   | -------\n+LL |         y: i8,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "45df6e3251d763d0dfb0ba5a24ca3cd2b0fbfc75", "filename": "src/test/ui/parser/diff-markers/enum.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,7 @@\n+enum E {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    Foo(u8),\n+=======\n+    Bar(i8),\n+>>>>>>> branch\n+}"}, {"sha": "abbf3fb41e790a871427069b56e1b22189f50aec", "filename": "src/test/ui/parser/diff-markers/enum.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fenum.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/enum.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     Foo(u8),\n+LL | =======\n+   | -------\n+LL |     Bar(i8),\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "86c355628ab67fcff3aa90c2c61f1547bb7df162", "filename": "src/test/ui/parser/diff-markers/fn-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,16 @@\n+trait T {\n+    fn foo(\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+        x: u8,\n+=======\n+        x: i8,\n+>>>>>>> branch\n+    ) {}\n+}\n+\n+struct S;\n+impl T for S {}\n+\n+fn main() {\n+    S::foo(42);\n+}"}, {"sha": "933a206410e10803d8850a2213a6bb8cc3c6b75b", "filename": "src/test/ui/parser/diff-markers/fn-arg.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ffn-arg.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/fn-arg.rs:3:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |         x: u8,\n+LL | =======\n+   | -------\n+LL |         x: i8,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "985907c08b28ce62afcb82a3207f366e81058045", "filename": "src/test/ui/parser/diff-markers/item-with-attr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,10 @@\n+#[attribute]\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+fn foo() {}\n+=======\n+fn bar() {}\n+>>>>>>> branch\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "850e2368e55d1aef0ef6fc5854a9938a05d62edd", "filename": "src/test/ui/parser/diff-markers/item-with-attr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem-with-attr.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/item-with-attr.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL | fn foo() {}\n+LL | =======\n+   | -------\n+LL | fn bar() {}\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "4ed36b7b42bcd5cdb9a8aa0b54060410505d75f1", "filename": "src/test/ui/parser/diff-markers/item.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,9 @@\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+fn foo() {}\n+=======\n+fn bar() {}\n+>>>>>>> branch\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "9ab3631a60e899cbb1ef21ba83b35cba04af29be", "filename": "src/test/ui/parser/diff-markers/item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fitem.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/item.rs:1:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL | fn foo() {}\n+LL | =======\n+   | -------\n+LL | fn bar() {}\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "e55d16d3bbb8eb112b7167aa0d4ce457ffd41264", "filename": "src/test/ui/parser/diff-markers/statement.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,15 @@\n+trait T {\n+    fn foo() {}\n+    fn bar() {}\n+}\n+\n+struct S;\n+impl T for S {}\n+\n+fn main() {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    S::foo();\n+=======\n+    S::bar();\n+>>>>>>> branch\n+}"}, {"sha": "7ca2495b829e4e8ad2dc62cd6519269e28286021", "filename": "src/test/ui/parser/diff-markers/statement.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstatement.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/statement.rs:10:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     S::foo();\n+LL | =======\n+   | -------\n+LL |     S::bar();\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "99d2fd662c69ca70084ba1b6e1cf00adeec49f11", "filename": "src/test/ui/parser/diff-markers/struct-expr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,12 @@\n+struct S {\n+    x: u8,\n+}\n+fn main() {\n+    let _ = S {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+        x: 42,\n+=======\n+        x: 0,\n+>>>>>>> branch\n+    }\n+}"}, {"sha": "d70476a983310e0eadecab6da9165903c99d88b7", "filename": "src/test/ui/parser/diff-markers/struct-expr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct-expr.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/struct-expr.rs:6:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |         x: 42,\n+LL | =======\n+   | -------\n+LL |         x: 0,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "d26464d47bcef1b0801891c03d0f7586f8f47f18", "filename": "src/test/ui/parser/diff-markers/struct.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,7 @@\n+struct S {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    x: u8,\n+=======\n+    x: i8,\n+>>>>>>> branch\n+}"}, {"sha": "cc0b3da664e7ba222932484598d20b0f621dce12", "filename": "src/test/ui/parser/diff-markers/struct.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fstruct.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/struct.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     x: u8,\n+LL | =======\n+   | -------\n+LL |     x: i8,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "3227c8212c96d39ede6d4da2e80a4fab93731d63", "filename": "src/test/ui/parser/diff-markers/trait-item.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,14 @@\n+trait T {\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    fn foo() {}\n+=======\n+    fn bar() {}\n+>>>>>>> branch\n+}\n+\n+struct S;\n+impl T for S {}\n+\n+fn main() {\n+    S::foo();\n+}"}, {"sha": "cdc19f8e0765a38be671184a61c5a42d0b3471d4", "filename": "src/test/ui/parser/diff-markers/trait-item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftrait-item.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/trait-item.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     fn foo() {}\n+LL | =======\n+   | -------\n+LL |     fn bar() {}\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "7eec35c968da30e7d286e77f1151413621f7e3bb", "filename": "src/test/ui/parser/diff-markers/tuple-struct.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,7 @@\n+struct S(\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    u8,\n+=======\n+    i8,\n+>>>>>>> branch\n+);"}, {"sha": "d673db89837e7c70ec97d661dfec0559eaa60c6a", "filename": "src/test/ui/parser/diff-markers/tuple-struct.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Ftuple-struct.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/tuple-struct.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     u8,\n+LL | =======\n+   | -------\n+LL |     i8,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "6306243a5141a434e112a6548a7061ee102d6f4e", "filename": "src/test/ui/parser/diff-markers/use-statement.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,9 @@\n+use foo::{\n+<<<<<<< HEAD //~ ERROR encountered diff marker\n+    bar,\n+=======\n+    baz,\n+>>>>>>> branch\n+};\n+\n+fn main() {}"}, {"sha": "12e6f57dd501bb4a919f16efbb756f632c2e33c7", "filename": "src/test/ui/parser/diff-markers/use-statement.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdiff-markers%2Fuse-statement.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,18 @@\n+error: encountered diff marker\n+  --> $DIR/use-statement.rs:2:1\n+   |\n+LL | <<<<<<< HEAD\n+   | ^^^^^^^ after this is the code before the merge\n+LL |     bar,\n+LL | =======\n+   | -------\n+LL |     baz,\n+LL | >>>>>>> branch\n+   | ^^^^^^^ above this are the incoming code changes\n+   |\n+   = help: if you're having merge conflicts after pulling new code, the top section is the code you already had and the bottom section is the remote code\n+   = help: if you're in the middle of a rebase, the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased\n+   = note: for an explanation on these markers from the `git` documentation, visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>\n+\n+error: aborting due to previous error\n+"}, {"sha": "7d9ff2dfb4d986213baa9c344a6787c15abc95e0", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -41,8 +41,8 @@ ast-stats-1 - Wild                      88 ( 1.2%)             1\n ast-stats-1 - Ident                    440 ( 5.9%)             5\n ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n ast-stats-1 Ty                       896 (12.1%)            14            64\n-ast-stats-1 - Rptr                      64 ( 0.9%)             1\n ast-stats-1 - Ptr                       64 ( 0.9%)             1\n+ast-stats-1 - Ref                       64 ( 0.9%)             1\n ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n ast-stats-1 - Path                     640 ( 8.6%)            10\n ast-stats-1 Item                   1_656 (22.3%)             9           184\n@@ -100,8 +100,8 @@ ast-stats-2 - Lit                      144 ( 1.8%)             2\n ast-stats-2 - Block                    216 ( 2.7%)             3\n ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n ast-stats-2 Ty                       896 (11.0%)            14            64\n-ast-stats-2 - Rptr                      64 ( 0.8%)             1\n ast-stats-2 - Ptr                       64 ( 0.8%)             1\n+ast-stats-2 - Ref                       64 ( 0.8%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n ast-stats-2 - Path                     640 ( 7.9%)            10\n ast-stats-2 Item                   2_024 (25.0%)            11           184\n@@ -154,7 +154,7 @@ hir-stats GenericParam             400 ( 4.4%)             5            80\n hir-stats Generics                 560 ( 6.2%)            10            56\n hir-stats Ty                       720 ( 8.0%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n-hir-stats - Rptr                      48 ( 0.5%)             1\n+hir-stats - Ref                       48 ( 0.5%)             1\n hir-stats - Path                     624 ( 6.9%)            13\n hir-stats Expr                     768 ( 8.5%)            12            64\n hir-stats - Path                      64 ( 0.7%)             1"}, {"sha": "0869485799311f14ac4bc1b330a6c64abad12805", "filename": "src/test/ui/unsized-locals/suggest-borrow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x: [u8] = vec!(1, 2, 3)[..]; //~ ERROR E0277\n+    let x: &[u8] = vec!(1, 2, 3)[..]; //~ ERROR E0308\n+    let x: [u8] = &vec!(1, 2, 3)[..]; //~ ERROR E0308\n+    //~^ ERROR E0277\n+    let x: &[u8] = &vec!(1, 2, 3)[..];\n+}"}, {"sha": "08745eab28d16e518b37ea35d3d02aa7e06cd75a", "filename": "src/test/ui/unsized-locals/suggest-borrow.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,60 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow.rs:2:9\n+   |\n+LL |     let x: [u8] = vec!(1, 2, 3)[..];\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let x: &[u8] = vec!(1, 2, 3)[..];\n+   |            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-borrow.rs:3:20\n+   |\n+LL |     let x: &[u8] = vec!(1, 2, 3)[..];\n+   |            -----   ^^^^^^^^^^^^^^^^^\n+   |            |       |\n+   |            |       expected `&[u8]`, found slice `[{integer}]`\n+   |            |       help: consider borrowing here: `&vec!(1, 2, 3)[..]`\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-borrow.rs:4:19\n+   |\n+LL |     let x: [u8] = &vec!(1, 2, 3)[..];\n+   |            ----   ^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `&[{integer}]`\n+   |            |\n+   |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let x: [u8] = &vec!(1, 2, 3)[..];\n+LL +     let x: [u8] = vec!(1, 2, 3)[..];\n+   |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let x: &[u8] = &vec!(1, 2, 3)[..];\n+   |            +\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow.rs:4:9\n+   |\n+LL |     let x: [u8] = &vec!(1, 2, 3)[..];\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let x: &[u8] = &vec!(1, 2, 3)[..];\n+   |            +\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "ace5a87187b8d1537f612cfc91e115dea1efd0ea", "filename": "src/test/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -27,6 +27,10 @@ LL |     let _foo: [u8] = *foo;\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let _foo: &[u8] = *foo;\n+   |               +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18ac1ea18751542fdf9489871f5b10a31713cd5b", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -14,6 +14,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL + fn f1<W: ?Sized, X: ?Sized, Y, Z: ?Sized>(x: &X) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &Y;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n@@ -62,6 +66,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL + fn f2<X, Y: ?Sized>(x: &X) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X;\n+   |            +\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n@@ -94,6 +102,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X = *x1;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n@@ -144,6 +156,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X = *x1;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9"}, {"sha": "05f2b92c037093affa39e21fe5ac1dc058528cb6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -969,14 +969,14 @@ fn binding_ty_auto_deref_stability<'tcx>(\n     precedence: i8,\n     binder_args: &'tcx List<BoundVariableKind>,\n ) -> Position {\n-    let TyKind::Rptr(_, ty) = &ty.kind else {\n+    let TyKind::Ref(_, ty) = &ty.kind else {\n         return Position::Other(precedence);\n     };\n     let mut ty = ty;\n \n     loop {\n         break match ty.ty.kind {\n-            TyKind::Rptr(_, ref ref_ty) => {\n+            TyKind::Ref(_, ref ref_ty) => {\n                 ty = ref_ty;\n                 continue;\n             },"}, {"sha": "676a37e04f60269aeb16352f9e1818d70fe28975", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -152,7 +152,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     let input_lifetimes: Vec<LifetimeName> = inputs\n         .iter()\n         .filter_map(|ty| {\n-            if let TyKind::Rptr(lt, _) = ty.kind {\n+            if let TyKind::Ref(lt, _) = ty.kind {\n                 Some(lt.res)\n             } else {\n                 None"}, {"sha": "77be61b4793403d2a9ba489df6daab12103b8841", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -3986,7 +3986,7 @@ impl OutType {\n             (Self::Unit, &hir::FnRetTy::Return(ty)) if is_unit(ty) => true,\n             (Self::Bool, &hir::FnRetTy::Return(ty)) if is_bool(ty) => true,\n             (Self::Any, &hir::FnRetTy::Return(ty)) if !is_unit(ty) => true,\n-            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n+            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Ref(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "64d8333a093b1143047981a19414a00cb4c33dd5", "filename": "src/tools/clippy/clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -86,15 +86,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let hir::TyKind::Rptr(\n+        if let hir::TyKind::Ref(\n             _,\n             hir::MutTy {\n                 ty: pty,\n                 mutbl: hir::Mutability::Mut,\n             },\n         ) = ty.kind\n         {\n-            if let hir::TyKind::Rptr(\n+            if let hir::TyKind::Ref(\n                 _,\n                 hir::MutTy {\n                     mutbl: hir::Mutability::Mut,"}, {"sha": "5457eeec4eacf249c2b1fef96d88f3e7a62da831", "filename": "src/tools/clippy/clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -124,7 +124,7 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n                     check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n                 if let PatKind::Ident(BindingAnnotation::NONE, _, _) = p.pat.kind;"}, {"sha": "75add4ee4aadedb8747a09ff1f45c434b6c4782d", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> PassByRefOrValue {\n                     if is_copy(cx, ty)\n                         && let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes())\n                         && size <= self.ref_min_size\n-                        && let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind\n+                        && let hir::TyKind::Ref(_, MutTy { ty: decl_ty, .. }) = input.kind\n                     {\n                         if let Some(typeck) = cx.maybe_typeck_results() {\n                             // Don't lint if an unsafe pointer is created."}, {"sha": "262953042581ab5269cb97221a946830c14059ef", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -421,7 +421,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let ty::Ref(_, ty, mutability) = *ty.kind();\n                 if let ty::Adt(adt, substs) = *ty.kind();\n \n-                if let TyKind::Rptr(lt, ref ty) = hir_ty.kind;\n+                if let TyKind::Ref(lt, ref ty) = hir_ty.kind;\n                 if let TyKind::Path(QPath::Resolved(None, path)) = ty.ty.kind;\n \n                 // Check that the name as typed matches the actual name of the type.\n@@ -503,14 +503,14 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n \n fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Option<&'tcx Body<'_>>) {\n     if let FnRetTy::Return(ty) = sig.decl.output\n-        && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n+        && let Some((out, Mutability::Mut, _)) = get_ref_lm(ty)\n     {\n         let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n-            .filter_map(get_rptr_lm)\n+            .filter_map(get_ref_lm)\n             .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n@@ -704,8 +704,8 @@ fn matches_preds<'tcx>(\n     })\n }\n \n-fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(lt, ref m) = ty.kind {\n+fn get_ref_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n+    if let TyKind::Ref(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "44bf824aa0e2d432688e90827af89090640484dc", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -59,7 +59,7 @@ impl RedundantStaticLifetimes {\n                 }\n             },\n             // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+            TyKind::Ref(ref optional_lifetime, ref borrow_type) => {\n                 // Match the 'static lifetime\n                 if let Some(lifetime) = *optional_lifetime {\n                     match borrow_type.ty.kind {"}, {"sha": "448a32b77c036d92d2d5768db876c95c9317cbb6", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n-            if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n+            if let TyKind::Ref(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,\n             });\n-            if let TyKind::Rptr(_, ref inner_mut_ty) = inner_ty.kind;\n+            if let TyKind::Ref(_, ref inner_mut_ty) = inner_ty.kind;\n             if inner_mut_ty.mutbl == Mutability::Not;\n \n             then {"}, {"sha": "54ac04df1c12ab9bc96a5f1e8edf7aeb80ff60b5", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n /// Gets the type `Bar` in `\u2026::transmute<Foo, &Bar>`.\n fn get_explicit_type<'tcx>(path: &'tcx Path<'tcx>) -> Option<&'tcx hir::Ty<'tcx>> {\n     if let GenericArg::Type(ty) = path.segments.last()?.args?.args.get(1)?\n-        && let TyKind::Rptr(_, ty) = &ty.kind\n+        && let TyKind::Ref(_, ty) = &ty.kind\n     {\n         Some(ty.ty)\n     } else {"}, {"sha": "c14f056a1f2de181d41e47a99bdcbc2c09338ac1", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -539,7 +539,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(lt, ref mut_ty) => {\n+            TyKind::Ref(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "0aa50c99c16904abed7bfd0c3ddb278a11877264", "filename": "src/tools/clippy/clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n-            TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n+            TyKind::Infer | TyKind::Ptr(..) | TyKind::Ref(..) => (1, 0),\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n             TyKind::Path(..) | TyKind::Slice(..) | TyKind::Tup(..) | TyKind::Array(..) => (10 * self.nest, 1),"}, {"sha": "7f43b7841ff33d887668c2b321e686db081d9d76", "filename": "src/tools/clippy/clippy_lints/src/types/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -13,7 +13,7 @@ pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>)\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,\n         });\n-        if let TyKind::Rptr(..) = ty.kind;\n+        if let TyKind::Ref(..) = ty.kind;\n         then {\n             return Some(ty.span);\n         }"}, {"sha": "4c3b1b131fd4caeea3f8d3951382f1a02defd374", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n }\n \n pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if let TyKind::Rptr(\n+    if let TyKind::Ref(\n         _,\n         MutTy {\n             ty: inner,"}, {"sha": "9d0263e93be756939d9e7df6c36f50e7169f6d8e", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -625,7 +625,7 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n         (Slice(l), Slice(r)) => eq_ty(l, r),\n         (Array(le, ls), Array(re, rs)) => eq_ty(le, re) && eq_expr(&ls.value, &rs.value),\n         (Ptr(l), Ptr(r)) => l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty),\n-        (Rptr(ll, l), Rptr(rl, r)) => {\n+        (Ref(ll, l), Ref(rl, r)) => {\n             both(ll, rl, |l, r| eq_id(l.ident, r.ident)) && l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty)\n         },\n         (BareFn(l), BareFn(r)) => {"}, {"sha": "2bbe1a19b625a7e7eb19c77e88a8a8f2c8e566a5", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -430,7 +430,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (TyKind::Ptr(l_mut), TyKind::Ptr(r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty),\n-            (TyKind::Rptr(_, l_rmut), TyKind::Rptr(_, r_rmut)) => {\n+            (TyKind::Ref(_, l_rmut), TyKind::Ref(_, r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (TyKind::Path(l), TyKind::Path(r)) => self.eq_qpath(l, r),\n@@ -950,7 +950,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            TyKind::Rptr(lifetime, ref mut_ty) => {\n+            TyKind::Ref(lifetime, ref mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);"}, {"sha": "d863609b6a72688ac8cf171c38e9405edaa55a1a", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -2264,7 +2264,7 @@ pub fn peel_hir_ty_refs<'a>(mut ty: &'a hir::Ty<'a>) -> (&'a hir::Ty<'a>, usize)\n     let mut count = 0;\n     loop {\n         match &ty.kind {\n-            TyKind::Rptr(_, ref_ty) => {\n+            TyKind::Ref(_, ref_ty) => {\n                 ty = ref_ty.ty;\n                 count += 1;\n             },"}, {"sha": "a203a7afddf88bfef885aa6ba0f952c25414deda", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -813,9 +813,9 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n-        let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n+        let closure_arg_is_type_annotated_double_ref = if let TyKind::Ref(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n         {\n-            matches!(ty.kind, TyKind::Rptr(_, MutTy { .. }))\n+            matches!(ty.kind, TyKind::Ref(_, MutTy { .. }))\n         } else {\n             false\n         };"}, {"sha": "c8d56a3be5cf356ca7c3723dd8cb29fbed2fbf79", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -496,7 +496,7 @@ pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bo\n /// Returns the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     match ty.kind {\n-        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n+        TyKind::Ptr(ref mut_ty) | TyKind::Ref(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n         _ => ty,\n     }\n }"}, {"sha": "d17bb9533b438a6d13853dcd1b6985b53dc1d79b", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 87, "deletions": 67, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -4,9 +4,9 @@ version = 3\n \n [[package]]\n name = \"addr2line\"\n-version = \"0.17.0\"\n+version = \"0.19.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+checksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\n dependencies = [\n  \"gimli\",\n ]\n@@ -19,9 +19,9 @@ checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.7.19\"\n+version = \"0.7.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b4f55bd91a0978cbfd91c457a164bab8b4001c833b7f323132c0a4e1922dd44e\"\n+checksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\n dependencies = [\n  \"memchr\",\n ]\n@@ -45,9 +45,9 @@ checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.66\"\n+version = \"0.3.67\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cab84319d616cfb654d03394f38ab7e6f0919e181b1b57e1fd15e7fb4077d9a7\"\n+checksum = \"233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca\"\n dependencies = [\n  \"addr2line\",\n  \"cc\",\n@@ -66,9 +66,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"bstr\"\n-version = \"1.0.1\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fca0852af221f458706eb0725c03e4ed6c46af9ac98e6a689d5e634215d594dd\"\n+checksum = \"b45ea9b00a7b3f2988e9a65ad3917e62123c38dba709b666506207be96d1790b\"\n dependencies = [\n  \"memchr\",\n  \"once_cell\",\n@@ -96,22 +96,23 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.15.0\"\n+version = \"0.15.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3abb7553d5b9b8421c6de7cb02606ff15e0c6eea7d8eadd75ef013fd636bec36\"\n+checksum = \"982a0cf6a99c350d7246035613882e376d58cebe571785abc5da4f648d53ac0a\"\n dependencies = [\n  \"camino\",\n  \"cargo-platform\",\n  \"semver\",\n  \"serde\",\n  \"serde_json\",\n+ \"thiserror\",\n ]\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.73\"\n+version = \"1.0.78\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+checksum = \"a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -169,12 +170,11 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-utils\"\n-version = \"0.8.11\"\n+version = \"0.8.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"51887d4adc7b564537b15adcfb307936f8075dfcd5f00dde9a9f1d29383682bc\"\n+checksum = \"4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f\"\n dependencies = [\n  \"cfg-if\",\n- \"once_cell\",\n ]\n \n [[package]]\n@@ -185,9 +185,9 @@ checksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.9.1\"\n+version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c90bf5f19754d10198ccb95b70664fc925bd1fc090a0fd9a6ebc54acc8cd6272\"\n+checksum = \"a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7\"\n dependencies = [\n  \"atty\",\n  \"humantime\",\n@@ -217,9 +217,9 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.7\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n+checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -228,9 +228,9 @@ dependencies = [\n \n [[package]]\n name = \"gimli\"\n-version = \"0.26.2\"\n+version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\n+checksum = \"dec7af912d60cdbd3677c1af9352ebae6fb8394d165568a2234df0fa00f87793\"\n \n [[package]]\n name = \"hermit-abi\"\n@@ -264,9 +264,9 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"1.0.3\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6c8af84674fe1f223a982c933a0ee1086ac4d4052aa0fb8060c12c6ad838e754\"\n+checksum = \"fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440\"\n \n [[package]]\n name = \"lazy_static\"\n@@ -276,9 +276,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.133\"\n+version = \"0.2.139\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966\"\n+checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n \n [[package]]\n name = \"libffi\"\n@@ -301,9 +301,9 @@ dependencies = [\n \n [[package]]\n name = \"libloading\"\n-version = \"0.7.3\"\n+version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd\"\n+checksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\n dependencies = [\n  \"cfg-if\",\n  \"winapi\",\n@@ -359,9 +359,9 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.5.4\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"96590ba8f175222643a85693f33d26e9c8a015f599c216509b1a6894af675d34\"\n+checksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"\n dependencies = [\n  \"adler\",\n ]\n@@ -389,18 +389,18 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.29.0\"\n+version = \"0.30.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n+checksum = \"239da7f290cfa979f43f85a8efeee9a8a76d0827c356d37f9d3d7254d6b537fb\"\n dependencies = [\n  \"memchr\",\n ]\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.15.0\"\n+version = \"1.16.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e82dad04139b71a90c080c8463fe0dc7902db5192d939bd0950f074d014339e1\"\n+checksum = \"86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860\"\n \n [[package]]\n name = \"owo-colors\"\n@@ -421,9 +421,9 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.8.5\"\n+version = \"0.8.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216\"\n+checksum = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\"\n dependencies = [\n  \"cfg-if\",\n  \"instant\",\n@@ -450,24 +450,24 @@ checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n \n [[package]]\n name = \"ppv-lite86\"\n-version = \"0.2.16\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n+checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.45\"\n+version = \"1.0.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3edcd08cf4fea98d1ae6c9ddd3b8ccb1acac7c3693d62625969a7daa04a2ae36\"\n+checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.21\"\n+version = \"1.0.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n+checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -513,9 +513,9 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.6.0\"\n+version = \"1.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c4eb3267174b8c6c2f654116623910a0fef09c4753f8dd83db29c48a0df988b\"\n+checksum = \"e076559ef8e241f2ae3479e36f97bd5741c0330689e217ad51ce2c76808b868a\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n@@ -530,9 +530,9 @@ checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.27\"\n+version = \"0.6.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a3f87b73ce11b1619a3c6332f45341e0047173771e8b8b73f87bfeefb7b56244\"\n+checksum = \"456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848\"\n \n [[package]]\n name = \"remove_dir_all\"\n@@ -572,9 +572,9 @@ dependencies = [\n \n [[package]]\n name = \"ryu\"\n-version = \"1.0.11\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09\"\n+checksum = \"7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde\"\n \n [[package]]\n name = \"scopeguard\"\n@@ -584,27 +584,27 @@ checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.14\"\n+version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n+checksum = \"58bc9567378fc7690d6b2addae4e60ac2eeea07becb2c64b9f218b53865cba2a\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.145\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"728eb6351430bccb993660dfffc5a72f91ccc1295abaa8ce19b27ebe4f75568b\"\n+checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.145\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n+checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -613,9 +613,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.85\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n+checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -633,15 +633,15 @@ dependencies = [\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.9.0\"\n+version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2fd0db749597d91ff862fd1d55ea87f7855a744a8425a64695b6fca237d1dad1\"\n+checksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.101\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n+checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -671,6 +671,26 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"thiserror\"\n+version = \"1.0.38\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0\"\n+dependencies = [\n+ \"thiserror-impl\",\n+]\n+\n+[[package]]\n+name = \"thiserror-impl\"\n+version = \"1.0.38\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"1.1.4\"\n@@ -682,9 +702,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing\"\n-version = \"0.1.36\"\n+version = \"0.1.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2fce9567bd60a67d08a16488756721ba392f24f29006402881e43b19aac64307\"\n+checksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\n dependencies = [\n  \"cfg-if\",\n  \"pin-project-lite\",\n@@ -693,9 +713,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-core\"\n-version = \"0.1.29\"\n+version = \"0.1.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5aeea4303076558a00714b823f9ad67d58a3bbda1df83d8827d21193156e22f7\"\n+checksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"\n dependencies = [\n  \"once_cell\",\n  \"valuable\",\n@@ -713,9 +733,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-subscriber\"\n-version = \"0.3.15\"\n+version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"60db860322da191b40952ad9affe65ea23e7dd6a5c442c2c42865810c6ab8e6b\"\n+checksum = \"a6176eae26dd70d0c919749377897b54a9276bd7061339665dd68777926b5a70\"\n dependencies = [\n  \"sharded-slab\",\n  \"thread_local\",\n@@ -744,9 +764,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.4\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n+checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n \n [[package]]\n name = \"valuable\""}, {"sha": "37926db0166b71b88961be3a28b3043ef72ae868", "filename": "src/tools/miri/cargo-miri/Cargo.lock", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -4,9 +4,9 @@ version = 3\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.65\"\n+version = \"1.0.68\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"98161a4e3e2184da77bb14f02184cdd111e83bbbcc9979dfee3c44b9a85f5602\"\n+checksum = \"2cb2f989d18dd141ab8ae82f64d1a8cdd37e0840f73a406896cf5e99502fab61\"\n \n [[package]]\n name = \"bitflags\"\n@@ -48,15 +48,16 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.15.0\"\n+version = \"0.15.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3abb7553d5b9b8421c6de7cb02606ff15e0c6eea7d8eadd75ef013fd636bec36\"\n+checksum = \"982a0cf6a99c350d7246035613882e376d58cebe571785abc5da4f648d53ac0a\"\n dependencies = [\n  \"camino\",\n  \"cargo-platform\",\n  \"semver\",\n  \"serde\",\n  \"serde_json\",\n+ \"thiserror\",\n ]\n \n [[package]]\n@@ -96,9 +97,9 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.7\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n+checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -116,30 +117,30 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"1.0.3\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6c8af84674fe1f223a982c933a0ee1086ac4d4052aa0fb8060c12c6ad838e754\"\n+checksum = \"fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.133\"\n+version = \"0.2.139\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966\"\n+checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.45\"\n+version = \"1.0.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3edcd08cf4fea98d1ae6c9ddd3b8ccb1acac7c3693d62625969a7daa04a2ae36\"\n+checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.21\"\n+version = \"1.0.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n+checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -175,9 +176,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-build-sysroot\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"20c4b4625eeb148cccf82d5e9b90ad7fab3b11a0204cf75cc7fa04981a0fdffd\"\n+checksum = \"d65b1271cdac365b71b59570ea35d945dea2dd2cc47eba3d33b4bd1e0190ac6d\"\n dependencies = [\n  \"anyhow\",\n  \"rustc_version\",\n@@ -207,33 +208,33 @@ dependencies = [\n \n [[package]]\n name = \"ryu\"\n-version = \"1.0.11\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09\"\n+checksum = \"7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.14\"\n+version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n+checksum = \"58bc9567378fc7690d6b2addae4e60ac2eeea07becb2c64b9f218b53865cba2a\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.145\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"728eb6351430bccb993660dfffc5a72f91ccc1295abaa8ce19b27ebe4f75568b\"\n+checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.145\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n+checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -242,9 +243,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.85\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n+checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -253,9 +254,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.101\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n+checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -278,18 +279,18 @@ dependencies = [\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.37\"\n+version = \"1.0.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e\"\n+checksum = \"6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.37\"\n+version = \"1.0.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb\"\n+checksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -298,9 +299,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.4\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n+checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n \n [[package]]\n name = \"wasi\""}, {"sha": "2197160bc9d441e93dc370c1f361c249e94412ed", "filename": "src/tools/miri/cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -18,7 +18,7 @@ directories = \"4\"\n rustc_version = \"0.4\"\n serde_json = \"1.0.40\"\n cargo_metadata = \"0.15.0\"\n-rustc-build-sysroot = \"0.4\"\n+rustc-build-sysroot = \"0.4.1\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "e51bfa3798f3ecdd0b6a4ed9abf06bc8a8024366", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -236,22 +236,36 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n         is_bin || is_test\n     }\n \n-    fn out_filename(prefix: &str, suffix: &str) -> PathBuf {\n-        if let Some(out_dir) = get_arg_flag_value(\"--out-dir\") {\n-            let mut path = PathBuf::from(out_dir);\n-            path.push(format!(\n-                \"{}{}{}{}\",\n-                prefix,\n-                get_arg_flag_value(\"--crate-name\").unwrap(),\n-                // This is technically a `-C` flag but the prefix seems unique enough...\n-                // (and cargo passes this before the filename so it should be unique)\n-                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n-                suffix,\n-            ));\n-            path\n+    fn out_filenames() -> Vec<PathBuf> {\n+        if let Some(out_file) = get_arg_flag_value(\"-o\") {\n+            // `-o` has precedence over `--out-dir`.\n+            vec![PathBuf::from(out_file)]\n         } else {\n-            let out_file = get_arg_flag_value(\"-o\").unwrap();\n-            PathBuf::from(out_file)\n+            let out_dir = get_arg_flag_value(\"--out-dir\").unwrap_or_default();\n+            let path = PathBuf::from(out_dir);\n+            // Ask rustc for the filename (since that is target-dependent).\n+            let mut rustc = miri_for_host(); // sysroot doesn't matter for this so we just use the host\n+            rustc.arg(\"--print\").arg(\"file-names\");\n+            for flag in [\"--crate-name\", \"--crate-type\", \"--target\"] {\n+                for val in get_arg_flag_values(flag) {\n+                    rustc.arg(flag).arg(val);\n+                }\n+            }\n+            // This is technically passed as `-C extra-filename=...`, but the prefix seems unique\n+            // enough... (and cargo passes this before the filename so it should be unique)\n+            if let Some(extra) = get_arg_flag_value(\"extra-filename\") {\n+                rustc.arg(\"-C\").arg(format!(\"extra-filename={extra}\"));\n+            }\n+            rustc.arg(\"-\");\n+\n+            let output = rustc.output().expect(\"cannot run rustc to determine file name\");\n+            assert!(\n+                output.status.success(),\n+                \"rustc failed when determining file name:\\n{output:?}\"\n+            );\n+            let output =\n+                String::from_utf8(output.stdout).expect(\"rustc returned non-UTF-8 filename\");\n+            output.lines().filter(|l| !l.is_empty()).map(|l| path.join(l)).collect()\n         }\n     }\n \n@@ -267,24 +281,28 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     let info_query = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\");\n \n     let store_json = |info: CrateRunInfo| {\n-        // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n-        // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n-        // As we store a JSON file instead of building the crate here, an empty file is fine.\n-        let dep_info_name = out_filename(\"\", \".d\");\n-        if verbose > 0 {\n-            eprintln!(\"[cargo-miri rustc] writing stub dep-info to `{}`\", dep_info_name.display());\n+        if get_arg_flag_value(\"--emit\").unwrap_or_default().split(',').any(|e| e == \"dep-info\") {\n+            // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n+            // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n+            // As we store a JSON file instead of building the crate here, an empty file is fine.\n+            let dep_info_name = format!(\n+                \"{}/{}{}.d\",\n+                get_arg_flag_value(\"--out-dir\").unwrap(),\n+                get_arg_flag_value(\"--crate-name\").unwrap(),\n+                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n+            );\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] writing stub dep-info to `{dep_info_name}`\");\n+            }\n+            File::create(dep_info_name).expect(\"failed to create fake .d file\");\n         }\n-        File::create(dep_info_name).expect(\"failed to create fake .d file\");\n \n-        let filename = out_filename(\"\", \"\");\n-        if verbose > 0 {\n-            eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n+        for filename in out_filenames() {\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n+            }\n+            info.store(&filename);\n         }\n-        info.store(&filename);\n-        // For Windows and WASM, do the same thing again with `.exe`/`.wasm` appended to the filename.\n-        // (Need to do this here as cargo moves that \"binary\" to a different place before running it.)\n-        info.store(&out_filename(\"\", \".exe\"));\n-        info.store(&out_filename(\"\", \".wasm\"));\n     };\n \n     let runnable_crate = !info_query && is_runnable_crate();\n@@ -323,11 +341,14 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n \n             // Alter the `-o` parameter so that it does not overwrite the JSON file we stored above.\n             let mut args = env.args;\n+            let mut out_filename = None;\n             for i in 0..args.len() {\n                 if args[i] == \"-o\" {\n+                    out_filename = Some(args[i + 1].clone());\n                     args[i + 1].push_str(\".miri\");\n                 }\n             }\n+            let out_filename = out_filename.expect(\"rustdoc must pass `-o`\");\n \n             cmd.args(&args);\n             cmd.env(\"MIRI_BE_RUSTC\", \"target\");\n@@ -340,7 +361,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                 eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{cmd:?}\");\n             }\n \n-            exec_with_pipe(cmd, &env.stdin, format!(\"{}.stdin\", out_filename(\"\", \"\").display()));\n+            exec_with_pipe(cmd, &env.stdin, format!(\"{out_filename}.stdin\"));\n         }\n \n         return;\n@@ -422,15 +443,12 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     // Create a stub .rlib file if \"link\" was requested by cargo.\n     // This is necessary to prevent cargo from doing rebuilds all the time.\n     if emit_link_hack {\n-        // Some platforms prepend \"lib\", some do not... let's just create both files.\n-        File::create(out_filename(\"lib\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n-        File::create(out_filename(\"\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n-        // Just in case this is a cdylib or staticlib, also create those fake files.\n-        File::create(out_filename(\"lib\", \".so\")).expect(\"failed to create fake .so file\");\n-        File::create(out_filename(\"lib\", \".a\")).expect(\"failed to create fake .a file\");\n-        File::create(out_filename(\"lib\", \".dylib\")).expect(\"failed to create fake .dylib file\");\n-        File::create(out_filename(\"\", \".dll\")).expect(\"failed to create fake .dll file\");\n-        File::create(out_filename(\"\", \".lib\")).expect(\"failed to create fake .lib file\");\n+        for filename in out_filenames() {\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] creating fake lib file at `{}`\", filename.display());\n+            }\n+            File::create(filename).expect(\"failed to create fake lib file\");\n+        }\n     }\n \n     debug_cmd(\"[cargo-miri rustc]\", verbose, &cmd);"}, {"sha": "2e4f0a71013c06b9fa64b1ea01963d742fa5a3d9", "filename": "src/tools/miri/cargo-miri/src/setup.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -137,9 +137,11 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         .rustflags(rustflags)\n         .cargo(cargo_cmd)\n         .build_from_source(&rust_src)\n-        .unwrap_or_else(|_| {\n-            if only_setup {\n-                show_error!(\"failed to build sysroot, see error details above\")\n+        .unwrap_or_else(|err| {\n+            if print_sysroot {\n+                show_error!(\"failed to build sysroot\")\n+            } else if only_setup {\n+                show_error!(\"failed to build sysroot: {err:?}\")\n             } else {\n                 show_error!(\n                     \"failed to build sysroot; run `cargo miri setup` to see the error details\""}, {"sha": "b35f7370d68a57743803d427aa2cd5e7841cdd29", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -108,8 +108,9 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n     MIRI_TEST_TARGET=aarch64-linux-android run_tests_minimal hello integer vec panic/panic\n-    MIRI_TEST_TARGET=wasm32-wasi MIRI_NO_STD=1 run_tests_minimal no_std # supports std but miri doesn't support it\n+    MIRI_TEST_TARGET=wasm32-wasi run_tests_minimal no_std integer\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n+    MIRI_TEST_TARGET=tests/avr.json MIRI_NO_STD=1 run_tests_minimal no_std # JSON target file\n     ;;\n   x86_64-apple-darwin)\n     MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture"}, {"sha": "c792a27ab4ca29b93f5a0d0ce9961a3589d696be", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 62, "deletions": 31, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let min_align = match this.tcx.sess.target.arch.as_ref() {\n             \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n             \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n-            arch => bug!(\"Unsupported target architecture: {}\", arch),\n+            arch => bug!(\"unsupported target architecture for malloc: `{}`\", arch),\n         };\n         // Windows always aligns, even small allocations.\n         // Source: <https://support.microsoft.com/en-us/help/286470/how-to-use-pageheap-exe-in-windows-xp-windows-2000-and-windows-server>\n@@ -320,7 +320,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     return Ok(Some(body));\n                 }\n \n-                this.handle_unsupported(format!(\"can't call foreign function: {link_name}\"))?;\n+                this.handle_unsupported(format!(\n+                    \"can't call foreign function `{link_name}` on OS `{os}`\",\n+                    os = this.tcx.sess.target.os,\n+                ))?;\n                 return Ok(None);\n             }\n         }\n@@ -336,9 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n-        let allocator_kind = if let Some(allocator_kind) = this.tcx.allocator_kind(()) {\n-            allocator_kind\n-        } else {\n+        let Some(allocator_kind) = this.tcx.allocator_kind(()) else {\n             // in real code, this symbol does not exist without an allocator\n             return Ok(EmulateByNameResult::NotSupported);\n         };\n@@ -420,9 +421,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr).map_err(|_e| {\n-                    err_machine_stop!(TerminationInfo::Abort(\n-                        format!(\"pointer passed to miri_get_alloc_id must not be dangling, got {ptr:?}\")\n-                    ))\n+                    err_machine_stop!(TerminationInfo::Abort(format!(\n+                        \"pointer passed to miri_get_alloc_id must not be dangling, got {ptr:?}\"\n+                    )))\n                 })?;\n                 this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n             }\n@@ -438,7 +439,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ptr = this.read_pointer(ptr)?;\n                 let (alloc_id, offset, _) = this.ptr_get_alloc_id(ptr)?;\n                 if offset != Size::ZERO {\n-                    throw_unsup_format!(\"pointer passed to miri_static_root must point to beginning of an allocated block\");\n+                    throw_unsup_format!(\n+                        \"pointer passed to miri_static_root must point to beginning of an allocated block\"\n+                    );\n                 }\n                 this.machine.static_roots.push(alloc_id);\n             }\n@@ -453,7 +456,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n                 // We read this as a plain OsStr and write it as a path, which will convert it to the target.\n                 let path = this.read_os_str_from_c_str(ptr)?.to_owned();\n-                let (success, needed_size) = this.write_path_to_c_str(Path::new(&path), out, out_size)?;\n+                let (success, needed_size) =\n+                    this.write_path_to_c_str(Path::new(&path), out, out_size)?;\n                 // Return value: 0 on success, otherwise the size it would have needed.\n                 this.write_int(if success { 0 } else { needed_size }, dest)?;\n             }\n@@ -505,11 +509,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_pointer(res, dest)?;\n             }\n             \"calloc\" => {\n-                let [items, len] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [items, len] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let items = this.read_machine_usize(items)?;\n                 let len = this.read_machine_usize(len)?;\n-                let size =\n-                    items.checked_mul(len).ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n+                let size = items\n+                    .checked_mul(len)\n+                    .ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n                 let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n@@ -519,7 +525,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n-                let [old_ptr, new_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [old_ptr, new_size] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let old_ptr = this.read_pointer(old_ptr)?;\n                 let new_size = this.read_machine_usize(new_size)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n@@ -551,11 +558,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_alloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n+                    \"__rust_alloc\" =>\n+                        return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n                     \"miri_alloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n-                    },\n+                    }\n                     _ => unreachable!(),\n                 }\n             }\n@@ -574,7 +582,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     )?;\n \n                     // We just allocated this, the access is definitely in-bounds.\n-                    this.write_bytes_ptr(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n+                    this.write_bytes_ptr(\n+                        ptr.into(),\n+                        iter::repeat(0u8).take(usize::try_from(size).unwrap()),\n+                    )\n+                    .unwrap();\n                     this.write_pointer(ptr, dest)\n                 });\n             }\n@@ -600,7 +612,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_dealloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n+                    \"__rust_dealloc\" =>\n+                        return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n                     \"miri_dealloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -609,7 +622,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_realloc\" => {\n-                let [ptr, old_size, align, new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let [ptr, old_size, align, new_size] =\n+                    this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let old_size = this.read_machine_usize(old_size)?;\n                 let align = this.read_machine_usize(align)?;\n@@ -633,7 +647,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             // C memory handling functions\n             \"memcmp\" => {\n-                let [left, right, n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [left, right, n] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let left = this.read_pointer(left)?;\n                 let right = this.read_pointer(right)?;\n                 let n = Size::from_bytes(this.read_machine_usize(n)?);\n@@ -653,7 +668,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n-                let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [ptr, val, num] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_machine_usize(num)?;\n@@ -676,7 +692,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"memchr\" => {\n-                let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let [ptr, val, num] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_machine_usize(num)?;\n@@ -699,7 +716,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let n = this.read_c_str(ptr)?.len();\n-                this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n+                this.write_scalar(\n+                    Scalar::from_machine_usize(u64::try_from(n).unwrap(), this),\n+                    dest,\n+                )?;\n             }\n \n             // math functions (note that there are also intrinsics for some other functions)\n@@ -835,7 +855,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let a = this.read_scalar(a)?.to_u64()?;\n                 let b = this.read_scalar(b)?.to_u64()?;\n \n-                #[allow(clippy::integer_arithmetic)] // adding two u64 and a u8 cannot wrap in a u128\n+                #[allow(clippy::integer_arithmetic)]\n+                // adding two u64 and a u8 cannot wrap in a u128\n                 let wide_sum = u128::from(c_in) + u128::from(a) + u128::from(b);\n                 #[allow(clippy::integer_arithmetic)] // it's a u128, we can shift by 64\n                 let (c_out, sum) = ((wide_sum >> 64).truncate::<u8>(), wide_sum.truncate::<u64>());\n@@ -845,15 +866,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let sum_field = this.place_field(dest, 1)?;\n                 this.write_scalar(Scalar::from_u64(sum), &sum_field)?;\n             }\n-            \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n+            \"llvm.x86.sse2.pause\"\n+                if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" =>\n+            {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.yield_active_thread();\n             }\n             \"llvm.aarch64.isb\" if this.tcx.sess.target.arch == \"aarch64\" => {\n                 let [arg] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n                 let arg = this.read_scalar(arg)?.to_i32()?;\n                 match arg {\n-                    15 => { // SY (\"full system scope\")\n+                    // SY (\"full system scope\")\n+                    15 => {\n                         this.yield_active_thread();\n                     }\n                     _ => {\n@@ -863,11 +887,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n \n             // Platform-specific shims\n-            _ => match this.tcx.sess.target.os.as_ref() {\n-                target if target_os_is_unix(target) => return shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n-            }\n+            _ =>\n+                return match this.tcx.sess.target.os.as_ref() {\n+                    target_os if target_os_is_unix(target_os) =>\n+                        shims::unix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(\n+                            this, link_name, abi, args, dest,\n+                        ),\n+                    \"windows\" =>\n+                        shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(\n+                            this, link_name, abi, args, dest,\n+                        ),\n+                    _ => Ok(EmulateByNameResult::NotSupported),\n+                },\n         };\n         // We only fall through to here if we did *not* hit the `_` arm above,\n         // i.e., if we actually emulated the function with one of the shims."}, {"sha": "ca31efa486c2717d03795f227ae6530988b7bfc1", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -257,16 +257,11 @@ impl TlsDtorsState {\n                         // And move to the final state.\n                         self.0 = Done;\n                     }\n-                    \"wasi\" | \"none\" => {\n-                        // No OS, no TLS dtors.\n+                    _ => {\n+                        // No TLS dtor support.\n                         // FIXME: should we do something on wasi?\n                         self.0 = Done;\n                     }\n-                    os => {\n-                        throw_unsup_format!(\n-                            \"the TLS machinery does not know how to handle OS `{os}`\"\n-                        );\n-                    }\n                 }\n             }\n             PthreadDtors(state) => {"}, {"sha": "d018a7ea252b7ec10e539b4ca4338213a26eab63", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -596,13 +596,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Platform-specific shims\n             _ => {\n                 let target_os = &*this.tcx.sess.target.os;\n-                match target_os {\n-                    \"android\" => return shims::unix::android::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n-                    _ => panic!(\"unsupported Unix OS {target_os}\"),\n-                }\n+                return match target_os {\n+                    \"android\" => shims::unix::android::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"freebsd\" => shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"linux\" => shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    \"macos\" => shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest),\n+                    _ => Ok(EmulateByNameResult::NotSupported),\n+                };\n             }\n         };\n "}, {"sha": "af38ceb1d4c7df7202ac8a0ea2e24d750b07ce30", "filename": "src/tools/miri/test-cargo-miri/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -83,27 +83,27 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.44\"\n+version = \"1.0.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7bd7356a8122b6c4a24a82b278680c73357984ca2fc79a0f9fa6dea7dced7c58\"\n+checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.21\"\n+version = \"1.0.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n+checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n dependencies = [\n  \"proc-macro2\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.145\"\n+version = \"1.0.152\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n+checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -119,9 +119,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.101\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n+checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -130,6 +130,6 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.4\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n+checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\""}, {"sha": "bf7f0411bedb711debf27c98944ce1a21cbf7b0d", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -50,18 +50,18 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.19\"\n+version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n+checksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\n dependencies = [\n  \"libc\",\n ]\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.137\"\n+version = \"0.2.139\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fc7fcc620a3bff7cdd7a365be3376c97191aeaccc2a603e600951e452615bf89\"\n+checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n \n [[package]]\n name = \"lock_api\"\n@@ -115,9 +115,9 @@ dependencies = [\n \n [[package]]\n name = \"num_cpus\"\n-version = \"1.14.0\"\n+version = \"1.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6058e64324c71e02bc2b150e4f3bc8286db6c83092132ffa3f6b1eab0f9def5\"\n+checksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\n dependencies = [\n  \"hermit-abi\",\n  \"libc\",\n@@ -145,9 +145,9 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.9.4\"\n+version = \"0.9.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4dc9e0dc2adc1c69d09143aff38d3d30c5c3f0df0dad82e6d25547af174ebec0\"\n+checksum = \"7ff9f3fef3968a3ec5945535ed654cb38ff72d7495a25619e2247fb15a2ed9ba\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -170,18 +170,18 @@ checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.47\"\n+version = \"1.0.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5ea3d908b0e36316caf9e9e2c4625cdde190a7e6f440d794667ed17a1855e725\"\n+checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.21\"\n+version = \"1.0.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n+checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -258,9 +258,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.103\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a864042229133ada95abf3b54fdc62ef5ccabe9515b64717bcb9a1919e59445d\"\n+checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -269,9 +269,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.22.0\"\n+version = \"1.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d76ce4a75fb488c605c54bf610f221cea8b0dafb53333c1a67e8ee199dcd2ae3\"\n+checksum = \"eab6d665857cc6ca78d6e80303a02cea7a7851e85dfbd77cbdc09bd129f1ef46\"\n dependencies = [\n  \"autocfg\",\n  \"bytes\",\n@@ -284,14 +284,14 @@ dependencies = [\n  \"signal-hook-registry\",\n  \"socket2\",\n  \"tokio-macros\",\n- \"winapi\",\n+ \"windows-sys\",\n ]\n \n [[package]]\n name = \"tokio-macros\"\n-version = \"1.8.0\"\n+version = \"1.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9724f9a975fb987ef7a3cd9be0350edcbe130698af5b8f7a631e23d42d052484\"\n+checksum = \"d266c00fde287f55d3f1c3e96c500c362a2b8c695076ec180f27918820bc6df8\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -300,9 +300,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.5\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6ceab39d59e4c9499d4e5a8ee0e2735b891bb7308ac83dfb4e80cad195c9f6f3\"\n+checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n \n [[package]]\n name = \"wasi\""}, {"sha": "1df35bbbe2f9510d00e7799fb5915775dc183203", "filename": "src/tools/miri/test_dependencies/Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -9,13 +9,15 @@ edition = \"2021\"\n \n [dependencies]\n # all dependencies (and their transitive ones) listed here can be used in `tests/`.\n-tokio = { version = \"1.0\", features = [\"full\"] }\n libc = \"0.2\"\n-page_size = \"0.5\"\n num_cpus = \"1.10.1\"\n \n getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n getrandom = { version = \"0.2\" }\n rand = { version = \"0.8\", features = [\"small_rng\"] }\n \n+[target.'cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))'.dependencies]\n+page_size = \"0.5\"\n+tokio = { version = \"1.0\", features = [\"full\"] }\n+\n [workspace]"}, {"sha": "1e00b0f57ef0948256b485df937f0b00c8ea39e4", "filename": "src/tools/miri/tests/avr.json", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Favr.json", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Favr.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Favr.json?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -0,0 +1,25 @@\n+{\n+  \"arch\": \"avr\",\n+  \"cpu\": \"atmega328p\",\n+  \"data-layout\": \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\",\n+  \"env\": \"\",\n+  \"executables\": true,\n+  \"linker\": \"avr-gcc\",\n+  \"linker-flavor\": \"gcc\",\n+  \"linker-is-gnu\": true,\n+  \"llvm-target\": \"avr-unknown-unknown\",\n+  \"os\": \"unknown\",\n+  \"position-independent-executables\": false,\n+  \"exe-suffix\": \".elf\",\n+  \"eh-frame-header\": false,\n+  \"pre-link-args\": {\n+    \"gcc\": [\"-mmcu=atmega328p\"]\n+  },\n+  \"late-link-args\": {\n+    \"gcc\": [\"-lgcc\"]\n+  },\n+  \"target-c-int-width\": \"16\",\n+  \"target-endian\": \"little\",\n+  \"target-pointer-width\": \"16\",\n+  \"vendor\": \"unknown\"\n+}"}, {"sha": "3540c75b73a12ceacef1485eeb3d4b4d2818bf5d", "filename": "src/tools/miri/tests/extern-so/fail/function_not_in_so.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,12 +1,13 @@\n //@only-target-linux\n //@only-on-host\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n extern \"C\" {\n     fn foo();\n }\n \n fn main() {\n     unsafe {\n-        foo(); //~ ERROR: unsupported operation: can't call foreign function: foo\n+        foo(); //~ ERROR: unsupported operation: can't call foreign function `foo`\n     }\n }"}, {"sha": "e9bc322047195ff89879969e76ba05a95b7a91de", "filename": "src/tools/miri/tests/extern-so/fail/function_not_in_so.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: foo\n+error: unsupported operation: can't call foreign function `foo` on $OS\n   --> $DIR/function_not_in_so.rs:LL:CC\n    |\n LL |         foo();\n-   |         ^^^^^ can't call foreign function: foo\n+   |         ^^^^^ can't call foreign function `foo` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "624ad1bda582f21f00e0330287eb744ece22711f", "filename": "src/tools/miri/tests/fail/alloc/no_global_allocator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,3 +1,4 @@\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n // Make sure we pretend the allocation symbols don't exist when there is no allocator\n \n #![feature(lang_items, start)]\n@@ -10,7 +11,7 @@ extern \"Rust\" {\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     unsafe {\n-        __rust_alloc(1, 1); //~ERROR: unsupported operation: can't call foreign function: __rust_alloc\n+        __rust_alloc(1, 1); //~ERROR: unsupported operation: can't call foreign function `__rust_alloc`\n     }\n \n     0"}, {"sha": "fe6a22fadc9e2ea85f1f3ce058ae340fb90bee3d", "filename": "src/tools/miri/tests/fail/alloc/no_global_allocator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: __rust_alloc\n+error: unsupported operation: can't call foreign function `__rust_alloc` on $OS\n   --> $DIR/no_global_allocator.rs:LL:CC\n    |\n LL |         __rust_alloc(1, 1);\n-   |         ^^^^^^^^^^^^^^^^^^ can't call foreign function: __rust_alloc\n+   |         ^^^^^^^^^^^^^^^^^^ can't call foreign function `__rust_alloc` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "44f032fbabe0f57f548727b9c503ef9c95cfa912", "filename": "src/tools/miri/tests/fail/unsupported_foreign_function.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,9 +1,11 @@\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n+\n fn main() {\n     extern \"Rust\" {\n         fn foo();\n     }\n \n     unsafe {\n-        foo(); //~ ERROR: unsupported operation: can't call foreign function: foo\n+        foo(); //~ ERROR: unsupported operation: can't call foreign function `foo`\n     }\n }"}, {"sha": "519f6d182d7d8b3d63fe2748b6a24fbc31287a2d", "filename": "src/tools/miri/tests/fail/unsupported_foreign_function.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_foreign_function.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: can't call foreign function: foo\n+error: unsupported operation: can't call foreign function `foo` on $OS\n   --> $DIR/unsupported_foreign_function.rs:LL:CC\n    |\n LL |         foo();\n-   |         ^^^^^ can't call foreign function: foo\n+   |         ^^^^^ can't call foreign function `foo` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:"}, {"sha": "6ef842c9ccb649222c65535ac228725b937c3d01", "filename": "src/tools/miri/tests/fail/unsupported_incomplete_function.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,10 +1,11 @@\n //! `signal()` is special on Linux and macOS that it's only supported within libstd.\n //! The implementation is not complete enough to permit user code to call it.\n //@ignore-target-windows: No libc on Windows\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n fn main() {\n     unsafe {\n         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n-        //~^ ERROR: unsupported operation: can't call foreign function: signal\n+        //~^ ERROR: unsupported operation: can't call foreign function `signal`\n     }\n }", "previous_filename": "src/tools/miri/tests/fail/unsupported_signal.rs"}, {"sha": "ec2bba61172895c0a5277c4cd475051b67b1e95d", "filename": "src/tools/miri/tests/fail/unsupported_incomplete_function.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funsupported_incomplete_function.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,12 +1,12 @@\n-error: unsupported operation: can't call foreign function: signal\n-  --> $DIR/unsupported_signal.rs:LL:CC\n+error: unsupported operation: can't call foreign function `signal` on $OS\n+  --> $DIR/unsupported_incomplete_function.rs:LL:CC\n    |\n LL |         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function: signal\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function `signal` on $OS\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unsupported_signal.rs:LL:CC\n+   = note: inside `main` at $DIR/unsupported_incomplete_function.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n ", "previous_filename": "src/tools/miri/tests/fail/unsupported_signal.stderr"}, {"sha": "b8301c507724cb7909f089f0529a114ce6e65c04", "filename": "src/tools/miri/tests/panic/unsupported_foreign_function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,4 +1,5 @@\n //@compile-flags: -Zmiri-panic-on-unsupported\n+//@normalize-stderr-test: \"OS `.*`\" -> \"$$OS\"\n \n fn main() {\n     extern \"Rust\" {"}, {"sha": "a49dbdae58a6fd873c45218d447f428a23a9b08d", "filename": "src/tools/miri/tests/panic/unsupported_foreign_function.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Funsupported_foreign_function.stderr?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function: foo', $DIR/unsupported_foreign_function.rs:LL:CC\n+thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function `foo` on $OS', $DIR/unsupported_foreign_function.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "c1991e8d2c80800ef354d7ccc5554928349450be", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -688,7 +688,7 @@ impl Rewrite for ast::Ty {\n \n                 rewrite_unary_prefix(context, prefix, &*mt.ty, shape)\n             }\n-            ast::TyKind::Rptr(ref lifetime, ref mt) => {\n+            ast::TyKind::Ref(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);\n                 let mut_len = mut_str.len();\n                 let mut result = String::with_capacity(128);\n@@ -1059,7 +1059,7 @@ pub(crate) fn can_be_overflowed_type(\n ) -> bool {\n     match ty.kind {\n         ast::TyKind::Tup(..) => context.use_block_indent() && len == 1,\n-        ast::TyKind::Rptr(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n+        ast::TyKind::Ref(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n             can_be_overflowed_type(context, &*mutty.ty, len)\n         }\n         _ => false,"}, {"sha": "0da9fcddad8d7f92de0a12eb00de884ec9deb623", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -496,7 +496,6 @@ infra-ci = [\n rustdoc = [\n     \"@jsha\",\n     \"@GuillaumeGomez\",\n-    \"@CraftSpider\",\n     \"@notriddle\",\n ]\n docs = ["}, {"sha": "f324a4676c8e99d5f338eaa0c11020db0f4b5e0b", "filename": "x.ps1", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/x.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff7e71a087fcd799d3e59bcd63e3732d351d3/x.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.ps1?ref=e37ff7e71a087fcd799d3e59bcd63e3732d351d3", "patch": "@@ -14,6 +14,12 @@ function Get-Application($app) {\n     return Get-Command $app -ErrorAction SilentlyContinue -CommandType Application\n }\n \n+function Invoke-Application($application, $arguments) {\n+    $process = Start-Process -NoNewWindow -PassThru $application $arguments\n+    $process.WaitForExit()\n+    Exit $process.ExitCode\n+}\n+\n foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n     # NOTE: this only tests that the command exists in PATH, not that it's actually\n     # executable. The latter is not possible in a portable way, see\n@@ -23,16 +29,14 @@ foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n             # Use python3, not python2\n             $xpy_args = @(\"-3\") + $xpy_args\n         }\n-        $process = Start-Process -NoNewWindow -Wait -PassThru $python $xpy_args\n-        Exit $process.ExitCode\n+        Invoke-Application $python $xpy_args\n     }\n }\n \n $found = (Get-Application \"python*\" | Where-Object {$_.name -match '^python[2-3]\\.[0-9]+(\\.exe)?$'})\n if (($null -ne $found) -and ($found.Length -ge 1)) {\n     $python = $found[0]\n-    $process = Start-Process -NoNewWindow -Wait -PassThru $python $xpy_args\n-    Exit $process.ExitCode\n+    Invoke-Application $python $xpy_args\n }\n \n Write-Error \"${PSCommandPath}: error: did not find python installed\""}]}