{"sha": "3c25baa540be6186bba380e4352ef5f676deb6d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjViYWE1NDBiZTYxODZiYmEzODBlNDM1MmVmNWY2NzZkZWI2ZDY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-01T10:33:13Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-01T11:09:06Z"}, "message": "std::rand: share the benchmark counter among the whole module tree.", "tree": {"sha": "e4d9bd297224c012e68f87663ab02e25fcad96ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d9bd297224c012e68f87663ab02e25fcad96ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c25baa540be6186bba380e4352ef5f676deb6d6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c25baa540be6186bba380e4352ef5f676deb6d6", "html_url": "https://github.com/rust-lang/rust/commit/3c25baa540be6186bba380e4352ef5f676deb6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c25baa540be6186bba380e4352ef5f676deb6d6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd50fb39b5ec3a2b7d77684be861dae064ead3f7", "html_url": "https://github.com/rust-lang/rust/commit/cd50fb39b5ec3a2b7d77684be861dae064ead3f7"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "735b083df75f906f9cf204090cc5da4a892034c4", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=3c25baa540be6186bba380e4352ef5f676deb6d6", "patch": "@@ -182,24 +182,23 @@ mod bench {\n     use super::*;\n     use mem::size_of;\n     use rand::distributions::IndependentSample;\n-    use rand::StdRng;\n+    use rand::{StdRng, RAND_BENCH_N};\n     use extra::test::BenchHarness;\n     use iter::range;\n     use option::{Some, None};\n \n-    static N: u64 = 100;\n \n     #[bench]\n     fn bench_gamma_large_shape(bh: &mut BenchHarness) {\n         let gamma = Gamma::new(10., 1.0);\n         let mut rng = StdRng::new();\n \n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n         }\n-        bh.bytes = size_of::<f64>() as u64 * N;\n+        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n@@ -208,10 +207,10 @@ mod bench {\n         let mut rng = StdRng::new();\n \n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n         }\n-        bh.bytes = size_of::<f64>() as u64 * N;\n+        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "c832438647017ce671978745b3ae77f1844a17c8", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=3c25baa540be6186bba380e4352ef5f676deb6d6", "patch": "@@ -556,36 +556,34 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use rand::*;\n+    use rand::{XorShiftRng, RAND_BENCH_N};\n     use super::*;\n     use iter::range;\n     use option::{Some, None};\n     use mem::size_of;\n \n-    static N: u64 = 100;\n-\n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         let mut normal = Normal::new(-2.71828, 3.14159);\n \n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 normal.sample(&mut rng);\n             }\n         }\n-        bh.bytes = size_of::<f64>() as u64 * N;\n+        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         let mut exp = Exp::new(2.71828 * 3.14159);\n \n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 exp.sample(&mut rng);\n             }\n         }\n-        bh.bytes = size_of::<f64>() as u64 * N;\n+        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "e320898175180b32de003fd1e87e1c6e237daefd", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25baa540be6186bba380e4352ef5f676deb6d6/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=3c25baa540be6186bba380e4352ef5f676deb6d6", "patch": "@@ -833,58 +833,58 @@ mod test {\n     }\n }\n \n+static RAND_BENCH_N: u64 = 100;\n+\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use rand::*;\n+    use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n     use mem::size_of;\n     use iter::range;\n     use option::{Some, None};\n \n-    static N: u64 = 100;\n-\n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         }\n-        bh.bytes = size_of::<uint>() as u64 * N;\n+        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_isaac(bh: &mut BenchHarness) {\n         let mut rng = IsaacRng::new();\n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         }\n-        bh.bytes = size_of::<uint>() as u64 * N;\n+        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_isaac64(bh: &mut BenchHarness) {\n         let mut rng = Isaac64Rng::new();\n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         }\n-        bh.bytes = size_of::<uint>() as u64 * N;\n+        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_std(bh: &mut BenchHarness) {\n         let mut rng = StdRng::new();\n         do bh.iter {\n-            for _ in range(0, N) {\n+            for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         }\n-        bh.bytes = size_of::<uint>() as u64 * N;\n+        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]"}]}