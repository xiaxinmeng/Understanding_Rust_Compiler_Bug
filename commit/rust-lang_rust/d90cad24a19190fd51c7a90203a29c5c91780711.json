{"sha": "d90cad24a19190fd51c7a90203a29c5c91780711", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MGNhZDI0YTE5MTkwZmQ1MWM3YTkwMjAzYTI5YzVjOTE3ODA3MTE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-08T10:57:25Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-08T11:05:11Z"}, "message": "Fix c_void false positive caused by libc refactoring\n\nThe path of `libc::c_void` has changes in https://github.com/rust-lang/libc/commit/5c1a6b8a6d558882927a0816d91c01b9c2a88018\nThe DefId path is now always platform specific like\n`libc::windows::c_void`. This fixes our c_void detection to only check\nthe first and last elements.", "tree": {"sha": "0caafad99aa13eedf277f768bebef320d6ff5e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0caafad99aa13eedf277f768bebef320d6ff5e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d90cad24a19190fd51c7a90203a29c5c91780711", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwLpWcACgkQtvoGpuDi\nZlsDDQ//c+JVOSj1h8zX18Bno+f91AH3O/hR88coR9/JP9IoVPrWY4WB8Jf68jdW\ndz3ybDkubCcFIlQSWmSIslDBIPHQ858UdC09b+o69lZcjsUBx3a9eH1mZtuXewBh\nenrF5ZkGRRMv4dVcmtni3ihthHOi2EdGuN/WMamEtYRxLZTBeFmJBUFKUsdG6cz/\nnYA8cSMB93RuOHWNDXW18TFkmYrI8tIHY+iYyzptq6OjadrkH8fr68fbUzag11tN\nRCjet/maz5IxrIiH7Jy96oAPPQD4Xjus+rVsyFwUtWMBNfh25MV9WBFxNbI0xAtN\nHHrms0NGjk6FVVhCszTae+Fkkh/MeOr0iHaq1LyMgZ5MrjHdnAR8iB9miHznjCY6\n4LV4NEceKlVwiJL6SHgtGwzR0iSJ7jWm/70phMEsSkkqkTol4lJfXr3XvYcOG7hO\n83XqEPKQOvhlAII4SwEr4BSaDDVMDlgQlLLSyE7FuHUOTGhCo32u0GoDnUGU/RQh\ntYKpTXRT3Lgtuc4x0mirdUqqsIOdgd6Xws5sC/0Fm8xA+UbRVTpn/fxxc3ZYZ03Q\niAdLesMjdUF18ILzvqQvsFWGxcUcUyJDjpEmDvZHXloDmdXKo+BZiM5e0MjSC0s1\nrS+yQwXJp4cLQGCJJUZUNGvCKLdbaqZ2l4NWwRAKVo5uM0jWTQ0=\n=Ok8/\n-----END PGP SIGNATURE-----", "payload": "tree 0caafad99aa13eedf277f768bebef320d6ff5e17\nparent f13d23de41ef41da424dbd514f3012cd0e5dcd85\nauthor Philipp Hansch <dev@phansch.net> 1544266645 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1544267111 +0100\n\nFix c_void false positive caused by libc refactoring\n\nThe path of `libc::c_void` has changes in https://github.com/rust-lang/libc/commit/5c1a6b8a6d558882927a0816d91c01b9c2a88018\nThe DefId path is now always platform specific like\n`libc::windows::c_void`. This fixes our c_void detection to only check\nthe first and last elements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d90cad24a19190fd51c7a90203a29c5c91780711", "html_url": "https://github.com/rust-lang/rust/commit/d90cad24a19190fd51c7a90203a29c5c91780711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d90cad24a19190fd51c7a90203a29c5c91780711/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13d23de41ef41da424dbd514f3012cd0e5dcd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13d23de41ef41da424dbd514f3012cd0e5dcd85", "html_url": "https://github.com/rust-lang/rust/commit/f13d23de41ef41da424dbd514f3012cd0e5dcd85"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "f9a0d6114290f91943038f30b6e83b1353424746", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d90cad24a19190fd51c7a90203a29c5c91780711", "patch": "@@ -28,8 +28,9 @@ use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n-    match_def_path, match_path, match_type, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n+    match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n     snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n+    AbsolutePathBuffer\n };\n use if_chain::if_chain;\n use std::borrow::Cow;\n@@ -1023,6 +1024,21 @@ impl LintPass for CastPass {\n     }\n }\n \n+// Check if the given type is either `core::ffi::c_void` or\n+// one of the platform specific `libc::<platform>::c_void` of libc.\n+fn is_c_void(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>) -> bool {\n+    if let ty::Adt(adt, _) = ty.sty {\n+        let mut apb = AbsolutePathBuffer { names: vec![] };\n+        tcx.push_item_path(&mut apb, adt.did, false);\n+\n+        if apb.names.is_empty() { return false }\n+        if apb.names[0] == \"libc\" || apb.names[0] == \"core\" && *apb.names.last().unwrap() == \"c_void\" {\n+            return true\n+        }\n+    }\n+    false\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n@@ -1114,10 +1130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                 if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);\n                 if from_align < to_align;\n                 // with c_void, we inherently need to trust the user\n-                if ! (\n-                    match_type(cx, from_ptr_ty.ty, &paths::C_VOID)\n-                    || match_type(cx, from_ptr_ty.ty, &paths::C_VOID_LIBC)\n-                );\n+                if !is_c_void(cx.tcx, from_ptr_ty.ty);\n                 then {\n                     span_lint(\n                         cx,"}, {"sha": "68357b08d6ca26b3cb53c1c6ce3c4dccea9b39a2", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d90cad24a19190fd51c7a90203a29c5c91780711", "patch": "@@ -29,6 +29,7 @@ use crate::syntax::attr;\n use crate::syntax::errors::DiagnosticBuilder;\n use crate::syntax::source_map::{Span, DUMMY_SP};\n use crate::syntax::symbol::{keywords, Symbol};\n+use crate::syntax::symbol;\n use if_chain::if_chain;\n use matches::matches;\n use std::borrow::Cow;\n@@ -74,6 +75,25 @@ pub fn in_macro(span: Span) -> bool {\n     span.ctxt().outer().expn_info().is_some()\n }\n \n+/// Used to store the absolute path to a type.\n+///\n+/// See `match_def_path` for usage.\n+#[derive(Debug)]\n+pub struct AbsolutePathBuffer {\n+    pub names: Vec<symbol::LocalInternedString>,\n+}\n+\n+impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n+    fn root_mode(&self) -> &ty::item_path::RootMode {\n+        const ABSOLUTE: &ty::item_path::RootMode = &ty::item_path::RootMode::Absolute;\n+        ABSOLUTE\n+    }\n+\n+    fn push(&mut self, text: &str) {\n+        self.names.push(symbol::Symbol::intern(text).as_str());\n+    }\n+}\n+\n /// Check if a `DefId`'s path matches the given absolute type path usage.\n ///\n /// # Examples\n@@ -83,24 +103,6 @@ pub fn in_macro(span: Span) -> bool {\n ///\n /// See also the `paths` module.\n pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) -> bool {\n-    use crate::syntax::symbol;\n-\n-    #[derive(Debug)]\n-    struct AbsolutePathBuffer {\n-        names: Vec<symbol::LocalInternedString>,\n-    }\n-\n-    impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n-        fn root_mode(&self) -> &ty::item_path::RootMode {\n-            const ABSOLUTE: &ty::item_path::RootMode = &ty::item_path::RootMode::Absolute;\n-            ABSOLUTE\n-        }\n-\n-        fn push(&mut self, text: &str) {\n-            self.names.push(symbol::Symbol::intern(text).as_str());\n-        }\n-    }\n-\n     let mut apb = AbsolutePathBuffer { names: vec![] };\n \n     tcx.push_item_path(&mut apb, def_id, false);"}, {"sha": "0779d77936f52f4dbd7cf8c164d54244fc54e036", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90cad24a19190fd51c7a90203a29c5c91780711/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d90cad24a19190fd51c7a90203a29c5c91780711", "patch": "@@ -27,8 +27,6 @@ pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_NEW: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n-pub const C_VOID: [&str; 3] = [\"core\", \"ffi\", \"c_void\"];\n-pub const C_VOID_LIBC: [&str; 2] = [\"libc\", \"c_void\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];"}]}