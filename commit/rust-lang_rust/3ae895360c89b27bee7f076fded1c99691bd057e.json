{"sha": "3ae895360c89b27bee7f076fded1c99691bd057e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTg5NTM2MGM4OWIyN2JlZTdmMDc2ZmRlZDFjOTk2OTFiZDA1N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-28T02:16:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-28T02:16:05Z"}, "message": "auto merge of #9557 : blake2-ppc/rust/vec-lifetime-token, r=thestinger\n\nstd::vec: Use a valid value as lifetime dummy in iterator\r\n\r\nThe current implementation uses `&v[0]` for the lifetime struct field,\r\nbut that is a dangling pointer for iterators derived from zero-length\r\nslices.\r\n\r\nExample:\r\n\r\n    let v: [int, ..0] = [];  println!(\"{:?}\", v.iter())\r\n\r\n    std::vec::VecIterator<,int>{ptr: (0x7f3768626100 as *()), end: (0x7f3768626100 as *()), lifetime: &139875951207128}\r\n\r\nTo replace this parameter, use a field of type `Option<&'self ()>`\r\nthat is simply initialized with `None`, but still allows the iterator to\r\nhave a lifetime parameter.", "tree": {"sha": "442c045cba4525660eb30caa27416bf8e8a6cbc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442c045cba4525660eb30caa27416bf8e8a6cbc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae895360c89b27bee7f076fded1c99691bd057e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae895360c89b27bee7f076fded1c99691bd057e", "html_url": "https://github.com/rust-lang/rust/commit/3ae895360c89b27bee7f076fded1c99691bd057e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae895360c89b27bee7f076fded1c99691bd057e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6828d2e01860593a687f36397eb38dc338f092a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6828d2e01860593a687f36397eb38dc338f092a9", "html_url": "https://github.com/rust-lang/rust/commit/6828d2e01860593a687f36397eb38dc338f092a9"}, {"sha": "c0e1c09783422870e4d6e5862459d45036bb24d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e1c09783422870e4d6e5862459d45036bb24d7", "html_url": "https://github.com/rust-lang/rust/commit/c0e1c09783422870e4d6e5862459d45036bb24d7"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cecad5824b5087ace30aac1743dbe90909a20916", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ae895360c89b27bee7f076fded1c99691bd057e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae895360c89b27bee7f076fded1c99691bd057e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3ae895360c89b27bee7f076fded1c99691bd057e", "patch": "@@ -932,11 +932,11 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n             if sys::size_of::<T>() == 0 {\n                 VecIterator{ptr: p,\n                             end: (p as uint + self.len()) as *T,\n-                            lifetime: cast::transmute(p)}\n+                            lifetime: None}\n             } else {\n                 VecIterator{ptr: p,\n                             end: p.offset(self.len() as int),\n-                            lifetime: cast::transmute(p)}\n+                            lifetime: None}\n             }\n         }\n     }\n@@ -1940,11 +1940,11 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n             if sys::size_of::<T>() == 0 {\n                 VecMutIterator{ptr: p,\n                                end: (p as uint + self.len()) as *mut T,\n-                               lifetime: cast::transmute(p)}\n+                               lifetime: None}\n             } else {\n                 VecMutIterator{ptr: p,\n                                end: p.offset(self.len() as int),\n-                               lifetime: cast::transmute(p)}\n+                               lifetime: None}\n             }\n         }\n     }\n@@ -2389,7 +2389,7 @@ impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n pub struct VecIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n-    priv lifetime: &'self T // FIXME: #5922\n+    priv lifetime: Option<&'self ()> // FIXME: #5922\n }\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n@@ -2407,7 +2407,7 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n pub struct VecMutIterator<'self, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n-    priv lifetime: &'self mut T // FIXME: #5922\n+    priv lifetime: Option<&'self mut ()> // FIXME: #5922\n }\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}"}]}