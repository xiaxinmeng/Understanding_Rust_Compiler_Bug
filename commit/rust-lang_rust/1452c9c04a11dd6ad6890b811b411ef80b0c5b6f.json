{"sha": "1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTJjOWMwNGExMWRkNmFkNjg5MGI4MTFiNDExZWY4MGIwYzViNmY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-23T04:54:48Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-24T04:48:22Z"}, "message": "Allow attributes on match arms\n\nRFC: 0008-match-arm-attributes", "tree": {"sha": "654ab7e9b42e77ad89bbe85a26b9fafe4e79df14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654ab7e9b42e77ad89bbe85a26b9fafe4e79df14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "html_url": "https://github.com/rust-lang/rust/commit/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d05e7f9cdd76887de75f46b5e47d2685bec6520", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d05e7f9cdd76887de75f46b5e47d2685bec6520", "html_url": "https://github.com/rust-lang/rust/commit/3d05e7f9cdd76887de75f46b5e47d2685bec6520"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "8dcc97c936cbbbb53cc5d08ab226bfb7251b7640", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -36,6 +36,9 @@ impl<'a> fold::Folder for Context<'a> {\n     fn fold_item_underscore(&mut self, item: &ast::Item_) -> ast::Item_ {\n         fold_item_underscore(self, item)\n     }\n+    fn fold_expr(&mut self, expr: @ast::Expr) -> @ast::Expr {\n+        fold_expr(self, expr)\n+    }\n }\n \n pub fn strip_items(krate: ast::Crate,\n@@ -189,6 +192,24 @@ fn fold_block(cx: &mut Context, b: ast::P<ast::Block>) -> ast::P<ast::Block> {\n     })\n }\n \n+fn fold_expr(cx: &mut Context, expr: @ast::Expr) -> @ast::Expr {\n+    let expr = match expr.node {\n+        ast::ExprMatch(ref m, ref arms) => {\n+            let arms = arms.iter()\n+                .filter(|a| (cx.in_cfg)(a.attrs.as_slice()))\n+                .map(|a| a.clone())\n+                .collect();\n+            @ast::Expr {\n+                id: expr.id,\n+                span: expr.span.clone(),\n+                node: ast::ExprMatch(m.clone(), arms),\n+            }\n+        }\n+        _ => expr.clone()\n+    };\n+    fold::noop_fold_expr(expr, cx)\n+}\n+\n fn item_in_cfg(cx: &mut Context, item: &ast::Item) -> bool {\n     return (cx.in_cfg)(item.attrs.as_slice());\n }"}, {"sha": "4a93fed8d039b823847e690619a66bb56a44710c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -440,6 +440,7 @@ pub enum Decl_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Arm {\n+    pub attrs: Vec<Attribute>,\n     pub pats: Vec<@Pat>,\n     pub guard: Option<@Expr>,\n     pub body: @Expr,"}, {"sha": "b0dbd8b635ac6f0b26ca830690e8038f18a8dd44", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -726,6 +726,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn arm(&self, _span: Span, pats: Vec<@ast::Pat> , expr: @ast::Expr) -> ast::Arm {\n         ast::Arm {\n+            attrs: vec!(),\n             pats: pats,\n             guard: None,\n             body: expr"}, {"sha": "8a95290acdf29e4c477fa67a097304c42cd363a9", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -110,6 +110,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n \n                         // arm for `_ if $guard => $body`\n                         let arm = ast::Arm {\n+                            attrs: vec!(),\n                             pats: vec!(cx.pat_wild(span)),\n                             guard: Some(guard),\n                             body: body,\n@@ -129,6 +130,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n \n             // arm for `_ => None`\n             let arm = ast::Arm {\n+                attrs: vec!(),\n                 pats: vec!(cx.pat_wild(trait_span)),\n                 guard: None,\n                 body: cx.expr_none(trait_span),"}, {"sha": "9f05db5f807c4f1cd0a0147efc2413f8fdcfcb16", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -119,6 +119,7 @@ pub trait Folder {\n \n     fn fold_arm(&mut self, a: &Arm) -> Arm {\n         Arm {\n+            attrs: a.attrs.iter().map(|x| fold_attribute_(*x, self)).collect(),\n             pats: a.pats.iter().map(|x| self.fold_pat(*x)).collect(),\n             guard: a.guard.map(|x| self.fold_expr(x)),\n             body: self.fold_expr(a.body),"}, {"sha": "f30d756d854f458b42cc24f71f6af47e041a77a9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -2539,6 +2539,7 @@ impl<'a> Parser<'a> {\n         self.commit_expr_expecting(discriminant, token::LBRACE);\n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::RBRACE {\n+            let attrs = self.parse_outer_attributes();\n             let pats = self.parse_pats();\n             let mut guard = None;\n             if self.eat_keyword(keywords::If) {\n@@ -2557,7 +2558,12 @@ impl<'a> Parser<'a> {\n                 self.eat(&token::COMMA);\n             }\n \n-            arms.push(ast::Arm { pats: pats, guard: guard, body: expr });\n+            arms.push(ast::Arm {\n+                attrs: attrs,\n+                pats: pats,\n+                guard: guard,\n+                body: expr\n+            });\n         }\n         let hi = self.span.hi;\n         self.bump();"}, {"sha": "b0130f127a3816fb52338a05835202fad3cf8f92", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -1286,9 +1286,14 @@ impl<'a> State<'a> {\n                 try!(self.bopen());\n                 let len = arms.len();\n                 for (i, arm) in arms.iter().enumerate() {\n-                    try!(space(&mut self.s));\n+                    // I have no idea why this check is necessary, but here it\n+                    // is :(\n+                    if arm.attrs.is_empty() {\n+                        try!(space(&mut self.s));\n+                    }\n                     try!(self.cbox(indent_unit));\n                     try!(self.ibox(0u));\n+                    try!(self.print_outer_attributes(arm.attrs.as_slice()));\n                     let mut first = true;\n                     for p in arm.pats.iter() {\n                         if first {"}, {"sha": "9858b804b7b3a2c1b9583bd408e39ee10c4c081b", "filename": "src/test/run-pass/cfg-match-arm.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1452c9c04a11dd6ad6890b811b411ef80b0c5b6f/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-match-arm.rs?ref=1452c9c04a11dd6ad6890b811b411ef80b0c5b6f", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+fn foo(f: Foo) {\n+    match f {\n+        Bar => {},\n+        #[cfg(not(asdfa))]\n+        Baz => {},\n+        #[cfg(afsd)]\n+        Basdfwe => {}\n+    }\n+}\n+\n+pub fn main() {}"}]}