{"sha": "b8eb1597c9a950a31b06d5625f2793d5237d756c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZWIxNTk3YzlhOTUwYTMxYjA2ZDU2MjVmMjc5M2Q1MjM3ZDc1NmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:17:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:17:12Z"}, "message": "Use Expander for cfg handling in structs", "tree": {"sha": "bf749165501987f30d900b43ade11f6b80a5c7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf749165501987f30d900b43ade11f6b80a5c7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8eb1597c9a950a31b06d5625f2793d5237d756c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8eb1597c9a950a31b06d5625f2793d5237d756c", "html_url": "https://github.com/rust-lang/rust/commit/b8eb1597c9a950a31b06d5625f2793d5237d756c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8eb1597c9a950a31b06d5625f2793d5237d756c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "html_url": "https://github.com/rust-lang/rust/commit/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2619d106dd9bfb0db6f9076a2f01d6df7161eed3", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8eb1597c9a950a31b06d5625f2793d5237d756c/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8eb1597c9a950a31b06d5625f2793d5237d756c/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=b8eb1597c9a950a31b06d5625f2793d5237d756c", "patch": "@@ -4,7 +4,6 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_expand::{\n-    hygiene::Hygiene,\n     name::{AsName, Name},\n     InFile,\n };\n@@ -13,7 +12,7 @@ use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n+    body::Expander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n     type_ref::TypeRef, visibility::RawVisibility, EnumId, HasModule, LocalEnumVariantId,\n     LocalStructFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n };\n@@ -125,8 +124,9 @@ fn lower_enum(\n \n impl VariantData {\n     fn new(db: &dyn DefDatabase, flavor: InFile<ast::StructKind>, module_id: ModuleId) -> Self {\n+        let mut expander = Expander::new(db, flavor.file_id, module_id);\n         let mut trace = Trace::new_for_arena();\n-        match lower_struct(db, &mut trace, &flavor, module_id) {\n+        match lower_struct(db, &mut expander, &mut trace, &flavor) {\n             StructKind::Tuple => VariantData::Tuple(trace.into_arena()),\n             StructKind::Record => VariantData::Record(trace.into_arena()),\n             StructKind::Unit => VariantData::Unit,\n@@ -178,8 +178,9 @@ impl HasChildSource for VariantId {\n                 it.lookup(db).container.module(db),\n             ),\n         };\n+        let mut expander = Expander::new(db, src.file_id, module_id);\n         let mut trace = Trace::new_for_map();\n-        lower_struct(db, &mut trace, &src, module_id);\n+        lower_struct(db, &mut expander, &mut trace, &src);\n         src.with_value(trace.into_map())\n     }\n }\n@@ -193,16 +194,15 @@ pub enum StructKind {\n \n fn lower_struct(\n     db: &dyn DefDatabase,\n+    expander: &mut Expander,\n     trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n-    module_id: ModuleId,\n ) -> StructKind {\n-    let crate_graph = db.crate_graph();\n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-                if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                let attrs = expander.parse_attrs(&fd);\n+                if !expander.check_cfg(&attrs) {\n                     continue;\n                 }\n \n@@ -219,8 +219,8 @@ fn lower_struct(\n         }\n         ast::StructKind::Record(fl) => {\n             for fd in fl.fields() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-                if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                let attrs = expander.parse_attrs(&fd);\n+                if !expander.check_cfg(&attrs) {\n                     continue;\n                 }\n "}]}