{"sha": "a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjZlMDA5NDQ2YzNmMDgxMGIyNmJmOWUzYzkxYWVmYTA4YmQyNDA=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-07-07T04:52:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-09T20:13:49Z"}, "message": "Fix metadata serialization of foreign functions. Properly take the value of foreign functions from other crates to fix #1840.", "tree": {"sha": "4af360268fb2e56d63172f8723801071bb8694a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af360268fb2e56d63172f8723801071bb8694a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "html_url": "https://github.com/rust-lang/rust/commit/a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b50ae348306146e342641238c8e21cf0d545bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b50ae348306146e342641238c8e21cf0d545bb", "html_url": "https://github.com/rust-lang/rust/commit/f3b50ae348306146e342641238c8e21cf0d545bb"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "13829a188d9bc393ba336a7c1da2cb22edae3671", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "patch": "@@ -288,6 +288,7 @@ fn item_to_def_like(item: ebml::doc, did: ast::def_id, cnum: ast::crate_num)\n       'u' { dl_def(ast::def_fn(did, ast::unsafe_fn)) }\n       'f' { dl_def(ast::def_fn(did, ast::impure_fn)) }\n       'p' { dl_def(ast::def_fn(did, ast::pure_fn)) }\n+      'F' { dl_def(ast::def_fn(did, ast::extern_fn)) }\n       'y' { dl_def(ast::def_ty(did)) }\n       't' { dl_def(ast::def_ty(did)) }\n       'm' { dl_def(ast::def_mod(did)) }"}, {"sha": "1e50f1168c7b21181b6c97dc361a8666fa59aac5", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "patch": "@@ -527,7 +527,7 @@ fn purity_fn_family(p: purity) -> char {\n       unsafe_fn { 'u' }\n       pure_fn { 'p' }\n       impure_fn { 'f' }\n-      extern_fn { 'c' }\n+      extern_fn { 'F' }\n     }\n }\n "}, {"sha": "5534140ae721fa28bc4f564d5530a3f32f0a6659", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "patch": "@@ -2392,16 +2392,18 @@ fn lval_static_fn_inner(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n             ccx, node_id_type(bcx, id))));\n     }\n \n-    // FIXME: Need to support extern-ABI functions (#1840)\n-    if fn_id.crate == ast::local_crate {\n-        alt bcx.tcx().def_map.find(id) {\n-          some(ast::def_fn(_, ast::extern_fn)) {\n+    alt ty::get(tpt.ty).struct {\n+      ty::ty_fn(fn_ty) {\n+        alt fn_ty.purity {\n+          ast::extern_fn {\n             // Extern functions are just opaque pointers\n             let val = PointerCast(bcx, val, T_ptr(T_i8()));\n             ret lval_no_env(bcx, val, owned_imm);\n           }\n-          _ { }\n+          _ { /* fall through */ }\n         }\n+      }\n+      _ { /* fall through */ }\n     }\n \n     ret {bcx: bcx, val: val, kind: owned, env: null_env};"}, {"sha": "55d08a0d0f47dcae22f3470092fb10bb21c5fff9", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "patch": "@@ -0,0 +1,22 @@\n+#[link(name = \"externcallback\",\n+       vers = \"0.1\")];\n+\n+#[crate_type = \"lib\"];\n+\n+extern mod rustrt {\n+    fn rust_dbg_call(cb: *u8,\n+                     data: libc::uintptr_t) -> libc::uintptr_t;\n+}\n+\n+fn fact(n: uint) -> uint {\n+    #debug(\"n = %?\", n);\n+    rustrt::rust_dbg_call(cb, n)\n+}\n+\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1u {\n+        data\n+    } else {\n+        fact(data - 1u) * data\n+    }\n+}"}, {"sha": "f3338475912ec9f9c3423a405d34fbb41dfa8d39", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f6e009446c3f0810b26bf9e3c91aefa08bd240/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=a7f6e009446c3f0810b26bf9e3c91aefa08bd240", "patch": "@@ -0,0 +1,14 @@\n+//aux-build:extern-crosscrate-source.rs\n+\n+use externcallback(vers = \"0.1\");\n+\n+fn fact(n: uint) -> uint {\n+    #debug(\"n = %?\", n);\n+    externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n+}\n+\n+fn main() {\n+    let result = fact(10u);\n+    #debug(\"result = %?\", result);\n+    assert result == 3628800u;\n+}"}]}