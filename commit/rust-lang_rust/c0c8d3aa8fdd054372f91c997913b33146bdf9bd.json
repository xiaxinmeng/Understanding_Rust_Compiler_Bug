{"sha": "c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzhkM2FhOGZkZDA1NDM3MmY5MWM5OTc5MTNiMzMxNDZiZGY5YmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T23:11:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T23:23:36Z"}, "message": "core: Demode int/uint mods", "tree": {"sha": "92ce54582b167358b3f09a0bc3861c643201c1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ce54582b167358b3f09a0bc3861c643201c1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "html_url": "https://github.com/rust-lang/rust/commit/c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2ce036ccd53d8c19689d86cf8b3bd5cf37f40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2ce036ccd53d8c19689d86cf8b3bd5cf37f40f", "html_url": "https://github.com/rust-lang/rust/commit/ee2ce036ccd53d8c19689d86cf8b3bd5cf37f40f"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "ac4aceeaa95affb8d9be8438c848542e9c60adff", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import T = inst::T;\n import cmp::{Eq, Ord};\n import num::from_int;\n@@ -21,8 +25,8 @@ const bytes : uint = (inst::bits / 8);\n const min_value: T = (-1 as T) << (bits - 1);\n const max_value: T = min_value - 1 as T;\n \n-pure fn min(&&x: T, &&y: T) -> T { if x < y { x } else { y } }\n-pure fn max(&&x: T, &&y: T) -> T { if x > y { x } else { y } }\n+pure fn min(x: &T, y: &T) -> T { if *x < *y { *x } else { *y } }\n+pure fn max(x: &T, y: &T) -> T { if *x > *y { *x } else { *y } }\n \n pure fn add(x: &T, y: &T) -> T { *x + *y }\n pure fn sub(x: &T, y: &T) -> T { *x - *y }\n@@ -155,7 +159,7 @@ fn parse_buf(buf: ~[u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: ~str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n+fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n /// Convert to a string in a given base\n fn to_str(n: T, radix: uint) -> ~str {\n@@ -235,7 +239,7 @@ fn test_to_str() {\n \n #[test]\n fn test_interfaces() {\n-    fn test<U:num::Num>(ten: U) {\n+    fn test<U:num::Num>(+ten: U) {\n         assert (ten.to_int() == 10);\n \n         let two: U = from_int(2);"}, {"sha": "1fd9b79ad9d37688071ce0f3fc6454ffa10f9037", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -284,7 +284,7 @@ type ByteBuf = {buf: &[const u8], mut pos: uint};\n \n impl ByteBuf: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n-        let count = uint::min(len, self.buf.len() - self.pos);\n+        let count = uint::min(&len, &(self.buf.len() - self.pos));\n \n         vec::u8::memcpy(buf,\n                         vec::const_view(self.buf, self.pos, self.buf.len()),"}, {"sha": "32665db79668d6015d10944d77645b362deb3501", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -676,7 +676,7 @@ pure fn eq_slice(a: &str, b: &str) -> bool {\n     let a_len = a.len();\n     let b_len = b.len();\n     if a_len != b_len { return false; }\n-    let mut end = uint::min(a_len, b_len);\n+    let mut end = uint::min(&a_len, &b_len);\n \n     let mut i = 0u;\n     while i < end {"}, {"sha": "f95848f249602bdf46a4c6b46c00ff8e9a22c4b7", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import T = inst::T;\n import cmp::{Eq, Ord};\n \n@@ -20,8 +24,8 @@ const bytes : uint = (inst::bits / 8);\n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n \n-pure fn min(&&x: T, &&y: T) -> T { if x < y { x } else { y } }\n-pure fn max(&&x: T, &&y: T) -> T { if x > y { x } else { y } }\n+pure fn min(x: &T, y: &T) -> T { if *x < *y { *x } else { *y } }\n+pure fn max(x: &T, y: &T) -> T { if *x > *y { *x } else { *y } }\n \n pure fn add(x: &T, y: &T) -> T { *x + *y }\n pure fn sub(x: &T, y: &T) -> T { *x - *y }\n@@ -138,10 +142,10 @@ fn parse_buf(buf: &[const u8], radix: uint) -> Option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: ~str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n+fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n /// Parse a string as an unsigned integer.\n-fn from_str_radix(buf: ~str, radix: u64) -> Option<u64> {\n+fn from_str_radix(buf: &str, radix: u64) -> Option<u64> {\n     if str::len(buf) == 0u { return None; }\n     let mut i = str::len(buf) - 1u;\n     let mut power = 1u64, n = 0u64;"}, {"sha": "ee82971c70e72a05334dc49553efaa9c4a4ed91d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -1430,7 +1430,7 @@ impl<T: Eq> @[T]: Eq {\n \n pure fn lt<T: Ord>(a: &[T], b: &[T]) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(a_len, b_len);\n+    let mut end = uint::min(&a_len, &b_len);\n \n     let mut i = 0;\n     while i < end {\n@@ -1821,7 +1821,7 @@ mod u8 {\n     pure fn cmp(a: &~[u8], b: &~[u8]) -> int {\n         let a_len = len(*a);\n         let b_len = len(*b);\n-        let n = uint::min(a_len, b_len) as libc::size_t;\n+        let n = uint::min(&a_len, &b_len) as libc::size_t;\n         let r = unsafe {\n             libc::memcmp(unsafe::to_ptr(*a) as *libc::c_void,\n                          unsafe::to_ptr(*b) as *libc::c_void, n) as int"}, {"sha": "162e5f2c0717629865767c46fb6f2912cdcb2318", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -135,7 +135,7 @@ impl &Arena {\n     fn alloc_pod_grow(n_bytes: uint, align: uint) -> *u8 {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.pod_head.data);\n-        let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n+        let new_min_chunk_size = uint::max(&n_bytes, &chunk_size);\n         self.chunks = @cons(copy self.pod_head, self.chunks);\n         self.pod_head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), true);\n@@ -177,7 +177,7 @@ impl &Arena {\n     fn alloc_nonpod_grow(n_bytes: uint, align: uint) -> (*u8, *u8) {\n         // Allocate a new chunk.\n         let chunk_size = at_vec::capacity(self.head.data);\n-        let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n+        let new_min_chunk_size = uint::max(&n_bytes, &chunk_size);\n         self.chunks = @cons(copy self.head, self.chunks);\n         self.head =\n             chunk(uint::next_power_of_two(new_min_chunk_size + 1u), false);"}, {"sha": "1cc5fa680d2ab3e9ca3ddc2994f31290a40dff73", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -772,7 +772,7 @@ impl tcp_socket_buf: io::Reader {\n             }\n         }\n \n-        let count = uint::min(len, self.data.buf.len());\n+        let count = uint::min(&len, &self.data.buf.len());\n \n         let mut data = ~[];\n         self.data.buf <-> data;"}, {"sha": "ab5062148e020b24b815e97c7a657782849985e5", "filename": "src/libstd/par.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -30,15 +30,15 @@ fn map_slices<A: copy send, B: copy send>(\n         ~[f()(0u, xs)]\n     }\n     else {\n-        let num_tasks = uint::min(max_tasks, len / min_granularity);\n+        let num_tasks = uint::min(&max_tasks, &(len / min_granularity));\n \n         let items_per_task = len / num_tasks;\n \n         let mut futures = ~[];\n         let mut base = 0u;\n         log(info, ~\"spawning tasks\");\n         while base < len {\n-            let end = uint::min(len, base + items_per_task);\n+            let end = uint::min(&len, &(base + items_per_task));\n             // FIXME: why is the ::<A, ()> annotation required here? (#2617)\n             do vec::as_buf::<A, ()>(xs) |p, _len| {\n                 let f = f();"}, {"sha": "32a97bac5086d16e700109edbf89f3ab71fce272", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -1002,7 +1002,7 @@ mod node {\n                      right   : right,\n              char_len: char_len(left) + char_len(right),\n                      byte_len: byte_len(left) + byte_len(right),\n-             height: uint::max(height(left), height(right)) + 1u\n+             height: uint::max(&height(left), &height(right)) + 1u\n                     })\n     }\n "}, {"sha": "3481b6c93c23bf9e499008d330624038b04f5c82", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -563,8 +563,8 @@ fn compute_id_range(visit_ids_fn: fn(fn@(node_id))) -> id_range {\n     let min = @mut int::max_value;\n     let max = @mut int::min_value;\n     do visit_ids_fn |id| {\n-        *min = int::min(*min, id);\n-        *max = int::max(*max, id + 1);\n+        *min = int::min(min, &id);\n+        *max = int::max(max, &(id + 1));\n     }\n     return {min:*min, max:*max};\n }"}, {"sha": "b4c9eb6f69e7c6ea5bd5c36e5bd7fed29a64a6f5", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -182,7 +182,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n                                         s: ~str, col: uint) unsafe {\n     let mut s1;\n     let len = str::len(s);\n-    if all_whitespace(s, 0u, uint::min(len, col)) {\n+    if all_whitespace(s, 0u, uint::min(&len, &col)) {\n         if col < len {\n             s1 = str::slice(s, col, len);\n         } else { s1 = ~\"\"; }"}, {"sha": "286ca505714adbbae79ab065a2ab9ff79102ef99", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -128,7 +128,7 @@ fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n     assert len1 > 0u;\n     assert len2 > 0u;\n \n-    let max_common_path = uint::min(len1, len2) - 1u;\n+    let max_common_path = uint::min(&len1, &len2) - 1u;\n     let mut start_idx = 0u;\n     while start_idx < max_common_path\n         && split1[start_idx] == split2[start_idx] {"}, {"sha": "7e56a8caeddf21bdf807b03c87914d52cfe1f70b", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -81,7 +81,7 @@ Options:\n fn describe_warnings() {\n     let lint_dict = lint::get_lint_dict();\n     let mut max_key = 0u;\n-    for lint_dict.each_key |k| { max_key = uint::max(k.len(), max_key); }\n+    for lint_dict.each_key |k| { max_key = uint::max(&k.len(), &max_key); }\n     fn padded(max: uint, s: ~str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }"}, {"sha": "2c410b886d723292e66261c1c17eda14e06b19d6", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -82,7 +82,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n             3 /* double */ => 8u,\n             10 /* struct */ => {\n               do vec::foldl(0u, struct_tys(ty)) |a, t| {\n-                    uint::max(a, ty_align(t))\n+                    uint::max(&a, &ty_align(t))\n                 }\n             }\n             11 /* array */ => {"}, {"sha": "5e8b26443632a9327bd6a169df8b3c14fd985c0c", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8d3aa8fdd054372f91c997913b33146bdf9bd/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=c0c8d3aa8fdd054372f91c997913b33146bdf9bd", "patch": "@@ -1856,9 +1856,9 @@ fn type_size(cx: ctxt, ty: t) -> uint {\n         let variants = substd_enum_variants(cx, did, substs);\n         variants.foldl( // find max size of any variant\n             0,\n-            |m, v| uint::max(m,\n+            |m, v| uint::max(&m,\n                              // find size of this variant:\n-                             v.args.foldl(0, |s, a| s + type_size(cx, a))))\n+                             &v.args.foldl(0, |s, a| s + type_size(cx, a))))\n       }\n \n       ty_param(_) | ty_self => {"}]}