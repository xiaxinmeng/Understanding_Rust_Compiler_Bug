{"sha": "b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODM2N2Q4ZThjMzI3M2IyY2RlZWZjNGNlNTU4OTdlMDhlNTkyYjI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-06-21T03:23:05Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-08-19T08:49:54Z"}, "message": "Support `impl Trait` in inlined documentation", "tree": {"sha": "0e2b01e87ebec1e1c9ade08a3c5c8e467cb9b741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2b01e87ebec1e1c9ade08a3c5c8e467cb9b741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "html_url": "https://github.com/rust-lang/rust/commit/b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "html_url": "https://github.com/rust-lang/rust/commit/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd"}], "stats": {"total": 144, "additions": 122, "deletions": 22}, "files": [{"sha": "bcabefa51fab1eb6b985cf7f9ae5ab5870483659", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "patch": "@@ -217,8 +217,9 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     };\n \n     let predicates = cx.tcx.predicates_of(did);\n-    let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n-    let decl = (did, sig).clean(cx);\n+    let (generics, decl) = clean::enter_impl_trait(cx, || {\n+        ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))\n+    });\n     let (all_types, ret_types) = clean::get_all_types(&generics, &decl, cx);\n     clean::Function {\n         decl,\n@@ -372,7 +373,9 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n                     None\n                 }\n             }).collect::<Vec<_>>(),\n-            (tcx.generics_of(did), &predicates).clean(cx),\n+            clean::enter_impl_trait(cx, || {\n+                (tcx.generics_of(did), &predicates).clean(cx)\n+            }),\n         )\n     };\n     let polarity = tcx.impl_polarity(did);"}, {"sha": "d3065f16793162ab362d4a8fd6d9b2cc54746d5c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 74, "deletions": 17, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "patch": "@@ -45,7 +45,7 @@ use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n \n-use crate::core::{self, DocContext};\n+use crate::core::{self, DocContext, ImplTraitParam};\n use crate::doctree;\n use crate::html::render::{cache, ExternalLocation};\n use crate::html::item_type::ItemType;\n@@ -1540,7 +1540,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n             ty::GenericParamDefKind::Lifetime => {\n                 (self.name.to_string(), GenericParamDefKind::Lifetime)\n             }\n-            ty::GenericParamDefKind::Type { has_default, .. } => {\n+            ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n                 cx.renderinfo.borrow_mut().external_param_names\n                              .insert(self.def_id, self.name.clean(cx));\n                 let default = if has_default {\n@@ -1552,7 +1552,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     did: self.def_id,\n                     bounds: vec![], // These are filled in from the where-clauses.\n                     default,\n-                    synthetic: None,\n+                    synthetic,\n                 })\n             }\n             ty::GenericParamDefKind::Const { .. } => {\n@@ -1641,7 +1641,7 @@ impl Clean<Generics> for hir::Generics {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => unreachable!(),\n                     GenericParamDefKind::Type { did, ref bounds, .. } => {\n-                        cx.impl_trait_bounds.borrow_mut().insert(did, bounds.clone());\n+                        cx.impl_trait_bounds.borrow_mut().insert(did.into(), bounds.clone());\n                     }\n                     GenericParamDefKind::Const { .. } => unreachable!(),\n                 }\n@@ -1696,25 +1696,76 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n \n         let (gens, preds) = *self;\n \n+        // Don't populate `cx.impl_trait_bounds` before `clean`ning `where` clauses,\n+        // since `Clean for ty::Predicate` would consume them.\n+        let mut impl_trait = FxHashMap::<ImplTraitParam, Vec<_>>::default();\n+\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens.params.iter().filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime => None,\n-            ty::GenericParamDefKind::Type { .. } => {\n-                if param.name.as_symbol() == kw::SelfUpper {\n-                    assert_eq!(param.index, 0);\n-                    return None;\n+        let stripped_typarams = gens.params.iter()\n+            .filter_map(|param| match param.kind {\n+                ty::GenericParamDefKind::Lifetime => None,\n+                ty::GenericParamDefKind::Type { synthetic, .. } => {\n+                    if param.name.as_symbol() == kw::SelfUpper {\n+                        assert_eq!(param.index, 0);\n+                        return None;\n+                    }\n+                    if synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                        impl_trait.insert(param.index.into(), vec![]);\n+                        return None;\n+                    }\n+                    Some(param.clean(cx))\n                 }\n-                Some(param.clean(cx))\n-            }\n-            ty::GenericParamDefKind::Const { .. } => None,\n-        }).collect::<Vec<GenericParamDef>>();\n+                ty::GenericParamDefKind::Const { .. } => None,\n+            }).collect::<Vec<GenericParamDef>>();\n \n         let mut where_predicates = preds.predicates.iter()\n-            .flat_map(|(p, _)| p.clean(cx))\n+            .flat_map(|(p, _)| {\n+                let param_idx = if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n+                    if let ty::Param(param) = trait_ref.self_ty().sty {\n+                        Some(param.index)\n+                    } else {\n+                        None\n+                    }\n+                } else if let Some(outlives) = p.to_opt_type_outlives() {\n+                    if let ty::Param(param) = outlives.skip_binder().0.sty {\n+                        Some(param.index)\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                };\n+\n+                let p = p.clean(cx)?;\n+\n+                if let Some(b) = param_idx.and_then(|i| impl_trait.get_mut(&i.into())) {\n+                    b.extend(\n+                        p.get_bounds()\n+                            .into_iter()\n+                            .flatten()\n+                            .cloned()\n+                            .filter(|b| !b.is_sized_bound(cx))\n+                    );\n+                    return None;\n+                }\n+\n+                Some(p)\n+            })\n             .collect::<Vec<_>>();\n \n+        // Move `TraitPredicate`s to the front.\n+        for (_, bounds) in impl_trait.iter_mut() {\n+            bounds.sort_by_key(|b| if let GenericBound::TraitBound(..) = b {\n+                false\n+            } else {\n+                true\n+            });\n+        }\n+\n+        cx.impl_trait_bounds.borrow_mut().extend(impl_trait);\n+\n         // Type parameters and have a Sized bound by default unless removed with\n         // ?Sized. Scan through the predicates and mark any type parameter with\n         // a Sized bound, removing the bounds as we find them.\n@@ -2791,7 +2842,7 @@ impl Clean<Type> for hir::Ty {\n                     if let Some(new_ty) = cx.ty_substs.borrow().get(&did).cloned() {\n                         return new_ty;\n                     }\n-                    if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n+                    if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did.into()) {\n                         return ImplTrait(bounds);\n                     }\n                 }\n@@ -3082,7 +3133,13 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Projection(ref data) => data.clean(cx),\n \n-            ty::Param(ref p) => Generic(p.name.to_string()),\n+            ty::Param(ref p) => {\n+                if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&p.index.into()) {\n+                    ImplTrait(bounds)\n+                } else {\n+                    Generic(p.name.to_string())\n+                }\n+            }\n \n             ty::Opaque(def_id, substs) => {\n                 // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,"}, {"sha": "592a24fa4ae1a715d8eb7aaade67229d23f1d40c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "patch": "@@ -61,8 +61,8 @@ pub struct DocContext<'tcx> {\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n     /// Table `DefId` of const parameter -> substituted const\n     pub ct_substs: RefCell<FxHashMap<DefId, clean::Constant>>,\n-    /// Table DefId of `impl Trait` in argument position -> bounds\n-    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::GenericBound>>>,\n+    /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n+    pub impl_trait_bounds: RefCell<FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -459,3 +459,23 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         })\n     })\n }\n+\n+/// `DefId` or parameter index (`ty::ParamTy.index`) of a synthetic type parameter\n+/// for `impl Trait` in argument position.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ImplTraitParam {\n+    DefId(DefId),\n+    ParamIndex(u32),\n+}\n+\n+impl From<DefId> for ImplTraitParam {\n+    fn from(did: DefId) -> Self {\n+        ImplTraitParam::DefId(did)\n+    }\n+}\n+\n+impl From<u32> for ImplTraitParam {\n+    fn from(idx: u32) -> Self {\n+        ImplTraitParam::ParamIndex(idx)\n+    }\n+}"}, {"sha": "7807acbc4d61d0ad572a8ad286f3589f43b2834d", "filename": "src/test/rustdoc/inline_cross/auxiliary/impl_trait_aux.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs?ref=b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "patch": "@@ -0,0 +1,7 @@\n+pub fn func<'a>(_x: impl Clone + Into<Vec<u8>> + 'a) {}\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a) {}\n+}"}, {"sha": "091baa9773ecffe5cae5c682d4a3de2a144cbc92", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78367d8e8c3273b2cdeefc4ce55897e08e592b2/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=b78367d8e8c3273b2cdeefc4ce55897e08e592b2", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:impl_trait_aux.rs\n+\n+extern crate impl_trait_aux;\n+\n+// @has impl_trait/fn.func.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n+// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+pub use impl_trait_aux::func;\n+\n+// @has impl_trait/struct.Foo.html\n+// @has - '//code[@id=\"method.v\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n+// @!has - '//code[@id=\"method.v\"]' 'where'\n+pub use impl_trait_aux::Foo;"}]}