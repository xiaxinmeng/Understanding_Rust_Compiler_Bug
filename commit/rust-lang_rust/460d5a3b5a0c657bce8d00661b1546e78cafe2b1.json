{"sha": "460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGQ1YTNiNWEwYzY1N2JjZThkMDA2NjFiMTU0NmU3OGNhZmUyYjE=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-18T03:18:42Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-18T03:18:42Z"}, "message": "Prevent `cmp_nan` when inside constants\n\n`std::{f32,f64}::is_nan` isn't a const fn so prevent `cmp_nan`\nlint from running within constant comparisons.", "tree": {"sha": "9748b6f96950dea8b548a9103498b426e91db641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9748b6f96950dea8b548a9103498b426e91db641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "html_url": "https://github.com/rust-lang/rust/commit/460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460d5a3b5a0c657bce8d00661b1546e78cafe2b1/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0408ea65d9e93884269fec502bac1966b1565f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0408ea65d9e93884269fec502bac1966b1565f", "html_url": "https://github.com/rust-lang/rust/commit/eb0408ea65d9e93884269fec502bac1966b1565f"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "687776c67986d49e4155685b40b3fc10d985a218", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/460d5a3b5a0c657bce8d00661b1546e78cafe2b1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460d5a3b5a0c657bce8d00661b1546e78cafe2b1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=460d5a3b5a0c657bce8d00661b1546e78cafe2b1", "patch": "@@ -343,8 +343,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n             ExprKind::Binary(ref cmp, ref left, ref right) => {\n                 let op = cmp.node;\n                 if op.is_comparison() {\n-                    check_nan(cx, left, expr.span);\n-                    check_nan(cx, right, expr.span);\n+                    check_nan(cx, left, expr);\n+                    check_nan(cx, right, expr);\n                     check_to_owned(cx, left, right);\n                     check_to_owned(cx, right, left);\n                 }\n@@ -440,21 +440,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     }\n }\n \n-fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr, cmp_span: Span) {\n-    if let Some((value, _)) = constant(cx, cx.tables, expr) {\n-        let needs_lint = match value {\n-            Constant::F32(num) => num.is_nan(),\n-            Constant::F64(num) => num.is_nan(),\n-            _ => false,\n-        };\n+fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr, cmp_expr: &Expr) {\n+    if_chain! {\n+        if !in_constant(cx, cmp_expr.hir_id);\n+        if let Some((value, _)) = constant(cx, cx.tables, expr);\n+        then {\n+            let needs_lint = match value {\n+                Constant::F32(num) => num.is_nan(),\n+                Constant::F64(num) => num.is_nan(),\n+                _ => false,\n+            };\n \n-        if needs_lint {\n-            span_lint(\n-                cx,\n-                CMP_NAN,\n-                cmp_span,\n-                \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n-            );\n+            if needs_lint {\n+                span_lint(\n+                    cx,\n+                    CMP_NAN,\n+                    cmp_expr.span,\n+                    \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n+                );\n+            }\n         }\n     }\n }"}]}