{"sha": "fa7fe196018e5fec39dee7ca6567c2024e60daf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhN2ZlMTk2MDE4ZTVmZWMzOWRlZTdjYTY1NjdjMjAyNGU2MGRhZjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T15:38:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T18:50:56Z"}, "message": "resolve: Remove remaining special cases from built-in macros", "tree": {"sha": "beba5525dfbb2cf50b30cad8f37684ac74327b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beba5525dfbb2cf50b30cad8f37684ac74327b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7fe196018e5fec39dee7ca6567c2024e60daf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7fe196018e5fec39dee7ca6567c2024e60daf6", "html_url": "https://github.com/rust-lang/rust/commit/fa7fe196018e5fec39dee7ca6567c2024e60daf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7fe196018e5fec39dee7ca6567c2024e60daf6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "html_url": "https://github.com/rust-lang/rust/commit/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9"}], "stats": {"total": 57, "additions": 20, "deletions": 37}, "files": [{"sha": "5dd7bc305482971f5924822b5ac4f26fe4eac15d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -126,8 +126,6 @@ impl<'a> Resolver<'a> {\n         };\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n-        } else if self.is_builtin_macro(Some(def_id)) {\n-            self.injected_crate.unwrap_or(self.graph_root)\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n             self.get_module(module_def_id)\n@@ -596,11 +594,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 };\n \n                 self.r.populate_module_if_necessary(module);\n-                if let Some(name) = self.r.session.parse_sess.injected_crate_name.try_get() {\n-                    if name.as_str() == ident.name.as_str() {\n-                        self.r.injected_crate = Some(module);\n-                    }\n-                }\n \n                 let used = self.process_legacy_macro_imports(item, module);\n                 let binding ="}, {"sha": "4cde00404f0b626a779f462c341c57dd419abfb2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -929,8 +929,6 @@ pub struct Resolver<'a> {\n     /// it's not used during normal resolution, only for better error reporting.\n     struct_constructors: DefIdMap<(Res, ty::Visibility)>,\n \n-    injected_crate: Option<Module<'a>>,\n-\n     /// Features enabled for this crate.\n     active_features: FxHashSet<Symbol>,\n }\n@@ -1168,7 +1166,6 @@ impl<'a> Resolver<'a> {\n             unused_macros: Default::default(),\n             proc_macro_stubs: Default::default(),\n             special_derives: Default::default(),\n-            injected_crate: None,\n             active_features:\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))"}, {"sha": "8e9e1380002cf1cc9a47e9e48a0d2c282fb3178d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -854,8 +854,6 @@ impl<'a> Resolver<'a> {\n                 if ext.is_builtin {\n                     // The macro is a built-in, replace only the expander function.\n                     result.kind = ext.kind;\n-                    // Also reset its edition to the global one for compatibility.\n-                    result.edition = self.session.edition();\n                 } else {\n                     // The macro is from a plugin, the in-source definition is dummy,\n                     // take all the data from the resolver."}, {"sha": "7f4feff6be670da429a7f58e868414fb9f54a938", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -592,8 +592,8 @@ pub struct SyntaxExtension {\n     pub helper_attrs: Vec<Symbol>,\n     /// Edition of the crate in which this macro is defined.\n     pub edition: Edition,\n-    /// Built-in macros have a couple of special properties (meaning of `$crate`,\n-    /// availability in `#[no_implicit_prelude]` modules), so we have to keep this flag.\n+    /// Built-in macros have a couple of special properties like availability\n+    /// in `#[no_implicit_prelude]` modules, so we have to keep this flag.\n     pub is_builtin: bool,\n     /// We have to identify macros providing a `Copy` impl early for compatibility reasons.\n     pub is_derive_copy: bool,"}, {"sha": "22962499a2b7554b8c344cbb8c0d06db42da7202", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -495,7 +495,7 @@ impl<'a> ExtCtxt<'a> {\n         let expr_loc_ptr = self.expr_addr_of(span, expr_loc_tuple);\n         self.expr_call_global(\n             span,\n-            self.std_path(&[sym::rt, sym::begin_panic]),\n+            [sym::std, sym::rt, sym::begin_panic].iter().map(|s| Ident::new(*s, span)).collect(),\n             vec![\n                 self.expr_str(span, msg),\n                 expr_loc_ptr])"}, {"sha": "131cd0a67c6699ca567c83719b6aa22908136cbb", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -10,9 +10,9 @@\n \n fn main() {\n     {\n-        ::std::io::_print(::std::fmt::Arguments::new_v1(&[\"rust\\n\"],\n-                                                        &match () {\n-                                                             () => [],\n-                                                         }));\n+        ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"],\n+                                                         &match () {\n+                                                              () => [],\n+                                                          }));\n     };\n }"}, {"sha": "4cf2e90e635fd673895b0184c807ab153599ba17", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -30,7 +30,7 @@\n \n \n                   ((::alloc::fmt::format as\n-                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::std::fmt::Arguments>::new_v1\n+                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1\n                                                                                                            as\n                                                                                                            fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                             as"}, {"sha": "29c1b8fb0da97cdeca831929cb290ef1d7b6b68b", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -5,11 +5,10 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n-extern crate serialize;\n-use serialize as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n-use serialize::{Encodable, Decodable};\n-use serialize::json;\n+use rustc_serialize::{Encodable, Decodable};\n+use rustc_serialize::json;\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct A {"}, {"sha": "fe608890bbd4decfdf3e5b931aa75a40515586f2", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -7,12 +7,11 @@\n \n #![feature(rustc_private)]\n \n-extern crate serialize;\n-use serialize as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n use std::cell::{Cell, RefCell};\n-use serialize::{Encodable, Decodable};\n-use serialize::json;\n+use rustc_serialize::{Encodable, Decodable};\n+use rustc_serialize::json;\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct A {"}, {"sha": "d7cc98fed2595cbcb8080e99613d64a7cfb8fae4", "filename": "src/test/ui-fulldeps/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -2,8 +2,7 @@\n \n #![feature(rustc_private)]\n \n-extern crate serialize;\n-use serialize as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n mod submod {\n     // if any of these are implemented without global calls for any"}, {"sha": "b1bdfaceb887d7bed8c159e51974634ea0b8ed1c", "filename": "src/test/ui-fulldeps/deriving-hygiene.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -2,8 +2,7 @@\n \n #![allow(non_upper_case_globals)]\n #![feature(rustc_private)]\n-extern crate serialize;\n-use serialize as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n pub const other: u8 = 1;\n pub const f: u8 = 1;"}, {"sha": "bd046a6cdee5f2d34bdfcc0ef1f231650e97cea6", "filename": "src/test/ui-fulldeps/issue-11881.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7fe196018e5fec39dee7ca6567c2024e60daf6/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs?ref=fa7fe196018e5fec39dee7ca6567c2024e60daf6", "patch": "@@ -6,17 +6,16 @@\n \n #![feature(rustc_private)]\n \n-extern crate serialize;\n-use serialize as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n use std::io::Cursor;\n use std::io::prelude::*;\n use std::fmt;\n use std::slice;\n \n-use serialize::{Encodable, Encoder};\n-use serialize::json;\n-use serialize::opaque;\n+use rustc_serialize::{Encodable, Encoder};\n+use rustc_serialize::json;\n+use rustc_serialize::opaque;\n \n #[derive(RustcEncodable)]\n struct Foo {"}]}