{"sha": "1ea70116d389699400545c6200c38345b1eceeb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTcwMTE2ZDM4OTY5OTQwMDU0NWM2MjAwYzM4MzQ1YjFlY2VlYjc=", "commit": {"author": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-08-29T12:48:19Z"}, "committer": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-08-29T12:48:56Z"}, "message": "Enable the cast_lossless warning by default.", "tree": {"sha": "66404ded0dda1858db93006c0a165f4da719c24b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66404ded0dda1858db93006c0a165f4da719c24b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea70116d389699400545c6200c38345b1eceeb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea70116d389699400545c6200c38345b1eceeb7", "html_url": "https://github.com/rust-lang/rust/commit/1ea70116d389699400545c6200c38345b1eceeb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea70116d389699400545c6200c38345b1eceeb7/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc7893b7025203b2e626bd7143286351e0093eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc7893b7025203b2e626bd7143286351e0093eb", "html_url": "https://github.com/rust-lang/rust/commit/6bc7893b7025203b2e626bd7143286351e0093eb"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "9f2a0128c5a23231c315a2ce5462d8a9983d4f05", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -198,7 +198,7 @@ name\n [box_vec](https://github.com/rust-lang-nursery/rust-clippy/wiki#box_vec)                                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/rust-lang-nursery/rust-clippy/wiki#boxed_local)                                             | warn    | using `Box<T>` where unnecessary\n [builtin_type_shadow](https://github.com/rust-lang-nursery/rust-clippy/wiki#builtin_type_shadow)                             | warn    | shadowing a builtin type\n-[cast_lossless](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_lossless)                                         | allow   | casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\n+[cast_lossless](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_lossless)                                         | warn    | casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\n [cast_possible_truncation](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_truncation)                   | allow   | casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n [cast_possible_wrap](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/rust-lang-nursery/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g. `x as f32` where `x: u64`"}, {"sha": "19b8816cd1e0cd6f3052f8e28d46dd5868a540bf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -358,7 +358,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         shadow::SHADOW_UNRELATED,\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n-        types::CAST_LOSSLESS,\n         types::CAST_POSSIBLE_TRUNCATION,\n         types::CAST_POSSIBLE_WRAP,\n         types::CAST_PRECISION_LOSS,\n@@ -530,6 +529,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,\n+        types::CAST_LOSSLESS,\n         types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,"}, {"sha": "29a7bb7501164da154d028932c557d74b8b1aeff", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -499,7 +499,7 @@ declare_lint! {\n /// ```\n declare_lint! {\n     pub CAST_LOSSLESS,\n-    Allow,\n+    Warn,\n     \"casts using `as` that are known to be lossless, e.g. `x as u64` where `x: u8`\"\n }\n "}, {"sha": "ad381c6cd4916b78aa483afb7aaf73656ab68c2d", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -38,12 +38,12 @@ pub struct U(u64);\n \n impl PartialEq<u32> for U {\n     fn eq(&self, other: &u32) -> bool {\n-        self.eq(&U(*other as u64))\n+        self.eq(&U(u64::from(*other)))\n     }\n }\n impl PartialOrd<u32> for U {\n     fn partial_cmp(&self, other: &u32) -> Option<Ordering> {\n-        self.partial_cmp(&U(*other as u64))\n+        self.partial_cmp(&U(u64::from(*other)))\n     }\n }\n "}, {"sha": "f3f66f3c9c5e5b722bf4b0761ba7eed6d003d393", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![warn(float_cmp)]\n-#![allow(unused, no_effect, unnecessary_operation)]\n+#![allow(unused, no_effect, unnecessary_operation, cast_lossless)]\n \n use std::ops::Add;\n "}, {"sha": "8d8e7bd8de112e69c976945f157591b702d69803", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea70116d389699400545c6200c38345b1eceeb7/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=1ea70116d389699400545c6200c38345b1eceeb7", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![warn(invalid_upcast_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation, cast_lossless)]\n \n fn mk_value<T>() -> T { unimplemented!() }\n "}]}