{"sha": "74190a5e1c7439b001296fbc41da67682fd1d9bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTkwYTVlMWM3NDM5YjAwMTI5NmZiYzQxZGE2NzY4MmZkMWQ5YmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-13T19:48:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:41:45Z"}, "message": "syntax_pos: Remove the duplicate global edition\n\nIt was introduced to avoid going through `hygiene_data`, but now it's read only once, when `ParseSess` is created, so going through a lock is ok.", "tree": {"sha": "b1d989461ef6f3b70ebdabb1f1a53bdffeebff2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d989461ef6f3b70ebdabb1f1a53bdffeebff2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74190a5e1c7439b001296fbc41da67682fd1d9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74190a5e1c7439b001296fbc41da67682fd1d9bf", "html_url": "https://github.com/rust-lang/rust/commit/74190a5e1c7439b001296fbc41da67682fd1d9bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74190a5e1c7439b001296fbc41da67682fd1d9bf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a447738b8a7ac8f0a47a134f9fa1a60a4621620", "html_url": "https://github.com/rust-lang/rust/commit/1a447738b8a7ac8f0a47a134f9fa1a60a4621620"}], "stats": {"total": 42, "additions": 6, "deletions": 36}, "files": [{"sha": "94570140996f1480400dff15dec2172ea894a18f", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=74190a5e1c7439b001296fbc41da67682fd1d9bf", "patch": "@@ -1,41 +1,17 @@\n use super::*;\n \n-use crate::ast::CrateConfig;\n use crate::symbol::Symbol;\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::feature_gate::UnstableFeatures;\n use crate::parse::token;\n-use crate::diagnostics::plugin::ErrorMap;\n use crate::with_default_globals;\n use std::io;\n use std::path::PathBuf;\n-use syntax_pos::{BytePos, Span, edition::Edition};\n-use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use rustc_data_structures::sync::{Lock, Once};\n+use errors::{Handler, emitter::EmitterWriter};\n+use syntax_pos::{BytePos, Span};\n \n fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n-    let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n-                                                        Some(sm.clone()),\n-                                                        false,\n-                                                        false,\n-                                                        false);\n-    ParseSess {\n-        span_diagnostic: errors::Handler::with_emitter(true, None, Box::new(emitter)),\n-        unstable_features: UnstableFeatures::from_environment(),\n-        config: CrateConfig::default(),\n-        included_mod_stack: Lock::new(Vec::new()),\n-        source_map: sm,\n-        missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n-        raw_identifier_spans: Lock::new(Vec::new()),\n-        registered_diagnostics: Lock::new(ErrorMap::new()),\n-        buffered_lints: Lock::new(vec![]),\n-        edition: Edition::from_session(),\n-        ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n-        param_attr_spans: Lock::new(Vec::new()),\n-        let_chains_spans: Lock::new(Vec::new()),\n-        async_closure_spans: Lock::new(Vec::new()),\n-        injected_crate_name: Once::new(),\n-    }\n+    let emitter = EmitterWriter::new(Box::new(io::sink()), Some(sm.clone()), false, false, false);\n+    ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n }\n \n // open a string reader for the given string"}, {"sha": "a1bcc455eb4cff2899d98d4e9b4aa22da825ecab", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=74190a5e1c7439b001296fbc41da67682fd1d9bf", "patch": "@@ -16,6 +16,7 @@ use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic,\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use syntax_pos::edition::Edition;\n+use syntax_pos::hygiene::ExpnId;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use std::borrow::Cow;\n@@ -86,7 +87,7 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n-            edition: Edition::from_session(),\n+            edition: ExpnId::root().expn_info().edition,\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),"}, {"sha": "00cd00f2837849b10cbe646f4b7fcfc28796fada", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=74190a5e1c7439b001296fbc41da67682fd1d9bf", "patch": "@@ -1,7 +1,6 @@\n use crate::symbol::{Symbol, sym};\n use std::fmt;\n use std::str::FromStr;\n-use crate::GLOBALS;\n \n /// The edition of the compiler (RFC 2052)\n #[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n@@ -39,10 +38,6 @@ impl fmt::Display for Edition {\n }\n \n impl Edition {\n-    pub fn from_session() -> Edition {\n-        GLOBALS.with(|globals| globals.edition)\n-    }\n-\n     pub fn lint_name(&self) -> &'static str {\n         match *self {\n             Edition::Edition2015 => \"rust_2015_compatibility\","}, {"sha": "ae538677a3aac689afdcd5ca806cb0d59a13aa22", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74190a5e1c7439b001296fbc41da67682fd1d9bf/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=74190a5e1c7439b001296fbc41da67682fd1d9bf", "patch": "@@ -49,7 +49,6 @@ pub struct Globals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n-    edition: Edition,\n }\n \n impl Globals {\n@@ -58,7 +57,6 @@ impl Globals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),\n-            edition,\n         }\n     }\n }"}]}