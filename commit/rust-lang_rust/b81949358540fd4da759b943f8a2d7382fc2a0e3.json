{"sha": "b81949358540fd4da759b943f8a2d7382fc2a0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTk0OTM1ODU0MGZkNGRhNzU5Yjk0M2Y4YTJkNzM4MmZjMmEwZTM=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-11T23:48:38Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:48:15Z"}, "message": "move remaining shims", "tree": {"sha": "7f82505284575f6c8e01442afeb0d58dc090b30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f82505284575f6c8e01442afeb0d58dc090b30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81949358540fd4da759b943f8a2d7382fc2a0e3", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXk27LwAKCRAnUl7150IK\nUGwlAP9+nu4TOvE2LyNBW3ucvnLXnDryAitgmMCCsAohOYv1oQEAv1MnaTh6BNlA\nLSwmRCjd/AIVg9gZDSk5nGxZoFEhHQQ=\n=Gktp\n-----END PGP SIGNATURE-----", "payload": "tree 7f82505284575f6c8e01442afeb0d58dc090b30a\nparent 63160c66cd31c6f48a4a68ff469c4bdebc8eff2f\nauthor Christian Poveda <git@christianpoveda.xyz> 1581464918 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582152495 -0500\n\nmove remaining shims\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81949358540fd4da759b943f8a2d7382fc2a0e3", "html_url": "https://github.com/rust-lang/rust/commit/b81949358540fd4da759b943f8a2d7382fc2a0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81949358540fd4da759b943f8a2d7382fc2a0e3/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63160c66cd31c6f48a4a68ff469c4bdebc8eff2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/63160c66cd31c6f48a4a68ff469c4bdebc8eff2f", "html_url": "https://github.com/rust-lang/rust/commit/63160c66cd31c6f48a4a68ff469c4bdebc8eff2f"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "59f9a8c63a7e2a74817c7ee49466b8b442aa3848", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 61, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b81949358540fd4da759b943f8a2d7382fc2a0e3", "patch": "@@ -193,6 +193,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n+        // Here we dispatch all the shims for foreign functions. If you have a platform specific\n+        // shim, add it to the corresponding submodule.\n         match link_name {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -439,67 +441,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_f64(res), dest)?;\n             }\n \n-            // Some things needed for `sys::thread` initialization to go through.\n-            | \"signal\"\n-            | \"sigaction\"\n-            | \"sigaltstack\"\n-            => {\n-                this.write_scalar(Scalar::from_int(0, dest.layout.size), dest)?;\n-            }\n-\n-            \"sysconf\" => {\n-                let name = this.read_scalar(args[0])?.to_i32()?;\n-\n-                trace!(\"sysconf() called with name {}\", name);\n-                // TODO: Cache the sysconf integers via Miri's global cache.\n-                let paths = &[\n-                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n-                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n-                    (\n-                        &[\"libc\", \"_SC_NPROCESSORS_ONLN\"],\n-                        Scalar::from_int(NUM_CPUS, dest.layout.size),\n-                    ),\n-                ];\n-                let mut result = None;\n-                for &(path, path_value) in paths {\n-                    if let Some(val) = this.eval_path_scalar(path)? {\n-                        let val = val.to_i32()?;\n-                        if val == name {\n-                            result = Some(path_value);\n-                            break;\n-                        }\n-                    }\n-                }\n-                if let Some(result) = result {\n-                    this.write_scalar(result, dest)?;\n-                } else {\n-                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n-                }\n-            }\n-\n-            \"sched_getaffinity\" => {\n-                // Return an error; `num_cpus` then falls back to `sysconf`.\n-                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n-            }\n-\n-            \"isatty\" => {\n-                this.write_null(dest)?;\n-            }\n-\n-            \"posix_fadvise\" => {\n-                // fadvise is only informational, we can ignore it.\n-                this.write_null(dest)?;\n-            }\n-\n-            \"mmap\" => {\n-                // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n-                let addr = this.read_scalar(args[0])?.not_undef()?;\n-                this.write_scalar(addr, dest)?;\n-            }\n-            \"mprotect\" => {\n-                this.write_null(dest)?;\n-            }\n-\n             _ => match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n                 \"linux\" | \"macos\" => posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n                 \"windows\" => windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,"}, {"sha": "f524e4df291eeb669125ccbde8094fa881d20102", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=b81949358540fd4da759b943f8a2d7382fc2a0e3", "patch": "@@ -266,6 +266,62 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            // Some things needed for `sys::thread` initialization to go through.\n+            | \"signal\"\n+            | \"sigaction\"\n+            | \"sigaltstack\"\n+            => {\n+                this.write_scalar(Scalar::from_int(0, dest.layout.size), dest)?;\n+            }\n+\n+            \"sysconf\" => {\n+                let name = this.read_scalar(args[0])?.to_i32()?;\n+\n+                trace!(\"sysconf() called with name {}\", name);\n+                // TODO: Cache the sysconf integers via Miri's global cache.\n+                let paths = &[\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n+                    (\n+                        &[\"libc\", \"_SC_NPROCESSORS_ONLN\"],\n+                        Scalar::from_int(NUM_CPUS, dest.layout.size),\n+                    ),\n+                ];\n+                let mut result = None;\n+                for &(path, path_value) in paths {\n+                    if let Some(val) = this.eval_path_scalar(path)? {\n+                        let val = val.to_i32()?;\n+                        if val == name {\n+                            result = Some(path_value);\n+                            break;\n+                        }\n+                    }\n+                }\n+                if let Some(result) = result {\n+                    this.write_scalar(result, dest)?;\n+                } else {\n+                    throw_unsup_format!(\"Unimplemented sysconf name: {}\", name)\n+                }\n+            }\n+\n+            \"isatty\" => {\n+                this.write_null(dest)?;\n+            }\n+\n+            \"posix_fadvise\" => {\n+                // fadvise is only informational, we can ignore it.\n+                this.write_null(dest)?;\n+            }\n+\n+            \"mmap\" => {\n+                // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n+                let addr = this.read_scalar(args[0])?.not_undef()?;\n+                this.write_scalar(addr, dest)?;\n+            }\n+\n+            \"mprotect\" => {\n+                this.write_null(dest)?;\n+            }\n \n             _ => {\n                 match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {"}, {"sha": "7267cc1af8e5ca21bfdbfce89c261d531ceabb0c", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81949358540fd4da759b943f8a2d7382fc2a0e3/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=b81949358540fd4da759b943f8a2d7382fc2a0e3", "patch": "@@ -75,6 +75,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 super::getrandom(this, args, dest)?;\n             }\n \n+            \"sched_getaffinity\" => {\n+                // Return an error; `num_cpus` then falls back to `sysconf`.\n+                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            }\n+\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         };\n "}]}