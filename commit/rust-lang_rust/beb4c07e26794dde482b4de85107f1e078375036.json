{"sha": "beb4c07e26794dde482b4de85107f1e078375036", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjRjMDdlMjY3OTRkZGU0ODJiNGRlODUxMDdmMWUwNzgzNzUwMzY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-12T19:28:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-12T19:28:46Z"}, "message": "Git index wins again.", "tree": {"sha": "84bff2b8cddc28b6f0020c9dffc1e6dacec873cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84bff2b8cddc28b6f0020c9dffc1e6dacec873cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb4c07e26794dde482b4de85107f1e078375036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb4c07e26794dde482b4de85107f1e078375036", "html_url": "https://github.com/rust-lang/rust/commit/beb4c07e26794dde482b4de85107f1e078375036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb4c07e26794dde482b4de85107f1e078375036/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f7b043bc7c5084a6b4b3c900d51e2e66202c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f7b043bc7c5084a6b4b3c900d51e2e66202c93", "html_url": "https://github.com/rust-lang/rust/commit/76f7b043bc7c5084a6b4b3c900d51e2e66202c93"}], "stats": {"total": 170, "additions": 105, "deletions": 65}, "files": [{"sha": "66da809392313496763ccaff995e6f0b13d14acb", "filename": "src/boot/be/ra.ml", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fbe%2Fra.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fbe%2Fra.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fra.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -132,7 +132,12 @@ let kill_redundant_moves (cx:ctxt) : unit =\n \n let quad_jump_target_labels (q:quad) : Il.label list =\n   match q.Il.quad_body with\n-      Il.Jmp { Il.jmp_targ = Il.CodeLabel lab; _ } -> [ lab ]\n+      Il.Jmp jmp ->\n+        begin\n+          match jmp.Il.jmp_targ with\n+              Il.CodeLabel lab  -> [ lab ]\n+            | _ -> []\n+        end\n     | _ -> []\n ;;\n \n@@ -172,7 +177,7 @@ let quad_defined_vregs (q:quad) : Il.vreg list =\n \n let quad_is_unconditional_jump (q:quad) : bool =\n   match q.Il.quad_body with\n-      Il.Jmp { jmp_op = Il.JMP; _ } -> true\n+      Il.Jmp { jmp_op = Il.JMP; jmp_targ = _ } -> true\n     | Il.Ret -> true\n     | _ -> false\n ;;"}, {"sha": "c3b097af256d101dffea6182232df67a6a4e5d87", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -110,8 +110,9 @@ let trans_crate\n       : Llvm.llvalue option =\n     match Session.get_span sess id with\n         None -> None\n-      | Some {lo=(_, line, col); _} ->\n-          Some (di_location line col scope)\n+      | Some span ->\n+          let (_, line, col) = span.lo in\n+            Some (di_location line col scope)\n   in\n \n   (* Sets the 'llbuilder's current location (which it attaches to all\n@@ -585,7 +586,8 @@ let trans_crate\n       (name:Ast.ident)\n       mod_item\n       : unit =\n-    let { node = { Ast.decl_item = (item:Ast.mod_item'); _ }; id = id } =\n+    let { node = { Ast.decl_item = (item:Ast.mod_item');\n+                   Ast.decl_params = _ }; id = id } =\n       mod_item in\n     let full_name = Semant.item_str sem_cx id in\n     let (filename, line_num) =\n@@ -618,13 +620,11 @@ let trans_crate\n               Ast.sprintf_mod_item (name, mod_item)\n   in\n \n-  let trans_fn\n-      ({\n-        Ast.fn_input_slots = (header_slots:Ast.header_slots);\n-        Ast.fn_body = (body:Ast.block); _\n-      }:Ast.fn)\n+  let trans_fn (fn:Ast.fn)\n       (fn_id:node_id)\n       : unit =\n+    let header_slots = fn.Ast.fn_input_slots in\n+    let body = fn.Ast.fn_body in\n     let llfn = Hashtbl.find llitems fn_id in\n     let lloutptr = Llvm.param llfn 0 in\n     let lltask = Llvm.param llfn 1 in\n@@ -654,7 +654,7 @@ let trans_crate\n     let build_arg idx llargval =\n       if idx >= n_implicit_args\n       then\n-        let ({ id = id; _ }, ident) = header_slots.(idx - 2) in\n+        let ({ id = id; node = _ }, ident) = header_slots.(idx - 2) in\n         Llvm.set_value_name ident llargval;\n         let llarg =\n           let llty = Llvm.type_of llargval in\n@@ -754,7 +754,7 @@ let trans_crate\n       let rec trans_lval (lval:Ast.lval) : (Llvm.llvalue * Ast.ty) =\n         iflog (fun _ -> log sem_cx \"trans_lval: %a\" Ast.sprintf_lval lval);\n         match lval with\n-            Ast.LVAL_base { id = base_id; _ } ->\n+            Ast.LVAL_base { id = base_id; node = _ } ->\n               set_debug_loc base_id;\n               let defn_id = lval_base_defn_id sem_cx lval in\n               begin\n@@ -813,7 +813,7 @@ let trans_crate\n       let trans_atom (atom:Ast.atom) : Llvm.llvalue =\n         iflog (fun _ -> log sem_cx \"trans_atom: %a\" Ast.sprintf_atom atom);\n         match atom with\n-            Ast.ATOM_literal { node = lit; _ } -> trans_literal lit\n+            Ast.ATOM_literal { node = lit; id = _ } -> trans_literal lit\n           | Ast.ATOM_lval lval ->\n               Llvm.build_load (fst (trans_lval lval)) (anon_llid \"tmp\")\n                 llbuilder\n@@ -1081,7 +1081,8 @@ let trans_crate\n       (name:Ast.ident)\n       mod_item\n       : unit =\n-    let { node = { Ast.decl_item = (item:Ast.mod_item'); _ }; id = id } =\n+    let { node = { Ast.decl_item = (item:Ast.mod_item');\n+                   Ast.decl_params = _ }; id = id } =\n       mod_item in\n     match item with\n         Ast.MOD_ITEM_type _ ->"}, {"sha": "376effedad254786597d0b018726db57d3dd585a", "filename": "src/boot/me/dead.ml", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fdead.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fdead.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdead.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -37,21 +37,31 @@ let dead_code_visitor\n       inner.Walk.visit_block_post block\n   in\n \n+  let exit_stmt_if_exit_body s body =\n+      if (Hashtbl.mem must_exit body.id) then\n+        Hashtbl.add must_exit s.id ()\n+  in\n+\n   let visit_stmt_post s =\n     begin\n-      match s.node with\n+        match s.node with\n         | Ast.STMT_block block ->\n             if Hashtbl.mem must_exit block.id then\n               Hashtbl.add must_exit s.id ()\n \n-        | Ast.STMT_while { Ast.while_body = body; _ }\n-        | Ast.STMT_do_while { Ast.while_body = body; _ }\n-        | Ast.STMT_for_each { Ast.for_each_body = body; _ }\n-        | Ast.STMT_for { Ast.for_body = body; _ } ->\n-            if (Hashtbl.mem must_exit body.id) then\n-              Hashtbl.add must_exit s.id ()\n+        | Ast.STMT_while w\n+        | Ast.STMT_do_while w ->\n+            exit_stmt_if_exit_body s w.Ast.while_body\n+\n+        | Ast.STMT_for_each f ->\n+            exit_stmt_if_exit_body s f.Ast.for_each_body\n+\n+        | Ast.STMT_for f ->\n+            exit_stmt_if_exit_body s f.Ast.for_body\n \n-        | Ast.STMT_if { Ast.if_then = b1; Ast.if_else = Some b2; _ } ->\n+        | Ast.STMT_if { Ast.if_then = b1;\n+                        Ast.if_else = Some b2;\n+                        Ast.if_test = _ } ->\n             if (Hashtbl.mem must_exit b1.id) && (Hashtbl.mem must_exit b2.id)\n             then Hashtbl.add must_exit s.id ()\n \n@@ -61,16 +71,18 @@ let dead_code_visitor\n         | Ast.STMT_be _ ->\n             Hashtbl.add must_exit s.id ()\n \n-        | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms; _ } ->\n+        | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms;\n+                             Ast.alt_tag_lval = _ } ->\n             let arm_ids =\n-              Array.map (fun { node = (_, block); _ } -> block.id) arms\n+              Array.map (fun { node = (_, block); id = _ } -> block.id) arms\n             in\n               if all_must_exit arm_ids\n               then Hashtbl.add must_exit s.id ()\n \n         | Ast.STMT_alt_type { Ast.alt_type_arms = arms;\n-                              Ast.alt_type_else = alt_type_else; _ } ->\n-            let arm_ids = Array.map (fun { node = ((_, _), block); _ } -> \n+                              Ast.alt_type_else = alt_type_else;\n+                              Ast.alt_type_lval = _ } ->\n+            let arm_ids = Array.map (fun { node = ((_, _), block); id = _ } ->\n                                        block.id) arms in\n             let else_ids =\n               begin"}, {"sha": "78d372d508d136482cffe3de2b160466d9b630ff", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -113,10 +113,11 @@ let stmt_collecting_visitor\n             visit_for_block f.Ast.for_slot f.Ast.for_body.id\n         | Ast.STMT_for_each f ->\n             visit_for_block f.Ast.for_each_slot f.Ast.for_each_head.id\n-        | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms; _ } ->\n+        | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms;\n+                             Ast.alt_tag_lval = _ } ->\n             let rec resolve_pat block pat =\n               match pat with\n-                  Ast.PAT_slot ({ id = slot_id; _ }, ident) ->\n+                  Ast.PAT_slot ({ id = slot_id; node = _ }, ident) ->\n                     let slots = Hashtbl.find cx.ctxt_block_slots block.id in\n                     let key = Ast.KEY_ident ident in\n                     htab_put slots key slot_id;\n@@ -125,7 +126,8 @@ let stmt_collecting_visitor\n                 | Ast.PAT_lit _\n                 | Ast.PAT_wild -> ()\n             in\n-              Array.iter (fun { node = (p, b); _ } -> resolve_pat b p) arms\n+              Array.iter (fun { node = (p, b); id = _ } ->\n+                            resolve_pat b p) arms\n         | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre stmt\n@@ -236,8 +238,10 @@ let lookup_type_node_by_name\n       None -> err None \"unknown name: %a\" Ast.sprintf_name name\n     | Some (_, id) ->\n         match htab_search cx.ctxt_all_defns id with\n-            Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type _; _ })\n-          | Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_obj _; _ })\n+            Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type _;\n+                              Ast.decl_params = _ })\n+          | Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_obj _;\n+                              Ast.decl_params = _ })\n           | Some (DEFN_ty_param _) -> id\n           | _ ->\n               err None \"Found non-type binding for %a\"\n@@ -645,8 +649,8 @@ let lval_base_resolving_visitor\n     let reference_any_name lv =\n       let rec lval_is_name lv =\n         match lv with\n-            Ast.LVAL_base {node = Ast.BASE_ident _; _}\n-          | Ast.LVAL_base {node = Ast.BASE_app _; _} -> true\n+            Ast.LVAL_base {node = Ast.BASE_ident _; id = _}\n+          | Ast.LVAL_base {node = Ast.BASE_app _; id = _} -> true\n           | Ast.LVAL_ext (lv', Ast.COMP_named (Ast.COMP_ident _))\n           | Ast.LVAL_ext (lv', Ast.COMP_named (Ast.COMP_app _))\n             -> lval_is_name lv'\n@@ -749,7 +753,7 @@ let pattern_resolving_visitor\n       end\n   in\n \n-  let resolve_arm { node = arm; _ } =\n+  let resolve_arm { node = arm; id = _ } =\n     match fst arm with\n         Ast.PAT_tag (lval, pats) ->\n           let lval_nm = lval_to_name lval in"}, {"sha": "c8b3b45e0d54791c9440588570b6d168d56d9743", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -546,9 +546,9 @@ let slot_ty (s:Ast.slot) : Ast.ty =\n \n let fn_output_ty (fn_ty:Ast.ty) : Ast.ty =\n   match fn_ty with\n-      Ast.TY_fn ({ Ast.sig_output_slot = slot; _ }, _) ->\n+      Ast.TY_fn (tsig, _) ->\n         begin\n-          match slot.Ast.slot_ty with\n+          match tsig.Ast.sig_output_slot.Ast.slot_ty with\n               Some ty -> ty\n             | None -> bug () \"function has untyped output slot\"\n         end\n@@ -579,8 +579,10 @@ let defn_is_static (d:defn) : bool =\n \n let defn_is_callable (d:defn) : bool =\n   match d with\n-      DEFN_slot { Ast.slot_ty = Some Ast.TY_fn _; _ }\n-    | DEFN_item { Ast.decl_item = (Ast.MOD_ITEM_fn _ ); _ } -> true\n+      DEFN_slot { Ast.slot_ty = Some Ast.TY_fn _;\n+                  Ast.slot_mode = _ }\n+    | DEFN_item { Ast.decl_item = (Ast.MOD_ITEM_fn _ );\n+                  Ast.decl_params = _ } -> true\n     | _ -> false\n ;;\n \n@@ -637,7 +639,7 @@ let atoms_to_names (atoms:Ast.atom array)\n \n let rec lval_to_name (lv:Ast.lval) : Ast.name =\n   match lv with\n-      Ast.LVAL_base { node = nb; _ } ->\n+      Ast.LVAL_base { node = nb; id = _ } ->\n         Ast.NAME_base nb\n     | Ast.LVAL_ext (lv, lv_comp) ->\n         let comp =\n@@ -655,7 +657,7 @@ let rec plval_to_name (pl:Ast.plval) : Ast.name =\n   match pl with\n       Ast.PLVAL_base nb ->\n         Ast.NAME_base nb\n-    | Ast.PLVAL_ext_name ({node = Ast.PEXP_lval pl; _}, nc) ->\n+    | Ast.PLVAL_ext_name ({node = Ast.PEXP_lval pl; id = _}, nc) ->\n         Ast.NAME_ext (plval_to_name pl, nc)\n     | _ -> bug () \"plval_to_name with plval that contains non-name components\"\n ;;\n@@ -1878,7 +1880,8 @@ let get_mod_item\n     (node:node_id)\n     : (Ast.mod_view * Ast.mod_items) =\n   match get_item cx node with\n-      { Ast.decl_item = Ast.MOD_ITEM_mod md; _ } -> md\n+      { Ast.decl_item = Ast.MOD_ITEM_mod md; \n+        Ast.decl_params = _ } -> md\n     | _ -> bugi cx node \"defn is not a mod\"\n ;;\n "}, {"sha": "cb0b7c83730928c0ceeb954f0d0568369e0dc6ab", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -1368,7 +1368,8 @@ let trans_visitor\n   and get_obj_vtbl (id:node_id) : Il.operand =\n     let obj =\n       match Hashtbl.find cx.ctxt_all_defns id with\n-          DEFN_item { Ast.decl_item=Ast.MOD_ITEM_obj obj; _} -> obj\n+          DEFN_item { Ast.decl_item = Ast.MOD_ITEM_obj obj;\n+                      Ast.decl_params = _} -> obj\n         | _ -> bug () \"Trans.get_obj_vtbl on non-obj referent\"\n     in\n       trans_crate_rel_data_operand (DATA_obj_vtbl id)\n@@ -4755,8 +4756,9 @@ let trans_visitor\n                 match lval with\n                     Ast.LVAL_ext (_, (Ast.COMP_named (Ast.COMP_ident id)))\n                   | Ast.LVAL_ext (_, (Ast.COMP_named (Ast.COMP_app (id, _))))\n-                  | Ast.LVAL_base { node = Ast.BASE_ident id; _ }\n-                  | Ast.LVAL_base { node = Ast.BASE_app (id, _); _ } -> id\n+                  | Ast.LVAL_base { node = Ast.BASE_ident id; id = _ }\n+                  | Ast.LVAL_base { node = Ast.BASE_app (id, _); id = _ } ->\n+                      id\n                   | _ -> bug cx \"expected lval ending in ident\"\n               in\n               let ttag ="}, {"sha": "2179c70e9686624b395e5eeb2e321eff8cc220ce", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -1261,13 +1261,18 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n     if cx.Semant.ctxt_main_name = Some path_name then\n       try\n         match Hashtbl.find cx.Semant.ctxt_all_item_types item_id with\n-            Ast.TY_fn ({ Ast.sig_input_slots = [| |]; _ }, _)\n-          | Ast.TY_fn ({ Ast.sig_input_slots = [| {\n-                Ast.slot_mode = Ast.MODE_local;\n-                Ast.slot_ty = Some (Ast.TY_vec Ast.TY_str)\n-              } |]; _}, _) ->\n-            ()\n-          | _ -> Common.err (Some item_id) \"main fn has bad type signature\"\n+            Ast.TY_fn (tsig, _) ->\n+              begin\n+                match tsig.Ast.sig_input_slots with\n+                    [| |]\n+                  | [| {\n+                         Ast.slot_mode = Ast.MODE_local;\n+                         Ast.slot_ty = Some (Ast.TY_vec Ast.TY_str)\n+                       } |] -> ()\n+                  | _ -> Common.err (Some item_id)\n+                      \"main fn has bad type signature\"\n+              end\n+          | _ -> Common.err (Some item_id) \"main item has bad non-fn type\"\n       with Not_found ->\n         Common.err (Some item_id) \"main item has no type (is it a function?)\"\n   in\n@@ -1325,14 +1330,21 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n \n     let visit_obj_fn_pre obj ident _ =\n       let obj_ty = Hashtbl.find cx.Semant.ctxt_all_item_types obj.Common.id in\n-      match obj_ty with\n-          Ast.TY_fn ({ Ast.sig_output_slot =\n-              { Ast.slot_ty = Some (Ast.TY_obj (_, methods)); _ }; _ }, _) ->\n-            push_fn_ctx_of_ty_fn (Hashtbl.find methods ident)\n-        | _ ->\n-            Common.bug ()\n-              \"Type.visit_obj_fn_pre: item doesn't have an object type (%a)\"\n-              Ast.sprintf_ty obj_ty\n+      let bad _ =\n+        Common.bug ()\n+          \"Type.visit_obj_fn_pre: item doesn't have an object type (%a)\"\n+          Ast.sprintf_ty obj_ty\n+      in\n+        match obj_ty with\n+            Ast.TY_fn (tsig, _) ->\n+              begin\n+                match tsig.Ast.sig_output_slot with\n+                    { Ast.slot_ty = Some (Ast.TY_obj (_, methods));\n+                      Ast.slot_mode = _ } ->\n+                      push_fn_ctx_of_ty_fn (Hashtbl.find methods ident)\n+                  | _ -> bad()\n+              end\n+          | _ -> bad()\n     in\n     let visit_obj_fn_post _ _ item = finish_function (item.Common.id) in\n "}, {"sha": "00629886ebce081bf784659bdb212e73460a170f", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -714,7 +714,7 @@ let condition_assigning_visitor\n \n         | Ast.STMT_alt_tag at ->\n             let precond = slot_inits (lval_slots cx at.Ast.alt_tag_lval) in\n-            let visit_arm { node = (pat, block); _ } =\n+            let visit_arm { node = (pat, block); id = _ } =\n               (* FIXME (issue #34): propagate tag-carried constrs here. *)\n               let rec get_slots pat =\n                 match pat with\n@@ -1048,7 +1048,7 @@ let graph_special_block_structure_building_visitor\n             let graph = ts.ts_graph in\n             let dsts = Hashtbl.find graph s.id in\n             let arm_blocks =\n-              let arm_block_id { node = (_, block); _ } = block.id in\n+              let arm_block_id { node = (_, block); id = _ } = block.id in\n               Array.to_list (Array.map arm_block_id at.Ast.alt_tag_arms)\n             in\n             let succ_stmts =\n@@ -1470,7 +1470,8 @@ let lifecycle_visitor\n               iflog cx (fun _ -> log cx \"entering a loop\");\n               Stack.push (Some (Stack.create ()))  loop_blocks;\n \n-          | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms; _ } ->\n+          | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms;\n+                               Ast.alt_tag_lval = _ } ->\n               let note_slot block slot_id =\n                 log cx\n                   \"noting implicit init for slot %d in pattern-alt block %d\"\n@@ -1479,7 +1480,7 @@ let lifecycle_visitor\n               in\n               let rec all_pat_slot_ids block pat =\n                 match pat with\n-                    Ast.PAT_slot ({ id = slot_id; _ }, _) ->\n+                    Ast.PAT_slot ({ id = slot_id; node = _ }, _) ->\n                       [ slot_id ]\n                   | Ast.PAT_tag (_, pats) ->\n                       List.concat\n@@ -1490,7 +1491,7 @@ let lifecycle_visitor\n               in\n                 Array.iter\n                   begin\n-                    fun { node = (pat, block); _ } ->\n+                    fun { node = (pat, block); id = _ } ->\n                       let slot_ids = all_pat_slot_ids block pat in\n                         List.iter (note_slot block) slot_ids;\n                         htab_put implicit_init_block_slots"}, {"sha": "d3fdc9b483b8af0500a99e9ade4e0cac794ea0af", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/beb4c07e26794dde482b4de85107f1e078375036/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=beb4c07e26794dde482b4de85107f1e078375036", "patch": "@@ -517,7 +517,7 @@ and walk_stmt\n       | Ast.STMT_alt_tag\n           { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } ->\n           walk_lval v lval;\n-            let walk_arm { node = (pat, block); _ } =\n+            let walk_arm { node = (pat, block); id=_ } =\n               walk_pat v pat;\n               walk_block v block\n             in"}]}