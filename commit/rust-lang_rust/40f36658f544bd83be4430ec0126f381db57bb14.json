{"sha": "40f36658f544bd83be4430ec0126f381db57bb14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZjM2NjU4ZjU0NGJkODNiZTQ0MzBlYzAxMjZmMzgxZGI1N2JiMTQ=", "commit": {"author": {"name": "Vincent Dal Maso", "email": "vincent.dalmaso.ext@delair-tech.com", "date": "2019-05-20T16:25:13Z"}, "committer": {"name": "Vincent Dal Maso", "email": "vincent.dalmaso.ext@delair-tech.com", "date": "2019-05-21T11:08:19Z"}, "message": "Fix breaking tests\n\nChanges:\n- Fix stderr breaking the tests\n- Adding tests over the if arms", "tree": {"sha": "ac38c394c1671bf0465edac38ec7431e26622433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac38c394c1671bf0465edac38ec7431e26622433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f36658f544bd83be4430ec0126f381db57bb14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f36658f544bd83be4430ec0126f381db57bb14", "html_url": "https://github.com/rust-lang/rust/commit/40f36658f544bd83be4430ec0126f381db57bb14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f36658f544bd83be4430ec0126f381db57bb14/comments", "author": null, "committer": null, "parents": [{"sha": "fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "html_url": "https://github.com/rust-lang/rust/commit/fa9f744c2cdb725fb36dbf1c8810e6600b845acd"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "d1213e5e5fdaf6db99c52fa507fe2e8bc4091b25", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=40f36658f544bd83be4430ec0126f381db57bb14", "patch": "@@ -232,6 +232,20 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         return Ok(&foo[0..]);\n     }\n \n+    if true {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    } else if false {\n+        let foo = \"bar\";\n+        return Ok(&foo[0..]);\n+    } else if true {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    } else {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    }\n+\n     // False positive `if_same_then_else`: `let (x, y)` vs. `let (y, x)`; see issue #3559.\n     if true {\n         let foo = \"\";"}, {"sha": "fa42afff0be0683709439d716df42ac9c16aa13e", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=40f36658f544bd83be4430ec0126f381db57bb14", "patch": "@@ -210,5 +210,38 @@ LL | |         try!(Ok(\"foo\"));\n LL | |     } else {\n    | |_____^\n \n-error: aborting due to 10 previous errors\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:244:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         let foo = \"\";\n+LL | |         return Ok(&foo[0..]);\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:241:20\n+   |\n+LL |       } else if true {\n+   |  ____________________^\n+LL | |         let foo = \"\";\n+LL | |         return Ok(&foo[0..]);\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has the same condition as a previous if\n+  --> $DIR/if_same_then_else.rs:241:15\n+   |\n+LL |     } else if true {\n+   |               ^^^^\n+   |\n+   = note: #[deny(clippy::ifs_same_cond)] on by default\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:235:8\n+   |\n+LL |     if true {\n+   |        ^^^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "880518b010a74e5da1ed4aa8c830df5a36c1dd63", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=40f36658f544bd83be4430ec0126f381db57bb14", "patch": "@@ -119,7 +119,7 @@ fn match_same_arms() {\n \n     let _ = match 42 {\n         1 => 2,\n-        2 => 2, //~ ERROR 2rd matched arms have same body\n+        2 => 2, //~ ERROR 2nd matched arms have same body\n         3 => 2, //~ ERROR 3rd matched arms have same body\n         4 => 3,\n         _ => 0,"}, {"sha": "42c6f910dc30a2ee46b8e9ea97844c575aea2bbb", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=40f36658f544bd83be4430ec0126f381db57bb14", "patch": "@@ -176,7 +176,7 @@ LL |         41 => 2,\n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:122:14\n    |\n-LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |              ^\n    |\n note: same as this\n@@ -216,12 +216,12 @@ LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n note: same as this\n   --> $DIR/match_same_arms.rs:122:14\n    |\n-LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |              ^\n help: consider refactoring into `2 | 3`\n   --> $DIR/match_same_arms.rs:122:9\n    |\n-LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |         ^\n \n error: aborting due to 12 previous errors"}, {"sha": "232ae28009b6091f40c366058e4c22130365fdd3", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f36658f544bd83be4430ec0126f381db57bb14/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=40f36658f544bd83be4430ec0126f381db57bb14", "patch": "@@ -89,11 +89,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:53:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:53:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n@@ -115,11 +115,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:59:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:59:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n@@ -141,11 +141,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:65:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:65:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -159,11 +159,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:74:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:74:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -177,11 +177,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:81:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:81:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -195,11 +195,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:87:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:87:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -213,11 +213,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:93:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:93:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -231,11 +231,11 @@ note: same as this\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n-note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:116:29\n+help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+  --> $DIR/matches.rs:116:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -249,11 +249,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:131:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:131:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: you don't need to add `&` to all patterns"}]}