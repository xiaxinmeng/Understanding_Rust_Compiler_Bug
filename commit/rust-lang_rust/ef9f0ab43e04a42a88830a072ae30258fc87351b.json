{"sha": "ef9f0ab43e04a42a88830a072ae30258fc87351b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOWYwYWI0M2UwNGE0MmE4ODgzMGEwNzJhZTMwMjU4ZmM4NzM1MWI=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-21T02:53:16Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-21T02:53:16Z"}, "message": "Fix some nits", "tree": {"sha": "a6778b6d39653efdb886b706aaf1fe1fdd471ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6778b6d39653efdb886b706aaf1fe1fdd471ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef9f0ab43e04a42a88830a072ae30258fc87351b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9f0ab43e04a42a88830a072ae30258fc87351b", "html_url": "https://github.com/rust-lang/rust/commit/ef9f0ab43e04a42a88830a072ae30258fc87351b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef9f0ab43e04a42a88830a072ae30258fc87351b/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e7c360af2535257c419646d150338eadcb8ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e7c360af2535257c419646d150338eadcb8ca3", "html_url": "https://github.com/rust-lang/rust/commit/e7e7c360af2535257c419646d150338eadcb8ca3"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "51f587ca46cbad408aeb704cf49292545689805a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef9f0ab43e04a42a88830a072ae30258fc87351b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9f0ab43e04a42a88830a072ae30258fc87351b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ef9f0ab43e04a42a88830a072ae30258fc87351b", "patch": "@@ -1869,20 +1869,21 @@ impl<'a> LoweringContext<'a> {\n                     };\n                     let attrs = vec![attr];\n \n-                    // Ok(val) => { #[allow(unreachable_code)] val }\n+                    // Ok(val) => #[allow(unreachable_code)] val,\n                     let ok_arm = {\n                         let val_ident = self.str_to_ident(\"val\");\n                         let val_pat = self.pat_ident(e.span, val_ident);\n                         let val_expr = P(self.expr_ident_with_attrs(e.span,\n                                                                     val_ident,\n                                                                     val_pat.id,\n-                                                                    From::from(attrs.clone())));\n+                                                                    ThinVec::from(attrs.clone())));\n                         let ok_pat = self.pat_ok(e.span, val_pat);\n \n                         self.arm(hir_vec![ok_pat], val_expr)\n                     };\n \n-                    // Err(err) => return Carrier::from_error(From::from(err))\n+                    // Err(err) => #[allow(unreachable_code)]\n+                    //             return Carrier::from_error(From::from(err)),\n                     let err_arm = {\n                         let err_ident = self.str_to_ident(\"err\");\n                         let err_local = self.pat_ident(e.span, err_ident);\n@@ -1902,7 +1903,7 @@ impl<'a> LoweringContext<'a> {\n \n                         let ret_expr = P(self.expr(e.span,\n                                                    hir::Expr_::ExprRet(Some(from_err_expr)),\n-                                                                       From::from(attrs)));\n+                                                                       ThinVec::from(attrs)));\n \n                         let err_pat = self.pat_err(e.span, err_local);\n                         self.arm(hir_vec![err_pat], ret_expr)"}, {"sha": "52f332a30c03b81f591af3bd4e099a6751eac8f1", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef9f0ab43e04a42a88830a072ae30258fc87351b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef9f0ab43e04a42a88830a072ae30258fc87351b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=ef9f0ab43e04a42a88830a072ae30258fc87351b", "patch": "@@ -322,6 +322,8 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                                             hir_pat.id, diagnostic);\n                         },\n \n+                        // Unreachable patterns in try expressions occur when one of the arms\n+                        // are an uninhabited type. Which is OK.\n                         hir::MatchSource::TryDesugar => {}\n                     }\n                 }"}]}