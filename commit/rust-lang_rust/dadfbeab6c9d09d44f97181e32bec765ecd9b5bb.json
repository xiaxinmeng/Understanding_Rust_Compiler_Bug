{"sha": "dadfbeab6c9d09d44f97181e32bec765ecd9b5bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGZiZWFiNmM5ZDA5ZDQ0Zjk3MTgxZTMyYmVjNzY1ZWNkOWI1YmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T14:56:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:38:37Z"}, "message": "Don't use stack_{load,store} for vectors", "tree": {"sha": "14dfd9fbf84bed1479767b6ebbd9b4e7f1c419bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14dfd9fbf84bed1479767b6ebbd9b4e7f1c419bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb", "html_url": "https://github.com/rust-lang/rust/commit/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78cdcd62be95069569ec75f9c099e7632f1e7e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/78cdcd62be95069569ec75f9c099e7632f1e7e9e", "html_url": "https://github.com/rust-lang/rust/commit/78cdcd62be95069569ec75f9c099e7632f1e7e9e"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "8ba9582f554689bfb371a9d4cf63a3ede08f42aa", "filename": "src/pointer.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadfbeab6c9d09d44f97181e32bec765ecd9b5bb/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=dadfbeab6c9d09d44f97181e32bec765ecd9b5bb", "patch": "@@ -126,8 +126,8 @@ impl Pointer {\n     ) -> Value {\n         match self.base {\n             PointerBase::Addr(base_addr) => fx.bcx.ins().load(ty, flags, base_addr, self.offset),\n-            PointerBase::Stack(stack_slot) => if ty == types::I128 {\n-                // WORKAROUND for stack_load.i128 not being implemented\n+            PointerBase::Stack(stack_slot) => if ty == types::I128 || ty.is_vector() {\n+                // WORKAROUND for stack_load.i128 and stack_load.iXxY not being implemented\n                 let base_addr = fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0);\n                 fx.bcx.ins().load(ty, flags, base_addr, self.offset)\n             } else {\n@@ -146,12 +146,15 @@ impl Pointer {\n             PointerBase::Addr(base_addr) => {\n                 fx.bcx.ins().store(flags, value, base_addr, self.offset);\n             }\n-            PointerBase::Stack(stack_slot) => if fx.bcx.func.dfg.value_type(value) == types::I128 {\n-                // WORKAROUND for stack_load.i128 not being implemented\n-                let base_addr = fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0);\n-                fx.bcx.ins().store(flags, value, base_addr, self.offset);\n-            } else {\n-                fx.bcx.ins().stack_store(value, stack_slot, self.offset);\n+            PointerBase::Stack(stack_slot) => {\n+                let val_ty = fx.bcx.func.dfg.value_type(value);\n+                if val_ty == types::I128 || val_ty.is_vector() {\n+                    // WORKAROUND for stack_store.i128 and stack_store.iXxY not being implemented\n+                    let base_addr = fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0);\n+                    fx.bcx.ins().store(flags, value, base_addr, self.offset);\n+                } else {\n+                    fx.bcx.ins().stack_store(value, stack_slot, self.offset);\n+                }\n             }\n         }\n     }"}]}