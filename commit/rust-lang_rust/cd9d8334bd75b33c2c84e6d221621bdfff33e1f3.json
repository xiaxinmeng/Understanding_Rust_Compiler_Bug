{"sha": "cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOWQ4MzM0YmQ3NWIzM2MyYzg0ZTZkMjIxNjIxYmRmZmYzM2UxZjM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-01T12:36:42Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-01T12:36:42Z"}, "message": "Implement slice_strip feature", "tree": {"sha": "6d7c74e671515053ab17e1c07388e7db9b9b9ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7c74e671515053ab17e1c07388e7db9b9b9ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "html_url": "https://github.com/rust-lang/rust/commit/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d462551a8600e57d8b6f87e71ea56868bc5da6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d462551a8600e57d8b6f87e71ea56868bc5da6cf", "html_url": "https://github.com/rust-lang/rust/commit/d462551a8600e57d8b6f87e71ea56868bc5da6cf"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "81c1cb295e5d714787502db5555946f0638fca12", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "patch": "@@ -1459,6 +1459,68 @@ impl<T> [T] {\n         m >= n && needle == &self[m - n..]\n     }\n \n+    /// Returns a subslice with the prefix removed.\n+    ///\n+    /// This method returns [`None`] if slice does not start with `prefix`.\n+    /// Also it returns the original slice if `prefix` is an empty slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_strip)]\n+    /// let v = &[10, 40, 30];\n+    /// assert_eq!(v.strip_prefix(&[10]), Some(&[40, 30][..]));\n+    /// assert_eq!(v.strip_prefix(&[10, 40]), Some(&[30][..]));\n+    /// assert_eq!(v.strip_prefix(&[50]), None);\n+    /// assert_eq!(v.strip_prefix(&[10, 50]), None);\n+    /// ```\n+    #[must_use = \"returns the subslice without modifying the original\"]\n+    #[unstable(feature = \"slice_strip\", issue = \"73413\")]\n+    pub fn strip_prefix(&self, prefix: &[T]) -> Option<&[T]>\n+    where\n+        T: PartialEq,\n+    {\n+        let n = prefix.len();\n+        if n <= self.len() {\n+            let (head, tail) = self.split_at(n);\n+            if head == prefix {\n+                return Some(tail);\n+            }\n+        }\n+        None\n+    }\n+\n+    /// Returns a subslice with the suffix removed.\n+    ///\n+    /// This method returns [`None`] if slice does not end with `suffix`.\n+    /// Also it returns the original slice if `suffix` is an empty slice\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_strip)]\n+    /// let v = &[10, 40, 30];\n+    /// assert_eq!(v.strip_suffix(&[30]), Some(&[10, 40][..]));\n+    /// assert_eq!(v.strip_suffix(&[40, 30]), Some(&[10][..]));\n+    /// assert_eq!(v.strip_suffix(&[50]), None);\n+    /// assert_eq!(v.strip_suffix(&[50, 30]), None);\n+    /// ```\n+    #[must_use = \"returns the subslice without modifying the original\"]\n+    #[unstable(feature = \"slice_strip\", issue = \"73413\")]\n+    pub fn strip_suffix(&self, suffix: &[T]) -> Option<&[T]>\n+    where\n+        T: PartialEq,\n+    {\n+        let (len, n) = (self.len(), suffix.len());\n+        if n <= len {\n+            let (head, tail) = self.split_at(len - n);\n+            if tail == suffix {\n+                return Some(head);\n+            }\n+        }\n+        None\n+    }\n+\n     /// Binary searches this sorted slice for a given element.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the"}]}