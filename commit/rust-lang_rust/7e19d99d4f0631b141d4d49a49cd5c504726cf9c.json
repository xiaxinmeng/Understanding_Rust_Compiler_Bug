{"sha": "7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "node_id": "C_kwDOAAsO6NoAKDdlMTlkOTlkNGYwNjMxYjE0MWQ0ZDQ5YTQ5Y2Q1YzUwNDcyNmNmOWM", "commit": {"author": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-04-28T08:27:16Z"}, "committer": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-05-02T15:13:21Z"}, "message": "Add a `localDocs` capability", "tree": {"sha": "ecd484c2a116cf9a0adf40a30304ee142e078519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd484c2a116cf9a0adf40a30304ee142e078519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE83x4qCmEA5TzaAMiEJh17BFTUhIFAmRRKJIACgkQEJh17BFT\nUhLaqg/+Lext0a3NpTN317BeUp5zQE39OYYnvr0lvOKAStvlfxpjzwaZm5KHiJBZ\n1bJ6KZVk6IhYBAFoETky017oR32TgQjrXAHxgwgnG8pd5SiJEJxe0kktuHb8OIjB\nHBKzx8xyVvkGKDXsJQ9u0LlX4ZUFBA0gb9+41SmTGwzhUvMVfppVuAJNwXEvG/I+\nYH8m2nlfxKNt7QajZZsoJGc3vAyDtKLFvRFtFRBtkvWj7ZWkgZTp/VosEf2trQiA\n+6aRmTVH8wWhI9tX4RNip16D2Agpl1+/QclKEtA7F+dl26PY9/vs7JQmcmfSj/d7\nMGgAEIG3HwsuT7eyXbIDOQMHwIAXGuFtryinb5wLdlB56LDBO4vlUQ9LAXtT+KjI\nXdyuJmGFYtGazzdKyytj/Tiug6OLKmfsCgxnsr2M13ykGycgtUqxzvqMGf4w69dA\nM17mC8yx65EqMZYHb542nXg+gMtDT8d6l8XVY0tWhVv52ruz7xRUZdNrqCKyOw3o\n78d/DDz4Mxum5wtsPmBott4Iyiv4arBOtSKncX29PYpetEUek/bRm3AIacuoTNHL\nlXD85bron1okOjaR5z+HI3I6W7qPG4l8LnfvoPyO797GXr//3NerukWmkVXeduXk\nHQGssy/qxjPA7aUCACAOj2voYQv/UyU2M5IBfP8bdOOv5PBhnFk=\n=V/jL\n-----END PGP SIGNATURE-----", "payload": "tree ecd484c2a116cf9a0adf40a30304ee142e078519\nparent 4ac39f0c98648b7095332d8b821cf93c935fdc3f\nauthor Ddystopia <alexanderbabak@proton.me> 1682670436 +0200\ncommitter Ddystopia <alexanderbabak@proton.me> 1683040401 +0200\n\nAdd a `localDocs` capability\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "html_url": "https://github.com/rust-lang/rust/commit/7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/comments", "author": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac39f0c98648b7095332d8b821cf93c935fdc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac39f0c98648b7095332d8b821cf93c935fdc3f", "html_url": "https://github.com/rust-lang/rust/commit/4ac39f0c98648b7095332d8b821cf93c935fdc3f"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "51874382a8b4c2f751bef4f315a35a83ae48a73f", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "patch": "@@ -1036,6 +1036,10 @@ impl Config {\n         self.experimental(\"codeActionGroup\")\n     }\n \n+    pub fn local_docs(&self) -> bool {\n+        self.experimental(\"localDocs\")\n+    }\n+\n     pub fn open_server_logs(&self) -> bool {\n         self.experimental(\"openServerLogs\")\n     }"}, {"sha": "b8e7c85b043afc38585dc78d8ee1894dd7e15c9f", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "patch": "@@ -40,8 +40,8 @@ use crate::{\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n     lsp_ext::{\n-        self, CrateInfoResult, FetchDependencyListParams, FetchDependencyListResult,\n-        PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n+        self, CrateInfoResult, ExternalDocsPair, ExternalDocsResponse, FetchDependencyListParams,\n+        FetchDependencyListResult, PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n     },\n     lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n@@ -1534,34 +1534,43 @@ pub(crate) fn handle_semantic_tokens_range(\n \n pub(crate) fn handle_open_docs(\n     snap: GlobalStateSnapshot,\n-        params: lsp_types::TextDocumentPositionParams,\n-    ) -> Result<(Option<lsp_types::Url>, Option<lsp_types::Url>)> {\n+    params: lsp_types::TextDocumentPositionParams,\n+) -> Result<ExternalDocsResponse> {\n     let _p = profile::span(\"handle_open_docs\");\n     let position = from_proto::file_position(&snap, params)?;\n \n     let ws_and_sysroot = snap.workspaces.iter().find_map(|ws| match ws {\n-                ProjectWorkspace::Cargo { cargo, sysroot, .. } => Some((cargo, sysroot.as_ref().ok())),\n-                    ProjectWorkspace::Json { .. } => None,\n-                    ProjectWorkspace::DetachedFiles { .. } => None,\n-                });\n+        ProjectWorkspace::Cargo { cargo, sysroot, .. } => Some((cargo, sysroot.as_ref().ok())),\n+        ProjectWorkspace::Json { .. } => None,\n+        ProjectWorkspace::DetachedFiles { .. } => None,\n+    });\n \n     let (cargo, sysroot) = match ws_and_sysroot {\n-                Some((ws, Some(sysroot))) => (Some(ws), Some(sysroot)),\n-                    _ => (None, None),\n-                };\n+        Some((ws, Some(sysroot))) => (Some(ws), Some(sysroot)),\n+        _ => (None, None),\n+    };\n \n     let sysroot = sysroot.map(|p| p.root().as_os_str());\n     let target_dir = cargo.map(|cargo| cargo.target_directory()).map(|p| p.as_os_str());\n \n-    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir, sysroot) else { return Ok((None, None)); };\n+    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir, sysroot) else {\n+        return if snap.config.local_docs() {\n+            Ok(ExternalDocsResponse::WithLocal(Default::default()))\n+            } else {\n+            Ok(ExternalDocsResponse::Simple(None))\n+            }\n+    };\n \n-    let web_url = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());\n-    let local_url = remote_urls.local_url.and_then(|it| Url::parse(&it).ok());\n+    let web = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());\n+    let local = remote_urls.local_url.and_then(|it| Url::parse(&it).ok());\n \n-    Ok((web_url, local_url))\n+    if snap.config.local_docs() {\n+        Ok(ExternalDocsResponse::WithLocal(ExternalDocsPair { web, local }))\n+    } else {\n+        Ok(ExternalDocsResponse::Simple(web))\n+    }\n }\n \n-\n pub(crate) fn handle_open_cargo_toml(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::OpenCargoTomlParams,"}, {"sha": "4d67c8b305fe338bfe0048af521b4c094dfa477e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "patch": "@@ -508,10 +508,24 @@ pub enum ExternalDocs {}\n \n impl Request for ExternalDocs {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = (Option<lsp_types::Url>, Option<lsp_types::Url>);\n+    type Result = ExternalDocsResponse;\n     const METHOD: &'static str = \"experimental/externalDocs\";\n }\n \n+#[derive(Debug, PartialEq, Serialize, Deserialize, Clone)]\n+#[serde(untagged)]\n+pub enum ExternalDocsResponse {\n+    Simple(Option<lsp_types::Url>),\n+    WithLocal(ExternalDocsPair),\n+}\n+\n+#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExternalDocsPair {\n+    pub web: Option<lsp_types::Url>,\n+    pub local: Option<lsp_types::Url>,\n+}\n+\n pub enum OpenCargoToml {}\n \n impl Request for OpenCargoToml {"}, {"sha": "bc58aa7220dc02aa9474f9f782ddcfe422854487", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e19d99d4f0631b141d4d49a49cd5c504726cf9c/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=7e19d99d4f0631b141d4d49a49cd5c504726cf9c", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 4e825bd8f3921c87\n+lsp_ext.rs hash: 2d60bbffe70ae198\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -386,14 +386,26 @@ rust-analyzer supports only one `kind`, `\"cargo\"`. The `args` for `\"cargo\"` look\n \n ## Open External Documentation\n \n-This request is sent from client to server to get a web and local URL(s) to documentation for the symbol under the cursor, if available.\n+This request is sent from the client to the server to obtain web and local URL(s) for documentation related to the symbol under the cursor, if available.\n \n-**Method** `experimental/externalDocs`\n+**Method:** `experimental/externalDocs`\n \n-**Request:**: `TextDocumentPositionParams`\n+**Request:** `TextDocumentPositionParams`\n+\n+**Response:** `string | null`\n+\n+## Local Documentation\n \n-**Response** `[string | null, string | null]`\n+**Experimental Client Capability:** `{ \"localDocs\": boolean }`\n \n+If this capability is set, the `Open External Documentation` request returned from the server will have the following structure:\n+\n+```typescript\n+interface ExternalDocsResponse {\n+    web?: string;\n+    local?: string;\n+}\n+```\n \n ## Analyzer Status\n "}]}