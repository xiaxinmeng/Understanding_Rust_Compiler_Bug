{"sha": "cf4e35339b1d5a613588b45c53d0e88da5363c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNGUzNTMzOWIxZDVhNjEzNTg4YjQ1YzUzZDBlODhkYTUzNjNjNjU=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:28:29Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:28:29Z"}, "message": "Add an Option<Span> argument to span_lint_and_help.", "tree": {"sha": "830fb97e01fb0a1e245aec7afd20494134881136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830fb97e01fb0a1e245aec7afd20494134881136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf4e35339b1d5a613588b45c53d0e88da5363c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4e35339b1d5a613588b45c53d0e88da5363c65", "html_url": "https://github.com/rust-lang/rust/commit/cf4e35339b1d5a613588b45c53d0e88da5363c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf4e35339b1d5a613588b45c53d0e88da5363c65/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03d3bd95b06b82246a51aaa8e424a67eb724037", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03d3bd95b06b82246a51aaa8e424a67eb724037", "html_url": "https://github.com/rust-lang/rust/commit/d03d3bd95b06b82246a51aaa8e424a67eb724037"}], "stats": {"total": 175, "additions": 138, "deletions": 37}, "files": [{"sha": "0c8efd755146ec2f03426b0b2f0d8c1950d6e957", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -50,6 +50,7 @@ impl EarlyLintPass for AsConversions {\n                 AS_CONVERSIONS,\n                 expr.span,\n                 \"using a potentially dangerous silent `as` conversion\",\n+                None,\n                 \"consider using a safe wrapper for this conversion\",\n             );\n         }"}, {"sha": "f8a8fdcd3aa35e9753f3b8cfa79c069b2df403c6", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -41,6 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 } else {\n                     \"`assert!(true)` will be optimized out by the compiler\"\n                 },\n+                None,\n                 \"remove it\",\n             );\n         };\n@@ -50,6 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n                 \"`assert!(false)` should probably be replaced\",\n+                None,\n                 \"use `panic!()` or `unreachable!()`\",\n             );\n         };\n@@ -59,6 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n                 &format!(\"`assert!(false, {})` should probably be replaced\", panic_message),\n+                None,\n                 &format!(\"use `panic!({})` or `unreachable!({})`\", panic_message, panic_message),\n             )\n         };"}, {"sha": "73b4cef472505ee4e5bc21e14028e615ce9dbeb2", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -85,6 +85,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n                     \"atomic loads cannot have `Release` and `AcqRel` ordering\",\n+                    None,\n                     \"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\"\n                 );\n             } else if method == \"store\" &&\n@@ -94,6 +95,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n                     \"atomic stores cannot have `Acquire` and `AcqRel` ordering\",\n+                    None,\n                     \"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\"\n                 );\n             }\n@@ -118,6 +120,7 @@ fn check_memory_fence(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 INVALID_ATOMIC_ORDERING,\n                 args[0].span,\n                 \"memory fences cannot have `Relaxed` ordering\",\n+                None,\n                 \"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\"\n             );\n         }"}, {"sha": "e842388ac982de04b3889ff9e0dbe7f860e625e1", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -105,6 +105,7 @@ impl CognitiveComplexity {\n                     rust_cc,\n                     self.limit.limit()\n                 ),\n+                None,\n                 \"you could split it up into multiple smaller functions\",\n             );\n         }"}, {"sha": "96df3ffe3ce6727650e8da1c95448c046aab2f74", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -104,6 +104,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ComparisonChain {\n             COMPARISON_CHAIN,\n             expr.span,\n             \"`if` chain can be rewritten with `match`\",\n+            None,\n             \"Consider rewriting the `if` chain to use `cmp` and `match`.\",\n         )\n     }"}, {"sha": "e513dcce64e5349fb6668ceb1bf3fc864d577809", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -48,6 +48,7 @@ impl EarlyLintPass for DbgMacro {\n                     DBG_MACRO,\n                     mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n+                    None,\n                     \"ensure to avoid having uses of it in version control\",\n                 );\n             }"}, {"sha": "95123e6ff6fe2740b912e8438f426592dc3834d2", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -61,6 +61,7 @@ impl EarlyLintPass for ElseIfWithoutElse {\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,\n                     \"`if` expression with an `else if`, but without a final `else`\",\n+                    None,\n                     \"add an `else` block here\",\n                 );\n             }"}, {"sha": "2c8721ae5051666d779699243c6a2af8b6d5a4b0", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -45,13 +45,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n-                span_lint_and_then(\n+                span_lint_and_help(\n                     cx,\n                     EMPTY_ENUM,\n                     item.span,\n                     \"enum with no variants\",\n-                    \"consider using the uninhabited type `!` (never type) or a wrapper around it \\\n-                    to introduce a type which can't be instantiated\",\n+                    Some(item.span),\n+                    \"consider using the uninhabited type `!` (never type) or a wrapper \\\n+                    around it to introduce a type which can't be instantiated\",\n                 );\n             }\n         }"}, {"sha": "a5871cf0cd4ddefda14a9341d4eb5803fd81dbd8", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -206,6 +206,7 @@ fn check_variant(\n         lint,\n         span,\n         &format!(\"All variants have the same {}fix: `{}`\", what, value),\n+        None,\n         &format!(\n             \"remove the {}fixes and use full paths to \\\n              the variants instead of glob imports\","}, {"sha": "82ca4baacb7a9763cd390532f369c36a88924941", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -114,6 +114,7 @@ impl ExcessiveBools {\n                 FN_PARAMS_EXCESSIVE_BOOLS,\n                 span,\n                 &format!(\"more than {} bools in function parameters\", self.max_fn_params_bools),\n+                None,\n                 \"consider refactoring bools into two-variant enums\",\n             );\n         }\n@@ -153,6 +154,7 @@ impl EarlyLintPass for ExcessiveBools {\n                         STRUCT_EXCESSIVE_BOOLS,\n                         item.span,\n                         &format!(\"more than {} bools in a struct\", self.max_struct_bools),\n+                        None,\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }"}, {"sha": "d2ee22e8706a9cea3207120beecdac2b117fcca8", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -188,6 +188,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n                     binop = binop_str,\n                     unop = unop_str\n                 ),\n+                None,\n                 &format!(\n                     \"put a space between `{binop}` and `{unop}` and remove the space after `{unop}`\",\n                     binop = binop_str,"}, {"sha": "c8c562fe29f53ebfd7af1c57c40da853767f29f5", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -431,6 +431,7 @@ fn check_needless_must_use(\n             DOUBLE_MUST_USE,\n             fn_header_span,\n             \"this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\",\n+            None,\n             \"either add some descriptive text or remove the attribute\",\n         );\n     }"}, {"sha": "c11e291f98e4b41766dbf22c8940d8f9fff3b74c", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -61,6 +61,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary boolean `not` operation\",\n+                            None,\n                             \"remove the `!` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n@@ -70,6 +71,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary `!=` operation\",\n+                            None,\n                             \"change to `==` and swap the blocks of the `if`/`else`\",\n                         );\n                     },"}, {"sha": "c5808dd540b6f43c3940e217d1328c549bf3f08b", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", help_msg);\n+                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", None, help_msg);\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind {\n@@ -154,6 +154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     INDEXING_SLICING,\n                     expr.span,\n                     \"indexing may panic.\",\n+                    None,\n                     \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n                 );\n             }"}, {"sha": "e343d690f6cd8a4237ac905a20a47e525c5dd9ec", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -137,6 +137,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n                 \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n                 self_type.to_string()\n             ),\n+            None,\n             &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n         );\n     } else {\n@@ -148,6 +149,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n                 \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n                 self_type.to_string()\n             ),\n+            None,\n             &format!(\"implement trait `Display` for type `{}` instead\", self_type.to_string()),\n         );\n     }"}, {"sha": "fe34d33fe652c2cf7f3ac258be6dc80840aa25b8", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -35,6 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IntegerDivision {\n                 INTEGER_DIVISION,\n                 expr.span,\n                 \"integer division\",\n+                None,\n                 \"division of integers may cause loss of precision. consider using floats.\",\n             );\n         }"}, {"sha": "deb57db1678965e946466bd042adc1d108e6e0e6", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n                         \"allocating a local array larger than {} bytes\",\n                         self.maximum_allowed_size\n                     ),\n+                    None,\n                     &format!(\n                         \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n                         snippet(cx, expr.span, \"[...]\")"}, {"sha": "710dec8d33fc9e085d83582857e7698fb99389a7", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -90,6 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_LOCK,\n                         local.span,\n                         \"non-binding let on a synchronization lock\",\n+                        None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n@@ -99,6 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_MUST_USE,\n                         local.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n+                        None,\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n@@ -107,6 +109,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_MUST_USE,\n                         local.span,\n                         \"non-binding let on a result of a `#[must_use]` function\",\n+                        None,\n                         \"consider explicitly using function result\"\n                     )\n                 }"}, {"sha": "619dd1f54d69be460446d4ffc6c46990f252fcb0", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -1402,6 +1402,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                  `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n+            None,\n             &format!(\n                 \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n                 snippet(cx, pat.span, \"_\"),\n@@ -1418,6 +1419,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                  `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n+            None,\n             &format!(\n                 \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n                 snippet(cx, pat.span, \"_\"),"}, {"sha": "8a0e47a3d31c552bd0026c366991ba82ac8ed4b4", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -53,6 +53,7 @@ impl LateLintPass<'_, '_> for MainRecursion {\n                     MAIN_RECURSION,\n                     func.span,\n                     &format!(\"recursing into entrypoint `{}`\", snippet(cx, func.span, \"main\")),\n+                    None,\n                     \"consider using another function for this recursion\"\n                 )\n             }"}, {"sha": "27e31222d006603c68715676936d92b15dc5cbcb", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n                     REST_PAT_IN_FULLY_BOUND_STRUCTS,\n                     pat.span,\n                     \"unnecessary use of `..` pattern in struct binding. All fields were already bound\",\n+                    None,\n                     \"consider removing `..` from this binding\",\n                 );\n             }\n@@ -887,6 +888,7 @@ fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n                     WILDCARD_IN_OR_PATTERNS,\n                     arm.pat.span,\n                     \"wildcard pattern covers any other pattern as it will match anyway.\",\n+                    None,\n                     \"Consider handling `_` separately.\",\n                 );\n             }"}, {"sha": "ab6865bf0f3b7675edd08a150d2c0dd0c4eee121", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -148,6 +148,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n                         \"replacing with `mem::uninitialized()`\",\n+                        None,\n                         \"consider using the `take_mut` crate instead\",\n                     );\n                 } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n@@ -157,6 +158,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n                         \"replacing with `mem::zeroed()`\",\n+                        None,\n                         \"consider using a default value or the `take_mut` crate instead\",\n                     );\n                 }"}, {"sha": "578ee9e0bfd3ec23724fa466da7c928bec99e152", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -2255,6 +2255,7 @@ fn lint_iter_nth<'a, 'tcx>(\n         ITER_NTH,\n         expr.span,\n         &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        None,\n         &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n     );\n }\n@@ -2364,6 +2365,7 @@ fn lint_iter_skip_next(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n             ITER_SKIP_NEXT,\n             expr.span,\n             \"called `skip(x).next()` on an iterator\",\n+            None,\n             \"this is more succinctly expressed by calling `nth(x)`\",\n         );\n     }\n@@ -2431,6 +2433,7 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             lint,\n             expr.span,\n             &format!(\"used `unwrap()` on `{}` value\", kind,),\n+            None,\n             &format!(\n                 \"if you don't want to handle the `{}` case gracefully, consider \\\n                  using `expect()` to provide a better panic message\",\n@@ -2458,6 +2461,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n             lint,\n             expr.span,\n             &format!(\"used `expect()` on `{}` value\", kind,),\n+            None,\n             &format!(\"if this value is an `{}`, it will panic\", none_value,),\n         );\n     }\n@@ -2478,6 +2482,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n                 OK_EXPECT,\n                 expr.span,\n                 \"called `ok().expect()` on a `Result` value\",\n+                None,\n                 \"you can call `expect()` directly on the `Result`\",\n             );\n         }\n@@ -2774,6 +2779,7 @@ fn lint_skip_while_next<'a, 'tcx>(\n             SKIP_WHILE_NEXT,\n             expr.span,\n             \"called `skip_while(p).next()` on an `Iterator`\",\n+            None,\n             \"this is more succinctly expressed by calling `.find(!p)` instead\",\n         );\n     }\n@@ -2790,7 +2796,7 @@ fn lint_filter_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2830,7 +2836,7 @@ fn lint_find_map<'a, 'tcx>(\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n         let msg = \"called `find(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_lint_and_help(cx, FIND_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2845,7 +2851,7 @@ fn lint_filter_map_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2861,7 +2867,7 @@ fn lint_filter_flat_map<'a, 'tcx>(\n         let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2877,7 +2883,7 @@ fn lint_filter_map_flat_map<'a, 'tcx>(\n         let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -3260,6 +3266,7 @@ fn lint_suspicious_map(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n         SUSPICIOUS_MAP,\n         expr.span,\n         \"this call to `map()` won't have an effect on the call to `count()`\",\n+        None,\n         \"make sure you did not confuse `map` with `filter` or `for_each`\",\n     );\n }\n@@ -3640,7 +3647,7 @@ fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &\n     }\n     let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n     let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n-    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n+    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }\n \n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {"}, {"sha": "adfd8dfb1c18af5abcdb6d4eca6414e9803ed86f", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -313,6 +313,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                     UNNEEDED_FIELD_PATTERN,\n                     pat.span,\n                     \"All the struct fields are matched to a wildcard pattern, consider using `..`.\",\n+                    None,\n                     &format!(\"Try with `{} {{ .. }}` instead\", type_name),\n                 );\n                 return;\n@@ -348,6 +349,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 field.span,\n                                 \"You matched a field with a wildcard pattern. Consider using `..` \\\n                                  instead\",\n+                                None,\n                                 &format!(\"Try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n                             );\n                         }"}, {"sha": "28183810df48977e3c776f568b58ab92633b6479", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -304,6 +304,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n         NEEDLESS_CONTINUE,\n         expr.span,\n         message,\n+        None,\n         &format!(\"{}\\n{}\", header, snip),\n     );\n }"}, {"sha": "66dfa20edb5e724890f43177332bfd720d941d44", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -46,6 +46,7 @@ impl EarlyLintPass for OptionEnvUnwrap {\n                     OPTION_ENV_UNWRAP,\n                     expr.span,\n                     \"this will panic at run-time if the environment variable doesn't exist at compile-time\",\n+                    None,\n                     \"consider using the `env!` macro instead\"\n                 );\n             }"}, {"sha": "30084e3e1ffce993a19efd30787bfd4c15fadf93", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -208,7 +208,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n             match parser.parse(r) {\n                 Ok(r) => {\n                     if let Some(repl) = is_trivial_regex(&r) {\n-                        span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                        span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", None, repl);\n                     }\n                 },\n                 Err(regex_syntax::Error::Parse(e)) => {\n@@ -236,7 +236,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n         match parser.parse(&r) {\n             Ok(r) => {\n                 if let Some(repl) = is_trivial_regex(&r) {\n-                    span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                    span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", None, repl);\n                 }\n             },\n             Err(regex_syntax::Error::Parse(e)) => {"}, {"sha": "67121729663c6aa4ec62fa46af4c673c42318171", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n                         TYPE_REPETITION_IN_BOUNDS,\n                         p.span,\n                         \"this type has already been used as a bound predicate\",\n+                        None,\n                         &hint_string,\n                     );\n                 }"}, {"sha": "e1d97973caaf9fc5cba494116dd2caeb4473ee34", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -343,6 +343,7 @@ impl Types {\n                                 BOX_VEC,\n                                 hir_ty.span,\n                                 \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                                None,\n                                 \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n                             );\n                             return; // don't recurse into the type\n@@ -437,6 +438,7 @@ impl Types {\n                             LINKEDLIST,\n                             hir_ty.span,\n                             \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n+                            None,\n                             \"a `VecDeque` might work\",\n                         );\n                         return; // don't recurse into the type\n@@ -1900,7 +1902,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n                         conclusion\n                     );\n \n-                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, &help);\n+                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);\n                 }\n             }\n         }"}, {"sha": "4e077b95b5c68024c9eaca1f78c343c62a2dfe9a", "filename": "clippy_lints/src/unnamed_address.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -89,6 +89,7 @@ impl LateLintPass<'_, '_> for UnnamedAddress {\n                     VTABLE_ADDRESS_COMPARISONS,\n                     expr.span,\n                     \"comparing trait object pointers compares a non-unique vtable address\",\n+                    None,\n                     \"consider extracting and comparing data pointers only\",\n                 );\n             }\n@@ -109,6 +110,7 @@ impl LateLintPass<'_, '_> for UnnamedAddress {\n                     VTABLE_ADDRESS_COMPARISONS,\n                     expr.span,\n                     \"comparing trait object pointers compares a non-unique vtable address\",\n+                    None,\n                     \"consider extracting and comparing data pointers only\",\n                 );\n             }"}, {"sha": "3d5e2f9fd21556f33562794350a22915d1983d2c", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -69,6 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         UNUSED_SELF,\n                         self_param.span,\n                         \"unused `self` argument\",\n+                        None,\n                         \"consider refactoring to a associated function\",\n                     );\n                     return;"}, {"sha": "3fb6cf966af8b82d026163df9486dd2b91df037f", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -62,12 +62,23 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    |\n ///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n-        diag.help(help);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+pub fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    help_span: Option<Span>,\n+    help: &str,\n+) {\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        if let Some(help_span) = help_span {\n+            db.span_help(help_span, help);\n+        } else {\n+            db.help(help);\n+        }\n+        docs_link(&mut db, lint);\n+        db.emit();\n     });\n }\n "}, {"sha": "803d3b2bc86d9ae209559a264642ecc69fcef4e2", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -196,8 +196,8 @@ declare_clippy_lint! {\n     ///     sugg.to_string(),\n     ///     Applicability::MachineApplicable,\n     /// );\n-    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n-    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n     /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n     /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n     /// ```\n@@ -403,6 +403,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n                     COMPILER_LINT_FUNCTIONS,\n                     path.ident.span,\n                     \"usage of a compiler lint function\",\n+                    None,\n                     &format!(\"please use the Clippy variant of this function: `{}`\", sugg),\n                 );\n             }\n@@ -481,15 +482,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n                     },\n                     \"span_help\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n                         let help_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n-                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow());\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), true);\n                     },\n                     \"span_note\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n                         let note_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n                         suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow());\n                     },\n                     \"help\" => {\n                         let help_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n-                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow());\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), false);\n                     }\n                     \"note\" => {\n                         let note_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n@@ -573,16 +574,33 @@ fn suggest_suggestion(\n     );\n }\n \n-fn suggest_help(cx: &LateContext<'_, '_>, expr: &Expr<'_>, and_then_snippets: &AndThenSnippets<'_>, help: &str) {\n+fn suggest_help(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    help: &str,\n+    with_span: bool,\n+) {\n+    let option_span = if with_span {\n+        format!(\"Some({})\", and_then_snippets.span)\n+    } else {\n+        \"None\".to_string()\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         COLLAPSIBLE_SPAN_LINT_CALLS,\n         expr.span,\n         \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n-            \"span_lint_and_help({}, {}, {}, {}, {})\",\n-            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg, help\n+            \"span_lint_and_help({}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            &option_span,\n+            help\n         ),\n         Applicability::MachineApplicable,\n     );"}, {"sha": "4d8d4438d881dade5084b16ccbb730e2019a4438", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -40,6 +40,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VerboseFileReads {\n                 VERBOSE_FILE_READS,\n                 expr.span,\n                 \"use of `File::read_to_end`\",\n+                None,\n                 \"consider using `fs::read` instead\",\n             );\n         } else if is_file_read_to_string(cx, expr) {\n@@ -48,6 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VerboseFileReads {\n                 VERBOSE_FILE_READS,\n                 expr.span,\n                 \"use of `File::read_to_string`\",\n+                None,\n                 \"consider using `fs::read_to_string` instead\",\n             )\n         }"}, {"sha": "fb4700d8743fdab5465c66a4668a97d66702de57", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -49,6 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     ZERO_DIVIDED_BY_ZERO,\n                     expr.span,\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n+                    None,\n                     &format!(\n                         \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,"}, {"sha": "94d6ccb316ea634ebda07276ee5c3f13b3cdc5e5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -265,6 +265,7 @@ impl EarlyLintPass for FooFunctions {\n             FOO_FUNCTIONS,\n             span,\n             \"function named `foo`\",\n+            None,\n             \"consider using a more meaningful name\"\n         );\n     }\n@@ -296,6 +297,7 @@ impl EarlyLintPass for FooFunctions {\n                 FOO_FUNCTIONS,\n                 span,\n                 \"function named `foo`\",\n+                None,\n                 \"consider using a more meaningful name\"\n             );\n         }"}, {"sha": "a22046d34a210ed3395cdba271addc22f24933c9", "filename": "tests/ui/collapsible_span_lint_calls.fixed", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.fixed?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -22,7 +22,15 @@ where\n }\n \n #[allow(unused_variables)]\n-fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {}\n+fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    option_span: Option<Span>,\n+    help: &str,\n+) {\n+}\n \n #[allow(unused_variables)]\n fn span_lint_and_note<'a, T: LintContext>(\n@@ -65,8 +73,8 @@ impl EarlyLintPass for Pass {\n         let predicate = true;\n \n         span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n-        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n-        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n         span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n         span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n "}, {"sha": "69b9525575131baa23a56902b52df568d8727ce0", "filename": "tests/ui/collapsible_span_lint_calls.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.rs?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -22,7 +22,15 @@ where\n }\n \n #[allow(unused_variables)]\n-fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {}\n+fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    option_span: Option<Span>,\n+    help: &str,\n+) {\n+}\n \n #[allow(unused_variables)]\n fn span_lint_and_note<'a, T: LintContext>("}, {"sha": "e6d5c3efa2245a1b08a47eaa5fdf2d192a07a1cc", "filename": "tests/ui/collapsible_span_lint_calls.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf4e35339b1d5a613588b45c53d0e88da5363c65/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.stderr?ref=cf4e35339b1d5a613588b45c53d0e88da5363c65", "patch": "@@ -1,5 +1,5 @@\n error: this call is collapsible\n-  --> $DIR/collapsible_span_lint_calls.rs:67:9\n+  --> $DIR/collapsible_span_lint_calls.rs:75:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.span_suggestion(expr.span, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n@@ -14,31 +14,31 @@ LL | #![deny(clippy::internal)]\n    = note: `#[deny(clippy::collapsible_span_lint_calls)]` implied by `#[deny(clippy::internal)]`\n \n error: this call is collapsible\n-  --> $DIR/collapsible_span_lint_calls.rs:70:9\n+  --> $DIR/collapsible_span_lint_calls.rs:78:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.span_help(expr.span, help_msg);\n LL | |         });\n-   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg)`\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg)`\n \n error: this call is collapsible\n-  --> $DIR/collapsible_span_lint_calls.rs:73:9\n+  --> $DIR/collapsible_span_lint_calls.rs:81:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.help(help_msg);\n LL | |         });\n-   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg)`\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg)`\n \n error: this call is collspible\n-  --> $DIR/collapsible_span_lint_calls.rs:76:9\n+  --> $DIR/collapsible_span_lint_calls.rs:84:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.span_note(expr.span, note_msg);\n LL | |         });\n    | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg)`\n \n error: this call is collspible\n-  --> $DIR/collapsible_span_lint_calls.rs:79:9\n+  --> $DIR/collapsible_span_lint_calls.rs:87:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.note(note_msg);"}]}