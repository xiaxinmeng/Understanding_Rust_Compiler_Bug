{"sha": "0e5a2099592358317f74ff5cd517a8b6f04cbee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWEyMDk5NTkyMzU4MzE3Zjc0ZmY1Y2Q1MTdhOGI2ZjA0Y2JlZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-06T03:07:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-06T03:07:04Z"}, "message": "Auto merge of #58058 - QuietMisdreavus:use-attr, r=GuillaumeGomez\n\nrustdoc: don't try to get a DefId for a Def that doesn't have one\n\nFixes https://github.com/rust-lang/rust/issues/58054\n\nThe compiler allows you to write a `use` statement for a built-in non-macro attribute, since `use proc_macro` can apply to both the `proc_macro` crate and the `#[proc_macro]` attribute. However, if you write a use statement for something that *doesn't* have this crossover, rustdoc will try to use it the same way as anything else... which resulted in an ICE because it tried to pull a DefId for something that didn't have one. This PR makes rustdoc skip those lookups when it encounters them, allowing it to properly process and render these imports.", "tree": {"sha": "7442426a065d576bb88dd42e9df1ec6091dfdeb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7442426a065d576bb88dd42e9df1ec6091dfdeb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5a2099592358317f74ff5cd517a8b6f04cbee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5a2099592358317f74ff5cd517a8b6f04cbee1", "html_url": "https://github.com/rust-lang/rust/commit/0e5a2099592358317f74ff5cd517a8b6f04cbee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5a2099592358317f74ff5cd517a8b6f04cbee1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e647cfe7481cf45f74c6e95940256a96218364", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e647cfe7481cf45f74c6e95940256a96218364", "html_url": "https://github.com/rust-lang/rust/commit/65e647cfe7481cf45f74c6e95940256a96218364"}, {"sha": "c955f172b2f09f28d187ed7634e18861258833e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c955f172b2f09f28d187ed7634e18861258833e5", "html_url": "https://github.com/rust-lang/rust/commit/c955f172b2f09f28d187ed7634e18861258833e5"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "8c8151e1e9509f4f47e65e2a94691a9c8cb4f835", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0e5a2099592358317f74ff5cd517a8b6f04cbee1", "patch": "@@ -37,8 +37,11 @@ use super::Clean;\n /// and `Some` of a vector of items if it was successfully expanded.\n pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHashSet<DefId>)\n                   -> Option<Vec<clean::Item>> {\n-    if def == Def::Err { return None }\n-    let did = def.def_id();\n+    let did = if let Some(did) = def.opt_def_id() {\n+        did\n+    } else {\n+        return None;\n+    };\n     if did.is_local() { return None }\n     let mut ret = Vec::new();\n     let inner = match def {"}, {"sha": "bd0525583f2cd2880c8cc6489ffe61ee430fc400", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0e5a2099592358317f74ff5cd517a8b6f04cbee1", "patch": "@@ -3835,7 +3835,7 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n \n fn resolve_use_source(cx: &DocContext, path: Path) -> ImportSource {\n     ImportSource {\n-        did: if path.def == Def::Err {\n+        did: if path.def.opt_def_id().is_none() {\n             None\n         } else {\n             Some(register_def(cx, path.def))"}, {"sha": "b8eb777a54ba4f548493643821ba085b3693fd45", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0e5a2099592358317f74ff5cd517a8b6f04cbee1", "patch": "@@ -284,10 +284,11 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         debug!(\"maybe_inline_local def: {:?}\", def);\n \n         let tcx = self.cx.tcx;\n-        if def == Def::Err {\n+        let def_did = if let Some(did) = def.opt_def_id() {\n+            did\n+        } else {\n             return false;\n-        }\n-        let def_did = def.def_id();\n+        };\n \n         let use_attrs = tcx.hir().attrs(id);\n         // Don't inline `doc(hidden)` imports so they can be stripped at a later stage."}, {"sha": "996b7bba62181499b2b2cb627b780f3d5ab9217e", "filename": "src/test/rustdoc/use-attr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Ftest%2Frustdoc%2Fuse-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5a2099592358317f74ff5cd517a8b6f04cbee1/src%2Ftest%2Frustdoc%2Fuse-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fuse-attr.rs?ref=0e5a2099592358317f74ff5cd517a8b6f04cbee1", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+\n+// ICE when rustdoc encountered a use statement of a non-macro attribute (see #58054)\n+\n+// @has use_attr/index.html\n+// @has - '//code' 'pub use proc_macro_attribute'\n+pub use proc_macro_attribute;\n+use proc_macro_derive;"}]}