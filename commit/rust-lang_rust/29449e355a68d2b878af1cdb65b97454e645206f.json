{"sha": "29449e355a68d2b878af1cdb65b97454e645206f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NDQ5ZTM1NWE2OGQyYjg3OGFmMWNkYjY1Yjk3NDU0ZTY0NTIwNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-31T00:20:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-31T00:20:36Z"}, "message": "auto merge of #8889 : erickt/rust/cleanup, r=catamorphism\n\nThis fixes a couple minor things I've been sitting on. It cleans up some warnings, CapCases some types in librustc's rscope module, and adds a fixme.", "tree": {"sha": "572fe324fe4e789f0e017456069ec7570b6a53cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572fe324fe4e789f0e017456069ec7570b6a53cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29449e355a68d2b878af1cdb65b97454e645206f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29449e355a68d2b878af1cdb65b97454e645206f", "html_url": "https://github.com/rust-lang/rust/commit/29449e355a68d2b878af1cdb65b97454e645206f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29449e355a68d2b878af1cdb65b97454e645206f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8002a09bf915bd186e4e455b25265b4160bfd125", "url": "https://api.github.com/repos/rust-lang/rust/commits/8002a09bf915bd186e4e455b25265b4160bfd125", "html_url": "https://github.com/rust-lang/rust/commit/8002a09bf915bd186e4e455b25265b4160bfd125"}, {"sha": "9730ed9b027f17441faa90fce26350991a76b1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9730ed9b027f17441faa90fce26350991a76b1d5", "html_url": "https://github.com/rust-lang/rust/commit/9730ed9b027f17441faa90fce26350991a76b1d5"}], "stats": {"total": 145, "additions": 64, "deletions": 81}, "files": [{"sha": "18cc5e65a8b4c6e7355ab9e01870cbce80bdaba2", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -11,7 +11,7 @@\n /*!\n  * Conversion from AST representation of types to the ty.rs\n  * representation.  The main routine here is `ast_ty_to_ty()`: each use\n- * is parameterized by an instance of `AstConv` and a `region_scope`.\n+ * is parameterized by an instance of `AstConv` and a `RegionScope`.\n  *\n  * The parameterization of `ast_ty_to_ty()` is because it behaves\n  * somewhat differently during the collect and check phases,\n@@ -23,12 +23,12 @@\n  * In the check phase, when the @FnCtxt is used as the `AstConv`,\n  * `get_item_ty()` just looks up the item type in `tcx.tcache`.\n  *\n- * The `region_scope` trait controls how region references are\n+ * The `RegionScope` trait controls how region references are\n  * handled.  It has two methods which are used to resolve anonymous\n  * region references (e.g., `&T`) and named region references (e.g.,\n  * `&a.T`).  There are numerous region scopes that can be used, but most\n- * commonly you want either `empty_rscope`, which permits only the static\n- * region, or `type_rscope`, which permits the self region if the type in\n+ * commonly you want either `EmptyRscope`, which permits only the static\n+ * region, or `TypeRscope`, which permits the self region if the type in\n  * question is parameterized by a region.\n  *\n  * Unlike the `AstConv` trait, the region scope can change as we descend\n@@ -58,7 +58,7 @@ use middle::ty::{substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::rscope::in_binding_rscope;\n-use middle::typeck::rscope::{region_scope, RegionError};\n+use middle::typeck::rscope::{RegionScope, RegionError};\n use middle::typeck::rscope::RegionParamNames;\n use middle::typeck::lookup_def_tcx;\n \n@@ -104,7 +104,7 @@ pub fn get_region_reporting_err(\n     }\n }\n \n-pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ast_region_to_region<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     default_span: span,\n@@ -129,7 +129,7 @@ pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Clone + 'static>(\n     get_region_reporting_err(this.tcx(), span, opt_lifetime, res)\n }\n \n-fn ast_path_substs<AC:AstConv,RS:region_scope + Clone + 'static>(\n+fn ast_path_substs<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     def_id: ast::def_id,\n@@ -200,7 +200,7 @@ fn ast_path_substs<AC:AstConv,RS:region_scope + Clone + 'static>(\n }\n \n pub fn ast_path_to_substs_and_ty<AC:AstConv,\n-                                 RS:region_scope + Clone + 'static>(\n+                                 RS:RegionScope + Clone + 'static>(\n                                  this: &AC,\n                                  rscope: &RS,\n                                  did: ast::def_id,\n@@ -217,7 +217,7 @@ pub fn ast_path_to_substs_and_ty<AC:AstConv,\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n \n-pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ast_path_to_trait_ref<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     trait_def_id: ast::def_id,\n@@ -240,7 +240,7 @@ pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Clone + 'static>(\n     return trait_ref;\n }\n \n-pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ast_path_to_ty<AC:AstConv,RS:RegionScope + Clone + 'static>(\n         this: &AC,\n         rscope: &RS,\n         did: ast::def_id,\n@@ -262,10 +262,10 @@ pub static NO_TPS: uint = 2;\n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n-pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Clone + 'static>(\n+pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope + Clone + 'static>(\n     this: &AC, rscope: &RS, ast_ty: &ast::Ty) -> ty::t {\n \n-    fn ast_mt_to_mt<AC:AstConv, RS:region_scope + Clone + 'static>(\n+    fn ast_mt_to_mt<AC:AstConv, RS:RegionScope + Clone + 'static>(\n         this: &AC, rscope: &RS, mt: &ast::mt) -> ty::mt {\n \n         ty::mt {ty: ast_ty_to_ty(this, rscope, mt.ty), mutbl: mt.mutbl}\n@@ -274,7 +274,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Clone + 'static>(\n     // Handle @, ~, and & being able to mean estrs and evecs.\n     // If a_seq_ty is a str or a vec, make it an estr/evec.\n     // Also handle first-class trait types.\n-    fn mk_pointer<AC:AstConv,RS:region_scope + Clone + 'static>(\n+    fn mk_pointer<AC:AstConv,RS:RegionScope + Clone + 'static>(\n         this: &AC,\n         rscope: &RS,\n         a_seq_ty: &ast::mt,\n@@ -540,7 +540,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Clone + 'static>(\n }\n \n pub fn ty_of_arg<AC:AstConv,\n-                 RS:region_scope + Clone + 'static>(\n+                 RS:RegionScope + Clone + 'static>(\n                  this: &AC,\n                  rscope: &RS,\n                  a: &ast::arg,\n@@ -588,7 +588,7 @@ struct SelfInfo {\n     explicit_self: ast::explicit_self\n }\n \n-pub fn ty_of_method<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ty_of_method<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -606,7 +606,7 @@ pub fn ty_of_method<AC:AstConv,RS:region_scope + Clone + 'static>(\n     (a.unwrap(), b)\n }\n \n-pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ty_of_bare_fn<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -619,7 +619,7 @@ pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n     b\n }\n \n-fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n+fn ty_of_method_or_bare_fn<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -657,7 +657,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n                                 output: output_ty}\n             });\n \n-    fn transform_self_ty<AC:AstConv,RS:region_scope + Clone + 'static>(\n+    fn transform_self_ty<AC:AstConv,RS:RegionScope + Clone + 'static>(\n         this: &AC,\n         rscope: &RS,\n         self_info: &SelfInfo) -> Option<ty::t>\n@@ -690,7 +690,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Clone + 'static>(\n     }\n }\n \n-pub fn ty_of_closure<AC:AstConv,RS:region_scope + Clone + 'static>(\n+pub fn ty_of_closure<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     this: &AC,\n     rscope: &RS,\n     sigil: ast::Sigil,"}, {"sha": "3016d40729b671530fd8457005246da9a6ab1a3c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -101,7 +101,7 @@ use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n use middle::typeck::rscope::bound_self_region;\n use middle::typeck::rscope::{RegionError};\n-use middle::typeck::rscope::region_scope;\n+use middle::typeck::rscope::RegionScope;\n use middle::typeck::{isr_alist, lookup_def_ccx};\n use middle::typeck::no_params;\n use middle::typeck::{require_same_types, method_map, vtable_map};\n@@ -705,7 +705,7 @@ impl FnCtxt {\n     }\n }\n \n-impl region_scope for FnCtxt {\n+impl RegionScope for FnCtxt {\n     fn anon_region(&self, span: span) -> Result<ty::Region, RegionError> {\n         result::Ok(self.infcx().next_region_var(infer::MiscVariable(span)))\n     }"}, {"sha": "71a9a041fb5791656f1ba3891a371c2608d69953", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -97,15 +97,15 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n }\n \n pub trait ToTy {\n-    fn to_ty<RS:region_scope + Clone + 'static>(\n+    fn to_ty<RS:RegionScope + Clone + 'static>(\n              &self,\n              rs: &RS,\n              ast_ty: &ast::Ty)\n              -> ty::t;\n }\n \n impl ToTy for CrateCtxt {\n-    fn to_ty<RS:region_scope + Clone + 'static>(\n+    fn to_ty<RS:RegionScope + Clone + 'static>(\n              &self,\n              rs: &RS,\n              ast_ty: &ast::Ty)\n@@ -163,7 +163,7 @@ pub fn get_enum_variant_types(ccx: &CrateCtxt,\n         let result_ty;\n         match variant.node.kind {\n             ast::tuple_variant_kind(ref args) if args.len() > 0 => {\n-                let rs = type_rscope(region_parameterization);\n+                let rs = TypeRscope(region_parameterization);\n                 let input_tys = args.map(|va| ccx.to_ty(&rs, &va.ty));\n                 result_ty = Some(ty::mk_ctor_fn(tcx, input_tys, enum_ty));\n             }\n@@ -724,7 +724,7 @@ pub fn convert_field(ccx: &CrateCtxt,\n                      generics: &ast::Generics) {\n     let region_parameterization =\n         RegionParameterization::from_variance_and_generics(rp, generics);\n-    let tt = ccx.to_ty(&type_rscope(region_parameterization), &v.node.ty);\n+    let tt = ccx.to_ty(&TypeRscope(region_parameterization), &v.node.ty);\n     write_ty_to_tcx(ccx.tcx, v.node.id, tt);\n     /* add the field to the tcache */\n     ccx.tcx.tcache.insert(local_def(v.node.id),\n@@ -863,7 +863,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n         let i_ty_generics = ty_generics(ccx, rp, generics, 0);\n         let region_parameterization =\n             RegionParameterization::from_variance_and_generics(rp, generics);\n-        let selfty = ccx.to_ty(&type_rscope(region_parameterization), selfty);\n+        let selfty = ccx.to_ty(&TypeRscope(region_parameterization), selfty);\n         write_ty_to_tcx(tcx, it.id, selfty);\n         tcx.tcache.insert(local_def(it.id),\n                           ty_param_bounds_and_ty {\n@@ -1024,7 +1024,7 @@ pub fn instantiate_trait_ref(ccx: &CrateCtxt,\n \n     let rp = RegionParameterization::from_variance_and_generics(rp, generics);\n \n-    let rscope = type_rscope(rp);\n+    let rscope = TypeRscope(rp);\n \n     match lookup_def_tcx(ccx.tcx, ast_trait_ref.path.span, ast_trait_ref.ref_id) {\n         ast::def_trait(trait_did) => {\n@@ -1099,7 +1099,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n     let rp = tcx.region_paramd_items.find(&it.id).map_move(|x| *x);\n     match it.node {\n       ast::item_static(ref t, _, _) => {\n-        let typ = ccx.to_ty(&empty_rscope, t);\n+        let typ = ccx.to_ty(&EmptyRscope, t);\n         let tpt = no_params(typ);\n         tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;\n@@ -1108,7 +1108,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n         assert!(rp.is_none());\n         let ty_generics = ty_generics(ccx, None, generics, 0);\n         let tofd = astconv::ty_of_bare_fn(ccx,\n-                                          &empty_rscope,\n+                                          &EmptyRscope,\n                                           purity,\n                                           abi,\n                                           &generics.lifetimes,\n@@ -1137,7 +1137,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::item)\n         let region_parameterization =\n             RegionParameterization::from_variance_and_generics(rp, generics);\n         let tpt = {\n-            let ty = ccx.to_ty(&type_rscope(region_parameterization), t);\n+            let ty = ccx.to_ty(&TypeRscope(region_parameterization), t);\n             ty_param_bounds_and_ty {\n                 generics: ty_generics(ccx, rp, generics, 0),\n                 ty: ty\n@@ -1197,7 +1197,7 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n                     type_param_defs: @~[],\n                     region_param: None,\n                 },\n-                ty: ast_ty_to_ty(ccx, &empty_rscope, t)\n+                ty: ast_ty_to_ty(ccx, &EmptyRscope, t)\n             }\n         }\n     }\n@@ -1282,7 +1282,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n                           -> ty::ty_param_bounds_and_ty {\n     let ty_generics = ty_generics(ccx, None, ast_generics, 0);\n     let region_param_names = RegionParamNames::from_generics(ast_generics);\n-    let rb = in_binding_rscope(&empty_rscope, region_param_names);\n+    let rb = in_binding_rscope(&EmptyRscope, region_param_names);\n     let input_tys = decl.inputs.map(|a| ty_of_arg(ccx, &rb, a, None) );\n     let output_ty = ast_ty_to_ty(ccx, &rb, &decl.output);\n "}, {"sha": "a93ff9c5fd0fe734109d018074421309eff90bd0", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -24,16 +24,16 @@ pub struct RegionError {\n     replacement: ty::Region\n }\n \n-pub trait region_scope {\n+pub trait RegionScope {\n     fn anon_region(&self, span: span) -> Result<ty::Region, RegionError>;\n     fn self_region(&self, span: span) -> Result<ty::Region, RegionError>;\n     fn named_region(&self, span: span, id: ast::ident)\n                       -> Result<ty::Region, RegionError>;\n }\n \n #[deriving(Clone)]\n-pub enum empty_rscope { empty_rscope }\n-impl region_scope for empty_rscope {\n+pub struct EmptyRscope;\n+impl RegionScope for EmptyRscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         result::Err(RegionError {\n             msg: ~\"only 'static is allowed here\",\n@@ -175,7 +175,7 @@ impl MethodRscope {\n     }\n }\n \n-impl region_scope for MethodRscope {\n+impl RegionScope for MethodRscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         result::Err(RegionError {\n             msg: ~\"anonymous lifetimes are not permitted here\",\n@@ -202,7 +202,7 @@ impl region_scope for MethodRscope {\n         if !self.region_param_names.has_ident(id) {\n             return RegionParamNames::undeclared_name(None);\n         }\n-        do empty_rscope.named_region(span, id).chain_err |_e| {\n+        do EmptyRscope.named_region(span, id).chain_err |_e| {\n             result::Err(RegionError {\n                 msg: ~\"lifetime is not in scope\",\n                 replacement: ty::re_bound(ty::br_self)\n@@ -212,9 +212,9 @@ impl region_scope for MethodRscope {\n }\n \n #[deriving(Clone)]\n-pub struct type_rscope(Option<RegionParameterization>);\n+pub struct TypeRscope(Option<RegionParameterization>);\n \n-impl type_rscope {\n+impl TypeRscope {\n     fn replacement(&self) -> ty::Region {\n         if self.is_some() {\n             ty::re_bound(ty::br_self)\n@@ -223,7 +223,7 @@ impl type_rscope {\n         }\n     }\n }\n-impl region_scope for type_rscope {\n+impl RegionScope for TypeRscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         result::Err(RegionError {\n             msg: ~\"anonymous lifetimes are not permitted here\",\n@@ -251,7 +251,7 @@ impl region_scope for type_rscope {\n     }\n     fn named_region(&self, span: span, id: ast::ident)\n                       -> Result<ty::Region, RegionError> {\n-        do empty_rscope.named_region(span, id).chain_err |_e| {\n+        do EmptyRscope.named_region(span, id).chain_err |_e| {\n             result::Err(RegionError {\n                 msg: ~\"only 'self is allowed as part of a type declaration\",\n                 replacement: self.replacement()\n@@ -268,36 +268,36 @@ pub fn bound_self_region(rp: Option<ty::region_variance>)\n     }\n }\n \n-pub struct binding_rscope {\n-    base: @region_scope,\n+pub struct BindingRscope {\n+    base: @RegionScope,\n     anon_bindings: @mut uint,\n     region_param_names: RegionParamNames,\n }\n \n-impl Clone for binding_rscope {\n-    fn clone(&self) -> binding_rscope {\n-        binding_rscope {\n+impl Clone for BindingRscope {\n+    fn clone(&self) -> BindingRscope {\n+        BindingRscope {\n             base: self.base,\n             anon_bindings: self.anon_bindings,\n             region_param_names: self.region_param_names.clone(),\n         }\n     }\n }\n \n-pub fn in_binding_rscope<RS:region_scope + Clone + 'static>(\n+pub fn in_binding_rscope<RS:RegionScope + Clone + 'static>(\n         this: &RS,\n         region_param_names: RegionParamNames)\n-     -> binding_rscope {\n+     -> BindingRscope {\n     let base = @(*this).clone();\n-    let base = base as @region_scope;\n-    binding_rscope {\n+    let base = base as @RegionScope;\n+    BindingRscope {\n         base: base,\n         anon_bindings: @mut 0,\n         region_param_names: region_param_names,\n     }\n }\n \n-impl region_scope for binding_rscope {\n+impl RegionScope for BindingRscope {\n     fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         let idx = *self.anon_bindings;\n         *self.anon_bindings += 1;"}, {"sha": "4bfa6b5afce3ec1fcdc41b41b930bef06ea2d46e", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -595,7 +595,6 @@ impl<'self> Parser<'self> {\n mod tests {\n     use super::*;\n     use prelude::*;\n-    use realstd::fmt::{String};\n \n     fn same(fmt: &'static str, p: ~[Piece<'static>]) {\n         let mut parser = Parser::new(fmt);"}, {"sha": "ac8f0022b95ec8fac04cf3986ddc6dd480898247", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -285,6 +285,7 @@ pub trait Primitive: Num\n                    + Div<Self,Self>\n                    + Rem<Self,Self> {\n     // FIXME (#5527): These should be associated constants\n+    // FIXME (#8888): Removing `unused_self` requires #8888 to be fixed.\n     fn bits(unused_self: Option<Self>) -> uint;\n     fn bytes(unused_self: Option<Self>) -> uint;\n }\n@@ -327,6 +328,7 @@ pub trait Float: Real\n     fn is_normal(&self) -> bool;\n     fn classify(&self) -> FPCategory;\n \n+    // FIXME (#8888): Removing `unused_self` requires #8888 to be fixed.\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n     fn digits(unused_self: Option<Self>) -> uint;\n     fn epsilon() -> Self;"}, {"sha": "38d8a244895e83cc2f8ab32edd4e46c1c7024726", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -12,6 +12,7 @@\n \n use cast;\n use clone::Clone;\n+#[cfg(not(test))]\n use cmp::Equiv;\n use iterator::{range, Iterator};\n use option::{Option, Some, None};"}, {"sha": "61dcc6c194782926f1cc80982c667adf15e69e33", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -340,7 +340,7 @@ mod test {\n     use parse::token::{str_to_ident};\n     use util::parser_testing::{string_to_tts_and_sess, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n-    use util::parser_testing::{string_to_stmt, strs_to_idents};\n+    use util::parser_testing::string_to_stmt;\n \n     // map a string to tts, return the tt without its parsesess\n     fn string_to_tts_only(source_str : @str) -> ~[ast::token_tree] {"}, {"sha": "7029ca2a49296969920d7cb804a0a077e93971a2", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -28,7 +28,6 @@ use std::io;\n use std::os;\n use std::result::{Ok, Err};\n use std::task;\n-use std::u64;\n use std::uint;\n \n fn fib(n: int) -> int {"}, {"sha": "5ded736ab9b0472f6869e863add80fd53e505e2a", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -13,11 +13,8 @@\n \n extern mod cci_const;\n use cci_const::bar;\n-use std::cast::transmute;\n static foo: extern \"C\" fn() = bar;\n \n pub fn main() {\n-    unsafe {\n-        assert_eq!(foo, bar);\n-    }\n+    assert_eq!(foo, bar);\n }"}, {"sha": "501a87955da5731b00a7e3df593cbe397f7ca277", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -18,8 +18,6 @@ struct S {\n }\n \n pub fn main() {\n-    unsafe {\n-        assert_eq!(foopy, f);\n-        assert_eq!(f, s.f);\n-    }\n+    assert_eq!(foopy, f);\n+    assert_eq!(f, s.f);\n }"}, {"sha": "5406fa283e7e76740a5169999113ba8ab01228b9", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -15,7 +15,7 @@ extern fn voidret2() {}\n \n extern fn uintret() -> uint { 22 }\n \n-extern fn uintvoidret(x: uint) {}\n+extern fn uintvoidret(_x: uint) {}\n \n extern fn uintuintuintuintret(x: uint, y: uint, z: uint) -> uint { x+y+z }\n "}, {"sha": "b883fbd6f6a04caa4573c8ed1e9ee7cfcac123bb", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cast::transmute;\n-\n extern fn f() {\n }\n \n extern fn g() {\n }\n \n pub fn main() {\n-    unsafe {\n-        let a: extern \"C\" fn() = f;\n-        let b: extern \"C\" fn() = f;\n-        let c: extern \"C\" fn() = g;\n+    let a: extern \"C\" fn() = f;\n+    let b: extern \"C\" fn() = f;\n+    let c: extern \"C\" fn() = g;\n \n-        assert_eq!(a, b);\n-        assert!(a != c);\n-    }\n+    assert_eq!(a, b);\n+    assert!(a != c);\n }"}, {"sha": "326e92d3b70857ffc13e047fd223f2d69b4a5112", "filename": "src/test/run-pass/issue-5917.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5917.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n struct T (&'static [int]);\n static t : T = T (&'static [5, 4, 3]);\n fn main () {"}, {"sha": "8baf15c8493be409930dc1d19c5622cde63a76b2", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -10,8 +10,6 @@\n \n // xfail-fast\n \n-use std::int;\n-\n trait vec_monad<A> {\n     fn bind<B>(&self, f: &fn(&A) -> ~[B]) -> ~[B];\n }"}, {"sha": "1c77a6b2fb95796e7ed8d84f28ec148076fcedf3", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n \n-use std::int;\n use std::libc::c_void;\n use std::ptr;\n use std::sys;"}, {"sha": "651b3342d5833e3f612c1f62384b9fab8d65c76f", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -10,8 +10,6 @@\n \n // xfail-fast\n \n-use std::uint;\n-\n pub trait plus {\n     fn plus(&self) -> int;\n }"}, {"sha": "f448bcb4ab5d27fda032df640a84f5ae4f3ff2b3", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29449e355a68d2b878af1cdb65b97454e645206f/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=29449e355a68d2b878af1cdb65b97454e645206f", "patch": "@@ -10,8 +10,6 @@\n \n // xfail-fast\n \n-use std::int;\n-\n trait to_str {\n     fn to_string(&self) -> ~str;\n }"}]}