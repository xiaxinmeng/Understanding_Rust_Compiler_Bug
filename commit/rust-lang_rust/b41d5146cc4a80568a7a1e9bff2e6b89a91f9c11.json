{"sha": "b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWQ1MTQ2Y2M0YTgwNTY4YTdhMWU5YmZmMmU2Yjg5YTkxZjljMTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:08:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:08:47Z"}, "message": "De-export os and libc. Close #2006.", "tree": {"sha": "569427192721bb4d42b840595383366be18f3c32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569427192721bb4d42b840595383366be18f3c32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "html_url": "https://github.com/rust-lang/rust/commit/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcb3bc536ec30a7a15c276de8e3c3c1e4643e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcb3bc536ec30a7a15c276de8e3c3c1e4643e1e", "html_url": "https://github.com/rust-lang/rust/commit/0bcb3bc536ec30a7a15c276de8e3c3c1e4643e1e"}], "stats": {"total": 1625, "additions": 731, "deletions": 894}, "files": [{"sha": "93e08562d3b43e9fd4a9bf62b5b1d13b92e434e9", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "patch": "@@ -37,6 +37,7 @@ Implicitly, all crates behave as if they included the following prologue:\n #[no_core];\n \n #[legacy_modes];\n+#[legacy_exports];\n \n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n@@ -307,9 +308,7 @@ mod pipes;\n mod gc;\n #[legacy_exports]\n mod io;\n-#[legacy_exports]\n mod libc;\n-#[legacy_exports]\n mod os;\n #[legacy_exports]\n mod path;"}, {"sha": "c7261aa8c29c00aa2a7be4dc894fb57d4ac744ad", "filename": "src/libcore/core.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "patch": "@@ -2,8 +2,6 @@\n \n // Export various ubiquitous types, constructors, methods.\n \n-#[legacy_exports];\n-\n use option::{Some, None};\n use Option = option::Option;\n use result::{Result, Ok, Err};"}, {"sha": "88920d725c6346dde44449c8f858f0a055a08061", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 651, "deletions": 750, "changes": 1401, "blob_url": "https://github.com/rust-lang/rust/blob/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "patch": "@@ -2,40 +2,40 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n /*!\n- * Bindings for libc.\n- *\n- * We consider the following specs reasonably normative with respect\n- * to interoperating with the C standard library (libc/msvcrt):\n- *\n- * * ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n- * * ISO 9899:1999 ('C99' or 'C9x').\n- * * ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n- * * ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n- * * ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n- *\n- * Despite having several names each, these are *reasonably* coherent\n- * point-in-time, list-of-definition sorts of specs. You can get each under a\n- * variety of names but will wind up with the same definition in each case.\n- *\n- * Our interface to these libraries is complicated by the non-universality of\n- * conformance to any of them. About the only thing universally supported is\n- * the first (C95), beyond that definitions quickly become absent on various\n- * platforms.\n- *\n- * We therefore wind up dividing our module-space up (mostly for the sake of\n- * sanity while editing, filling-in-details and eliminating duplication) into\n- * definitions common-to-all (held in modules named c95, c99, posix88, posix01\n- * and posix08) and definitions that appear only on *some* platforms (named\n- * 'extra'). This would be things like significant OSX foundation kit, or\n- * win32 library kernel32.dll, or various fancy glibc, linux or BSD\n- * extensions.\n- *\n- * In addition to the per-platform 'extra' modules, we define a module of\n- * 'common BSD' libc routines that never quite made it into POSIX but show up\n- * in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the\n- * final one from Berkeley after the lawsuits died down and the CSRG\n- * dissolved.\n- */\n+* Bindings for libc.\n+*\n+* We consider the following specs reasonably normative with respect\n+* to interoperating with the C standard library (libc/msvcrt):\n+*\n+* * ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n+* * ISO 9899:1999 ('C99' or 'C9x').\n+* * ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n+* * ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n+* * ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n+*\n+* Despite having several names each, these are *reasonably* coherent\n+* point-in-time, list-of-definition sorts of specs. You can get each under a\n+* variety of names but will wind up with the same definition in each case.\n+*\n+* Our interface to these libraries is complicated by the non-universality of\n+* conformance to any of them. About the only thing universally supported is\n+* the first (C95), beyond that definitions quickly become absent on various\n+* platforms.\n+*\n+* We therefore wind up dividing our module-space up (mostly for the sake of\n+* sanity while editing, filling-in-details and eliminating duplication) into\n+* definitions common-to-all (held in modules named c95, c99, posix88, posix01\n+* and posix08) and definitions that appear only on *some* platforms (named\n+* 'extra'). This would be things like significant OSX foundation kit, or\n+* win32 library kernel32.dll, or various fancy glibc, linux or BSD\n+* extensions.\n+*\n+* In addition to the per-platform 'extra' modules, we define a module of\n+* 'common BSD' libc routines that never quite made it into POSIX but show up\n+* in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the\n+* final one from Berkeley after the lawsuits died down and the CSRG\n+* dissolved.\n+*/\n \n #[allow(non_camel_case_types)];\n \n@@ -44,19 +44,19 @@\n \n // FIXME (#2006): change these to glob-exports when sufficiently supported.\n \n-use types::common::c95::*;\n-use types::common::c99::*;\n-use types::common::posix88::*;\n-use types::common::posix01::*;\n-use types::common::posix08::*;\n-use types::common::bsd44::*;\n-use types::os::arch::c95::*;\n-use types::os::arch::c99::*;\n-use types::os::arch::posix88::*;\n-use types::os::arch::posix01::*;\n-use types::os::arch::posix08::*;\n-use types::os::arch::bsd44::*;\n-use types::os::arch::extra::*;\n+pub use types::common::c95::*;\n+pub use types::common::c99::*;\n+pub use types::common::posix88::*;\n+pub use types::common::posix01::*;\n+pub use types::common::posix08::*;\n+pub use types::common::bsd44::*;\n+pub use types::os::arch::c95::*;\n+pub use types::os::arch::c99::*;\n+pub use types::os::arch::posix88::*;\n+pub use types::os::arch::posix01::*;\n+pub use types::os::arch::posix08::*;\n+pub use types::os::arch::bsd44::*;\n+pub use types::os::arch::extra::*;\n \n use consts::os::c95::*;\n use consts::os::c99::*;\n@@ -83,756 +83,682 @@ use funcs::posix08::unistd::*;\n use funcs::bsd44::*;\n use funcs::extra::*;\n \n-// FIXME (#2006): remove these 3 exports (and their uses next door in os::)\n-// when export globs work. They provide access (for now) for os:: to dig\n-// around in the rest of the platform-specific definitions.\n-\n-export types, funcs, consts;\n-\n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n-export c_float, c_double, c_void, FILE, fpos_t;\n-export DIR, dirent;\n-export c_char, c_schar, c_uchar;\n-export c_short, c_ushort, c_int, c_uint, c_long, c_ulong;\n-export size_t, ptrdiff_t, clock_t, time_t;\n-export c_longlong, c_ulonglong, intptr_t, uintptr_t;\n-export off_t, dev_t, ino_t, pid_t, mode_t, ssize_t;\n+pub use size_t;\n+pub use c_float, c_double, c_void, FILE, fpos_t;\n+pub use DIR, dirent;\n+pub use c_char, c_schar, c_uchar;\n+pub use c_short, c_ushort, c_int, c_uint, c_long, c_ulong;\n+pub use size_t, ptrdiff_t, clock_t, time_t;\n+pub use c_longlong, c_ulonglong, intptr_t, uintptr_t;\n+pub use off_t, dev_t, ino_t, pid_t, mode_t, ssize_t;\n \n-export EXIT_FAILURE, EXIT_SUCCESS, RAND_MAX,\n-       EOF, SEEK_SET, SEEK_CUR, SEEK_END, _IOFBF, _IONBF, _IOLBF,\n-       BUFSIZ, FOPEN_MAX, FILENAME_MAX, L_tmpnam, TMP_MAX,\n-       O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_CREAT, O_EXCL, O_TRUNC,\n-       S_IFIFO, S_IFCHR, S_IFBLK, S_IFDIR, S_IFREG, S_IFMT, S_IEXEC,\n-       S_IWRITE, S_IREAD, S_IRWXU, S_IXUSR, S_IWUSR, S_IRUSR, F_OK, R_OK,\n-       W_OK, X_OK, STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO;\n+pub use EXIT_FAILURE, EXIT_SUCCESS, RAND_MAX,\n+EOF, SEEK_SET, SEEK_CUR, SEEK_END, _IOFBF, _IONBF, _IOLBF,\n+BUFSIZ, FOPEN_MAX, FILENAME_MAX, L_tmpnam, TMP_MAX,\n+O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_CREAT, O_EXCL, O_TRUNC,\n+S_IFIFO, S_IFCHR, S_IFBLK, S_IFDIR, S_IFREG, S_IFMT, S_IEXEC,\n+S_IWRITE, S_IREAD, S_IRWXU, S_IXUSR, S_IWUSR, S_IRUSR, F_OK, R_OK,\n+W_OK, X_OK, STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO;\n \n-export isalnum, isalpha, iscntrl, isdigit, islower, isprint, ispunct,\n-       isspace, isupper, isxdigit, tolower, toupper;\n+pub use isalnum, isalpha, iscntrl, isdigit, islower, isprint, ispunct,\n+isspace, isupper, isxdigit, tolower, toupper;\n \n-export fopen, freopen, fflush, fclose, remove, tmpfile, setvbuf, setbuf,\n-       fgetc, fgets, fputc, fputs, puts, ungetc, fread, fwrite, fseek, ftell,\n-       rewind, fgetpos, fsetpos, feof, ferror, perror;\n+pub use fopen, freopen, fflush, fclose, remove, tmpfile, setvbuf, setbuf,\n+fgetc, fgets, fputc, fputs, puts, ungetc, fread, fwrite, fseek, ftell,\n+rewind, fgetpos, fsetpos, feof, ferror, perror;\n \n-export abs, labs, atof, atoi, strtod, strtol, strtoul, calloc, malloc,\n-       realloc, free, abort, exit, system, getenv, rand, srand;\n+pub use abs, labs, atof, atoi, strtod, strtol, strtoul, calloc, malloc,\n+realloc, free, abort, exit, system, getenv, rand, srand;\n \n-export strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcoll, strchr,\n-       strrchr, strspn, strcspn, strpbrk, strstr, strlen, strerror, strtok,\n-       strxfrm, memcpy, memmove, memcmp, memchr, memset;\n+pub use strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcoll, strchr,\n+strrchr, strspn, strcspn, strpbrk, strstr, strlen, strerror, strtok,\n+strxfrm, memcpy, memmove, memcmp, memchr, memset;\n \n-export chmod, mkdir;\n-export popen, pclose, fdopen, fileno;\n-export open, creat;\n-export access, chdir, close, dup, dup2, execv, execve, execvp, getcwd,\n-       getpid, isatty, lseek, pipe, read, rmdir, unlink, write;\n+pub use chmod, mkdir;\n+pub use popen, pclose, fdopen, fileno;\n+pub use open, creat;\n+pub use access, chdir, close, dup, dup2, execv, execve, execvp, getcwd,\n+getpid, isatty, lseek, pipe, read, rmdir, unlink, write;\n \n \n mod types {\n-    #[legacy_exports];\n \n     // Types tend to vary *per architecture* so we pull their definitions out\n     // into this module.\n \n     // Standard types that are opaque or common, so are not per-target.\n-    mod common {\n-        #[legacy_exports];\n-        mod c95 {\n-            #[legacy_exports];\n-            enum c_void {}\n-            enum FILE {}\n-            enum fpos_t {}\n+    pub mod common {\n+        pub mod c95 {\n+            pub enum c_void {}\n+            pub enum FILE {}\n+            pub enum fpos_t {}\n         }\n-        mod c99 {\n-            #[legacy_exports];\n-            type int8_t = i8;\n-            type int16_t = i16;\n-            type int32_t = i32;\n-            type int64_t = i64;\n-            type uint8_t = u8;\n-            type uint16_t = u16;\n-            type uint32_t = u32;\n-            type uint64_t = u64;\n+        pub mod c99 {\n+            pub type int8_t = i8;\n+            pub type int16_t = i16;\n+            pub type int32_t = i32;\n+            pub type int64_t = i64;\n+            pub type uint8_t = u8;\n+            pub type uint16_t = u16;\n+            pub type uint32_t = u32;\n+            pub type uint64_t = u64;\n         }\n-        mod posix88 {\n-            #[legacy_exports];\n-            enum DIR {}\n-            enum dirent {}\n+        pub mod posix88 {\n+            pub enum DIR {}\n+            pub enum dirent {}\n         }\n-        mod posix01 {\n-            #[legacy_exports]; }\n-        mod posix08 {\n-            #[legacy_exports]; }\n-        mod bsd44 {\n-            #[legacy_exports]; }\n+        pub mod posix01 {}\n+        pub mod posix08 {}\n+        pub mod bsd44 {}\n     }\n \n     // Standard types that are scalar but vary by OS and arch.\n \n     #[cfg(target_os = \"linux\")]\n-    mod os {\n-        #[legacy_exports];\n+    pub mod os {\n         #[cfg(target_arch = \"x86\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i32;\n-                type c_ulong = u32;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u32;\n-                type ptrdiff_t = i32;\n-                type clock_t = i32;\n-                type time_t = i32;\n-                type wchar_t = i32;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i32;\n+                pub type c_ulong = u32;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u32;\n+                pub type ptrdiff_t = i32;\n+                pub type clock_t = i32;\n+                pub type time_t = i32;\n+                pub type wchar_t = i32;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i32;\n-                type dev_t = u64;\n-                type ino_t = u32;\n-                type pid_t = i32;\n-                type uid_t = u32;\n-                type gid_t = u32;\n-                type useconds_t = u32;\n-                type mode_t = u32;\n-                type ssize_t = i32;\n-            }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n+            pub mod posix88 {\n+                pub type off_t = i32;\n+                pub type dev_t = u64;\n+                pub type ino_t = u32;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u32;\n+                pub type ssize_t = i32;\n             }\n+            pub mod posix01 {}\n+            pub mod posix08 {}\n+            pub mod bsd44 {}\n+            pub mod extra {}\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i64;\n-                type c_ulong = u64;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u64;\n-                type ptrdiff_t = i64;\n-                type clock_t = i64;\n-                type time_t = i64;\n-                type wchar_t = i32;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i64;\n+                pub type c_ulong = u64;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = i64;\n+                pub type time_t = i64;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = u64;\n+                pub type ino_t = u64;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u32;\n+                pub type ssize_t = i64;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i64;\n-                type dev_t = u64;\n-                type ino_t = u64;\n-                type pid_t = i32;\n-                type uid_t = u32;\n-                type gid_t = u32;\n-                type useconds_t = u32;\n-                type mode_t = u32;\n-                type ssize_t = i64;\n+            pub mod posix01 {\n             }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n             }\n         }\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n-    mod os {\n-        #[legacy_exports];\n+    pub mod os {\n         #[cfg(target_arch = \"x86_64\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i64;\n-                type c_ulong = u64;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u64;\n-                type ptrdiff_t = i64;\n-                type clock_t = i32;\n-                type time_t = i64;\n-                type wchar_t = i32;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i64;\n+                pub type c_ulong = u64;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = i32;\n+                pub type time_t = i64;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = u32;\n+                pub type ino_t = u32;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i64;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i64;\n-                type dev_t = u32;\n-                type ino_t = u32;\n-                type pid_t = i32;\n-                type uid_t = u32;\n-                type gid_t = u32;\n-                type useconds_t = u32;\n-                type mode_t = u16;\n-                type ssize_t = i64;\n+            pub mod posix01 {\n             }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n             }\n         }\n     }\n \n     #[cfg(target_os = \"win32\")]\n-    mod os {\n-        #[legacy_exports];\n+    pub mod os {\n         #[cfg(target_arch = \"x86\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i32;\n-                type c_ulong = u32;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u32;\n-                type ptrdiff_t = i32;\n-                type clock_t = i32;\n-                type time_t = i32;\n-                type wchar_t = u16;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i32;\n+                pub type c_ulong = u32;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u32;\n+                pub type ptrdiff_t = i32;\n+                pub type clock_t = i32;\n+                pub type time_t = i32;\n+                pub type wchar_t = u16;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod posix88 {\n+                pub type off_t = i32;\n+                pub type dev_t = u32;\n+                pub type ino_t = i16;\n+                pub type pid_t = i32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i32;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i32;\n-                type dev_t = u32;\n-                type ino_t = i16;\n-                type pid_t = i32;\n-                type useconds_t = u32;\n-                type mode_t = u16;\n-                type ssize_t = i32;\n+            pub mod posix01 {\n             }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n-                type BOOL = c_int;\n-                type BYTE = u8;\n-                type CCHAR = c_char;\n-                type CHAR = c_char;\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n+                pub type BOOL = c_int;\n+                pub type BYTE = u8;\n+                pub type CCHAR = c_char;\n+                pub type CHAR = c_char;\n \n-                type DWORD = c_ulong;\n-                type DWORDLONG = c_ulonglong;\n+                pub type DWORD = c_ulong;\n+                pub type DWORDLONG = c_ulonglong;\n \n-                type HANDLE = LPVOID;\n-                type HMODULE = c_uint;\n+                pub type HANDLE = LPVOID;\n+                pub type HMODULE = c_uint;\n \n-                type LONG_PTR = c_long;\n+                pub type LONG_PTR = c_long;\n \n-                type LPCWSTR = *WCHAR;\n-                type LPCSTR = *CHAR;\n+                pub type LPCWSTR = *WCHAR;\n+                pub type LPCSTR = *CHAR;\n \n-                type LPWSTR = *mut WCHAR;\n-                type LPSTR = *mut CHAR;\n+                pub type LPWSTR = *mut WCHAR;\n+                pub type LPSTR = *mut CHAR;\n \n                 // Not really, but opaque to us.\n-                type LPSECURITY_ATTRIBUTES = LPVOID;\n+                pub type LPSECURITY_ATTRIBUTES = LPVOID;\n \n-                type LPVOID = *mut c_void;\n-                type LPWORD = *mut WORD;\n+                pub type LPVOID = *mut c_void;\n+                pub type LPWORD = *mut WORD;\n \n-                type LRESULT = LONG_PTR;\n-                type PBOOL = *mut BOOL;\n-                type WCHAR = wchar_t;\n-                type WORD = u16;\n+                pub type LRESULT = LONG_PTR;\n+                pub type PBOOL = *mut BOOL;\n+                pub type WCHAR = wchar_t;\n+                pub type WORD = u16;\n             }\n         }\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    mod os {\n-        #[legacy_exports];\n+    pub mod os {\n         #[cfg(target_arch = \"x86\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i32;\n-                type c_ulong = u32;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u32;\n-                type ptrdiff_t = i32;\n-                type clock_t = u32;\n-                type time_t = i32;\n-                type wchar_t = i32;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i32;\n+                pub type c_ulong = u32;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u32;\n+                pub type ptrdiff_t = i32;\n+                pub type clock_t = u32;\n+                pub type time_t = i32;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = i32;\n+                pub type ino_t = u64;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i32;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i64;\n-                type dev_t = i32;\n-                type ino_t = u64;\n-                type pid_t = i32;\n-                type uid_t = u32;\n-                type gid_t = u32;\n-                type useconds_t = u32;\n-                type mode_t = u16;\n-                type ssize_t = i32;\n+            pub mod posix01 {\n             }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n             }\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n-        mod arch {\n-            #[legacy_exports];\n-            mod c95 {\n-                #[legacy_exports];\n-                type c_char = i8;\n-                type c_schar = i8;\n-                type c_uchar = u8;\n-                type c_short = i16;\n-                type c_ushort = u16;\n-                type c_int = i32;\n-                type c_uint = u32;\n-                type c_long = i64;\n-                type c_ulong = u64;\n-                type c_float = f32;\n-                type c_double = f64;\n-                type size_t = u64;\n-                type ptrdiff_t = i64;\n-                type clock_t = u64;\n-                type time_t = i64;\n-                type wchar_t = i32;\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i64;\n+                pub type c_ulong = u64;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = u64;\n+                pub type time_t = i64;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n             }\n-            mod c99 {\n-                #[legacy_exports];\n-                type c_longlong = i64;\n-                type c_ulonglong = u64;\n-                type intptr_t = int;\n-                type uintptr_t = uint;\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = i32;\n+                pub type ino_t = u64;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i64;\n             }\n-            mod posix88 {\n-                #[legacy_exports];\n-                type off_t = i64;\n-                type dev_t = i32;\n-                type ino_t = u64;\n-                type pid_t = i32;\n-                type uid_t = u32;\n-                type gid_t = u32;\n-                type useconds_t = u32;\n-                type mode_t = u16;\n-                type ssize_t = i64;\n+            pub mod posix01 {\n             }\n-            mod posix01 {\n-                #[legacy_exports]; }\n-            mod posix08 {\n-                #[legacy_exports]; }\n-            mod bsd44 {\n-                #[legacy_exports]; }\n-            mod extra {\n-                #[legacy_exports];\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n             }\n         }\n     }\n }\n \n-mod consts {\n-    #[legacy_exports];\n-\n+pub mod consts {\n     // Consts tend to vary per OS so we pull their definitions out\n     // into this module.\n \n     #[cfg(target_os = \"win32\")]\n-    mod os {\n-        #[legacy_exports];\n-        mod c95 {\n-            #[legacy_exports];\n-            const EXIT_FAILURE : int = 1;\n-            const EXIT_SUCCESS : int = 0;\n-            const RAND_MAX : int = 32767;\n-            const EOF : int = -1;\n-            const SEEK_SET : int = 0;\n-            const SEEK_CUR : int = 1;\n-            const SEEK_END : int = 2;\n-            const _IOFBF : int = 0;\n-            const _IONBF : int = 4;\n-            const _IOLBF : int = 64;\n-            const BUFSIZ : uint = 512_u;\n-            const FOPEN_MAX : uint = 20_u;\n-            const FILENAME_MAX : uint = 260_u;\n-            const L_tmpnam : uint = 16_u;\n-            const TMP_MAX : uint = 32767_u;\n+    pub mod os {\n+        pub mod c95 {\n+            pub const EXIT_FAILURE : int = 1;\n+            pub const EXIT_SUCCESS : int = 0;\n+            pub const RAND_MAX : int = 32767;\n+            pub const EOF : int = -1;\n+            pub const SEEK_SET : int = 0;\n+            pub const SEEK_CUR : int = 1;\n+            pub const SEEK_END : int = 2;\n+            pub const _IOFBF : int = 0;\n+            pub const _IONBF : int = 4;\n+            pub const _IOLBF : int = 64;\n+            pub const BUFSIZ : uint = 512_u;\n+            pub const FOPEN_MAX : uint = 20_u;\n+            pub const FILENAME_MAX : uint = 260_u;\n+            pub const L_tmpnam : uint = 16_u;\n+            pub const TMP_MAX : uint = 32767_u;\n         }\n-        mod c99 {\n-            #[legacy_exports]; }\n-        mod posix88 {\n-            #[legacy_exports];\n-            const O_RDONLY : int = 0;\n-            const O_WRONLY : int = 1;\n-            const O_RDWR : int = 2;\n-            const O_APPEND : int = 8;\n-            const O_CREAT : int = 256;\n-            const O_EXCL : int = 1024;\n-            const O_TRUNC : int = 512;\n-            const S_IFIFO : int = 4096;\n-            const S_IFCHR : int = 8192;\n-            const S_IFBLK : int = 12288;\n-            const S_IFDIR : int = 16384;\n-            const S_IFREG : int = 32768;\n-            const S_IFMT : int = 61440;\n-            const S_IEXEC : int = 64;\n-            const S_IWRITE : int = 128;\n-            const S_IREAD : int = 256;\n-            const S_IRWXU : int = 448;\n-            const S_IXUSR : int = 64;\n-            const S_IWUSR : int = 128;\n-            const S_IRUSR : int = 256;\n-            const F_OK : int = 0;\n-            const R_OK : int = 4;\n-            const W_OK : int = 2;\n-            const X_OK : int = 1;\n-            const STDIN_FILENO : int = 0;\n-            const STDOUT_FILENO : int = 1;\n-            const STDERR_FILENO : int = 2;\n+        pub mod c99 {\n         }\n-        mod posix01 {\n-            #[legacy_exports]; }\n-        mod posix08 {\n-            #[legacy_exports]; }\n-        mod bsd44 {\n-            #[legacy_exports]; }\n-        mod extra {\n-            #[legacy_exports];\n-            const O_TEXT : int = 16384;\n-            const O_BINARY : int = 32768;\n-            const O_NOINHERIT: int = 128;\n-\n-            const ERROR_SUCCESS : int = 0;\n-            const ERROR_INSUFFICIENT_BUFFER : int = 122;\n+        pub mod posix88 {\n+            pub const O_RDONLY : int = 0;\n+            pub const O_WRONLY : int = 1;\n+            pub const O_RDWR : int = 2;\n+            pub const O_APPEND : int = 8;\n+            pub const O_CREAT : int = 256;\n+            pub const O_EXCL : int = 1024;\n+            pub const O_TRUNC : int = 512;\n+            pub const S_IFIFO : int = 4096;\n+            pub const S_IFCHR : int = 8192;\n+            pub const S_IFBLK : int = 12288;\n+            pub const S_IFDIR : int = 16384;\n+            pub const S_IFREG : int = 32768;\n+            pub const S_IFMT : int = 61440;\n+            pub const S_IEXEC : int = 64;\n+            pub const S_IWRITE : int = 128;\n+            pub const S_IREAD : int = 256;\n+            pub const S_IRWXU : int = 448;\n+            pub const S_IXUSR : int = 64;\n+            pub const S_IWUSR : int = 128;\n+            pub const S_IRUSR : int = 256;\n+            pub const F_OK : int = 0;\n+            pub const R_OK : int = 4;\n+            pub const W_OK : int = 2;\n+            pub const X_OK : int = 1;\n+            pub const STDIN_FILENO : int = 0;\n+            pub const STDOUT_FILENO : int = 1;\n+            pub const STDERR_FILENO : int = 2;\n+        }\n+        pub mod posix01 {\n+        }\n+        pub mod posix08 {\n+        }\n+        pub mod bsd44 {\n+        }\n+        pub mod extra {\n+            pub const O_TEXT : int = 16384;\n+            pub const O_BINARY : int = 32768;\n+            pub const O_NOINHERIT: int = 128;\n+\n+            pub const ERROR_SUCCESS : int = 0;\n+            pub const ERROR_INSUFFICIENT_BUFFER : int = 122;\n         }\n     }\n \n \n     #[cfg(target_os = \"linux\")]\n-    mod os {\n-        #[legacy_exports];\n-        mod c95 {\n-            #[legacy_exports];\n-            const EXIT_FAILURE : int = 1;\n-            const EXIT_SUCCESS : int = 0;\n-            const RAND_MAX : int = 2147483647;\n-            const EOF : int = -1;\n-            const SEEK_SET : int = 0;\n-            const SEEK_CUR : int = 1;\n-            const SEEK_END : int = 2;\n-            const _IOFBF : int = 0;\n-            const _IONBF : int = 2;\n-            const _IOLBF : int = 1;\n-            const BUFSIZ : uint = 8192_u;\n-            const FOPEN_MAX : uint = 16_u;\n-            const FILENAME_MAX : uint = 4096_u;\n-            const L_tmpnam : uint = 20_u;\n-            const TMP_MAX : uint = 238328_u;\n+    pub mod os {\n+        pub mod c95 {\n+            pub const EXIT_FAILURE : int = 1;\n+            pub const EXIT_SUCCESS : int = 0;\n+            pub const RAND_MAX : int = 2147483647;\n+            pub const EOF : int = -1;\n+            pub const SEEK_SET : int = 0;\n+            pub const SEEK_CUR : int = 1;\n+            pub const SEEK_END : int = 2;\n+            pub const _IOFBF : int = 0;\n+            pub const _IONBF : int = 2;\n+            pub const _IOLBF : int = 1;\n+            pub const BUFSIZ : uint = 8192_u;\n+            pub const FOPEN_MAX : uint = 16_u;\n+            pub const FILENAME_MAX : uint = 4096_u;\n+            pub const L_tmpnam : uint = 20_u;\n+            pub const TMP_MAX : uint = 238328_u;\n+        }\n+        pub mod c99 {\n         }\n-        mod c99 {\n-            #[legacy_exports]; }\n-        mod posix88 {\n-            #[legacy_exports];\n-            const O_RDONLY : int = 0;\n-            const O_WRONLY : int = 1;\n-            const O_RDWR : int = 2;\n-            const O_APPEND : int = 1024;\n-            const O_CREAT : int = 64;\n-            const O_EXCL : int = 128;\n-            const O_TRUNC : int = 512;\n-            const S_IFIFO : int = 4096;\n-            const S_IFCHR : int = 8192;\n-            const S_IFBLK : int = 24576;\n-            const S_IFDIR : int = 16384;\n-            const S_IFREG : int = 32768;\n-            const S_IFMT : int = 61440;\n-            const S_IEXEC : int = 64;\n-            const S_IWRITE : int = 128;\n-            const S_IREAD : int = 256;\n-            const S_IRWXU : int = 448;\n-            const S_IXUSR : int = 64;\n-            const S_IWUSR : int = 128;\n-            const S_IRUSR : int = 256;\n-            const F_OK : int = 0;\n-            const R_OK : int = 4;\n-            const W_OK : int = 2;\n-            const X_OK : int = 1;\n-            const STDIN_FILENO : int = 0;\n-            const STDOUT_FILENO : int = 1;\n-            const STDERR_FILENO : int = 2;\n-            const F_LOCK : int = 1;\n-            const F_TEST : int = 3;\n-            const F_TLOCK : int = 2;\n-            const F_ULOCK : int = 0;\n+        pub mod posix88 {\n+            pub const O_RDONLY : int = 0;\n+            pub const O_WRONLY : int = 1;\n+            pub const O_RDWR : int = 2;\n+            pub const O_APPEND : int = 1024;\n+            pub const O_CREAT : int = 64;\n+            pub const O_EXCL : int = 128;\n+            pub const O_TRUNC : int = 512;\n+            pub const S_IFIFO : int = 4096;\n+            pub const S_IFCHR : int = 8192;\n+            pub const S_IFBLK : int = 24576;\n+            pub const S_IFDIR : int = 16384;\n+            pub const S_IFREG : int = 32768;\n+            pub const S_IFMT : int = 61440;\n+            pub const S_IEXEC : int = 64;\n+            pub const S_IWRITE : int = 128;\n+            pub const S_IREAD : int = 256;\n+            pub const S_IRWXU : int = 448;\n+            pub const S_IXUSR : int = 64;\n+            pub const S_IWUSR : int = 128;\n+            pub const S_IRUSR : int = 256;\n+            pub const F_OK : int = 0;\n+            pub const R_OK : int = 4;\n+            pub const W_OK : int = 2;\n+            pub const X_OK : int = 1;\n+            pub const STDIN_FILENO : int = 0;\n+            pub const STDOUT_FILENO : int = 1;\n+            pub const STDERR_FILENO : int = 2;\n+            pub const F_LOCK : int = 1;\n+            pub const F_TEST : int = 3;\n+            pub const F_TLOCK : int = 2;\n+            pub const F_ULOCK : int = 0;\n         }\n-        mod posix01 {\n-            #[legacy_exports]; }\n-        mod posix08 {\n-            #[legacy_exports]; }\n-        mod bsd44 {\n-            #[legacy_exports]; }\n-        mod extra {\n-            #[legacy_exports];\n-            const O_RSYNC : int = 1052672;\n-            const O_DSYNC : int = 4096;\n-            const O_SYNC : int = 1052672;\n+        pub mod posix01 {\n+        }\n+        pub mod posix08 {\n+        }\n+        pub mod bsd44 {\n+        }\n+        pub mod extra {\n+            pub const O_RSYNC : int = 1052672;\n+            pub const O_DSYNC : int = 4096;\n+            pub const O_SYNC : int = 1052672;\n         }\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n-    mod os {\n-        #[legacy_exports];\n-        mod c95 {\n-            #[legacy_exports];\n-            const EXIT_FAILURE : int = 1;\n-            const EXIT_SUCCESS : int = 0;\n-            const RAND_MAX : int = 2147483647;\n-            const EOF : int = -1;\n-            const SEEK_SET : int = 0;\n-            const SEEK_CUR : int = 1;\n-            const SEEK_END : int = 2;\n-            const _IOFBF : int = 0;\n-            const _IONBF : int = 2;\n-            const _IOLBF : int = 1;\n-            const BUFSIZ : uint = 1024_u;\n-            const FOPEN_MAX : uint = 20_u;\n-            const FILENAME_MAX : uint = 1024_u;\n-            const L_tmpnam : uint = 1024_u;\n-            const TMP_MAX : uint = 308915776_u;\n+    pub mod os {\n+        pub mod c95 {\n+            pub const EXIT_FAILURE : int = 1;\n+            pub const EXIT_SUCCESS : int = 0;\n+            pub const RAND_MAX : int = 2147483647;\n+            pub const EOF : int = -1;\n+            pub const SEEK_SET : int = 0;\n+            pub const SEEK_CUR : int = 1;\n+            pub const SEEK_END : int = 2;\n+            pub const _IOFBF : int = 0;\n+            pub const _IONBF : int = 2;\n+            pub const _IOLBF : int = 1;\n+            pub const BUFSIZ : uint = 1024_u;\n+            pub const FOPEN_MAX : uint = 20_u;\n+            pub const FILENAME_MAX : uint = 1024_u;\n+            pub const L_tmpnam : uint = 1024_u;\n+            pub const TMP_MAX : uint = 308915776_u;\n+        }\n+        pub mod c99 {\n+        }\n+        pub mod posix88 {\n+            pub const O_RDONLY : int = 0;\n+            pub const O_WRONLY : int = 1;\n+            pub const O_RDWR : int = 2;\n+            pub const O_APPEND : int = 8;\n+            pub const O_CREAT : int = 512;\n+            pub const O_EXCL : int = 2048;\n+            pub const O_TRUNC : int = 1024;\n+            pub const S_IFIFO : int = 4096;\n+            pub const S_IFCHR : int = 8192;\n+            pub const S_IFBLK : int = 24576;\n+            pub const S_IFDIR : int = 16384;\n+            pub const S_IFREG : int = 32768;\n+            pub const S_IFMT : int = 61440;\n+            pub const S_IEXEC : int = 64;\n+            pub const S_IWRITE : int = 128;\n+            pub const S_IREAD : int = 256;\n+            pub const S_IRWXU : int = 448;\n+            pub const S_IXUSR : int = 64;\n+            pub const S_IWUSR : int = 128;\n+            pub const S_IRUSR : int = 256;\n+            pub const F_OK : int = 0;\n+            pub const R_OK : int = 4;\n+            pub const W_OK : int = 2;\n+            pub const X_OK : int = 1;\n+            pub const STDIN_FILENO : int = 0;\n+            pub const STDOUT_FILENO : int = 1;\n+            pub const STDERR_FILENO : int = 2;\n+            pub const F_LOCK : int = 1;\n+            pub const F_TEST : int = 3;\n+            pub const F_TLOCK : int = 2;\n+            pub const F_ULOCK : int = 0;\n+        }\n+        pub mod posix01 {\n+        }\n+        pub mod posix08 {\n         }\n-        mod c99 {\n-            #[legacy_exports]; }\n-        mod posix88 {\n-            #[legacy_exports];\n-            const O_RDONLY : int = 0;\n-            const O_WRONLY : int = 1;\n-            const O_RDWR : int = 2;\n-            const O_APPEND : int = 8;\n-            const O_CREAT : int = 512;\n-            const O_EXCL : int = 2048;\n-            const O_TRUNC : int = 1024;\n-            const S_IFIFO : int = 4096;\n-            const S_IFCHR : int = 8192;\n-            const S_IFBLK : int = 24576;\n-            const S_IFDIR : int = 16384;\n-            const S_IFREG : int = 32768;\n-            const S_IFMT : int = 61440;\n-            const S_IEXEC : int = 64;\n-            const S_IWRITE : int = 128;\n-            const S_IREAD : int = 256;\n-            const S_IRWXU : int = 448;\n-            const S_IXUSR : int = 64;\n-            const S_IWUSR : int = 128;\n-            const S_IRUSR : int = 256;\n-            const F_OK : int = 0;\n-            const R_OK : int = 4;\n-            const W_OK : int = 2;\n-            const X_OK : int = 1;\n-            const STDIN_FILENO : int = 0;\n-            const STDOUT_FILENO : int = 1;\n-            const STDERR_FILENO : int = 2;\n-            const F_LOCK : int = 1;\n-            const F_TEST : int = 3;\n-            const F_TLOCK : int = 2;\n-            const F_ULOCK : int = 0;\n+        pub mod bsd44 {\n         }\n-        mod posix01 {\n-            #[legacy_exports]; }\n-        mod posix08 {\n-            #[legacy_exports]; }\n-        mod bsd44 {\n-            #[legacy_exports]; }\n-        mod extra {\n-            #[legacy_exports];\n-            const O_SYNC : int = 128;\n-            const CTL_KERN: int = 1;\n-            const KERN_PROC: int = 14;\n-            const KERN_PROC_PATHNAME: int = 12;\n+        pub mod extra {\n+            pub const O_SYNC : int = 128;\n+            pub const CTL_KERN: int = 1;\n+            pub const KERN_PROC: int = 14;\n+            pub const KERN_PROC_PATHNAME: int = 12;\n         }\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    mod os {\n-        #[legacy_exports];\n-        mod c95 {\n-            #[legacy_exports];\n-            const EXIT_FAILURE : int = 1;\n-            const EXIT_SUCCESS : int = 0;\n-            const RAND_MAX : int = 2147483647;\n-            const EOF : int = -1;\n-            const SEEK_SET : int = 0;\n-            const SEEK_CUR : int = 1;\n-            const SEEK_END : int = 2;\n-            const _IOFBF : int = 0;\n-            const _IONBF : int = 2;\n-            const _IOLBF : int = 1;\n-            const BUFSIZ : uint = 1024_u;\n-            const FOPEN_MAX : uint = 20_u;\n-            const FILENAME_MAX : uint = 1024_u;\n-            const L_tmpnam : uint = 1024_u;\n-            const TMP_MAX : uint = 308915776_u;\n+    pub mod os {\n+        pub mod c95 {\n+            pub const EXIT_FAILURE : int = 1;\n+            pub const EXIT_SUCCESS : int = 0;\n+            pub const RAND_MAX : int = 2147483647;\n+            pub const EOF : int = -1;\n+            pub const SEEK_SET : int = 0;\n+            pub const SEEK_CUR : int = 1;\n+            pub const SEEK_END : int = 2;\n+            pub const _IOFBF : int = 0;\n+            pub const _IONBF : int = 2;\n+            pub const _IOLBF : int = 1;\n+            pub const BUFSIZ : uint = 1024_u;\n+            pub const FOPEN_MAX : uint = 20_u;\n+            pub const FILENAME_MAX : uint = 1024_u;\n+            pub const L_tmpnam : uint = 1024_u;\n+            pub const TMP_MAX : uint = 308915776_u;\n         }\n-        mod c99 {\n-            #[legacy_exports]; }\n-        mod posix88 {\n-            #[legacy_exports];\n-            const O_RDONLY : int = 0;\n-            const O_WRONLY : int = 1;\n-            const O_RDWR : int = 2;\n-            const O_APPEND : int = 8;\n-            const O_CREAT : int = 512;\n-            const O_EXCL : int = 2048;\n-            const O_TRUNC : int = 1024;\n-            const S_IFIFO : int = 4096;\n-            const S_IFCHR : int = 8192;\n-            const S_IFBLK : int = 24576;\n-            const S_IFDIR : int = 16384;\n-            const S_IFREG : int = 32768;\n-            const S_IFMT : int = 61440;\n-            const S_IEXEC : int = 64;\n-            const S_IWRITE : int = 128;\n-            const S_IREAD : int = 256;\n-            const S_IRWXU : int = 448;\n-            const S_IXUSR : int = 64;\n-            const S_IWUSR : int = 128;\n-            const S_IRUSR : int = 256;\n-            const F_OK : int = 0;\n-            const R_OK : int = 4;\n-            const W_OK : int = 2;\n-            const X_OK : int = 1;\n-            const STDIN_FILENO : int = 0;\n-            const STDOUT_FILENO : int = 1;\n-            const STDERR_FILENO : int = 2;\n-            const F_LOCK : int = 1;\n-            const F_TEST : int = 3;\n-            const F_TLOCK : int = 2;\n-            const F_ULOCK : int = 0;\n+        pub mod c99 {\n         }\n-        mod posix01 {\n-            #[legacy_exports]; }\n-        mod posix08 {\n-            #[legacy_exports]; }\n-        mod bsd44 {\n-            #[legacy_exports]; }\n-        mod extra {\n-            #[legacy_exports];\n-            const O_DSYNC : int = 4194304;\n-            const O_SYNC : int = 128;\n-            const F_FULLFSYNC : int = 51;\n+        pub mod posix88 {\n+            pub const O_RDONLY : int = 0;\n+            pub const O_WRONLY : int = 1;\n+            pub const O_RDWR : int = 2;\n+            pub const O_APPEND : int = 8;\n+            pub const O_CREAT : int = 512;\n+            pub const O_EXCL : int = 2048;\n+            pub const O_TRUNC : int = 1024;\n+            pub const S_IFIFO : int = 4096;\n+            pub const S_IFCHR : int = 8192;\n+            pub const S_IFBLK : int = 24576;\n+            pub const S_IFDIR : int = 16384;\n+            pub const S_IFREG : int = 32768;\n+            pub const S_IFMT : int = 61440;\n+            pub const S_IEXEC : int = 64;\n+            pub const S_IWRITE : int = 128;\n+            pub const S_IREAD : int = 256;\n+            pub const S_IRWXU : int = 448;\n+            pub const S_IXUSR : int = 64;\n+            pub const S_IWUSR : int = 128;\n+            pub const S_IRUSR : int = 256;\n+            pub const F_OK : int = 0;\n+            pub const R_OK : int = 4;\n+            pub const W_OK : int = 2;\n+            pub const X_OK : int = 1;\n+            pub const STDIN_FILENO : int = 0;\n+            pub const STDOUT_FILENO : int = 1;\n+            pub const STDERR_FILENO : int = 2;\n+            pub const F_LOCK : int = 1;\n+            pub const F_TEST : int = 3;\n+            pub const F_TLOCK : int = 2;\n+            pub const F_ULOCK : int = 0;\n+        }\n+        pub mod posix01 {\n+        }\n+        pub mod posix08 {\n+        }\n+        pub mod bsd44 {\n+        }\n+        pub mod extra {\n+            pub const O_DSYNC : int = 4194304;\n+            pub const O_SYNC : int = 128;\n+            pub const F_FULLFSYNC : int = 51;\n         }\n     }\n }\n \n \n-mod funcs {\n-    #[legacy_exports];\n-\n+pub mod funcs {\n     // Thankfull most of c95 is universally available and does not vary by OS\n     // or anything. The same is not true of POSIX.\n \n-    mod c95 {\n-        #[legacy_exports];\n-\n+    pub mod c95 {\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod ctype {\n-            #[legacy_exports];\n+        pub extern mod ctype {\n             fn isalnum(c: c_int) -> c_int;\n             fn isalpha(c: c_int) -> c_int;\n             fn iscntrl(c: c_int) -> c_int;\n@@ -850,9 +776,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stdio {\n-            #[legacy_exports];\n-\n+        pub extern mod stdio {\n             fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n             fn freopen(filename: *c_char, mode: *c_char,\n                        file: *FILE) -> *FILE;\n@@ -882,7 +806,8 @@ mod funcs {\n                      nobj: size_t, stream: *FILE) -> size_t;\n             fn fwrite(ptr: *c_void, size: size_t,\n                       nobj: size_t, stream: *FILE) -> size_t;\n-            fn fseek(stream: *FILE, offset: c_long, whence: c_int) -> c_int;\n+            fn fseek(stream: *FILE, offset: c_long,\n+                     whence: c_int) -> c_int;\n             fn ftell(stream: *FILE) -> c_long;\n             fn rewind(stream: *FILE);\n             fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n@@ -895,16 +820,16 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stdlib {\n-            #[legacy_exports];\n+        pub extern mod stdlib {\n             fn abs(i: c_int) -> c_int;\n             fn labs(i: c_long) -> c_long;\n-            // Omitted: div, ldiv (return type incomplete).\n+            // Omitted: div, ldiv (return pub type incomplete).\n             fn atof(s: *c_char) -> c_double;\n             fn atoi(s: *c_char) -> c_int;\n             fn strtod(s: *c_char, endp: **c_char) -> c_double;\n             fn strtol(s: *c_char, endp: **c_char, base: c_int) -> c_long;\n-            fn strtoul(s: *c_char, endp: **c_char, base: c_int) -> c_ulong;\n+            fn strtoul(s: *c_char, endp: **c_char,\n+                       base: c_int) -> c_ulong;\n             fn calloc(nobj: size_t, size: size_t) -> *c_void;\n             fn malloc(size: size_t) -> *c_void;\n             fn realloc(p: *c_void, size: size_t) -> *c_void;\n@@ -921,9 +846,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod string {\n-            #[legacy_exports];\n-\n+        pub extern mod string {\n             fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n             fn strncpy(dst: *c_char, src: *c_char, n: size_t) -> *c_char;\n             fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n@@ -956,13 +879,10 @@ mod funcs {\n     // with the same POSIX functions and types as other platforms.\n \n     #[cfg(target_os = \"win32\")]\n-    mod posix88 {\n-        #[legacy_exports];\n-\n+    pub mod posix88 {\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stat {\n-            #[legacy_exports];\n+        pub extern mod stat {\n             #[link_name = \"_chmod\"]\n             fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n@@ -972,8 +892,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stdio {\n-            #[legacy_exports];\n+        pub extern mod stdio {\n             #[link_name = \"_popen\"]\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n@@ -989,8 +908,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod fcntl {\n-            #[legacy_exports];\n+        pub extern mod fcntl {\n             #[link_name = \"_open\"]\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n \n@@ -1000,15 +918,13 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod dirent {\n-            #[legacy_exports];\n+        pub extern mod dirent {\n             // Not supplied at all.\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod unistd {\n-            #[legacy_exports];\n+        pub extern mod unistd {\n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;\n \n@@ -1035,7 +951,8 @@ mod funcs {\n             fn execvp(c: *c_char, argv: **c_char) -> c_int;\n \n             #[link_name = \"_execvpe\"]\n-            fn execvpe(c: *c_char, argv: **c_char, envp: **c_char) -> c_int;\n+            fn execvpe(c: *c_char, argv: **c_char,\n+                       envp: **c_char) -> c_int;\n \n             #[link_name = \"_getcwd\"]\n             fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n@@ -1072,13 +989,10 @@ mod funcs {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n-    mod posix88 {\n-        #[legacy_exports];\n-\n+    pub mod posix88 {\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stat {\n-            #[legacy_exports];\n+        pub extern mod stat {\n             fn chmod(path: *c_char, mode: mode_t) -> c_int;\n             fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n             fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n@@ -1087,8 +1001,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod stdio {\n-            #[legacy_exports];\n+        pub extern mod stdio {\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n             fn pclose(stream: *FILE) -> c_int;\n             fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n@@ -1097,17 +1010,15 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod fcntl {\n-            #[legacy_exports];\n+        pub extern mod fcntl {\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n             fn creat(path: *c_char, mode: mode_t) -> c_int;\n             fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod dirent {\n-            #[legacy_exports];\n+        pub extern mod dirent {\n             fn opendir(dirname: *c_char) -> *DIR;\n             fn closedir(dirp: *DIR) -> c_int;\n             fn readdir(dirp: *DIR) -> *dirent;\n@@ -1118,8 +1029,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod unistd {\n-            #[legacy_exports];\n+        pub extern mod unistd {\n             fn access(path: *c_char, amode: c_int) -> c_int;\n             fn alarm(seconds: c_uint) -> c_uint;\n             fn chdir(dir: *c_char) -> c_int;\n@@ -1128,7 +1038,8 @@ mod funcs {\n             fn dup(fd: c_int) -> c_int;\n             fn dup2(src: c_int, dst: c_int) -> c_int;\n             fn execv(prog: *c_char, argv: **c_char) -> c_int;\n-            fn execve(prog: *c_char, argv: **c_char, envp: **c_char) -> c_int;\n+            fn execve(prog: *c_char, argv: **c_char,\n+                      envp: **c_char) -> c_int;\n             fn execvp(c: *c_char, argv: **c_char) -> c_int;\n             fn fork() -> pid_t;\n             fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n@@ -1138,7 +1049,8 @@ mod funcs {\n             fn getgid() -> gid_t ;\n             fn getgroups(ngroups_max: c_int, groups: *mut gid_t) -> c_int;\n             fn getlogin() -> *c_char;\n-            fn getopt(argc: c_int, argv: **c_char, optstr: *c_char) -> c_int;\n+            fn getopt(argc: c_int, argv: **c_char,\n+                      optstr: *c_char) -> c_int;\n             fn getpgrp() -> pid_t;\n             fn getpid() -> pid_t;\n             fn getppid() -> pid_t;\n@@ -1168,13 +1080,10 @@ mod funcs {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n-    mod posix01 {\n-        #[legacy_exports];\n-\n+    pub mod posix01 {\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod unistd {\n-            #[legacy_exports];\n+        pub extern mod unistd {\n             fn readlink(path: *c_char, buf: *mut c_char,\n                         bufsz: size_t) -> ssize_t;\n \n@@ -1191,41 +1100,36 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        extern mod wait {\n-            #[legacy_exports];\n+        pub extern mod wait {\n             fn waitpid(pid: pid_t, status: *mut c_int,\n                        options: c_int) -> pid_t;\n         }\n     }\n \n     #[cfg(target_os = \"win32\")]\n-    mod posix01 {\n-        #[legacy_exports];\n+    pub mod posix01 {\n         #[nolink]\n-        extern mod unistd {\n-            #[legacy_exports]; }\n+        pub extern mod unistd {\n+        }\n     }\n \n \n     #[cfg(target_os = \"win32\")]\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n-    mod posix08 {\n-        #[legacy_exports];\n+    pub mod posix08 {\n         #[nolink]\n-        extern mod unistd {\n-            #[legacy_exports]; }\n+        pub extern mod unistd {\n+        }\n     }\n \n \n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     #[nolink]\n     #[abi = \"cdecl\"]\n-    extern mod bsd44 {\n-        #[legacy_exports];\n-\n+    pub extern mod bsd44 {\n         fn sysctl(name: *c_int, namelen: c_uint,\n                   oldp: *mut c_void, oldlenp: *mut size_t,\n                   newp: *c_void, newlen: size_t) -> c_int;\n@@ -1241,37 +1145,35 @@ mod funcs {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"win32\")]\n-    mod bsd44 {\n-        #[legacy_exports];\n+    pub mod bsd44 {\n     }\n \n \n     #[cfg(target_os = \"macos\")]\n     #[nolink]\n     #[abi = \"cdecl\"]\n-    extern mod extra {\n-        #[legacy_exports];\n+    pub extern mod extra {\n         fn _NSGetExecutablePath(buf: *mut c_char,\n                                 bufsize: *mut u32) -> c_int;\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n-    mod extra {\n-        #[legacy_exports]; }\n+    pub mod extra {\n+    }\n \n     #[cfg(target_os = \"linux\")]\n-    mod extra {\n-        #[legacy_exports]; }\n+    pub mod extra {\n+    }\n \n \n     #[cfg(target_os = \"win32\")]\n-    mod extra {\n-        #[legacy_exports];\n+    pub mod extra {\n         use types::os::arch::extra::*;\n+        pub use kernel32::*;\n+        pub use msvcrt::*;\n \n         #[abi = \"stdcall\"]\n-        extern mod kernel32 {\n-            #[legacy_exports];\n+        pub extern mod kernel32 {\n             fn GetEnvironmentVariableW(n: LPCWSTR,\n                                        v: LPWSTR,\n                                        nsize: DWORD) -> DWORD;\n@@ -1295,8 +1197,7 @@ mod funcs {\n \n         #[abi = \"cdecl\"]\n         #[nolink]\n-        extern mod msvcrt {\n-            #[legacy_exports];\n+        pub extern mod msvcrt {\n             #[link_name = \"_commit\"]\n             fn commit(fd: c_int) -> c_int;\n         }"}, {"sha": "4614080ee02f892d4b4af46e61d8278688759732", "filename": "src/libcore/os.rs", "status": "modified", "additions": 79, "deletions": 140, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "patch": "@@ -21,30 +21,17 @@\n  */\n \n use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n-              mode_t, pid_t, FILE};\n+           mode_t, pid_t, FILE};\n use libc::{close, fclose};\n \n use option::{Some, None};\n \n-use consts::*;\n+pub use consts::*;\n use task::TaskBuilder;\n \n-export close, fclose, fsync_fd, waitpid;\n-export env, getenv, setenv, fdopen, pipe;\n-export getcwd, dll_filename, self_exe_path;\n-export exe_suffix, dll_suffix, sysname, arch, family;\n-export homedir, tmpdir, list_dir, list_dir_path, path_is_dir, path_exists,\n-       make_absolute, make_dir, remove_dir, change_dir, remove_file,\n-       copy_file;\n-export last_os_error;\n-export set_exit_status;\n-export walk_dir;\n-\n // FIXME: move these to str perhaps? #2620\n-export as_c_charp, fill_charp_buf;\n \n extern mod rustrt {\n-    #[legacy_exports];\n     fn rust_getcwd() -> ~str;\n     fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n     fn rust_path_exists(path: *libc::c_char) -> c_int;\n@@ -57,15 +44,15 @@ extern mod rustrt {\n \n const tmpbuf_sz : uint = 1000u;\n \n-fn getcwd() -> Path {\n+pub fn getcwd() -> Path {\n     Path(rustrt::rust_getcwd())\n }\n \n-fn as_c_charp<T>(s: &str, f: fn(*c_char) -> T) -> T {\n+pub fn as_c_charp<T>(s: &str, f: fn(*c_char) -> T) -> T {\n     str::as_c_str(s, |b| f(b as *c_char))\n }\n \n-fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n+pub fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n     -> Option<~str> {\n     let buf = vec::to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n     do vec::as_mut_buf(buf) |b, sz| {\n@@ -79,16 +66,11 @@ fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n \n #[cfg(windows)]\n mod win32 {\n-    #[legacy_exports];\n-    use dword = libc::types::os::arch::extra::DWORD;\n+    use dword = libc::DWORD;\n \n     fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n         -> Option<~str> {\n-\n-        // FIXME: remove these when export globs work properly. #1238\n-        use libc::funcs::extra::kernel32::*;\n-        use libc::consts::os::extra::*;\n-\n+        use libc::dword;\n         let mut n = tmpbuf_sz as dword;\n         let mut res = None;\n         let mut done = false;\n@@ -99,8 +81,8 @@ mod win32 {\n                 if k == (0 as dword) {\n                     done = true;\n                 } else if (k == n &&\n-                           GetLastError() ==\n-                           ERROR_INSUFFICIENT_BUFFER as dword) {\n+                           libc::GetLastError() ==\n+                           libc::ERROR_INSUFFICIENT_BUFFER as dword) {\n                     n *= (2 as dword);\n                 } else {\n                     let sub = vec::slice(buf, 0u, k as uint);\n@@ -120,28 +102,22 @@ mod win32 {\n     }\n }\n \n-fn getenv(n: &str) -> Option<~str> {\n+pub fn getenv(n: &str) -> Option<~str> {\n     global_env::getenv(n)\n }\n \n-fn setenv(n: &str, v: &str) {\n+pub fn setenv(n: &str, v: &str) {\n     global_env::setenv(n, v)\n }\n \n-fn env() -> ~[(~str,~str)] {\n+pub fn env() -> ~[(~str,~str)] {\n     global_env::env()\n }\n \n mod global_env {\n-    #[legacy_exports];\n     //! Internal module for serializing access to getenv/setenv\n \n-    export getenv;\n-    export setenv;\n-    export env;\n-\n     extern mod rustrt {\n-        #[legacy_exports];\n         fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n     }\n \n@@ -151,15 +127,15 @@ mod global_env {\n         MsgEnv(comm::Chan<~[(~str,~str)]>)\n     }\n \n-    fn getenv(n: &str) -> Option<~str> {\n+    pub fn getenv(n: &str) -> Option<~str> {\n         let env_ch = get_global_env_chan();\n         let po = comm::Port();\n         comm::send(env_ch, MsgGetEnv(str::from_slice(n),\n                                      comm::Chan(po)));\n         comm::recv(po)\n     }\n \n-    fn setenv(n: &str, v: &str) {\n+    pub fn setenv(n: &str, v: &str) {\n         let env_ch = get_global_env_chan();\n         let po = comm::Port();\n         comm::send(env_ch, MsgSetEnv(str::from_slice(n),\n@@ -168,7 +144,7 @@ mod global_env {\n         comm::recv(po)\n     }\n \n-    fn env() -> ~[(~str,~str)] {\n+    pub fn env() -> ~[(~str,~str)] {\n         let env_ch = get_global_env_chan();\n         let po = comm::Port();\n         comm::send(env_ch, MsgEnv(comm::Chan(po)));\n@@ -208,13 +184,11 @@ mod global_env {\n     }\n \n     mod impl_ {\n-        #[legacy_exports];\n         extern mod rustrt {\n-            #[legacy_exports];\n             fn rust_env_pairs() -> ~[~str];\n         }\n \n-        fn env() -> ~[(~str,~str)] {\n+        pub fn env() -> ~[(~str,~str)] {\n             let mut pairs = ~[];\n             for vec::each(rustrt::rust_env_pairs()) |p| {\n                 let vs = str::splitn_char(*p, '=', 1u);\n@@ -225,7 +199,7 @@ mod global_env {\n         }\n \n         #[cfg(unix)]\n-        fn getenv(n: &str) -> Option<~str> {\n+        pub fn getenv(n: &str) -> Option<~str> {\n             unsafe {\n                 let s = str::as_c_str(n, libc::getenv);\n                 return if ptr::null::<u8>() == cast::reinterpret_cast(&s) {\n@@ -238,47 +212,40 @@ mod global_env {\n         }\n \n         #[cfg(windows)]\n-        fn getenv(n: &str) -> Option<~str> {\n-            use libc::types::os::arch::extra::*;\n-            use libc::funcs::extra::kernel32::*;\n+        pub fn getenv(n: &str) -> Option<~str> {\n             use win32::*;\n             do as_utf16_p(n) |u| {\n                 do fill_utf16_buf_and_decode() |buf, sz| {\n-                    GetEnvironmentVariableW(u, buf, sz)\n+                    libc::GetEnvironmentVariableW(u, buf, sz)\n                 }\n             }\n         }\n \n \n         #[cfg(unix)]\n-        fn setenv(n: &str, v: &str) {\n-\n-            // FIXME: remove this when export globs work properly. #1238\n-            use libc::funcs::posix01::unistd::setenv;\n+        pub fn setenv(n: &str, v: &str) {\n             do str::as_c_str(n) |nbuf| {\n                 do str::as_c_str(v) |vbuf| {\n-                    setenv(nbuf, vbuf, 1i32);\n+                    libc::setenv(nbuf, vbuf, 1i32);\n                 }\n             }\n         }\n \n \n         #[cfg(windows)]\n-        fn setenv(n: &str, v: &str) {\n-            // FIXME: remove imports when export globs work properly. #1238\n-            use libc::funcs::extra::kernel32::*;\n+        pub fn setenv(n: &str, v: &str) {\n             use win32::*;\n             do as_utf16_p(n) |nbuf| {\n                 do as_utf16_p(v) |vbuf| {\n-                    SetEnvironmentVariableW(nbuf, vbuf);\n+                    libc::SetEnvironmentVariableW(nbuf, vbuf);\n                 }\n             }\n         }\n \n     }\n }\n \n-fn fdopen(fd: c_int) -> *FILE {\n+pub fn fdopen(fd: c_int) -> *FILE {\n     return do as_c_charp(\"r\") |modebuf| {\n         libc::fdopen(fd, modebuf)\n     };\n@@ -288,13 +255,13 @@ fn fdopen(fd: c_int) -> *FILE {\n // fsync related\n \n #[cfg(windows)]\n-fn fsync_fd(fd: c_int, _level: io::fsync::Level) -> c_int {\n+pub fn fsync_fd(fd: c_int, _level: io::fsync::Level) -> c_int {\n     use libc::funcs::extra::msvcrt::*;\n     return commit(fd);\n }\n \n #[cfg(target_os = \"linux\")]\n-fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n+pub fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n     use libc::funcs::posix01::unistd::*;\n     match level {\n       io::fsync::FSync\n@@ -304,7 +271,7 @@ fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n }\n \n #[cfg(target_os = \"macos\")]\n-fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n+pub fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n     use libc::consts::os::extra::*;\n     use libc::funcs::posix88::fcntl::*;\n     use libc::funcs::posix01::unistd::*;\n@@ -321,19 +288,19 @@ fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n }\n \n #[cfg(target_os = \"freebsd\")]\n-fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n+pub fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n     use libc::funcs::posix01::unistd::*;\n     return fsync(fd);\n }\n \n \n #[cfg(windows)]\n-fn waitpid(pid: pid_t) -> c_int {\n+pub fn waitpid(pid: pid_t) -> c_int {\n     return rustrt::rust_process_wait(pid);\n }\n \n #[cfg(unix)]\n-fn waitpid(pid: pid_t) -> c_int {\n+pub fn waitpid(pid: pid_t) -> c_int {\n     use libc::funcs::posix01::wait::*;\n     let status = 0 as c_int;\n \n@@ -344,7 +311,7 @@ fn waitpid(pid: pid_t) -> c_int {\n \n \n #[cfg(unix)]\n-fn pipe() -> {in: c_int, out: c_int} {\n+pub fn pipe() -> {in: c_int, out: c_int} {\n     let fds = {mut in: 0 as c_int,\n                mut out: 0 as c_int };\n     assert (libc::pipe(ptr::mut_addr_of(fds.in)) == (0 as c_int));\n@@ -354,19 +321,17 @@ fn pipe() -> {in: c_int, out: c_int} {\n \n \n #[cfg(windows)]\n-fn pipe() -> {in: c_int, out: c_int} {\n-    // FIXME: remove this when export globs work properly. #1238\n-    use libc::consts::os::extra::*;\n+pub fn pipe() -> {in: c_int, out: c_int} {\n     // Windows pipes work subtly differently than unix pipes, and their\n     // inheritance has to be handled in a different way that I do not fully\n     // understand. Here we explicitly make the pipe non-inheritable, which\n     // means to pass it to a subprocess they need to be duplicated first, as\n     // in rust_run_program.\n     let fds = { mut in: 0 as c_int,\n-               mut out: 0 as c_int };\n+                mut out: 0 as c_int };\n     let res = libc::pipe(ptr::mut_addr_of(fds.in),\n                          1024 as c_uint,\n-                         (O_BINARY | O_NOINHERIT) as c_int);\n+                         (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n     assert (res == 0 as c_int);\n     assert (fds.in != -1 as c_int && fds.in != 0 as c_int);\n     assert (fds.out != -1 as c_int && fds.in != 0 as c_int);\n@@ -378,7 +343,7 @@ fn dup2(src: c_int, dst: c_int) -> c_int {\n }\n \n \n-fn dll_filename(base: &str) -> ~str {\n+pub fn dll_filename(base: &str) -> ~str {\n     return pre() + str::from_slice(base) + dll_suffix();\n \n     #[cfg(unix)]\n@@ -389,7 +354,7 @@ fn dll_filename(base: &str) -> ~str {\n }\n \n \n-fn self_exe_path() -> Option<Path> {\n+pub fn self_exe_path() -> Option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n     fn load_self() -> Option<~str> {\n@@ -419,22 +384,17 @@ fn self_exe_path() -> Option<Path> {\n \n     #[cfg(target_os = \"macos\")]\n     fn load_self() -> Option<~str> {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::funcs::extra::*;\n         do fill_charp_buf() |buf, sz| {\n-            _NSGetExecutablePath(buf, ptr::mut_addr_of(sz as u32))\n+            libc::_NSGetExecutablePath(buf, ptr::mut_addr_of(sz as u32))\n                 == (0 as c_int)\n         }\n     }\n \n     #[cfg(windows)]\n     fn load_self() -> Option<~str> {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::types::os::arch::extra::*;\n-        use libc::funcs::extra::kernel32::*;\n         use win32::*;\n         do fill_utf16_buf_and_decode() |buf, sz| {\n-            GetModuleFileNameW(0u as dword, buf, sz)\n+            libc::GetModuleFileNameW(0u as libc::dword, buf, sz)\n         }\n     }\n \n@@ -457,7 +417,7 @@ fn self_exe_path() -> Option<Path> {\n  *\n  * Otherwise, homedir returns option::none.\n  */\n-fn homedir() -> Option<Path> {\n+pub fn homedir() -> Option<Path> {\n     return match getenv(~\"HOME\") {\n         Some(p) => if !str::is_empty(p) {\n           Some(Path(p))\n@@ -494,7 +454,7 @@ fn homedir() -> Option<Path> {\n  * 'USERPROFILE' environment variable  if any are set and not the empty\n  * string. Otherwise, tmpdir returns the path to the Windows directory.\n  */\n-fn tmpdir() -> Path {\n+pub fn tmpdir() -> Path {\n     return lookup();\n \n     fn getenv_nonempty(v: &str) -> Option<Path> {\n@@ -528,7 +488,7 @@ fn tmpdir() -> Path {\n     }\n }\n /// Recursively walk a directory structure\n-fn walk_dir(p: &Path, f: fn((&Path)) -> bool) {\n+pub fn walk_dir(p: &Path, f: fn((&Path)) -> bool) {\n \n     walk_dir_(p, f);\n \n@@ -557,21 +517,19 @@ fn walk_dir(p: &Path, f: fn((&Path)) -> bool) {\n }\n \n /// Indicates whether a path represents a directory\n-fn path_is_dir(p: &Path) -> bool {\n+pub fn path_is_dir(p: &Path) -> bool {\n     do str::as_c_str(p.to_str()) |buf| {\n         rustrt::rust_path_is_dir(buf) != 0 as c_int\n     }\n }\n \n /// Indicates whether a path exists\n-fn path_exists(p: &Path) -> bool {\n+pub fn path_exists(p: &Path) -> bool {\n     do str::as_c_str(p.to_str()) |buf| {\n         rustrt::rust_path_exists(buf) != 0 as c_int\n     }\n }\n \n-// FIXME (#2622): under Windows, we should prepend the current drive letter\n-// to paths that start with a slash.\n /**\n  * Convert a relative path to an absolute path\n  *\n@@ -582,7 +540,7 @@ fn path_exists(p: &Path) -> bool {\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n-fn make_absolute(p: &Path) -> Path {\n+pub fn make_absolute(p: &Path) -> Path {\n     if p.is_absolute {\n         copy *p\n     } else {\n@@ -592,18 +550,16 @@ fn make_absolute(p: &Path) -> Path {\n \n \n /// Creates a directory at the specified path\n-fn make_dir(p: &Path, mode: c_int) -> bool {\n+pub fn make_dir(p: &Path, mode: c_int) -> bool {\n     return mkdir(p, mode);\n \n     #[cfg(windows)]\n     fn mkdir(p: &Path, _mode: c_int) -> bool {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::types::os::arch::extra::*;\n-        use libc::funcs::extra::kernel32::*;\n-        use win32::*;\n         // FIXME: turn mode into something useful? #2623\n         do as_utf16_p(p.to_str()) |buf| {\n-            CreateDirectoryW(buf, unsafe { cast::reinterpret_cast(&0) })\n+            libc::CreateDirectoryW(buf, unsafe {\n+                unsafe::reinterpret_cast(&0)\n+            })\n                 != (0 as BOOL)\n         }\n     }\n@@ -618,7 +574,7 @@ fn make_dir(p: &Path, mode: c_int) -> bool {\n \n /// Lists the contents of a directory\n #[allow(non_implicitly_copyable_typarams)]\n-fn list_dir(p: &Path) -> ~[~str] {\n+pub fn list_dir(p: &Path) -> ~[~str] {\n \n     #[cfg(unix)]\n     fn star(p: &Path) -> Path { copy *p }\n@@ -636,22 +592,19 @@ fn list_dir(p: &Path) -> ~[~str] {\n  *\n  * This version prepends each entry with the directory.\n  */\n-fn list_dir_path(p: &Path) -> ~[~Path] {\n+pub fn list_dir_path(p: &Path) -> ~[~Path] {\n     os::list_dir(p).map(|f| ~p.push(*f))\n }\n \n /// Removes a directory at the specified path\n-fn remove_dir(p: &Path) -> bool {\n+pub fn remove_dir(p: &Path) -> bool {\n    return rmdir(p);\n \n     #[cfg(windows)]\n     fn rmdir(p: &Path) -> bool {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::funcs::extra::kernel32::*;\n-        use libc::types::os::arch::extra::*;\n         use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n-            RemoveDirectoryW(buf) != (0 as BOOL)\n+            libc::RemoveDirectoryW(buf) != (0 as libc::BOOL)\n         };\n     }\n \n@@ -663,17 +616,14 @@ fn remove_dir(p: &Path) -> bool {\n     }\n }\n \n-fn change_dir(p: &Path) -> bool {\n+pub fn change_dir(p: &Path) -> bool {\n     return chdir(p);\n \n     #[cfg(windows)]\n     fn chdir(p: &Path) -> bool {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::funcs::extra::kernel32::*;\n-        use libc::types::os::arch::extra::*;\n         use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n-            SetCurrentDirectoryW(buf) != (0 as BOOL)\n+            libc::SetCurrentDirectoryW(buf) != (0 as libc::BOOL)\n         };\n     }\n \n@@ -686,18 +636,16 @@ fn change_dir(p: &Path) -> bool {\n }\n \n /// Copies a file from one location to another\n-fn copy_file(from: &Path, to: &Path) -> bool {\n+pub fn copy_file(from: &Path, to: &Path) -> bool {\n     return do_copy_file(from, to);\n \n     #[cfg(windows)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n-        // FIXME: remove imports when export globs work properly. #1238\n-        use libc::funcs::extra::kernel32::*;\n-        use libc::types::os::arch::extra::*;\n         use win32::*;\n         return do as_utf16_p(from.to_str()) |fromp| {\n             do as_utf16_p(to.to_str()) |top| {\n-                CopyFileW(fromp, top, (0 as BOOL)) != (0 as BOOL)\n+                libc::CopyFileW(fromp, top, (0 as libc::BOOL)) !=\n+                    (0 as libc::BOOL)\n             }\n         }\n     }\n@@ -748,18 +696,14 @@ fn copy_file(from: &Path, to: &Path) -> bool {\n }\n \n /// Deletes an existing file\n-fn remove_file(p: &Path) -> bool {\n+pub fn remove_file(p: &Path) -> bool {\n     return unlink(p);\n \n     #[cfg(windows)]\n     fn unlink(p: &Path) -> bool {\n-        // FIXME (similar to Issue #2006): remove imports when export globs\n-        // work properly.\n-        use libc::funcs::extra::kernel32::*;\n-        use libc::types::os::arch::extra::*;\n         use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n-            DeleteFileW(buf) != (0 as BOOL)\n+            libc::DeleteFileW(buf) != (0 as libc::BOOL)\n         };\n     }\n \n@@ -772,7 +716,7 @@ fn remove_file(p: &Path) -> bool {\n }\n \n /// Get a string representing the platform-dependent last error\n-fn last_os_error() -> ~str {\n+pub fn last_os_error() -> ~str {\n     rustrt::last_os_error()\n }\n \n@@ -784,64 +728,59 @@ fn last_os_error() -> ~str {\n  * and is supervised by the scheduler then any user-specified exit status is\n  * ignored and the process exits with the default failure status\n  */\n-fn set_exit_status(code: int) {\n+pub fn set_exit_status(code: int) {\n     rustrt::rust_set_exit_status(code as libc::intptr_t);\n }\n \n #[cfg(unix)]\n-fn family() -> ~str { ~\"unix\" }\n+pub fn family() -> ~str { ~\"unix\" }\n \n #[cfg(windows)]\n-fn family() -> ~str { ~\"windows\" }\n+pub fn family() -> ~str { ~\"windows\" }\n \n #[cfg(target_os = \"macos\")]\n mod consts {\n-    #[legacy_exports];\n-    fn sysname() -> ~str { ~\"macos\" }\n-    fn exe_suffix() -> ~str { ~\"\" }\n-    fn dll_suffix() -> ~str { ~\".dylib\" }\n+    pub fn sysname() -> ~str { ~\"macos\" }\n+    pub fn exe_suffix() -> ~str { ~\"\" }\n+    pub fn dll_suffix() -> ~str { ~\".dylib\" }\n }\n \n #[cfg(target_os = \"freebsd\")]\n mod consts {\n-    #[legacy_exports];\n-    fn sysname() -> ~str { ~\"freebsd\" }\n-    fn exe_suffix() -> ~str { ~\"\" }\n-    fn dll_suffix() -> ~str { ~\".so\" }\n+    pub fn sysname() -> ~str { ~\"freebsd\" }\n+    pub fn exe_suffix() -> ~str { ~\"\" }\n+    pub fn dll_suffix() -> ~str { ~\".so\" }\n }\n \n #[cfg(target_os = \"linux\")]\n mod consts {\n-    #[legacy_exports];\n-    fn sysname() -> ~str { ~\"linux\" }\n-    fn exe_suffix() -> ~str { ~\"\" }\n-    fn dll_suffix() -> ~str { ~\".so\" }\n+    pub fn sysname() -> ~str { ~\"linux\" }\n+    pub fn exe_suffix() -> ~str { ~\"\" }\n+    pub fn dll_suffix() -> ~str { ~\".so\" }\n }\n \n #[cfg(target_os = \"win32\")]\n mod consts {\n-    #[legacy_exports];\n-    fn sysname() -> ~str { ~\"win32\" }\n-    fn exe_suffix() -> ~str { ~\".exe\" }\n-    fn dll_suffix() -> ~str { ~\".dll\" }\n+    pub fn sysname() -> ~str { ~\"win32\" }\n+    pub fn exe_suffix() -> ~str { ~\".exe\" }\n+    pub fn dll_suffix() -> ~str { ~\".dll\" }\n }\n \n #[cfg(target_arch = \"x86\")]\n-fn arch() -> ~str { ~\"x86\" }\n+pub fn arch() -> ~str { ~\"x86\" }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn arch() -> ~str { ~\"x86_64\" }\n+pub fn arch() -> ~str { ~\"x86_64\" }\n \n #[cfg(target_arch = \"arm\")]\n-fn arch() -> str { ~\"arm\" }\n+pub fn arch() -> str { ~\"arm\" }\n \n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n-    #[legacy_exports];\n \n     #[test]\n-    fn last_os_error() {\n+    pub fn last_os_error() {\n         log(debug, last_os_error());\n     }\n "}]}