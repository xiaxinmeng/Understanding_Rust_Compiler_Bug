{"sha": "20b7559558c7140b0c4d6deed50023cdbbb77de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYjc1NTk1NThjNzE0MGIwYzRkNmRlZWQ1MDAyM2NkYmJiNzdkZTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-10-30T18:33:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-30T18:33:39Z"}, "message": "Merge pull request #1296 from Manishearth/features\n\nBe more helping, less helpful and bring convenience back for the dead", "tree": {"sha": "a7efe403a5c78bfe9303f6176d6dac2dd927412d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7efe403a5c78bfe9303f6176d6dac2dd927412d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b7559558c7140b0c4d6deed50023cdbbb77de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b7559558c7140b0c4d6deed50023cdbbb77de7", "html_url": "https://github.com/rust-lang/rust/commit/20b7559558c7140b0c4d6deed50023cdbbb77de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b7559558c7140b0c4d6deed50023cdbbb77de7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8630376e71db564af9a6442920ee1006d3b0386d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8630376e71db564af9a6442920ee1006d3b0386d", "html_url": "https://github.com/rust-lang/rust/commit/8630376e71db564af9a6442920ee1006d3b0386d"}, {"sha": "ec893a198fd20ee0c481ac410223fc8aaa246525", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec893a198fd20ee0c481ac410223fc8aaa246525", "html_url": "https://github.com/rust-lang/rust/commit/ec893a198fd20ee0c481ac410223fc8aaa246525"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "ce5980391e2d6f7e5cb3fa6a1e7feca2b744c891", "filename": "CHANGELOG.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b7559558c7140b0c4d6deed50023cdbbb77de7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/20b7559558c7140b0c4d6deed50023cdbbb77de7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=20b7559558c7140b0c4d6deed50023cdbbb77de7", "patch": "@@ -1,6 +1,12 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.97 \u2014 2016-10-24\n+* For convenience, `cargo clippy` defines a `cargo-clippy` feature. This was\n+  previously added for a short time under the name `clippy` but removed for\n+  compatibility.\n+* `cargo clippy --help` is more helping (and less helpful :smile:)\n+\n ## 0.0.96 \u2014 2016-10-22\n * Rustup to *rustc 1.14.0-nightly (f09420685 2016-10-20)*\n * New lint: [`iter_skip_next`]"}, {"sha": "df96a2fed1ffb0a288ce58cce6a5c8269f78a6d8", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b7559558c7140b0c4d6deed50023cdbbb77de7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/20b7559558c7140b0c4d6deed50023cdbbb77de7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=20b7559558c7140b0c4d6deed50023cdbbb77de7", "patch": "@@ -163,6 +163,14 @@ You can add options  to `allow`/`warn`/`deny`:\n \n Note: `deny` produces errors instead of warnings.\n \n+For convenience, `cargo clippy` automatically defines a `cargo-clippy`\n+features. This lets you set lints level and compile with or without clippy\n+transparently:\n+\n+```rust\n+#[cfg_attr(feature = \"cargo-clippy\", allow(needless_lifetimes))]\n+```\n+\n ## Link with clippy service\n \n `clippy-service` is a rust web initiative providing `rust-clippy` as a web service."}, {"sha": "44c3b61d22cc181fd35ec65a663e221f18d01440", "filename": "src/main.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/20b7559558c7140b0c4d6deed50023cdbbb77de7/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b7559558c7140b0c4d6deed50023cdbbb77de7/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=20b7559558c7140b0c4d6deed50023cdbbb77de7", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n+#![feature(static_in_const)]\n \n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n@@ -110,6 +111,36 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n \n use std::path::Path;\n \n+const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n+\n+Usage:\n+    cargo clippy [options] [--] [<opts>...]\n+\n+Common options:\n+    -h, --help               Print this message\n+    --features               Features to compile for the package\n+\n+Other options are the same as `cargo rustc`.\n+\n+To allow or deny a lint from the command line you can use `cargo clippy --`\n+with:\n+\n+    -W --warn OPT       Set lint warnings\n+    -A --allow OPT      Set lint allowed\n+    -D --deny OPT       Set lint denied\n+    -F --forbid OPT     Set lint forbidden\n+\n+The feature `cargo-clippy` is automatically defined for convenience. You can use\n+it to allow or deny lints from the code, eg.:\n+\n+    #[cfg_attr(feature = \"cargo-clippy\", allow(needless_lifetimes))]\n+\"#;\n+\n+#[allow(print_stdout)]\n+fn show_help() {\n+    println!(\"{}\", CARGO_CLIPPY_HELP);\n+}\n+\n pub fn main() {\n     use std::env;\n \n@@ -138,9 +169,16 @@ pub fn main() {\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n+\n+        if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+            show_help();\n+            return;\n+        }\n+\n         let manifest_path_arg = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n \n         let mut metadata = cargo::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)).expect(\"could not obtain cargo metadata\");\n+\n         assert_eq!(metadata.version, 1);\n \n         let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));\n@@ -181,13 +219,16 @@ pub fn main() {\n \n         // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n         // without having to pass --sysroot or anything\n-        let args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n+        let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n             env::args().collect()\n         } else {\n             env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n         };\n+\n         // this check ensures that dependencies are built but not linted and the final crate is\n         // linted but not built\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+\n         let mut ccc = ClippyCompilerCalls::new(env::args().any(|s| s == \"-Zno-trans\"));\n         let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n \n@@ -219,6 +260,8 @@ fn process<P, I>(old_args: I, dep_path: P, sysroot: &str) -> Result<(), i32>\n     args.push(String::from(\"--sysroot\"));\n     args.push(sysroot.to_owned());\n     args.push(\"-Zno-trans\".to_owned());\n+    args.push(\"--cfg\".to_owned());\n+    args.push(r#\"feature=\"cargo-clippy\"\"#.to_owned());\n \n     let path = std::env::current_exe().expect(\"current executable path invalid\");\n     let exit_status = std::process::Command::new(\"cargo\")"}]}