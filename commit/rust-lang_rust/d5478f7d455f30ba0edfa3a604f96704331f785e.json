{"sha": "d5478f7d455f30ba0edfa3a604f96704331f785e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDc4ZjdkNDU1ZjMwYmEwZWRmYTNhNjA0Zjk2NzA0MzMxZjc4NWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T03:06:05Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T03:06:05Z"}, "message": "Reformatting source code", "tree": {"sha": "734c122a8e039d4d2a3ceb8abc124325309f3139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734c122a8e039d4d2a3ceb8abc124325309f3139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5478f7d455f30ba0edfa3a604f96704331f785e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5478f7d455f30ba0edfa3a604f96704331f785e", "html_url": "https://github.com/rust-lang/rust/commit/d5478f7d455f30ba0edfa3a604f96704331f785e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5478f7d455f30ba0edfa3a604f96704331f785e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22be93780c870603bf789ffb5b941de9936256ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/22be93780c870603bf789ffb5b941de9936256ca", "html_url": "https://github.com/rust-lang/rust/commit/22be93780c870603bf789ffb5b941de9936256ca"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "512b9dc5bb2f6c09195dc5d5c9924abf6d4a3385", "filename": "src/items.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d5478f7d455f30ba0edfa3a604f96704331f785e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5478f7d455f30ba0edfa3a604f96704331f785e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d5478f7d455f30ba0edfa3a604f96704331f785e", "patch": "@@ -795,7 +795,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                                                              where_density,\n                                                              \"{\",\n                                                              !has_body,\n-                                                             trait_bound_str.is_empty() && last_line_width(&generics_str) == 1,\n+                                                             trait_bound_str.is_empty() &&\n+                                                             last_line_width(&generics_str) == 1,\n                                                              None));\n         // If the where clause cannot fit on the same line,\n         // put the where clause on a new line\n@@ -1020,7 +1021,8 @@ fn format_tuple_struct(context: &RewriteContext,\n             result.push('(');\n             (ListTactic::HorizontalVertical, offset.block_only() + result.len())\n         }\n-        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => {\n+        FnArgLayoutStyle::Block |\n+        FnArgLayoutStyle::BlockAlways => {\n             let indent = offset.block_only().block_indent(&context.config);\n             result.push_str(\"(\\n\");\n             result.push_str(&indent.to_string(&context.config));\n@@ -1065,7 +1067,8 @@ fn format_tuple_struct(context: &RewriteContext,\n         FnArgLayoutStyle::Visual => {\n             result.push(')');\n         }\n-        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => {\n+        FnArgLayoutStyle::Block |\n+        FnArgLayoutStyle::BlockAlways => {\n             result.push('\\n');\n             result.push_str(&offset.block_only().to_string(&context.config));\n             result.push(')');\n@@ -1561,10 +1564,11 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let multi_line_arg_str = arg_str.contains('\\n');\n \n     let put_args_in_block = (match context.config.fn_args_layout {\n-        FnArgLayoutStyle::Block => multi_line_arg_str,\n-        FnArgLayoutStyle::BlockAlways => true,\n-        _ => false,\n-    } || generics_str.contains('\\n') )&& !fd.inputs.is_empty();\n+                                 FnArgLayoutStyle::Block => multi_line_arg_str,\n+                                 FnArgLayoutStyle::BlockAlways => true,\n+                                 _ => false,\n+                             } || generics_str.contains('\\n')) &&\n+                            !fd.inputs.is_empty();\n \n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n@@ -1946,8 +1950,12 @@ fn rewrite_generics(context: &RewriteContext,\n     let list_str =\n         try_opt!(format_item_list(items, Shape::legacy(h_budget, offset), context.config));\n \n-    let result = if context.config.generics_indent != BlockIndentStyle::Visual && list_str.contains('\\n') {\n-        format!(\"<\\n{}{}\\n{}>\", offset.to_string(context.config), list_str, shape.indent.to_string(context.config))\n+    let result = if context.config.generics_indent != BlockIndentStyle::Visual &&\n+                    list_str.contains('\\n') {\n+        format!(\"<\\n{}{}\\n{}>\",\n+                offset.to_string(context.config),\n+                list_str,\n+                shape.indent.to_string(context.config))\n     } else if context.config.spaces_within_angle_brackets {\n         format!(\"< {} >\", list_str)\n     } else {\n@@ -2165,18 +2173,20 @@ fn format_generics(context: &RewriteContext,\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n-        let where_clause_str = try_opt!(rewrite_where_clause(context,\n-                                                             &generics.where_clause,\n-                                                             brace_style,\n-                                                             Shape::legacy(budget,\n-                                                                           offset.block_only()),\n-                                                             Density::Tall,\n-                                                             terminator,\n-                                                             false,\n-                                                             trimmed_last_line_width(&result) == 1,\n-                                                             Some(span.hi)));\n+        let where_clause_str =\n+            try_opt!(rewrite_where_clause(context,\n+                                          &generics.where_clause,\n+                                          brace_style,\n+                                          Shape::legacy(budget, offset.block_only()),\n+                                          Density::Tall,\n+                                          terminator,\n+                                          false,\n+                                          trimmed_last_line_width(&result) == 1,\n+                                          Some(span.hi)));\n         result.push_str(&where_clause_str);\n-        let same_line_brace = force_same_line_brace || (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1);\n+        let same_line_brace = force_same_line_brace ||\n+                              (generics.where_clause.predicates.is_empty() &&\n+                               trimmed_last_line_width(&result) == 1);\n         if !same_line_brace &&\n            (brace_style == BraceStyle::SameLineWhere || brace_style == BraceStyle::AlwaysNextLine) {\n             result.push('\\n');\n@@ -2186,7 +2196,8 @@ fn format_generics(context: &RewriteContext,\n         }\n         result.push_str(opener);\n     } else {\n-        if force_same_line_brace || trimmed_last_line_width(&result) == 1 || brace_style != BraceStyle::AlwaysNextLine {\n+        if force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n+           brace_style != BraceStyle::AlwaysNextLine {\n             result.push(' ');\n         } else {\n             result.push('\\n');"}]}