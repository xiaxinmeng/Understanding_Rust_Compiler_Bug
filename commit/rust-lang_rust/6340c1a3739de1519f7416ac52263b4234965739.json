{"sha": "6340c1a3739de1519f7416ac52263b4234965739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDBjMWEzNzM5ZGUxNTE5Zjc0MTZhYzUyMjYzYjQyMzQ5NjU3Mzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-01T09:00:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-09T21:19:53Z"}, "message": "Add a model for how conditional trait impls might be used to implement\nthe Fn-FnMut-FnOnce hierarchy.", "tree": {"sha": "3a532bebe3c14438f035caf45bd3724ba750f045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a532bebe3c14438f035caf45bd3724ba750f045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6340c1a3739de1519f7416ac52263b4234965739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6340c1a3739de1519f7416ac52263b4234965739", "html_url": "https://github.com/rust-lang/rust/commit/6340c1a3739de1519f7416ac52263b4234965739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6340c1a3739de1519f7416ac52263b4234965739/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389ef6601d18112a7a449eac2e190e4eb061bdf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/389ef6601d18112a7a449eac2e190e4eb061bdf8", "html_url": "https://github.com/rust-lang/rust/commit/389ef6601d18112a7a449eac2e190e4eb061bdf8"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "11e144e7dfe4ea3a365333baa130add7bd6d49e4", "filename": "src/test/run-pass/traits-conditional-model-fn.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6340c1a3739de1519f7416ac52263b4234965739/src%2Ftest%2Frun-pass%2Ftraits-conditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6340c1a3739de1519f7416ac52263b4234965739/src%2Ftest%2Frun-pass%2Ftraits-conditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-model-fn.rs?ref=6340c1a3739de1519f7416ac52263b4234965739", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A model for how the `Fn` traits could work. You can implement at\n+// most one of `Go`, `GoMut`, or `GoOnce`, and then the others follow\n+// automatically.\n+\n+use std::rc::Rc;\n+use std::cell::Cell;\n+\n+trait Go {\n+    fn go(&self, arg: int);\n+}\n+\n+fn go<G:Go>(this: &G, arg: int) {\n+    this.go(arg)\n+}\n+\n+trait GoMut {\n+    fn go_mut(&mut self, arg: int);\n+}\n+\n+fn go_mut<G:GoMut>(this: &mut G, arg: int) {\n+    this.go_mut(arg)\n+}\n+\n+trait GoOnce {\n+    fn go_once(self, arg: int);\n+}\n+\n+fn go_once<G:GoOnce>(this: G, arg: int) {\n+    this.go_once(arg)\n+}\n+\n+impl<G> GoMut for G\n+    where G : Go\n+{\n+    fn go_mut(&mut self, arg: int) {\n+        go(&*self, arg)\n+    }\n+}\n+\n+impl<G> GoOnce for G\n+    where G : GoMut\n+{\n+    fn go_once(mut self, arg: int) {\n+        go_mut(&mut self, arg)\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct SomeGoableThing {\n+    counter: Rc<Cell<int>>\n+}\n+\n+impl Go for SomeGoableThing {\n+    fn go(&self, arg: int) {\n+        self.counter.set(self.counter.get() + arg);\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct SomeGoOnceableThing {\n+    counter: Rc<Cell<int>>\n+}\n+\n+impl GoOnce for SomeGoOnceableThing {\n+    fn go_once(self, arg: int) {\n+        self.counter.set(self.counter.get() + arg);\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+fn main() {\n+    let counter = Rc::new(Cell::new(0));\n+    let mut x = SomeGoableThing { counter: counter.clone() };\n+\n+    go(&x, 10);\n+    assert_eq!(counter.get(), 10);\n+\n+    go_mut(&mut x, 100);\n+    assert_eq!(counter.get(), 110);\n+\n+    go_once(x, 1_000);\n+    assert_eq!(counter.get(), 1_110);\n+\n+    let x = SomeGoOnceableThing { counter: counter.clone() };\n+\n+    go_once(x, 10_000);\n+    assert_eq!(counter.get(), 11_110);\n+}"}]}