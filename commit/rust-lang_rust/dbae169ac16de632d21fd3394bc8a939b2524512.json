{"sha": "dbae169ac16de632d21fd3394bc8a939b2524512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWUxNjlhYzE2ZGU2MzJkMjFmZDMzOTRiYzhhOTM5YjI1MjQ1MTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-10T13:59:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-13T14:42:59Z"}, "message": "rustc_typeck: do not leak late-bound lifetimes from bounds to closures.", "tree": {"sha": "4d86f473ec0fff22e5724a35ec5b52e05939828c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d86f473ec0fff22e5724a35ec5b52e05939828c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbae169ac16de632d21fd3394bc8a939b2524512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbae169ac16de632d21fd3394bc8a939b2524512", "html_url": "https://github.com/rust-lang/rust/commit/dbae169ac16de632d21fd3394bc8a939b2524512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbae169ac16de632d21fd3394bc8a939b2524512/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c6788d9c1d08e13de9ae7528c720d145c7d9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c6788d9c1d08e13de9ae7528c720d145c7d9da", "html_url": "https://github.com/rust-lang/rust/commit/74c6788d9c1d08e13de9ae7528c720d145c7d9da"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "c6565b78f616defb9a5750617f85719dda39e75d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=dbae169ac16de632d21fd3394bc8a939b2524512", "patch": "@@ -198,6 +198,14 @@ impl CodeExtentData {\n \n /// The region maps encode information about region relationships.\n pub struct RegionMaps<'tcx> {\n+    /// If not empty, this body is the root of this region hierarchy.\n+    root_body: Option<hir::BodyId>,\n+\n+    /// The parent of the root body owner, if the latter is an\n+    /// an associated const or method, as impls/traits can also\n+    /// have lifetime parameters free in this body.\n+    root_parent: Option<ast::NodeId>,\n+\n     /// `scope_map` maps from a scope id to the enclosing scope id;\n     /// this is usually corresponding to the lexical nesting, though\n     /// in the case of closures the parent scope is the innermost\n@@ -295,6 +303,8 @@ struct RegionResolutionVisitor<'a, 'tcx: 'a> {\n impl<'tcx> RegionMaps<'tcx> {\n     pub fn new() -> Self {\n         RegionMaps {\n+            root_body: None,\n+            root_parent: None,\n             scope_map: FxHashMap(),\n             destruction_scopes: FxHashMap(),\n             var_map: NodeMap(),\n@@ -600,8 +610,39 @@ impl<'tcx> RegionMaps<'tcx> {\n     /// returns the outermost `CodeExtent` that the region outlives.\n     pub fn free_extent<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, fr: &ty::FreeRegion)\n                                  -> CodeExtent<'tcx> {\n-        let scope_id = tcx.hir.as_local_node_id(fr.scope).unwrap();\n-        tcx.call_site_extent(scope_id)\n+        let param_owner = match fr.bound_region {\n+            ty::BoundRegion::BrNamed(def_id, _) => {\n+                tcx.parent_def_id(def_id).unwrap()\n+            }\n+            _ => fr.scope\n+        };\n+\n+        let param_owner_id = tcx.hir.as_local_node_id(param_owner).unwrap();\n+        let body_id = tcx.hir.maybe_body_owned_by(param_owner_id)\n+        .map(|body| {\n+            assert_eq!(param_owner, fr.scope);\n+            body\n+        })\n+        .unwrap_or_else(|| {\n+            let root = tcx.hir.as_local_node_id(fr.scope).unwrap();\n+\n+            assert_eq!(Some(param_owner_id), self.root_parent,\n+                       \"free_extent: {:?} not recognized by the region maps for {:?}\",\n+                       param_owner, fr.scope);\n+\n+            let root_body = tcx.hir.body_owned_by(root);\n+\n+            assert!(Some(root_body) == self.root_body,\n+                    \"free_extent: {:?} not inside {:?}\",\n+                    param_owner, self.root_body.map(|body| tcx.hir.body_owner_def_id(body)));\n+\n+            root_body\n+        });\n+\n+        tcx.intern_code_extent(CodeExtentData::CallSiteScope {\n+            fn_id: tcx.hir.body_owner(body_id),\n+            body_id: body_id.node_id\n+        })\n     }\n }\n \n@@ -1167,6 +1208,19 @@ fn region_maps<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n     if let Some(body) = tcx.hir.maybe_body_owned_by(id) {\n+        maps.root_body = Some(body);\n+\n+        // If the item is an associated const or a method,\n+        // record its impl/trait parent, as it can also have\n+        // lifetime parameters free in this body.\n+        match tcx.hir.get(id) {\n+            hir::map::NodeImplItem(_) |\n+            hir::map::NodeTraitItem(_) => {\n+                maps.root_parent = Some(tcx.hir.get_parent(id));\n+            }\n+            _ => {}\n+        }\n+\n         let mut visitor = RegionResolutionVisitor {\n             tcx: tcx,\n             region_maps: &mut maps,"}, {"sha": "8ccaf0622d7a109adc7747c30012f86074e21c22", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dbae169ac16de632d21fd3394bc8a939b2524512", "patch": "@@ -2386,11 +2386,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// free parameters. Since we currently represent bound/free type\n     /// parameters in the same way, this only has an effect on regions.\n     pub fn construct_free_substs(self, def_id: DefId) -> &'gcx Substs<'gcx> {\n-\n+        let scope = self.closure_base_def_id(def_id);\n         let substs = Substs::for_item(self.global_tcx(), def_id, |def, _| {\n             // map bound 'a => free 'a\n             self.global_tcx().mk_region(ReFree(FreeRegion {\n-                scope: def_id,\n+                scope,\n                 bound_region: def.to_bound_region()\n             }))\n         }, |def, _| {"}, {"sha": "9e4a7ed1ddc68193e64e3a75086632f430cbef36", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbae169ac16de632d21fd3394bc8a939b2524512/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=dbae169ac16de632d21fd3394bc8a939b2524512", "patch": "@@ -60,6 +60,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                          decl,\n                                          Abi::RustCall,\n                                          expected_sig);\n+        // `deduce_expectations_from_expected_type` introduces late-bound\n+        // lifetimes defined elsewhere, which we need to anonymize away.\n+        let sig = self.tcx.anonymize_late_bound_regions(&sig);\n \n         // Create type variables (for now) to represent the transformed\n         // types of upvars. These will be unified during the upvar"}]}