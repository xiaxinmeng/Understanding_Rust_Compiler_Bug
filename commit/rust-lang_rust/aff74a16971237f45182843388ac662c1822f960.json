{"sha": "aff74a16971237f45182843388ac662c1822f960", "node_id": "C_kwDOAAsO6NoAKGFmZjc0YTE2OTcxMjM3ZjQ1MTgyODQzMzg4YWM2NjJjMTgyMmY5NjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-13T05:44:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-13T05:44:14Z"}, "message": "Rollup merge of #93810 - matthewjasper:chalk-and-canonical-universes, r=jackh726\n\nImprove chalk integration\n\n- Support subtype bounds in chalk lowering\n- Handle universes in canonicalization\n- Handle type parameters in chalk responses\n- Use `chalk_ir::LifetimeData::Empty` for `ty::ReEmpty`\n- Remove `ignore-compare-mode-chalk` for tests that no longer hang (they may still fail or ICE)\n\nThis is enough to get a hello world program to compile with `-Zchalk` now. Some of the remaining issues that are needed to get Chalk integration working on larger programs are:\n\n- rust-lang/chalk#234\n- rust-lang/chalk#548\n- rust-lang/chalk#734\n- Generators are handled differently in chalk and rustc\n\nr? `@jackh726`", "tree": {"sha": "3e3868cf60ad85a52bc027fe0fabad03dad6f3b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3868cf60ad85a52bc027fe0fabad03dad6f3b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff74a16971237f45182843388ac662c1822f960", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiCJquCRBK7hj4Ov3rIwAAFvMIAIwadg765v1LoJXcmZ1NnA7O\n0wYh93OLMELP+rYgUYnHNoNai3LRqEhrq6NrAnPiUY4H5jVRMLAmCdAQCIZJwcyF\nLYkv895XdxkQsKZw3gcL/ubn5hPyetWx3h/R7eXVK382qKTkQ/Wi6m/aVqAdfC/1\nv26IAu3yLuL6GaQI4U5AXSi4D3gvoup0w6OruRbauzg6mvIPuUE5Apc7k6kRvAiH\nlUeGATZFR+iYcsg3QNzmhZZb0EpgXxm31CmItiUP+ilT+tbOf3aGV8Yot+Ngw8j/\neBbWccvx+Wjx1AqWYCH3jLJtSdPfKI3Y04HIbz2QGP7930DlVCKpJU6unKNBPQ8=\n=JMrR\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e3868cf60ad85a52bc027fe0fabad03dad6f3b8\nparent 953c4dcc30636d477505f4e397c63d57a760dffa\nparent 030c50824c670da9fecd3ccdaec4d75d3dab1268\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644731054 +0100\ncommitter GitHub <noreply@github.com> 1644731054 +0100\n\nRollup merge of #93810 - matthewjasper:chalk-and-canonical-universes, r=jackh726\n\nImprove chalk integration\n\n- Support subtype bounds in chalk lowering\n- Handle universes in canonicalization\n- Handle type parameters in chalk responses\n- Use `chalk_ir::LifetimeData::Empty` for `ty::ReEmpty`\n- Remove `ignore-compare-mode-chalk` for tests that no longer hang (they may still fail or ICE)\n\nThis is enough to get a hello world program to compile with `-Zchalk` now. Some of the remaining issues that are needed to get Chalk integration working on larger programs are:\n\n- rust-lang/chalk#234\n- rust-lang/chalk#548\n- rust-lang/chalk#734\n- Generators are handled differently in chalk and rustc\n\nr? `@jackh726`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff74a16971237f45182843388ac662c1822f960", "html_url": "https://github.com/rust-lang/rust/commit/aff74a16971237f45182843388ac662c1822f960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff74a16971237f45182843388ac662c1822f960/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953c4dcc30636d477505f4e397c63d57a760dffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/953c4dcc30636d477505f4e397c63d57a760dffa", "html_url": "https://github.com/rust-lang/rust/commit/953c4dcc30636d477505f4e397c63d57a760dffa"}, {"sha": "030c50824c670da9fecd3ccdaec4d75d3dab1268", "url": "https://api.github.com/repos/rust-lang/rust/commits/030c50824c670da9fecd3ccdaec4d75d3dab1268", "html_url": "https://github.com/rust-lang/rust/commit/030c50824c670da9fecd3ccdaec4d75d3dab1268"}], "stats": {"total": 581, "additions": 362, "deletions": 219}, "files": [{"sha": "bd5892dba38c7dad46980ba8fec0c78560623895", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 158, "deletions": 17, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -49,6 +49,31 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)\n     }\n \n+    /// Like [Self::canonicalize_query], but preserves distinct universes. For\n+    /// example, canonicalizing `&'?0: Trait<'?1>`, where `'?0` is in `U1` and\n+    /// `'?1` is in `U3` would be canonicalized to have ?0` in `U1` and `'?1`\n+    /// in `U2`.\n+    ///\n+    /// This is used for Chalk integration.\n+    pub fn canonicalize_query_preserving_universes<V>(\n+        &self,\n+        value: V,\n+        query_state: &mut OriginalQueryValues<'tcx>,\n+    ) -> Canonicalized<'tcx, V>\n+    where\n+        V: TypeFoldable<'tcx>,\n+    {\n+        self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n+\n+        Canonicalizer::canonicalize(\n+            value,\n+            self,\n+            self.tcx,\n+            &CanonicalizeAllFreeRegionsPreservingUniverses,\n+            query_state,\n+        )\n+    }\n+\n     /// Canonicalizes a query *response* `V`. When we canonicalize a\n     /// query response, we only canonicalize unbound inference\n     /// variables, and we leave other free regions alone. So,\n@@ -133,19 +158,22 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n /// maximally general query. But if we are canonicalizing a *query\n /// response*, then we don't typically replace free regions, as they\n /// must have been introduced from other parts of the system.\n-trait CanonicalizeRegionMode {\n+trait CanonicalizeMode {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx>;\n \n     fn any(&self) -> bool;\n+\n+    // Do we preserve universe of variables.\n+    fn preserve_universes(&self) -> bool;\n }\n \n struct CanonicalizeQueryResponse;\n \n-impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n+impl CanonicalizeMode for CanonicalizeQueryResponse {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -198,11 +226,15 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n     fn any(&self) -> bool {\n         false\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        true\n+    }\n }\n \n struct CanonicalizeUserTypeAnnotation;\n \n-impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n+impl CanonicalizeMode for CanonicalizeUserTypeAnnotation {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -221,11 +253,15 @@ impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n     fn any(&self) -> bool {\n         false\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n }\n \n struct CanonicalizeAllFreeRegions;\n \n-impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n+impl CanonicalizeMode for CanonicalizeAllFreeRegions {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -237,11 +273,39 @@ impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n     fn any(&self) -> bool {\n         true\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n+}\n+\n+struct CanonicalizeAllFreeRegionsPreservingUniverses;\n+\n+impl CanonicalizeMode for CanonicalizeAllFreeRegionsPreservingUniverses {\n+    fn canonicalize_free_region<'tcx>(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        let universe = canonicalizer.infcx.universe_of_region(r);\n+        canonicalizer.canonical_var_for_region(\n+            CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },\n+            r,\n+        )\n+    }\n+\n+    fn any(&self) -> bool {\n+        true\n+    }\n+\n+    fn preserve_universes(&self) -> bool {\n+        true\n+    }\n }\n \n struct CanonicalizeFreeRegionsOtherThanStatic;\n \n-impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n+impl CanonicalizeMode for CanonicalizeFreeRegionsOtherThanStatic {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -257,6 +321,10 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n     fn any(&self) -> bool {\n         true\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n }\n \n struct Canonicalizer<'cx, 'tcx> {\n@@ -267,7 +335,7 @@ struct Canonicalizer<'cx, 'tcx> {\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n     indices: FxHashMap<GenericArg<'tcx>, BoundVar>,\n-    canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n+    canonicalize_mode: &'cx dyn CanonicalizeMode,\n     needs_canonical_flags: TypeFlags,\n \n     binder_index: ty::DebruijnIndex,\n@@ -311,15 +379,15 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     vid, r\n                 );\n                 let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n-                self.canonicalize_region_mode.canonicalize_free_region(self, r)\n+                self.canonicalize_mode.canonicalize_free_region(self, r)\n             }\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n             | ty::ReFree(_)\n             | ty::ReEmpty(_)\n             | ty::RePlaceholder(..)\n-            | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n+            | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),\n         }\n     }\n \n@@ -337,8 +405,10 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `TyVar(vid)` is unresolved, track its universe index in the canonicalized\n                     // result.\n                     Err(mut ui) => {\n-                        // FIXME: perf problem described in #55921.\n-                        ui = ty::UniverseIndex::ROOT;\n+                        if !self.canonicalize_mode.preserve_universes() {\n+                            // FIXME: perf problem described in #55921.\n+                            ui = ty::UniverseIndex::ROOT;\n+                        }\n                         self.canonicalize_ty_var(\n                             CanonicalVarInfo {\n                                 kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n@@ -422,8 +492,10 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `ConstVar(vid)` is unresolved, track its universe index in the\n                     // canonicalized result\n                     Err(mut ui) => {\n-                        // FIXME: perf problem described in #55921.\n-                        ui = ty::UniverseIndex::ROOT;\n+                        if !self.canonicalize_mode.preserve_universes() {\n+                            // FIXME: perf problem described in #55921.\n+                            ui = ty::UniverseIndex::ROOT;\n+                        }\n                         return self.canonicalize_const_var(\n                             CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty) },\n                             ct,\n@@ -462,7 +534,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         value: V,\n         infcx: &InferCtxt<'_, 'tcx>,\n         tcx: TyCtxt<'tcx>,\n-        canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n+        canonicalize_region_mode: &dyn CanonicalizeMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'tcx, V>\n     where\n@@ -493,7 +565,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         let mut canonicalizer = Canonicalizer {\n             infcx,\n             tcx,\n-            canonicalize_region_mode,\n+            canonicalize_mode: canonicalize_region_mode,\n             needs_canonical_flags,\n             variables: SmallVec::new(),\n             query_state,\n@@ -504,10 +576,11 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n         // Once we have canonicalized `out_value`, it should not\n         // contain anything that ties it to this inference context\n-        // anymore, so it should live in the global arena.\n-        debug_assert!(!out_value.needs_infer());\n+        // anymore.\n+        debug_assert!(!out_value.needs_infer() && !out_value.has_placeholders());\n \n-        let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);\n+        let canonical_variables =\n+            tcx.intern_canonical_var_infos(&canonicalizer.universe_canonicalized_variables());\n \n         let max_universe = canonical_variables\n             .iter()\n@@ -527,6 +600,19 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n         let var_values = &mut query_state.var_values;\n \n+        let universe = info.universe();\n+        if universe != ty::UniverseIndex::ROOT {\n+            assert!(self.canonicalize_mode.preserve_universes());\n+\n+            // Insert universe into the universe map. To preserve the order of the\n+            // universes in the value being canonicalized, we don't update the\n+            // universe in `info` until we have finished canonicalizing.\n+            match query_state.universe_map.binary_search(&universe) {\n+                Err(idx) => query_state.universe_map.insert(idx, universe),\n+                Ok(_) => {}\n+            }\n+        }\n+\n         // This code is hot. `variables` and `var_values` are usually small\n         // (fewer than 8 elements ~95% of the time). They are SmallVec's to\n         // avoid allocations in those cases. We also don't use `indices` to\n@@ -569,6 +655,61 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n+    /// Replaces the universe indexes used in `var_values` with their index in\n+    /// `query_state.universe_map`. This minimizes the maximum universe used in\n+    /// the canonicalized value.\n+    fn universe_canonicalized_variables(self) -> SmallVec<[CanonicalVarInfo<'tcx>; 8]> {\n+        if self.query_state.universe_map.len() == 1 {\n+            return self.variables;\n+        }\n+\n+        let reverse_universe_map: FxHashMap<ty::UniverseIndex, ty::UniverseIndex> = self\n+            .query_state\n+            .universe_map\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, universe)| (*universe, ty::UniverseIndex::from_usize(idx)))\n+            .collect();\n+\n+        self.variables\n+            .iter()\n+            .map(|v| CanonicalVarInfo {\n+                kind: match v.kind {\n+                    CanonicalVarKind::Ty(CanonicalTyVarKind::Int | CanonicalTyVarKind::Float) => {\n+                        return *v;\n+                    }\n+                    CanonicalVarKind::Ty(CanonicalTyVarKind::General(u)) => {\n+                        CanonicalVarKind::Ty(CanonicalTyVarKind::General(reverse_universe_map[&u]))\n+                    }\n+                    CanonicalVarKind::Region(u) => {\n+                        CanonicalVarKind::Region(reverse_universe_map[&u])\n+                    }\n+                    CanonicalVarKind::Const(u, t) => {\n+                        CanonicalVarKind::Const(reverse_universe_map[&u], t)\n+                    }\n+                    CanonicalVarKind::PlaceholderTy(placeholder) => {\n+                        CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                    CanonicalVarKind::PlaceholderRegion(placeholder) => {\n+                        CanonicalVarKind::PlaceholderRegion(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                    CanonicalVarKind::PlaceholderConst(placeholder) => {\n+                        CanonicalVarKind::PlaceholderConst(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                },\n+            })\n+            .collect()\n+    }\n+\n     /// Shorthand helper that creates a canonical region variable for\n     /// `r` (always in the root universe). The reason that we always\n     /// put these variables into the root universe is because this"}, {"sha": "4efe3640dfac62b7e63a44104ed4fea89ebf84f5", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -64,9 +64,9 @@ pub struct CanonicalVarValues<'tcx> {\n /// result.\n #[derive(Clone, Debug)]\n pub struct OriginalQueryValues<'tcx> {\n-    /// Map from the universes that appear in the query to the\n-    /// universes in the caller context. For the time being, we only\n-    /// ever put ROOT values into the query, so this map is very\n+    /// Map from the universes that appear in the query to the universes in the\n+    /// caller context. For all queries except `evaluate_goal` (used by Chalk),\n+    /// we only ever put ROOT values into the query, so this map is very\n     /// simple.\n     pub universe_map: SmallVec<[ty::UniverseIndex; 4]>,\n "}, {"sha": "93c2f202545f604fbc706073f1b47395182336bf", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -8,7 +8,7 @@ use crate::traits::{\n     PredicateObligation, SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n@@ -91,7 +91,12 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 let environment = obligation.param_env.caller_bounds();\n                 let goal = ChalkEnvironmentAndGoal { environment, goal: obligation.predicate };\n                 let mut orig_values = OriginalQueryValues::default();\n-                let canonical_goal = infcx.canonicalize_query(goal, &mut orig_values);\n+                if goal.references_error() {\n+                    continue;\n+                }\n+\n+                let canonical_goal =\n+                    infcx.canonicalize_query_preserving_universes(goal, &mut orig_values);\n \n                 match infcx.tcx.evaluate_goal(canonical_goal) {\n                     Ok(response) => {"}, {"sha": "0170ab223b0312c33041965d82303646c41d0c91", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -20,11 +20,10 @@ use rustc_span::symbol::sym;\n use std::fmt;\n use std::sync::Arc;\n \n-use crate::chalk::lowering::{self, LowerInto};\n+use crate::chalk::lowering::LowerInto;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n-    pub(crate) reempty_placeholder: ty::Region<'tcx>,\n }\n \n impl fmt::Debug for RustIrDatabase<'_> {\n@@ -40,12 +39,9 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         bound_vars: SubstsRef<'tcx>,\n     ) -> Vec<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         let predicates = self.interner.tcx.predicates_defined_on(def_id).predicates;\n-        let mut regions_substitutor =\n-            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         predicates\n             .iter()\n             .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n-            .map(|wc| wc.fold_with(&mut regions_substitutor))\n             .filter_map(|wc| LowerInto::<\n                     Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n                     >::lower_into(wc, self.interner)).collect()\n@@ -287,9 +283,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n-        let mut regions_substitutor =\n-            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n-        let trait_ref = trait_ref.fold_with(&mut regions_substitutor);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n@@ -335,9 +328,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n             let self_ty = trait_ref.self_ty();\n             let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n-            let mut regions_substitutor =\n-                lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n-            let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(self.interner);\n \n             parameters[0].assert_ty_ref(self.interner).could_match(\n@@ -556,11 +546,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Fn => lang_items.fn_trait(),\n             FnMut => lang_items.fn_mut_trait(),\n             FnOnce => lang_items.fn_once_trait(),\n+            Generator => lang_items.gen_trait(),\n             Unsize => lang_items.unsize_trait(),\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n-            Generator => lang_items.generator_return(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }\n@@ -684,28 +674,18 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n         let variances = self.interner.tcx.variances_of(def_id.0);\n         chalk_ir::Variances::from_iter(\n             self.interner,\n-            variances.iter().map(|v| match v {\n-                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n-                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n-                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n-                ty::Variance::Bivariant => unimplemented!(),\n-            }),\n+            variances.iter().map(|v| v.lower_into(self.interner)),\n         )\n     }\n \n     fn adt_variance(\n         &self,\n-        def_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n-        let variances = self.interner.tcx.variances_of(def_id.0.did);\n+        let variances = self.interner.tcx.variances_of(adt_id.0.did);\n         chalk_ir::Variances::from_iter(\n             self.interner,\n-            variances.iter().map(|v| match v {\n-                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n-                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n-                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n-                ty::Variance::Bivariant => unimplemented!(),\n-            }),\n+            variances.iter().map(|v| v.lower_into(self.interner)),\n         )\n     }\n }"}, {"sha": "6f143c1c607b32adc9702e545b114c5cb47002ab", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 62, "deletions": 44, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -188,12 +188,18 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 chalk_ir::DomainGoal::ObjectSafe(chalk_ir::TraitId(t)),\n             ),\n \n+            ty::PredicateKind::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n+                chalk_ir::GoalData::SubtypeGoal(chalk_ir::SubtypeGoal {\n+                    a: a.lower_into(interner),\n+                    b: b.lower_into(interner),\n+                })\n+            }\n+\n             // FIXME(chalk): other predicates\n             //\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n-            | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..) => {\n@@ -464,9 +470,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 })\n                 .intern(interner)\n             }\n-            ReEmpty(_) => unimplemented!(),\n-            // FIXME(chalk): need to handle ReErased\n-            ReErased => unimplemented!(),\n+            ReEmpty(ui) => {\n+                chalk_ir::LifetimeData::Empty(chalk_ir::UniverseIndex { counter: ui.index() })\n+                    .intern(interner)\n+            }\n+            ReErased => chalk_ir::LifetimeData::Erased.intern(interner),\n         }\n     }\n }\n@@ -488,12 +496,12 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                     name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n                 })\n             }\n-            chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n-            chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n+            chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Empty(ui) => {\n-                ty::RegionKind::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n+                ty::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n             }\n-            chalk_ir::LifetimeData::Erased => ty::RegionKind::ReErased,\n+            chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n+            chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n         };\n         interner.tcx.mk_region(kind)\n     }\n@@ -788,6 +796,16 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::Polarity> for ty::ImplPolarity\n         }\n     }\n }\n+impl<'tcx> LowerInto<'tcx, chalk_ir::Variance> for ty::Variance {\n+    fn lower_into(self, _interner: RustInterner<'tcx>) -> chalk_ir::Variance {\n+        match self {\n+            ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+            ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+            ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+            ty::Variance::Bivariant => unimplemented!(),\n+        }\n+    }\n+}\n \n impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>>>\n     for ty::ProjectionPredicate<'tcx>\n@@ -1016,10 +1034,6 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            // FIXME(chalk): currently we convert params to placeholders starting at\n-            // index `0`. To support placeholders, we'll actually need to do a\n-            // first pass to collect placeholders. Then we can insert params after.\n-            ty::Placeholder(_) => unimplemented!(),\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n@@ -1035,15 +1049,15 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n                     }))\n                 }\n             },\n-\n             _ => t.super_fold_with(self),\n         }\n     }\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n         match r {\n-            // FIXME(chalk) - jackh726 - this currently isn't hit in any tests.\n-            // This covers any region variables in a goal, right?\n+            // FIXME(chalk) - jackh726 - this currently isn't hit in any tests,\n+            // since canonicalization will already change these to canonical\n+            // variables (ty::ReLateBound).\n             ty::ReEarlyBound(_re) => match self.named_regions.get(&_re.def_id) {\n                 Some(idx) => {\n                     let br = ty::BoundRegion {\n@@ -1066,6 +1080,39 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n     }\n }\n \n+crate struct ReverseParamsSubstitutor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+}\n+\n+impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n+    crate fn new(\n+        tcx: TyCtxt<'tcx>,\n+        params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    ) -> Self {\n+        Self { tcx, params }\n+    }\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        match *t.kind() {\n+            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n+                match self.params.get(&name.as_usize()) {\n+                    Some(param) => self.tcx.mk_ty(ty::Param(*param)),\n+                    None => t,\n+                }\n+            }\n+\n+            _ => t.super_fold_with(self),\n+        }\n+    }\n+}\n+\n /// Used to collect `Placeholder`s.\n crate struct PlaceholdersCollector {\n     universe_index: ty::UniverseIndex,\n@@ -1110,32 +1157,3 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n         r.super_visit_with(self)\n     }\n }\n-\n-/// Used to substitute specific `Regions`s with placeholders.\n-crate struct RegionsSubstitutor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    reempty_placeholder: ty::Region<'tcx>,\n-}\n-\n-impl<'tcx> RegionsSubstitutor<'tcx> {\n-    crate fn new(tcx: TyCtxt<'tcx>, reempty_placeholder: ty::Region<'tcx>) -> Self {\n-        RegionsSubstitutor { tcx, reempty_placeholder }\n-    }\n-}\n-\n-impl<'tcx> TypeFolder<'tcx> for RegionsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n-        match r {\n-            ty::ReEmpty(ui) => {\n-                assert_eq!(ui.as_usize(), 0);\n-                self.reempty_placeholder\n-            }\n-\n-            _ => r.super_fold_with(self),\n-        }\n-    }\n-}"}, {"sha": "3c2a266dab9bcf996a555c754e4ee480b54cc1e6", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -22,9 +22,8 @@ use rustc_infer::infer::canonical::{\n use rustc_infer::traits::{self, CanonicalChalkEnvironmentAndGoal};\n \n use crate::chalk::db::RustIrDatabase as ChalkRustIrDatabase;\n-use crate::chalk::lowering::{\n-    LowerInto, ParamsSubstitutor, PlaceholdersCollector, RegionsSubstitutor,\n-};\n+use crate::chalk::lowering::LowerInto;\n+use crate::chalk::lowering::{ParamsSubstitutor, PlaceholdersCollector, ReverseParamsSubstitutor};\n \n use chalk_solve::Solution;\n \n@@ -42,19 +41,10 @@ crate fn evaluate_goal<'tcx>(\n     let mut placeholders_collector = PlaceholdersCollector::new();\n     obligation.visit_with(&mut placeholders_collector);\n \n-    let reempty_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n-        universe: ty::UniverseIndex::ROOT,\n-        name: ty::BoundRegionKind::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n-    }));\n-\n     let mut params_substitutor =\n         ParamsSubstitutor::new(tcx, placeholders_collector.next_ty_placeholder);\n     let obligation = obligation.fold_with(&mut params_substitutor);\n-    // FIXME(chalk): we really should be substituting these back in the solution\n-    let _params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n-\n-    let mut regions_substitutor = RegionsSubstitutor::new(tcx, reempty_placeholder);\n-    let obligation = obligation.fold_with(&mut regions_substitutor);\n+    let params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n \n     let max_universe = obligation.max_universe.index();\n \n@@ -96,7 +86,8 @@ crate fn evaluate_goal<'tcx>(\n \n     use chalk_solve::Solver;\n     let mut solver = chalk_engine::solve::SLGSolver::new(32, None);\n-    let db = ChalkRustIrDatabase { interner, reempty_placeholder };\n+    let db = ChalkRustIrDatabase { interner };\n+    debug!(?lowered_goal);\n     let solution = solver.solve(&db, &lowered_goal);\n     debug!(?obligation, ?solution, \"evaluate goal\");\n \n@@ -110,8 +101,9 @@ crate fn evaluate_goal<'tcx>(\n         use rustc_middle::infer::canonical::CanonicalVarInfo;\n \n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n+        let mut reverse_param_substitutor = ReverseParamsSubstitutor::new(tcx, params);\n         subst.as_slice(interner).iter().for_each(|p| {\n-            var_values.push(p.lower_into(interner));\n+            var_values.push(p.lower_into(interner).fold_with(&mut reverse_param_substitutor));\n         });\n         let variables: Vec<_> = binders\n             .iter(interner)"}, {"sha": "d180de9be3bf310896f4f65b601240a691ebb9da", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,6 +1,5 @@\n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`.\n // This should hopefully be fixed with Chalk.\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "c23e54594ee301f679c2cd46c48929dbc4f55693", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:36\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:36\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n@@ -11,7 +11,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n    |             ++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:43\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:43\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n@@ -23,7 +23,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n    |             ++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:93\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely"}, {"sha": "b0703a4ee22b3b35fc792be2e98cd53a4a46c004", "filename": "src/test/ui/associated-type-bounds/trait-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "97c5acf1f72ca42129efce0205612dc331f7719d", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]"}, {"sha": "c9b302b96919fef3c818c780a4e6a9cc9ff2396d", "filename": "src/test/ui/associated-types/associated-types-stream.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n-// ignore-compare-mode-chalk\n-\n \n trait Stream {\n     type Car;"}, {"sha": "f74c5a8590d1d5989766217919f176d4e05b5e9d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,"}, {"sha": "354caef1e41d8e4594e5d1a11fc63813c9f1a4cb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -14,13 +14,13 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -29,13 +29,13 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n+  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n    |\n LL |     type W = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `Z`\n-  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+  --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this"}, {"sha": "d7f3151a502ee667dba173f83e5b583e243522a2", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n trait Cycle: Sized {\n     type Next: Cycle<Next = Self>;\n }"}, {"sha": "4c04d12a71470d25f0f9b33a88ae6c4bb7c95b02", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n    |\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n+  --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -14,13 +14,13 @@ LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:31:14\n    |\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X`\n-  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n+  --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this"}, {"sha": "47ee3e7ad70e83a8267515af1f933d6a7095653b", "filename": "src/test/ui/associated-types/issue-50301.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-50301.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,6 +1,5 @@\n // Tests that HRTBs are correctly accepted -- https://github.com/rust-lang/rust/issues/50301\n // check-pass\n-// ignore-compare-mode-chalk\n trait Trait\n where\n     for<'a> &'a Self::IntoIter: IntoIterator<Item = u32>,"}, {"sha": "f4ebf91924ced1384025f84367366d7af67e70ce", "filename": "src/test/ui/chalkify/assert.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -0,0 +1,6 @@\n+// run-pass\n+// compile-flags: -Z chalk\n+\n+fn main() {\n+    assert_eq!(1, 1);\n+}"}, {"sha": "0f0df29019e7bbc1dbea32322013e0b696abb71e", "filename": "src/test/ui/chalkify/println.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -2,6 +2,5 @@\n // compile-flags: -Z chalk\n \n fn main() {\n-    // FIXME(chalk): Require `RegionOutlives`/`TypeOutlives`/`Subtype` support\n-    //println!(\"hello\");\n+    println!(\"hello\");\n }"}, {"sha": "d56abc42bf540c048951ac55830e97e3c50bf309", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -5,8 +5,7 @@ use std::fmt::Display;\n \n fn main() {\n     let d: &dyn Display = &mut 3;\n-    // FIXME(chalk) should be able to call d.to_string() as well, but doing so\n-    // requires Chalk to be able to prove trait object well-formed goals.\n+    d.to_string();\n     (&d).to_string();\n     let f: &dyn Fn(i32) -> _ = &|x| x + x;\n     f(2);"}, {"sha": "2a4b6f3b76f90b7119fae794caf481c1b4187f88", "filename": "src/test/ui/consts/const-eval/ub-nonnull.chalk.64bit.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.chalk.64bit.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -0,0 +1,9 @@\n+error[E0284]: type annotations needed: cannot satisfy `<usize as SliceIndex<[u8]>>::Output == _`\n+  --> $DIR/ub-nonnull.rs:19:30\n+   |\n+LL |     let out_of_bounds_ptr = &ptr[255];\n+   |                              ^^^^^^^^ cannot satisfy `<usize as SliceIndex<[u8]>>::Output == _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "39352ca848a8020cc23b557aaadff070679d03ab", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.chalk.64bit.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.chalk.64bit.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/ub-wide-ptr.rs:90:67\n+   |\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n+   |                                                                   ^^^^^^^^^^^^^^ cannot infer type for type parameter `U` declared on the function `transmute`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "4b1cbe80c506dabfa6c7432f7d4def8caac36f69", "filename": "src/test/ui/deriving/deriving-associated-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "da45f0d133deb955110f952a392c4acb68efb8dd", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-compare-mode-chalk\n \n #![feature(fn_traits,\n            step_trait,"}, {"sha": "17a6a85787442cf8489e2bb712af3a57c4362ac6", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-// ignore-compare-mode-chalk\n \n #![feature(type_alias_impl_trait)]\n "}, {"sha": "b76b564dfb139352cd83be0a07b8d560c69b0d0d", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:14:20\n+  --> $DIR/issue-55872-2.rs:13:20\n    |\n LL |     fn foo<T>() -> Self::E {\n    |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:28\n+  --> $DIR/issue-55872-2.rs:13:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "183728b0f7f0a5224386c52da030a73c3899ea6d", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n pub trait Bar {"}, {"sha": "39d870dc003bb580de5d2e8f0cc66cd99141bdd3", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:13:28\n+  --> $DIR/issue-55872.rs:12:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "b947fc1d2396faca035781daa60a7ed5b4dda046", "filename": "src/test/ui/impl-trait/issues/issue-65581.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-65581.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n \n #![allow(dead_code)]\n "}, {"sha": "7fe0900ed5fde143d23b9553d1a0208db49b357a", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,10 +1,10 @@\n-// ignore-compare-mode-chalk\n-\n trait Next {\n     type Next: Next;\n }\n \n-struct GetNext<T: Next> { t: T }\n+struct GetNext<T: Next> {\n+    t: T,\n+}\n \n impl<T: Next> Next for GetNext<T> {\n     type Next = <GetNext<T> as Next>::Next;"}, {"sha": "95e1f60d8b029b607d7dacc9a0785ce84f9c534c", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,9 +1,10 @@\n-// ignore-compare-mode-chalk\n trait Next {\n     type Next: Next;\n }\n \n-struct GetNext<T: Next> { t: T }\n+struct GetNext<T: Next> {\n+    t: T,\n+}\n \n impl<T: Next> Next for GetNext<T> {\n     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "7519e632d5446ac10cd64a698b6199bac31214ac", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,12 +1,12 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:9:17\n+  --> $DIR/issue-23122-2.rs:10:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n-  --> $DIR/issue-23122-2.rs:8:15\n+  --> $DIR/issue-23122-2.rs:9:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {\n    |               ^^^^     ^^^^^^^^^^"}, {"sha": "1241fb0b1f85f88bee59636c155911ea3e0fd0f5", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-compare-mode-chalk\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],"}, {"sha": "8db9e00588564c3ca4c102feb72598ae6eb9429c", "filename": "src/test/ui/issues/issue-33187.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,10 +1,15 @@\n // run-pass\n-// ignore-compare-mode-chalk\n+\n struct Foo<A: Repr>(<A as Repr>::Data);\n \n-impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy { }\n-impl<A> Clone for Foo<A> where <A as Repr>::Data: Clone {\n-    fn clone(&self) -> Self { Foo(self.0.clone()) }\n+impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy {}\n+impl<A> Clone for Foo<A>\n+where\n+    <A as Repr>::Data: Clone,\n+{\n+    fn clone(&self) -> Self {\n+        Foo(self.0.clone())\n+    }\n }\n \n trait Repr {\n@@ -15,5 +20,4 @@ impl<A> Repr for A {\n     type Data = u32;\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "9cae6cf5e7665ced8faeb73dab67ad3676e0b3c0", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-compare-mode-chalk\n \n #![feature(associated_type_defaults)]\n "}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here"}, {"sha": "d802ce3b6cfbf88f70715c8436d79afd35c34e6a", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-chalk\n-\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }\n@@ -16,12 +14,12 @@ pub trait Graph<'a> {\n \n     fn out_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n-//~^ ERROR cannot infer\n+        //~^ ERROR cannot infer\n     }\n \n     fn in_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n-//~^ ERROR cannot infer\n+        //~^ ERROR cannot infer\n     }\n }\n "}, {"sha": "569a13f45bce8580fbd013d176e9bdf017e061fe", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,47 +1,47 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:7:17\n+  --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:18:40: 18:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:18:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:18:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n               found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:7:17\n+  --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:23:39: 23:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:23:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:23:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "36e9932602fb035ae668baa819915bbb57b88f7a", "filename": "src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n // ignore-tidy-filelength\n-// ignore-compare-mode-chalk\n #![crate_type = \"rlib\"]\n \n fn banana(v: &str) -> u32 {"}, {"sha": "5109a0e4a683de41ab74b825f5589f5b709011dc", "filename": "src/test/ui/nll/ty-outlives/issue-53789-2.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,16 +1,14 @@\n // Regression test for #53789.\n //\n // check-pass\n-// ignore-compare-mode-chalk\n \n+use std::cmp::Ord;\n use std::collections::BTreeMap;\n use std::ops::Range;\n-use std::cmp::Ord;\n \n macro_rules! valuetree {\n     () => {\n-        type ValueTree =\n-            <Self::Strategy as $crate::Strategy>::Value;\n+        type ValueTree = <Self::Strategy as $crate::Strategy>::Value;\n     };\n }\n \n@@ -41,7 +39,9 @@ macro_rules! product_type {\n macro_rules! default {\n     ($type: ty, $val: expr) => {\n         impl Default for $type {\n-            fn default() -> Self { $val.into() }\n+            fn default() -> Self {\n+                $val.into()\n+            }\n         }\n     };\n }\n@@ -90,21 +90,17 @@ trait ValueTree {\n }\n \n trait Strategy {\n-    type Value : ValueTree;\n+    type Value: ValueTree;\n }\n \n #[derive(Clone)]\n-struct VecStrategy<T : Strategy> {\n+struct VecStrategy<T: Strategy> {\n     element: T,\n     size: Range<usize>,\n }\n \n-fn vec<T : Strategy>(element: T, size: Range<usize>)\n-                     -> VecStrategy<T> {\n-    VecStrategy {\n-        element: element,\n-        size: size,\n-    }\n+fn vec<T: Strategy>(element: T, size: Range<usize>) -> VecStrategy<T> {\n+    VecStrategy { element: element, size: size }\n }\n \n type ValueFor<S> = <<S as Strategy>::Value as ValueTree>::Value;\n@@ -124,7 +120,6 @@ type StrategyType<'a, A> = <A as Arbitrary<'a>>::Strategy;\n struct SizeBounds(Range<usize>);\n default!(SizeBounds, 0..100);\n \n-\n impl From<Range<usize>> for SizeBounds {\n     fn from(high: Range<usize>) -> Self {\n         unimplemented!()\n@@ -137,24 +132,26 @@ impl From<SizeBounds> for Range<usize> {\n     }\n }\n \n-\n-fn any_with<'a, A: Arbitrary<'a>>(args: A::Parameters)\n-                                  -> StrategyType<'a, A> {\n+fn any_with<'a, A: Arbitrary<'a>>(args: A::Parameters) -> StrategyType<'a, A> {\n     unimplemented!()\n }\n \n-impl<K: ValueTree, V: ValueTree> Strategy for (K, V) where\n-    <K as ValueTree>::Value: Ord {\n+impl<K: ValueTree, V: ValueTree> Strategy for (K, V)\n+where\n+    <K as ValueTree>::Value: Ord,\n+{\n     type Value = TupleValueTree<(K, V)>;\n }\n \n-impl<K: ValueTree, V: ValueTree> ValueTree for TupleValueTree<(K, V)> where\n-    <K as ValueTree>::Value: Ord {\n+impl<K: ValueTree, V: ValueTree> ValueTree for TupleValueTree<(K, V)>\n+where\n+    <K as ValueTree>::Value: Ord,\n+{\n     type Value = BTreeMapValueTree<K, V>;\n }\n \n #[derive(Clone)]\n-struct VecValueTree<T : ValueTree> {\n+struct VecValueTree<T: ValueTree> {\n     elements: Vec<T>,\n }\n \n@@ -185,8 +182,8 @@ impl<'a, A, B> Arbitrary<'a> for BTreeMap<A, B>\n where\n     A: Arbitrary<'static> + Ord,\n     B: Arbitrary<'static>,\n-StrategyFor<A>: 'static,\n-StrategyFor<B>: 'static,\n+    StrategyFor<A>: 'static,\n+    StrategyFor<B>: 'static,\n {\n     valuetree!();\n     type Parameters = RangedParams2<A::Parameters, B::Parameters>;\n@@ -208,10 +205,14 @@ mapfn! {\n     }\n }\n \n-fn btree_map<K : Strategy + 'static, V : Strategy + 'static>\n-    (key: K, value: V, size: Range<usize>)\n-     -> BTreeMapStrategy<K, V>\n-where ValueFor<K> : Ord {\n+fn btree_map<K: Strategy + 'static, V: Strategy + 'static>(\n+    key: K,\n+    value: V,\n+    size: Range<usize>,\n+) -> BTreeMapStrategy<K, V>\n+where\n+    ValueFor<K>: Ord,\n+{\n     unimplemented!()\n }\n \n@@ -245,4 +246,4 @@ mod statics {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "c043114b565c8945a3ae406553c536775723e63d", "filename": "src/test/ui/specialization/default-associated-type-bound-1.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,6 +1,5 @@\n // Check that we check that default associated types satisfy the required\n // bounds on them.\n-// ignore-compare-mode-chalk\n \n #![feature(specialization)]\n //~^ WARNING `specialization` is incomplete", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs"}, {"sha": "6680a29f94245eb27f5c1aa74230dd4f140c06b2", "filename": "src/test/ui/specialization/default-associated-type-bound-1.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-1.rs:5:12\n+  --> $DIR/default-associated-type-bound-1.rs:4:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,13 +9,13 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/deafult-associated-type-bound-1.rs:19:22\n+  --> $DIR/default-associated-type-bound-1.rs:18:22\n    |\n LL |     default type U = str;\n    |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-associated-type-bound-1.rs:9:13\n+  --> $DIR/default-associated-type-bound-1.rs:8:13\n    |\n LL |     type U: Clone;\n    |             ^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr"}, {"sha": "0a21b1f09106ba36feeef0cd479eb277603586ba", "filename": "src/test/ui/specialization/default-associated-type-bound-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.rs?ref=aff74a16971237f45182843388ac662c1822f960", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-2.rs"}, {"sha": "0fd1f65b0a2014709e6290cbca5c92964761853a", "filename": "src/test/ui/specialization/default-associated-type-bound-2.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-2.rs:2:12\n+  --> $DIR/default-associated-type-bound-2.rs:2:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `&'static B` with `B`\n-  --> $DIR/deafult-associated-type-bound-2.rs:16:22\n+  --> $DIR/default-associated-type-bound-2.rs:16:22\n    |\n LL |     default type U = &'static B;\n    |                      ^^^^^^^^^^ no implementation for `&'static B == B`\n    |\n    = help: the trait `PartialEq<B>` is not implemented for `&'static B`\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-associated-type-bound-2.rs:6:13\n+  --> $DIR/default-associated-type-bound-2.rs:6:13\n    |\n LL |     type U: PartialEq<T>;\n    |             ^^^^^^^^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr"}, {"sha": "0f5714e996a17cef78e0dd3c6112882e72c57db3", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.rs?ref=aff74a16971237f45182843388ac662c1822f960", "previous_filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs"}, {"sha": "58c6667c8c7ad651b525da7ab18729a68df71862", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-generic-associated-type-bound.rs:3:12\n+  --> $DIR/default-generic-associated-type-bound.rs:3:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -9,14 +9,14 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `T` with `T`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:18:26\n+  --> $DIR/default-generic-associated-type-bound.rs:18:26\n    |\n LL |     default type U<'a> = &'a T;\n    |                          ^^^^^ no implementation for `T == T`\n    |\n    = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n note: required by a bound in `X::U`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:8:17\n+  --> $DIR/default-generic-associated-type-bound.rs:8:17\n    |\n LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n    |                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `X::U`", "previous_filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr"}, {"sha": "f936dc42f133d0af0fc012b06d855dd54b4be427", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;"}, {"sha": "9971c7e0e20ee16ee809ebb6318fb454f8233490", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:20:42\n+  --> $DIR/issue-53598.rs:19:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^"}, {"sha": "13a6b7c2f7ceb1706a27be93e232c557bcb26d7f", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n #![feature(type_alias_impl_trait)]\n "}, {"sha": "b2e3f46f1f5823bebe23ad90879ee45f5c82c15d", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:16:58\n+  --> $DIR/issue-57700.rs:15:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^"}, {"sha": "badf35484f3604c737c38b56a64c575f34b4d988", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-chalk\n-\n trait Bug {\n     type Item: Bug;\n "}, {"sha": "dc8a381aece9411300d61c334140986d94a65523", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aff74a16971237f45182843388ac662c1822f960/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=aff74a16971237f45182843388ac662c1822f960", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:10:17\n+  --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:12:40\n+  --> $DIR/issue-60371.rs:10:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^ the trait `Bug` is not implemented for `()`\n@@ -17,7 +17,7 @@ LL |     const FUN: fn() -> Self::Item = || ();\n              <&() as Bug>\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60371.rs:12:37\n+  --> $DIR/issue-60371.rs:10:37\n    |\n LL | impl Bug for &() {\n    |              - cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type"}]}