{"sha": "06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjdjYTMwN2Q3ZmZkYmRhZmUwNWViNzZjYzg1MGVhZjcxNjkxNmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-04T14:04:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-10T18:17:08Z"}, "message": "Keep def_spans collected by resolution.", "tree": {"sha": "b68a0c96d03008b7173b4da1c04ef7b20c339de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68a0c96d03008b7173b4da1c04ef7b20c339de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "html_url": "https://github.com/rust-lang/rust/commit/06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f7ca307d7ffdbdafe05eb76cc850eaf716916d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf0736e130e2203c58654f7353dbf9575e49d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf0736e130e2203c58654f7353dbf9575e49d5c", "html_url": "https://github.com/rust-lang/rust/commit/7bf0736e130e2203c58654f7353dbf9575e49d5c"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "ada012b6697f8656c1b3794e2af45672d1c41b67", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06f7ca307d7ffdbdafe05eb76cc850eaf716916d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f7ca307d7ffdbdafe05eb76cc850eaf716916d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n \n use std::fmt::{self, Write};\n use std::hash::Hash;\n@@ -107,6 +108,8 @@ pub struct Definitions {\n \n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expansions_that_defined: FxHashMap<LocalDefId, ExpnId>,\n+\n+    def_id_to_span: IndexVec<LocalDefId, Span>,\n }\n \n /// A unique identifier that we can use to lookup a definition\n@@ -324,7 +327,7 @@ impl Definitions {\n     }\n \n     /// Adds a root definition (no parent) and a few other reserved definitions.\n-    pub fn new(stable_crate_id: StableCrateId) -> Definitions {\n+    pub fn new(stable_crate_id: StableCrateId, crate_span: Span) -> Definitions {\n         let key = DefKey {\n             parent: None,\n             disambiguated_data: DisambiguatedDefPathData {\n@@ -341,11 +344,16 @@ impl Definitions {\n         let root = LocalDefId { local_def_index: table.allocate(key, def_path_hash) };\n         assert_eq!(root.local_def_index, CRATE_DEF_INDEX);\n \n+        let mut def_id_to_span = IndexVec::new();\n+        let _root = def_id_to_span.push(crate_span);\n+        debug_assert_eq!(_root, root);\n+\n         Definitions {\n             table,\n             def_id_to_hir_id: Default::default(),\n             hir_id_to_def_id: Default::default(),\n             expansions_that_defined: Default::default(),\n+            def_id_to_span,\n         }\n     }\n \n@@ -361,6 +369,7 @@ impl Definitions {\n         data: DefPathData,\n         expn_id: ExpnId,\n         mut next_disambiguator: impl FnMut(LocalDefId, DefPathData) -> u32,\n+        span: Span,\n     ) -> LocalDefId {\n         debug!(\"create_def(parent={:?}, data={:?}, expn_id={:?})\", parent, data, expn_id);\n \n@@ -385,6 +394,9 @@ impl Definitions {\n             self.expansions_that_defined.insert(def_id, expn_id);\n         }\n \n+        let _id = self.def_id_to_span.push(span);\n+        debug_assert_eq!(_id, def_id);\n+\n         def_id\n     }\n \n@@ -412,6 +424,12 @@ impl Definitions {\n         self.expansions_that_defined.get(&id).copied().unwrap_or_else(ExpnId::root)\n     }\n \n+    /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n+    #[inline]\n+    pub fn def_span(&self, def_id: LocalDefId) -> Span {\n+        self.def_id_to_span[def_id]\n+    }\n+\n     pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n         self.def_id_to_hir_id.iter_enumerated().map(|(k, _)| k)\n     }"}, {"sha": "ead3ca9fcde3f20344b96430904c2ceea308b2a1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06f7ca307d7ffdbdafe05eb76cc850eaf716916d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f7ca307d7ffdbdafe05eb76cc850eaf716916d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "patch": "@@ -1012,8 +1012,6 @@ pub struct Resolver<'a> {\n \n     next_node_id: NodeId,\n \n-    def_id_to_span: IndexVec<LocalDefId, Span>,\n-\n     node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n     def_id_to_node_id: IndexVec<LocalDefId, ast::NodeId>,\n \n@@ -1197,9 +1195,7 @@ impl ResolverAstLowering for Resolver<'_> {\n             disambiguator\n         };\n \n-        let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator);\n-\n-        assert_eq!(self.def_id_to_span.push(span), def_id);\n+        let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n         // anything in the AST, so they don't have a `NodeId`. For these cases\n@@ -1269,14 +1265,12 @@ impl<'a> Resolver<'a> {\n         let mut module_map = FxHashMap::default();\n         module_map.insert(root_local_def_id, graph_root);\n \n-        let definitions = Definitions::new(session.local_stable_crate_id());\n+        let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n         let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();\n         visibilities.insert(root_local_def_id, ty::Visibility::Public);\n \n-        let mut def_id_to_span = IndexVec::default();\n-        assert_eq!(def_id_to_span.push(rustc_span::DUMMY_SP), root);\n         let mut def_id_to_node_id = IndexVec::default();\n         assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);\n         let mut node_id_to_def_id = FxHashMap::default();\n@@ -1393,7 +1387,6 @@ impl<'a> Resolver<'a> {\n                 .collect(),\n             lint_buffer: LintBuffer::default(),\n             next_node_id: NodeId::from_u32(1),\n-            def_id_to_span,\n             node_id_to_def_id,\n             def_id_to_node_id,\n             placeholder_field_indices: Default::default(),\n@@ -3360,7 +3353,7 @@ impl<'a> Resolver<'a> {\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {\n-        if let Some(def_id) = def_id.as_local() { Some(self.def_id_to_span[def_id]) } else { None }\n+        def_id.as_local().map(|def_id| self.definitions.def_span(def_id))\n     }\n \n     /// Checks if an expression refers to a function marked with"}]}