{"sha": "75181dc22f6e25760a95fdc4ad92f9a054506486", "node_id": "C_kwDOAAsO6NoAKDc1MTgxZGMyMmY2ZTI1NzYwYTk1ZmRjNGFkOTJmOWEwNTQ1MDY0ODY", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-14T02:56:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-23T18:38:53Z"}, "message": "Error if we try to read dep during deserialization", "tree": {"sha": "485077235d85a551549845d3f69f813f3d7ed735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485077235d85a551549845d3f69f813f3d7ed735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75181dc22f6e25760a95fdc4ad92f9a054506486", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHEwj0ACgkQtAh+UQ6Y\nsWS9Yg//dINBPScqcXqeOKBeEIIMg16rmvSW+0kzgSaD4io/OGTzTkcnH9x92LgP\nHPt5S6LwugWDl1GGjCn6gYkBOeY+1Iq5bUaDZrgKYWkm3uBrIpbKVzt5RdmdS8Ko\nmebFCQaP/unsv88QQHqmiMzIcuk6uBIvjJ3LzjA3aaUIzdVaEUAMISi6IsoYYsgF\nzYsDJnT8VdAiv34OSrjPxuzL7hQhaRBqu8ccilta5eTfPo9Vtxfy5y3U/baYDfVc\n7HFCbqesn5j/L0TI2vt1Vqvip50S9zIE6gqZbVn+bkGjhA6OXBXTkKNdjyHmAMCF\nmuOydGd5s3bqZyZEt7sDdrW8D5DCrvPcwJMSkDhpVKlQeKR4XUY56MOYIWaHBN3C\naAD/opozA9EJno97TL9Kt9nDf+9ZBFt5WaPgd0qD8BZCDafTF6U/UP1MptsOgWNJ\nEDzPCqMBq2yT/nPCIito28TEsAVaUyqH/F9oKlg8zZt40Gn3UFy+uCPZiwah29sT\nykfueFuYUBcYbfJtwQnmjMmcIQ22UIDwBM2MRgVg6zPDMTRRp3M2iuljrYy8ONrC\n8JvpoA0OKrMq2aQb8aZKTVPv1GE9aNSSKtLqyFnHnGn6KGbSG2ifV/hcRYj3VqO0\n5FWLBqqHOxXusYxIDk2vt0Y5JKiGKuKe1SLtjNVa7D4yRPts6fo=\n=e26w\n-----END PGP SIGNATURE-----", "payload": "tree 485077235d85a551549845d3f69f813f3d7ed735\nparent 489296d82561f596c278e90edc10eb56168ab623\nauthor Aaron Hill <aa1ronham@gmail.com> 1639450590 -0600\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640284733 -0500\n\nError if we try to read dep during deserialization\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75181dc22f6e25760a95fdc4ad92f9a054506486", "html_url": "https://github.com/rust-lang/rust/commit/75181dc22f6e25760a95fdc4ad92f9a054506486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75181dc22f6e25760a95fdc4ad92f9a054506486/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489296d82561f596c278e90edc10eb56168ab623", "url": "https://api.github.com/repos/rust-lang/rust/commits/489296d82561f596c278e90edc10eb56168ab623", "html_url": "https://github.com/rust-lang/rust/commit/489296d82561f596c278e90edc10eb56168ab623"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "5ebeae35964dee11b8bbbaadfb116c81b62c9592", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=75181dc22f6e25760a95fdc4ad92f9a054506486", "patch": "@@ -83,12 +83,17 @@ impl QueryContext for QueryCtxt<'_> {\n         &self,\n         token: QueryJobId<Self::DepKind>,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n+        read_allowed: bool,\n         compute: impl FnOnce() -> R,\n     ) -> R {\n         // The `TyCtxt` stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'tcx lifetimes\n         // when accessing the `ImplicitCtxt`.\n         tls::with_related_context(**self, move |current_icx| {\n+            let mut old_read_allowed = false;\n+            if let Some(task_deps) = current_icx.task_deps {\n+                old_read_allowed = std::mem::replace(&mut task_deps.lock().read_allowed, read_allowed);\n+            }\n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = ImplicitCtxt {\n                 tcx: **self,\n@@ -99,9 +104,14 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            tls::enter_context(&new_icx, |_| {\n+            let res = tls::enter_context(&new_icx, |_| {\n                 rustc_data_structures::stack::ensure_sufficient_stack(compute)\n-            })\n+            });\n+\n+            if let Some(task_deps) = new_icx.task_deps {\n+                task_deps.lock().read_allowed = old_read_allowed;\n+            }\n+            res\n         })\n     }\n }"}, {"sha": "64dcc6f37f14409f937620d97d953d77a7194991", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=75181dc22f6e25760a95fdc4ad92f9a054506486", "patch": "@@ -251,6 +251,7 @@ impl<K: DepKind> DepGraph<K> {\n                 reads: SmallVec::new(),\n                 read_set: Default::default(),\n                 phantom_data: PhantomData,\n+                read_allowed: true,\n             }))\n         };\n         let result = K::with_deps(task_deps.as_ref(), || task(cx, arg));\n@@ -362,6 +363,11 @@ impl<K: DepKind> DepGraph<K> {\n                 if let Some(task_deps) = task_deps {\n                     let mut task_deps = task_deps.lock();\n                     let task_deps = &mut *task_deps;\n+\n+                    if !task_deps.read_allowed {\n+                        panic!(\"Illegal read of: {:?}\", dep_node_index);\n+                    }\n+\n                     if cfg!(debug_assertions) {\n                         data.current.total_read_count.fetch_add(1, Relaxed);\n                     }\n@@ -1115,6 +1121,7 @@ pub struct TaskDeps<K> {\n     reads: EdgesVec,\n     read_set: FxHashSet<DepNodeIndex>,\n     phantom_data: PhantomData<DepNode<K>>,\n+    pub read_allowed: bool,\n }\n \n impl<K> Default for TaskDeps<K> {\n@@ -1125,6 +1132,7 @@ impl<K> Default for TaskDeps<K> {\n             reads: EdgesVec::new(),\n             read_set: FxHashSet::default(),\n             phantom_data: PhantomData,\n+            read_allowed: true,\n         }\n     }\n }"}, {"sha": "265e0b80d7c934f2029e63643a276d04ba801bb9", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=75181dc22f6e25760a95fdc4ad92f9a054506486", "patch": "@@ -142,6 +142,7 @@ pub trait QueryContext: HasDepContext {\n         &self,\n         token: QueryJobId<Self::DepKind>,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n+        read_allowed: bool,\n         compute: impl FnOnce() -> R,\n     ) -> R;\n }"}, {"sha": "e4a177cbffb2b8790ae58d13974d99496beb9b58", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75181dc22f6e25760a95fdc4ad92f9a054506486/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=75181dc22f6e25760a95fdc4ad92f9a054506486", "patch": "@@ -440,7 +440,7 @@ where\n     // Fast path for when incr. comp. is off.\n     if !dep_graph.is_fully_enabled() {\n         let prof_timer = tcx.dep_context().profiler().query_provider();\n-        let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));\n+        let result = tcx.start_query(job_id, None, true, || query.compute(*tcx.dep_context(), key));\n         let dep_node_index = dep_graph.next_virtual_depnode_index();\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n         return (result, dep_node_index);\n@@ -453,7 +453,7 @@ where\n \n         // The diagnostics for this query will be promoted to the current session during\n         // `try_mark_green()`, so we can ignore them here.\n-        if let Some(ret) = tcx.start_query(job_id, None, || {\n+        if let Some(ret) = tcx.start_query(job_id, None, false, || {\n             try_load_from_disk_and_cache_in_memory(tcx, &key, &dep_node, query)\n         }) {\n             return ret;\n@@ -463,7 +463,7 @@ where\n     let prof_timer = tcx.dep_context().profiler().query_provider();\n     let diagnostics = Lock::new(ThinVec::new());\n \n-    let (result, dep_node_index) = tcx.start_query(job_id, Some(&diagnostics), || {\n+    let (result, dep_node_index) = tcx.start_query(job_id, Some(&diagnostics), true, || {\n         if query.anon {\n             return dep_graph.with_anon_task(*tcx.dep_context(), query.dep_kind, || {\n                 query.compute(*tcx.dep_context(), key)"}]}