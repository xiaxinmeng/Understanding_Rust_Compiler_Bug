{"sha": "83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYWE2ZmJkMWVmN2ZkN2ZhZjI3ZDhmN2ZkODY3OWNiODVhODA5N2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-10T14:53:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-10T14:53:59Z"}, "message": "Merge #6797\n\n6797: Normalize spelling to American English r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "164ef144e07ed4f24c751355b735169878468789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/164ef144e07ed4f24c751355b735169878468789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0jaHCRBK7hj4Ov3rIwAAdHIIAFfnCUoLGjfCpLfEVEyAHodK\n+ZPZRJJQX9jbRbCZCKdzXYfNVdckFYRScl9qEhV2AX7xQ2CcK5BSYDmQ/5Q9LD0T\nRC3lUPsQvqtubel4l0T3UDmX3/1sRaBMwl+xNYJCZu8n+fEekWPR6dyeDUV6kvWv\nAmKzmsWleE2oNy28SfWLeVlhqqSdmETbQnJJcoUp4W7DFipttlT6I8ssexSPwoaw\n3Z+Nl4ve6qML7O+Q2vEFhK191uxJAdUeTZi58U5GsFG2F3LRm5nNd/Y04rhx5rMd\nlPMPmX/nW7+k1ZUosaTfh82RA1hMXP22hicxzFA7f+wqbQjR6UV0KKOUsSUbA4I=\n=vAy8\n-----END PGP SIGNATURE-----\n", "payload": "tree 164ef144e07ed4f24c751355b735169878468789\nparent 1341a98f0551edf3a445c40507ab1abb3d7c71bb\nparent 17f236c2b041de7abd8ec3be208b8eff75fd7ffb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607612039 +0000\ncommitter GitHub <noreply@github.com> 1607612039 +0000\n\nMerge #6797\n\n6797: Normalize spelling to American English r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "html_url": "https://github.com/rust-lang/rust/commit/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1341a98f0551edf3a445c40507ab1abb3d7c71bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1341a98f0551edf3a445c40507ab1abb3d7c71bb", "html_url": "https://github.com/rust-lang/rust/commit/1341a98f0551edf3a445c40507ab1abb3d7c71bb"}, {"sha": "17f236c2b041de7abd8ec3be208b8eff75fd7ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f236c2b041de7abd8ec3be208b8eff75fd7ffb", "html_url": "https://github.com/rust-lang/rust/commit/17f236c2b041de7abd8ec3be208b8eff75fd7ffb"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "c458d90541f7c5f154f6504eb9e9fb1a5cfb83fe", "filename": "crates/assists/src/assist_config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fassists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fassists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_config.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -5,7 +5,7 @@\n //! assists if we are allowed to.\n \n use hir::PrefixKind;\n-use ide_db::helpers::insert_use::MergeBehaviour;\n+use ide_db::helpers::insert_use::MergeBehavior;\n \n use crate::AssistKind;\n \n@@ -39,12 +39,12 @@ impl Default for AssistConfig {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct InsertUseConfig {\n-    pub merge: Option<MergeBehaviour>,\n+    pub merge: Option<MergeBehavior>,\n     pub prefix_kind: PrefixKind,\n }\n \n impl Default for InsertUseConfig {\n     fn default() -> Self {\n-        InsertUseConfig { merge: Some(MergeBehaviour::Full), prefix_kind: PrefixKind::Plain }\n+        InsertUseConfig { merge: Some(MergeBehavior::Full), prefix_kind: PrefixKind::Plain }\n     }\n }"}, {"sha": "2f0dc7831e82cdb43980f97663dc3868343f528c", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::helpers::insert_use::{try_merge_imports, try_merge_trees, MergeBehaviour};\n+use ide_db::helpers::insert_use::{try_merge_imports, try_merge_trees, MergeBehavior};\n use syntax::{\n     algo::{neighbor, SyntaxRewriter},\n     ast, AstNode,\n@@ -30,7 +30,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n         let (merged, to_delete) =\n             next_prev().filter_map(|dir| neighbor(&use_item, dir)).find_map(|use_item2| {\n-                try_merge_imports(&use_item, &use_item2, MergeBehaviour::Full).zip(Some(use_item2))\n+                try_merge_imports(&use_item, &use_item2, MergeBehavior::Full).zip(Some(use_item2))\n             })?;\n \n         rewriter.replace_ast(&use_item, &merged);\n@@ -42,7 +42,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     } else {\n         let (merged, to_delete) =\n             next_prev().filter_map(|dir| neighbor(&tree, dir)).find_map(|use_tree| {\n-                try_merge_trees(&tree, &use_tree, MergeBehaviour::Full).zip(Some(use_tree))\n+                try_merge_trees(&tree, &use_tree, MergeBehavior::Full).zip(Some(use_tree))\n             })?;\n \n         rewriter.replace_ast(&tree, &merged);"}, {"sha": "3372fb1a219aa55de120c596b8a4b20255b76ea2", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     });\n \n     if ctx.config.enable_autoimport_completions && ctx.config.resolve_additional_edits_lazily() {\n-        fuzzy_completion(acc, ctx).unwrap_or_default()\n+        fuzzy_completion(acc, ctx);\n     }\n }\n \n@@ -100,10 +100,10 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n // To avoid an excessive amount of the results returned, completion input is checked for inclusion in the identifiers only\n // (i.e. in `HashMap` in the `std::collections::HashMap` path), also not in the module indentifiers.\n //\n-// .Merge Behaviour\n+// .Merge Behavior\n //\n-// It is possible to configure how use-trees are merged with the `importMergeBehaviour` setting.\n-// Mimics the corresponding behaviour of the `Auto Import` feature.\n+// It is possible to configure how use-trees are merged with the `importMergeBehavior` setting.\n+// Mimics the corresponding behavior of the `Auto Import` feature.\n //\n // .LSP and performance implications\n //\n@@ -150,7 +150,7 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n             ImportEdit {\n                 import_path: import_path.clone(),\n                 import_scope: import_scope.clone(),\n-                merge_behaviour: ctx.config.merge,\n+                merge_behavior: ctx.config.merge,\n             },\n             &definition,\n         )"}, {"sha": "30577dc11ea8ff4f8c50646d0e9cae123e68fe31", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n-use ide_db::helpers::insert_use::MergeBehaviour;\n+use ide_db::helpers::insert_use::MergeBehavior;\n use rustc_hash::FxHashSet;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -14,7 +14,7 @@ pub struct CompletionConfig {\n     pub add_call_parenthesis: bool,\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n-    pub merge: Option<MergeBehaviour>,\n+    pub merge: Option<MergeBehavior>,\n     /// A set of capabilities, enabled on the client and supported on the server.\n     pub active_resolve_capabilities: FxHashSet<CompletionResolveCapability>,\n }\n@@ -56,7 +56,7 @@ impl Default for CompletionConfig {\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n             snippet_cap: Some(SnippetCap { _private: () }),\n-            merge: Some(MergeBehaviour::Full),\n+            merge: Some(MergeBehavior::Full),\n             active_resolve_capabilities: FxHashSet::default(),\n         }\n     }"}, {"sha": "83166df4e90fc2ddd6cdccf5d602ac17787cb687", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -4,7 +4,7 @@ use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n use ide_db::helpers::{\n-    insert_use::{self, ImportScope, MergeBehaviour},\n+    insert_use::{self, ImportScope, MergeBehavior},\n     mod_path_to_ast,\n };\n use syntax::{algo, TextRange};\n@@ -271,7 +271,7 @@ impl CompletionItem {\n pub struct ImportEdit {\n     pub import_path: ModPath,\n     pub import_scope: ImportScope,\n-    pub merge_behaviour: Option<MergeBehaviour>,\n+    pub merge_behavior: Option<MergeBehavior>,\n }\n \n impl ImportEdit {\n@@ -283,7 +283,7 @@ impl ImportEdit {\n         let rewriter = insert_use::insert_use(\n             &self.import_scope,\n             mod_path_to_ast(&self.import_path),\n-            self.merge_behaviour,\n+            self.merge_behavior,\n         );\n         let old_ast = rewriter.rewrite_root()?;\n         let mut import_insert = TextEdit::builder();"}, {"sha": "6a4b3c16702ca8b0ce7a4cb7bdcf1333ca234bb6", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -153,7 +153,7 @@ pub fn resolve_completion_edits(\n         })\n         .find(|mod_path| mod_path.to_string() == full_import_path)?;\n \n-    ImportEdit { import_path, import_scope, merge_behaviour: config.merge }\n+    ImportEdit { import_path, import_scope, merge_behavior: config.merge }\n         .to_text_edit()\n         .map(|edit| vec![edit])\n }"}, {"sha": "9be36d59bdc34f2fa49354c1653405f8a7c4b2bf", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -93,7 +93,7 @@ fn is_inner_comment(token: SyntaxToken) -> bool {\n pub fn insert_use<'a>(\n     scope: &ImportScope,\n     path: ast::Path,\n-    merge: Option<MergeBehaviour>,\n+    merge: Option<MergeBehavior>,\n ) -> SyntaxRewriter<'a> {\n     let _p = profile::span(\"insert_use\");\n     let mut rewriter = SyntaxRewriter::default();\n@@ -183,22 +183,22 @@ fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -\n pub fn try_merge_imports(\n     lhs: &ast::Use,\n     rhs: &ast::Use,\n-    merge_behaviour: MergeBehaviour,\n+    merge_behavior: MergeBehavior,\n ) -> Option<ast::Use> {\n     // don't merge imports with different visibilities\n     if !eq_visibility(lhs.visibility(), rhs.visibility()) {\n         return None;\n     }\n     let lhs_tree = lhs.use_tree()?;\n     let rhs_tree = rhs.use_tree()?;\n-    let merged = try_merge_trees(&lhs_tree, &rhs_tree, merge_behaviour)?;\n+    let merged = try_merge_trees(&lhs_tree, &rhs_tree, merge_behavior)?;\n     Some(lhs.with_use_tree(merged))\n }\n \n pub fn try_merge_trees(\n     lhs: &ast::UseTree,\n     rhs: &ast::UseTree,\n-    merge: MergeBehaviour,\n+    merge: MergeBehavior,\n ) -> Option<ast::UseTree> {\n     let lhs_path = lhs.path()?;\n     let rhs_path = rhs.path()?;\n@@ -220,7 +220,7 @@ pub fn try_merge_trees(\n fn recursive_merge(\n     lhs: &ast::UseTree,\n     rhs: &ast::UseTree,\n-    merge: MergeBehaviour,\n+    merge: MergeBehavior,\n ) -> Option<ast::UseTree> {\n     let mut use_trees = lhs\n         .use_tree_list()\n@@ -301,7 +301,7 @@ fn recursive_merge(\n                 }\n             }\n             Err(_)\n-                if merge == MergeBehaviour::Last\n+                if merge == MergeBehavior::Last\n                     && use_trees.len() > 0\n                     && rhs_t.use_tree_list().is_some() =>\n             {\n@@ -438,20 +438,20 @@ fn path_segment_cmp(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n \n /// What type of merges are allowed.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum MergeBehaviour {\n+pub enum MergeBehavior {\n     /// Merge everything together creating deeply nested imports.\n     Full,\n     /// Only merge the last import level, doesn't allow import nesting.\n     Last,\n }\n \n-impl MergeBehaviour {\n+impl MergeBehavior {\n     #[inline]\n     fn is_tree_allowed(&self, tree: &ast::UseTree) -> bool {\n         match self {\n-            MergeBehaviour::Full => true,\n+            MergeBehavior::Full => true,\n             // only simple single segment paths are allowed\n-            MergeBehaviour::Last => {\n+            MergeBehavior::Last => {\n                 tree.use_tree_list().is_none() && tree.path().map(path_len) <= Some(1)\n             }\n         }"}, {"sha": "9e194354e24a0d0f0deca5c58e87a54c2601cd61", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -533,7 +533,7 @@ fn merge_last_fail() {\n     check_merge_only_fail(\n         r\"use foo::bar::{baz::{Qux, Fez}};\",\n         r\"use foo::bar::{baaz::{Quux, Feez}};\",\n-        MergeBehaviour::Last,\n+        MergeBehavior::Last,\n     );\n }\n \n@@ -542,7 +542,7 @@ fn merge_last_fail1() {\n     check_merge_only_fail(\n         r\"use foo::bar::{baz::{Qux, Fez}};\",\n         r\"use foo::bar::baaz::{Quux, Feez};\",\n-        MergeBehaviour::Last,\n+        MergeBehavior::Last,\n     );\n }\n \n@@ -551,7 +551,7 @@ fn merge_last_fail2() {\n     check_merge_only_fail(\n         r\"use foo::bar::baz::{Qux, Fez};\",\n         r\"use foo::bar::{baaz::{Quux, Feez}};\",\n-        MergeBehaviour::Last,\n+        MergeBehavior::Last,\n     );\n }\n \n@@ -560,15 +560,15 @@ fn merge_last_fail3() {\n     check_merge_only_fail(\n         r\"use foo::bar::baz::{Qux, Fez};\",\n         r\"use foo::bar::baaz::{Quux, Feez};\",\n-        MergeBehaviour::Last,\n+        MergeBehavior::Last,\n     );\n }\n \n fn check(\n     path: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    mb: Option<MergeBehaviour>,\n+    mb: Option<MergeBehavior>,\n     module: bool,\n ) {\n     let mut syntax = ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone();\n@@ -589,18 +589,18 @@ fn check(\n }\n \n fn check_full(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Full), false)\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Full), false)\n }\n \n fn check_last(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Last), false)\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Last), false)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n     check(path, ra_fixture_before, ra_fixture_after, None, false)\n }\n \n-fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehaviour) {\n+fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior) {\n     let use0 = ast::SourceFile::parse(ra_fixture0)\n         .tree()\n         .syntax()"}, {"sha": "1f4b5c24c53bb31b9ef7010288643e64f9d734bb", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -12,7 +12,7 @@ use std::{convert::TryFrom, ffi::OsString, path::PathBuf};\n use flycheck::FlycheckConfig;\n use hir::PrefixKind;\n use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n-use ide_db::helpers::insert_use::MergeBehaviour;\n+use ide_db::helpers::insert_use::MergeBehavior;\n use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n@@ -25,7 +25,7 @@ use crate::{caps::enabled_completions_resolve_capabilities, diagnostics::Diagnos\n config_data! {\n     struct ConfigData {\n         /// The strategy to use when inserting new imports or merging imports.\n-        assist_importMergeBehaviour: MergeBehaviourDef = \"\\\"full\\\"\",\n+        assist_importMergeBehaviour: MergeBehaviorDef = \"\\\"full\\\"\",\n         /// The path structure for newly inserted paths to use.\n         assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n \n@@ -447,9 +447,9 @@ impl Config {\n         };\n \n         self.assist.insert_use.merge = match data.assist_importMergeBehaviour {\n-            MergeBehaviourDef::None => None,\n-            MergeBehaviourDef::Full => Some(MergeBehaviour::Full),\n-            MergeBehaviourDef::Last => Some(MergeBehaviour::Last),\n+            MergeBehaviorDef::None => None,\n+            MergeBehaviorDef::Full => Some(MergeBehavior::Full),\n+            MergeBehaviorDef::Last => Some(MergeBehavior::Last),\n         };\n         self.assist.insert_use.prefix_kind = match data.assist_importPrefix {\n             ImportPrefixDef::Plain => PrefixKind::Plain,\n@@ -606,7 +606,7 @@ enum ManifestOrProjectJson {\n \n #[derive(Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n-enum MergeBehaviourDef {\n+enum MergeBehaviorDef {\n     None,\n     Full,\n     Last,\n@@ -740,7 +740,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": [\"null\", \"array\"],\n             \"items\": { \"type\": \"string\" },\n         },\n-        \"MergeBehaviourDef\" => set! {\n+        \"MergeBehaviorDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"none\", \"full\", \"last\"],\n             \"enumDescriptions\": ["}, {"sha": "c8d943142a8b8fd9d0dfdbc85f70ebacef7a0aaf", "filename": "docs/dev/style.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=83aa6fbd1ef7fd7faf27d8f7fd8679cb85a8097a", "patch": "@@ -514,6 +514,7 @@ impl Parent {\n Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n The default name is a lowercased name of the type: `global_state: GlobalState`.\n Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n+Prefer American spelling (color, behavior).\n \n Default names:\n "}]}