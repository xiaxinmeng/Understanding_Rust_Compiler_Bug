{"sha": "b05af49086d50bf9f325070746975868f8c16f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWFmNDkwODZkNTBiZjlmMzI1MDcwNzQ2OTc1ODY4ZjhjMTZmMGY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T23:24:11Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T23:24:11Z"}, "message": "Add an optional condition to constrain defaults.\n\nUtilized primarily to not be a default rule unless some configuration is\ngiven (e.g., compiler docs are enabled).", "tree": {"sha": "d5239fb057d50fe5dfed9dab8f692669c0f2454d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5239fb057d50fe5dfed9dab8f692669c0f2454d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05af49086d50bf9f325070746975868f8c16f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05af49086d50bf9f325070746975868f8c16f0f", "html_url": "https://github.com/rust-lang/rust/commit/b05af49086d50bf9f325070746975868f8c16f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05af49086d50bf9f325070746975868f8c16f0f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8aecc19d8e2d82f57e525116302455dca34016d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8aecc19d8e2d82f57e525116302455dca34016d", "html_url": "https://github.com/rust-lang/rust/commit/d8aecc19d8e2d82f57e525116302455dca34016d"}], "stats": {"total": 182, "additions": 61, "deletions": 121}, "files": [{"sha": "bb68ba15ebc5793b8deb14763c638389b94a8b8e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -152,17 +152,20 @@ impl StepDescription {\n     }\n \n     fn run(v: &[StepDescription], builder: &Builder, paths: &[PathBuf]) {\n+        let should_runs = v.iter().map(|desc| {\n+            (desc.should_run)(ShouldRun::new(builder))\n+        }).collect::<Vec<_>>();\n         if paths.is_empty() {\n-            for desc in v {\n-                if desc.default {\n+            for (desc, should_run) in v.iter().zip(should_runs) {\n+                if desc.default && should_run.is_really_default {\n                     desc.maybe_run(builder, None);\n                 }\n             }\n         } else {\n             for path in paths {\n                 let mut attempted_run = false;\n-                for desc in v {\n-                    if (desc.should_run)(ShouldRun::new(builder)).run(path) {\n+                for (desc, should_run) in v.iter().zip(&should_runs) {\n+                    if should_run.run(path) {\n                         attempted_run = true;\n                         desc.maybe_run(builder, Some(path));\n                     }\n@@ -178,19 +181,29 @@ impl StepDescription {\n \n #[derive(Clone)]\n pub struct ShouldRun<'a> {\n-    builder: &'a Builder<'a>,\n+    pub builder: &'a Builder<'a>,\n     // use a BTreeSet to maintain sort order\n     paths: BTreeSet<PathBuf>,\n+\n+    // If this is a default rule, this is an additional constraint placed on\n+    // it's run. Generally something like compiler docs being enabled.\n+    is_really_default: bool,\n }\n \n impl<'a> ShouldRun<'a> {\n     fn new(builder: &'a Builder) -> ShouldRun<'a> {\n         ShouldRun {\n             builder: builder,\n             paths: BTreeSet::new(),\n+            is_really_default: true, // by default no additional conditions\n         }\n     }\n \n+    pub fn default_condition(mut self, cond: bool) -> Self {\n+        self.is_really_default = cond;\n+        self\n+    }\n+\n     pub fn krate(mut self, name: &str) -> Self {\n         for (_, krate_path) in self.builder.crates(name) {\n             self.paths.insert(PathBuf::from(krate_path));"}, {"sha": "7e9c83d1f76be9ecf564c3efe940f61b2b581927", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -115,7 +115,8 @@ impl Step for Linkcheck {\n     }\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/linkchecker\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/linkchecker\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n@@ -124,13 +125,7 @@ impl Step for Linkcheck {\n         host: Interned<String>,\n         _target: Interned<String>,\n     ) {\n-        if path.is_some() {\n-            builder.ensure(Linkcheck { host });\n-        } else {\n-            if builder.build.config.docs {\n-                builder.ensure(Linkcheck { host });\n-            }\n-        }\n+        builder.ensure(Linkcheck { host });\n     }\n }\n "}, {"sha": "b6ab4540ff42b5e3536698ad9345aa166288c6e3", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -607,7 +607,8 @@ impl Step for Analysis {\n     const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"analysis\")\n+        let builder = run.builder;\n+        run.path(\"analysis\").default_condition(builder.build.config.extended)\n     }\n \n     fn make_run(\n@@ -616,9 +617,6 @@ impl Step for Analysis {\n         host: Interned<String>,\n         target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.extended {\n-            return;\n-        }\n         builder.ensure(Analysis {\n             compiler: builder.compiler(builder.top_stage, host),\n             target: target,\n@@ -818,16 +816,13 @@ impl Step for PlainSourceTarball {\n     const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src\")\n+        let builder = run.builder;\n+        run.path(\"src\").default_condition(builder.config.rust_dist_src)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, _target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.rust_dist_src {\n-            return;\n-        }\n-\n         builder.ensure(PlainSourceTarball);\n     }\n \n@@ -1138,15 +1133,13 @@ impl Step for Extended {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"cargo\")\n+        let builder = run.builder;\n+        run.path(\"cargo\").default_condition(builder.config.extended)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.extended {\n-            return;\n-        }\n         builder.ensure(Extended {\n             stage: builder.top_stage,\n             target: target,"}, {"sha": "59991e7798ed263a30f22caafd1dd04ce7ad8942", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 28, "deletions": 83, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -45,7 +45,8 @@ macro_rules! book {\n             const DEFAULT: bool = true;\n \n             fn should_run(run: ShouldRun) -> ShouldRun {\n-                run.path($path)\n+                let builder = run.builder;\n+                run.path($path).default_condition(builder.build.config.docs)\n             }\n \n             fn make_run(\n@@ -119,17 +120,13 @@ impl Step for UnstableBook {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/doc/unstable-book\")\n+        let builder = run.builder;\n+        run.path(\"src/doc/unstable-book\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.docs {\n-            // Not a default rule if docs are disabled.\n-            return;\n-        }\n-\n         builder.ensure(UnstableBook {\n             target,\n         });\n@@ -201,17 +198,13 @@ impl Step for TheBook {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/doc/book\")\n+        let builder = run.builder;\n+        run.path(\"src/doc/book\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.docs {\n-            // Not a default rule if docs are disabled.\n-            return;\n-        }\n-\n         builder.ensure(TheBook {\n             target,\n             name: \"book\",\n@@ -417,31 +410,17 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.krate(\"std\")\n+        let builder = run.builder;\n+        run.krate(\"std\").default_condition(builder.build.config.docs)\n     }\n \n-\n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        let run = || {\n-            builder.ensure(Std {\n-                stage: builder.top_stage,\n-                target\n-            });\n-        };\n-\n-        if let Some(path) = path {\n-            for (_, krate_path) in builder.crates(\"std\") {\n-                if path.ends_with(krate_path) {\n-                    run();\n-                }\n-            }\n-        } else {\n-            if builder.build.config.docs {\n-                run();\n-            }\n-        }\n+        builder.ensure(Std {\n+            stage: builder.top_stage,\n+            target\n+        });\n     }\n \n     /// Compile all standard library documentation.\n@@ -520,30 +499,17 @@ impl Step for Test {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.krate(\"test\")\n+        let builder = run.builder;\n+        run.krate(\"test\").default_condition(builder.config.compiler_docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        let run = || {\n-            builder.ensure(Test {\n-                stage: builder.top_stage,\n-                target\n-            });\n-        };\n-\n-        if let Some(path) = path {\n-            for (_, krate_path) in builder.crates(\"test\") {\n-                if path.ends_with(krate_path) {\n-                    run();\n-                }\n-            }\n-        } else {\n-            if builder.build.config.compiler_docs {\n-                run();\n-            }\n-        }\n+        builder.ensure(Test {\n+            stage: builder.top_stage,\n+            target\n+        });\n     }\n \n     /// Compile all libtest documentation.\n@@ -597,30 +563,17 @@ impl Step for Rustc {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.krate(\"rustc-main\")\n+        let builder = run.builder;\n+        run.krate(\"rustc-main\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        let run = || {\n-            builder.ensure(Rustc {\n-                stage: builder.top_stage,\n-                target\n-            });\n-        };\n-\n-        if let Some(path) = path {\n-            for (_, krate_path) in builder.crates(\"rustc-main\") {\n-                if path.ends_with(krate_path) {\n-                    run();\n-                }\n-            }\n-        } else {\n-            if builder.build.config.docs {\n-                run();\n-            }\n-        }\n+        builder.ensure(Rustc {\n+            stage: builder.top_stage,\n+            target\n+        });\n     }\n \n     /// Generate all compiler documentation.\n@@ -690,17 +643,13 @@ impl Step for ErrorIndex {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/error_index_generator\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/error_index_generator\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.docs {\n-            // Not a default rule if docs are disabled.\n-            return;\n-        }\n-\n         builder.ensure(ErrorIndex {\n             target,\n         });\n@@ -742,17 +691,13 @@ impl Step for UnstableBookGen {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/unstable-book-gen\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/unstable-book-gen\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>,\n     ) {\n-        if path.is_none() && !builder.build.config.docs {\n-            // Not a default rule if docs are disabled.\n-            return;\n-        }\n-\n         builder.ensure(UnstableBookGen {\n             target,\n         });"}, {"sha": "d2870832086e8d6ee9c47919c88b8d1301a505f4", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -150,7 +150,8 @@ macro_rules! install {\n             $(const $c: bool = true;)*\n \n             fn should_run(run: ShouldRun) -> ShouldRun {\n-                run.path($path)\n+                let $builder = run.builder;\n+                run.path($path).default_condition($default_cond)\n             }\n \n             fn make_run(\n@@ -159,9 +160,6 @@ macro_rules! install {\n                 host: Interned<String>,\n                 target: Interned<String>,\n             ) {\n-                if path.is_none() && !($default_cond) {\n-                    return;\n-                }\n                 $builder.ensure($name {\n                     stage: $builder.top_stage,\n                     target,"}, {"sha": "07763d519c8801452c68808c75c9848e859f4654", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05af49086d50bf9f325070746975868f8c16f0f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=b05af49086d50bf9f325070746975868f8c16f0f", "patch": "@@ -248,15 +248,13 @@ impl Step for Cargo {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/cargo\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/cargo\").default_condition(builder.build.config.extended)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.extended {\n-            return;\n-        }\n         builder.ensure(Cargo {\n             stage: builder.top_stage,\n             target,\n@@ -294,15 +292,13 @@ impl Step for Rls {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/rls\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/rls\").default_condition(builder.build.config.extended)\n     }\n \n     fn make_run(\n         builder: &Builder, path: Option<&Path>, _host: Interned<String>, target: Interned<String>\n     ) {\n-        if path.is_none() && !builder.build.config.extended {\n-            return;\n-        }\n         builder.ensure(Rls {\n             stage: builder.top_stage,\n             target,"}]}