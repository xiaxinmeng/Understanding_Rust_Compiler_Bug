{"sha": "dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDYwMTMyNDhlY2I4YjBkM2QyOTU4MWMxNzM0ZGQyZWNkNDJiMGQ=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:07:34Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved PartialEq into partial_eq", "tree": {"sha": "6bca720ff98e18a9a877beec2a5f44e2dc68c8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bca720ff98e18a9a877beec2a5f44e2dc68c8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "html_url": "https://github.com/rust-lang/rust/commit/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ac6709b95bb0cce4cffa9bd87d241928bc7f3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6709b95bb0cce4cffa9bd87d241928bc7f3f6", "html_url": "https://github.com/rust-lang/rust/commit/5ac6709b95bb0cce4cffa9bd87d241928bc7f3f6"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "a862a979d3b6a1ec7d1724237dbf66f0bf715325", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "patch": "@@ -103,6 +103,8 @@ mod is_zero;\n \n mod source_iter_marker;\n \n+mod partial_eq;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -2615,45 +2617,6 @@ impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {\n     }\n }\n \n-macro_rules! __impl_slice_eq1 {\n-    ([$($vars:tt)*] $lhs:ty, $rhs:ty $(where $ty:ty: $bound:ident)?, #[$stability:meta]) => {\n-        #[$stability]\n-        impl<T, U, $($vars)*> PartialEq<$rhs> for $lhs\n-        where\n-            T: PartialEq<U>,\n-            $($ty: $bound)?\n-        {\n-            #[inline]\n-            fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n-            #[inline]\n-            fn ne(&self, other: &$rhs) -> bool { self[..] != other[..] }\n-        }\n-    }\n-}\n-\n-__impl_slice_eq1! { [A: Allocator] Vec<T, A>, Vec<U, A>, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &[U], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &mut [U], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [A: Allocator] &[T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n-__impl_slice_eq1! { [A: Allocator] &mut [T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n-__impl_slice_eq1! { [A: Allocator] Vec<T, A>, [U], #[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]  }\n-__impl_slice_eq1! { [A: Allocator] [T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]  }\n-__impl_slice_eq1! { [A: Allocator] Cow<'_, [T]>, Vec<U, A> where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [] Cow<'_, [T]>, &[U] where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [] Cow<'_, [T]>, &mut [U] where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, [U; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, &[U; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-\n-// NOTE: some less important impls are omitted to reduce code bloat\n-// FIXME(Centril): Reconsider this?\n-//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], }\n-//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, }\n-//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, }\n-//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], }\n-\n /// Implements comparison of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd, A: Allocator> PartialOrd for Vec<T, A> {"}, {"sha": "617f04044399efc3cc0ada4ca7c63b4d5a65aa1d", "filename": "library/alloc/src/vec/partial_eq.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc46013248ecb8b0d3d29581c1734dd2ecd42b0d/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs?ref=dc46013248ecb8b0d3d29581c1734dd2ecd42b0d", "patch": "@@ -0,0 +1,43 @@\n+use crate::alloc::{Allocator};\n+use crate::borrow::Cow;\n+\n+use super::{Vec};\n+\n+macro_rules! __impl_slice_eq1 {\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty $(where $ty:ty: $bound:ident)?, #[$stability:meta]) => {\n+        #[$stability]\n+        impl<T, U, $($vars)*> PartialEq<$rhs> for $lhs\n+        where\n+            T: PartialEq<U>,\n+            $($ty: $bound)?\n+        {\n+            #[inline]\n+            fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n+            #[inline]\n+            fn ne(&self, other: &$rhs) -> bool { self[..] != other[..] }\n+        }\n+    }\n+}\n+\n+__impl_slice_eq1! { [A: Allocator] Vec<T, A>, Vec<U, A>, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &[U], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [A: Allocator] Vec<T, A>, &mut [U], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [A: Allocator] &[T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [A: Allocator] &mut [T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [A: Allocator] Vec<T, A>, [U], #[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]  }\n+__impl_slice_eq1! { [A: Allocator] [T], Vec<U, A>, #[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]  }\n+__impl_slice_eq1! { [A: Allocator] Cow<'_, [T]>, Vec<U, A> where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [T]>, &[U] where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [T]>, &mut [U] where T: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, [U; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [A: Allocator, const N: usize] Vec<T, A>, &[U; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+\n+// NOTE: some less important impls are omitted to reduce code bloat\n+// FIXME(Centril): Reconsider this?\n+//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], }\n+//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], }"}]}