{"sha": "410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMGEzYWU2ZTg0N2I1OWY5OTMwY2U0ZDZiZjlmM2M1ZjFkNzIxNjc=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-25T21:13:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:37Z"}, "message": "use entry file_type, improve test", "tree": {"sha": "5717d124c71de13412f61a8584b119da378828ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5717d124c71de13412f61a8584b119da378828ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "html_url": "https://github.com/rust-lang/rust/commit/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63e1cebff771621b90bdce25ac013eecb415e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63e1cebff771621b90bdce25ac013eecb415e1e", "html_url": "https://github.com/rust-lang/rust/commit/d63e1cebff771621b90bdce25ac013eecb415e1e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "ff6775f59402cf13c65bebf496d78109aed917f8", "filename": "crates/ra_vfs/src/io/watcher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs?ref=410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "patch": "@@ -65,7 +65,7 @@ impl Watcher {\n         {\n             match res {\n                 Ok(entry) => {\n-                    if entry.path().is_dir() {\n+                    if entry.file_type().is_dir() {\n                         watch_one(self.watcher.as_ref(), entry.path());\n                     }\n                 }\n@@ -172,11 +172,11 @@ impl WatcherWorker {\n         let filter = &self.roots[root];\n         for res in WalkDir::new(dir)\n             .into_iter()\n-            .filter_entry(|entry| filter.can_contain(entry.path()).is_some())\n+            .filter_entry(filter.entry_filter())\n         {\n             match res {\n                 Ok(entry) => {\n-                    if entry.path().is_dir() {\n+                    if entry.file_type().is_dir() {\n                         watch_one(self.watcher.as_ref(), entry.path());\n                     } else {\n                         // emit only for files otherwise we will cause watch_recursive to be called again with a dir that we are already watching"}, {"sha": "d1b0222e79f64420767bb1ce48b85ced2966071a", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "patch": "@@ -62,7 +62,8 @@ impl RootFilter {\n \n     pub(crate) fn entry_filter<'a>(&'a self) -> impl FnMut(&DirEntry) -> bool + 'a {\n         move |entry: &DirEntry| {\n-            if entry.path().is_dir() && self.excluded_dirs.iter().any(|it| it == entry.path()) {\n+            if entry.file_type().is_dir() && self.excluded_dirs.iter().any(|it| it == entry.path())\n+            {\n                 // do not walk nested roots\n                 false\n             } else {"}, {"sha": "357e1c775e2614ec09c3a264ecc32a62239d90ab", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=410a3ae6e847b59f9930ce4d6bf9f3c5f1d72167", "patch": "@@ -1,20 +1,24 @@\n-use std::{collections::HashSet, fs};\n+use std::{collections::HashSet, fs, time::Duration};\n \n-use flexi_logger::Logger;\n+// use flexi_logger::Logger;\n+use crossbeam_channel::RecvTimeoutError;\n use ra_vfs::{Vfs, VfsChange};\n use tempfile::tempdir;\n \n fn process_tasks(vfs: &mut Vfs, num_tasks: u32) {\n     for _ in 0..num_tasks {\n-        let task = vfs.task_receiver().recv().unwrap();\n+        let task = vfs\n+            .task_receiver()\n+            .recv_timeout(Duration::from_secs(3))\n+            .unwrap();\n         log::debug!(\"{:?}\", task);\n         vfs.handle_task(task);\n     }\n }\n \n macro_rules! assert_match {\n     ($x:expr, $pat:pat) => {\n-        assert_match!($x, $pat, assert!(true))\n+        assert_match!($x, $pat, ())\n     };\n     ($x:expr, $pat:pat, $assert:expr) => {\n         match $x {\n@@ -26,7 +30,7 @@ macro_rules! assert_match {\n \n #[test]\n fn test_vfs_works() -> std::io::Result<()> {\n-    Logger::with_str(\"vfs=debug,ra_vfs=debug\").start().unwrap();\n+    // Logger::with_str(\"vfs=debug,ra_vfs=debug\").start().unwrap();\n \n     let files = [\n         (\"a/foo.rs\", \"hello\"),\n@@ -166,8 +170,8 @@ fn test_vfs_works() -> std::io::Result<()> {\n     fs::write(&dir.path().join(\"a/target/new.rs\"), \"ignore me\").unwrap();\n \n     assert_match!(\n-        vfs.task_receiver().try_recv(),\n-        Err(crossbeam_channel::TryRecvError::Empty)\n+        vfs.task_receiver().recv_timeout(Duration::from_millis(300)), // slightly more than watcher debounce delay\n+        Err(RecvTimeoutError::Timeout)\n     );\n \n     vfs.shutdown().unwrap();"}]}