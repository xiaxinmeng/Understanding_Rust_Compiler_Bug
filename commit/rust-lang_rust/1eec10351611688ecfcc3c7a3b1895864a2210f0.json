{"sha": "1eec10351611688ecfcc3c7a3b1895864a2210f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZWMxMDM1MTYxMTY4OGVjZmNjM2M3YTNiMTg5NTg2NGEyMjEwZjA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-09T20:27:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-09T20:27:24Z"}, "message": "Merge pull request #1523 from topecongiro/poor-formatting/fn_call_style\n\nUse multiline when args exceeds max_width in fn_call_style = \"block\"", "tree": {"sha": "ec75606d1ae72f0743ce3aaf0c11e7bfb94fa664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec75606d1ae72f0743ce3aaf0c11e7bfb94fa664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eec10351611688ecfcc3c7a3b1895864a2210f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eec10351611688ecfcc3c7a3b1895864a2210f0", "html_url": "https://github.com/rust-lang/rust/commit/1eec10351611688ecfcc3c7a3b1895864a2210f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eec10351611688ecfcc3c7a3b1895864a2210f0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4194d0f19431a4e9eeab42d91af505822e419a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4194d0f19431a4e9eeab42d91af505822e419a8e", "html_url": "https://github.com/rust-lang/rust/commit/4194d0f19431a4e9eeab42d91af505822e419a8e"}, {"sha": "30a8050559533b1f1d9db2bd1081f97a2f635e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a8050559533b1f1d9db2bd1081f97a2f635e6d", "html_url": "https://github.com/rust-lang/rust/commit/30a8050559533b1f1d9db2bd1081f97a2f635e6d"}], "stats": {"total": 153, "additions": 91, "deletions": 62}, "files": [{"sha": "cf92b7ecc0e353183e2f75f0165006d9b900105e", "filename": "src/expr.rs", "status": "modified", "additions": 71, "deletions": 62, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/1eec10351611688ecfcc3c7a3b1895864a2210f0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec10351611688ecfcc3c7a3b1895864a2210f0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1eec10351611688ecfcc3c7a3b1895864a2210f0", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp::{Ordering, min};\n-use std::borrow::Borrow;\n use std::mem::swap;\n use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n@@ -1630,55 +1629,83 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                          -> Result<String, Ordering>\n     where R: Rewrite\n {\n-    let callee = callee.borrow();\n     // FIXME using byte lens instead of char lens (and probably all over the\n     // place too)\n-    let callee_str = match callee.rewrite(context,\n-                                          Shape {\n-                                              width: max_callee_width,\n-                                              ..shape\n-                                          }) {\n-        Some(string) => {\n-            if !string.contains('\\n') && string.len() > max_callee_width {\n-                panic!(\"{:?} {}\", string, max_callee_width);\n-            } else {\n-                string\n+    let callee_shape = Shape {\n+        width: max_callee_width,\n+        ..shape\n+    };\n+    let callee_str = callee\n+        .rewrite(context, callee_shape)\n+        .ok_or(Ordering::Greater)?;\n+\n+    // 4 = `(  )`, 2 = `()`\n+    let paren_overhead = if context.config.spaces_within_parens {\n+        4\n+    } else {\n+        2\n+    };\n+    let used_width = extra_offset(&callee_str, shape);\n+    let one_line_width = shape\n+        .width\n+        .checked_sub(used_width + paren_overhead)\n+        .ok_or(Ordering::Greater)?;\n+\n+    let nested_shape = match context.config.fn_call_style {\n+            IndentStyle::Block => shape.block().block_left(context.config.tab_spaces),\n+            // 1 = (\n+            IndentStyle::Visual => {\n+                shape\n+                    .visual_indent(used_width + 1)\n+                    .sub_width(used_width + paren_overhead)\n             }\n         }\n-        None => return Err(Ordering::Greater),\n-    };\n+        .ok_or(Ordering::Greater)?;\n \n     let span_lo = context.codemap.span_after(span, \"(\");\n     let span = mk_sp(span_lo, span.hi);\n \n-    let used_width = extra_offset(&callee_str, shape);\n+    let list_str = rewrite_call_args(context,\n+                                     args,\n+                                     span,\n+                                     nested_shape,\n+                                     one_line_width,\n+                                     force_no_trailing_comma)\n+            .ok_or(Ordering::Less)?;\n \n-    let nested_shape = match context.config.fn_call_style {\n-        IndentStyle::Block => {\n-            shape\n-                .block()\n-                .block_indent(context.config.tab_spaces)\n-                .sub_width(context.config.tab_spaces)\n-        }\n-        // 1 = (, 2 = ().\n-        IndentStyle::Visual => {\n-            shape\n-                .visual_indent(used_width + 1)\n-                .sub_width(used_width + 2)\n+    let result = if context.config.fn_call_style == IndentStyle::Visual ||\n+                    (!list_str.contains('\\n') && list_str.chars().last().unwrap_or(' ') != ',') {\n+        if context.config.spaces_within_parens && list_str.len() > 0 {\n+            format!(\"{}( {} )\", callee_str, list_str)\n+        } else {\n+            format!(\"{}({})\", callee_str, list_str)\n         }\n+    } else {\n+        format!(\"{}(\\n{}{}\\n{})\",\n+                callee_str,\n+                nested_shape.indent.to_string(context.config),\n+                list_str,\n+                shape.block().indent.to_string(context.config))\n     };\n-    let nested_shape = match nested_shape {\n-        Some(s) => s,\n-        None => return Err(Ordering::Greater),\n-    };\n+\n+    Ok(result)\n+}\n+\n+fn rewrite_call_args(context: &RewriteContext,\n+                     args: &[ptr::P<ast::Expr>],\n+                     span: Span,\n+                     shape: Shape,\n+                     one_line_width: usize,\n+                     force_no_trailing_comma: bool)\n+                     -> Option<String> {\n     let arg_count = args.len();\n \n     let items = itemize_list(context.codemap,\n                              args.iter(),\n                              \")\",\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n-                             |item| item.rewrite(context, nested_shape),\n+                             |item| item.rewrite(context, shape),\n                              span.lo,\n                              span.hi);\n     let mut item_vec: Vec<_> = items.collect();\n@@ -1700,8 +1727,8 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     // first arguments.\n     if overflow_last {\n         let nested_shape = Shape {\n-            indent: nested_shape.indent.block_only(),\n-            ..nested_shape\n+            indent: shape.indent.block_only(),\n+            ..shape\n         };\n         let rewrite = args.last().unwrap().rewrite(context, nested_shape);\n \n@@ -1714,15 +1741,11 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         }\n     }\n \n-    let one_line_width = shape.width.checked_sub(used_width + 2);\n-    let one_line_width = match one_line_width {\n-        Some(olw) => olw,\n-        None => return Err(Ordering::Greater),\n-    };\n     let one_line_shape = Shape {\n         width: one_line_width,\n-        ..nested_shape\n+        ..shape\n     };\n+\n     let tactic =\n         definitive_tactic(&item_vec,\n                           ListTactic::LimitedHorizontalVertical(context.config.fn_call_width),\n@@ -1740,12 +1763,12 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         (false, _, _) => {}\n     }\n \n-    let fmt = ListFormatting {\n+    let mut fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: if force_no_trailing_comma ||\n                                context.config.fn_call_style == IndentStyle::Visual ||\n-                               args.len() <= 1 {\n+                               arg_count <= 1 {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma\n@@ -1755,27 +1778,13 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         config: context.config,\n     };\n \n-    let list_str = match write_list(&item_vec, &fmt) {\n-        Some(str) => str,\n-        None => return Err(Ordering::Less),\n-    };\n-\n-    let result = if context.config.fn_call_style == IndentStyle::Visual ||\n-                    !list_str.contains('\\n') {\n-        if context.config.spaces_within_parens && list_str.len() > 0 {\n-            format!(\"{}( {} )\", callee_str, list_str)\n-        } else {\n-            format!(\"{}({})\", callee_str, list_str)\n+    match write_list(&item_vec, &fmt) {\n+        Some(ref s) if !s.contains('\\n') && s.len() > one_line_width => {\n+            fmt.trailing_separator = SeparatorTactic::Vertical;\n+            write_list(&item_vec, &fmt)\n         }\n-    } else {\n-        format!(\"{}(\\n{}{}\\n{})\",\n-                callee_str,\n-                nested_shape.indent.to_string(context.config),\n-                list_str,\n-                shape.block().indent.to_string(context.config))\n-    };\n-\n-    Ok(result)\n+        rewrite @ _ => rewrite,\n+    }\n }\n \n fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) -> Option<String> {"}, {"sha": "4013b2d9b2594c6240ff95dcec03aeb571bce68a", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eec10351611688ecfcc3c7a3b1895864a2210f0/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec10351611688ecfcc3c7a3b1895864a2210f0/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=1eec10351611688ecfcc3c7a3b1895864a2210f0", "patch": "@@ -6,3 +6,12 @@ fn main() {\n     // #1501\n     let hyper = Arc::new(Client::with_connector(HttpsConnector::new(TlsClient::new())));\n }\n+\n+// #1521\n+impl Foo {\n+    fn map_pixel_to_coords(&self, point: &Vector2i, view: &View) -> Vector2f {\n+        unsafe {\n+            Vector2f::from_raw(ffi::sfRenderTexture_mapPixelToCoords(self.render_texture, point.raw(), view.raw()))\n+        }\n+    }\n+}"}, {"sha": "d7cb12dd94c87f79dd58b3bfe99e8127a213d709", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1eec10351611688ecfcc3c7a3b1895864a2210f0/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eec10351611688ecfcc3c7a3b1895864a2210f0/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=1eec10351611688ecfcc3c7a3b1895864a2210f0", "patch": "@@ -15,3 +15,14 @@ fn main() {\n     // #1501\n     let hyper = Arc::new(Client::with_connector(HttpsConnector::new(TlsClient::new())));\n }\n+\n+// #1521\n+impl Foo {\n+    fn map_pixel_to_coords(&self, point: &Vector2i, view: &View) -> Vector2f {\n+        unsafe {\n+            Vector2f::from_raw(\n+                ffi::sfRenderTexture_mapPixelToCoords(self.render_texture, point.raw(), view.raw()),\n+            )\n+        }\n+    }\n+}"}]}