{"sha": "c2c05014af8bb1eb78c8de30b092cc854dd29421", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzA1MDE0YWY4YmIxZWI3OGM4ZGUzMGIwOTJjYzg1NGRkMjk0MjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-02T02:48:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T01:12:26Z"}, "message": "with the new 'limited validation when there is unsafe', we can significantly shrink our whitelist", "tree": {"sha": "2b404ddcf0e643ca4631dd9e7d00e47f22ee18b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b404ddcf0e643ca4631dd9e7d00e47f22ee18b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c05014af8bb1eb78c8de30b092cc854dd29421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c05014af8bb1eb78c8de30b092cc854dd29421", "html_url": "https://github.com/rust-lang/rust/commit/c2c05014af8bb1eb78c8de30b092cc854dd29421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c05014af8bb1eb78c8de30b092cc854dd29421/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3fa42fc0e875edad9c3aef65863cdb85005b719", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3fa42fc0e875edad9c3aef65863cdb85005b719", "html_url": "https://github.com/rust-lang/rust/commit/b3fa42fc0e875edad9c3aef65863cdb85005b719"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "0730315504a5a2efa9eaaf4833cd033b5394697f", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c05014af8bb1eb78c8de30b092cc854dd29421/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c05014af8bb1eb78c8de30b092cc854dd29421/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=c2c05014af8bb1eb78c8de30b092cc854dd29421", "patch": "@@ -202,7 +202,7 @@ fn main() {\n \n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n-    args.push(\"-Zmir-emit-validate\".to_owned());\n+    args.push(\"-Zmir-emit-validate=1\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls(RustcDefaultCalls), None, None);\n }"}, {"sha": "a6c2871cf521a08883da831e5eaece2199e27b50", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2c05014af8bb1eb78c8de30b092cc854dd29421/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c05014af8bb1eb78c8de30b092cc854dd29421/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=c2c05014af8bb1eb78c8de30b092cc854dd29421", "patch": "@@ -40,24 +40,19 @@ impl ValidationMode {\n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     pub(crate) fn validation_op(&mut self, op: ValidationOp, operand: &ValidationOperand<'tcx, mir::Lvalue<'tcx>>) -> EvalResult<'tcx> {\n         // HACK: Determine if this method is whitelisted and hence we do not perform any validation.\n+        // We currently insta-UB on anything passing around uninitialized memory, so we have to whitelist\n+        // the places that are allowed to do that.\n         {\n             // The regexp we use for filtering\n             use regex::Regex;\n             lazy_static! {\n                 static ref RE: Regex = Regex::new(\"^(\\\n-std::mem::swap::|\\\n std::mem::uninitialized::|\\\n-std::ptr::read::|\\\n-std::panicking::try::do_call::|\\\n-std::slice::from_raw_parts_mut::|\\\n+std::mem::forget::|\\\n <std::heap::Heap as std::heap::Alloc>::|\\\n-<std::mem::ManuallyDrop<T>><std::heap::AllocErr>::new$|\\\n-<std::mem::ManuallyDrop<T> as std::ops::DerefMut><std::heap::AllocErr>::deref_mut$|\\\n-std::sync::atomic::AtomicBool::get_mut$|\\\n-<std::boxed::Box<T>><[a-zA-Z0-9_\\\\[\\\\]]+>::from_raw|\\\n-<[a-zA-Z0-9_:<>]+ as std::slice::SliceIndex<[a-zA-Z0-9_\\\\[\\\\]]+>><[a-zA-Z0-9_\\\\[\\\\]]+>::get_unchecked_mut$|\\\n-<alloc::raw_vec::RawVec<T, std::heap::Heap>><[a-zA-Z0-9_\\\\[\\\\]]+>::into_box$|\\\n-<std::vec::Vec<T>><[a-zA-Z0-9_\\\\[\\\\]]+>::into_boxed_slice$\\\n+<std::mem::ManuallyDrop<T>><.*>::new$|\\\n+<std::mem::ManuallyDrop<T> as std::ops::DerefMut><.*>::deref_mut$|\\\n+std::ptr::read::\\\n )\").unwrap();\n             }\n             // Now test"}]}