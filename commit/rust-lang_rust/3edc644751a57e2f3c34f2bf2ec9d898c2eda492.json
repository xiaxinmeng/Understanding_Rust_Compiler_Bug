{"sha": "3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZGM2NDQ3NTFhNTdlMmYzYzM0ZjJiZjJlYzlkODk4YzJlZGE0OTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-17T01:08:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-17T01:08:34Z"}, "message": "Rollup merge of #64085 - estebank:hrtb-errors, r=oli-obk\n\nTweak unsatisfied HRTB errors\n\nr? @oli-obk\n\nClose #35180.", "tree": {"sha": "4f085a0fc877b410acf92af185de2f91fb288eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f085a0fc877b410acf92af185de2f91fb288eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgDISCRBK7hj4Ov3rIwAAdHIIAEp08/XF08hWwiZ4eoDPObHf\ntYW7gceGzf6UapimHrWEciOs1s3ixnfrsknw5UWfYu1ppd4xqNx6HNl4XootsnW5\n7yhh6ccdrRXDvzxx88JxlvdeyQqVQuIHnzcUGyPw8bP24f6rrOATqLZsiwZJxRZK\nMZ+XoI37FwM4njh9GUIKM2bp/6EcZpiFXeim42YLHeF5w9TPcUMCcZB/aWkKIhzO\n2u0GyMTJKkwWiMwiL6DJGKkw9x1ILKNWcvDNVdNLiITy6pUzREsSM+HbIEYeOuAw\nBzzPvZCff2oiwjJP8pxARXQOIoouyoViuNiGN/j2pxCgvZgqYR/gade/54QWAxM=\n=AppE\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f085a0fc877b410acf92af185de2f91fb288eb5\nparent 7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9\nparent 0a985f2c86add139d880882c968e68747b366be6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568682514 +0200\ncommitter GitHub <noreply@github.com> 1568682514 +0200\n\nRollup merge of #64085 - estebank:hrtb-errors, r=oli-obk\n\nTweak unsatisfied HRTB errors\n\nr? @oli-obk\n\nClose #35180.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "html_url": "https://github.com/rust-lang/rust/commit/3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "html_url": "https://github.com/rust-lang/rust/commit/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9"}, {"sha": "0a985f2c86add139d880882c968e68747b366be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a985f2c86add139d880882c968e68747b366be6", "html_url": "https://github.com/rust-lang/rust/commit/0a985f2c86add139d880882c968e68747b366be6"}], "stats": {"total": 210, "additions": 148, "deletions": 62}, "files": [{"sha": "19bd38b45b30a9847359a980352659f6c2bc0edf", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -192,23 +192,28 @@ impl NiceRegionError<'me, 'tcx> {\n             vid, sub_placeholder, sup_placeholder, trait_def_id, expected_substs, actual_substs\n         );\n \n-        let mut err = self.tcx().sess.struct_span_err(\n-            cause.span(self.tcx()),\n-            &format!(\n-                \"implementation of `{}` is not general enough\",\n-                self.tcx().def_path_str(trait_def_id),\n-            ),\n+        let span = cause.span(self.tcx());\n+        let msg = format!(\n+            \"implementation of `{}` is not general enough\",\n+            self.tcx().def_path_str(trait_def_id),\n+        );\n+        let mut err = self.tcx().sess.struct_span_err(span, &msg);\n+        err.span_label(\n+            self.tcx().def_span(trait_def_id),\n+            format!(\"trait `{}` defined here\", self.tcx().def_path_str(trait_def_id)),\n         );\n \n-        match cause.code {\n-            ObligationCauseCode::ItemObligation(def_id) => {\n-                err.note(&format!(\n-                    \"Due to a where-clause on `{}`,\",\n-                    self.tcx().def_path_str(def_id),\n-                ));\n-            }\n-            _ => (),\n-        }\n+        let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id) = cause.code {\n+            err.span_label(span, \"doesn't satisfy where-clause\");\n+            err.span_label(\n+                self.tcx().def_span(def_id),\n+                &format!(\"due to a where-clause on `{}`...\", self.tcx().def_path_str(def_id)),\n+            );\n+            true\n+        } else {\n+            err.span_label(span, &msg);\n+            false\n+        };\n \n         let expected_trait_ref = self.infcx.resolve_vars_if_possible(&ty::TraitRef {\n             def_id: trait_def_id,\n@@ -295,6 +300,7 @@ impl NiceRegionError<'me, 'tcx> {\n             expected_has_vid,\n             actual_has_vid,\n             any_self_ty_has_vid,\n+            leading_ellipsis,\n         );\n \n         err\n@@ -318,6 +324,7 @@ impl NiceRegionError<'me, 'tcx> {\n         expected_has_vid: Option<usize>,\n         actual_has_vid: Option<usize>,\n         any_self_ty_has_vid: bool,\n+        leading_ellipsis: bool,\n     ) {\n         // HACK(eddyb) maybe move this in a more central location.\n         #[derive(Copy, Clone)]\n@@ -392,13 +399,15 @@ impl NiceRegionError<'me, 'tcx> {\n \n             let mut note = if passive_voice {\n                 format!(\n-                    \"`{}` would have to be implemented for the type `{}`\",\n+                    \"{}`{}` would have to be implemented for the type `{}`\",\n+                    if leading_ellipsis { \"...\" } else { \"\" },\n                     expected_trait_ref,\n                     expected_trait_ref.map(|tr| tr.self_ty()),\n                 )\n             } else {\n                 format!(\n-                    \"`{}` must implement `{}`\",\n+                    \"{}`{}` must implement `{}`\",\n+                    if leading_ellipsis { \"...\" } else { \"\" },\n                     expected_trait_ref.map(|tr| tr.self_ty()),\n                     expected_trait_ref,\n                 )\n@@ -407,20 +416,20 @@ impl NiceRegionError<'me, 'tcx> {\n             match (has_sub, has_sup) {\n                 (Some(n1), Some(n2)) => {\n                     let _ = write!(note,\n-                        \", for any two lifetimes `'{}` and `'{}`\",\n+                        \", for any two lifetimes `'{}` and `'{}`...\",\n                         std::cmp::min(n1, n2),\n                         std::cmp::max(n1, n2),\n                     );\n                 }\n                 (Some(n), _) | (_, Some(n)) => {\n                     let _ = write!(note,\n-                        \", for any lifetime `'{}`\",\n+                        \", for any lifetime `'{}`...\",\n                         n,\n                     );\n                 }\n                 (None, None) => if let Some(n) = expected_has_vid {\n                     let _ = write!(note,\n-                        \", for some specific lifetime `'{}`\",\n+                        \", for some specific lifetime `'{}`...\",\n                         n,\n                     );\n                 },\n@@ -439,13 +448,13 @@ impl NiceRegionError<'me, 'tcx> {\n \n             let mut note = if passive_voice {\n                 format!(\n-                    \"but `{}` is actually implemented for the type `{}`\",\n+                    \"...but `{}` is actually implemented for the type `{}`\",\n                     actual_trait_ref,\n                     actual_trait_ref.map(|tr| tr.self_ty()),\n                 )\n             } else {\n                 format!(\n-                    \"but `{}` actually implements `{}`\",\n+                    \"...but `{}` actually implements `{}`\",\n                     actual_trait_ref.map(|tr| tr.self_ty()),\n                     actual_trait_ref,\n                 )"}, {"sha": "dab4d348ceb604a03572e4c63b80f62a2359afac", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,20 +1,26 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:30:5\n    |\n+LL | auto trait Foo {}\n+   | ----------------- trait `Foo` defined here\n+...\n LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`\n-   = note: but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:48:5\n    |\n+LL | auto trait Foo {}\n+   | ----------------- trait `Foo` defined here\n+...\n LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`\n-   = note: but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04e2ddd4a6090b122bbc0cfcc169fef7b5fa505a", "filename": "src/test/ui/hrtb/due-to-where-clause.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.rs?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -0,0 +1,16 @@\n+// ignore-compare-mode-nll\n+// ^ This code works in nll mode.\n+\n+fn main() {\n+    test::<FooS>(&mut 42); //~ ERROR implementation of `Foo` is not general enough\n+}\n+\n+trait Foo<'a> {}\n+\n+struct FooS<'a> {\n+    data: &'a mut u32,\n+}\n+\n+impl<'a, 'b: 'a> Foo<'b> for FooS<'a> {}\n+\n+fn test<'a, F>(data: &'a mut u32) where F: for<'b> Foo<'b> {}"}, {"sha": "e698584bb716f8ccd7206dfc86216a91f5d235cc", "filename": "src/test/ui/hrtb/due-to-where-clause.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -0,0 +1,17 @@\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/due-to-where-clause.rs:5:5\n+   |\n+LL |     test::<FooS>(&mut 42);\n+   |     ^^^^^^^^^^^^ doesn't satisfy where-clause\n+...\n+LL | trait Foo<'a> {}\n+   | ---------------- trait `Foo` defined here\n+...\n+LL | fn test<'a, F>(data: &'a mut u32) where F: for<'b> Foo<'b> {}\n+   | ------------------------------------------------------------- due to a where-clause on `test`...\n+   |\n+   = note: ...`FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n+   = note: ...but `FooS<'_>` actually implements `Foo<'1>`, for some specific lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "003f32659351f18744c964da3de373b30dbdcaf0", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,11 +1,14 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/hrtb-cache-issue-54302.rs:19:5\n    |\n+LL | trait Deserialize<'de> {}\n+   | ------------------------- trait `Deserialize` defined here\n+...\n LL |     assert_deserialize_owned::<&'static str>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |\n-   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n-   = note: but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n+   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`...\n+   = note: ...but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "c0e3fd3cf4679dc3d8d9b70943d1cfd8f2a7e1c1", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,11 +1,17 @@\n error: implementation of `Stream` is not general enough\n   --> $DIR/issue-30786.rs:108:22\n    |\n-LL |     let map = source.map(|x: &_| x);\n-   |                      ^^^\n+LL | / pub trait Stream {\n+LL | |     type Item;\n+LL | |     fn next(self) -> Option<Self::Item>;\n+LL | | }\n+   | |_- trait `Stream` defined here\n+...\n+LL |       let map = source.map(|x: &_| x);\n+   |                        ^^^ implementation of `Stream` is not general enough\n    |\n-   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for any lifetime `'0`\n-   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for some specific lifetime `'1`\n+   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for any lifetime `'0`...\n+   = note: ...but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "1cfd93e59d935695838738acc3f0e345c51d9dea", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,11 +1,11 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:112:18\n+  --> $DIR/issue-30786.rs:113:18\n    |\n LL |     let filter = map.filter(|x: &_| true);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:114:17\n+  --> $DIR/issue-30786.rs:115:17\n    |\n LL |     let count = filter.count(); // Assert that we still have a valid stream.\n    |                 ^^^^^^^^^^^^^^"}, {"sha": "c42297ca68346a37191cc687aa8987d7d7c01a2f", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -16,7 +16,7 @@\n \n //[nll]compile-flags: -Z borrowck=mir\n \n-pub trait Stream {\n+pub trait Stream { //[migrate]~ NOTE trait `Stream` defined here\n     type Item;\n     fn next(self) -> Option<Self::Item>;\n }\n@@ -109,6 +109,7 @@ fn main() {\n     //[migrate]~^ ERROR implementation of `Stream` is not general enough\n     //[migrate]~| NOTE  `Stream` would have to be implemented for the type `&'0 mut Map\n     //[migrate]~| NOTE  but `Stream` is actually implemented for the type `&'1\n+    //[migrate]~| NOTE  implementation of `Stream` is not general enough\n     let filter = map.filter(|x: &_| true);\n     //[nll]~^ ERROR higher-ranked subtype error\n     let count = filter.count(); // Assert that we still have a valid stream."}, {"sha": "3ed27791643017ea2686427fb9b58f8dfd6f114a", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,38 +1,58 @@\n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n-LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`\n-   = note: but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+LL | / trait Foo<'x, T> {\n+LL | |     fn foo(self) -> &'x T;\n+LL | | }\n+   | |_- trait `Foo` defined here\n+...\n+LL |       <u32 as RefFoo<u32>>::ref_foo(a)\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n-LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Foo<'x, T> {\n+LL | |     fn foo(self) -> &'x T;\n+LL | | }\n+   | |_- trait `Foo` defined here\n+...\n+LL |       <i32 as RefFoo<i32>>::ref_foo(a)\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`\n-   = note: but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n+   = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n-LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Foo<'x, T> {\n+LL | |     fn foo(self) -> &'x T;\n+LL | | }\n+   | |_- trait `Foo` defined here\n+...\n+LL |       <u64 as RefFoo<u64>>::ref_foo(a)\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`\n-   = note: but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n+   = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n-LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Foo<'x, T> {\n+LL | |     fn foo(self) -> &'x T;\n+LL | | }\n+   | |_- trait `Foo` defined here\n+...\n+LL |       <i64 as RefFoo<i64>>::ref_foo(a)\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`\n-   = note: but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`\n+   = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`...\n+   = note: ...but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1b3f57ba188a3d03da8b3145d7bb32ee0b5d514b", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,11 +1,14 @@\n error: implementation of `Deserialize` is not general enough\n   --> $DIR/issue-54302.rs:13:5\n    |\n+LL | trait Deserialize<'de> {}\n+   | ------------------------- trait `Deserialize` defined here\n+...\n LL |     assert_deserialize_owned::<&'static str>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Deserialize` is not general enough\n    |\n-   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n-   = note: but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n+   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`...\n+   = note: ...but `&str` actually implements `Deserialize<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "f44c842187cc211ea163bc701ac263a9aff21145", "filename": "src/test/ui/issues/issue-55731.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3edc644751a57e2f3c34f2bf2ec9d898c2eda492/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr?ref=3edc644751a57e2f3c34f2bf2ec9d898c2eda492", "patch": "@@ -1,11 +1,16 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n   --> $DIR/issue-55731.rs:48:5\n    |\n-LL |     multi(Map {\n-   |     ^^^^^\n+LL | / trait DistributedIteratorMulti<Source> {\n+LL | |     type Item;\n+LL | | }\n+   | |_- trait `DistributedIteratorMulti` defined here\n+...\n+LL |       multi(Map {\n+   |       ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n    |\n-   = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`\n-   = note: but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`\n+   = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`...\n+   = note: ...but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}]}