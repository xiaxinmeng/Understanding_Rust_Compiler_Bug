{"sha": "7d2080a0311cab62388f416beeb360695dbc5ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjA4MGEwMzExY2FiNjIzODhmNDE2YmVlYjM2MDY5NWRiYzVkZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T18:52:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T18:52:09Z"}, "message": "Classify name works for TypeParams", "tree": {"sha": "5c3f5ff8ad9fb4cf0cc53abe8476e275525814ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3f5ff8ad9fb4cf0cc53abe8476e275525814ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2080a0311cab62388f416beeb360695dbc5ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2080a0311cab62388f416beeb360695dbc5ded", "html_url": "https://github.com/rust-lang/rust/commit/7d2080a0311cab62388f416beeb360695dbc5ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2080a0311cab62388f416beeb360695dbc5ded/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a01aa2f8ca9eff9ba2321f2f113623742e212c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a01aa2f8ca9eff9ba2321f2f113623742e212c", "html_url": "https://github.com/rust-lang/rust/commit/d1a01aa2f8ca9eff9ba2321f2f113623742e212c"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "0295eb948605bd0cf75f5e0a3089a47ed255b800", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -865,6 +865,10 @@ impl GenericParam {\n         let params = db.generic_params(self.id.parent);\n         params.params[self.id.local_id].name.clone()\n     }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        self.id.parent.module(db).into()\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "686ab1d79f695101765a74412cea200a475acc91", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n use hir_def::{\n     child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, AstItemDef,\n-    EnumVariantId, LocationCtx, ModuleId, VariantId,\n+    EnumVariantId, GenericDefId, LocationCtx, ModuleId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -11,8 +11,8 @@ use ra_syntax::{\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, ImplBlock, InFile, Local,\n-    MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, GenericParam, ImplBlock, InFile,\n+    Local, MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub trait FromSource: Sized {\n@@ -177,6 +177,23 @@ impl Local {\n     }\n }\n \n+impl GenericParam {\n+    pub fn from_source(db: &impl HirDatabase, src: InFile<ast::TypeParam>) -> Option<Self> {\n+        let file_id = src.file_id;\n+        let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n+            let res = match_ast! {\n+                match it {\n+                    ast::FnDef(value) => { Function::from_source(db, InFile { value, file_id})?.id.into() },\n+                    _ => return None,\n+                }\n+            };\n+            Some(res)\n+        })?;\n+        let &id = parent.child_by_source(db)[keys::TYPE_PARAM].get(&src)?;\n+        Some(GenericParam { id })\n+    }\n+}\n+\n impl Module {\n     pub fn from_declaration(db: &impl DefDatabase, src: InFile<ast::Module>) -> Option<Self> {\n         let parent_declaration = src.value.syntax().ancestors().skip(1).find_map(ast::Module::cast);"}, {"sha": "159f9034bc620a6fe13b78cb8c700edb2283ffa7", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -14,11 +14,14 @@ use ra_db::FileId;\n use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n+    child_by_source::ChildBySource,\n     db::DefDatabase,\n+    dyn_map::DynMap,\n+    keys,\n     src::HasChildSource,\n     src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, GenericDefId, LocalGenericParamId, Lookup,\n+    AdtId, AstItemDef, GenericDefId, GenericParamId, LocalGenericParamId, Lookup,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -183,3 +186,18 @@ impl HasChildSource for GenericDefId {\n         sm\n     }\n }\n+\n+impl ChildBySource for GenericDefId {\n+    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n+        let mut res = DynMap::default();\n+        let arena_map = self.child_source(db);\n+        let arena_map = arena_map.as_ref();\n+        for (local_id, src) in arena_map.value.iter() {\n+            let id = GenericParamId { parent: *self, local_id };\n+            if let Either::Right(type_param) = src {\n+                res[keys::TYPE_PARAM].insert(arena_map.with_value(type_param.clone()), id)\n+            }\n+        }\n+        res\n+    }\n+}"}, {"sha": "ca5630c8018fb9c566411a723b0589ced72e7d61", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, StaticId, StructFieldId, TypeAliasId,\n+    ConstId, EnumVariantId, FunctionId, GenericParamId, StaticId, StructFieldId, TypeAliasId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -20,6 +20,7 @@ pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordFieldDef, StructFieldId> = Key::new();\n+pub const TYPE_PARAM: Key<ast::TypeParam, GenericParamId> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "6dfb3c03d018174c1235826ebc5a16ee628d0e6a", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -525,6 +525,20 @@ impl HasModule for DefWithBodyId {\n     }\n }\n \n+impl HasModule for GenericDefId {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n+        match self {\n+            GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n+            GenericDefId::AdtId(it) => it.module(db),\n+            GenericDefId::TraitId(it) => it.module(db),\n+            GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n+            GenericDefId::ImplId(it) => it.module(db),\n+            GenericDefId::EnumVariantId(it) => it.parent.module(db),\n+            GenericDefId::ConstId(it) => it.lookup(db).module(db),\n+        }\n+    }\n+}\n+\n impl HasModule for StaticLoc {\n     fn module(&self, _db: &impl db::DefDatabase) -> ModuleId {\n         self.container"}, {"sha": "65df2e335237c4388e55e395d953264bf1f33f41", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2080a0311cab62388f416beeb360695dbc5ded/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=7d2080a0311cab62388f416beeb360695dbc5ded", "patch": "@@ -110,6 +110,15 @@ pub(crate) fn classify_name(db: &RootDatabase, name: InFile<&ast::Name>) -> Opti\n                     kind: NameKind::Macro(def),\n                 })\n             },\n+            ast::TypeParam(it) => {\n+                let src = name.with_value(it);\n+                let def = hir::GenericParam::from_source(db, src)?;\n+                Some(NameDefinition {\n+                    visibility: None,\n+                    container: def.module(db),\n+                    kind: NameKind::GenericParam(def),\n+                })\n+            },\n             _ => None,\n         }\n     }"}]}