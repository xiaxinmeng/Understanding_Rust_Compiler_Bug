{"sha": "e5024924ad6d7403c8ab73798b30ff501a10a391", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MDI0OTI0YWQ2ZDc0MDNjOGFiNzM3OThiMzBmZjUwMWExMGEzOTE=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-24T02:42:42Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-28T03:09:10Z"}, "message": "Make fatal errors more consistent.", "tree": {"sha": "6d9823f034c96f1438e1c43e7997cdfd65e0cc39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9823f034c96f1438e1c43e7997cdfd65e0cc39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5024924ad6d7403c8ab73798b30ff501a10a391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5024924ad6d7403c8ab73798b30ff501a10a391", "html_url": "https://github.com/rust-lang/rust/commit/e5024924ad6d7403c8ab73798b30ff501a10a391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5024924ad6d7403c8ab73798b30ff501a10a391/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329e487e582cba7ae1eaa444b0d004cee94ae7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/329e487e582cba7ae1eaa444b0d004cee94ae7c3", "html_url": "https://github.com/rust-lang/rust/commit/329e487e582cba7ae1eaa444b0d004cee94ae7c3"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "3714a43744fe569eaef087a1ab832f9dd9308efd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -657,15 +657,15 @@ pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {\n     let target = match Target::search(&opts.target_triple) {\n         Ok(t) => t,\n         Err(e) => {\n-            sp.handler().fatal(&format!(\"Error loading target specification: {}\", e));\n+            panic!(sp.handler().fatal(&format!(\"Error loading target specification: {}\", e)));\n         }\n     };\n \n     let (int_type, uint_type) = match &target.target_pointer_width[..] {\n         \"32\" => (ast::TyI32, ast::TyU32),\n         \"64\" => (ast::TyI64, ast::TyU64),\n-        w    => sp.handler().fatal(&format!(\"target specification was invalid: unrecognized \\\n-                                             target-pointer-width {}\", w))\n+        w    => panic!(sp.handler().fatal(&format!(\"target specification was invalid: \\\n+                                                    unrecognized target-pointer-width {}\", w))),\n     };\n \n     Config {"}, {"sha": "29ac2d3abb569be4936ca6290d81590ce6009c94", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -94,7 +94,7 @@ impl Session {\n         if self.opts.treat_err_as_bug {\n             self.bug(msg);\n         }\n-        self.diagnostic().handler().fatal(msg)\n+        panic!(self.diagnostic().handler().fatal(msg))\n     }\n     pub fn span_err_or_warn(&self, is_warning: bool, sp: Span, msg: &str) {\n         if is_warning {\n@@ -415,8 +415,8 @@ pub fn build_session_(sopts: config::Options,\n     let host = match Target::search(config::host_triple()) {\n         Ok(t) => t,\n         Err(e) => {\n-            span_diagnostic.handler()\n-                .fatal(&format!(\"Error loading host specification: {}\", e));\n+            panic!(span_diagnostic.handler()\n+                                  .fatal(&format!(\"Error loading host specification: {}\", e)));\n     }\n     };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);"}, {"sha": "020ca35989de166bba5d0b7241392eee682e79ac", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -257,8 +257,10 @@ impl Target {\n                      .map(|s| s.as_string())\n                      .and_then(|os| os.map(|s| s.to_string())) {\n                 Some(val) => val,\n-                None =>\n-                    handler.fatal(&format!(\"Field {} in target specification is required\", name))\n+                None => {\n+                    panic!(handler.fatal(&format!(\"Field {} in target specification is required\",\n+                                                  name)))\n+                }\n             }\n         };\n "}, {"sha": "17c8d9aa9e1daf1a571e65b2c99cf20860047ff9", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -38,14 +38,12 @@ pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();\n         if cstr == ptr::null() {\n-            handler.fatal(&msg[..]);\n+            panic!(handler.fatal(&msg[..]));\n         } else {\n             let err = CStr::from_ptr(cstr).to_bytes();\n             let err = String::from_utf8_lossy(err).to_string();\n             libc::free(cstr as *mut _);\n-            handler.fatal(&format!(\"{}: {}\",\n-                                  &msg[..],\n-                                  &err[..]));\n+            panic!(handler.fatal(&format!(\"{}: {}\", &msg[..], &err[..])));\n         }\n     }\n }"}, {"sha": "2b34db3f6eafbd19b1e0487bbf9842332da57c09", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -206,13 +206,9 @@ impl Handler {\n             can_emit_warnings: can_emit_warnings\n         }\n     }\n-    pub fn fatal(&self, msg: &str) -> ! {\n+    pub fn fatal(&self, msg: &str) -> FatalError {\n         self.emit.borrow_mut().emit(None, msg, None, Fatal);\n-\n-        // Suppress the fatal error message from the panic below as we've\n-        // already terminated in our own \"legitimate\" fashion.\n-        io::set_panic(Box::new(io::sink()));\n-        panic!(FatalError);\n+        FatalError\n     }\n     pub fn err(&self, msg: &str) {\n         self.emit.borrow_mut().emit(None, msg, None, Error);\n@@ -230,14 +226,15 @@ impl Handler {\n     pub fn abort_if_errors(&self) {\n         let s;\n         match self.err_count.get() {\n-          0 => return,\n-          1 => s = \"aborting due to previous error\".to_string(),\n-          _   => {\n-            s = format!(\"aborting due to {} previous errors\",\n-                        self.err_count.get());\n-          }\n+            0 => return,\n+            1 => s = \"aborting due to previous error\".to_string(),\n+            _  => {\n+                s = format!(\"aborting due to {} previous errors\",\n+                            self.err_count.get());\n+            }\n         }\n-        self.fatal(&s[..]);\n+\n+        panic!(self.fatal(&s[..]));\n     }\n     pub fn warn(&self, msg: &str) {\n         self.emit.borrow_mut().emit(None, msg, None, Warning);"}, {"sha": "8b001f2419c56696b8ec3a196f267ad583e11757", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -30,7 +30,6 @@\n #![feature(filling_drop)]\n #![feature(libc)]\n #![feature(rustc_private)]\n-#![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(str_escape)]"}, {"sha": "15625cba65c579bcb39f9d8de9ba12d927ef6170", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5024924ad6d7403c8ab73798b30ff501a10a391/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e5024924ad6d7403c8ab73798b30ff501a10a391", "patch": "@@ -235,7 +235,7 @@ fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n             let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n             match spanopt {\n                 Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n-                None => sess.span_diagnostic.handler().fatal(&msg)\n+                None => panic!(sess.span_diagnostic.handler().fatal(&msg))\n             }\n         }\n     }"}]}