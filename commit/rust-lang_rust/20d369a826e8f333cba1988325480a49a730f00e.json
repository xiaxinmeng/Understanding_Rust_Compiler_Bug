{"sha": "20d369a826e8f333cba1988325480a49a730f00e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZDM2OWE4MjZlOGYzMzNjYmExOTg4MzI1NDgwYTQ5YTczMGYwMGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-20T16:35:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T16:35:05Z"}, "message": "Merge #6299\n\n6299: Diagnose items that are #[cfg]d out r=jonas-schievink a=jonas-schievink\n\nThis emits a hint-level diagnostic with `Unnecessary` tag to \"gray out\" any items whose `#[cfg]` attributes remove the item before name resolution.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "266845de2212273c0967ed6455bdc0c7b485f225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266845de2212273c0967ed6455bdc0c7b485f225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d369a826e8f333cba1988325480a49a730f00e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjxG5CRBK7hj4Ov3rIwAAdHIIAEg/eH7trHrhcm+tE1VuN7HC\nGTiwd8tdR6eK+76FTJRJqx6a/MhPTG1Tgc7MSgl51jsYSw8gvLPHFgUGDUp1K+j1\n7TPjgYbBEotGrtaHe/94AUqxilgu5uQ1i3F4rszoBamGUmtFuxhVzIphmsum6a9K\nXbKZ1E4AonendNBkd/BGI+jNt9emlw6W6m//qQwSvmO5J6SmFhJTfxr6u9ACM4Zk\nAML6roFRtsfZMa/dTZwmblJRnz1us2VtUv4Vjik3P639z/AUvM5/WiWWhC60Y94A\nZ8igOXohIgWsM464YEC920TpF3H32JX6f7J+ULlMqSMEjJfUBmv95TQ6tKaVttA=\n=FIjA\n-----END PGP SIGNATURE-----\n", "payload": "tree 266845de2212273c0967ed6455bdc0c7b485f225\nparent 5dd99aa016bd9f7b8bcbc0eb47998723b675bb26\nparent 74ac83a5acc9f53db69577fc32a4a6e3985d2ef9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603211705 +0000\ncommitter GitHub <noreply@github.com> 1603211705 +0000\n\nMerge #6299\n\n6299: Diagnose items that are #[cfg]d out r=jonas-schievink a=jonas-schievink\n\nThis emits a hint-level diagnostic with `Unnecessary` tag to \"gray out\" any items whose `#[cfg]` attributes remove the item before name resolution.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d369a826e8f333cba1988325480a49a730f00e", "html_url": "https://github.com/rust-lang/rust/commit/20d369a826e8f333cba1988325480a49a730f00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d369a826e8f333cba1988325480a49a730f00e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd99aa016bd9f7b8bcbc0eb47998723b675bb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd99aa016bd9f7b8bcbc0eb47998723b675bb26", "html_url": "https://github.com/rust-lang/rust/commit/5dd99aa016bd9f7b8bcbc0eb47998723b675bb26"}, {"sha": "74ac83a5acc9f53db69577fc32a4a6e3985d2ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ac83a5acc9f53db69577fc32a4a6e3985d2ef9", "html_url": "https://github.com/rust-lang/rust/commit/74ac83a5acc9f53db69577fc32a4a6e3985d2ef9"}], "stats": {"total": 208, "additions": 141, "deletions": 67}, "files": [{"sha": "c18c1c5873992c5ef8ec37ff6f9a5337b86d91f2", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -1,5 +1,5 @@\n //! FIXME: write short doc here\n-pub use hir_def::diagnostics::UnresolvedModule;\n+pub use hir_def::diagnostics::{InactiveCode, UnresolvedModule};\n pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,"}, {"sha": "c9c08b01f80b8fa9a54d9ba753bf97b671e86fd3", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -86,3 +86,28 @@ impl Diagnostic for UnresolvedImport {\n         true\n     }\n }\n+\n+// Diagnostic: unconfigured-code\n+//\n+// This diagnostic is shown for code with inactive `#[cfg]` attributes.\n+#[derive(Debug)]\n+pub struct InactiveCode {\n+    pub file: HirFileId,\n+    pub node: SyntaxNodePtr,\n+}\n+\n+impl Diagnostic for InactiveCode {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"inactive-code\")\n+    }\n+    fn message(&self) -> String {\n+        // FIXME: say *why* it is configured out\n+        \"code is inactive due to #[cfg] directives\".to_string()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone())\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "7eb388baed53e3881f4dd576056f923ccd7bd2e5", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -672,6 +672,24 @@ impl ModItem {\n     pub fn downcast<N: ItemTreeNode>(self) -> Option<FileItemTreeId<N>> {\n         N::id_from_mod_item(self)\n     }\n+\n+    pub fn ast_id(&self, tree: &ItemTree) -> FileAstId<ast::Item> {\n+        match self {\n+            ModItem::Import(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::ExternCrate(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Function(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Struct(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Union(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Enum(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Const(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Static(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Trait(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Impl(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::TypeAlias(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Mod(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::MacroCall(it) => tree[it.index].ast_id().upcast(),\n+        }\n+    }\n }\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq)]"}, {"sha": "01a28aeeb414aa7f46b2da3a8992bcc73c6ebdde", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -286,7 +286,7 @@ mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use hir_expand::hygiene::Hygiene;\n     use hir_expand::InFile;\n-    use syntax::{ast, AstPtr};\n+    use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n     use crate::path::ModPath;\n     use crate::{db::DefDatabase, diagnostics::*, nameres::LocalModuleId, AstId};\n@@ -298,6 +298,8 @@ mod diagnostics {\n         UnresolvedExternCrate { ast: AstId<ast::ExternCrate> },\n \n         UnresolvedImport { ast: AstId<ast::Use>, index: usize },\n+\n+        UnconfiguredCode { ast: InFile<SyntaxNodePtr> },\n     }\n \n     #[derive(Debug, PartialEq, Eq)]\n@@ -336,6 +338,13 @@ mod diagnostics {\n             Self { in_module: container, kind: DiagnosticKind::UnresolvedImport { ast, index } }\n         }\n \n+        pub(super) fn unconfigured_code(\n+            container: LocalModuleId,\n+            ast: InFile<SyntaxNodePtr>,\n+        ) -> Self {\n+            Self { in_module: container, kind: DiagnosticKind::UnconfiguredCode { ast } }\n+        }\n+\n         pub(super) fn add_to(\n             &self,\n             db: &dyn DefDatabase,\n@@ -385,6 +394,10 @@ mod diagnostics {\n                         sink.push(UnresolvedImport { file: ast.file_id, node: AstPtr::new(&tree) });\n                     }\n                 }\n+\n+                DiagnosticKind::UnconfiguredCode { ast } => {\n+                    sink.push(InactiveCode { file: ast.file_id, node: ast.value.clone() });\n+                }\n             }\n         }\n     }"}, {"sha": "bff8edb62dc8567e8e2c5061c5cb71c5978bdbaf", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -913,6 +913,7 @@ impl ModCollector<'_, '_> {\n         for &item in items {\n             let attrs = self.item_tree.attrs(item.into());\n             if !self.is_cfg_enabled(attrs) {\n+                self.emit_unconfigured_diagnostic(item);\n                 continue;\n             }\n             let module =\n@@ -1323,6 +1324,18 @@ impl ModCollector<'_, '_> {\n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n         attrs.is_cfg_enabled(self.def_collector.cfg_options)\n     }\n+\n+    fn emit_unconfigured_diagnostic(&mut self, item: ModItem) {\n+        let ast_id = item.ast_id(self.item_tree);\n+        let id_map = self.def_collector.db.ast_id_map(self.file_id);\n+        let syntax_ptr = id_map.get(ast_id).syntax_node_ptr();\n+\n+        let ast_node = InFile::new(self.file_id, syntax_ptr);\n+        self.def_collector\n+            .def_map\n+            .diagnostics\n+            .push(DefDiagnostic::unconfigured_code(self.module_id, ast_node));\n+    }\n }\n \n fn is_macro_rules(path: &ModPath) -> bool {"}, {"sha": "90574cb359cbae4f2ccb7d8c392811ed7456276b", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -10,7 +10,10 @@ mod field_shorthand;\n use std::cell::RefCell;\n \n use base_db::SourceDatabase;\n-use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n+use hir::{\n+    diagnostics::{Diagnostic as _, DiagnosticSinkBuilder},\n+    Semantics,\n+};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -31,6 +34,25 @@ pub struct Diagnostic {\n     pub range: TextRange,\n     pub severity: Severity,\n     pub fix: Option<Fix>,\n+    pub unused: bool,\n+}\n+\n+impl Diagnostic {\n+    fn error(range: TextRange, message: String) -> Self {\n+        Self { message, range, severity: Severity::Error, fix: None, unused: false }\n+    }\n+\n+    fn hint(range: TextRange, message: String) -> Self {\n+        Self { message, range, severity: Severity::WeakWarning, fix: None, unused: false }\n+    }\n+\n+    fn with_fix(self, fix: Option<Fix>) -> Self {\n+        Self { fix, ..self }\n+    }\n+\n+    fn with_unused(self, unused: bool) -> Self {\n+        Self { unused, ..self }\n+    }\n }\n \n #[derive(Debug)]\n@@ -71,13 +93,13 @@ pub(crate) fn diagnostics(\n     let mut res = Vec::new();\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n-    res.extend(parse.errors().iter().take(128).map(|err| Diagnostic {\n-        // name: None,\n-        range: err.range(),\n-        message: format!(\"Syntax Error: {}\", err),\n-        severity: Severity::Error,\n-        fix: None,\n-    }));\n+    res.extend(\n+        parse\n+            .errors()\n+            .iter()\n+            .take(128)\n+            .map(|err| Diagnostic::error(err.range(), format!(\"Syntax Error: {}\", err))),\n+    );\n \n     for node in parse.tree().syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, &node);\n@@ -100,6 +122,13 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema));\n         })\n+        .on::<hir::diagnostics::InactiveCode, _>(|d| {\n+            // Override severity and mark as unused.\n+            res.borrow_mut().push(\n+                Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n+                    .with_unused(true),\n+            );\n+        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));\n@@ -108,13 +137,8 @@ pub(crate) fn diagnostics(\n     let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n-            res.borrow_mut().push(Diagnostic {\n-                // name: Some(d.name().into()),\n-                message: d.message(),\n-                range: sema.diagnostics_display_range(d).range,\n-                severity: Severity::Error,\n-                fix: None,\n-            })\n+            res.borrow_mut()\n+                .push(Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()));\n         });\n \n     if let Some(m) = sema.to_module_def(file_id) {\n@@ -125,22 +149,11 @@ pub(crate) fn diagnostics(\n }\n \n fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic {\n-        // name: Some(d.name().into()),\n-        range: sema.diagnostics_display_range(d).range,\n-        message: d.message(),\n-        severity: Severity::Error,\n-        fix: d.fix(&sema),\n-    }\n+    Diagnostic::error(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n }\n \n fn warning_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n-    Diagnostic {\n-        range: sema.diagnostics_display_range(d).range,\n-        message: d.message(),\n-        severity: Severity::WeakWarning,\n-        fix: d.fix(&sema),\n-    }\n+    Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message()).with_fix(d.fix(&sema))\n }\n \n fn check_unnecessary_braces_in_use_statement(\n@@ -161,17 +174,14 @@ fn check_unnecessary_braces_in_use_statement(\n                     edit_builder.finish()\n                 });\n \n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: use_range,\n-            message: \"Unnecessary braces in use statement\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n-                \"Remove unnecessary braces\",\n-                SourceFileEdit { file_id, edit }.into(),\n-                use_range,\n-            )),\n-        });\n+        acc.push(\n+            Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n+                .with_fix(Some(Fix::new(\n+                    \"Remove unnecessary braces\",\n+                    SourceFileEdit { file_id, edit }.into(),\n+                    use_range,\n+                ))),\n+        );\n     }\n \n     Some(())\n@@ -578,6 +588,7 @@ fn test_fn() {\n                                 fix_trigger_range: 0..8,\n                             },\n                         ),\n+                        unused: false,\n                     },\n                 ]\n             \"#]],"}, {"sha": "54e9fce9e5e59e35090e769dce523ad0b75a752a", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -6,7 +6,7 @@ use ide_db::source_change::SourceFileEdit;\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n-use crate::{Diagnostic, Fix, Severity};\n+use crate::{Diagnostic, Fix};\n \n pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n     match_ast! {\n@@ -46,17 +46,15 @@ fn check_expr_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_field.syntax().text_range();\n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: field_range,\n-            message: \"Shorthand struct initialization\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n-                \"Use struct shorthand initialization\",\n-                SourceFileEdit { file_id, edit }.into(),\n-                field_range,\n-            )),\n-        });\n+        acc.push(\n+            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string()).with_fix(\n+                Some(Fix::new(\n+                    \"Use struct shorthand initialization\",\n+                    SourceFileEdit { file_id, edit }.into(),\n+                    field_range,\n+                )),\n+            ),\n+        );\n     }\n }\n \n@@ -88,17 +86,13 @@ fn check_pat_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_pat_field.syntax().text_range();\n-        acc.push(Diagnostic {\n-            // name: None,\n-            range: field_range,\n-            message: \"Shorthand struct pattern\".to_string(),\n-            severity: Severity::WeakWarning,\n-            fix: Some(Fix::new(\n+        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fix(\n+            Some(Fix::new(\n                 \"Use struct field shorthand\",\n                 SourceFileEdit { file_id, edit }.into(),\n                 field_range,\n             )),\n-        });\n+        ));\n     }\n }\n "}, {"sha": "f2d57f9867f43f12f359e1de16fca55fe5589108", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20d369a826e8f333cba1988325480a49a730f00e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d369a826e8f333cba1988325480a49a730f00e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=20d369a826e8f333cba1988325480a49a730f00e", "patch": "@@ -16,12 +16,12 @@ use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams,\n-    DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams, HoverContents, Location,\n-    Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n-    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n-    TextDocumentIdentifier, Url, WorkspaceEdit,\n+    CodeActionKind, CodeLens, Command, CompletionItem, Diagnostic, DiagnosticTag,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n+    HoverContents, Location, Position, PrepareRenameResponse, Range, RenameParams,\n+    SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n+    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n+    SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n@@ -1124,7 +1124,7 @@ pub(crate) fn publish_diagnostics(\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,\n             related_information: None,\n-            tags: None,\n+            tags: if d.unused { Some(vec![DiagnosticTag::Unnecessary]) } else { None },\n         })\n         .collect();\n     Ok(diagnostics)"}]}