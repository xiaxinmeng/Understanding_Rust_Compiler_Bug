{"sha": "9de600892da3c86fb92c1dfde455d39657835739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZTYwMDg5MmRhM2M4NmZiOTJjMWRmZGU0NTVkMzk2NTc4MzU3Mzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-21T12:58:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T14:53:52Z"}, "message": "make bit_width return u64, consistently with other sizes in the compiler", "tree": {"sha": "2a388845e2e6b8bcf2dc6d537206c5ba6d8f966f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a388845e2e6b8bcf2dc6d537206c5ba6d8f966f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de600892da3c86fb92c1dfde455d39657835739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de600892da3c86fb92c1dfde455d39657835739", "html_url": "https://github.com/rust-lang/rust/commit/9de600892da3c86fb92c1dfde455d39657835739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de600892da3c86fb92c1dfde455d39657835739/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ddbdc62692f40017949e8ba0acca4b5f61f6027", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddbdc62692f40017949e8ba0acca4b5f61f6027", "html_url": "https://github.com/rust-lang/rust/commit/1ddbdc62692f40017949e8ba0acca4b5f61f6027"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "3e7fb0e73bffee6a5caefaf9e80fe2c359248dae", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=9de600892da3c86fb92c1dfde455d39657835739", "patch": "@@ -1614,7 +1614,7 @@ impl FloatTy {\n         }\n     }\n \n-    pub fn bit_width(self) -> usize {\n+    pub fn bit_width(self) -> u64 {\n         match self {\n             FloatTy::F32 => 32,\n             FloatTy::F64 => 64,\n@@ -1663,7 +1663,7 @@ impl IntTy {\n         format!(\"{}{}\", val as u128, self.name_str())\n     }\n \n-    pub fn bit_width(&self) -> Option<usize> {\n+    pub fn bit_width(&self) -> Option<u64> {\n         Some(match *self {\n             IntTy::Isize => return None,\n             IntTy::I8 => 8,\n@@ -1725,7 +1725,7 @@ impl UintTy {\n         format!(\"{}{}\", val, self.name_str())\n     }\n \n-    pub fn bit_width(&self) -> Option<usize> {\n+    pub fn bit_width(&self) -> Option<u64> {\n         Some(match *self {\n             UintTy::Usize => return None,\n             UintTy::U8 => 8,"}, {"sha": "bc25b9496d9b59905368f59efa2125809374e280", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=9de600892da3c86fb92c1dfde455d39657835739", "patch": "@@ -1172,8 +1172,8 @@ fn generic_simd_intrinsic(\n         let m_len = match in_ty.kind {\n             // Note that this `.unwrap()` crashes for isize/usize, that's sort\n             // of intentional as there's not currently a use case for that.\n-            ty::Int(i) => i.bit_width().unwrap() as u64,\n-            ty::Uint(i) => i.bit_width().unwrap() as u64,\n+            ty::Int(i) => i.bit_width().unwrap(),\n+            ty::Uint(i) => i.bit_width().unwrap(),\n             _ => return_error!(\"`{}` is not an integral type\", in_ty),\n         };\n         require_simd!(arg_tys[1], \"argument\");\n@@ -1354,20 +1354,18 @@ fn generic_simd_intrinsic(\n         // trailing bits.\n         let expected_int_bits = in_len.max(8);\n         match ret_ty.kind {\n-            ty::Uint(i) if i.bit_width() == Some(expected_int_bits as usize) => (),\n+            ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => (),\n             _ => return_error!(\"bitmask `{}`, expected `u{}`\", ret_ty, expected_int_bits),\n         }\n \n         // Integer vector <i{in_bitwidth} x in_len>:\n         let (i_xn, in_elem_bitwidth) = match in_elem.kind {\n-            ty::Int(i) => (\n-                args[0].immediate(),\n-                i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits() as _),\n-            ),\n-            ty::Uint(i) => (\n-                args[0].immediate(),\n-                i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits() as _),\n-            ),\n+            ty::Int(i) => {\n+                (args[0].immediate(), i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits()))\n+            }\n+            ty::Uint(i) => {\n+                (args[0].immediate(), i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits()))\n+            }\n             _ => return_error!(\n                 \"vector argument `{}`'s element type `{}`, expected integer element type\",\n                 in_ty,\n@@ -1378,16 +1376,16 @@ fn generic_simd_intrinsic(\n         // Shift the MSB to the right by \"in_elem_bitwidth - 1\" into the first bit position.\n         let shift_indices =\n             vec![\n-                bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _);\n+                bx.cx.const_int(bx.type_ix(in_elem_bitwidth), (in_elem_bitwidth - 1) as _);\n                 in_len as _\n             ];\n         let i_xn_msb = bx.lshr(i_xn, bx.const_vector(shift_indices.as_slice()));\n         // Truncate vector to an <i1 x N>\n-        let i1xn = bx.trunc(i_xn_msb, bx.type_vector(bx.type_i1(), in_len as _));\n+        let i1xn = bx.trunc(i_xn_msb, bx.type_vector(bx.type_i1(), in_len));\n         // Bitcast <i1 x N> to iN:\n-        let i_ = bx.bitcast(i1xn, bx.type_ix(in_len as _));\n+        let i_ = bx.bitcast(i1xn, bx.type_ix(in_len));\n         // Zero-extend iN to the bitmask type:\n-        return Ok(bx.zext(i_, bx.type_ix(expected_int_bits as _)));\n+        return Ok(bx.zext(i_, bx.type_ix(expected_int_bits)));\n     }\n \n     fn simd_simple_float_intrinsic(\n@@ -2099,7 +2097,7 @@ fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, boo\n     match ty.kind {\n         ty::Int(t) => Some((\n             match t {\n-                ast::IntTy::Isize => cx.tcx.sess.target.ptr_width as u64,\n+                ast::IntTy::Isize => u64::from(cx.tcx.sess.target.ptr_width),\n                 ast::IntTy::I8 => 8,\n                 ast::IntTy::I16 => 16,\n                 ast::IntTy::I32 => 32,\n@@ -2110,7 +2108,7 @@ fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, boo\n         )),\n         ty::Uint(t) => Some((\n             match t {\n-                ast::UintTy::Usize => cx.tcx.sess.target.ptr_width as u64,\n+                ast::UintTy::Usize => u64::from(cx.tcx.sess.target.ptr_width),\n                 ast::UintTy::U8 => 8,\n                 ast::UintTy::U16 => 16,\n                 ast::UintTy::U32 => 32,\n@@ -2127,7 +2125,7 @@ fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, boo\n // Returns None if the type is not a float\n fn float_type_width(ty: Ty<'_>) -> Option<u64> {\n     match ty.kind {\n-        ty::Float(t) => Some(t.bit_width() as u64),\n+        ty::Float(t) => Some(t.bit_width()),\n         _ => None,\n     }\n }"}, {"sha": "1eff420d306a0620e0cae01aa01234ba0a1e67de", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de600892da3c86fb92c1dfde455d39657835739/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9de600892da3c86fb92c1dfde455d39657835739", "patch": "@@ -228,17 +228,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match dest_ty.kind {\n             // float -> uint\n             Uint(t) => {\n-                // FIXME: can we make `bit_width` return a type more compatible with `Size::bits`?\n-                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits() as usize);\n-                let v = f.to_u128(width).value;\n+                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits());\n+                let v = f.to_u128(usize::try_from(width).unwrap()).value;\n                 // This should already fit the bit width\n-                Ok(Scalar::from_uint(v, Size::from_bits(width as u64)))\n+                Ok(Scalar::from_uint(v, Size::from_bits(width)))\n             }\n             // float -> int\n             Int(t) => {\n-                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits() as usize);\n-                let v = f.to_i128(width).value;\n-                Ok(Scalar::from_int(v, Size::from_bits(width as u64)))\n+                let width = t.bit_width().unwrap_or_else(|| self.pointer_size().bits());\n+                let v = f.to_i128(usize::try_from(width).unwrap()).value;\n+                Ok(Scalar::from_int(v, Size::from_bits(width)))\n             }\n             // float -> f32\n             Float(FloatTy::F32) => Ok(Scalar::from_f32(f.convert(&mut false).value)),"}]}