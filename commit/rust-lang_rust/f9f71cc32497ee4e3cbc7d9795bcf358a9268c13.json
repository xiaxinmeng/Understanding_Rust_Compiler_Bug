{"sha": "f9f71cc32497ee4e3cbc7d9795bcf358a9268c13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjcxY2MzMjQ5N2VlNGUzY2JjN2Q5Nzk1YmNmMzU4YTkyNjhjMTM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2018-12-21T13:56:52Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2018-12-21T13:57:56Z"}, "message": "Fix poor worst case performance of set intersection (and union, somewhat) on asymmetrically sized sets and extend unit tests slightly beyond that", "tree": {"sha": "7704d0a8ade79d354e6c7f0f623ae562abaaab80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7704d0a8ade79d354e6c7f0f623ae562abaaab80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13", "html_url": "https://github.com/rust-lang/rust/commit/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c6ea2f37326674bf6ca64de55bf5fd90e45015", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c6ea2f37326674bf6ca64de55bf5fd90e45015", "html_url": "https://github.com/rust-lang/rust/commit/01c6ea2f37326674bf6ca64de55bf5fd90e45015"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "8b1aafaa99a2d6a813829d8605ad52bdbf15567c", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f71cc32497ee4e3cbc7d9795bcf358a9268c13/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=f9f71cc32497ee4e3cbc7d9795bcf358a9268c13", "patch": "@@ -420,9 +420,16 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n-        Intersection {\n-            iter: self.iter(),\n-            other,\n+        if self.len() <= other.len() {\n+            Intersection {\n+                iter: self.iter(),\n+                other,\n+            }\n+        } else {\n+            Intersection {\n+                iter: other.iter(),\n+                other: self,\n+            }\n         }\n     }\n \n@@ -446,7 +453,15 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n-        Union { iter: self.iter().chain(other.difference(self)) }\n+        if self.len() <= other.len() {\n+            Union {\n+                iter: self.iter().chain(other.difference(self)),\n+            }\n+        } else {\n+            Union {\n+                iter: other.iter().chain(self.difference(other)),\n+            }\n+        }\n     }\n \n     /// Returns the number of elements in the set.\n@@ -1504,6 +1519,8 @@ mod test_set {\n     fn test_intersection() {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n+        assert!(a.intersection(&b).next().is_none());\n+        assert!(b.intersection(&a).next().is_none());\n \n         assert!(a.insert(11));\n         assert!(a.insert(1));\n@@ -1528,6 +1545,22 @@ mod test_set {\n             i += 1\n         }\n         assert_eq!(i, expected.len());\n+\n+        assert!(a.insert(9)); // make a bigger than b\n+\n+        i = 0;\n+        for x in a.intersection(&b) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n+\n+        i = 0;\n+        for x in b.intersection(&a) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n     }\n \n     #[test]\n@@ -1583,11 +1616,11 @@ mod test_set {\n     fn test_union() {\n         let mut a = HashSet::new();\n         let mut b = HashSet::new();\n+        assert!(a.union(&b).next().is_none());\n+        assert!(b.union(&a).next().is_none());\n \n         assert!(a.insert(1));\n         assert!(a.insert(3));\n-        assert!(a.insert(5));\n-        assert!(a.insert(9));\n         assert!(a.insert(11));\n         assert!(a.insert(16));\n         assert!(a.insert(19));\n@@ -1607,6 +1640,23 @@ mod test_set {\n             i += 1\n         }\n         assert_eq!(i, expected.len());\n+\n+        assert!(a.insert(9)); // make a bigger than b\n+        assert!(a.insert(5));\n+\n+        i = 0;\n+        for x in a.union(&b) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n+\n+        i = 0;\n+        for x in b.union(&a) {\n+            assert!(expected.contains(x));\n+            i += 1\n+        }\n+        assert_eq!(i, expected.len());\n     }\n \n     #[test]"}]}