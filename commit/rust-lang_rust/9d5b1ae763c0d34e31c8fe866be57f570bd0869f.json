{"sha": "9d5b1ae763c0d34e31c8fe866be57f570bd0869f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWIxYWU3NjNjMGQzNGUzMWM4ZmU4NjZiZTU3ZjU3MGJkMDg2OWY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-12-28T17:41:00Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:27Z"}, "message": "add intra-links support to hoedown", "tree": {"sha": "557ef3e3c4e4c8eb3aed65427476ec37f53f6e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557ef3e3c4e4c8eb3aed65427476ec37f53f6e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5b1ae763c0d34e31c8fe866be57f570bd0869f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b1ae763c0d34e31c8fe866be57f570bd0869f", "html_url": "https://github.com/rust-lang/rust/commit/9d5b1ae763c0d34e31c8fe866be57f570bd0869f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b1ae763c0d34e31c8fe866be57f570bd0869f/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611866f3cfb129202bc229659c1e8f4f313b330e", "url": "https://api.github.com/repos/rust-lang/rust/commits/611866f3cfb129202bc229659c1e8f4f313b330e", "html_url": "https://github.com/rust-lang/rust/commit/611866f3cfb129202bc229659c1e8f4f313b330e"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "6fd8eb4de5fc1e33babd87268687992ceaf1ab8f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 66, "deletions": 8, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9d5b1ae763c0d34e31c8fe866be57f570bd0869f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5b1ae763c0d34e31c8fe866be57f570bd0869f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9d5b1ae763c0d34e31c8fe866be57f570bd0869f", "patch": "@@ -561,7 +561,8 @@ struct MyOpaque {\n                            *const hoedown_buffer, *const hoedown_renderer_data,\n                            libc::size_t),\n     toc_builder: Option<TocBuilder>,\n-    links: Option<Vec<String>>,\n+    links_out: Option<Vec<String>>,\n+    links_replace: Vec<(String, String)>,\n }\n \n extern {\n@@ -771,22 +772,78 @@ extern fn hoedown_codespan(\n \n pub fn render(w: &mut fmt::Formatter,\n               s: &str,\n+              links: &[(String, String)],\n               print_toc: bool,\n               html_flags: libc::c_uint) -> fmt::Result {\n+    extern fn hoedown_link(\n+        ob: *mut hoedown_buffer,\n+        content: *const hoedown_buffer,\n+        link: *const hoedown_buffer,\n+        title: *const hoedown_buffer,\n+        data: *const hoedown_renderer_data,\n+        _line: libc::size_t\n+    ) -> libc::c_int {\n+        if link.is_null() {\n+            return 0;\n+        }\n+\n+        let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n+        let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n+\n+        let link = {\n+            let s = unsafe { (*link).as_bytes() };\n+            str::from_utf8(s).unwrap().to_owned()\n+        };\n+\n+        let link = if let Some(&(_, ref new_target)) = opaque.links_replace\n+                                                             .iter()\n+                                                             .find(|t| &*t.0 == &*link) {\n+            new_target.to_owned()\n+        } else {\n+            return 0;\n+        };\n+\n+        let content = unsafe {\n+            content.as_ref().map(|c| {\n+                let s = c.as_bytes();\n+                str::from_utf8(s).unwrap().to_owned()\n+            })\n+        };\n+\n+        let title = unsafe {\n+            title.as_ref().map(|t| {\n+                let s = t.as_bytes();\n+                str::from_utf8(s).unwrap().to_owned()\n+            })\n+        };\n+\n+        let link_out = format!(\"<a href=\\\"{link}\\\"{title}>{content}</a>\",\n+                               link = link,\n+                               title = title.map_or(String::new(),\n+                                                    |t| format!(\" title=\\\"{}\\\"\", t)),\n+                               content = content.unwrap_or(String::new()));\n+\n+        unsafe { hoedown_buffer_put(ob, link_out.as_ptr(), link_out.len()); }\n+\n+        //return \"anything but 0\" to show we've written the link in\n+        1\n+    }\n \n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(html_flags, 0);\n         let mut opaque = MyOpaque {\n             dfltblk: (*renderer).blockcode.unwrap(),\n             toc_builder: if print_toc {Some(TocBuilder::new())} else {None},\n-            links: None,\n+            links_out: None,\n+            links_replace: links.to_vec(),\n         };\n         (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n                 = &mut opaque as *mut _ as *mut libc::c_void;\n         (*renderer).blockcode = Some(hoedown_block);\n         (*renderer).header = Some(hoedown_header);\n         (*renderer).codespan = Some(hoedown_codespan);\n+        (*renderer).link = Some(hoedown_link);\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, s.as_ptr(),\n@@ -1035,7 +1092,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n         if render_type == RenderType::Hoedown {\n-            render(fmt, md, false, 0)\n+            render(fmt, md, links, false, 0)\n         } else {\n             let mut opts = Options::empty();\n             opts.insert(OPTION_ENABLE_TABLES);\n@@ -1062,7 +1119,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n         let MarkdownWithToc(md, render_type) = *self;\n \n         if render_type == RenderType::Hoedown {\n-            render(fmt, md, true, 0)\n+            render(fmt, md, &[], true, 0)\n         } else {\n             let mut opts = Options::empty();\n             opts.insert(OPTION_ENABLE_TABLES);\n@@ -1091,7 +1148,7 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n         if render_type == RenderType::Hoedown {\n-            render(fmt, md, false, HOEDOWN_HTML_ESCAPE)\n+            render(fmt, md, &[], false, HOEDOWN_HTML_ESCAPE)\n         } else {\n             let mut opts = Options::empty();\n             opts.insert(OPTION_ENABLE_TABLES);\n@@ -1203,7 +1260,7 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n                 let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n                 let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n \n-                if let Some(ref mut links) = opaque.links {\n+                if let Some(ref mut links) = opaque.links_out {\n                     let s = unsafe { (*link).as_bytes() };\n                     let s = str::from_utf8(&s).unwrap().to_owned();\n \n@@ -1223,7 +1280,8 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n                 let mut opaque = MyOpaque {\n                     dfltblk: (*renderer).blockcode.unwrap(),\n                     toc_builder: None,\n-                    links: Some(vec![]),\n+                    links_out: Some(vec![]),\n+                    links_replace: vec![],\n                 };\n                 (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n                         = &mut opaque as *mut _ as *mut libc::c_void;\n@@ -1240,7 +1298,7 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n                 hoedown_html_renderer_free(renderer);\n                 hoedown_buffer_free(ob);\n \n-                opaque.links.unwrap()\n+                opaque.links_out.unwrap()\n             }\n         }\n         RenderType::Pulldown => {"}]}