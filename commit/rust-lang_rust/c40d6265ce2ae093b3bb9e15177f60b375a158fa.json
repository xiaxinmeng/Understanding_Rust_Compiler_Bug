{"sha": "c40d6265ce2ae093b3bb9e15177f60b375a158fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MGQ2MjY1Y2UyYWUwOTNiM2JiOWUxNTE3N2Y2MGIzNzVhMTU4ZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-18T20:14:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-18T20:56:15Z"}, "message": "Support x86 stdcall convention\n\nThis allows rust to call the Win32 API", "tree": {"sha": "6e189545311d1b6e2c46a3aa0cd4b623327dfd44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e189545311d1b6e2c46a3aa0cd4b623327dfd44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40d6265ce2ae093b3bb9e15177f60b375a158fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40d6265ce2ae093b3bb9e15177f60b375a158fa", "html_url": "https://github.com/rust-lang/rust/commit/c40d6265ce2ae093b3bb9e15177f60b375a158fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40d6265ce2ae093b3bb9e15177f60b375a158fa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682875929efe558b42318d6ae8b2ef8dc625e94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/682875929efe558b42318d6ae8b2ef8dc625e94a", "html_url": "https://github.com/rust-lang/rust/commit/682875929efe558b42318d6ae8b2ef8dc625e94a"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "bb7dd4f26213ccf69ed92f17d46324dcf6fc3590", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -1314,6 +1314,15 @@ obj builder(BuilderRef B, @mutable bool terminated) {\n         ret v;\n     }\n \n+    fn CallWithConv(ValueRef Fn, &ValueRef[] Args,\n+                    uint Conv) -> ValueRef {\n+        assert !(*terminated);\n+        auto v = llvm::LLVMBuildCall(B, Fn, ivec::to_ptr(Args),\n+                                     ivec::len(Args), str::buf(\"\"));\n+        llvm::LLVMSetInstructionCallConv(v, Conv);\n+        ret v;\n+    }\n+\n     fn Select(ValueRef If, ValueRef Then, ValueRef Else) -> ValueRef {\n         assert (!*terminated);\n         ret llvm::LLVMBuildSelect(B, If, Then, Else, str::buf(\"\"));"}, {"sha": "2804c53024052dae8cb8f4c6757e2537bfd995c9", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -221,6 +221,7 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n                 case ('i') { abi = ast::native_abi_rust_intrinsic; }\n                 case ('c') { abi = ast::native_abi_cdecl; }\n                 case ('l') { abi = ast::native_abi_llvm; }\n+                case ('s') { abi = ast::native_abi_x86stdcall; }\n             }\n             auto func = parse_ty_fn(st, sd);\n             ret ty::mk_native_fn(st.tcx, abi, func._0, func._1);"}, {"sha": "3b3ce6b3866af0341d3e6cef89257a08a211d2b7", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -155,6 +155,7 @@ fn enc_sty(&ioivec::writer w, &@ctxt cx, &ty::sty st) {\n                 }\n                 case (native_abi_cdecl) { w.write_char('c'); }\n                 case (native_abi_llvm) { w.write_char('l'); }\n+                case (native_abi_x86stdcall) { w.write_char('s'); }\n             }\n             enc_ty_fn(w, cx, args, out, return, ~[]);\n         }"}, {"sha": "68a5823a7615be485f530e2e9141549b3c06c568", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -751,7 +751,8 @@ fn trans_native_call(&builder b, @glue_fns glues, ValueRef lltaskptr,\n                      ModuleRef llmod, &str name, bool pass_task,\n                      &ValueRef[] args) -> ValueRef {\n     let int n = std::ivec::len[ValueRef](args) as int;\n-    let ValueRef llnative = get_simple_extern_fn(externs, llmod, name, n);\n+    let ValueRef llnative = get_simple_extern_fn(externs, llmod,\n+                                                 name, n);\n     let ValueRef[] call_args = ~[];\n     for (ValueRef a in args) { call_args += ~[b.ZExtOrBitCast(a, T_int())]; }\n     ret b.Call(llnative, call_args);\n@@ -8142,6 +8143,11 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx, &span sp, &str[] path, str name,\n         uses_retptr = false;\n         cast_to_i32 = false;\n       }\n+      case (ast::native_abi_x86stdcall) {\n+        pass_task = false;\n+        uses_retptr = false;\n+        cast_to_i32 = true;\n+      }\n     }\n \n     auto lltaskptr;\n@@ -8185,7 +8191,7 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx, &span sp, &str[] path, str name,\n     fn trans_simple_native_abi(&@block_ctxt bcx, str name,\n                                &mutable ValueRef[] call_args,\n                                ty::t fn_type, uint first_arg_n,\n-                               bool uses_retptr) ->\n+                               bool uses_retptr, uint cc) ->\n        tup(ValueRef, ValueRef) {\n         let TypeRef[] call_arg_tys = ~[];\n         for (ValueRef arg in call_args) { call_arg_tys += ~[val_ty(arg)]; }\n@@ -8202,8 +8208,12 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx, &span sp, &str[] path, str name,\n \n         auto llnativefn =\n             get_extern_fn(bcx.fcx.lcx.ccx.externs, bcx.fcx.lcx.ccx.llmod,\n-                          name, lib::llvm::LLVMCCallConv, llnativefnty);\n-        auto r = bcx.build.Call(llnativefn, call_args);\n+                          name, cc, llnativefnty);\n+        auto r = if (cc == lib::llvm::LLVMCCallConv) {\n+            bcx.build.Call(llnativefn, call_args)\n+        } else {\n+            bcx.build.CallWithConv(llnativefn, call_args, cc)\n+        };\n         auto rptr = bcx.fcx.llretptr;\n         ret tup(r, rptr);\n     }\n@@ -8231,15 +8241,25 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx, &span sp, &str[] path, str name,\n         case (ast::native_abi_llvm) {\n             auto result =\n                 trans_simple_native_abi(bcx, name, call_args, fn_type, arg_n,\n-                                        uses_retptr);\n+                                        uses_retptr,\n+                                        lib::llvm::LLVMCCallConv);\n             r = result._0;\n             rptr = result._1;\n         }\n         case (ast::native_abi_rust_intrinsic) {\n             auto external_name = \"rust_intrinsic_\" + name;\n             auto result =\n                 trans_simple_native_abi(bcx, external_name, call_args,\n-                                        fn_type, arg_n, uses_retptr);\n+                                        fn_type, arg_n, uses_retptr,\n+                                        lib::llvm::LLVMCCallConv);\n+            r = result._0;\n+            rptr = result._1;\n+        }\n+        case (ast::native_abi_x86stdcall) {\n+            auto result =\n+                trans_simple_native_abi(bcx, name, call_args, fn_type, arg_n,\n+                                        uses_retptr,\n+                                        lib::llvm::LLVMX86StdcallCallConv);\n             r = result._0;\n             rptr = result._1;\n         }"}, {"sha": "745aa4e1fcdeab94136a976dd149874ae629f0e9", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -526,6 +526,7 @@ tag native_abi {\n     native_abi_cdecl;\n     native_abi_llvm;\n     native_abi_rust_intrinsic;\n+    native_abi_x86stdcall;\n }\n \n type native_mod ="}, {"sha": "59dbf72f7c501470f62954d1b952d205506a3691", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -2004,6 +2004,8 @@ fn parse_item_native_mod(&parser p, &ast::attribute[] attrs) -> @ast::item {\n             abi = ast::native_abi_llvm;\n         } else if (str::eq(t, \"rust-intrinsic\")) {\n             abi = ast::native_abi_rust_intrinsic;\n+        } else if (str::eq(t, \"x86stdcall\")) {\n+            abi = ast::native_abi_x86stdcall;\n         } else { p.fatal(\"unsupported abi: \" + t); fail; }\n     }\n     expect_word(p, \"mod\");"}, {"sha": "0b61ddaff288aa241c393e8f0c3afa2725f6709b", "filename": "src/test/run-pass/x86stdcall.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40d6265ce2ae093b3bb9e15177f60b375a158fa/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=c40d6265ce2ae093b3bb9e15177f60b375a158fa", "patch": "@@ -0,0 +1,21 @@\n+// xfail-stage0\n+\n+#[cfg(target_os = \"win32\")]\n+mod m {\n+    native \"x86stdcall\" mod kernel32 {\n+        fn SetLastError(uint err);\n+        fn GetLastError() -> uint;\n+    }\n+\n+    fn main() {\n+        auto expected = 10u;\n+        kernel32::SetLastError(expected);\n+        auto actual = kernel32::GetLastError();\n+        assert expected == actual;\n+    }\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"linux\")]\n+fn main() {\n+}\n\\ No newline at end of file"}]}