{"sha": "41f6e97a445f736ab437b2f64756b967cf69d763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZjZlOTdhNDQ1ZjczNmFiNDM3YjJmNjQ3NTZiOTY3Y2Y2OWQ3NjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-21T18:33:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-21T18:43:14Z"}, "message": "rustdoc: Render default methods for impls as well\n\nThis does not work for cross-crate implementations of traits. Cross-crate\nimplementations are a separate issue that should be addressed separately.\nBasically when an implementation of an external trait is detected, the trait\nwould have to be loaded at that time (or possibly sooner...). Rustdoc currently\ndoesn't have the proper infrastructure for adding this.\n\nCloses #9985\ncc #9999", "tree": {"sha": "91324a66cb1ff130879e6180805ca8eea0d7e3ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91324a66cb1ff130879e6180805ca8eea0d7e3ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f6e97a445f736ab437b2f64756b967cf69d763", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f6e97a445f736ab437b2f64756b967cf69d763", "html_url": "https://github.com/rust-lang/rust/commit/41f6e97a445f736ab437b2f64756b967cf69d763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f6e97a445f736ab437b2f64756b967cf69d763/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6bb01a22ee82f96256e84d263c851dd163b1fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6bb01a22ee82f96256e84d263c851dd163b1fb", "html_url": "https://github.com/rust-lang/rust/commit/bf6bb01a22ee82f96256e84d263c851dd163b1fb"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "8b089e76f3a0ba68efb7c622796a2c31b854d61d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/41f6e97a445f736ab437b2f64756b967cf69d763/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6e97a445f736ab437b2f64756b967cf69d763/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=41f6e97a445f736ab437b2f64756b967cf69d763", "patch": "@@ -149,10 +149,9 @@ pub struct Cache {\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n-    /// parent trait if no extra documentation is specified, and this map is\n-    /// keyed on trait id with a value of a 'method name => documentation'\n-    /// mapping.\n-    traits: HashMap<ast::NodeId, HashMap<~str, ~str>>,\n+    /// parent trait if no extra documentation is specified, and default methods\n+    /// should show up in documentation about trait implementations.\n+    traits: HashMap<ast::NodeId, clean::Trait>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n@@ -488,18 +487,7 @@ impl DocFolder for Cache {\n         // trait\n         match item.inner {\n             clean::TraitItem(ref t) => {\n-                let mut dox = HashMap::new();\n-                for meth in t.methods.iter() {\n-                    let it = meth.item();\n-                    match it.doc_value() {\n-                        None => {}\n-                        Some(s) => {\n-                            dox.insert(it.name.get_ref().to_owned(),\n-                                       s.to_owned());\n-                        }\n-                    }\n-                }\n-                self.traits.insert(item.id, dox);\n+                self.traits.insert(item.id, t.clone());\n             }\n             _ => {}\n         }\n@@ -1480,18 +1468,25 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl, dox: &Option<~str>) {\n         }\n         None => {}\n     }\n-    write!(w, \"<div class='methods'>\");\n-    for meth in i.methods.iter() {\n+\n+    fn docmeth(w: &mut io::Writer, item: &clean::Item) -> bool {\n         write!(w, \"<h4 id='method.{}' class='method'><code>\",\n-               *meth.name.get_ref());\n-        render_method(w, meth, false);\n+               *item.name.get_ref());\n+        render_method(w, item, false);\n         write!(w, \"</code></h4>\\n\");\n-        match meth.doc_value() {\n+        match item.doc_value() {\n             Some(s) => {\n                 write!(w, \"<div class='docblock'>{}</div>\", Markdown(s));\n-                continue\n+                true\n             }\n-            None => {}\n+            None => false\n+        }\n+    }\n+\n+    write!(w, \"<div class='methods'>\");\n+    for meth in i.methods.iter() {\n+        if docmeth(w, meth) {\n+            continue\n         }\n \n         // No documentation? Attempt to slurp in the trait's documentation\n@@ -1501,13 +1496,19 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl, dox: &Option<~str>) {\n         };\n         do local_data::get(cache_key) |cache| {\n             do cache.unwrap().read |cache| {\n-                let name = meth.name.get_ref().as_slice();\n                 match cache.traits.find(&trait_id) {\n-                    Some(m) => {\n-                        match m.find_equiv(&name) {\n-                            Some(s) => {\n-                                write!(w, \"<div class='docblock'>{}</div>\",\n-                                       Markdown(s.as_slice()));\n+                    Some(t) => {\n+                        let name = meth.name.clone();\n+                        match t.methods.iter().find(|t| t.item().name == name) {\n+                            Some(method) => {\n+                                match method.item().doc_value() {\n+                                    Some(s) => {\n+                                        write!(w,\n+                                               \"<div class='docblock'>{}</div>\",\n+                                               Markdown(s));\n+                                    }\n+                                    None => {}\n+                                }\n                             }\n                             None => {}\n                         }\n@@ -1517,6 +1518,32 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl, dox: &Option<~str>) {\n             }\n         }\n     }\n+\n+    // If we've implemented a trait, then also emit documentation for all\n+    // default methods which weren't overridden in the implementation block.\n+    match trait_id {\n+        None => {}\n+        Some(id) => {\n+            do local_data::get(cache_key) |cache| {\n+                do cache.unwrap().read |cache| {\n+                    match cache.traits.find(&id) {\n+                        Some(t) => {\n+                            for method in t.methods.iter() {\n+                                let n = method.item().name.clone();\n+                                match i.methods.iter().find(|m| m.name == n) {\n+                                    Some(*) => continue,\n+                                    None => {}\n+                                }\n+\n+                                docmeth(w, method.item());\n+                            }\n+                        }\n+                        None => {}\n+                    }\n+                }\n+            }\n+        }\n+    }\n     write!(w, \"</div>\");\n }\n "}]}