{"sha": "13ac5c349136bc2d86f8eeed2a8ac0253052510f", "node_id": "C_kwDOAAsO6NoAKDEzYWM1YzM0OTEzNmJjMmQ4NmY4ZWVlZDJhOGFjMDI1MzA1MjUxMGY", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-01-23T22:37:59Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-21T06:34:35Z"}, "message": "Fix various IDE features\n\nAs a side benefit, we got `let` guard support for `move_guard` for free.", "tree": {"sha": "66403de18fe2c1f9a323055cf95727663ecabbbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66403de18fe2c1f9a323055cf95727663ecabbbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ac5c349136bc2d86f8eeed2a8ac0253052510f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ac5c349136bc2d86f8eeed2a8ac0253052510f", "html_url": "https://github.com/rust-lang/rust/commit/13ac5c349136bc2d86f8eeed2a8ac0253052510f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ac5c349136bc2d86f8eeed2a8ac0253052510f/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1e324694425e9b683b72be5371a555601ffe6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1e324694425e9b683b72be5371a555601ffe6c", "html_url": "https://github.com/rust-lang/rust/commit/fe1e324694425e9b683b72be5371a555601ffe6c"}], "stats": {"total": 188, "additions": 95, "deletions": 93}, "files": [{"sha": "e33c2565c31e9de443e621387a5958aa97a1107b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -811,10 +811,10 @@ impl ExpandTo {\n             MACRO_TYPE => ExpandTo::Type,\n \n             ARG_LIST | TRY_EXPR | TUPLE_EXPR | PAREN_EXPR | ARRAY_EXPR | FOR_EXPR | PATH_EXPR\n-            | CLOSURE_EXPR | CONDITION | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM\n-            | MATCH_GUARD | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR\n-            | FIELD_EXPR | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | BIN_EXPR => ExpandTo::Expr,\n+            | CLOSURE_EXPR | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM | MATCH_GUARD\n+            | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR\n+            | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR\n+            | LET_EXPR => ExpandTo::Expr,\n             LET_STMT => {\n                 // FIXME: Handle LHS Pattern\n                 ExpandTo::Expr"}, {"sha": "acdd8f50efb8e513eb494cedba666c27a4613e1e", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -55,13 +55,15 @@ fn infer_pattern() {\n             139..140 'g': {unknown}\n             143..144 'e': {unknown}\n             157..204 'if let...     }': ()\n+            160..175 'let [val] = opt': bool\n             164..169 '[val]': [{unknown}]\n             165..168 'val': {unknown}\n             172..175 'opt': [{unknown}]\n             176..204 '{     ...     }': ()\n             190..191 'h': {unknown}\n             194..197 'val': {unknown}\n             210..236 'if let...rue {}': ()\n+            213..233 'let x ... &true': bool\n             217..225 'x @ true': &bool\n             221..225 'true': bool\n             221..225 'true': bool\n@@ -111,36 +113,42 @@ fn infer_literal_pattern() {\n             37..38 'x': &i32\n             46..208 '{     ...) {} }': ()\n             52..75 'if let...y() {}': ()\n+            55..72 'let \"f... any()': bool\n             59..64 '\"foo\"': &str\n             59..64 '\"foo\"': &str\n             67..70 'any': fn any<&str>() -> &str\n             67..72 'any()': &str\n             73..75 '{}': ()\n             80..99 'if let...y() {}': ()\n+            83..96 'let 1 = any()': bool\n             87..88 '1': i32\n             87..88 '1': i32\n             91..94 'any': fn any<i32>() -> i32\n             91..96 'any()': i32\n             97..99 '{}': ()\n             104..126 'if let...y() {}': ()\n+            107..123 'let 1u... any()': bool\n             111..115 '1u32': u32\n             111..115 '1u32': u32\n             118..121 'any': fn any<u32>() -> u32\n             118..123 'any()': u32\n             124..126 '{}': ()\n             131..153 'if let...y() {}': ()\n+            134..150 'let 1f... any()': bool\n             138..142 '1f32': f32\n             138..142 '1f32': f32\n             145..148 'any': fn any<f32>() -> f32\n             145..150 'any()': f32\n             151..153 '{}': ()\n             158..179 'if let...y() {}': ()\n+            161..176 'let 1.0 = any()': bool\n             165..168 '1.0': f64\n             165..168 '1.0': f64\n             171..174 'any': fn any<f64>() -> f64\n             171..176 'any()': f64\n             177..179 '{}': ()\n             184..206 'if let...y() {}': ()\n+            187..203 'let tr... any()': bool\n             191..195 'true': bool\n             191..195 'true': bool\n             198..201 'any': fn any<bool>() -> bool\n@@ -163,10 +171,12 @@ fn infer_range_pattern() {\n             8..9 'x': &i32\n             17..75 '{     ...2 {} }': ()\n             23..45 'if let...u32 {}': ()\n+            26..42 'let 1....= 2u32': bool\n             30..35 '1..76': u32\n             38..42 '2u32': u32\n             43..45 '{}': ()\n             50..73 'if let...u32 {}': ()\n+            53..70 'let 1....= 2u32': bool\n             57..63 '1..=76': u32\n             66..70 '2u32': u32\n             71..73 '{}': ()"}, {"sha": "c11a70fa663b8d1b935b35c775544baf90975dfb", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -2248,6 +2248,7 @@ fn generic_default_in_struct_literal() {\n             176..193 'Thing ...1i32 }': Thing<i32>\n             187..191 '1i32': i32\n             199..240 'if let...     }': ()\n+            202..221 'let Th... } = z': bool\n             206..217 'Thing { t }': Thing<i32>\n             214..215 't': i32\n             220..221 'z': Thing<i32>"}, {"sha": "ce9055c0909fa02d5f1471f76a8a3db684c58aae", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n     algo, ast,\n     display::{fn_as_proc_macro_label, macro_label},\n     match_ast, AstNode, Direction,\n-    SyntaxKind::{CONDITION, LET_STMT},\n+    SyntaxKind::{LET_EXPR, LET_STMT},\n     SyntaxToken, T,\n };\n \n@@ -484,7 +484,7 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n             let let_kw = if ident\n                 .syntax()\n                 .parent()\n-                .map_or(false, |p| p.kind() == LET_STMT || p.kind() == CONDITION)\n+                .map_or(false, |p| p.kind() == LET_STMT || p.kind() == LET_EXPR)\n             {\n                 \"let \"\n             } else {"}, {"sha": "2ca756cbe04460390398d6176555ded76da1939d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -243,7 +243,7 @@ fn is_named_constructor(\n     let expr = match_ast! {\n         match let_node {\n             ast::LetStmt(it) => it.initializer(),\n-            ast::Condition(it) => it.expr(),\n+            ast::LetExpr(it) => it.expr(),\n             _ => None,\n         }\n     }?;\n@@ -372,15 +372,10 @@ fn should_not_display_type_hint(\n             match node {\n                 ast::LetStmt(it) => return it.ty().is_some(),\n                 ast::Param(it) => return it.ty().is_some(),\n-                ast::MatchArm(_it) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::IfExpr(it) => {\n-                    return it.condition().and_then(|condition| condition.pat()).is_some()\n-                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n-                },\n-                ast::WhileExpr(it) => {\n-                    return it.condition().and_then(|condition| condition.pat()).is_some()\n-                        && pat_is_enum_variant(db, bind_pat, pat_ty);\n-                },\n+                ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::IfExpr(_) => return false,\n+                ast::WhileExpr(_) => return false,\n                 ast::ForExpr(it) => {\n                     // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n                     // Type of expr should be iterable."}, {"sha": "0bf2abe493492c5254e3778bb6e31dccfbc2c0e0", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -46,7 +46,6 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n     }\n \n     let cond = expr.condition().filter(|cond| !cond.is_pattern_cond())?;\n-    let cond = cond.expr()?;\n     let then = expr.then_branch()?;\n     let else_ = match expr.else_branch()? {\n         ast::ElseBranch::Block(b) => b,\n@@ -209,7 +208,7 @@ pub(crate) fn convert_bool_then_to_if(acc: &mut Assists, ctx: &AssistContext) ->\n                 _ => receiver,\n             };\n             let if_expr = make::expr_if(\n-                make::condition(cond, None),\n+                cond,\n                 closure_body.reset_indent(),\n                 Some(ast::ElseBranch::Block(make::block_expr(None, Some(none_path)))),\n             )"}, {"sha": "9a80db6a83f73a1edbdaab861c8821a9f3fc0ede", "filename": "crates/ide_assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -48,25 +48,28 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     let cond = if_expr.condition()?;\n \n     // Check if there is an IfLet that we can handle.\n-    let if_let_pat = match cond.pat() {\n-        None => None, // No IfLet, supported.\n-        Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n-            let path = pat.path()?;\n-            if path.qualifier().is_some() {\n-                return None;\n-            }\n+    let (if_let_pat, cond_expr) = if cond.is_pattern_cond() {\n+        let let_ = cond.single_let()?;\n+        match let_.pat() {\n+            Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n+                let path = pat.path()?;\n+                if path.qualifier().is_some() {\n+                    return None;\n+                }\n \n-            let bound_ident = pat.fields().next().unwrap();\n-            if !ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n-                return None;\n-            }\n+                let bound_ident = pat.fields().next().unwrap();\n+                if !ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n+                    return None;\n+                }\n \n-            Some((path, bound_ident))\n+                (Some((path, bound_ident)), let_.expr()?)\n+            }\n+            _ => return None, // Unsupported IfLet.\n         }\n-        Some(_) => return None, // Unsupported IfLet.\n+    } else {\n+        (None, cond)\n     };\n \n-    let cond_expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?;\n     let then_block = then_block.stmt_list()?;\n \n@@ -119,8 +122,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         let then_branch =\n                             make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n                         let cond = invert_boolean_expression(cond_expr);\n-                        make::expr_if(make::condition(cond, None), then_branch, None)\n-                            .indent(if_indent_level)\n+                        make::expr_if(cond, then_branch, None).indent(if_indent_level)\n                     };\n                     new_expr.syntax().clone_for_update()\n                 }"}, {"sha": "30b4daec9d923f03f8e40d97b8f3396d56591447", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -42,7 +42,6 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n     let while_expr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n     let while_body = while_expr.loop_body()?;\n     let while_cond = while_expr.condition()?;\n-    let while_cond_expr = while_cond.expr()?;\n \n     let target = while_expr.syntax().text_range();\n     acc.add(\n@@ -55,19 +54,15 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n             let break_block =\n                 make::block_expr(once(make::expr_stmt(make::expr_break(None)).into()), None)\n                     .indent(while_indent_level);\n-            let block_expr = match while_cond.pat() {\n-                Some(_) => {\n-                    let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n-                    let stmts = once(make::expr_stmt(if_expr).into());\n-                    make::block_expr(stmts, None)\n-                }\n-                None => {\n-                    let if_cond = make::condition(invert_boolean_expression(while_cond_expr), None);\n-                    let if_expr = make::expr_if(if_cond, break_block, None);\n-                    let stmts =\n-                        once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n-                    make::block_expr(stmts, while_body.tail_expr())\n-                }\n+            let block_expr = if while_cond.is_pattern_cond() {\n+                let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n+                let stmts = once(make::expr_stmt(if_expr).into());\n+                make::block_expr(stmts, None)\n+            } else {\n+                let if_cond = invert_boolean_expression(while_cond);\n+                let if_expr = make::expr_if(if_cond, break_block, None);\n+                let stmts = once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n+                make::block_expr(stmts, while_body.tail_expr())\n             };\n \n             let replacement = make::expr_loop(block_expr.indent(while_indent_level));"}, {"sha": "21cfc76ac9bf6036d100c489218ca0deb6c171ca", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -1219,28 +1219,26 @@ impl FlowHandler {\n                 let stmt = make::expr_stmt(action);\n                 let block = make::block_expr(iter::once(stmt.into()), None);\n                 let controlflow_break_path = make::path_from_text(\"ControlFlow::Break\");\n-                let condition = make::condition(\n+                let condition = make::expr_let(\n+                    make::tuple_struct_pat(\n+                        controlflow_break_path,\n+                        iter::once(make::wildcard_pat().into()),\n+                    )\n+                    .into(),\n                     call_expr,\n-                    Some(\n-                        make::tuple_struct_pat(\n-                            controlflow_break_path,\n-                            iter::once(make::wildcard_pat().into()),\n-                        )\n-                        .into(),\n-                    ),\n                 );\n-                make::expr_if(condition, block, None)\n+                make::expr_if(condition.into(), block, None)\n             }\n             FlowHandler::IfOption { action } => {\n                 let path = make::ext::ident_path(\"Some\");\n                 let value_pat = make::ext::simple_ident_pat(make::name(\"value\"));\n                 let pattern = make::tuple_struct_pat(path, iter::once(value_pat.into()));\n-                let cond = make::condition(call_expr, Some(pattern.into()));\n+                let cond = make::expr_let(pattern.into(), call_expr);\n                 let value = make::expr_path(make::ext::ident_path(\"value\"));\n                 let action_expr = action.make_result_handler(Some(value));\n                 let action_stmt = make::expr_stmt(action_expr);\n                 let then = make::block_expr(iter::once(action_stmt.into()), None);\n-                make::expr_if(cond, then, None)\n+                make::expr_if(cond.into(), then, None)\n             }\n             FlowHandler::MatchOption { none } => {\n                 let some_name = \"value\";"}, {"sha": "8f99c4db67bb03f62269d50ce00b02dc32f671a3", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -34,12 +34,12 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n+    let cond = expr.condition()?;\n     // This assist should not apply for if-let.\n-    if expr.condition()?.is_pattern_cond() {\n+    if cond.is_pattern_cond() {\n         return None;\n     }\n \n-    let cond = expr.condition()?.expr()?;\n     let then_node = expr.then_branch()?.syntax().clone();\n     let else_block = match expr.else_branch()? {\n         ast::ElseBranch::Block(it) => it,"}, {"sha": "655494085904816d049610e3b7394cb12c9ac1ea", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -1,8 +1,5 @@\n use syntax::{\n-    ast::{\n-        edit::AstNodeEdit, make, AstNode, BlockExpr, Condition, ElseBranch, Expr, IfExpr, MatchArm,\n-        Pat,\n-    },\n+    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, ElseBranch, Expr, IfExpr, MatchArm, Pat},\n     SyntaxKind::WHITESPACE,\n };\n \n@@ -44,18 +41,11 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     }\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n \n-    // FIXME: support `if let` guards too\n-    if guard.let_token().is_some() {\n-        return None;\n-    }\n-    let guard_condition = guard.expr()?;\n+    let guard_condition = guard.condition()?;\n     let arm_expr = match_arm.expr()?;\n-    let if_expr = make::expr_if(\n-        make::condition(guard_condition, None),\n-        make::block_expr(None, Some(arm_expr.clone())),\n-        None,\n-    )\n-    .indent(arm_expr.indent_level());\n+    let if_expr =\n+        make::expr_if(guard_condition, make::block_expr(None, Some(arm_expr.clone())), None)\n+            .indent(arm_expr.indent_level());\n \n     let target = guard.syntax().text_range();\n     acc.add(\n@@ -193,17 +183,13 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     )\n }\n \n-// Parses an if-else-if chain to get the conditons and the then branches until we encounter an else\n+// Parses an if-else-if chain to get the conditions and the then branches until we encounter an else\n // branch or the end.\n-fn parse_if_chain(if_expr: IfExpr) -> Option<(Vec<(Condition, BlockExpr)>, Option<BlockExpr>)> {\n+fn parse_if_chain(if_expr: IfExpr) -> Option<(Vec<(Expr, BlockExpr)>, Option<BlockExpr>)> {\n     let mut conds_blocks = Vec::new();\n     let mut curr_if = if_expr;\n     let tail = loop {\n         let cond = curr_if.condition()?;\n-        // Not support moving if let to arm guard\n-        if cond.is_pattern_cond() {\n-            return None;\n-        }\n         conds_blocks.push((cond, curr_if.then_branch()?));\n         match curr_if.else_branch() {\n             Some(ElseBranch::IfExpr(e)) => {"}, {"sha": "3be14d7d950858e353b946c833c61424e3db4875", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -60,23 +60,32 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n             None\n         }\n     });\n-    let scrutinee_to_be_expr = if_expr.condition()?.expr()?;\n+    let scrutinee_to_be_expr = if_expr.condition()?;\n+    let scrutinee_to_be_expr = match scrutinee_to_be_expr.single_let() {\n+        Some(cond) => cond.expr()?,\n+        None => scrutinee_to_be_expr,\n+    };\n \n     let mut pat_seen = false;\n     let mut cond_bodies = Vec::new();\n     for if_expr in if_exprs {\n         let cond = if_expr.condition()?;\n-        let expr = cond.expr()?;\n-        let cond = match cond.pat() {\n-            Some(pat) => {\n+        let cond = match cond.single_let() {\n+            Some(let_) => {\n+                let pat = let_.pat()?;\n+                let expr = let_.expr()?;\n+                // FIXME: If one `let` is wrapped in parentheses and the second is not,\n+                // we'll exit here.\n                 if scrutinee_to_be_expr.syntax().text() != expr.syntax().text() {\n                     // Only if all condition expressions are equal we can merge them into a match\n                     return None;\n                 }\n                 pat_seen = true;\n                 Either::Left(pat)\n             }\n-            None => Either::Right(expr),\n+            // Multiple `let`, unsupported.\n+            None if cond.is_pattern_cond() => return None,\n+            None => Either::Right(cond),\n         };\n         let body = if_expr.then_branch()?;\n         cond_bodies.push((cond, body));\n@@ -217,11 +226,11 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext)\n                 }\n             }\n \n-            let condition = make::condition(scrutinee, Some(if_let_pat));\n+            let condition = make::expr_let(if_let_pat, scrutinee);\n             let then_block = make_block_expr(then_expr.reset_indent());\n             let else_expr = if is_empty_expr(&else_expr) { None } else { Some(else_expr) };\n             let if_let_expr = make::expr_if(\n-                condition,\n+                condition.into(),\n                 then_block,\n                 else_expr.map(make_block_expr).map(ast::ElseBranch::Block),\n             )"}, {"sha": "a5fa8a110d31eed11ca4b4f0b9cad6b0a46fc8bc", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n \n             let block =\n                 make::ext::empty_block_expr().indent(IndentLevel::from_node(let_stmt.syntax()));\n-            let if_ = make::expr_if(make::condition(init, Some(pat)), block, None);\n+            let if_ = make::expr_if(make::expr_let(pat, init).into(), block, None);\n             let stmt = make::expr_stmt(if_);\n \n             edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));"}, {"sha": "e986c28b1466e55785b7f8d9287ed150de301243", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -575,6 +575,14 @@ impl<'a> CompletionContext<'a> {\n \n                         (ty, name)\n                     },\n+                    ast::LetExpr(it) => {\n+                        cov_mark::hit!(expected_type_if_let_without_leading_char);\n+                        let ty = it.pat()\n+                            .and_then(|pat| self.sema.type_of_pat(&pat))\n+                            .or_else(|| it.expr().and_then(|it| self.sema.type_of_expr(&it)))\n+                            .map(TypeInfo::original);\n+                        (ty, None)\n+                    },\n                     ast::ArgList(_) => {\n                         cov_mark::hit!(expected_type_fn_param);\n                         ActiveParameter::at_token(\n@@ -641,9 +649,7 @@ impl<'a> CompletionContext<'a> {\n                         (ty, None)\n                     },\n                     ast::IfExpr(it) => {\n-                        cov_mark::hit!(expected_type_if_let_without_leading_char);\n                         let ty = it.condition()\n-                            .and_then(|cond| cond.expr())\n                             .and_then(|e| self.sema.type_of_expr(&e))\n                             .map(TypeInfo::original);\n                         (ty, None)\n@@ -939,7 +945,7 @@ fn pattern_context_for(original_file: &SyntaxNode, pat: ast::Pat) -> PatternCont\n                         return (PatternRefutability::Irrefutable, has_type_ascription)\n                     },\n                     ast::MatchArm(_) => PatternRefutability::Refutable,\n-                    ast::Condition(_) => PatternRefutability::Refutable,\n+                    ast::LetExpr(_) => PatternRefutability::Refutable,\n                     ast::ForExpr(_) => PatternRefutability::Irrefutable,\n                     _ => PatternRefutability::Irrefutable,\n                 }"}, {"sha": "9c6d3775c7f2b9ce30b70601e969bc1b8f313ce5", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ac5c349136bc2d86f8eeed2a8ac0253052510f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=13ac5c349136bc2d86f8eeed2a8ac0253052510f", "patch": "@@ -226,6 +226,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::TryExpr(_)\n         | ast::Expr::TupleExpr(_)\n         | ast::Expr::WhileExpr(_)\n+        | ast::Expr::LetExpr(_)\n         | ast::Expr::YieldExpr(_) => cb(expr),\n     }\n }"}]}