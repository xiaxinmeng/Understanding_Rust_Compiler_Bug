{"sha": "0fc846f979bc20d556cc07177b384094a421c54c", "node_id": "C_kwDOAAsO6NoAKDBmYzg0NmY5NzliYzIwZDU1NmNjMDcxNzdiMzg0MDk0YTQyMWM1NGM", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-11-28T21:22:49Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-29T05:25:06Z"}, "message": "refactor: maintain more AST info when formatting a RHS", "tree": {"sha": "7abab43f468762a065bfab033e3c8cb38d329b32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abab43f468762a065bfab033e3c8cb38d329b32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc846f979bc20d556cc07177b384094a421c54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc846f979bc20d556cc07177b384094a421c54c", "html_url": "https://github.com/rust-lang/rust/commit/0fc846f979bc20d556cc07177b384094a421c54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc846f979bc20d556cc07177b384094a421c54c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21f1b6c2a5734f39a1efe3fa84d6475843d14fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21f1b6c2a5734f39a1efe3fa84d6475843d14fe", "html_url": "https://github.com/rust-lang/rust/commit/a21f1b6c2a5734f39a1efe3fa84d6475843d14fe"}], "stats": {"total": 105, "additions": 86, "deletions": 19}, "files": [{"sha": "5fd86c1a4eadd2172394a0d871da875ff71c8e34", "filename": "src/expr.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0fc846f979bc20d556cc07177b384094a421c54c", "patch": "@@ -196,9 +196,10 @@ pub(crate) fn format_expr(\n                 capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n             )\n         }\n-        ast::ExprKind::Try(..) | ast::ExprKind::Field(..) | ast::ExprKind::MethodCall(..) => {\n-            rewrite_chain(expr, context, shape)\n-        }\n+        ast::ExprKind::Try(..)\n+        | ast::ExprKind::Field(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::MacCall(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -377,7 +378,6 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Underscore => Some(\"_\".to_owned()),\n         ast::ExprKind::Err => None,\n     };\n@@ -829,6 +829,7 @@ impl<'a> ControlFlow<'a> {\n                 &format!(\"{}{}{}\", matcher, pat_string, self.connector),\n                 expr,\n                 cond_shape,\n+                &RhsAssignKind::Expr(&expr.kind, expr.span),\n                 RhsTactics::Default,\n                 comments_span,\n                 true,\n@@ -1839,6 +1840,34 @@ fn rewrite_unary_op(\n     rewrite_unary_prefix(context, ast::UnOp::to_string(op), expr, shape)\n }\n \n+pub(crate) enum RhsAssignKind<'ast> {\n+    Expr(&'ast ast::ExprKind, Span),\n+    Bounds,\n+    Ty,\n+}\n+\n+impl<'ast> RhsAssignKind<'ast> {\n+    // TODO(calebcartwright)\n+    // Preemptive addition for handling RHS with chains, not yet utilized.\n+    // It may make more sense to construct the chain first and then check\n+    // whether there are actually chain elements.\n+    #[allow(dead_code)]\n+    fn is_chain(&self) -> bool {\n+        match self {\n+            RhsAssignKind::Expr(kind, _) => {\n+                matches!(\n+                    kind,\n+                    ast::ExprKind::Try(..)\n+                        | ast::ExprKind::Field(..)\n+                        | ast::ExprKind::MethodCall(..)\n+                        | ast::ExprKind::Await(_)\n+                )\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n fn rewrite_assignment(\n     context: &RewriteContext<'_>,\n     lhs: &ast::Expr,\n@@ -1855,7 +1884,13 @@ fn rewrite_assignment(\n     let lhs_shape = shape.sub_width(operator_str.len() + 1)?;\n     let lhs_str = format!(\"{} {}\", lhs.rewrite(context, lhs_shape)?, operator_str);\n \n-    rewrite_assign_rhs(context, lhs_str, rhs, shape)\n+    rewrite_assign_rhs(\n+        context,\n+        lhs_str,\n+        rhs,\n+        &RhsAssignKind::Expr(&rhs.kind, rhs.span),\n+        shape,\n+    )\n }\n \n /// Controls where to put the rhs.\n@@ -1876,16 +1911,18 @@ pub(crate) fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     context: &RewriteContext<'_>,\n     lhs: S,\n     ex: &R,\n+    rhs_kind: &RhsAssignKind<'_>,\n     shape: Shape,\n ) -> Option<String> {\n-    rewrite_assign_rhs_with(context, lhs, ex, shape, RhsTactics::Default)\n+    rewrite_assign_rhs_with(context, lhs, ex, shape, rhs_kind, RhsTactics::Default)\n }\n \n pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     lhs: &str,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let last_line_width = last_line_width(lhs).saturating_sub(if lhs.contains('\\n') {\n@@ -1910,6 +1947,7 @@ pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n         ex,\n         orig_shape,\n         ex.rewrite(context, orig_shape),\n+        rhs_kind,\n         rhs_tactics,\n         has_rhs_comment,\n     )\n@@ -1920,10 +1958,11 @@ pub(crate) fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n     lhs: S,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let lhs = lhs.into();\n-    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_kind, rhs_tactics)?;\n     Some(lhs + &rhs)\n }\n \n@@ -1932,6 +1971,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n     lhs: S,\n     ex: &R,\n     shape: Shape,\n+    rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n     between_span: Span,\n     allow_extend: bool,\n@@ -1943,7 +1983,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n     } else {\n         shape\n     };\n-    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_kind, rhs_tactics)?;\n \n     if contains_comment {\n         let rhs = rhs.trim_start();\n@@ -1958,6 +1998,7 @@ fn choose_rhs<R: Rewrite>(\n     expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n+    _rhs_kind: &RhsAssignKind<'_>,\n     rhs_tactics: RhsTactics,\n     has_rhs_comment: bool,\n ) -> Option<String> {"}, {"sha": "3fe827ce696d4e863e94c462631cf0dc459fbcb9", "filename": "src/items.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0fc846f979bc20d556cc07177b384094a421c54c", "patch": "@@ -18,7 +18,7 @@ use crate::config::lists::*;\n use crate::config::{BraceStyle, Config, IndentStyle, Version};\n use crate::expr::{\n     is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n-    rewrite_assign_rhs_with_comments, RhsTactics,\n+    rewrite_assign_rhs_with_comments, RhsAssignKind, RhsTactics,\n };\n use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use crate::macros::{rewrite_macro, MacroPosition};\n@@ -116,7 +116,13 @@ impl Rewrite for ast::Local {\n             // 1 = trailing semicolon;\n             let nested_shape = shape.sub_width(1)?;\n \n-            result = rewrite_assign_rhs(context, result, init, nested_shape)?;\n+            result = rewrite_assign_rhs(\n+                context,\n+                result,\n+                init,\n+                &RhsAssignKind::Expr(&init.kind, init.span),\n+                nested_shape,\n+            )?;\n             // todo else\n         }\n \n@@ -564,11 +570,13 @@ impl<'a> FmtVisitor<'a> {\n \n         let variant_body = if let Some(ref expr) = field.disr_expr {\n             let lhs = format!(\"{:1$} =\", variant_body, pad_discrim_ident_to);\n+            let ex = &*expr.value;\n             rewrite_assign_rhs_with(\n                 &context,\n                 lhs,\n-                &*expr.value,\n+                ex,\n                 shape,\n+                &RhsAssignKind::Expr(&ex.kind, ex.span),\n                 RhsTactics::AllowOverflow,\n             )?\n         } else {\n@@ -1033,6 +1041,7 @@ pub(crate) fn format_trait(\n                 result + \":\",\n                 bounds,\n                 shape,\n+                &RhsAssignKind::Bounds,\n                 RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n         }\n@@ -1213,7 +1222,14 @@ pub(crate) fn format_trait_alias(\n         generic_bounds,\n         generics,\n     };\n-    rewrite_assign_rhs(context, lhs, &trait_alias_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n+    rewrite_assign_rhs(\n+        context,\n+        lhs,\n+        &trait_alias_bounds,\n+        &RhsAssignKind::Bounds,\n+        shape.sub_width(1)?,\n+    )\n+    .map(|s| s + \";\")\n }\n \n fn format_unit_struct(\n@@ -1630,7 +1646,7 @@ fn rewrite_ty<R: Rewrite>(\n \n         // 1 = `;`\n         let shape = Shape::indented(indent, context.config).sub_width(1)?;\n-        rewrite_assign_rhs(context, lhs, &*ty, shape).map(|s| s + \";\")\n+        rewrite_assign_rhs(context, lhs, &*ty, &RhsAssignKind::Ty, shape).map(|s| s + \";\")\n     } else {\n         Some(format!(\"{};\", result))\n     }\n@@ -1720,7 +1736,7 @@ pub(crate) fn rewrite_struct_field(\n \n     let is_prefix_empty = prefix.is_empty();\n     // We must use multiline. We are going to put attributes and a field on different lines.\n-    let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, shape)?;\n+    let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, &RhsAssignKind::Ty, shape)?;\n     // Remove a leading white-space from `rewrite_assign_rhs()` when rewriting a tuple struct.\n     let field_str = if is_prefix_empty {\n         field_str.trim_start()\n@@ -1850,6 +1866,7 @@ fn rewrite_static(\n             &lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n+            &RhsAssignKind::Expr(&expr.kind, expr.span),\n             RhsTactics::Default,\n             comments_span,\n             true,\n@@ -3147,7 +3164,14 @@ impl Rewrite for ast::ForeignItem {\n                     rewrite_ident(context, self.ident)\n                 );\n                 // 1 = ;\n-                rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n+                rewrite_assign_rhs(\n+                    context,\n+                    prefix,\n+                    &**ty,\n+                    &RhsAssignKind::Ty,\n+                    shape.sub_width(1)?,\n+                )\n+                .map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n                 let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);"}, {"sha": "a52568be9eac44298a0f3cf40a1ef8b7e576081e", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc846f979bc20d556cc07177b384094a421c54c/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=0fc846f979bc20d556cc07177b384094a421c54c", "patch": "@@ -27,7 +27,7 @@ use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n };\n use crate::config::lists::*;\n-use crate::expr::rewrite_array;\n+use crate::expr::{rewrite_array, rewrite_assign_rhs, RhsAssignKind};\n use crate::lists::{itemize_list, write_list, ListFormatting};\n use crate::overflow;\n use crate::rewrite::{Rewrite, RewriteContext};\n@@ -1468,10 +1468,11 @@ fn format_lazy_static(\n             id,\n             ty.rewrite(context, nested_shape)?\n         ));\n-        result.push_str(&crate::expr::rewrite_assign_rhs(\n+        result.push_str(&rewrite_assign_rhs(\n             context,\n             stmt,\n             &*expr,\n+            &RhsAssignKind::Expr(&expr.kind, expr.span),\n             nested_shape.sub_width(1)?,\n         )?);\n         result.push(';');"}, {"sha": "88f5dc432451010436694b49a355e68fb9f27b98", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fc846f979bc20d556cc07177b384094a421c54c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc846f979bc20d556cc07177b384094a421c54c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0fc846f979bc20d556cc07177b384094a421c54c", "patch": "@@ -10,6 +10,7 @@ use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n+    RhsAssignKind,\n };\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n@@ -430,7 +431,7 @@ impl Rewrite for ast::WherePredicate {\n                     format!(\"{}{}\", type_str, colon)\n                 };\n \n-                rewrite_assign_rhs(context, lhs, bounds, shape)?\n+                rewrite_assign_rhs(context, lhs, bounds, &RhsAssignKind::Bounds, shape)?\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 ref lifetime,\n@@ -443,7 +444,7 @@ impl Rewrite for ast::WherePredicate {\n                 ..\n             }) => {\n                 let lhs_ty_str = lhs_ty.rewrite(context, shape).map(|lhs| lhs + \" =\")?;\n-                rewrite_assign_rhs(context, lhs_ty_str, &**rhs_ty, shape)?\n+                rewrite_assign_rhs(context, lhs_ty_str, &**rhs_ty, &RhsAssignKind::Ty, shape)?\n             }\n         };\n "}]}