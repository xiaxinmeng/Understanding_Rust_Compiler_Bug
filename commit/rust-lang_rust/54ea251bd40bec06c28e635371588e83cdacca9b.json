{"sha": "54ea251bd40bec06c28e635371588e83cdacca9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWEyNTFiZDQwYmVjMDZjMjhlNjM1MzcxNTg4ZTgzY2RhY2NhOWI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-02T16:54:33Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-02T16:54:33Z"}, "message": "Store referece in tokenbuffer", "tree": {"sha": "51d6cef8d75b860ec41a1a4ba712ab0f2103f10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d6cef8d75b860ec41a1a4ba712ab0f2103f10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ea251bd40bec06c28e635371588e83cdacca9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ea251bd40bec06c28e635371588e83cdacca9b", "html_url": "https://github.com/rust-lang/rust/commit/54ea251bd40bec06c28e635371588e83cdacca9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ea251bd40bec06c28e635371588e83cdacca9b/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccec71165bf1f8f79bd2d2a5c05bed55ff3a07a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccec71165bf1f8f79bd2d2a5c05bed55ff3a07a2", "html_url": "https://github.com/rust-lang/rust/commit/ccec71165bf1f8f79bd2d2a5c05bed55ff3a07a2"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "4a6f6aa45f8da27227ecf6645e2f5261c1c359da", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=54ea251bd40bec06c28e635371588e83cdacca9b", "patch": "@@ -10,7 +10,7 @@ struct OffsetTokenSink<'a> {\n }\n \n impl<'a> OffsetTokenSink<'a> {\n-    pub fn collect(&self, begin: Cursor<'a>) -> Vec<tt::TokenTree> {\n+    pub fn collect(&self, begin: Cursor<'a>) -> Vec<&'a tt::TokenTree> {\n         if !self.cursor.is_root() {\n             return vec![];\n         }\n@@ -114,7 +114,7 @@ impl<'a> Parser<'a> {\n             1 => Some(res[0].clone()),\n             _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n                 delimiter: tt::Delimiter::None,\n-                token_trees: res,\n+                token_trees: res.into_iter().cloned().collect(),\n             })),\n         }\n     }"}, {"sha": "0edb6f9a29b83a21bcdddf89b92defe95c37e4c7", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=54ea251bd40bec06c28e635371588e83cdacca9b", "patch": "@@ -49,7 +49,8 @@ fn token_tree_to_syntax_node<F>(tt: &tt::Subtree, f: F) -> Result<TreeArc<Syntax\n where\n     F: Fn(&mut ra_parser::TokenSource, &mut ra_parser::TreeSink),\n {\n-    let buffer = TokenBuffer::new(&[tt.clone().into()]);\n+    let tokens = [tt.clone().into()];\n+    let buffer = TokenBuffer::new(&tokens);\n     let mut token_source = SubtreeTokenSource::new(&buffer);\n     let mut tree_sink = TtTreeSink::new(buffer.begin());\n     f(&mut token_source, &mut tree_sink);\n@@ -385,7 +386,8 @@ mod tests {\n             \"#,\n         );\n         let expansion = expand(&rules, \"literals!(foo);\");\n-        let buffer = tt::buffer::TokenBuffer::new(&[expansion.clone().into()]);\n+        let tts = &[expansion.clone().into()];\n+        let buffer = tt::buffer::TokenBuffer::new(tts);\n         let mut tt_src = SubtreeTokenSource::new(&buffer);\n         let mut tokens = vec![];\n         while tt_src.current().kind != EOF {"}, {"sha": "8bc6390f36e080ae6a9ea0d46f213ab7a3b34d62", "filename": "crates/ra_tt/src/buffer.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54ea251bd40bec06c28e635371588e83cdacca9b/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Fbuffer.rs?ref=54ea251bd40bec06c28e635371588e83cdacca9b", "patch": "@@ -1,4 +1,4 @@\n-use crate::{TokenTree, Subtree, Leaf};\n+use crate::{TokenTree, Subtree};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n struct EntryId(usize);\n@@ -9,10 +9,10 @@ struct EntryPtr(EntryId, usize);\n /// Internal type which is used instead of `TokenTree` to represent a token tree\n /// within a `TokenBuffer`.\n #[derive(Debug)]\n-enum Entry {\n+enum Entry<'t> {\n     // Mimicking types from proc-macro.\n-    Subtree(Subtree, EntryId),\n-    Leaf(Leaf),\n+    Subtree(&'t TokenTree, EntryId),\n+    Leaf(&'t TokenTree),\n     // End entries contain a pointer to the entry from the containing\n     // token tree, or None if this is the outermost level.\n     End(Option<EntryPtr>),\n@@ -21,12 +21,12 @@ enum Entry {\n /// A token tree buffer\n /// The safe version of `syn` [`TokenBuffer`](https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L41)\n #[derive(Debug)]\n-pub struct TokenBuffer {\n-    buffers: Vec<Box<[Entry]>>,\n+pub struct TokenBuffer<'t> {\n+    buffers: Vec<Box<[Entry<'t>]>>,\n }\n \n-impl TokenBuffer {\n-    pub fn new(tokens: &[TokenTree]) -> TokenBuffer {\n+impl<'t> TokenBuffer<'t> {\n+    pub fn new(tokens: &'t [TokenTree]) -> TokenBuffer<'t> {\n         let mut buffers = vec![];\n \n         let idx = TokenBuffer::new_inner(tokens, &mut buffers, None);\n@@ -36,21 +36,21 @@ impl TokenBuffer {\n     }\n \n     fn new_inner(\n-        tokens: &[TokenTree],\n-        buffers: &mut Vec<Box<[Entry]>>,\n+        tokens: &'t [TokenTree],\n+        buffers: &mut Vec<Box<[Entry<'t>]>>,\n         next: Option<EntryPtr>,\n     ) -> usize {\n         let mut entries = vec![];\n         let mut children = vec![];\n \n-        for (idx, tt) in tokens.iter().cloned().enumerate() {\n+        for (idx, tt) in tokens.iter().enumerate() {\n             match tt {\n-                TokenTree::Leaf(leaf) => {\n-                    entries.push(Entry::Leaf(leaf));\n+                TokenTree::Leaf(_) => {\n+                    entries.push(Entry::Leaf(tt));\n                 }\n                 TokenTree::Subtree(subtree) => {\n                     entries.push(Entry::End(None));\n-                    children.push((idx, subtree));\n+                    children.push((idx, (subtree, tt)));\n                 }\n             }\n         }\n@@ -59,13 +59,13 @@ impl TokenBuffer {\n         let res = buffers.len();\n         buffers.push(entries.into_boxed_slice());\n \n-        for (child_idx, subtree) in children {\n+        for (child_idx, (subtree, tt)) in children {\n             let idx = TokenBuffer::new_inner(\n                 &subtree.token_trees,\n                 buffers,\n                 Some(EntryPtr(EntryId(res), child_idx + 1)),\n             );\n-            buffers[res].as_mut()[child_idx] = Entry::Subtree(subtree, EntryId(idx));\n+            buffers[res].as_mut()[child_idx] = Entry::Subtree(tt, EntryId(idx));\n         }\n \n         res\n@@ -86,7 +86,7 @@ impl TokenBuffer {\n /// A safe version of `Cursor` from `syn` crate https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L125\n #[derive(Copy, Clone, Debug)]\n pub struct Cursor<'a> {\n-    buffer: &'a TokenBuffer,\n+    buffer: &'a TokenBuffer<'a>,\n     ptr: EntryPtr,\n }\n \n@@ -113,7 +113,7 @@ impl<'a> Cursor<'a> {\n         match self.entry() {\n             Some(Entry::End(Some(ptr))) => {\n                 let idx = ptr.1;\n-                if let Some(Entry::Subtree(subtree, _)) =\n+                if let Some(Entry::Subtree(TokenTree::Subtree(subtree), _)) =\n                     self.buffer.entry(&EntryPtr(ptr.0, idx - 1))\n                 {\n                     return Some(subtree);\n@@ -125,7 +125,7 @@ impl<'a> Cursor<'a> {\n         }\n     }\n \n-    fn entry(self) -> Option<(&'a Entry)> {\n+    fn entry(self) -> Option<(&'a Entry<'a>)> {\n         self.buffer.entry(&self.ptr)\n     }\n \n@@ -141,10 +141,10 @@ impl<'a> Cursor<'a> {\n     }\n \n     /// If the cursor is pointing at a `TokenTree`, returns it\n-    pub fn token_tree(self) -> Option<(TokenTree)> {\n+    pub fn token_tree(self) -> Option<(&'a TokenTree)> {\n         match self.entry() {\n-            Some(Entry::Leaf(leaf)) => Some(leaf.clone().into()),\n-            Some(Entry::Subtree(subtree, _)) => Some(subtree.clone().into()),\n+            Some(Entry::Leaf(tt)) => Some(tt),\n+            Some(Entry::Subtree(tt, _)) => Some(tt),\n             Some(Entry::End(_)) => None,\n             None => None,\n         }"}]}