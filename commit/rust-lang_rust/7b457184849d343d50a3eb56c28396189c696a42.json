{"sha": "7b457184849d343d50a3eb56c28396189c696a42", "node_id": "C_kwDOAAsO6NoAKDdiNDU3MTg0ODQ5ZDM0M2Q1MGEzZWI1NmMyODM5NjE4OWM2OTZhNDI", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-08-13T15:13:20Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-08-17T09:25:52Z"}, "message": "pass when where clause found", "tree": {"sha": "598c5601bc0b99a23e2f6c2b91527b77f644148e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598c5601bc0b99a23e2f6c2b91527b77f644148e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b457184849d343d50a3eb56c28396189c696a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b457184849d343d50a3eb56c28396189c696a42", "html_url": "https://github.com/rust-lang/rust/commit/7b457184849d343d50a3eb56c28396189c696a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b457184849d343d50a3eb56c28396189c696a42/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 231, "additions": 229, "deletions": 2}, "files": [{"sha": "adcf8ff946d511e806169df710541af65d228365", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -3,7 +3,6 @@\n // substitutions.\n \n use crate::check::FnCtxt;\n-\n use hir::def_id::LocalDefId;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n@@ -16,6 +15,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -192,6 +192,27 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n+    // (ouz-a 1005988): Normally `[T] : std::ops::Index<usize>` should be normalized\n+    // into [T] but currently `Where` clause stops the normalization process for it,\n+    // here we compare types of expr and base in a code without `Where` clause they would be equal\n+    // if they are not we don't modify the expr, hence we bypass the ICE\n+    fn is_builtin_index(\n+        &mut self,\n+        typeck_results: &TypeckResults<'tcx>,\n+        e: &hir::Expr<'_>,\n+        base_ty: Ty<'tcx>,\n+        index_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let Some(elem_ty) = base_ty.builtin_index() {\n+            let Some(exp_ty) = typeck_results.expr_ty_opt(e) else {return false;};\n+            let resolved_exp_ty = self.resolve(exp_ty, &e.span);\n+\n+            elem_ty == resolved_exp_ty && index_ty == self.fcx.tcx.types.usize\n+        } else {\n+            false\n+        }\n+    }\n+\n     // Similar to operators, indexing is always assumed to be overloaded\n     // Here, correct cases where an indexing expression can be simplified\n     // to use builtin indexing because the index type is known to be\n@@ -222,8 +243,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     )\n                 });\n                 let index_ty = self.fcx.resolve_vars_if_possible(index_ty);\n+                let resolved_base_ty = self.resolve(*base_ty, &base.span);\n \n-                if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {\n+                if self.is_builtin_index(&typeck_results, e, resolved_base_ty, index_ty) {\n                     // Remove the method call record\n                     typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n                     typeck_results.node_substs_mut().remove(e.hir_id);"}, {"sha": "8f66019857fbb5284f6bd92fb014e64d24bbadcf", "filename": "src/test/mir-opt/issue-91633.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-91633.rs?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -Z mir-opt-level=0\n+// EMIT_MIR issue_91633.hey.mir_map.0.mir\n+fn hey<T> (it: &[T])\n+ where\n+     [T] : std::ops::Index<usize>,\n+ {\n+     let _ = &it[0];\n+ }\n+\n+// EMIT_MIR issue_91633.bar.mir_map.0.mir\n+fn bar<T> (it: Box<[T]>)\n+ where\n+     [T] : std::ops::Index<usize>,\n+ {\n+     let _ = it[0];\n+ }\n+\n+// EMIT_MIR issue_91633.fun.mir_map.0.mir\n+fn fun<T> (it: &[T]) -> &T\n+ {\n+     let f = &it[0];\n+     f\n+ }\n+\n+// EMIT_MIR issue_91633.foo.mir_map.0.mir\n+fn foo<T: Clone> (it: Box<[T]>) -> T\n+ {\n+     let f = it[0].clone();\n+     f\n+ }\n+ fn main(){}"}, {"sha": "f5092d2ac923861af86d4be1775e88bcd818896c", "filename": "src/test/mir-opt/issue_91633.bar.mir_map.0.mir", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,39 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: Box<[T]>) -> () {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+    let mut _3: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+        _2 = <[T] as Index<usize>>::index(move _3, const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:15:14: 15:19\n+                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:18: +4:19\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n+        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n+        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+    }\n+\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+    }\n+}"}, {"sha": "2e8b0feedd3f9f9790af0a5cd8e9b9c659a6d2b5", "filename": "src/test/mir-opt/issue_91633.foo.mir_map.0.mir", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,57 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: Box<[T]>) -> T {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:19: +0:21\n+    let mut _0: T;                       // return place in scope 0 at $DIR/issue-91633.rs:+0:36: +0:37\n+    let _2: T;                           // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+    let mut _3: &T;                      // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+    let _4: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+    let mut _5: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    let mut _6: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    scope 1 {\n+        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+        _4 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+        _5 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+        _6 = Lt(_4, _5);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    }\n+\n+    bb1: {\n+        _3 = &(*_1)[_4];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:28:20: 28:25\n+                                         // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:26: +2:27\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:27: +2:28\n+        _0 = move _2;                    // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n+        drop(_2) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb3: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        drop(_1) -> [return: bb4, unwind: bb6]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_1) -> bb6;                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+    }\n+}"}, {"sha": "ded9a4cf7e3f90ec2af19031bdbf2d119f241422", "filename": "src/test/mir-opt/issue_91633.fun.mir_map.0.mir", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,35 @@\n+// MIR for `fun` 0 mir_map\n+\n+fn fun(_1: &[T]) -> &T {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: &T;                      // return place in scope 0 at $DIR/issue-91633.rs:+0:25: +0:27\n+    let _2: &T;                          // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+    let _3: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    let mut _5: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    scope 1 {\n+        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+        _3 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+        _4 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+        _5 = Lt(_3, _4);                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    }\n+\n+    bb1: {\n+        _2 = &(*_1)[_3];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:20\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        _0 = &(*_2);                     // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+    }\n+}"}, {"sha": "74f4a5a976116b38615102590ff87ce507c3c05e", "filename": "src/test/mir-opt/issue_91633.hey.mir_map.0.mir", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,35 @@\n+// MIR for `hey` 0 mir_map\n+\n+fn hey(_1: &[T]) -> () {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+    let _3: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+    let mut _4: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+        _4 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+        _3 = <[T] as Index<usize>>::index(move _4, const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:7:15: 7:20\n+                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n+        _2 = &(*_3);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:20: +4:21\n+        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+    }\n+}"}, {"sha": "331a798dd7a36260ec617103700bc34425d1cdd2", "filename": "src/test/ui/typeck/issue-91633.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b457184849d343d50a3eb56c28396189c696a42/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs?ref=7b457184849d343d50a3eb56c28396189c696a42", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+fn f<T> (it: &[T])\n+where\n+    [T] : std::ops::Index<usize>,\n+{\n+    let _ = &it[0];\n+}\n+fn main(){}"}]}