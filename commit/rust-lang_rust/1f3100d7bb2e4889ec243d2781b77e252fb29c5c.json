{"sha": "1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMzEwMGQ3YmIyZTQ4ODllYzI0M2QyNzgxYjc3ZTI1MmZiMjljNWM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-26T19:04:13Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-26T19:04:52Z"}, "message": "Make string lit formatting fallible\n\nThis allows expressions containing string lits to wrap their content\n\nFixes #1282", "tree": {"sha": "15a95ed826488c4e36e904b3fecf66b5abe0c950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a95ed826488c4e36e904b3fecf66b5abe0c950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "html_url": "https://github.com/rust-lang/rust/commit/1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309fb37f23f1ca0f73d5b3a86b7522ae06f95bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/309fb37f23f1ca0f73d5b3a86b7522ae06f95bc4", "html_url": "https://github.com/rust-lang/rust/commit/309fb37f23f1ca0f73d5b3a86b7522ae06f95bc4"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "435155de28fc8524f56c8baf04fecde9d2c38d84", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "patch": "@@ -64,7 +64,7 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::Lit(ref l) => {\n             match l.node {\n                 ast::LitKind::Str(_, ast::StrStyle::Cooked) => {\n-                    Some(rewrite_string_lit(context, l.span, width, offset))\n+                    rewrite_string_lit(context, l.span, width, offset)\n                 }\n                 _ => {\n                     wrap_str(context.snippet(expr.span),\n@@ -586,6 +586,7 @@ fn and_one_line(x: Option<String>) -> Option<String> {\n }\n \n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n+    debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n     block_str.map(|block_str| if block_str.starts_with('{') && budget >= 2 &&\n                                  (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() ==\n                                   block_str.len() - 2) {\n@@ -1219,6 +1220,7 @@ fn arm_comma(config: &Config, arm: &ast::Arm, body: &ast::Expr) -> &'static str\n // Match arms.\n impl Rewrite for ast::Arm {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        debug!(\"Arm::rewrite {:?} {} {:?}\", self, width, offset);\n         let &ast::Arm { ref attrs, ref pats, ref guard, ref body } = self;\n \n         // FIXME this is all a bit grotty, would be nice to abstract out the\n@@ -1310,13 +1312,14 @@ impl Rewrite for ast::Arm {\n                 false\n             };\n \n-            let block_sep = match context.config.control_brace_style {\n-                ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n-                _ => \" \",\n-            };\n             match rewrite {\n                 Some(ref body_str) if !body_str.contains('\\n') || !context.config.wrap_match_arms ||\n                                       is_block => {\n+                    let block_sep = match context.config.control_brace_style {\n+                        ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n+                        _ => \" \",\n+                    };\n+\n                     return Some(format!(\"{}{} =>{}{}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n@@ -1477,16 +1480,16 @@ fn rewrite_string_lit(context: &RewriteContext,\n                       span: Span,\n                       width: usize,\n                       offset: Indent)\n-                      -> String {\n+                      -> Option<String> {\n     let string_lit = context.snippet(span);\n \n     if !context.config.format_strings && !context.config.force_format_strings {\n-        return string_lit;\n+        return Some(string_lit);\n     }\n \n     if !context.config.force_format_strings &&\n        !string_requires_rewrite(context, span, &string_lit, width, offset) {\n-        return string_lit;\n+        return Some(string_lit);\n     }\n \n     let fmt = StringFormat {\n@@ -1503,7 +1506,7 @@ fn rewrite_string_lit(context: &RewriteContext,\n     // Remove the quote characters.\n     let str_lit = &string_lit[1..string_lit.len() - 1];\n \n-    rewrite_string(str_lit, &fmt).unwrap_or_else(|| string_lit.to_owned())\n+    rewrite_string(str_lit, &fmt)\n }\n \n fn string_requires_rewrite(context: &RewriteContext,"}, {"sha": "59547cbe62f9e9ffc7f129f1ce4a74a1a838236b", "filename": "tests/source/string-lit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Fsource%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Fsource%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstring-lit.rs?ref=1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "patch": "@@ -45,3 +45,13 @@ fn issue716() {\n     println!(\"forall x. mult(e(), x) = x /\\\\\n               forall x. mult(x, x) = e()\");\n }\n+\n+fn issue_1282() {\n+    {\n+        match foo {\n+            Permission::AndroidPermissionAccessLocationExtraCommands => {\n+                \"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"\n+            }\n+        }\n+    }\n+}"}, {"sha": "4fba80e1c5161ca9c80daab258aa5938b6fee153", "filename": "tests/target/string-lit.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Ftarget%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Ftarget%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit.rs?ref=1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "patch": "@@ -10,8 +10,10 @@ fn main() -> &'static str {\n     let too_many_lines = \"Hello\";\n \n     // Make sure we don't break after an escape character.\n-    let odd_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n-    let even_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n+    let odd_length_name =\n+        \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n+    let even_length_name =\n+        \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n \n     let really_long_variable_name = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n \n@@ -22,7 +24,8 @@ formatting\"#;\n \n     filename.replace(\" \", \"\\\\\");\n \n-    let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = funktion(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\");\n+    let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =\n+        funktion(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\");\n \n     let unicode = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n     let unicode2 = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n@@ -41,3 +44,13 @@ fn issue716() {\n     println!(\"forall x. mult(e(), x) = x /\\\\\n               forall x. mult(x, x) = e()\");\n }\n+\n+fn issue_1282() {\n+    {\n+        match foo {\n+            Permission::AndroidPermissionAccessLocationExtraCommands => {\n+                \"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"\n+            }\n+        }\n+    }\n+}"}, {"sha": "ba5a478a5e74c42b234334aa73fa79a9cf0f70b7", "filename": "tests/target/string_punctuation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Ftarget%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3100d7bb2e4889ec243d2781b77e252fb29c5c/tests%2Ftarget%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring_punctuation.rs?ref=1f3100d7bb2e4889ec243d2781b77e252fb29c5c", "patch": "@@ -1,12 +1,7 @@\n fn main() {\n     println!(\"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:\\\n               Likethisssssssssssss\");\n-    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColonsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",\n-            x,\n-            y,\n-            z,\n-            a,\n-            b);\n+    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColonsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",x,y,z,a,b);\n     println!(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaalhijalfhiigjapdighjapdigjapdighdapighapdighpaidhg;\\\n               adopgihadoguaadbadgad,qeoihapethae8t0aet8haetadbjtaeg;\\\n               ooeouthaoeutgadlgajduabgoiuadogabudogubaodugbadgadgadga;adoughaoeugbaouea\");"}]}