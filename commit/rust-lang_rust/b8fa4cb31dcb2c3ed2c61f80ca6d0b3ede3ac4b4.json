{"sha": "b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZmE0Y2IzMWRjYjJjM2VkMmM2MWY4MGNhNmQwYjNlZGUzYWM0YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T02:58:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T02:58:40Z"}, "message": "Auto merge of #60464 - eddyb:not-overly-specific-pipelining, r=alexcrichton\n\nrustc: rename -Z emit-directives to -Z emit-artifact-notifications and simplify the output.\n\nThis is my take on #60006 / #60419 (see https://github.com/rust-lang/rust/pull/60006#discussion_r275983732).\nI'm not too attached the \"notifications\" part, it's pretty much bikeshed material.\n**EDIT**: for \"artifact\", @matklad pointed out Cargo already uses it (in https://github.com/rust-lang/rust/pull/60464#issuecomment-488576998)\n\nThe first two commits are fixes that could be landed independently, especially the `compiletest` one, which removes the need for any of the normalization added in #60006 to land the test.\n\nThe last commit enables the emission for all outputs, which was my main suggestion for #60006, mostly to show that it's minimal and not really a \"scope creep\" (as suggested in https://github.com/rust-lang/rust/pull/60006#discussion_r279964081).\n\ncc @alexcrichton @nnethercote", "tree": {"sha": "3808d1c7a929294cc849168d178874350bddd252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3808d1c7a929294cc849168d178874350bddd252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "html_url": "https://github.com/rust-lang/rust/commit/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeedd3a6e15d43d0cd3e860f36be737cb2c941ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca", "html_url": "https://github.com/rust-lang/rust/commit/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca"}, {"sha": "c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "html_url": "https://github.com/rust-lang/rust/commit/c89a13179ea1d8431868508d79d57ab3c6ce0ac7"}], "stats": {"total": 161, "additions": 87, "deletions": 74}, "files": [{"sha": "12427daa38381d2baea1549380f2458bd9589754", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -1462,8 +1462,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n-    emit_directives: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit build directives if producing JSON output\"),\n+    emit_artifact_notifications: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit notifications after each artifact has been output (only in the JSON format)\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "d5a56f6a09e02c8c5f6db44636b19b6deeeaa84e", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -95,6 +95,9 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                     );\n                 }\n             }\n+            if sess.opts.debugging_opts.emit_artifact_notifications {\n+                sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename);\n+            }\n         }\n \n         if sess.opts.cg.save_temps {"}, {"sha": "59cbd65f05c68a4a936192e58d49da99ecd4f09a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -16,6 +16,7 @@ use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n+use std::path::Path;\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n \n@@ -52,9 +53,10 @@ pub trait Emitter {\n     /// Emit a structured diagnostic.\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>);\n \n-    /// Emit a JSON directive. The default is to do nothing; this should only\n-    /// be emitted with --error-format=json.\n-    fn maybe_emit_json_directive(&mut self, _directive: String) {}\n+    /// Emit a notification that an artifact has been output.\n+    /// This is currently only supported for the JSON format,\n+    /// other formats can, and will, simply ignore it.\n+    fn emit_artifact_notification(&mut self, _path: &Path) {}\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {"}, {"sha": "3aa87fad0717416fcf9993cdb80ab0561e86b19a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -26,6 +26,7 @@ use std::borrow::Cow;\n use std::cell::Cell;\n use std::{error, fmt};\n use std::panic;\n+use std::path::Path;\n \n use termcolor::{ColorSpec, Color};\n \n@@ -294,16 +295,9 @@ impl error::Error for ExplicitBug {\n pub use diagnostic::{Diagnostic, SubDiagnostic, DiagnosticStyledString, DiagnosticId};\n pub use diagnostic_builder::DiagnosticBuilder;\n \n-/// A handler deals with two kinds of compiler output.\n-/// - Errors: certain errors (fatal, bug, unimpl) may cause immediate exit,\n-///   others log errors for later reporting.\n-/// - Directives: with --error-format=json, the compiler produces directives\n-///   that indicate when certain actions have completed, which are useful for\n-///   Cargo. They may change at any time and should not be considered a public\n-///   API.\n-///\n-/// This crate's name (rustc_errors) doesn't encompass the directives, because\n-/// directives were added much later.\n+/// A handler deals with errors and other compiler output.\n+/// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n+/// others log errors for later reporting.\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n@@ -775,8 +769,8 @@ impl Handler {\n         }\n     }\n \n-    pub fn maybe_emit_json_directive(&self, directive: String) {\n-        self.emitter.borrow_mut().maybe_emit_json_directive(directive);\n+    pub fn emit_artifact_notification(&self, path: &Path) {\n+        self.emitter.borrow_mut().emit_artifact_notification(path);\n     }\n }\n "}, {"sha": "54b3e7342056041c98664df29de120d0fc6b1dff", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -1048,14 +1048,11 @@ fn encode_and_write_metadata<'tcx>(\n                 tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err))\n             });\n         let metadata_filename = emit_metadata(tcx.sess, &metadata, &metadata_tmpdir);\n-        match std::fs::rename(&metadata_filename, &out_filename) {\n-            Ok(_) => {\n-                if tcx.sess.opts.debugging_opts.emit_directives {\n-                    tcx.sess.parse_sess.span_diagnostic.maybe_emit_json_directive(\n-                        format!(\"metadata file written: {}\", out_filename.display()));\n-                }\n-            }\n-            Err(e) => tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e)),\n+        if let Err(e) = fs::rename(&metadata_filename, &out_filename) {\n+            tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+        }\n+        if tcx.sess.opts.debugging_opts.emit_artifact_notifications {\n+            tcx.sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename);\n         }\n     }\n "}, {"sha": "36a1628014ddb6b47bb1cf116e52c8529cb09eac", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -764,12 +764,18 @@ macro_rules! tuple {\n \n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n-impl Encodable for path::PathBuf {\n+impl Encodable for path::Path {\n     fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {\n         self.to_str().unwrap().encode(e)\n     }\n }\n \n+impl Encodable for path::PathBuf {\n+    fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {\n+        path::Path::encode(self, e)\n+    }\n+}\n+\n impl Decodable for path::PathBuf {\n     fn decode<D: Decoder>(d: &mut D) -> Result<path::PathBuf, D::Error> {\n         let bytes: String = Decodable::decode(d)?;"}, {"sha": "2dd2ecb749300ec19853d138e18710a9f919663c", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -19,6 +19,7 @@ use errors::emitter::{Emitter, HumanReadableErrorType};\n use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n use rustc_data_structures::sync::{self, Lrc};\n use std::io::{self, Write};\n+use std::path::Path;\n use std::vec;\n use std::sync::{Arc, Mutex};\n \n@@ -91,15 +92,15 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn maybe_emit_json_directive(&mut self, directive: String) {\n-        let data = Directive { directive };\n+    fn emit_artifact_notification(&mut self, path: &Path) {\n+        let data = ArtifactNotification { artifact: path };\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n             writeln!(&mut self.dst, \"{}\", as_json(&data))\n         };\n         if let Err(e) = result {\n-            panic!(\"failed to print message: {:?}\", e);\n+            panic!(\"failed to print notification: {:?}\", e);\n         }\n     }\n }\n@@ -181,9 +182,9 @@ struct DiagnosticCode {\n }\n \n #[derive(RustcEncodable)]\n-struct Directive {\n-    /// The directive itself.\n-    directive: String,\n+struct ArtifactNotification<'a> {\n+    /// The path of the artifact.\n+    artifact: &'a Path,\n }\n \n impl Diagnostic {"}, {"sha": "e45ce65d8bb3522222212dd41a3587bb337de1a1", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -1,5 +1,3 @@\n-warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n-\n error: any use of this value will cause an error\n   --> $DIR/unused-broken-const.rs:5:18\n    |"}, {"sha": "347d9aeac2307934edfa68d619a7157452aa78c0", "filename": "src/test/ui/emit-artifact-notifications.nll.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\"}"}, {"sha": "c2c930c8b1bae39c98bae1b500c6d66515929193", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags:--emit=metadata --error-format=json -Z emit-artifact-notifications\n+// compile-pass\n+\n+// A very basic test for the emission of artifact notifications in JSON output.\n+\n+fn main() {}"}, {"sha": "56c977181ff515a8a97bd7f56a22fdee4bd1eb96", "filename": "src/test/ui/emit-artifact-notifications.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications/libemit_artifact_notifications.rmeta\"}"}, {"sha": "088280e358ae7b624585007fcf2fe77072615272", "filename": "src/test/ui/emit-directives.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca/src%2Ftest%2Fui%2Femit-directives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca/src%2Ftest%2Fui%2Femit-directives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.rs?ref=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca", "patch": "@@ -1,12 +0,0 @@\n-// ignore-tidy-linelength\n-// compile-flags:--emit=metadata --error-format=json -Z emit-directives\n-// compile-pass\n-//\n-// Normalization is required to eliminated minor path and filename differences\n-// across platforms.\n-// normalize-stderr-test: \"metadata file written: .*/emit-directives\" -> \"metadata file written: .../emit-directives\"\n-// normalize-stderr-test: \"emit-directives(\\.\\w*)?/a(\\.\\w*)?\" -> \"emit-directives/a\"\n-\n-// A very basic test for the emission of build directives in JSON output.\n-\n-fn main() {}"}, {"sha": "b8a4b96f4bf25b611eb637d1f522ae837347d029", "filename": "src/test/ui/emit-directives.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca/src%2Ftest%2Fui%2Femit-directives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eeedd3a6e15d43d0cd3e860f36be737cb2c941ca/src%2Ftest%2Fui%2Femit-directives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.stderr?ref=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca", "patch": "@@ -1 +0,0 @@\n-{\"directive\":\"metadata file written: .../emit-directives/a\"}"}, {"sha": "3e9f612a2afee3af146ae55bf3b239d65390b53f", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n \n+// FIXME(eddyb) shorten the name so windows doesn't choke on it.\n+#![crate_name = \"trait_test\"]\n+\n // Regression test related to #56288. Check that a supertrait projection (of\n // `Output`) that references `Self` is ok if there is another occurence of\n // the same supertrait that specifies the projection explicitly, even if"}, {"sha": "d651b9a92b64992e3d7be575c4b20450c68be4d6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -4,7 +4,7 @@\n use crate::errors::{Error, ErrorKind};\n use crate::runtest::ProcRes;\n use serde_json;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n #[derive(Deserialize)]\n@@ -18,9 +18,9 @@ struct Diagnostic {\n }\n \n #[derive(Deserialize)]\n-struct Directive {\n+struct ArtifactNotification {\n     #[allow(dead_code)]\n-    directive: String,\n+    artifact: PathBuf,\n }\n \n #[derive(Deserialize, Clone)]\n@@ -75,8 +75,8 @@ pub fn extract_rendered(output: &str) -> String {\n             if line.starts_with('{') {\n                 if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n                     diagnostic.rendered\n-                } else if let Ok(_directive) = serde_json::from_str::<Directive>(line) {\n-                    // Swallow the directive.\n+                } else if let Ok(_) = serde_json::from_str::<ArtifactNotification>(line) {\n+                    // Ignore the notification.\n                     None\n                 } else {\n                     print!("}, {"sha": "0e4946736fb7c61a1b8b6ebcfae6ea5db8b88ddc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b8fa4cb31dcb2c3ed2c61f80ca6d0b3ede3ac4b4", "patch": "@@ -1422,10 +1422,21 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn compile_test(&self) -> ProcRes {\n-        let mut rustc = self.make_compile_args(\n-            &self.testpaths.file,\n-            TargetLocation::ThisFile(self.make_exe_name()),\n-        );\n+        // Only use `make_exe_name` when the test ends up being executed.\n+        let will_execute = match self.config.mode {\n+            RunPass | Ui => self.should_run_successfully(),\n+            Incremental => self.revision.unwrap().starts_with(\"r\"),\n+            RunFail | RunPassValgrind | MirOpt |\n+            DebugInfoBoth | DebugInfoGdb | DebugInfoLldb => true,\n+            _ => false,\n+        };\n+        let output_file = if will_execute {\n+            TargetLocation::ThisFile(self.make_exe_name())\n+        } else {\n+            TargetLocation::ThisDirectory(self.output_base_dir())\n+        };\n+\n+        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file);\n \n         rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n \n@@ -1882,7 +1893,12 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-o\").arg(path);\n             }\n             TargetLocation::ThisDirectory(path) => {\n-                rustc.arg(\"--out-dir\").arg(path);\n+                if is_rustdoc {\n+                    // `rustdoc` uses `-o` for the output directory.\n+                    rustc.arg(\"-o\").arg(path);\n+                } else {\n+                    rustc.arg(\"--out-dir\").arg(path);\n+                }\n             }\n         }\n \n@@ -3138,42 +3154,40 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n-        let parent_dir = self.testpaths.file.parent().unwrap();\n         let cflags = self.props.compile_flags.join(\" \");\n         let json = cflags.contains(\"--error-format json\")\n             || cflags.contains(\"--error-format pretty-json\")\n             || cflags.contains(\"--error-format=json\")\n             || cflags.contains(\"--error-format=pretty-json\");\n-        let parent_dir_str = if json {\n-            parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n-        } else {\n-            parent_dir.display().to_string()\n+\n+        let mut normalized = output.to_string();\n+\n+        let mut normalize_path = |from: &Path, to: &str| {\n+            let mut from = from.display().to_string();\n+            if json {\n+                from = from.replace(\"\\\\\", \"\\\\\\\\\");\n+            }\n+            normalized = normalized.replace(&from, to);\n         };\n \n-        let mut normalized = output.replace(&parent_dir_str, \"$DIR\");\n+        let parent_dir = self.testpaths.file.parent().unwrap();\n+        normalize_path(parent_dir, \"$DIR\");\n \n         // Paths into the libstd/libcore\n         let src_dir = self.config.src_base.parent().unwrap().parent().unwrap();\n-        let src_dir_str = if json {\n-            src_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n-        } else {\n-            src_dir.display().to_string()\n-        };\n-        normalized = normalized.replace(&src_dir_str, \"$SRC_DIR\");\n+        normalize_path(src_dir, \"$SRC_DIR\");\n \n         // Paths into the build directory\n         let test_build_dir = &self.config.build_base;\n         let parent_build_dir = test_build_dir.parent().unwrap().parent().unwrap().parent().unwrap();\n \n         // eg. /home/user/rust/build/x86_64-unknown-linux-gnu/test/ui\n-        normalized = normalized.replace(test_build_dir.to_str().unwrap(), \"$TEST_BUILD_DIR\");\n+        normalize_path(test_build_dir, \"$TEST_BUILD_DIR\");\n         // eg. /home/user/rust/build\n-        normalized = normalized.replace(&parent_build_dir.to_str().unwrap(), \"$BUILD_DIR\");\n+        normalize_path(parent_build_dir, \"$BUILD_DIR\");\n \n         // Paths into lib directory.\n-        let mut lib_dir = parent_build_dir.parent().unwrap().to_path_buf();\n-        lib_dir.push(\"lib\");\n-        normalized = normalized.replace(&lib_dir.to_str().unwrap(), \"$LIB_DIR\");\n+        normalize_path(&parent_build_dir.parent().unwrap().join(\"lib\"), \"$LIB_DIR\");\n \n         if json {\n             // escaped newlines in json strings should be readable"}]}