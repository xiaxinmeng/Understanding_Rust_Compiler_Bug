{"sha": "8838cd10f2374ed51c4b219c1f070d0c29af3b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzhjZDEwZjIzNzRlZDUxYzRiMjE5YzFmMDcwZDBjMjlhZjNiODY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-21T18:32:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-21T18:32:44Z"}, "message": "Move parse_remaining_bounds into a separate function", "tree": {"sha": "a316d56ac0e655f92283a0265a6fa72388a714f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a316d56ac0e655f92283a0265a6fa72388a714f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8838cd10f2374ed51c4b219c1f070d0c29af3b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8838cd10f2374ed51c4b219c1f070d0c29af3b86", "html_url": "https://github.com/rust-lang/rust/commit/8838cd10f2374ed51c4b219c1f070d0c29af3b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8838cd10f2374ed51c4b219c1f070d0c29af3b86/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e75def7dba6ee28660b8479f0ede72986c299f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e75def7dba6ee28660b8479f0ede72986c299f7", "html_url": "https://github.com/rust-lang/rust/commit/6e75def7dba6ee28660b8479f0ede72986c299f7"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "1baf0d1b54ce1f7530dd6ab9736134be4661c80d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8838cd10f2374ed51c4b219c1f070d0c29af3b86/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8838cd10f2374ed51c4b219c1f070d0c29af3b86/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8838cd10f2374ed51c4b219c1f070d0c29af3b86", "patch": "@@ -1365,18 +1365,15 @@ impl<'a> Parser<'a> {\n                 match ty.node {\n                     // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n                     TyKind::Path(None, ref path) if maybe_bounds => {\n-                        self.bump(); // `+`\n-                        let pt = PolyTraitRef::new(Vec::new(), path.clone(), lo.to(self.prev_span));\n-                        let mut bounds = vec![TraitTyParamBound(pt, TraitBoundModifier::None)];\n-                        bounds.append(&mut self.parse_ty_param_bounds()?);\n-                        TyKind::TraitObject(bounds)\n+                        self.parse_remaining_bounds(Vec::new(), path.clone(), lo, true)?\n                     }\n                     TyKind::TraitObject(ref bounds)\n                             if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n-                        self.bump(); // `+`\n-                        let mut bounds = bounds.clone();\n-                        bounds.append(&mut self.parse_ty_param_bounds()?);\n-                        TyKind::TraitObject(bounds)\n+                        let path = match bounds[0] {\n+                            TraitTyParamBound(ref pt, ..) => pt.trait_ref.path.clone(),\n+                            _ => self.bug(\"unexpected lifetime bound\"),\n+                        };\n+                        self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n                     }\n                     // `(TYPE)`\n                     _ => TyKind::Paren(P(ty))\n@@ -1429,11 +1426,8 @@ impl<'a> Parser<'a> {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`\n                 //   `Trait1 + Trait2 + 'a`\n-                if allow_plus && self.eat(&token::BinOp(token::Plus)) {\n-                    let poly_trait = PolyTraitRef::new(Vec::new(), path, lo.to(self.prev_span));\n-                    let mut bounds = vec![TraitTyParamBound(poly_trait, TraitBoundModifier::None)];\n-                    bounds.append(&mut self.parse_ty_param_bounds()?);\n-                    TyKind::TraitObject(bounds)\n+                if allow_plus && self.check(&token::BinOp(token::Plus)) {\n+                    self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n                 } else {\n                     TyKind::Path(None, path)\n                 }\n@@ -1451,12 +1445,8 @@ impl<'a> Parser<'a> {\n                 self.parse_ty_bare_fn(lifetime_defs)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n-                let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-                let mut bounds = vec![TraitTyParamBound(poly_trait, TraitBoundModifier::None)];\n-                if allow_plus && self.eat(&token::BinOp(token::Plus)) {\n-                    bounds.append(&mut self.parse_ty_param_bounds()?)\n-                }\n-                TyKind::TraitObject(bounds)\n+                let parse_plus = allow_plus && self.check(&token::BinOp(token::Plus));\n+                self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n             // FIXME: figure out priority of `+` in `impl Trait1 + Trait2` (#34511).\n@@ -1479,6 +1469,17 @@ impl<'a> Parser<'a> {\n         Ok(P(ty))\n     }\n \n+    fn parse_remaining_bounds(&mut self, lifetime_defs: Vec<LifetimeDef>, path: ast::Path,\n+                              lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n+        let poly_trait_ref = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n+        let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n+        if parse_plus {\n+            self.bump(); // `+`\n+            bounds.append(&mut self.parse_ty_param_bounds()?);\n+        }\n+        Ok(TyKind::TraitObject(bounds))\n+    }\n+\n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n         if !allow_plus || self.token != token::BinOp(token::Plus) {"}]}