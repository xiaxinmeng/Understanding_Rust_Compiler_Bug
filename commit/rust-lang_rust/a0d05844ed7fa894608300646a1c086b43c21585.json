{"sha": "a0d05844ed7fa894608300646a1c086b43c21585", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZDA1ODQ0ZWQ3ZmE4OTQ2MDgzMDA2NDZhMWMwODZiNDNjMjE1ODU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-26T21:04:03Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-28T00:31:42Z"}, "message": "Correctly forbid upvars in nested impls, traits and classes\n\nPreviously, resolve was allowing impls, traits or classes that were\nnested within a fn to refer to upvars, as well as referring to type\nparameters bound by the fn. Fixing this required adding a new kind of\ndef: def_typaram_binder, which can refer to any of an impl, trait or\nclass that has bound ty params. resolve uses this to enforce that\nmethods can refer to their parent item's type parameters, but not to\nouter items' type parameters; other stages ignore it. I also made\nsure that impl, trait and class methods get checked inside a\nMethodRibKind thing so as to forbid upvars, and changed the definition\nof MethodRibKind so that its second argument is an optional node_id\n(so that required trait method signatures can be checked with a\nMethodRibKind as well).", "tree": {"sha": "ce8647e6ec505b53fd73f5c67784f87709fa380f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8647e6ec505b53fd73f5c67784f87709fa380f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d05844ed7fa894608300646a1c086b43c21585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d05844ed7fa894608300646a1c086b43c21585", "html_url": "https://github.com/rust-lang/rust/commit/a0d05844ed7fa894608300646a1c086b43c21585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d05844ed7fa894608300646a1c086b43c21585/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ab0f665b92e895985f233c97ec31a55662e19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ab0f665b92e895985f233c97ec31a55662e19f", "html_url": "https://github.com/rust-lang/rust/commit/e4ab0f665b92e895985f233c97ec31a55662e19f"}], "stats": {"total": 170, "additions": 157, "deletions": 13}, "files": [{"sha": "4a48504d554b12f2eff6e10b6a00a833e469aa9a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -88,6 +88,7 @@ enum def {\n               @def    /* closed over def */,\n               node_id /* expr node that creates the closure */),\n     def_class(def_id, bool /* has constructor */),\n+    def_typaram_binder(node_id), /* class, impl or trait that has ty params */\n     def_region(node_id)\n }\n "}, {"sha": "26e0c70442d00d07d66f390cbac411140bcd78ff", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -55,7 +55,8 @@ pure fn def_id_of_def(d: def) -> def_id {\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_use(id) | def_class(id, _) { id }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n-      def_upvar(id, _, _) | def_binding(id) | def_region(id) {\n+      def_upvar(id, _, _) | def_binding(id) | def_region(id)\n+      | def_typaram_binder(id) {\n         local_def(id)\n       }\n "}, {"sha": "d47598cd8cbf0cf0cfd21afef6efc02e80717426", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -373,6 +373,9 @@ impl of tr for ast::def {\n             ast::def_class(did.tr(xcx), has_constructor)\n           }\n           ast::def_region(nid) { ast::def_region(xcx.tr_id(nid)) }\n+          ast::def_typaram_binder(nid) {\n+            ast::def_typaram_binder(xcx.tr_id(nid))\n+          }\n         }\n     }\n }"}, {"sha": "e23d997a028a7c656595d33ec3745a5cef21cead", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -192,12 +192,12 @@ impl public_methods for borrowck_ctxt {\n                expr_ty: ty::t,\n                def: ast::def) -> cmt {\n         alt def {\n-          ast::def_fn(_, _) | ast::def_mod(_) |\n+          ast::def_fn(*) | ast::def_mod(_) |\n           ast::def_foreign_mod(_) | ast::def_const(_) |\n-          ast::def_use(_) | ast::def_variant(_, _) |\n+          ast::def_use(_) | ast::def_variant(*) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n-          ast::def_ty_param(_, _) | ast::def_class(_, _) |\n-          ast::def_region(_) {\n+          ast::def_ty_param(*) | ast::def_class(*) |\n+          ast::def_typaram_binder(*) | ast::def_region(_) {\n             @{id:id, span:span,\n               cat:cat_special(sk_static_item), lp:none,\n               mutbl:m_imm, ty:expr_ty}"}, {"sha": "65c8f4b4dd6d85d13f47293b0eccf394f9d57c03", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -10,7 +10,8 @@ import syntax::ast::{bound_send, capture_clause, class_ctor, class_dtor};\n import syntax::ast::{class_member, class_method, crate, crate_num, decl_item};\n import syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n import syntax::ast::{def_foreign_mod, def_id, def_local, def_mod};\n-import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n+import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param,\n+                     def_typaram_binder};\n import syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n import syntax::ast::{expr_fn_block, expr_index, expr_new, expr_path};\n@@ -171,10 +172,23 @@ enum RibKind {\n     // upvars as appropriate.\n     FunctionRibKind(node_id),\n \n+    // We passed through a class, impl, or trait and are now in one of its\n+    // methods. Allow references to ty params that that class, impl or trait\n+    // binds. Disallow any other upvars (including other ty params that are\n+    // upvars).\n+              // parent;   method itself\n+    MethodRibKind(node_id, MethodSort),\n+\n     // We passed through a function *item* scope. Disallow upvars.\n     OpaqueFunctionRibKind\n }\n \n+// Methods can be required or provided. Required methods only occur in traits.\n+enum MethodSort {\n+    Required,\n+    Provided(node_id)\n+}\n+\n // The X-ray flag indicates that a context has the X-ray privilege, which\n // allows it to reference private names. Currently, this is used for the test\n // runner.\n@@ -1392,7 +1406,8 @@ class Resolver {\n                         }\n                         def_self(*) | def_arg(*) | def_local(*) |\n                         def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n-                        def_use(*) | def_upvar(*) | def_region(*) {\n+                        def_use(*) | def_upvar(*) | def_region(*) |\n+                          def_typaram_binder(*) {\n                             fail #fmt(\"didn't expect `%?`\", def);\n                         }\n                     }\n@@ -2891,6 +2906,36 @@ class Resolver {\n                                         function_id);\n                     }\n                 }\n+                MethodRibKind(item_id, method_id) {\n+                  // If the def is a ty param, and came from the parent\n+                  // item, it's ok\n+                  alt def {\n+                    def_ty_param(did, _) if self.def_map.find(copy(did.node))\n+                      == some(def_typaram_binder(item_id)) {\n+                      // ok\n+                    }\n+                    _ {\n+                    if !is_ty_param {\n+                        // This was an attempt to access an upvar inside a\n+                        // named function item. This is not allowed, so we\n+                        // report an error.\n+\n+                        self.session.span_err(\n+                            span,\n+                            ~\"attempted dynamic environment-capture\");\n+                    } else {\n+                        // This was an attempt to use a type parameter outside\n+                        // its scope.\n+\n+                        self.session.span_err(span,\n+                                              ~\"attempt to use a type \\\n+                                               argument out of scope\");\n+                    }\n+\n+                    ret none;\n+                    }\n+                  }\n+                }\n                 OpaqueFunctionRibKind {\n                     if !is_ty_param {\n                         // This was an attempt to access an upvar inside a\n@@ -3029,7 +3074,7 @@ class Resolver {\n                                 (HasTypeParameters(&ty_m.tps,\n                                                    item.id,\n                                                    type_parameters.len(),\n-                                                   NormalRibKind)) {\n+                                        MethodRibKind(item.id, Required))) {\n \n                                 // Resolve the method-specific type\n                                 // parameters.\n@@ -3044,7 +3089,8 @@ class Resolver {\n                             }\n                           }\n                           provided(m) {\n-                              self.resolve_method(NormalRibKind,\n+                              self.resolve_method(MethodRibKind(item.id,\n+                                                     Provided(m.id)),\n                                                   m,\n                                                   type_parameters.len(),\n                                                   visitor)\n@@ -3148,9 +3194,15 @@ class Resolver {\n                 for (*type_parameters).eachi |index, type_parameter| {\n                     let name =\n                         (*self.atom_table).intern(type_parameter.ident);\n+                    #debug(\"with_type_parameter_rib: %d %d\", node_id,\n+                           type_parameter.id);\n                     let def_like = dl_def(def_ty_param\n                         (local_def(type_parameter.id),\n                          index + initial_index));\n+                    // Associate this type parameter with\n+                    // the item that bound it\n+                    self.record_def(type_parameter.id,\n+                                    def_typaram_binder(node_id));\n                     (*function_type_rib).bindings.insert(name, def_like);\n                 }\n             }\n@@ -3332,7 +3384,8 @@ class Resolver {\n             for class_members.each |class_member| {\n                 alt class_member.node {\n                     class_method(method) {\n-                      self.resolve_method(NormalRibKind,\n+                      self.resolve_method(MethodRibKind(id,\n+                                               Provided(method.id)),\n                                           method,\n                                           outer_type_parameter_count,\n                                           visitor);\n@@ -3451,7 +3504,7 @@ class Resolver {\n                 // type parameters.\n \n                 let borrowed_type_parameters = &method.tps;\n-                self.resolve_function(NormalRibKind,\n+                self.resolve_function(MethodRibKind(id, Provided(method.id)),\n                                       some(@method.decl),\n                                       HasTypeParameters\n                                         (borrowed_type_parameters,"}, {"sha": "9e95910358fad4bbe9c15b439e787b91ae92e4bf", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -2186,6 +2186,10 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_region(*) {\n         fcx.ccx.tcx.sess.span_fatal(sp, ~\"expected value but found region\");\n       }\n+      ast::def_typaram_binder(*) {\n+        fcx.ccx.tcx.sess.span_fatal(sp, ~\"expected value but found type \\\n+                                          parameter\");\n+      }\n     }\n }\n "}, {"sha": "06455e8887a2e6e4faaea42034c8294a43bc5482", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -200,8 +200,8 @@ fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n           ast::def_foreign_mod(_) | ast::def_const(_) |\n           ast::def_use(_) | ast::def_variant(_, _) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n-          ast::def_ty_param(_, _) | ast::def_class(_, _) |\n-          ast::def_region(_) {\n+          ast::def_ty_param(_, _) | ast::def_typaram_binder(*) |\n+          ast::def_class(_, _) | ast::def_region(_) {\n             ty::re_static\n           }\n         }"}, {"sha": "1e40ba92501511844e786ed0f140ebbc59efb486", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -0,0 +1,15 @@\n+use std;\n+\n+fn siphash(k0 : u64) {\n+\n+    class siphash {\n+        let mut v0: u64;\n+        fn reset() {\n+           self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n+           //~^ ERROR unresolved name: k0\n+        }\n+        new() { self.v0 = 0; }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b87434bdd14d4cc97d4a2b25a53e56feb4585822", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -0,0 +1,13 @@\n+use std;\n+\n+fn siphash<T>() {\n+\n+    trait t {\n+        fn g(x: T) -> T;  //~ ERROR attempt to use a type argument out of scope\n+        //~^ ERROR attempt to use a type argument out of scope\n+        //~^^ ERROR use of undeclared type name `T`\n+        //~^^^ ERROR use of undeclared type name `T`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "85a8fb8a0919373fc22bb3d05704f79a5d858408", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -0,0 +1,32 @@\n+use std;\n+\n+iface siphash {\n+    fn result() -> u64;\n+    fn reset();\n+}\n+\n+fn siphash(k0 : u64, k1 : u64) -> siphash {\n+    type sipstate = {\n+        mut v0 : u64,\n+        mut v1 : u64,\n+    };\n+\n+    fn mk_result(st : sipstate) -> u64 {\n+\n+        let v0 = st.v0,\n+            v1 = st.v1;\n+        ret v0 ^ v1;\n+    }\n+\n+   impl of siphash for sipstate {\n+        fn reset() {\n+            self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n+            //~^ ERROR unresolved name: k0\n+            self.v1 = k1 ^ 0x646f72616e646f6d;   //~ ERROR attempted dynamic environment-capture\n+            //~^ ERROR unresolved name: k1\n+        }\n+        fn result() -> u64 { ret mk_result(self); }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5895f8413ea0e8a3832eeab2777892ce2797ec64", "filename": "src/test/compile-fail/issue-3021.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d05844ed7fa894608300646a1c086b43c21585/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=a0d05844ed7fa894608300646a1c086b43c21585", "patch": "@@ -0,0 +1,22 @@\n+use std;\n+\n+iface siphash {\n+    fn reset();\n+}\n+\n+fn siphash(k0 : u64) -> siphash {\n+    type sipstate = {\n+        mut v0 : u64,\n+    };\n+\n+\n+   impl of siphash for sipstate {\n+        fn reset() {\n+           self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n+           //~^ ERROR unresolved name: k0\n+        }\n+    }\n+    fail;\n+}\n+\n+fn main() {}"}]}