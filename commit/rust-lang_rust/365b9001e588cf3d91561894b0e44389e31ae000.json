{"sha": "365b9001e588cf3d91561894b0e44389e31ae000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWI5MDAxZTU4OGNmM2Q5MTU2MTg5NGIwZTQ0Mzg5ZTMxYWUwMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-25T09:18:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-25T09:18:17Z"}, "message": "Auto merge of #54658 - petrochenkov:experelude, r=nikomatsakis\n\nAdd `extern crate` items to extern prelude\n\nWith this patch each `extern crate orig_name as name` item adds name `name` into the extern prelude, as if it was passed with `--extern`.\n\nWhat changes this causes in practice?\nAlmost none! After all, `--extern` passed from Cargo was supposed to replace `extern crate` items in source, so if some code has `extern crate` item (or had it on 2015 edition), then it most likely uses `--extern` as well...\n\n... with exception of a few important cases.\n\n- Crates using `proc_macro`. `proc_macro` is not passed with `--extern` right now and is therefore not in extern prelude.\nTogether with 2018 edition import behavior this causes problems like https://github.com/rust-lang/rust/issues/54418, e.g.\n    ```rust\n    extern crate proc_macro;\n    use proc_macro::TokenStream;\n    ```\n    doesn't work.\nIt starts working after this patch.\n\n- `#[no_std]` crates using `std` conditionally, like @aturon described in https://github.com/rust-lang/rust/issues/53166#issuecomment-425219286, and still wanting to write `std` instead of `crate::std`. This PR covers that case as well.\nThis allows us to revert placing `std` into the extern prelude unconditionally, which was, I think, a [bad idea](https://github.com/rust-lang/rust/issues/53166#issuecomment-425117829).\n\n- Later `extern crate` syntax can be extended to support adding an alias to some local path to extern prelude, as it may be required for resolving https://github.com/rust-lang/rust/issues/54647.\n\nNotes:\n- Only `extern crate` items from the root module added to the prelude, mostly because this behavior for items from inner modules would look very strange, rather than for technical reasons.\nThis means you can opt out from the prelude additions with something like\n    ```rust\n    mod inner {\n        pub(crate) extern crate foo;\n    }\n    use inner::foo;\n    ```\n- I haven't updated logic for 2018 import canaries to work fully correctly with this. The cases where it matters are pretty exotic (the `extern crate` item must be \"sufficiently macro expanded\") and I'd rather spend the time on eliminating the canaries entirely.", "tree": {"sha": "cad542c2482fd9a4480f24a76437f4df57cbb08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad542c2482fd9a4480f24a76437f4df57cbb08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365b9001e588cf3d91561894b0e44389e31ae000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365b9001e588cf3d91561894b0e44389e31ae000", "html_url": "https://github.com/rust-lang/rust/commit/365b9001e588cf3d91561894b0e44389e31ae000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365b9001e588cf3d91561894b0e44389e31ae000/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391"}, {"sha": "d1e337bded30b84df777f6de3d8fc588286f0834", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e337bded30b84df777f6de3d8fc588286f0834", "html_url": "https://github.com/rust-lang/rust/commit/d1e337bded30b84df777f6de3d8fc588286f0834"}], "stats": {"total": 448, "additions": 369, "deletions": 79}, "files": [{"sha": "1a9f86306325f1857a5eded35dce12c4215a7433", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -931,7 +931,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n-    pub extern_prelude: FxHashSet<ast::Name>,\n+    /// Extern prelude entries. The value is `true` if the entry was introduced\n+    /// via `extern crate` item and not `--extern` option or compiler built-in.\n+    pub extern_prelude: FxHashMap<ast::Name, bool>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,"}, {"sha": "7153c729d1542b439d8dcec805ca5a8cccf0a37c", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // printing the `CrateRoot` so we don't prepend a `crate::` to paths.\n                 let mut is_prelude_crate = false;\n                 if let DefPathData::CrateRoot = self.def_key(parent_did).disambiguated_data.data {\n-                    if self.extern_prelude.contains(&data.as_interned_str().as_symbol()) {\n+                    if self.extern_prelude.contains_key(&data.as_interned_str().as_symbol()) {\n                         is_prelude_crate = true;\n                     }\n                 }"}, {"sha": "6ea759dee2126ae7d583fad4c4bc57f15d824e0e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -36,7 +36,7 @@ use ty::subst::{Subst, Substs};\n use ty::util::{IntTypeExt, Discr};\n use ty::walk::TypeWalker;\n use util::captures::Captures;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n+use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use session::DataTypeKind;\n \n@@ -141,7 +141,9 @@ pub struct Resolutions {\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n-    pub extern_prelude: FxHashSet<Name>,\n+    /// Extern prelude entries. The value is `true` if the entry was introduced\n+    /// via `extern crate` item and not `--extern` option or compiler built-in.\n+    pub extern_prelude: FxHashMap<Name, bool>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]"}, {"sha": "7ad012409b53a4bdfacc93b9633e1dd0c338ab1c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -790,7 +790,9 @@ where\n                 trait_map: resolver.trait_map,\n                 maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n                 maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n-                extern_prelude: resolver.extern_prelude,\n+                extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n+                    (ident.name, entry.introduced_by_item)\n+                }).collect(),\n             },\n \n             analysis: ty::CrateAnalysis {"}, {"sha": "aa7bfeae5f48b034013c64a9e089fb4f80b5e52c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -17,7 +17,7 @@ use macros::{InvocationData, ParentScope, LegacyScope};\n use resolve_imports::ImportDirective;\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n use {Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, ToNameBinding};\n-use {ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas};\n+use {ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n@@ -28,6 +28,7 @@ use rustc::middle::cstore::CrateStore;\n use rustc_metadata::cstore::LoadedMacro;\n \n use std::cell::Cell;\n+use std::ptr;\n use rustc_data_structures::sync::Lrc;\n \n use syntax::ast::{Name, Ident};\n@@ -437,13 +438,32 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n-                if injected_crate_name().map_or(false, |name| item.ident.name == name) {\n+                if injected_crate_name().map_or(false, |name| ident.name == name) {\n                     self.injected_crate = Some(module);\n                 }\n \n                 let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n+                if ptr::eq(self.current_module, self.graph_root) {\n+                    if let Some(entry) = self.extern_prelude.get(&ident.modern()) {\n+                        if expansion != Mark::root() && orig_name.is_some() &&\n+                           entry.extern_crate_item.is_none() {\n+                            self.session.span_err(item.span, \"macro-expanded `extern crate` items \\\n+                                                              cannot shadow names passed with \\\n+                                                              `--extern`\");\n+                        }\n+                    }\n+                    let entry = self.extern_prelude.entry(ident.modern())\n+                                                   .or_insert(ExternPreludeEntry {\n+                        extern_crate_item: None,\n+                        introduced_by_item: true,\n+                    });\n+                    entry.extern_crate_item = Some(binding);\n+                    if orig_name.is_some() {\n+                        entry.introduced_by_item = true;\n+                    }\n+                }\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n                     root_id: item.id,\n                     id: item.id,\n@@ -468,7 +488,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n             ItemKind::GlobalAsm(..) => {}\n \n-            ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n+            ItemKind::Mod(..) if ident == keywords::Invalid.ident() => {} // Crate root\n \n             ItemKind::Mod(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);"}, {"sha": "6fcee4051ac37830799d3d5838109668219cee75", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n         // each time.\n         let external_crate_names: BTreeSet<Symbol> = self.resolver.extern_prelude\n-            .clone().drain().collect();\n+            .iter().map(|(ident, _)| ident.name).collect();\n \n         // Insert a new path segment that we can replace.\n         let new_path_segment = path[0].clone();\n@@ -146,19 +146,14 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // Iterate in reverse so that we start with crates at the end of the alphabet. This means\n         // that we'll always get `std` before `core`.\n         for name in external_crate_names.iter().rev() {\n-            let ident = Ident::with_empty_ctxt(*name);\n-            // Calling `maybe_process_path_extern` ensures that we're only running `resolve_path`\n-            // on a crate name that won't ICE.\n-            if let Some(_) = self.crate_loader.maybe_process_path_extern(*name, ident.span) {\n-                // Replace the first after root (a placeholder we inserted) with a crate name\n-                // and check if that is valid.\n-                path[1].name = *name;\n-                let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n-                debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n-                       name, path, result);\n-                if let PathResult::Module(..) = result {\n-                    return Some(path)\n-                }\n+            // Replace the first after root (a placeholder we inserted) with a crate name\n+            // and check if that is valid.\n+            path[1].name = *name;\n+            let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+            debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n+                    name, path, result);\n+            if let PathResult::Module(..) = result {\n+                return Some(path)\n             }\n         }\n "}, {"sha": "2c21067bd58c8881debec221bacd46ac150e3a76", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -58,6 +58,7 @@ use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::base::MacroKind;\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -1340,6 +1341,12 @@ impl PrimitiveTypeTable {\n     }\n }\n \n+#[derive(Default, Clone)]\n+pub struct ExternPreludeEntry<'a> {\n+    extern_crate_item: Option<&'a NameBinding<'a>>,\n+    pub introduced_by_item: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -1352,7 +1359,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n-    pub extern_prelude: FxHashSet<Name>,\n+    pub extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1668,15 +1675,16 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n-        let mut extern_prelude: FxHashSet<Name> =\n-            session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n+        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry> =\n+            session.opts.externs.iter().map(|kv| (Ident::from_str(kv.0), Default::default()))\n+                                       .collect();\n \n         if !attr::contains_name(&krate.attrs, \"no_core\") {\n-            extern_prelude.insert(Symbol::intern(\"core\"));\n+            extern_prelude.insert(Ident::from_str(\"core\"), Default::default());\n             if !attr::contains_name(&krate.attrs, \"no_std\") {\n-                extern_prelude.insert(Symbol::intern(\"std\"));\n+                extern_prelude.insert(Ident::from_str(\"std\"), Default::default());\n                 if session.rust_2018() {\n-                    extern_prelude.insert(Symbol::intern(\"meta\"));\n+                    extern_prelude.insert(Ident::from_str(\"meta\"), Default::default());\n                 }\n             }\n         }\n@@ -1963,21 +1971,10 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n \n         if !module.no_implicit_prelude {\n-            if ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n-                let crate_id = if record_used {\n-                    self.crate_loader.process_path_extern(ident.name, ident.span)\n-                } else if let Some(crate_id) =\n-                        self.crate_loader.maybe_process_path_extern(ident.name, ident.span) {\n-                    crate_id\n-                } else {\n-                    return None;\n-                };\n-                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                self.populate_module_if_necessary(&crate_root);\n-\n-                let binding = (crate_root, ty::Visibility::Public,\n-                               ident.span, Mark::root()).to_name_binding(self.arenas);\n-                return Some(LexicalScopeBinding::Item(binding));\n+            if ns == TypeNS {\n+                if let Some(binding) = self.extern_prelude_get(ident, !record_used, false) {\n+                    return Some(LexicalScopeBinding::Item(binding));\n+                }\n             }\n             if ns == TypeNS && is_known_tool(ident.name) {\n                 let binding = (Def::ToolMod, ty::Visibility::Public,\n@@ -4018,7 +4015,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.extern_prelude.iter().cloned());\n+                            names.extend(self.extern_prelude.iter().map(|(ident, _)| ident.name));\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4459,11 +4456,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if self.session.rust_2018() {\n             let extern_prelude_names = self.extern_prelude.clone();\n-            for &name in extern_prelude_names.iter() {\n-                let ident = Ident::with_empty_ctxt(name);\n-                if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(name,\n-                                                                                    ident.span)\n-                {\n+            for (ident, _) in extern_prelude_names.into_iter() {\n+                if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(ident.name,\n+                                                                                    ident.span) {\n                     let crate_root = self.get_module(DefId {\n                         krate: crate_id,\n                         index: CRATE_DEF_INDEX,\n@@ -4825,6 +4820,35 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }\n+\n+    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool, skip_feature_gate: bool)\n+                          -> Option<&'a NameBinding<'a>> {\n+        self.extern_prelude.get(&ident.modern()).cloned().and_then(|entry| {\n+            if let Some(binding) = entry.extern_crate_item {\n+                if !speculative && !skip_feature_gate && entry.introduced_by_item &&\n+                   !self.session.features_untracked().extern_crate_item_prelude {\n+                    emit_feature_err(&self.session.parse_sess, \"extern_crate_item_prelude\",\n+                                     ident.span, GateIssue::Language,\n+                                     \"use of extern prelude names introduced \\\n+                                      with `extern crate` items is unstable\");\n+                }\n+                Some(binding)\n+            } else {\n+                let crate_id = if !speculative {\n+                    self.crate_loader.process_path_extern(ident.name, ident.span)\n+                } else if let Some(crate_id) =\n+                        self.crate_loader.maybe_process_path_extern(ident.name, ident.span) {\n+                    crate_id\n+                } else {\n+                    return None;\n+                };\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(&crate_root);\n+                Some((crate_root, ty::Visibility::Public, ident.span, Mark::root())\n+                    .to_name_binding(self.arenas))\n+            }\n+        })\n+    }\n }\n \n fn is_self_type(path: &[Ident], namespace: Namespace) -> bool {"}, {"sha": "3345e01a929c773404cb4cf3803afb7a8f756619", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -691,19 +691,14 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude && self.extern_prelude.contains(&ident.name) {\n-                        let crate_id =\n-                            self.crate_loader.process_path_extern(ident.name, ident.span);\n-                        let crate_root =\n-                            self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                        self.populate_module_if_necessary(crate_root);\n-\n-                        let binding = (crate_root, ty::Visibility::Public,\n-                                       ident.span, Mark::root()).to_name_binding(self.arenas);\n-                        Ok((binding, Flags::PRELUDE, Flags::empty()))\n-                    } else {\n-                        Err(Determinacy::Determined)\n+                    let mut result = Err(Determinacy::Determined);\n+                    if use_prelude {\n+                        if let Some(binding) = self.extern_prelude_get(ident, !record_used,\n+                                                                       innermost_result.is_some()) {\n+                            result = Ok((binding, Flags::PRELUDE, Flags::empty()));\n+                        }\n                     }\n+                    result\n                 }\n                 WhereToResolve::ToolPrelude => {\n                     if use_prelude && is_known_tool(ident.name) {"}, {"sha": "6c73f1bd0f8c5af59f96d582dc1a7a4f7d6b998e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n@@ -202,7 +202,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     if !(\n                         ns == TypeNS &&\n                         !ident.is_path_segment_keyword() &&\n-                        self.extern_prelude.contains(&ident.name)\n+                        self.extern_prelude.contains_key(&ident.modern())\n                     ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n@@ -220,12 +220,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     self.resolve_crate_root(ident)\n                 } else if\n                     ns == TypeNS &&\n-                    !ident.is_path_segment_keyword() &&\n-                    self.extern_prelude.contains(&ident.name)\n+                    !ident.is_path_segment_keyword()\n                 {\n-                    let crate_id =\n-                        self.crate_loader.process_path_extern(ident.name, ident.span);\n-                    self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                    if let Some(binding) = self.extern_prelude_get(ident, !record_used, false) {\n+                        let module = self.get_module(binding.def().def_id());\n+                        self.populate_module_if_necessary(module);\n+                        return Ok(binding);\n+                    } else {\n+                        return Err(Determined);\n+                    }\n                 } else {\n                     return Err(Determined);\n                 };\n@@ -738,10 +741,9 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n-            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n-                let crate_id =\n-                    self.crate_loader.process_path_extern(name, span);\n-                Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))\n+            let external_crate = if ns == TypeNS {\n+                self.extern_prelude_get(Ident::with_empty_ctxt(name), true, false)\n+                    .map(|binding| binding.def())\n             } else {\n                 None\n             };\n@@ -1021,6 +1023,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                             Some(this.dummy_binding);\n                     }\n                 }\n+                if record_used && ns == TypeNS {\n+                    if let ModuleOrUniformRoot::UniformRoot(..) = module {\n+                        // Make sure single-segment import is resolved non-speculatively\n+                        // at least once to report the feature error.\n+                        this.extern_prelude_get(ident, false, false);\n+                    }\n+                }\n             }\n         });\n "}, {"sha": "9d785dfb58ac18a59beb095990707b0ec258713a", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -164,7 +164,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n         // If the extern crate isn't in the extern prelude,\n         // there is no way it can be written as an `use`.\n         let orig_name = extern_crate.orig_name.unwrap_or(item.name);\n-        if !tcx.extern_prelude.contains(&orig_name) {\n+        if !tcx.extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n             continue;\n         }\n "}, {"sha": "8f9c3fa4b7f205a7cba10e0b0ff67b3e18356832", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -476,7 +476,9 @@ pub fn run_core(search_paths: SearchPaths,\n             trait_map: resolver.trait_map.clone(),\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n-            extern_prelude: resolver.extern_prelude.clone(),\n+            extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n+                (ident.name, entry.introduced_by_item)\n+            }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n             access_levels: Lrc::new(AccessLevels::default()),"}, {"sha": "2cd4fd92bc81e97c9000d617217ce9219fb1575e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -501,6 +501,9 @@ declare_features! (\n \n     // Allows `const _: TYPE = VALUE`\n     (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n+\n+    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    (active, extern_crate_item_prelude, \"1.31.0\", Some(54658), None),\n );\n \n declare_features! ("}, {"sha": "e320ad9713542961e4acd73c72741b555e626a72", "filename": "src/test/ui-fulldeps/proc-macro/extern-prelude-extern-crate-proc-macro.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,9 @@\n+// compile-pass\n+// edition:2018\n+\n+#![feature(extern_crate_item_prelude)]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream; // OK\n+\n+fn main() {}"}, {"sha": "59ca668d4852553736fd0879fa9f54394204748c", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -20,7 +20,7 @@ error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:54:10\n    |\n LL | #[derive(attr_proc_macra)]\n-   |          ^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n \n error: cannot find macro `FooWithLongNama!` in this scope\n   --> $DIR/resolve-error.rs:59:5"}, {"sha": "a043b6c2e610740f104b33b937124c8c19cd55b5", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+#![feature(alloc)]\n+\n+extern crate alloc;\n+\n+mod in_scope {\n+    fn check() {\n+        let v = alloc::vec![0];\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+        type A = alloc::boxed::Box<u8>;\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    }\n+}\n+\n+mod absolute {\n+    fn check() {\n+        let v = ::alloc::vec![0];\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+        type A = ::alloc::boxed::Box<u8>;\n+        //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    }\n+}\n+\n+mod import_in_scope {\n+    use alloc;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    use alloc::boxed;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+}\n+\n+mod import_absolute {\n+    use ::alloc;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+    use ::alloc::boxed;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+}\n+\n+extern crate alloc as core;\n+\n+mod unrelated_crate_renamed {\n+    type A = core::boxed::Box<u8>;\n+    //~^ ERROR use of extern prelude names introduced with `extern crate` items is unstable\n+}\n+\n+fn main() {}"}, {"sha": "cabfb56d7a840b5913110774390b241fceae17d0", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_item_prelude.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_item_prelude.stderr?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,75 @@\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:26:9\n+   |\n+LL |     use alloc;\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:28:9\n+   |\n+LL |     use alloc::boxed;\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:33:11\n+   |\n+LL |     use ::alloc;\n+   |           ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:35:11\n+   |\n+LL |     use ::alloc::boxed;\n+   |           ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:9:17\n+   |\n+LL |         let v = alloc::vec![0];\n+   |                 ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:11:18\n+   |\n+LL |         type A = alloc::boxed::Box<u8>;\n+   |                  ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:18:19\n+   |\n+LL |         let v = ::alloc::vec![0];\n+   |                   ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:20:20\n+   |\n+LL |         type A = ::alloc::boxed::Box<u8>;\n+   |                    ^^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error[E0658]: use of extern prelude names introduced with `extern crate` items is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_item_prelude.rs:42:14\n+   |\n+LL |     type A = core::boxed::Box<u8>;\n+   |              ^^^^\n+   |\n+   = help: add #![feature(extern_crate_item_prelude)] to the crate attributes to enable\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c48a65798b6c13bdc71345a6c291101206813a31", "filename": "src/test/ui/imports/extern-prelude-extern-crate-cfg.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+// compile-flags:--cfg my_feature\n+\n+#![feature(extern_crate_item_prelude)]\n+#![no_std]\n+\n+#[cfg(my_feature)]\n+extern crate std;\n+\n+mod m {\n+    #[cfg(my_feature)]\n+    fn conditional() {\n+        std::vec::Vec::<u8>::new(); // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "57b097c9df318091b62b3dfc20fa5a00da718524", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,22 @@\n+// aux-build:two_macros.rs\n+// compile-flags:--extern non_existent\n+\n+mod n {\n+    extern crate two_macros;\n+}\n+\n+mod m {\n+    fn check() {\n+        two_macros::m!(); //~ ERROR failed to resolve. Use of undeclared type or module `two_macros`\n+    }\n+}\n+\n+macro_rules! define_std_as_non_existent {\n+    () => {\n+        extern crate std as non_existent;\n+        //~^ ERROR `extern crate` items cannot shadow names passed with `--extern`\n+    }\n+}\n+define_std_as_non_existent!();\n+\n+fn main() {}"}, {"sha": "8f68d2af34ca3d66e66935f7972267e181a634bc", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,18 @@\n+error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+  --> $DIR/extern-prelude-extern-crate-fail.rs:16:9\n+   |\n+LL |         extern crate std as non_existent;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | define_std_as_non_existent!();\n+   | ------------------------------ in this macro invocation\n+\n+error[E0433]: failed to resolve. Use of undeclared type or module `two_macros`\n+  --> $DIR/extern-prelude-extern-crate-fail.rs:10:9\n+   |\n+LL |         two_macros::m!(); //~ ERROR failed to resolve. Use of undeclared type or module `two_macros`\n+   |         ^^^^^^^^^^ Use of undeclared type or module `two_macros`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "8c147dfd04a3c7b6173393f9234760550a17b42b", "filename": "src/test/ui/imports/extern-prelude-extern-crate-pass.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,14 @@\n+// compile-pass\n+// aux-build:two_macros.rs\n+\n+#![feature(extern_crate_item_prelude)]\n+\n+extern crate two_macros;\n+\n+mod m {\n+    fn check() {\n+        two_macros::m!(); // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "732f1c4de2fb351aab488b7d157786a376a03368", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:two_macros.rs\n+\n+#![feature(extern_crate_item_prelude)]\n+\n+macro_rules! define_vec {\n+    () => {\n+        extern crate std as Vec;\n+    }\n+}\n+\n+define_vec!();\n+\n+mod m {\n+    fn check() {\n+        Vec::panic!(); //~ ERROR `Vec` is ambiguous\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6c832e70e49a75396e2c0bdec13a58b9a34c86a9", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -0,0 +1,20 @@\n+error[E0659]: `Vec` is ambiguous\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:15:9\n+   |\n+LL |         Vec::panic!(); //~ ERROR `Vec` is ambiguous\n+   |         ^^^ ambiguous name\n+   |\n+note: `Vec` could refer to the name defined here\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:7:9\n+   |\n+LL |         extern crate std as Vec;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | define_vec!();\n+   | -------------- in this macro invocation\n+note: `Vec` could also refer to the name defined here\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "688b9dc2797d05032cf8415e625c0bb65b1f417e", "filename": "src/test/ui/macros/macro-path-prelude-shadowing.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365b9001e588cf3d91561894b0e44389e31ae000/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr?ref=365b9001e588cf3d91561894b0e44389e31ae000", "patch": "@@ -10,10 +10,6 @@ note: `std` could refer to the name imported here\n LL |     use m2::*; // glob-import user-defined `std`\n    |         ^^^^^\n note: `std` could also refer to the name defined here\n-  --> $DIR/macro-path-prelude-shadowing.rs:39:9\n-   |\n-LL |         std::panic!(); //~ ERROR `std` is ambiguous\n-   |         ^^^\n    = note: consider adding an explicit import of `std` to disambiguate\n \n error: aborting due to previous error"}]}