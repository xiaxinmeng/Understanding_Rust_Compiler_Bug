{"sha": "e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYWYyM2I2NjRhMTMwN2ZlMzc2ZjI2MzhiYjdhNjlmMDRlMmFjMWM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:31:13Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:39:39Z"}, "message": "using str::rindex...", "tree": {"sha": "ae0e96d893abf8e5df0b79e75b9fb13b9f0b9b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae0e96d893abf8e5df0b79e75b9fb13b9f0b9b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "html_url": "https://github.com/rust-lang/rust/commit/e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0af23b664a1307fe376f2638bb7a69f04e2ac1c/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50360873f8f7abbe7232cdd8f89d5ce691711acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50360873f8f7abbe7232cdd8f89d5ce691711acc", "html_url": "https://github.com/rust-lang/rust/commit/50360873f8f7abbe7232cdd8f89d5ce691711acc"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "9790ec02ff45b74518a682d27c59ca72c8fc5967", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0af23b664a1307fe376f2638bb7a69f04e2ac1c/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0af23b664a1307fe376f2638bb7a69f04e2ac1c/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "patch": "@@ -283,10 +283,9 @@ fn check_variants_T<T: copy>(\n     }\n }\n \n-fn last_part(filename: str) -> str unsafe {\n-  let ix = str::rindex_byte(filename, 47u8 /* '/' */);\n-  assert ix >= 0;\n-  str::unsafe::slice_bytes(filename, ix as uint + 1u, str::byte_len(filename) - 3u)\n+fn last_part(filename: str) -> str {\n+  let ix = option::get(str::rindex(filename, '/'));\n+  str::slice(filename, ix + 1u, str::char_len(filename) - 3u)\n }\n \n enum happiness { passed, cleanly_rejected(str), known_bug(str), failed(str), }"}, {"sha": "de4789fdd3996bc0636bad2b88ae3761742bdf36", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e0af23b664a1307fe376f2638bb7a69f04e2ac1c/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0af23b664a1307fe376f2638bb7a69f04e2ac1c/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e0af23b664a1307fe376f2638bb7a69f04e2ac1c", "patch": "@@ -32,6 +32,22 @@ A path or fragment of a filesystem path\n */\n type path = str;\n \n+fn splitDirnameBasename (pp: path) -> {dirname: str, basename: str} {\n+    let ii;\n+    alt str::rindex(pp, os_fs::path_sep) {\n+        option::some(xx) { ii = xx; }\n+        option::none {\n+            alt str::rindex(pp, os_fs::alt_path_sep) {\n+                option::some(xx) { ii = xx; }\n+                option::none { ret {dirname: \".\", basename: pp}; }\n+            }\n+        }\n+    }\n+\n+    ret {dirname: str::slice(pp, 0u, ii),\n+         basename: str::slice(pp, ii + 1u, str::char_len(pp))};\n+}\n+\n /*\n Function: dirname\n \n@@ -43,13 +59,8 @@ The dirname of \"/usr/share\" will be \"/usr\", but the dirname of\n \n If the path is not prefixed with a directory, then \".\" is returned.\n */\n-fn dirname(p: path) -> path unsafe {\n-    let i: int = str::rindex_byte(p, os_fs::path_sep as u8);\n-    if i == -1 {\n-        i = str::rindex_byte(p, os_fs::alt_path_sep as u8);\n-        if i == -1 { ret \".\"; }\n-    }\n-    ret str::unsafe::slice_bytes(p, 0u, i as uint);\n+fn dirname(pp: path) -> path {\n+    ret splitDirnameBasename(pp).dirname;\n }\n \n /*\n@@ -63,18 +74,10 @@ path separators in the path then the returned path is identical to\n the provided path. If an empty path is provided or the path ends\n with a path separator then an empty path is returned.\n */\n-fn basename(p: path) -> path unsafe {\n-    let i: int = str::rindex_byte(p, os_fs::path_sep as u8);\n-    if i == -1 {\n-        i = str::rindex_byte(p, os_fs::alt_path_sep as u8);\n-        if i == -1 { ret p; }\n-    }\n-    let len = str::byte_len(p);\n-    if (i + 1) as uint >= len { ret p; }\n-    ret str::unsafe::slice_bytes(p, (i + 1) as uint, len);\n+fn basename(pp: path) -> path {\n+    ret splitDirnameBasename(pp).basename;\n }\n \n-\n // FIXME: Need some typestate to avoid bounds check when len(pre) == 0\n /*\n Function: connect"}]}