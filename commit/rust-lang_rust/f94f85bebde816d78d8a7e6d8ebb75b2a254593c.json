{"sha": "f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NGY4NWJlYmRlODE2ZDc4ZDhhN2U2ZDhlYmI3NWIyYTI1NDU5M2M=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-22T01:49:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-22T01:49:42Z"}, "message": "Fix ICE with const generic param in struct", "tree": {"sha": "a0a2d29794a982a992ec0fae9d1ada390c7c0c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0a2d29794a982a992ec0fae9d1ada390c7c0c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "html_url": "https://github.com/rust-lang/rust/commit/f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4df3b53da369110984a2b57419c05a53e33b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4df3b53da369110984a2b57419c05a53e33b38", "html_url": "https://github.com/rust-lang/rust/commit/7a4df3b53da369110984a2b57419c05a53e33b38"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "c9b9898fb41328538548e8b3864f242497ca2358", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (ItemRibKind, header.asyncness.node),\n+                (FnItemRibKind, header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n                 (TraitOrImplItemRibKind, sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n@@ -950,6 +950,10 @@ enum RibKind<'a> {\n     /// upvars).\n     TraitOrImplItemRibKind,\n \n+    /// We passed through a function definition. Disallow upvars.\n+    /// Permit only those const parameters specified in the function's generics.\n+    FnItemRibKind,\n+\n     /// We passed through an item scope. Disallow upvars.\n     ItemRibKind,\n \n@@ -3863,7 +3867,7 @@ impl<'a> Resolver<'a> {\n                                 seen.insert(node_id, depth);\n                             }\n                         }\n-                        ItemRibKind | TraitOrImplItemRibKind => {\n+                        ItemRibKind | FnItemRibKind | TraitOrImplItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -3897,7 +3901,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind => {\n+                        ItemRibKind | FnItemRibKind => {\n                             // This was an attempt to use a type parameter outside its scope.\n                             if record_used {\n                                 resolve_error(\n@@ -3912,21 +3916,27 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Def::ConstParam(..) => {\n-                // A const param is always declared in a signature, which is always followed by\n-                // some kind of function rib kind (specifically, ItemRibKind in the case of a\n-                // normal function), so we can skip the first rib as it will be guaranteed to\n-                // (spuriously) conflict with the const param.\n-                for rib in &ribs[1..] {\n-                    if let ItemRibKind = rib.kind {\n-                        // This was an attempt to use a const parameter outside its scope.\n-                        if record_used {\n-                            resolve_error(\n-                                self,\n-                                span,\n-                                ResolutionError::GenericParamsFromOuterFunction(def),\n-                            );\n+                let mut ribs = ribs.iter().peekable();\n+                if let Some(Rib { kind: FnItemRibKind, .. }) = ribs.peek() {\n+                    // When declaring const parameters inside function signatures, the first rib\n+                    // is always a `FnItemRibKind`. In this case, we can skip it, to avoid it\n+                    // (spuriously) conflicting with the const param.\n+                    ribs.next();\n+                }\n+                for rib in ribs {\n+                    match rib.kind {\n+                        ItemRibKind | FnItemRibKind => {\n+                            // This was an attempt to use a const parameter outside its scope.\n+                            if record_used {\n+                                resolve_error(\n+                                    self,\n+                                    span,\n+                                    ResolutionError::GenericParamsFromOuterFunction(def),\n+                                );\n+                            }\n+                            return Def::Err;\n                         }\n-                        return Def::Err;\n+                        _ => {}\n                     }\n                 }\n             }"}, {"sha": "207b07bf69514ea7deeff86e290b2b3fbe2865d1", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "patch": "@@ -0,0 +1,6 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n+\n+fn main() {}"}, {"sha": "561464b21cc8f0a23c8fb139e9f418a179b8c0ab", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f94f85bebde816d78d8a7e6d8ebb75b2a254593c/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=f94f85bebde816d78d8a7e6d8ebb75b2a254593c", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/struct-with-invalid-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:4:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ help: a struct with a similar name exists: `S`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}]}