{"sha": "3356d121df25bc5decc8ebe52f53d9e6952a1cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTZkMTIxZGYyNWJjNWRlY2M4ZWJlNTJmNTNkOWU2OTUyYTFjYWM=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:56:49Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:57:17Z"}, "message": "move string_extend tests", "tree": {"sha": "e74ada2aca00fc34498792fde7bbc2462274a8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74ada2aca00fc34498792fde7bbc2462274a8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3356d121df25bc5decc8ebe52f53d9e6952a1cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3356d121df25bc5decc8ebe52f53d9e6952a1cac", "html_url": "https://github.com/rust-lang/rust/commit/3356d121df25bc5decc8ebe52f53d9e6952a1cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3356d121df25bc5decc8ebe52f53d9e6952a1cac/comments", "author": null, "committer": null, "parents": [{"sha": "6d94167014e1738486601e05bdfb5cdef812d18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d94167014e1738486601e05bdfb5cdef812d18f", "html_url": "https://github.com/rust-lang/rust/commit/6d94167014e1738486601e05bdfb5cdef812d18f"}], "stats": {"total": 321, "additions": 160, "deletions": 161}, "files": [{"sha": "20776ca15da456db2f334df99fd66a6492c8994c", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=3356d121df25bc5decc8ebe52f53d9e6952a1cac", "patch": "@@ -189,15 +189,6 @@ impl IteratorFalsePositives {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-struct HasChars;\n-\n-impl HasChars {\n-    fn chars(self) -> std::str::Chars<'static> {\n-        \"HasChars\".chars()\n-    }\n-}\n-\n /// Checks implementation of `FILTER_NEXT` lint\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n@@ -431,25 +422,3 @@ struct MyError(()); // doesn't implement Debug\n struct MyErrorWithParam<T> {\n     x: T\n }\n-\n-fn str_extend_chars() {\n-    let abc = \"abc\";\n-    let def = String::from(\"def\");\n-    let mut s = String::new();\n-\n-    s.push_str(abc);\n-    s.extend(abc.chars());\n-\n-    s.push_str(\"abc\");\n-    s.extend(\"abc\".chars());\n-\n-    s.push_str(&def);\n-    s.extend(def.chars());\n-\n-    s.extend(abc.chars().skip(1));\n-    s.extend(\"abc\".chars().skip(1));\n-    s.extend(['a', 'b', 'c'].iter());\n-\n-    let f = HasChars;\n-    s.extend(f.chars());\n-}"}, {"sha": "1b5deef998e2c24c95617e4f643956e4fab0af38", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 110, "deletions": 130, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=3356d121df25bc5decc8ebe52f53d9e6952a1cac", "patch": "@@ -214,356 +214,336 @@ error: unnecessary structure name repetition\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:206:13\n+   --> $DIR/methods.rs:197:13\n     |\n-206 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+197 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:209:13\n+   --> $DIR/methods.rs:200:13\n     |\n-209 |       let _ = v.iter().filter(|&x| {\n+200 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-210 | |                                 *x < 0\n-211 | |                             }\n-212 | |                    ).next();\n+201 | |                                 *x < 0\n+202 | |                             }\n+203 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:224:13\n+   --> $DIR/methods.rs:215:13\n     |\n-224 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+215 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:227:13\n+   --> $DIR/methods.rs:218:13\n     |\n-227 |       let _ = v.iter().find(|&x| {\n+218 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-228 | |                               *x < 0\n-229 | |                           }\n-230 | |                    ).is_some();\n+219 | |                               *x < 0\n+220 | |                           }\n+221 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:224:13\n     |\n-233 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+224 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:236:13\n+   --> $DIR/methods.rs:227:13\n     |\n-236 |       let _ = v.iter().position(|&x| {\n+227 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-237 | |                                   x < 0\n-238 | |                               }\n-239 | |                    ).is_some();\n+228 | |                                   x < 0\n+229 | |                               }\n+230 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:242:13\n+   --> $DIR/methods.rs:233:13\n     |\n-242 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+233 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:245:13\n+   --> $DIR/methods.rs:236:13\n     |\n-245 |       let _ = v.iter().rposition(|&x| {\n+236 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-246 | |                                    x < 0\n-247 | |                                }\n-248 | |                    ).is_some();\n+237 | |                                    x < 0\n+238 | |                                }\n+239 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:262:21\n+   --> $DIR/methods.rs:253:21\n     |\n-262 |         fn new() -> Foo { Foo }\n+253 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:280:5\n+   --> $DIR/methods.rs:271:5\n     |\n-280 |     with_constructor.unwrap_or(make());\n+271 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:283:5\n+   --> $DIR/methods.rs:274:5\n     |\n-283 |     with_new.unwrap_or(Vec::new());\n+274 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:286:5\n+   --> $DIR/methods.rs:277:5\n     |\n-286 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+277 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:289:5\n+   --> $DIR/methods.rs:280:5\n     |\n-289 |     with_err.unwrap_or(make());\n+280 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:292:5\n+   --> $DIR/methods.rs:283:5\n     |\n-292 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+283 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:295:5\n+   --> $DIR/methods.rs:286:5\n     |\n-295 |     with_default_trait.unwrap_or(Default::default());\n+286 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:298:5\n+   --> $DIR/methods.rs:289:5\n     |\n-298 |     with_default_type.unwrap_or(u64::default());\n+289 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:301:5\n+   --> $DIR/methods.rs:292:5\n     |\n-301 |     with_vec.unwrap_or(vec![]);\n+292 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:306:5\n+   --> $DIR/methods.rs:297:5\n     |\n-306 |     without_default.unwrap_or(Foo::new());\n+297 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:309:5\n+   --> $DIR/methods.rs:300:5\n     |\n-309 |     map.entry(42).or_insert(String::new());\n+300 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:312:5\n+   --> $DIR/methods.rs:303:5\n     |\n-312 |     btree.entry(42).or_insert(String::new());\n+303 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:315:13\n+   --> $DIR/methods.rs:306:13\n     |\n-315 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+306 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:326:23\n+   --> $DIR/methods.rs:317:23\n     |\n-326 |         let bad_vec = some_vec.iter().nth(3);\n+317 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:327:26\n+   --> $DIR/methods.rs:318:26\n     |\n-327 |         let bad_slice = &some_vec[..].iter().nth(3);\n+318 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:328:31\n+   --> $DIR/methods.rs:319:31\n     |\n-328 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+319 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:329:29\n+   --> $DIR/methods.rs:320:29\n     |\n-329 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+320 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:334:23\n+   --> $DIR/methods.rs:325:23\n     |\n-334 |         let bad_vec = some_vec.iter_mut().nth(3);\n+325 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:337:26\n+   --> $DIR/methods.rs:328:26\n     |\n-337 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+328 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:340:29\n+   --> $DIR/methods.rs:331:29\n     |\n-340 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+331 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:352:13\n+   --> $DIR/methods.rs:343:13\n     |\n-352 |     let _ = some_vec.iter().skip(42).next();\n+343 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:353:13\n+   --> $DIR/methods.rs:344:13\n     |\n-353 |     let _ = some_vec.iter().cycle().skip(42).next();\n+344 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:354:13\n+   --> $DIR/methods.rs:345:13\n     |\n-354 |     let _ = (1..10).skip(10).next();\n+345 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:355:14\n+   --> $DIR/methods.rs:346:14\n     |\n-355 |     let _ = &some_vec[..].iter().skip(3).next();\n+346 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:381:17\n+   --> $DIR/methods.rs:372:17\n     |\n-381 |         let _ = boxed_slice.get(1).unwrap();\n+372 |         let _ = boxed_slice.get(1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n     |\n     = note: `-D get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:382:17\n+   --> $DIR/methods.rs:373:17\n     |\n-382 |         let _ = some_slice.get(0).unwrap();\n+373 |         let _ = some_slice.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:383:17\n+   --> $DIR/methods.rs:374:17\n     |\n-383 |         let _ = some_vec.get(0).unwrap();\n+374 |         let _ = some_vec.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:384:17\n+   --> $DIR/methods.rs:375:17\n     |\n-384 |         let _ = some_vecdeque.get(0).unwrap();\n+375 |         let _ = some_vecdeque.get(0).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:385:17\n+   --> $DIR/methods.rs:376:17\n     |\n-385 |         let _ = some_hashmap.get(&1).unwrap();\n+376 |         let _ = some_hashmap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:386:17\n+   --> $DIR/methods.rs:377:17\n     |\n-386 |         let _ = some_btreemap.get(&1).unwrap();\n+377 |         let _ = some_btreemap.get(&1).unwrap();\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:391:10\n+   --> $DIR/methods.rs:382:10\n     |\n-391 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+382 |         *boxed_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:392:10\n+   --> $DIR/methods.rs:383:10\n     |\n-392 |         *some_slice.get_mut(0).unwrap() = 1;\n+383 |         *some_slice.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:393:10\n+   --> $DIR/methods.rs:384:10\n     |\n-393 |         *some_vec.get_mut(0).unwrap() = 1;\n+384 |         *some_vec.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:394:10\n+   --> $DIR/methods.rs:385:10\n     |\n-394 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+385 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:408:13\n+   --> $DIR/methods.rs:399:13\n     |\n-408 |     let _ = opt.unwrap();\n+399 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:411:13\n+   --> $DIR/methods.rs:402:13\n     |\n-411 |     let _ = res.unwrap();\n+402 |     let _ = res.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D result-unwrap-used` implied by `-D warnings`\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:413:5\n+   --> $DIR/methods.rs:404:5\n     |\n-413 |     res.ok().expect(\"disaster!\");\n+404 |     res.ok().expect(\"disaster!\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D ok-expect` implied by `-D warnings`\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:419:5\n+   --> $DIR/methods.rs:410:5\n     |\n-419 |     res3.ok().expect(\"whoof\");\n+410 |     res3.ok().expect(\"whoof\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:421:5\n+   --> $DIR/methods.rs:412:5\n     |\n-421 |     res4.ok().expect(\"argh\");\n+412 |     res4.ok().expect(\"argh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:423:5\n+   --> $DIR/methods.rs:414:5\n     |\n-423 |     res5.ok().expect(\"oops\");\n+414 |     res5.ok().expect(\"oops\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:425:5\n+   --> $DIR/methods.rs:416:5\n     |\n-425 |     res6.ok().expect(\"meh\");\n+416 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:441:5\n-    |\n-441 |     s.extend(abc.chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n-    |\n-    = note: `-D string-extend-chars` implied by `-D warnings`\n-\n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:444:5\n-    |\n-444 |     s.extend(\"abc\".chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n-\n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:447:5\n-    |\n-447 |     s.extend(def.chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n-"}, {"sha": "d99adb19f892fdec95fad3addaf894268842d5e4", "filename": "tests/ui/string_extend.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=3356d121df25bc5decc8ebe52f53d9e6952a1cac", "patch": "@@ -0,0 +1,30 @@\n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n+fn main() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.extend(abc.chars());\n+\n+    s.push_str(\"abc\");\n+    s.extend(\"abc\".chars());\n+\n+    s.push_str(&def);\n+    s.extend(def.chars());\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}"}, {"sha": "1f6d9400743e16ae36e63d1477c27def6516b475", "filename": "tests/ui/string_extend.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356d121df25bc5decc8ebe52f53d9e6952a1cac/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=3356d121df25bc5decc8ebe52f53d9e6952a1cac", "patch": "@@ -0,0 +1,20 @@\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:16:5\n+   |\n+16 |     s.extend(abc.chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n+   |\n+   = note: `-D string-extend-chars` implied by `-D warnings`\n+\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:19:5\n+   |\n+19 |     s.extend(\"abc\".chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n+\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:22:5\n+   |\n+22 |     s.extend(def.chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n+"}]}