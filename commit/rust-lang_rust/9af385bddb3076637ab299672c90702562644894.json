{"sha": "9af385bddb3076637ab299672c90702562644894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjM4NWJkZGIzMDc2NjM3YWIyOTk2NzJjOTA3MDI1NjI2NDQ4OTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-16T23:46:36Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:38Z"}, "message": "Add rustc_platform_intrinsics & some arm/x86 intrs.\n\nThese are enough to implement a cross-platform SIMD single-precision\nmandelbrot renderer.", "tree": {"sha": "a5e6171ed28d2c0099ebf0a1f81878bb91b317bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5e6171ed28d2c0099ebf0a1f81878bb91b317bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af385bddb3076637ab299672c90702562644894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af385bddb3076637ab299672c90702562644894", "html_url": "https://github.com/rust-lang/rust/commit/9af385bddb3076637ab299672c90702562644894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af385bddb3076637ab299672c90702562644894/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfbde6778ee4839ca62aad3d025477296cf323f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfbde6778ee4839ca62aad3d025477296cf323f", "html_url": "https://github.com/rust-lang/rust/commit/1bfbde6778ee4839ca62aad3d025477296cf323f"}], "stats": {"total": 276, "additions": 273, "deletions": 3}, "files": [{"sha": "611f0146285e4a95593d3221c49709060f40cad3", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -56,7 +56,7 @@ TARGET_CRATES := libc std flate arena term \\\n \t\t alloc_system\n RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures\n+                rustc_data_structures rustc_platform_intrinsics\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n@@ -74,7 +74,7 @@ DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_bo\n \t\t     rustc_trans rustc_privacy rustc_lint\n \n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n-\t                log syntax serialize rustc_llvm\n+\t                log syntax serialize rustc_llvm rustc_platform_intrinsics\n DEPS_rustc_typeck := rustc syntax\n DEPS_rustc_borrowck := rustc log graphviz syntax\n DEPS_rustc_resolve := rustc log syntax\n@@ -83,6 +83,7 @@ DEPS_rustc_lint := rustc log syntax\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n               log graphviz rustc_llvm rustc_back rustc_data_structures\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n+DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n DEPS_rustc_back := std syntax rustc_llvm flate log libc\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts \\"}, {"sha": "2bdb9ce4327bc12bf12a56b8a5b1df020011e163", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {Intrinsic, i, f, v};\n+use rustc::middle::ty;\n+\n+macro_rules! p {\n+    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n+        plain!(concat!(\"llvm.aarch64.neon.\", $name), ($($inputs),*) -> $output)\n+    }\n+}\n+pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    Some(match name {\n+        \"vmaxvq_u8\" => p!(\"umaxv.i8.v16i8\", (i8x16) -> i8),\n+        \"vmaxvq_u16\" => p!(\"umaxv.i16.v8i16\", (i16x8) -> i16),\n+        \"vmaxvq_u32\" => p!(\"umaxv.i32.v4i32\", (i32x4) -> i32),\n+\n+        \"vmaxvq_s8\" => p!(\"smaxv.i8.v16i8\", (i8x16) -> i8),\n+        \"vmaxvq_s16\" => p!(\"smaxv.i16.v8i16\", (i16x8) -> i16),\n+        \"vmaxvq_s32\" => p!(\"smaxv.i32.v4i32\", (i32x4) -> i32),\n+\n+        \"vminvq_u8\" => p!(\"uminv.i8.v16i8\", (i8x16) -> i8),\n+        \"vminvq_u16\" => p!(\"uminv.i16.v8i16\", (i16x8) -> i16),\n+        \"vminvq_u32\" => p!(\"uminv.i32.v4i32\", (i32x4) -> i32),\n+        \"vminvq_s8\" => p!(\"sminv.i8.v16i8\", (i8x16) -> i8),\n+        \"vminvq_s16\" => p!(\"sminv.i16.v8i16\", (i16x8) -> i16),\n+        \"vminvq_s32\" => p!(\"sminv.i32.v4i32\", (i32x4) -> i32),\n+\n+        \"vsqrtq_f32\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n+        \"vsqrtq_f64\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n+\n+        \"vrsqrteq_f32\" => p!(\"vrsqrte.v4f32\", (f32x4) -> f32x4),\n+        \"vrsqrteq_f64\" => p!(\"vrsqrte.v2f64\", (f64x2) -> f64x2),\n+\n+        \"vmaxq_f32\" => p!(\"fmax.v4f32\", (f32x4, f32x4) -> f32x4),\n+        \"vmaxq_f64\" => p!(\"fmax.v2f64\", (f64x2, f64x2) -> f64x2),\n+\n+        \"vminq_f32\" => p!(\"fmin.v4f32\", (f32x4, f32x4) -> f32x4),\n+        \"vminq_f64\" => p!(\"fmin.v2f64\", (f64x2, f64x2) -> f64x2),\n+        _ => return None,\n+    })\n+}"}, {"sha": "7fa7d45a600f5b8c5c2140eea8b91af09e49cc55", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {Intrinsic, i, f, v};\n+use rustc::middle::ty;\n+\n+macro_rules! p {\n+    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n+        plain!(concat!(\"llvm.arm.neon.\", $name), ($($inputs),*) -> $output)\n+    }\n+}\n+pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    Some(match name {\n+        \"vpmax_u8\" => p!(\"vpmaxu.v8i8\", (i8x8, i8x8) -> i8x8),\n+        \"vpmax_s8\" => p!(\"vpmaxs.v8i8\", (i8x8, i8x8) -> i8x8),\n+        \"vpmax_u16\" => p!(\"vpmaxu.v4i16\", (i16x4, i16x4) -> i16x4),\n+        \"vpmax_s16\" => p!(\"vpmaxs.v4i16\", (i16x4, i16x4) -> i16x4),\n+        \"vpmax_u32\" => p!(\"vpmaxu.v2i32\", (i32x2, i32x2) -> i32x2),\n+        \"vpmax_s32\" => p!(\"vpmaxs.v2i32\", (i32x2, i32x2) -> i32x2),\n+\n+        \"vpmin_u8\" => p!(\"vpminu.v8i8\", (i8x8, i8x8) -> i8x8),\n+        \"vpmin_s8\" => p!(\"vpmins.v8i8\", (i8x8, i8x8) -> i8x8),\n+        \"vpmin_u16\" => p!(\"vpminu.v4i16\", (i16x4, i16x4) -> i16x4),\n+        \"vpmin_s16\" => p!(\"vpmins.v4i16\", (i16x4, i16x4) -> i16x4),\n+        \"vpmin_u32\" => p!(\"vpminu.v2i32\", (i32x2, i32x2) -> i32x2),\n+        \"vpmin_s32\" => p!(\"vpmins.v2i32\", (i32x2, i32x2) -> i32x2),\n+\n+        \"vsqrtq_f32\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n+        \"vsqrtq_f64\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n+\n+        \"vrsqrteq_f32\" => p!(\"vrsqrte.v4f32\", (f32x4) -> f32x4),\n+        \"vrsqrteq_f64\" => p!(\"vrsqrte.v2f64\", (f64x2) -> f64x2),\n+\n+        \"vmaxq_f32\" => p!(\"vmaxs.v4f32\", (f32x4, f32x4) -> f32x4),\n+\n+        \"vminq_f32\" => p!(\"vmins.v4f32\", (f32x4, f32x4) -> f32x4),\n+        _ => return None,\n+    })\n+}"}, {"sha": "17e98770e835b9b322785f35cc43ee7c7f52fa07", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(stage0, feature(custom_attribute))]\n+#![crate_name = \"rustc_platform_intrinsics\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![staged_api]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![feature(staged_api, rustc_private)]\n+\n+extern crate rustc_llvm as llvm;\n+extern crate rustc;\n+\n+use rustc::middle::ty;\n+\n+pub struct Intrinsic {\n+    pub inputs: Vec<Type>,\n+    pub output: Type,\n+\n+    pub definition: IntrinsicDef,\n+}\n+\n+#[derive(Clone)]\n+pub enum Type {\n+    Integer(u8),\n+    Float(u8),\n+    Pointer(Box<Type>),\n+    Vector(Box<Type>, u8),\n+}\n+\n+pub enum IntrinsicDef {\n+    Named(&'static str),\n+}\n+\n+fn i(width: u8) -> Type { Type::Integer(width) }\n+fn f(width: u8) -> Type { Type::Float(width) }\n+fn v(x: Type, length: u8) -> Type { Type::Vector(Box::new(x), length) }\n+\n+macro_rules! ty {\n+    (f32x4) => (v(f(32), 4));\n+    (f64x2) => (v(f(64), 2));\n+\n+    (i8x16) => (v(i(8), 16));\n+    (i16x8) => (v(i(16), 8));\n+    (i32x4) => (v(i(32), 4));\n+    (i64x2) => (v(i(64), 2));\n+\n+    (f32x2) => (v(f(32), 2));\n+    (i8x8) => (v(i(8), 8));\n+    (i16x4) => (v(i(16), 4));\n+    (i32x2) => (v(i(32), 2));\n+\n+    (i64) => (i(64));\n+    (i32) => (i(32));\n+    (i16) => (i(16));\n+    (i8) => (i(8));\n+    (f32) => (f(32));\n+    (f64) => (f(64));\n+}\n+macro_rules! plain {\n+    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n+        Intrinsic {\n+            inputs: vec![$(ty!($inputs)),*],\n+            output: ty!($output),\n+            definition: ::IntrinsicDef::Named($name)\n+        }\n+    }\n+}\n+\n+mod x86;\n+mod arm;\n+mod aarch64;\n+\n+impl Intrinsic {\n+    pub fn find<'tcx>(tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+        if name.starts_with(\"x86_\") {\n+            x86::find(tcx, &name[\"x86_\".len()..])\n+        } else if name.starts_with(\"arm_\") {\n+            arm::find(tcx, &name[\"arm_\".len()..])\n+        } else if name.starts_with(\"aarch64_\") {\n+            aarch64::find(tcx, &name[\"aarch64_\".len()..])\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "93cadf8b6945df4cd8e8568bf322fc03ba498413", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {Intrinsic, i, f, v};\n+use rustc::middle::ty;\n+\n+macro_rules! p {\n+    ($name: expr, ($($inputs: tt),*) -> $output: tt) => {\n+        plain!(concat!(\"llvm.x86.\", $name), ($($inputs),*) -> $output)\n+    }\n+}\n+\n+pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    Some(match name {\n+        \"mm_movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n+        \"mm_movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n+        \"mm_movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n+\n+        \"mm_rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n+\n+        \"mm_sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n+        \"mm_sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n+\n+        \"mm_max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n+        \"mm_max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n+\n+        \"mm_min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n+        \"mm_min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n+        _ => return None\n+    })\n+}"}, {"sha": "23f21f337f30238c26b15c3bc163e48c0f81e819", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -54,6 +54,7 @@ extern crate libc;\n extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_llvm as llvm;\n+extern crate rustc_platform_intrinsics as intrinsics;\n extern crate serialize;\n \n #[macro_use] extern crate log;"}, {"sha": "f79b62878c1e9eca8b282c8f942ecabdb856cf9e", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -11,6 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use arena::TypedArena;\n+use intrinsics::{self, Intrinsic};\n use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeKind};\n use middle::subst;\n@@ -905,7 +906,41 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         }\n \n-        (_, _) => ccx.sess().span_bug(foreign_item.span, \"unknown intrinsic\")\n+        (_, _) => {\n+            match Intrinsic::find(tcx, &name) {\n+                None => ccx.sess().span_bug(foreign_item.span, \"unknown intrinsic\"),\n+                Some(intr) => {\n+                    fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type) -> Type {\n+                        use intrinsics::Type::*;\n+                        match *t {\n+                            Integer(x) => Type::ix(ccx, x as u64),\n+                            Float(x) => {\n+                                match x {\n+                                    32 => Type::f32(ccx),\n+                                    64 => Type::f64(ccx),\n+                                    _ => unreachable!()\n+                                }\n+                            }\n+                            Pointer(_) => unimplemented!(),\n+                            Vector(ref t, length) => Type::vector(&ty_to_type(ccx, t),\n+                                                                  length as u64)\n+                        }\n+                    }\n+\n+                    let inputs = intr.inputs.iter().map(|t| ty_to_type(ccx, t)).collect::<Vec<_>>();\n+                    let outputs = ty_to_type(ccx, &intr.output);\n+                    match intr.definition {\n+                        intrinsics::IntrinsicDef::Named(name) => {\n+                            let f = declare::declare_cfn(ccx,\n+                                                         name,\n+                                                         Type::func(&inputs, &outputs),\n+                                                         tcx.mk_nil());\n+                            Call(bcx, f, &llargs, None, call_debug_location)\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     };\n \n     if val_ty(llval) != Type::void(ccx) &&"}, {"sha": "56230ae06f9e1cb931d5da67c420d67d179ad68b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af385bddb3076637ab299672c90702562644894/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9af385bddb3076637ab299672c90702562644894", "patch": "@@ -5378,6 +5378,12 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                 (0, vec![tcx.mk_fn(None, fn_ty), mut_u8], mut_u8)\n             }\n \n+            name if name.starts_with(\"x86_\") ||\n+                    name.starts_with(\"arm_\") ||\n+                    name.starts_with(\"aarch64_\") => {\n+                // FIXME: skip checking these for now\n+                return\n+            }\n             ref other => {\n                 span_err!(tcx.sess, it.span, E0093,\n                     \"unrecognized intrinsic function: `{}`\", *other);"}]}