{"sha": "36e1d9f3edee62058a871d432a07dc4326f3e082", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZTFkOWYzZWRlZTYyMDU4YTg3MWQ0MzJhMDdkYzQzMjZmM2UwODI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-18T22:24:31Z"}, "message": "Rollup merge of #55562 - smaeul:powerpc-linux-musl, r=alexcrichton\n\nAdd powerpc- and powerpc64-unknown-linux-musl targets\n\nAdd targets for musl on 32-bit and 64-bit powerpc. This requires some ABI fixes, as musl [uses the ELFv2 ABI on regardless of endianness](http://git.musl-libc.org/cgit/musl/tree/configure?id=8084d6ab57cdb0b8f328d3cdbad3b9d09eaaee04#n638). At the moment, powerpc64 support requires [an LLVM patch](https://reviews.llvm.org/D52013) to select the correct ABI; or I can add [a patch to Rust's LLVM backend](https://github.com/smaeul/rust/commit/e8eaa2afd51ed9950096359a040ba1603907cdd1) to always choose the right ABI.\n\nBoth architectures are able to run an extended bootstrap, and with some test fixes (e.g. #55561), there are no architecture-dependent test failures on powerpc64 (most failures in `src/test` are existing musl-host-related issues).", "tree": {"sha": "17134d2d35ceaa595dc281b1575aa2a6ebe5a6b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17134d2d35ceaa595dc281b1575aa2a6ebe5a6b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e1d9f3edee62058a871d432a07dc4326f3e082", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8eafCRBK7hj4Ov3rIwAAdHIIAAXXPzmTi/WI6RJN6eh1+/bB\ndJuvQ4dViJ9gx13ojQy7esS8kj2VyNlcPvK3IHQbTnC0apAF0q3sRZ3YLCW80Niu\n8X/r2l+SeBl8wRIU5Swvxmo6KTfJqEt+bKHSh9XD3ROvs2xVrXSSJEZGhTj6LHJ3\nmxRmTqKsMIK8jo8E2xhxGULv/NxeR6Ch7YQSJaBR83N/Fd/Mfi12AHGG6DaFg+s5\nKKW5cr0G5twJU12Dgt9Tz0mdEbvy5visP8A4T+ehbJHrqjxCl8FqBWz9LPogYtvX\n1BuJW4DMwaxoI/YV0KG5Ia1a2iwQg+3/6IQtH1bYY77hekxxIPq7yQMjE8pJ0kg=\n=s7K+\n-----END PGP SIGNATURE-----\n", "payload": "tree 17134d2d35ceaa595dc281b1575aa2a6ebe5a6b6\nparent 13c9439925797cd7a65c917d047c07a500d9bfe6\nparent 4f9c86038529880458195daafd97d4cbc8f9ee27\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579871 +0100\ncommitter GitHub <noreply@github.com> 1542579871 +0100\n\nRollup merge of #55562 - smaeul:powerpc-linux-musl, r=alexcrichton\n\nAdd powerpc- and powerpc64-unknown-linux-musl targets\n\nAdd targets for musl on 32-bit and 64-bit powerpc. This requires some ABI fixes, as musl [uses the ELFv2 ABI on regardless of endianness](http://git.musl-libc.org/cgit/musl/tree/configure?id=8084d6ab57cdb0b8f328d3cdbad3b9d09eaaee04#n638). At the moment, powerpc64 support requires [an LLVM patch](https://reviews.llvm.org/D52013) to select the correct ABI; or I can add [a patch to Rust's LLVM backend](https://github.com/smaeul/rust/commit/e8eaa2afd51ed9950096359a040ba1603907cdd1) to always choose the right ABI.\n\nBoth architectures are able to run an extended bootstrap, and with some test fixes (e.g. #55561), there are no architecture-dependent test failures on powerpc64 (most failures in `src/test` are existing musl-host-related issues).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e1d9f3edee62058a871d432a07dc4326f3e082", "html_url": "https://github.com/rust-lang/rust/commit/36e1d9f3edee62058a871d432a07dc4326f3e082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e1d9f3edee62058a871d432a07dc4326f3e082/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c9439925797cd7a65c917d047c07a500d9bfe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c9439925797cd7a65c917d047c07a500d9bfe6", "html_url": "https://github.com/rust-lang/rust/commit/13c9439925797cd7a65c917d047c07a500d9bfe6"}, {"sha": "4f9c86038529880458195daafd97d4cbc8f9ee27", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9c86038529880458195daafd97d4cbc8f9ee27", "html_url": "https://github.com/rust-lang/rust/commit/4f9c86038529880458195daafd97d4cbc8f9ee27"}], "stats": {"total": 111, "additions": 88, "deletions": 23}, "files": [{"sha": "f7ef1390f14deace706a5f8b47883bbd61a8cb23", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=36e1d9f3edee62058a871d432a07dc4326f3e082", "patch": "@@ -14,11 +14,12 @@\n \n use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n use abi::{Align, Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use spec::HasTargetSpec;\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n enum ABI {\n     ELFv1, // original ABI used for powerpc64 (big-endian)\n-    ELFv2, // newer ABI used for powerpc64le\n+    ELFv2, // newer ABI used for powerpc64le and musl (both endians)\n }\n use self::ABI::*;\n \n@@ -75,7 +76,9 @@ fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>, abi: ABI)\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n+        let unit = if cx.data_layout().endian == Endian::Big {\n+            Reg { kind: RegKind::Integer, size }\n+        } else if bits <= 8 {\n             Reg::i8()\n         } else if bits <= 16 {\n             Reg::i16()\n@@ -110,22 +113,15 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n     }\n \n     let size = arg.layout.size;\n-    let (unit, total) = match abi {\n-        ELFv1 => {\n-            // In ELFv1, aggregates smaller than a doubleword should appear in\n-            // the least-significant bits of the parameter doubleword.  The rest\n-            // should be padded at their tail to fill out multiple doublewords.\n-            if size.bits() <= 64 {\n-                (Reg { kind: RegKind::Integer, size }, size)\n-            } else {\n-                let align = Align::from_bits(64, 64).unwrap();\n-                (Reg::i64(), size.abi_align(align))\n-            }\n-        },\n-        ELFv2 => {\n-            // In ELFv2, we can just cast directly.\n-            (Reg::i64(), size)\n-        },\n+    let (unit, total) = if size.bits() <= 64 {\n+        // Aggregates smaller than a doubleword should appear in\n+        // the least-significant bits of the parameter doubleword.\n+        (Reg { kind: RegKind::Integer, size }, size)\n+    } else {\n+        // Aggregates larger than a doubleword should be padded\n+        // at the tail to fill out a whole number of doublewords.\n+        let align = Align::from_bits(64, 64).unwrap();\n+        (Reg::i64(), size.abi_align(align))\n     };\n \n     arg.cast_to(Uniform {\n@@ -136,11 +132,15 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n     where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n {\n-    let abi = match cx.data_layout().endian {\n-        Endian::Big => ELFv1,\n-        Endian::Little => ELFv2,\n+    let abi = if cx.target_spec().target_env == \"musl\" {\n+        ELFv2\n+    } else {\n+        match cx.data_layout().endian {\n+            Endian::Big => ELFv1,\n+            Endian::Little => ELFv2\n+        }\n     };\n \n     if !fty.ret.is_ignore() {"}, {"sha": "22afb0da05bc14843bd66b4dd34dda2549d80f20", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=36e1d9f3edee62058a871d432a07dc4326f3e082", "patch": "@@ -229,7 +229,7 @@ impl HasDataLayout for TargetDataLayout {\n }\n \n /// Endianness of the target, which must match cfg(target-endian).\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Endian {\n     Little,\n     Big"}, {"sha": "f67152ee90b7a0abcd9cd31b6291fd8fe4ad4f89", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=36e1d9f3edee62058a871d432a07dc4326f3e082", "patch": "@@ -297,7 +297,9 @@ supported_targets! {\n     (\"mipsel-unknown-linux-gnu\", mipsel_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnuspe\", powerpc_unknown_linux_gnuspe),\n+    (\"powerpc-unknown-linux-musl\", powerpc_unknown_linux_musl),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n+    (\"powerpc64-unknown-linux-musl\", powerpc64_unknown_linux_musl),\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n     (\"powerpc64le-unknown-linux-musl\", powerpc64le_unknown_linux_musl),\n     (\"s390x-unknown-linux-gnu\", s390x_unknown_linux_gnu),"}, {"sha": "95e95510e1feaa729eff698ddadc8572c73b642f", "filename": "src/librustc_target/spec/powerpc64_unknown_linux_musl.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=36e1d9f3edee62058a871d432a07dc4326f3e082", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"ppc64\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        arch: \"powerpc64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "1a4d0cb323f1fdef373e4ace1b45a867689ab2fe", "filename": "src/librustc_target/spec/powerpc_unknown_linux_musl.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e1d9f3edee62058a871d432a07dc4326f3e082/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=36e1d9f3edee62058a871d432a07dc4326f3e082", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.max_atomic_width = Some(32);\n+\n+    Ok(Target {\n+        llvm_target: \"powerpc-unknown-linux-musl\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n+        arch: \"powerpc\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}]}