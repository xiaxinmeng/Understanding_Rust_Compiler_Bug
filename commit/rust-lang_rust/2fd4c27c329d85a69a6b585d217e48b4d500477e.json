{"sha": "2fd4c27c329d85a69a6b585d217e48b4d500477e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDRjMjdjMzI5ZDg1YTY5YTZiNTg1ZDIxN2U0OGI0ZDUwMDQ3N2U=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-19T03:02:08Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-19T03:17:34Z"}, "message": "add is_async_fn query", "tree": {"sha": "7abb4388be80e473e29c68891d6908996fa74416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abb4388be80e473e29c68891d6908996fa74416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd4c27c329d85a69a6b585d217e48b4d500477e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4c27c329d85a69a6b585d217e48b4d500477e", "html_url": "https://github.com/rust-lang/rust/commit/2fd4c27c329d85a69a6b585d217e48b4d500477e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4c27c329d85a69a6b585d217e48b4d500477e/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528379121ceb5fca5382b4337be7ac064890ec8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/528379121ceb5fca5382b4337be7ac064890ec8c", "html_url": "https://github.com/rust-lang/rust/commit/528379121ceb5fca5382b4337be7ac064890ec8c"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "c4f62df12b766222afc8ba4ba8d730d58e264c40", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=2fd4c27c329d85a69a6b585d217e48b4d500477e", "patch": "@@ -244,6 +244,10 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         }\n \n+        query is_async_fn(key: DefId) -> hir::IsAsync {\n+            desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n+        }\n+\n         /// Returns `true` if calls to the function may be promoted.\n         ///\n         /// This is either because the function is e.g., a tuple-struct or tuple-variant"}, {"sha": "6db3bfd8880ff875b28c8409d950dfda5cd95ce4", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=2fd4c27c329d85a69a6b585d217e48b4d500477e", "patch": "@@ -133,6 +133,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n+    is_async_fn { cdata.fn_asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }"}, {"sha": "6cc5c409e1331dc4fbd4b394a0687bfa4e3d5015", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2fd4c27c329d85a69a6b585d217e48b4d500477e", "patch": "@@ -1208,6 +1208,15 @@ impl<'a, 'tcx> CrateMetadata {\n         constness == hir::Constness::Const\n     }\n \n+    pub fn is_async_fn(&self, id: DefIndex) -> bool {\n+        let asyncness = match self.entry(id).kind {\n+            EntryKind::Fn(data) => data.decode(self).asyncness,\n+            EntryKind::Method(data) => data.decode(self).fn_data.asyncness,\n+            _ => hir::IsAsync::NotAsync,\n+        };\n+        asyncness == hir::IsAsync::Async\n+    }\n+\n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {\n         match self.entry(id).kind {\n             EntryKind::ForeignImmStatic |"}, {"sha": "439763810ec0e652d598784743490ef44677e929", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2fd4c27c329d85a69a6b585d217e48b4d500477e", "patch": "@@ -885,6 +885,7 @@ impl EncodeContext<'tcx> {\n                         }\n                     };\n                     FnData {\n+                        asyncness: hir::IsAsync::NotAsync,\n                         constness: hir::Constness::NotConst,\n                         param_names,\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n@@ -982,6 +983,7 @@ impl EncodeContext<'tcx> {\n             ty::AssocKind::Method => {\n                 let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n                     FnData {\n+                        asyncness: sig.header.asyncness,\n                         constness: sig.header.constness,\n                         param_names: self.encode_fn_param_names_for_body(body),\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n@@ -1128,6 +1130,7 @@ impl EncodeContext<'tcx> {\n             }\n             hir::ItemKind::Fn(_, header, .., body) => {\n                 let data = FnData {\n+                    asyncness: header.asyncness,\n                     constness: header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                     sig: self.lazy(tcx.fn_sig(def_id)),\n@@ -1675,6 +1678,7 @@ impl EncodeContext<'tcx> {\n         let kind = match nitem.node {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 let data = FnData {\n+                    asyncness: hir::IsAsync::NotAsync,\n                     constness: hir::Constness::NotConst,\n                     param_names: self.encode_fn_param_names(names),\n                     sig: self.lazy(tcx.fn_sig(def_id)),"}, {"sha": "92534ab056a8bc141ec02405fc7cd25da2c7f5bf", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4c27c329d85a69a6b585d217e48b4d500477e/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=2fd4c27c329d85a69a6b585d217e48b4d500477e", "patch": "@@ -295,6 +295,7 @@ pub struct MacroDef {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct FnData<'tcx> {\n+    pub asyncness: hir::IsAsync,\n     pub constness: hir::Constness,\n     pub param_names: Lazy<[ast::Name]>,\n     pub sig: Lazy<ty::PolyFnSig<'tcx>>,"}]}