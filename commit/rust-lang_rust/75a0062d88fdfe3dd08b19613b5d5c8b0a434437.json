{"sha": "75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTAwNjJkODhmZGZlM2RkMDhiMTk2MTNiNWQ1YzhiMGE0MzQ0Mzc=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-22T15:55:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:25:43Z"}, "message": "Add `string::raw::from_buf`", "tree": {"sha": "138e59c373285dad87986b9d6b17ef40acb5f57b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138e59c373285dad87986b9d6b17ef40acb5f57b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "html_url": "https://github.com/rust-lang/rust/commit/75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684479ab915afcbd1b3a82e0df550e3ce06ffab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/684479ab915afcbd1b3a82e0df550e3ce06ffab2", "html_url": "https://github.com/rust-lang/rust/commit/684479ab915afcbd1b3a82e0df550e3ce06ffab2"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "f013557f9a53254e18eafe531535c98d5d5c3239", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "patch": "@@ -555,9 +555,6 @@ impl<'a> fmt::Show for MaybeOwned<'a> {\n \n /// Unsafe operations\n pub mod raw {\n-    use core::mem;\n-    use core::raw::Slice;\n-    use core::ptr::RawPtr;\n     use string;\n     use string::String;\n     use vec::Vec;\n@@ -573,19 +570,10 @@ pub mod raw {\n         string::raw::from_buf_len(buf, len)\n     }\n \n-    /// Deprecated. Use `CString::as_str().unwrap().to_string()`\n-    #[deprecated = \"Use CString::as_str().unwrap().to_string()\"]\n+    /// Deprecated. Use `string::raw::from_buf`\n+    #[deprecated = \"Use string::raw::from_buf\"]\n     pub unsafe fn from_c_str(c_string: *const i8) -> String {\n-        let mut buf = String::new();\n-        let mut len = 0;\n-        while *c_string.offset(len) != 0 {\n-            len += 1;\n-        }\n-        buf.push_bytes(mem::transmute(Slice {\n-            data: c_string,\n-            len: len as uint,\n-        }));\n-        buf\n+        string::raw::from_buf(c_string as *const u8)\n     }\n \n     /// Deprecated. Replaced by `string::raw::from_utf8`"}, {"sha": "282193d08aa81a94b4092c045ad70b0c3538008f", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "patch": "@@ -61,7 +61,7 @@ impl String {\n     #[inline]\n     #[deprecated = \"Replaced by string::raw::from_parts\"]\n     pub unsafe fn from_raw_parts(length: uint, capacity: uint, ptr: *mut u8) -> String {\n-        raw::from_parts(length, capacity, ptr)\n+        raw::from_parts(ptr, length, capacity)\n     }\n \n     #[allow(missing_doc)]\n@@ -571,6 +571,7 @@ impl<S: Str> Add<S, String> for String {\n \n pub mod raw {\n     use core::mem;\n+    use core::ptr::RawPtr;\n     use core::raw::Slice;\n \n     use super::String;\n@@ -582,21 +583,13 @@ pub mod raw {\n     /// * We call `Vec::from_raw_parts` to get a `Vec<u8>`\n     /// * We assume that the `Vec` contains valid UTF-8\n     #[inline]\n-    pub unsafe fn from_parts(length: uint, capacity: uint, ptr: *mut u8) -> String {\n+    pub unsafe fn from_parts(buf: *mut u8, length: uint, capacity: uint) -> String {\n         String {\n-            vec: Vec::from_raw_parts(length, capacity, ptr),\n+            vec: Vec::from_raw_parts(length, capacity, buf),\n         }\n     }\n \n-    /// Converts a vector of bytes to a new `String` without checking if\n-    /// it contains valid UTF-8. This is unsafe because it assumes that\n-    /// the utf-8-ness of the vector has already been validated.\n-    #[inline]\n-    pub unsafe fn from_utf8(bytes: Vec<u8>) -> String {\n-        String { vec: bytes }\n-    }\n-\n-    /// Create a Rust string from a *u8 buffer of the given length\n+    /// Create `String` from a *u8 buffer of the given length\n     ///\n     /// This function is unsafe because of two reasons:\n     /// * A raw pointer is dereferenced and transmuted to `&[u8]`\n@@ -609,6 +602,27 @@ pub mod raw {\n         });\n         self::from_utf8(slice.to_vec())\n     }\n+\n+    /// Create a `String` from a null-terminated *u8 buffer\n+    ///\n+    /// This function is unsafe because we dereference memory until we find the NUL character,\n+    /// which is not guaranteed to be present. Additionaly, the slice is not checked to see\n+    /// whether it contains valid UTF-8\n+    pub unsafe fn from_buf(buf: *const u8) -> String {\n+        let mut len = 0;\n+        while *buf.offset(len) != 0 {\n+            len += 1;\n+        }\n+        self::from_buf_len(buf, len as uint)\n+    }\n+\n+    /// Converts a vector of bytes to a new `String` without checking if\n+    /// it contains valid UTF-8. This is unsafe because it assumes that\n+    /// the utf-8-ness of the vector has already been validated.\n+    #[inline]\n+    pub unsafe fn from_utf8(bytes: Vec<u8>) -> String {\n+        String { vec: bytes }\n+    }\n }\n \n #[cfg(test)]\n@@ -776,6 +790,16 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_from_buf() {\n+        unsafe {\n+            let a = vec![65, 65, 65, 65, 65, 65, 65, 0];\n+            let b = a.as_ptr();\n+            let c = super::raw::from_buf(b);\n+            assert_eq!(c, String::from_str(\"AAAAAAA\"));\n+        }\n+    }\n+\n     #[test]\n     fn test_push_bytes() {\n         let mut s = String::from_str(\"ABC\");"}, {"sha": "e9d92e45f62d9005c08c7c192803c51d562c8ae6", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "patch": "@@ -19,8 +19,9 @@ use middle::trans::context::CrateContext;\n use syntax::ast;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n-use std::c_str::{CString, ToCStr};\n+use std::c_str::ToCStr;\n use std::mem;\n+use std::string;\n use std::cell::RefCell;\n use std::collections::HashMap;\n \n@@ -333,7 +334,7 @@ impl TypeNames {\n     pub fn type_to_string(&self, ty: Type) -> String {\n         unsafe {\n             let s = llvm::LLVMTypeToString(ty.to_ref());\n-            let ret = CString::new(s, false).as_str().unwrap().to_string();\n+            let ret = string::raw::from_buf(s as *const u8);\n             free(s as *mut c_void);\n             ret\n         }\n@@ -347,7 +348,7 @@ impl TypeNames {\n     pub fn val_to_string(&self, val: ValueRef) -> String {\n         unsafe {\n             let s = llvm::LLVMValueToString(val);\n-            let ret = CString::new(s, false).as_str().unwrap().to_string();\n+            let ret = string::raw::from_buf(s as *const u8);\n             free(s as *mut c_void);\n             ret\n         }"}, {"sha": "4d23397cd383bf95740d7b751395fa098d225ef4", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "patch": "@@ -55,10 +55,10 @@ extern crate libc;\n extern crate alloc;\n \n use libc::{c_int, c_void};\n-use std::c_str::CString;\n use std::fmt;\n use std::mem;\n use std::ptr;\n+use std::string;\n use std::rt::local::Local;\n use std::rt::rtio;\n use std::rt::rtio::{IoResult, IoError};\n@@ -363,7 +363,7 @@ impl UvError {\n             let inner = match self { &UvError(a) => a };\n             let name_str = uvll::uv_err_name(inner);\n             assert!(name_str.is_not_null());\n-            CString::new(name_str, false).as_str().unwrap().to_string()\n+            string::raw::from_buf(name_str as *const u8)\n         }\n     }\n \n@@ -372,7 +372,7 @@ impl UvError {\n             let inner = match self { &UvError(a) => a };\n             let desc_str = uvll::uv_strerror(inner);\n             assert!(desc_str.is_not_null());\n-            CString::new(desc_str, false).as_str().unwrap().to_string()\n+            string::raw::from_buf(desc_str as *const u8)\n         }\n     }\n "}, {"sha": "ebcb60253f59cedbab80ce92bfde482d452e6e23", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a0062d88fdfe3dd08b19613b5d5c8b0a434437/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=75a0062d88fdfe3dd08b19613b5d5c8b0a434437", "patch": "@@ -49,7 +49,6 @@ use slice::{Vector, ImmutableVector, MutableVector, ImmutableEqVector};\n use str::{Str, StrSlice, StrAllocating};\n use string::String;\n use sync::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n-use to_string::ToString;\n use vec::Vec;\n \n #[cfg(unix)]\n@@ -998,7 +997,7 @@ pub fn error_string(errnum: uint) -> String {\n                 fail!(\"strerror_r failure\");\n             }\n \n-            ::c_str::CString::new(p as *const c_char, false).as_str().unwrap().to_string()\n+            ::string::raw::from_buf(p as *const u8)\n         }\n     }\n "}]}