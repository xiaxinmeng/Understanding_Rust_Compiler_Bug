{"sha": "259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "node_id": "C_kwDOAAsO6NoAKDI1OWIyMWZkNDZiOWNjZmQwODRiY2UzZWM4MDQzNTQzY2E5ZWE2MWE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T15:25:26Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T15:25:52Z"}, "message": "Remove TyCtxt from DebugContext\n\nAnd explicitly thread it through everwhere it is needed.", "tree": {"sha": "69cfc8704963328a6fafb0e9ee0fd1802d82947a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69cfc8704963328a6fafb0e9ee0fd1802d82947a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "html_url": "https://github.com/rust-lang/rust/commit/259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5493a5ea260a4f112a081c4bc488d85049ca36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5493a5ea260a4f112a081c4bc488d85049ca36c", "html_url": "https://github.com/rust-lang/rust/commit/e5493a5ea260a4f112a081c4bc488d85049ca36c"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "b2026f30d17a47971e61ac7a5744f32aee348831", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -24,7 +24,7 @@ struct CodegenedFunction<'tcx> {\n \n pub(crate) fn codegen_and_compile_fn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    cx: &mut crate::CodegenCx<'tcx>,\n+    cx: &mut crate::CodegenCx,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n@@ -35,12 +35,12 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n     let codegened_func = codegen_fn(tcx, cx, cached_func, module, instance);\n \n-    compile_fn(cx, cached_context, module, codegened_func);\n+    compile_fn(tcx, cx, cached_context, module, codegened_func);\n }\n \n fn codegen_fn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    cx: &mut crate::CodegenCx<'tcx>,\n+    cx: &mut crate::CodegenCx,\n     cached_func: Function,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n@@ -132,7 +132,8 @@ fn codegen_fn<'tcx>(\n }\n \n fn compile_fn<'tcx>(\n-    cx: &mut crate::CodegenCx<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    cx: &mut crate::CodegenCx,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n     codegened_func: CodegenedFunction<'tcx>,\n@@ -214,6 +215,7 @@ fn compile_fn<'tcx>(\n     cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n             debug_context.define_function(\n+                tcx,\n                 codegened_func.func_id,\n                 codegened_func.symbol_name.name,\n                 context,"}, {"sha": "1adb64da8bd6a6cd8bc394bb711d709acbc9f8dd", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -232,7 +232,7 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n }\n \n pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n-    pub(crate) cx: &'clif mut crate::CodegenCx<'tcx>,\n+    pub(crate) cx: &'clif mut crate::CodegenCx,\n     pub(crate) module: &'m mut dyn Module,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) target_config: TargetFrontendConfig, // Cached from module"}, {"sha": "9583cd2ec60f8a5bcf3bb3d4b0b74ea806f97614", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -9,7 +9,7 @@ use gimli::{RunTimeEndian, SectionId};\n use super::object::WriteDebugInfo;\n use super::DebugContext;\n \n-impl DebugContext<'_> {\n+impl DebugContext {\n     pub(crate) fn emit(&mut self, product: &mut ObjectProduct) {\n         let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n         let root = self.dwarf.unit.root();"}, {"sha": "de402a4c713f3d6bf21d5aa21c24e351b23bf9c4", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -96,9 +96,9 @@ fn line_program_add_file(\n     }\n }\n \n-impl<'tcx> DebugContext<'tcx> {\n-    pub(super) fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n-        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+impl DebugContext {\n+    fn emit_location(&mut self, tcx: TyCtxt<'_>, entry_id: UnitEntryId, span: Span) {\n+        let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n@@ -115,13 +115,13 @@ impl<'tcx> DebugContext<'tcx> {\n \n     pub(super) fn create_debug_lines(\n         &mut self,\n+        tcx: TyCtxt<'_>,\n         symbol: usize,\n         entry_id: UnitEntryId,\n         context: &Context,\n         function_span: Span,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n-        let tcx = self.tcx;\n         let line_program = &mut self.dwarf.unit.line_program;\n \n         let line_strings = &mut self.dwarf.line_strings;\n@@ -211,7 +211,7 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(u64::from(func_end)));\n \n-        self.emit_location(entry_id, function_span);\n+        self.emit_location(tcx, entry_id, function_span);\n \n         func_end\n     }"}, {"sha": "3e42905c84069c421c6c76b1ea73a1cd70899729", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -16,17 +16,15 @@ use gimli::{Encoding, Format, LineEncoding, RunTimeEndian};\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n pub(crate) use unwind::UnwindContext;\n \n-pub(crate) struct DebugContext<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-\n+pub(crate) struct DebugContext {\n     endian: RunTimeEndian,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n }\n \n-impl<'tcx> DebugContext<'tcx> {\n-    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n+impl DebugContext {\n+    pub(crate) fn new(tcx: TyCtxt<'_>, isa: &dyn TargetIsa) -> Self {\n         let encoding = Encoding {\n             format: Format::Dwarf32,\n             // FIXME this should be configurable\n@@ -92,11 +90,12 @@ impl<'tcx> DebugContext<'tcx> {\n             root.set(gimli::DW_AT_low_pc, AttributeValue::Address(Address::Constant(0)));\n         }\n \n-        DebugContext { tcx, endian, dwarf, unit_range_list: RangeList(Vec::new()) }\n+        DebugContext { endian, dwarf, unit_range_list: RangeList(Vec::new()) }\n     }\n \n     pub(crate) fn define_function(\n         &mut self,\n+        tcx: TyCtxt<'_>,\n         func_id: FuncId,\n         name: &str,\n         context: &Context,\n@@ -116,7 +115,7 @@ impl<'tcx> DebugContext<'tcx> {\n         entry.set(gimli::DW_AT_linkage_name, AttributeValue::StringRef(name_id));\n \n         let end =\n-            self.create_debug_lines(symbol, entry_id, context, function_span, source_info_set);\n+            self.create_debug_lines(tcx, symbol, entry_id, context, function_span, source_info_set);\n \n         self.unit_range_list.0.push(Range::StartLength {\n             begin: Address::Symbol { symbol, addend: 0 },"}, {"sha": "971e5eeea873149e41fa0f114a7df44f28bf3fb7", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -120,7 +120,7 @@ fn emit_cgu(\n     prof: &SelfProfilerRef,\n     name: String,\n     module: ObjectModule,\n-    debug: Option<DebugContext<'_>>,\n+    debug: Option<DebugContext>,\n     unwind_context: UnwindContext,\n     global_asm_object_file: Option<PathBuf>,\n ) -> Result<ModuleCodegenResult, String> {"}, {"sha": "0e77e4004c0bb5d0ef4c814c9003fa114c1b51d1", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -61,11 +61,11 @@ impl UnsafeMessage {\n     }\n }\n \n-fn create_jit_module<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn create_jit_module(\n+    tcx: TyCtxt<'_>,\n     backend_config: &BackendConfig,\n     hotswap: bool,\n-) -> (JITModule, CodegenCx<'tcx>) {\n+) -> (JITModule, CodegenCx) {\n     let crate_info = CrateInfo::new(tcx, \"dummy_target_cpu\".to_string());\n     let imported_symbols = load_imported_symbols_for_jit(tcx.sess, crate_info);\n \n@@ -353,7 +353,7 @@ fn load_imported_symbols_for_jit(\n \n fn codegen_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    cx: &mut CodegenCx<'tcx>,\n+    cx: &mut CodegenCx,\n     cached_context: &mut Context,\n     module: &mut JITModule,\n     inst: Instance<'tcx>,"}, {"sha": "40dab58523c201da80a228cf687367168c88733d", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259b21fd46b9ccfd084bce3ec8043543ca9ea61a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=259b21fd46b9ccfd084bce3ec8043543ca9ea61a", "patch": "@@ -122,20 +122,20 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n \n /// The codegen context holds any information shared between the codegen of individual functions\n /// inside a single codegen unit with the exception of the Cranelift [`Module`](cranelift_module::Module).\n-struct CodegenCx<'tcx> {\n+struct CodegenCx {\n     profiler: SelfProfilerRef,\n     output_filenames: Arc<OutputFilenames>,\n     should_write_ir: bool,\n     global_asm: String,\n     inline_asm_index: Cell<usize>,\n-    debug_context: Option<DebugContext<'tcx>>,\n+    debug_context: Option<DebugContext>,\n     unwind_context: UnwindContext,\n     cgu_name: Symbol,\n }\n \n-impl<'tcx> CodegenCx<'tcx> {\n+impl CodegenCx {\n     fn new(\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         backend_config: BackendConfig,\n         isa: &dyn TargetIsa,\n         debug_info: bool,"}]}