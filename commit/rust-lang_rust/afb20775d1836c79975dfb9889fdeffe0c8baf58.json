{"sha": "afb20775d1836c79975dfb9889fdeffe0c8baf58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYjIwNzc1ZDE4MzZjNzk5NzVkZmI5ODg5ZmRlZmZlMGM4YmFmNTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-13T18:59:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-13T19:52:04Z"}, "message": "Fix freezing of @mut Objects when passing as argument", "tree": {"sha": "7d8b890c84bc83b780a30fc99d288a911a0b895e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8b890c84bc83b780a30fc99d288a911a0b895e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb20775d1836c79975dfb9889fdeffe0c8baf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb20775d1836c79975dfb9889fdeffe0c8baf58", "html_url": "https://github.com/rust-lang/rust/commit/afb20775d1836c79975dfb9889fdeffe0c8baf58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb20775d1836c79975dfb9889fdeffe0c8baf58/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d817ee869387322dec4d3f7d407dcc9f91c2632", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d817ee869387322dec4d3f7d407dcc9f91c2632", "html_url": "https://github.com/rust-lang/rust/commit/0d817ee869387322dec4d3f7d407dcc9f91c2632"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "88f7ffbfd23cad5251e8e18a3d0886b24a79317a", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=afb20775d1836c79975dfb9889fdeffe0c8baf58", "patch": "@@ -121,9 +121,9 @@ impl Coerce {\n                 };\n             }\n \n-            ty::ty_trait(_, _, ty::RegionTraitStore(*), _, _) => {\n+            ty::ty_trait(_, _, ty::RegionTraitStore(*), m, _) => {\n                 return do self.unpack_actual_value(a) |sty_a| {\n-                    self.coerce_borrowed_object(a, sty_a, b)\n+                    self.coerce_borrowed_object(a, sty_a, b, m)\n                 };\n             }\n \n@@ -274,24 +274,23 @@ impl Coerce {\n     fn coerce_borrowed_object(&self,\n                               a: ty::t,\n                               sty_a: &ty::sty,\n-                              b: ty::t) -> CoerceResult\n+                              b: ty::t,\n+                              b_mutbl: ast::mutability) -> CoerceResult\n     {\n         debug!(\"coerce_borrowed_object(a=%s, sty_a=%?, b=%s)\",\n                a.inf_str(self.infcx), sty_a,\n                b.inf_str(self.infcx));\n \n         let tcx = self.infcx.tcx;\n         let r_a = self.infcx.next_region_var(Coercion(self.trace));\n-        let trt_mut;\n \n         let a_borrowed = match *sty_a {\n             ty::ty_trait(_, _, ty::RegionTraitStore(_), _, _) => {\n                 return self.subtype(a, b);\n             }\n-            ty::ty_trait(did, ref substs, _, m, b) => {\n-                trt_mut = m;\n+            ty::ty_trait(did, ref substs, _, _, b) => {\n                 ty::mk_trait(tcx, did, substs.clone(),\n-                             ty::RegionTraitStore(r_a), m, b)\n+                             ty::RegionTraitStore(r_a), b_mutbl, b)\n             }\n             _ => {\n                 return self.subtype(a, b);\n@@ -301,7 +300,7 @@ impl Coerce {\n         if_ok!(self.tys(a_borrowed, b));\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n-            autoref: Some(AutoBorrowObj(r_a, trt_mut))\n+            autoref: Some(AutoBorrowObj(r_a, b_mutbl))\n         })))\n     }\n "}, {"sha": "c70d752ef303339bc735bcd700bfa50facc76fbf", "filename": "src/test/run-fail/borrowck-wg-fail-object-arg.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs?ref=afb20775d1836c79975dfb9889fdeffe0c8baf58", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern:borrowed\n+\n+trait Foo {\n+    fn foo(&self, @mut int);\n+}\n+\n+impl Foo for int {\n+    fn foo(&self, x: @mut int) {\n+        *x += *self;\n+    }\n+}\n+\n+fn it_takes_two(f: &Foo, g: &mut Foo) {\n+}\n+\n+fn main() {\n+    let x = @mut 3_i;\n+    let y = x as @mut Foo;\n+    let z = y;\n+\n+    it_takes_two(y, z);\n+}"}, {"sha": "fe4eb2ea48e49b2304f734b0b1a73e40a380cf61", "filename": "src/test/run-pass/objects-coerce-from-managed-to-borrowed.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb20775d1836c79975dfb9889fdeffe0c8baf58/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs?ref=afb20775d1836c79975dfb9889fdeffe0c8baf58", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can coerce an `@Object` to an `&Object`\n+\n+trait Foo {\n+    fn foo(&self) -> uint;\n+    fn bar(&mut self) -> uint;\n+}\n+\n+impl Foo for uint {\n+    fn foo(&self) -> uint {\n+        *self\n+    }\n+\n+    fn bar(&mut self) -> uint {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn do_it_mut(obj: &mut Foo) {\n+    let x = obj.bar();\n+    let y = obj.foo();\n+    assert_eq!(x, y);\n+}\n+\n+fn do_it_imm(obj: &Foo, v: uint) {\n+    let y = obj.foo();\n+    assert_eq!(v, y);\n+}\n+\n+fn main() {\n+    let x = @mut 22u as @mut Foo;\n+    do_it_mut(x);\n+    do_it_imm(x, 23u);\n+}"}]}