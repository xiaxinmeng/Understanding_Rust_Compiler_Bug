{"sha": "c3ef58532852921f5a4dca5ede8d945c89421216", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZWY1ODUzMjg1MjkyMWY1YTRkY2E1ZWRlOGQ5NDVjODk0MjEyMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-12T09:45:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-12T09:45:32Z"}, "message": "Auto merge of #6982 - Jarcho:explicit_into_iter_loop_fp, r=flip1995\n\nFix `explicit_into_iter_loop`\n\nfixes: #6900\n\nchangelog: Only lint when `into_iter` is an implementation of `IntoIterator`", "tree": {"sha": "226717f1bf2ffbad156db74ced82ba64e8de8d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226717f1bf2ffbad156db74ced82ba64e8de8d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ef58532852921f5a4dca5ede8d945c89421216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ef58532852921f5a4dca5ede8d945c89421216", "html_url": "https://github.com/rust-lang/rust/commit/c3ef58532852921f5a4dca5ede8d945c89421216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ef58532852921f5a4dca5ede8d945c89421216/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecccbc579c0092e609f47fabc4d5fb6dbe110d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecccbc579c0092e609f47fabc4d5fb6dbe110d0", "html_url": "https://github.com/rust-lang/rust/commit/aecccbc579c0092e609f47fabc4d5fb6dbe110d0"}, {"sha": "6b5778eb176deda52a3960cc2029bc93f1424c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5778eb176deda52a3960cc2029bc93f1424c35", "html_url": "https://github.com/rust-lang/rust/commit/6b5778eb176deda52a3960cc2029bc93f1424c35"}], "stats": {"total": 104, "additions": 77, "deletions": 27}, "files": [{"sha": "c7a28f42ea19b65e24a0019be672549c4cb7a655", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=c3ef58532852921f5a4dca5ede8d945c89421216", "patch": "@@ -1,24 +1,25 @@\n use super::EXPLICIT_INTO_ITER_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{match_trait_method, paths};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n \n-pub(super) fn check(cx: &LateContext<'_>, args: &'hir [Expr<'hir>], arg: &Expr<'_>) {\n-    let receiver_ty = cx.typeck_results().expr_ty(&args[0]);\n-    let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-    if !TyS::same_type(receiver_ty, receiver_ty_adjusted) {\n+pub(super) fn check(cx: &LateContext<'_>, self_arg: &'hir Expr<'hir>, call_expr: &Expr<'_>) {\n+    let self_ty = cx.typeck_results().expr_ty(self_arg);\n+    let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n+    if !(TyS::same_type(self_ty, self_ty_adjusted) && match_trait_method(cx, call_expr, &paths::INTO_ITERATOR)) {\n         return;\n     }\n \n     let mut applicability = Applicability::MachineApplicable;\n-    let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+    let object = snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability);\n     span_lint_and_sugg(\n         cx,\n         EXPLICIT_INTO_ITER_LOOP,\n-        arg.span,\n+        call_expr.span,\n         \"it is more concise to loop over containers instead of using explicit \\\n             iteration methods\",\n         \"to write this more concisely, try\","}, {"sha": "ce02ad013bef64df5463e0ed324905de543f87e5", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=c3ef58532852921f5a4dca5ede8d945c89421216", "patch": "@@ -9,12 +9,12 @@ use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n+pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {\n-        \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, &args[0]),\n+        \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, self_arg),\n         \"into_iter\" if match_trait_method(cx, arg, &paths::INTO_ITERATOR) => {\n-            let receiver_ty = cx.typeck_results().expr_ty(&args[0]);\n-            let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(&args[0]);\n+            let receiver_ty = cx.typeck_results().expr_ty(self_arg);\n+            let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n             let ref_receiver_ty = cx.tcx.mk_ref(\n                 cx.tcx.lifetimes.re_erased,\n                 ty::TypeAndMut {\n@@ -32,7 +32,7 @@ pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, met\n     }\n \n     let mut applicability = Applicability::MachineApplicable;\n-    let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+    let object = snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability);\n     let muta = if method_name == \"iter_mut\" { \"mut \" } else { \"\" };\n     span_lint_and_sugg(\n         cx,"}, {"sha": "a4bc3e6bd100cd4c47c9b31febd8144209b183a2", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef58532852921f5a4dca5ede8d945c89421216/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=c3ef58532852921f5a4dca5ede8d945c89421216", "patch": "@@ -602,22 +602,19 @@ fn check_for_loop<'tcx>(\n fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n-    if let ExprKind::MethodCall(method, _, args, _) = arg.kind {\n-        // just the receiver, no arguments\n-        if args.len() == 1 {\n-            let method_name = &*method.ident.as_str();\n-            // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n-            match method_name {\n-                \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, args, arg, method_name),\n-                \"into_iter\" => {\n-                    explicit_iter_loop::check(cx, args, arg, method_name);\n-                    explicit_into_iter_loop::check(cx, args, arg);\n-                },\n-                \"next\" => {\n-                    next_loop_linted = iter_next_loop::check(cx, arg, expr);\n-                },\n-                _ => {},\n-            }\n+    if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n+        let method_name = &*method.ident.as_str();\n+        // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n+        match method_name {\n+            \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),\n+            \"into_iter\" => {\n+                explicit_iter_loop::check(cx, self_arg, arg, method_name);\n+                explicit_into_iter_loop::check(cx, self_arg, arg);\n+            },\n+            \"next\" => {\n+                next_loop_linted = iter_next_loop::check(cx, arg, expr);\n+            },\n+            _ => {},\n         }\n     }\n "}, {"sha": "f44928d4083868968a448727c64cce4ba20ecb8a", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef58532852921f5a4dca5ede8d945c89421216/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef58532852921f5a4dca5ede8d945c89421216/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=c3ef58532852921f5a4dca5ede8d945c89421216", "patch": "@@ -281,3 +281,29 @@ mod issue_4958 {\n         for _ in rr.into_iter() {}\n     }\n }\n+\n+// explicit_into_iter_loop\n+#[warn(clippy::explicit_into_iter_loop)]\n+mod issue_6900 {\n+    struct S;\n+    impl S {\n+        #[allow(clippy::should_implement_trait)]\n+        pub fn into_iter<T>(self) -> I<T> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct I<T>(T);\n+    impl<T> Iterator for I<T> {\n+        type Item = T;\n+        fn next(&mut self) -> Option<Self::Item> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    fn f() {\n+        for _ in S.into_iter::<u32>() {\n+            unimplemented!()\n+        }\n+    }\n+}"}, {"sha": "5b1eb3ee4dcd2421440fe4332b17c8a00af23c0f", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef58532852921f5a4dca5ede8d945c89421216/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef58532852921f5a4dca5ede8d945c89421216/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=c3ef58532852921f5a4dca5ede8d945c89421216", "patch": "@@ -281,3 +281,29 @@ mod issue_4958 {\n         for _ in rr.into_iter() {}\n     }\n }\n+\n+// explicit_into_iter_loop\n+#[warn(clippy::explicit_into_iter_loop)]\n+mod issue_6900 {\n+    struct S;\n+    impl S {\n+        #[allow(clippy::should_implement_trait)]\n+        pub fn into_iter<T>(self) -> I<T> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct I<T>(T);\n+    impl<T> Iterator for I<T> {\n+        type Item = T;\n+        fn next(&mut self) -> Option<Self::Item> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    fn f() {\n+        for _ in S.into_iter::<u32>() {\n+            unimplemented!()\n+        }\n+    }\n+}"}]}