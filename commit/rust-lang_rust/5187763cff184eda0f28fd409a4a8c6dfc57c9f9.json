{"sha": "5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxODc3NjNjZmYxODRlZGEwZjI4ZmQ0MDlhNGE4YzZkZmM1N2M5Zjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-04T21:38:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-09T20:45:30Z"}, "message": "rustc: Allow target-specific default cgus\n\nSome targets, like msp430 and nvptx, don't work with multiple codegen units\nright now for bugs or fundamental reasons. To expose this allow targets to\nexpress a default.\n\nCloses #45000", "tree": {"sha": "9f31ac7cc91483b146289d2178826c89d08d60a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f31ac7cc91483b146289d2178826c89d08d60a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "html_url": "https://github.com/rust-lang/rust/commit/5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692b94ae25e0ae7d74cf15a5800e10a16239dab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/692b94ae25e0ae7d74cf15a5800e10a16239dab1", "html_url": "https://github.com/rust-lang/rust/commit/692b94ae25e0ae7d74cf15a5800e10a16239dab1"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "69ff55ab2234b8733af975aa9cf778b21d49e536", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -352,7 +352,7 @@ top_level_options!(\n         actually_rustdoc: bool [TRACKED],\n \n         // Number of object files/codegen units to produce on the backend\n-        codegen_units: usize [UNTRACKED],\n+        cli_forced_codegen_units: Option<usize> [UNTRACKED],\n     }\n );\n \n@@ -505,7 +505,7 @@ pub fn basic_options() -> Options {\n         unstable_features: UnstableFeatures::Disallow,\n         debug_assertions: true,\n         actually_rustdoc: false,\n-        codegen_units: 1,\n+        cli_forced_codegen_units: None,\n     }\n }\n \n@@ -1711,48 +1711,6 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let incremental = debugging_opts.incremental.as_ref().map(|m| PathBuf::from(m));\n \n-    let codegen_units = codegen_units.unwrap_or_else(|| {\n-        match opt_level {\n-            // If we're compiling at `-O0` then default to 16 codegen units.\n-            // The number here shouldn't matter too too much as debug mode\n-            // builds don't rely on performance at all, meaning that lost\n-            // opportunities for inlining through multiple codegen units is\n-            // a non-issue.\n-            //\n-            // Note that the high number here doesn't mean that we'll be\n-            // spawning a large number of threads in parallel. The backend\n-            // of rustc contains global rate limiting through the\n-            // `jobserver` crate so we'll never overload the system with too\n-            // much work, but rather we'll only be optimizing when we're\n-            // otherwise cooperating with other instances of rustc.\n-            //\n-            // Rather the high number here means that we should be able to\n-            // keep a lot of idle cpus busy. By ensuring that no codegen\n-            // unit takes *too* long to build we'll be guaranteed that all\n-            // cpus will finish pretty closely to one another and we should\n-            // make relatively optimal use of system resources\n-            //\n-            // Another note worth mentioning here, however, is that this number\n-            // isn't *too* high. When codegen units are increased that means we\n-            // currently have to codegen `#[inline]` functions into each codegen\n-            // unit, which means the more codegen units we're using the more we\n-            // may be generating. In other words, increasing codegen units may\n-            // increase the overall work the compiler does. If we don't have\n-            // enough cores to make up for this loss then increasing the number\n-            // of codegen units could become an overall loss!\n-            //\n-            // As a result we choose a hopefully conservative value 16, which\n-            // should be more than the number of cpus of most hardware compiling\n-            // Rust but also not too much for 2-4 core machines to have too much\n-            // loss of compile time.\n-            OptLevel::No => 16,\n-\n-            // All other optimization levels default use one codegen unit,\n-            // the historical default in Rust for a Long Time.\n-            _ => 1,\n-        }\n-    });\n-\n     (Options {\n         crate_types,\n         optimize: opt_level,\n@@ -1777,7 +1735,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions,\n         actually_rustdoc: false,\n-        codegen_units,\n+        cli_forced_codegen_units: codegen_units,\n     },\n     cfg)\n }"}, {"sha": "d8301596a9281218e38219cc114c16398e598099", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -636,6 +636,43 @@ impl Session {\n         }\n         ret\n     }\n+\n+    /// Returns the number of codegen units that should be used for this\n+    /// compilation\n+    pub fn codegen_units(&self) -> usize {\n+        if let Some(n) = self.opts.cli_forced_codegen_units {\n+            return n\n+        }\n+        if let Some(n) = self.target.target.options.default_codegen_units {\n+            return n as usize\n+        }\n+\n+        match self.opts.optimize {\n+            // If we're compiling at `-O0` then default to 16 codegen units.\n+            // The number here shouldn't matter too too much as debug mode\n+            // builds don't rely on performance at all, meaning that lost\n+            // opportunities for inlining through multiple codegen units is\n+            // a non-issue.\n+            //\n+            // Note that the high number here doesn't mean that we'll be\n+            // spawning a large number of threads in parallel. The backend\n+            // of rustc contains global rate limiting through the\n+            // `jobserver` crate so we'll never overload the system with too\n+            // much work, but rather we'll only be optimizing when we're\n+            // otherwise cooperating with other instances of rustc.\n+            //\n+            // Rather the high number here means that we should be able to\n+            // keep a lot of idle cpus busy. By ensuring that no codegen\n+            // unit takes *too* long to build we'll be guaranteed that all\n+            // cpus will finish pretty closely to one another and we should\n+            // make relatively optimal use of system resources\n+            config::OptLevel::No => 16,\n+\n+            // All other optimization levels default use one codegen unit,\n+            // the historical default in Rust for a Long Time.\n+            _ => 1,\n+        }\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "1d6c3871e4529670123c2a5c9d1ede066f01ca0e", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -430,6 +430,9 @@ pub struct TargetOptions {\n \n     /// The minimum alignment for global symbols.\n     pub min_global_align: Option<u64>,\n+\n+    /// Default number of codegen units to use in debug mode\n+    pub default_codegen_units: Option<u64>,\n }\n \n impl Default for TargetOptions {\n@@ -492,6 +495,7 @@ impl Default for TargetOptions {\n             crt_static_respected: false,\n             stack_probes: false,\n             min_global_align: None,\n+            default_codegen_units: None,\n         }\n     }\n }\n@@ -732,6 +736,7 @@ impl Target {\n         key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n         key!(min_global_align, Option<u64>);\n+        key!(default_codegen_units, Option<u64>);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -924,6 +929,7 @@ impl ToJson for Target {\n         target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);\n         target_option_val!(min_global_align);\n+        target_option_val!(default_codegen_units);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "509a7cf5e03234158d70a61ca70ec53cbb749b74", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -48,6 +48,11 @@ pub fn target() -> TargetResult {\n             // code because of the extra costs it involves.\n             relocation_model: \"static\".to_string(),\n \n+            // Right now we invoke an external assembler and this isn't\n+            // compatible with multiple codegen units, and plus we probably\n+            // don't want to invoke that many gcc instances.\n+            default_codegen_units: Some(1),\n+\n             .. Default::default( )\n         }\n     })"}, {"sha": "570a6bbac1e4e4dd233aec67bbd55464dd484a8b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -467,7 +467,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                 // of when we do and don't keep .#module-name#.bc files around.\n                 let user_wants_numbered_bitcode =\n                         sess.opts.output_types.contains_key(&OutputType::Bitcode) &&\n-                        sess.opts.codegen_units > 1;\n+                        sess.codegen_units() > 1;\n                 if !sess.opts.cg.save_temps && !user_wants_numbered_bitcode {\n                     remove(sess, &bc_filename);\n                 }"}, {"sha": "6ebf642ebca132e04b749ccea4ee807f081bf6e7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -1037,10 +1037,10 @@ fn produce_final_output_artifacts(sess: &Session,\n         let needs_crate_object = crate_output.outputs.contains_key(&OutputType::Exe);\n \n         let keep_numbered_bitcode = needs_crate_bitcode ||\n-                (user_wants_bitcode && sess.opts.codegen_units > 1);\n+                (user_wants_bitcode && sess.codegen_units() > 1);\n \n         let keep_numbered_objects = needs_crate_object ||\n-                (user_wants_objects && sess.opts.codegen_units > 1);\n+                (user_wants_objects && sess.codegen_units() > 1);\n \n         for module in compiled_modules.modules.iter() {\n             let module_name = Some(&module.name[..]);\n@@ -2052,7 +2052,7 @@ impl OngoingCrateTranslation {\n \n         // FIXME: time_llvm_passes support - does this use a global context or\n         // something?\n-        if sess.opts.codegen_units == 1 && sess.time_llvm_passes() {\n+        if sess.codegen_units() == 1 && sess.time_llvm_passes() {\n             unsafe { llvm::LLVMRustPrintPassTimings(); }\n         }\n "}, {"sha": "6b53b5b6411d004e0da8beb893877e07d765bd09", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5187763cff184eda0f28fd409a4a8c6dfc57c9f9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5187763cff184eda0f28fd409a4a8c6dfc57c9f9", "patch": "@@ -1218,7 +1218,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n     let strategy = if tcx.sess.opts.debugging_opts.incremental.is_some() {\n         PartitioningStrategy::PerModule\n     } else {\n-        PartitioningStrategy::FixedUnitCount(tcx.sess.opts.codegen_units)\n+        PartitioningStrategy::FixedUnitCount(tcx.sess.codegen_units())\n     };\n \n     let codegen_units = time(time_passes, \"codegen unit partitioning\", || {"}]}