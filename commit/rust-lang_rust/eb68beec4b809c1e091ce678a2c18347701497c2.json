{"sha": "eb68beec4b809c1e091ce678a2c18347701497c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjhiZWVjNGI4MDljMWUwOTFjZTY3OGEyYzE4MzQ3NzAxNDk3YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-17T05:31:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-17T05:31:55Z"}, "message": "auto merge of #12944 : mcpherrinm/rust/master, r=alexcrichton", "tree": {"sha": "d1007ade36a6e7f563ecab18accd00422b31eb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1007ade36a6e7f563ecab18accd00422b31eb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb68beec4b809c1e091ce678a2c18347701497c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb68beec4b809c1e091ce678a2c18347701497c2", "html_url": "https://github.com/rust-lang/rust/commit/eb68beec4b809c1e091ce678a2c18347701497c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb68beec4b809c1e091ce678a2c18347701497c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa72dfe48c8db04562f4d3ab640cb90804af69b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa72dfe48c8db04562f4d3ab640cb90804af69b", "html_url": "https://github.com/rust-lang/rust/commit/6fa72dfe48c8db04562f4d3ab640cb90804af69b"}, {"sha": "5026d114a0bbe27f2052af9fbadebacac80e1955", "url": "https://api.github.com/repos/rust-lang/rust/commits/5026d114a0bbe27f2052af9fbadebacac80e1955", "html_url": "https://github.com/rust-lang/rust/commit/5026d114a0bbe27f2052af9fbadebacac80e1955"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "e124ada08c7674693181905fde646e4032983028", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/eb68beec4b809c1e091ce678a2c18347701497c2/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb68beec4b809c1e091ce678a2c18347701497c2/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=eb68beec4b809c1e091ce678a2c18347701497c2", "patch": "@@ -99,32 +99,127 @@ pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n     intrinsics::move_val_init(dst, src)\n }\n \n+/// Convert an i16 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n+\n+/// Convert an i16 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i32 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n+\n+/// Convert an i32 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i64 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n+\n+/// Convert an i64 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n \n+\n+/// Convert an i16 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i16 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n+\n+/// Convert an i32 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i32 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n+\n+/// Convert an i64 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+/// Convert an i64 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n \n+\n+/// Convert an i16 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n+\n+/// Convert an i16 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i32 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n+\n+/// Convert an i32 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i64 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n+\n+/// Convert an i64 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n \n+\n+/// Convert an i16 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i16 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n+\n+/// Convert an i32 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i32 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n+\n+/// Convert an i64 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+/// Convert an i64 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n "}]}