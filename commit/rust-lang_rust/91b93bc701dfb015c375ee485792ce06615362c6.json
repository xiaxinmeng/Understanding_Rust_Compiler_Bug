{"sha": "91b93bc701dfb015c375ee485792ce06615362c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjkzYmM3MDFkZmIwMTVjMzc1ZWU0ODU3OTJjZTA2NjE1MzYyYzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-06T01:23:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-06T01:23:25Z"}, "message": "less strict kind test for pointer operations", "tree": {"sha": "7a4bbd956c3b6ebb7d1858002ea22b6597613c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4bbd956c3b6ebb7d1858002ea22b6597613c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b93bc701dfb015c375ee485792ce06615362c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b93bc701dfb015c375ee485792ce06615362c6", "html_url": "https://github.com/rust-lang/rust/commit/91b93bc701dfb015c375ee485792ce06615362c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b93bc701dfb015c375ee485792ce06615362c6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684de68d6c2d0d0b4da7cc5cdec92d3fe488ea8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/684de68d6c2d0d0b4da7cc5cdec92d3fe488ea8c", "html_url": "https://github.com/rust-lang/rust/commit/684de68d6c2d0d0b4da7cc5cdec92d3fe488ea8c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3fe3b63407910eb2b531aaeaed60c4d6229685b4", "filename": "src/operator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91b93bc701dfb015c375ee485792ce06615362c6/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b93bc701dfb015c375ee485792ce06615362c6/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=91b93bc701dfb015c375ee485792ce06615362c6", "patch": "@@ -268,15 +268,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::mir::BinOp::*;\n         use value::PrimValKind::*;\n \n-        if left_kind != right_kind {\n+        if left_kind != right_kind || !(left_kind.is_ptr() || left_kind == PrimValKind::from_uint_size(self.memory.pointer_size())) {\n             let msg = format!(\"unimplemented binary op {:?}: {:?} ({:?}), {:?} ({:?})\", bin_op, left, left_kind, right, right_kind);\n             return Err(EvalError::Unimplemented(msg));\n         }\n \n-        let val = match (bin_op, left_kind) {\n-            (Eq, k) if k.is_ptr() => PrimVal::from_bool(left == right),\n-            (Ne, k) if k.is_ptr() => PrimVal::from_bool(left != right),\n-            (Lt, k) | (Le, k) | (Gt, k) | (Ge, k) if k.is_ptr() => {\n+        let val = match bin_op {\n+            Eq => PrimVal::from_bool(left == right),\n+            Ne => PrimVal::from_bool(left != right),\n+            Lt | Le | Gt | Ge => {\n                 if left.alloc_id == right.alloc_id {\n                     PrimVal::from_bool(match bin_op {\n                         Lt => left.offset < right.offset,\n@@ -289,9 +289,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     return Err(EvalError::InvalidPointerMath);\n                 }\n             }\n-            (Sub, k) if k == PrimValKind::from_uint_size(self.memory.pointer_size())  => {\n+            Sub => {\n                 if left.alloc_id == right.alloc_id {\n-                    return int_arithmetic!(k, overflowing_sub, left.offset, right.offset);\n+                    return int_arithmetic!(left_kind, overflowing_sub, left.offset, right.offset);\n                 } else {\n                     return Err(EvalError::InvalidPointerMath);\n                 }"}]}