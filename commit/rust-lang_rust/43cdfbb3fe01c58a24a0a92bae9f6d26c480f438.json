{"sha": "43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2RmYmIzZmUwMWM1OGEyNGEwYTkyYmFlOWY2ZDI2YzQ4MGY0Mzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T07:27:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T17:28:28Z"}, "message": "set span more accurately during const_prop", "tree": {"sha": "e03d6cfb48083cec0be153468530a8c2c2944df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03d6cfb48083cec0be153468530a8c2c2944df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "html_url": "https://github.com/rust-lang/rust/commit/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9b693acc4cfbb9ba138e2de037049dd08df267", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9b693acc4cfbb9ba138e2de037049dd08df267", "html_url": "https://github.com/rust-lang/rust/commit/fb9b693acc4cfbb9ba138e2de037049dd08df267"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "3c5f091f46df7bc334df38cbcbc0b922d0d05488", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n     self, fold::BottomUpFolder, query::TyCtxtAt, subst::SubstsRef, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::{source_map::DUMMY_SP, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n@@ -296,6 +296,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub(crate) fn set_span(&mut self, span: Span) {\n+        self.tcx.span = span;\n+        self.memory.tcx.span = span;\n+    }\n+\n     #[inline(always)]\n     pub fn force_ptr(\n         &self,"}, {"sha": "37740878f7043365fb3270c4bed2cc55ccd137e2", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "patch": "@@ -78,14 +78,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n+        self.set_span(stmt.source_info.span);\n \n         use rustc_middle::mir::StatementKind::*;\n \n         // Some statements (e.g., box) push new stack frames.\n         // We have to record the stack frame number *before* executing the statement.\n         let frame_idx = self.cur_frame();\n-        self.tcx.span = stmt.source_info.span;\n-        self.memory.tcx.span = stmt.source_info.span;\n \n         match &stmt.kind {\n             Assign(box (place, rvalue)) => self.eval_rvalue_into_place(rvalue, *place)?,\n@@ -276,8 +275,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", terminator.kind);\n-        self.tcx.span = terminator.source_info.span;\n-        self.memory.tcx.span = terminator.source_info.span;\n+        self.set_span(terminator.source_info.span);\n \n         self.eval_terminator(terminator)?;\n         if !self.stack.is_empty() {"}, {"sha": "25719d037f9fc80cea7a7bbb0124329c86878a5d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cdfbb3fe01c58a24a0a92bae9f6d26c480f438/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=43cdfbb3fe01c58a24a0a92bae9f6d26c480f438", "patch": "@@ -425,8 +425,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n-        self.ecx.tcx.span = c.span;\n-\n         // FIXME we need to revisit this for #67176\n         if c.needs_subst() {\n             return None;\n@@ -435,6 +433,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         match self.ecx.eval_const_to_op(c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n+                // Make sure errors point at the constant.\n+                self.ecx.set_span(c.span);\n                 let err = error_to_const_error(&self.ecx, error);\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal.val {\n@@ -820,6 +820,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: {:?}\", statement);\n         let source_info = statement.source_info;\n+        self.ecx.set_span(source_info.span);\n         self.source_info = Some(source_info);\n         if let StatementKind::Assign(box (place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place.ty(&self.local_decls, self.tcx).ty;\n@@ -870,6 +871,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n     fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n         let source_info = terminator.source_info;\n+        self.ecx.set_span(source_info.span);\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n         match &mut terminator.kind {"}]}