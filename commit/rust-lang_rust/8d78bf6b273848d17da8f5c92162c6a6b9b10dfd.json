{"sha": "8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzhiZjZiMjczODQ4ZDE3ZGE4ZjVjOTIxNjJjNmE2YjliMTBkZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T13:41:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T13:41:13Z"}, "message": "Auto merge of #65421 - estebank:variants, r=petrochenkov\n\nPoint at local similarly named element and tweak references to variants\n\nPartially address #65386.", "tree": {"sha": "5d19d9a52e7311543dccd0a9e43fe16d63aef336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d19d9a52e7311543dccd0a9e43fe16d63aef336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "html_url": "https://github.com/rust-lang/rust/commit/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "html_url": "https://github.com/rust-lang/rust/commit/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28"}, {"sha": "b26ddb8af37362e33c45c78c9c91a3c5cdabfe7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26ddb8af37362e33c45c78c9c91a3c5cdabfe7e", "html_url": "https://github.com/rust-lang/rust/commit/b26ddb8af37362e33c45c78c9c91a3c5cdabfe7e"}], "stats": {"total": 931, "additions": 600, "deletions": 331}, "files": [{"sha": "c18bdfad22cf074f190fed46038a9f126f93a026", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -849,12 +849,14 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(kind @ DefKind::Mod, def_id)\n             | Res::Def(kind @ DefKind::Enum, def_id)\n             | Res::Def(kind @ DefKind::Trait, def_id) => {\n-                let module = self.r.new_module(parent,\n-                                             ModuleKind::Def(kind, def_id, ident.name),\n-                                             def_id,\n-                                             expansion,\n-                                             span);\n-                self.r.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n+                let module = self.r.new_module(\n+                    parent,\n+                    ModuleKind::Def(kind, def_id, ident.name),\n+                    def_id,\n+                    expansion,\n+                    span,\n+                );\n+                self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n             }\n             Res::Def(DefKind::Struct, _)\n             | Res::Def(DefKind::Union, _)\n@@ -867,17 +869,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             | Res::Def(DefKind::AssocOpaqueTy, _)\n             | Res::PrimTy(..)\n             | Res::ToolMod =>\n-                self.r.define(parent, ident, TypeNS, (res, vis, DUMMY_SP, expansion)),\n+                self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Fn, _)\n             | Res::Def(DefKind::Method, _)\n             | Res::Def(DefKind::Static, _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Ctor(..), _) =>\n-                self.r.define(parent, ident, ValueNS, (res, vis, DUMMY_SP, expansion)),\n+                self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Macro(..), _)\n             | Res::NonMacroAttr(..) =>\n-                self.r.define(parent, ident, MacroNS, (res, vis, DUMMY_SP, expansion)),\n+                self.r.define(parent, ident, MacroNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::TyParam, _) | Res::Def(DefKind::ConstParam, _)\n             | Res::Local(..) | Res::SelfTy(..) | Res::SelfCtor(..) | Res::Err =>\n                 bug!(\"unexpected resolution: {:?}\", res)"}, {"sha": "3d68b72a655fbfd596b66e53ff742d979f261480", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -58,21 +58,6 @@ fn reduce_impl_span_to_impl_keyword(cm: &SourceMap, impl_span: Span) -> Span {\n     impl_span\n }\n \n-crate fn add_typo_suggestion(\n-    err: &mut DiagnosticBuilder<'_>, suggestion: Option<TypoSuggestion>, span: Span\n-) -> bool {\n-    if let Some(suggestion) = suggestion {\n-        let msg = format!(\n-            \"{} {} with a similar name exists\", suggestion.res.article(), suggestion.res.descr()\n-        );\n-        err.span_suggestion(\n-            span, &msg, suggestion.candidate.to_string(), Applicability::MaybeIncorrect\n-        );\n-        return true;\n-    }\n-    false\n-}\n-\n impl<'a> Resolver<'a> {\n     crate fn add_module_candidates(\n         &mut self,\n@@ -641,7 +626,7 @@ impl<'a> Resolver<'a> {\n         let suggestion = self.early_lookup_typo_candidate(\n             ScopeSet::Macro(macro_kind), parent_scope, ident, is_expected\n         );\n-        add_typo_suggestion(err, suggestion, ident.span);\n+        self.add_typo_suggestion(err, suggestion, ident.span);\n \n         if macro_kind == MacroKind::Derive &&\n            (ident.as_str() == \"Send\" || ident.as_str() == \"Sync\") {\n@@ -652,6 +637,33 @@ impl<'a> Resolver<'a> {\n             err.help(\"have you added the `#[macro_use]` on the module/import?\");\n         }\n     }\n+\n+    crate fn add_typo_suggestion(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        suggestion: Option<TypoSuggestion>,\n+        span: Span,\n+    ) -> bool {\n+        if let Some(suggestion) = suggestion {\n+            let msg = format!(\n+                \"{} {} with a similar name exists\", suggestion.res.article(), suggestion.res.descr()\n+            );\n+            err.span_suggestion(\n+                span, &msg, suggestion.candidate.to_string(), Applicability::MaybeIncorrect\n+            );\n+            let def_span = suggestion.res.opt_def_id()\n+                .and_then(|def_id| self.definitions.opt_span(def_id));\n+            if let Some(span) = def_span {\n+                err.span_label(span, &format!(\n+                    \"similarly named {} `{}` defined here\",\n+                    suggestion.res.descr(),\n+                    suggestion.candidate.as_str(),\n+                ));\n+            }\n+            return true;\n+        }\n+        false\n+    }\n }\n \n impl<'a, 'b> ImportResolver<'a, 'b> {"}, {"sha": "9515c87ce4bb5194b813b738a97e1d56ee8bce38", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -974,7 +974,7 @@ function:\n struct Foo { a: bool };\n \n let f = Foo();\n-// error: expected function, found `Foo`\n+// error: expected function, tuple struct or tuple variant, found `Foo`\n // `Foo` is a struct name, but this expression uses it like a function name\n ```\n \n@@ -992,7 +992,8 @@ yield this error:\n \n ```compile_fail,E0423\n println(\"\");\n-// error: expected function, found macro `println`\n+// error: expected function, tuple struct or tuple variant,\n+// found macro `println`\n // did you mean `println!(...)`? (notice the trailing `!`)\n ```\n \n@@ -1592,7 +1593,7 @@ enum State {\n \n fn print_on_failure(state: &State) {\n     match *state {\n-        // error: expected unit struct/variant or constant, found tuple\n+        // error: expected unit struct, unit variant or constant, found tuple\n         //        variant `State::Failed`\n         State::Failed => println!(\"Failed\"),\n         _ => ()"}, {"sha": "02f4345ac10ed1308bdedba8a91b565b8e786624", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -199,21 +199,36 @@ impl<'a> PathSource<'a> {\n     }\n \n     fn descr_expected(self) -> &'static str {\n-        match self {\n+        match &self {\n             PathSource::Type => \"type\",\n             PathSource::Trait(_) => \"trait\",\n-            PathSource::Pat => \"unit struct/variant or constant\",\n+            PathSource::Pat => \"unit struct, unit variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n-            PathSource::TupleStruct => \"tuple struct/variant\",\n+            PathSource::TupleStruct => \"tuple struct or tuple variant\",\n             PathSource::TraitItem(ns) => match ns {\n                 TypeNS => \"associated type\",\n                 ValueNS => \"method or associated constant\",\n                 MacroNS => bug!(\"associated macro\"),\n             },\n-            PathSource::Expr(parent) => match parent.map(|p| &p.kind) {\n+            PathSource::Expr(parent) => match &parent.as_ref().map(|p| &p.kind) {\n                 // \"function\" here means \"anything callable\" rather than `DefKind::Fn`,\n                 // this is not precise but usually more helpful than just \"value\".\n-                Some(&ExprKind::Call(..)) => \"function\",\n+                Some(ExprKind::Call(call_expr, _)) => {\n+                    match &call_expr.kind {\n+                        ExprKind::Path(_, path) => {\n+                            let mut msg = \"function\";\n+                            if let Some(segment) = path.segments.iter().last() {\n+                                if let Some(c) = segment.ident.to_string().chars().next() {\n+                                    if c.is_uppercase() {\n+                                        msg = \"function, tuple struct or tuple variant\";\n+                                    }\n+                                }\n+                            }\n+                            msg\n+                        }\n+                        _ => \"function\"\n+                    }\n+                }\n                 _ => \"value\",\n             },\n         }"}, {"sha": "0b9997386c88d8400b1ee381992af88bb088a497", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,7 +1,7 @@\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n use crate::path_names_to_string;\n-use crate::diagnostics::{add_typo_suggestion, ImportSuggestion, TypoSuggestion};\n+use crate::diagnostics::{ImportSuggestion, TypoSuggestion};\n use crate::late::{LateResolutionVisitor, RibKind};\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n@@ -254,18 +254,19 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         }\n \n         // Try Levenshtein algorithm.\n-        let levenshtein_worked = add_typo_suggestion(\n-            &mut err, self.lookup_typo_candidate(path, ns, is_expected, span), ident_span\n-        );\n+        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected, span);\n+        let levenshtein_worked = self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n \n         // Try context-dependent help if relaxed lookup didn't work.\n         if let Some(res) = res {\n-            if self.smart_resolve_context_dependent_help(&mut err,\n-                                                         span,\n-                                                         source,\n-                                                         res,\n-                                                         &path_str,\n-                                                         &fallback_label) {\n+            if self.smart_resolve_context_dependent_help(\n+                &mut err,\n+                span,\n+                source,\n+                res,\n+                &path_str,\n+                &fallback_label,\n+            ) {\n                 return (err, candidates);\n             }\n         }"}, {"sha": "f7132cd868aac38a82892bd454e491be8c208782", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2269,7 +2269,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n \n fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath) {\n     span_err!(tcx.sess, span, E0533,\n-              \"expected unit struct/variant or constant, found {} `{}`\",\n+              \"expected unit struct, unit variant or constant, found {} `{}`\",\n               res.descr(),\n               hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)));\n }"}, {"sha": "950ae7c1d62e20838897f3286e18dd35ff2d6e1e", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -613,9 +613,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n-            let msg = format!(\"expected tuple struct/variant, found {} `{}`\",\n-                              res.descr(),\n-                              hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)));\n+            let msg = format!(\n+                \"expected tuple struct or tuple variant, found {} `{}`\",\n+                res.descr(),\n+                hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)),\n+            );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {\n                 (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::Method, _), _) => {"}, {"sha": "ae67f54ac12294708e6fb34debb0a8ddc78041cd", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4346,11 +4346,12 @@ enum X {\n     Entry,\n }\n \n-X::Entry(); // error: expected function, found `X::Entry`\n+X::Entry(); // error: expected function, tuple struct or tuple variant,\n+            // found `X::Entry`\n \n // Or even simpler:\n let x = 0i32;\n-x(); // error: expected function, found `i32`\n+x(); // error: expected function, tuple struct or tuple variant, found `i32`\n ```\n \n Only functions and methods can be called using `()`. Example:"}, {"sha": "66c5f34644c016a19c438a22581ccde64037c16f", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,8 @@\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-types-eq-1.rs:10:12\n    |\n+LL | fn foo2<I: Foo>(x: I) {\n+   |         - similarly named type parameter `I` defined here\n LL |     let _: A = x.boo();\n    |            ^ help: a type parameter with a similar name exists: `I`\n "}, {"sha": "8ad347d20e6e43d37c18fbb40f734c48555102e6", "filename": "src/test/ui/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -7,7 +7,7 @@ impl Cat {\n     fn meow(&self) {\n       println!(\"Meow\");\n       meows += 1; //~ ERROR cannot find value `meows` in this scope\n-      sleep();     //~ ERROR cannot find function `sleep` in this scope\n+      sleep();     //~ ERROR cannot find function `sleep` in this\n     }\n \n }"}, {"sha": "a96b071c05f42a7511e5a2f84bb0c49b5342a111", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,7 +2,10 @@ error[E0573]: expected type, found const parameter `C`\n   --> $DIR/struct-with-invalid-const-param.rs:4:23\n    |\n LL | struct S<const C: u8>(C);\n-   |                       ^ help: a struct with a similar name exists: `S`\n+   | ----------------------^--\n+   | |                     |\n+   | |                     help: a struct with a similar name exists: `S`\n+   | similarly named struct `S` defined here\n \n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/struct-with-invalid-const-param.rs:1:12"}, {"sha": "9602d27469427274afda589271d4787b5be8b47f", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -16,21 +16,21 @@ enum ManyVariants {\n }\n \n fn result_test() {\n-    let x = Option(1); //~ ERROR expected function, found enum\n+    let x = Option(1); //~ ERROR expected function, tuple struct or tuple variant, found enum\n \n-    if let Option(_) = x { //~ ERROR expected tuple struct/variant, found enum\n+    if let Option(_) = x { //~ ERROR expected tuple struct or tuple variant, found enum\n         println!(\"It is OK.\");\n     }\n \n     let y = Example::Ex(String::from(\"test\"));\n \n-    if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n+    if let Example(_) = y { //~ ERROR expected tuple struct or tuple variant, found enum\n         println!(\"It is OK.\");\n     }\n \n-    let y = Void(); //~ ERROR expected function, found enum\n+    let y = Void(); //~ ERROR expected function, tuple struct or tuple variant, found enum\n \n-    let z = ManyVariants(); //~ ERROR expected function, found enum\n+    let z = ManyVariants(); //~ ERROR expected function, tuple struct or tuple variant, found enum\n }\n \n fn main() {}"}, {"sha": "2140fd3a5a0370f31c598f638c00dadf69a8e7ec", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0423]: expected function, found enum `Option`\n+error[E0423]: expected function, tuple struct or tuple variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n    |\n LL |     let x = Option(1);\n@@ -11,7 +11,7 @@ LL |     let x = std::option::Option::None(1);\n LL |     let x = std::option::Option::Some(1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0532]: expected tuple struct/variant, found enum `Option`\n+error[E0532]: expected tuple struct or tuple variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n    |\n LL |     if let Option(_) = x {\n@@ -24,7 +24,7 @@ LL |     if let std::option::Option::None(_) = x {\n LL |     if let std::option::Option::Some(_) = x {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0532]: expected tuple struct/variant, found enum `Example`\n+error[E0532]: expected tuple struct or tuple variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n    |\n LL |     if let Example(_) = y {\n@@ -37,13 +37,13 @@ LL |     if let Example::Ex(_) = y {\n LL |     if let Example::NotEx(_) = y {\n    |            ^^^^^^^^^^^^^^\n \n-error[E0423]: expected function, found enum `Void`\n+error[E0423]: expected function, tuple struct or tuple variant, found enum `Void`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n    |\n LL |     let y = Void();\n    |             ^^^^\n \n-error[E0423]: expected function, found enum `ManyVariants`\n+error[E0423]: expected function, tuple struct or tuple variant, found enum `ManyVariants`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:33:13\n    |\n LL |     let z = ManyVariants();"}, {"sha": "1a38d3d7601b815ce68d028b46263928c97d1d4e", "filename": "src/test/ui/empty/empty-struct-braces-expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -13,12 +13,15 @@ enum E {\n \n fn main() {\n     let e1 = Empty1; //~ ERROR expected value, found struct `Empty1`\n-    let e1 = Empty1(); //~ ERROR expected function, found struct `Empty1`\n+    let e1 = Empty1();\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct `Empty1`\n     let e3 = E::Empty3; //~ ERROR expected value, found struct variant `E::Empty3`\n-    let e3 = E::Empty3(); //~ ERROR expected function, found struct variant `E::Empty3`\n+    let e3 = E::Empty3();\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n \n     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n-    let xe1 = XEmpty1(); //~ ERROR expected function, found struct `XEmpty1`\n+    let xe1 = XEmpty1();\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct `XEmpty1`\n     let xe3 = XE::Empty3; //~ ERROR no variant or associated item named `Empty3` found for type\n     let xe3 = XE::Empty3(); //~ ERROR no variant or associated item named `Empty3` found for type\n "}, {"sha": "f427c1ba0adfb3636c6bac161187192d30a384c7", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -10,7 +10,7 @@ LL |     let e1 = Empty1;\n    |              did you mean `Empty1 { /* fields */ }`?\n    |              help: a unit struct with a similar name exists: `XEmpty2`\n \n-error[E0423]: expected function, found struct `Empty1`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n    |\n LL | struct Empty1 {}\n@@ -23,16 +23,16 @@ LL |     let e1 = Empty1();\n    |              help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n-  --> $DIR/empty-struct-braces-expr.rs:17:14\n+  --> $DIR/empty-struct-braces-expr.rs:18:14\n    |\n LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |     let e3 = E::Empty3;\n    |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n-error[E0423]: expected function, found struct variant `E::Empty3`\n-  --> $DIR/empty-struct-braces-expr.rs:18:14\n+error[E0423]: expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n+  --> $DIR/empty-struct-braces-expr.rs:19:14\n    |\n LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n@@ -41,16 +41,16 @@ LL |     let e3 = E::Empty3();\n    |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n error[E0423]: expected value, found struct `XEmpty1`\n-  --> $DIR/empty-struct-braces-expr.rs:20:15\n+  --> $DIR/empty-struct-braces-expr.rs:22:15\n    |\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n    |               |\n    |               did you mean `XEmpty1 { /* fields */ }`?\n    |               help: a unit struct with a similar name exists: `XEmpty2`\n \n-error[E0423]: expected function, found struct `XEmpty1`\n-  --> $DIR/empty-struct-braces-expr.rs:21:15\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n+  --> $DIR/empty-struct-braces-expr.rs:23:15\n    |\n LL |     let xe1 = XEmpty1();\n    |               ^^^^^^^\n@@ -59,7 +59,7 @@ LL |     let xe1 = XEmpty1();\n    |               help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n-  --> $DIR/empty-struct-braces-expr.rs:22:19\n+  --> $DIR/empty-struct-braces-expr.rs:25:19\n    |\n LL |     let xe3 = XE::Empty3;\n    |                   ^^^^^^\n@@ -68,7 +68,7 @@ LL |     let xe3 = XE::Empty3;\n    |                   help: there is a variant with a similar name: `XEmpty3`\n \n error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n-  --> $DIR/empty-struct-braces-expr.rs:23:19\n+  --> $DIR/empty-struct-braces-expr.rs:26:19\n    |\n LL |     let xe3 = XE::Empty3();\n    |                   ^^^^^^\n@@ -77,7 +77,7 @@ LL |     let xe3 = XE::Empty3();\n    |                   help: there is a variant with a similar name: `XEmpty3`\n \n error: no variant `Empty1` in enum `empty_struct::XE`\n-  --> $DIR/empty-struct-braces-expr.rs:25:9\n+  --> $DIR/empty-struct-braces-expr.rs:28:9\n    |\n LL |     XE::Empty1 {};\n    |         ^^^^^^ help: there is a variant with a similar name: `XEmpty3`"}, {"sha": "9bed93f9c153622cc9b2895a502bc29056e10a12", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -22,13 +22,13 @@ fn main() {\n     }\n     match e3 {\n         E::Empty3 => ()\n-        //~^ ERROR expected unit struct/variant or constant, found struct variant `E::Empty3`\n+        //~^ ERROR expected unit struct, unit variant or constant, found struct variant `E::Empty3`\n     }\n     match xe1 {\n         XEmpty1 => () // Not an error, `XEmpty1` is interpreted as a new binding\n     }\n     match xe3 {\n         XE::XEmpty3 => ()\n-        //~^ ERROR expected unit struct/variant or constant, found struct variant `XE::XEmpty3`\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n     }\n }"}, {"sha": "9b5f31157d1bbce4b0f987d4f18b7389cf60fe67", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected unit struct/variant or constant, found struct variant `E::Empty3`\n+error[E0532]: expected unit struct, unit variant or constant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:24:9\n    |\n LL |     Empty3 {}\n@@ -7,7 +7,7 @@ LL |     Empty3 {}\n LL |         E::Empty3 => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n-error[E0532]: expected unit struct/variant or constant, found struct variant `XE::XEmpty3`\n+error[E0532]: expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:31:9\n    |\n LL |         XE::XEmpty3 => ()"}, {"sha": "cfe4641f35604afeb216d1bd418bd0de90311883", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -12,15 +12,15 @@ fn main() {\n     let xe1 = XEmpty1 {};\n \n     match e1 {\n-        Empty1() => () //~ ERROR expected tuple struct/variant, found struct `Empty1`\n+        Empty1() => () //~ ERROR expected tuple struct or tuple variant, found struct `Empty1`\n     }\n     match xe1 {\n-        XEmpty1() => () //~ ERROR expected tuple struct/variant, found struct `XEmpty1`\n+        XEmpty1() => () //~ ERROR expected tuple struct or tuple variant, found struct `XEmpty1`\n     }\n     match e1 {\n-        Empty1(..) => () //~ ERROR expected tuple struct/variant, found struct `Empty1`\n+        Empty1(..) => () //~ ERROR expected tuple struct or tuple variant, found struct `Empty1`\n     }\n     match xe1 {\n-        XEmpty1(..) => () //~ ERROR expected tuple struct/variant, found struct `XEmpty1`\n+        XEmpty1(..) => () //~ ERROR expected tuple struct or tuple variant, found struct `XEmpty1`\n     }\n }"}, {"sha": "0b3c9ae51519e748e0e544b9e168e8a90ebecfe7", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct/variant, found struct `Empty1`\n+error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:15:9\n    |\n LL | struct Empty1 {}\n@@ -10,7 +10,7 @@ LL |         Empty1() => ()\n    |         did you mean `Empty1 { /* fields */ }`?\n    |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found struct `XEmpty1`\n+error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n    |\n LL |         XEmpty1() => ()\n@@ -19,7 +19,7 @@ LL |         XEmpty1() => ()\n    |         did you mean `XEmpty1 { /* fields */ }`?\n    |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found struct `Empty1`\n+error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n    |\n LL | struct Empty1 {}\n@@ -31,7 +31,7 @@ LL |         Empty1(..) => ()\n    |         did you mean `Empty1 { /* fields */ }`?\n    |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found struct `XEmpty1`\n+error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n    |\n LL |         XEmpty1(..) => ()"}, {"sha": "54d547eefcc952a38565879495a8a29e025b460d", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -15,18 +15,18 @@ fn main() {\n \n     match e3 {\n         E::Empty3() => ()\n-        //~^ ERROR expected tuple struct/variant, found struct variant `E::Empty3`\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `E::Empty3`\n     }\n     match xe3 {\n         XE::XEmpty3() => ()\n-        //~^ ERROR expected tuple struct/variant, found struct variant `XE::XEmpty3`\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n     }\n     match e3 {\n         E::Empty3(..) => ()\n-        //~^ ERROR expected tuple struct/variant, found struct variant `E::Empty3`\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `E::Empty3`\n     }\n     match xe3 {\n         XE::XEmpty3(..) => ()\n-        //~^ ERROR expected tuple struct/variant, found struct variant `XE::XEmpty3\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `XE::XEmpty3\n     }\n }"}, {"sha": "785396c448bb05629560d29ff5ac6d17b14781b4", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct/variant, found struct variant `E::Empty3`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:17:9\n    |\n LL |     Empty3 {}\n@@ -7,7 +7,7 @@ LL |     Empty3 {}\n LL |         E::Empty3() => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n-error[E0532]: expected tuple struct/variant, found struct variant `XE::XEmpty3`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:21:9\n    |\n LL |         XE::XEmpty3() => ()\n@@ -16,7 +16,7 @@ LL |         XE::XEmpty3() => ()\n    |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n    |         did you mean `XE::XEmpty3 { /* fields */ }`?\n \n-error[E0532]: expected tuple struct/variant, found struct variant `E::Empty3`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n    |\n LL |     Empty3 {}\n@@ -25,7 +25,7 @@ LL |     Empty3 {}\n LL |         E::Empty3(..) => ()\n    |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n \n-error[E0532]: expected tuple struct/variant, found struct variant `XE::XEmpty3`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:29:9\n    |\n LL |         XE::XEmpty3(..) => ()"}, {"sha": "47da8a306a4b2487db8598722d0f359b042bc3a1", "filename": "src/test/ui/empty/empty-struct-tuple-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -27,11 +27,11 @@ fn main() {\n \n     match e4 {\n         E::Empty4 => ()\n-        //~^ ERROR expected unit struct/variant or constant, found tuple variant `E::Empty4`\n+        //~^ ERROR expected unit struct, unit variant or constant, found tuple variant `E::Empty4`\n     }\n     match xe5 {\n         XE::XEmpty5 => (),\n-        //~^ ERROR expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n+        //~^ ERROR expected unit struct, unit variant or constant, found tuple variant `XE::XEmpty5`\n         _ => {},\n     }\n }"}, {"sha": "cfbb468e5e6331e863320082e88e4f4777faf9af", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -16,7 +16,7 @@ LL | use empty_struct::*;\n LL |         XEmpty6 => ()\n    |         ^^^^^^^ cannot be named the same as a tuple struct\n \n-error[E0532]: expected unit struct/variant or constant, found tuple variant `E::Empty4`\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E::Empty4`\n   --> $DIR/empty-struct-tuple-pat.rs:29:9\n    |\n LL |     Empty4()\n@@ -25,7 +25,7 @@ LL |     Empty4()\n LL |         E::Empty4 => ()\n    |         ^^^^^^^^^ did you mean `E::Empty4( /* fields */ )`?\n \n-error[E0532]: expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `XE::XEmpty5`\n   --> $DIR/empty-struct-tuple-pat.rs:33:9\n    |\n LL |         XE::XEmpty5 => (),"}, {"sha": "44a1e9e3d93bcfad1a434e595f1c455550f916af", "filename": "src/test/ui/empty/empty-struct-unit-pat.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -18,32 +18,37 @@ fn main() {\n     let xe4 = XE::XEmpty4;\n \n     match e2 {\n-        Empty2() => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n+        Empty2() => () //~ ERROR expected tuple struct or tuple variant, found unit struct `Empty2`\n     }\n     match xe2 {\n-        XEmpty2() => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n+        XEmpty2() => ()\n+        //~^ ERROR expected tuple struct or tuple variant, found unit struct `XEmpty2`\n     }\n     match e2 {\n-        Empty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n+        Empty2(..) => ()\n+        //~^ ERROR expected tuple struct or tuple variant, found unit struct `Empty2`\n     }\n     match xe2 {\n-        XEmpty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n+        XEmpty2(..) => ()\n+        //~^ ERROR expected tuple struct or tuple variant, found unit struct `XEmpty2`\n     }\n \n     match e4 {\n-        E::Empty4() => () //~ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n+        E::Empty4() => ()\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `E::Empty4`\n     }\n     match xe4 {\n         XE::XEmpty4() => (),\n-        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n         _ => {},\n     }\n     match e4 {\n-        E::Empty4(..) => () //~ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n+        E::Empty4(..) => ()\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `E::Empty4`\n     }\n     match xe4 {\n         XE::XEmpty4(..) => (),\n-        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n         _ => {},\n     }\n }"}, {"sha": "fd41a6ed382842e1a9e29a8cca4f28ce84c3717a", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,49 +1,49 @@\n-error[E0532]: expected tuple struct/variant, found unit struct `Empty2`\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:21:9\n    |\n LL |         Empty2() => ()\n    |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found unit struct `XEmpty2`\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:24:9\n    |\n LL |         XEmpty2() => ()\n    |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found unit struct `Empty2`\n-  --> $DIR/empty-struct-unit-pat.rs:27:9\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `Empty2`\n+  --> $DIR/empty-struct-unit-pat.rs:28:9\n    |\n LL |         Empty2(..) => ()\n    |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found unit struct `XEmpty2`\n-  --> $DIR/empty-struct-unit-pat.rs:30:9\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n+  --> $DIR/empty-struct-unit-pat.rs:32:9\n    |\n LL |         XEmpty2(..) => ()\n    |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n-error[E0532]: expected tuple struct/variant, found unit variant `E::Empty4`\n-  --> $DIR/empty-struct-unit-pat.rs:34:9\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n+  --> $DIR/empty-struct-unit-pat.rs:37:9\n    |\n LL |         E::Empty4() => ()\n-   |         ^^^^^^^^^ not a tuple struct/variant\n+   |         ^^^^^^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct/variant, found unit variant `XE::XEmpty4`\n-  --> $DIR/empty-struct-unit-pat.rs:37:9\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n+  --> $DIR/empty-struct-unit-pat.rs:41:9\n    |\n LL |         XE::XEmpty4() => (),\n    |         ^^^^-------\n    |             |\n    |             help: a tuple variant with a similar name exists: `XEmpty5`\n \n-error[E0532]: expected tuple struct/variant, found unit variant `E::Empty4`\n-  --> $DIR/empty-struct-unit-pat.rs:42:9\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n+  --> $DIR/empty-struct-unit-pat.rs:46:9\n    |\n LL |         E::Empty4(..) => ()\n-   |         ^^^^^^^^^ not a tuple struct/variant\n+   |         ^^^^^^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct/variant, found unit variant `XE::XEmpty4`\n-  --> $DIR/empty-struct-unit-pat.rs:45:9\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n+  --> $DIR/empty-struct-unit-pat.rs:50:9\n    |\n LL |         XE::XEmpty4(..) => (),\n    |         ^^^^-------"}, {"sha": "5b918eef6d65b29dacfb091ecbe7ecf3da9fb8c7", "filename": "src/test/ui/enums-pats-not-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fenums-pats-not-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fenums-pats-not-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenums-pats-not-idents.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let a(1) = 13; //~ ERROR cannot find tuple struct/variant `a` in this scope\n+    let a(1) = 13; //~ ERROR cannot find tuple struct or tuple variant `a` in this scope\n }"}, {"sha": "072b88716ad7cc8240152bc506a77226818377d4", "filename": "src/test/ui/enums-pats-not-idents.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fenums-pats-not-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fenums-pats-not-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenums-pats-not-idents.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0531]: cannot find tuple struct/variant `a` in this scope\n+error[E0531]: cannot find tuple struct or tuple variant `a` in this scope\n   --> $DIR/enums-pats-not-idents.rs:2:9\n    |\n LL |     let a(1) = 13;"}, {"sha": "4bbddb1978cc52be1a222baf19f1226e79d836d4", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct/variant, found associated constant `<Foo>::B`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `<Foo>::B`\n   --> $DIR/E0164.rs:9:9\n    |\n LL |         Foo::B(i) => i,"}, {"sha": "09792845d162c63769f3ce02d30de8f88913b3a7", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -26,17 +26,23 @@ help: surround the struct literal with parentheses\n LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n    |              ^                                     ^\n \n-error[E0423]: expected function, found struct `Foo`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n    |\n-LL |     struct Foo { a: bool };\n-   |     ---------------------- `Foo` defined here\n+LL |       struct Foo { a: bool };\n+   |       ---------------------- `Foo` defined here\n LL | \n-LL |     let f = Foo();\n-   |             ^^^\n-   |             |\n-   |             did you mean `Foo { /* fields */ }`?\n-   |             help: a function with a similar name exists (notice the capitalization): `foo`\n+LL |       let f = Foo();\n+   |               ^^^\n+   |               |\n+   |               did you mean `Foo { /* fields */ }`?\n+   |               help: a function with a similar name exists (notice the capitalization): `foo`\n+...\n+LL | / fn foo() {\n+LL | |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+LL | |\n+LL | | }\n+   | |_- similarly named function `foo` defined here\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8"}, {"sha": "690a101496d7325eee1265c9b532fa6c37ec0e1e", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -7,7 +7,7 @@ LL | |         self.bar();\n LL | |     }\n    | |_____- this function doesn't have a `self` parameter\n \n-error[E0424]: expected unit struct/variant or constant, found module `self`\n+error[E0424]: expected unit struct, unit variant or constant, found module `self`\n   --> $DIR/E0424.rs:12:9\n    |\n LL | / fn main () {"}, {"sha": "486da0e029ef386c3fc083199b50d530f3b7fdd2", "filename": "src/test/ui/error-codes/E0532.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0532.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -3,7 +3,7 @@ fn main() {\n \n     match SomeStruct(value) {\n         StructConst1(_) => { },\n-        //~^ ERROR expected tuple struct/variant, found constant `StructConst1`\n+        //~^ ERROR expected tuple struct or tuple variant, found constant `StructConst1`\n         _ => { },\n     }\n "}, {"sha": "eeccadccc636a116ed6306fc7301fc198fdaf77d", "filename": "src/test/ui/error-codes/E0532.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0532.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ferror-codes%2FE0532.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0532.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected tuple struct/variant, found constant `StructConst1`\n+error[E0532]: expected tuple struct or tuple variant, found constant `StructConst1`\n   --> $DIR/E0532.rs:5:9\n    |\n LL |         StructConst1(_) => { },\n-   |         ^^^^^^^^^^^^ not a tuple struct/variant\n+   |         ^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to previous error\n "}, {"sha": "b83252012b8f8bfd1572e0e8f5023e0d523d45ba", "filename": "src/test/ui/fn-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ffn-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ffn-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,7 +8,7 @@ fn hof<F>(_: F) where F: FnMut(()) {}\n \n fn ice() {\n     hof(|c| match c {\n-        A::new() => (), //~ ERROR expected tuple struct/variant, found method\n+        A::new() => (), //~ ERROR expected tuple struct or tuple variant, found method\n         _ => ()\n     })\n }"}, {"sha": "70f84993acfe703f7aae432739f74f16ec26bcdd", "filename": "src/test/ui/fn-in-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct/variant, found method `<A>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `<A>::new`\n   --> $DIR/fn-in-pat.rs:11:9\n    |\n LL |         A::new() => (),"}, {"sha": "3db24431586da7e186d8a9f6ef5a493843debc8d", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -46,6 +46,9 @@ LL |     import();\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/glob-resolve1.rs:28:11\n    |\n+LL |     pub enum B { B1 }\n+   |     ----------------- similarly named enum `B` defined here\n+...\n LL |     foo::<A>();\n    |           ^\n    |\n@@ -61,6 +64,9 @@ LL | use bar::A;\n error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:29:11\n    |\n+LL |     pub enum B { B1 }\n+   |     ----------------- similarly named enum `B` defined here\n+...\n LL |     foo::<C>();\n    |           ^\n    |\n@@ -76,6 +82,9 @@ LL | use bar::C;\n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:30:11\n    |\n+LL |     pub enum B { B1 }\n+   |     ----------------- similarly named enum `B` defined here\n+...\n LL |     foo::<D>();\n    |           ^\n    |"}, {"sha": "ce8c2d5168fbb4a91be8c8a0296db8aef2655964", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // aux-build:two_macros.rs\n \n macro_rules! define_vec {"}, {"sha": "8e01fc8df3def99a3ee1db4a2826cab14ac42829", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,5 +1,5 @@\n error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:19:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:21:9\n    |\n LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,20 +8,24 @@ LL | define_other_core!();\n    | --------------------- in this macro invocation\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:13:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:15:9\n    |\n LL |         Vec::panic!();\n    |         ^^^ ambiguous name\n    |\n-   = note: `Vec` could refer to a struct from prelude\n-note: `Vec` could also refer to the crate imported here\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:5:9\n+note: `Vec` could refer to the crate imported here\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:7:9\n    |\n LL |         extern crate std as Vec;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | define_vec!();\n    | -------------- in this macro invocation\n+note: `Vec` could also refer to the struct defined here\n+  --> $SRC_DIR/libstd/prelude/v1.rs:LL:COL\n+   |\n+LL | pub use crate::vec::Vec;\n+   |         ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe36a7e00bff3dd6bff2dc546b1899cd6e10503d", "filename": "src/test/ui/issues/issue-10200.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-10200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-10200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10200.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -3,7 +3,7 @@ fn foo(_: usize) -> Foo { Foo(false) }\n \n fn main() {\n     match Foo(true) {\n-        foo(x) //~ ERROR expected tuple struct/variant, found function `foo`\n+        foo(x) //~ ERROR expected tuple struct or tuple variant, found function `foo`\n         => ()\n     }\n }"}, {"sha": "e60489f5b82f4d1d9b0add0a5bd79fb2a975e115", "filename": "src/test/ui/issues/issue-10200.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,9 @@\n-error[E0532]: expected tuple struct/variant, found function `foo`\n+error[E0532]: expected tuple struct or tuple variant, found function `foo`\n   --> $DIR/issue-10200.rs:6:9\n    |\n+LL | struct Foo(bool);\n+   | ----------------- similarly named tuple struct `Foo` defined here\n+...\n LL |         foo(x)\n    |         ^^^ help: a tuple struct with a similar name exists (notice the capitalization): `Foo`\n "}, {"sha": "1ac1c3d818e58c3f106c9a081da4c8f3abe48a78", "filename": "src/test/ui/issues/issue-12863.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-12863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-12863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12863.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,6 +2,7 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match () {\n-        foo::bar => {} //~ ERROR expected unit struct/variant or constant, found function `foo::bar`\n+        foo::bar => {}\n+        //~^ ERROR expected unit struct, unit variant or constant, found function `foo::bar`\n     }\n }"}, {"sha": "9c29a37cb930bb343955d77dd56e5a68c123e5cb", "filename": "src/test/ui/issues/issue-12863.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-12863.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-12863.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12863.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected unit struct/variant or constant, found function `foo::bar`\n+error[E0532]: expected unit struct, unit variant or constant, found function `foo::bar`\n   --> $DIR/issue-12863.rs:5:9\n    |\n LL |         foo::bar => {}\n-   |         ^^^^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to previous error\n "}, {"sha": "6da4e6e15284bcc44f9c3e9a74463af3358e2524", "filename": "src/test/ui/issues/issue-17933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17933.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -3,7 +3,7 @@ pub static X: usize = 1;\n fn main() {\n     match 1 {\n         self::X => { },\n-        //~^ ERROR expected unit struct/variant or constant, found static `self::X`\n+        //~^ ERROR expected unit struct, unit variant or constant, found static `self::X`\n         _       => { },\n     }\n }"}, {"sha": "33534d3f8f6a91ac6eeacc23a22e8e0c71415e4c", "filename": "src/test/ui/issues/issue-17933.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-17933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-17933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17933.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected unit struct/variant or constant, found static `self::X`\n+error[E0532]: expected unit struct, unit variant or constant, found static `self::X`\n   --> $DIR/issue-17933.rs:5:9\n    |\n LL |         self::X => { },\n-   |         ^^^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to previous error\n "}, {"sha": "cc83874cb16c254de3178cd918350ecf68d6d56d", "filename": "src/test/ui/issues/issue-19086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let f = FooB { x: 3, y: 4 };\n     match f {\n         FooB(a, b) => println!(\"{} {}\", a, b),\n-        //~^ ERROR expected tuple struct/variant, found struct variant `FooB`\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `FooB`\n     }\n }"}, {"sha": "27992da0ebd2f05b3cb92be638e27a38f0abc0f8", "filename": "src/test/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct/variant, found struct variant `FooB`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `FooB`\n   --> $DIR/issue-19086.rs:10:9\n    |\n LL |     FooB { x: i32, y: i32 }"}, {"sha": "bcb06d743a05d49cb38ece6eb1122dca104cdb54", "filename": "src/test/ui/issues/issue-27033.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n fn main() {\n     match Some(1) {\n         None @ _ => {} //~ ERROR match bindings cannot shadow unit variants"}, {"sha": "a4baa7bdf7f856842961652e05e2db3ae37c4918", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,11 +1,16 @@\n error[E0530]: match bindings cannot shadow unit variants\n-  --> $DIR/issue-27033.rs:3:9\n+  --> $DIR/issue-27033.rs:5:9\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n+   | \n+  ::: $SRC_DIR/libstd/prelude/v1.rs:LL:COL\n+   |\n+LL | pub use crate::option::Option::{self, Some, None};\n+   |                                             ---- the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n-  --> $DIR/issue-27033.rs:7:9\n+  --> $DIR/issue-27033.rs:9:9\n    |\n LL |     const C: u8 = 1;\n    |     ---------------- the constant `C` is defined here"}, {"sha": "f61daa94c5d72cb7f63dcdf21effec4b9eb31bee", "filename": "src/test/ui/issues/issue-28992-empty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -10,7 +10,7 @@ impl S {\n }\n \n fn main() {\n-    if let C1(..) = 0 {} //~ ERROR expected tuple struct/variant, found constant `C1`\n+    if let C1(..) = 0 {} //~ ERROR expected tuple struct or tuple variant, found constant `C1`\n     if let S::C2(..) = 0 {}\n-    //~^ ERROR expected tuple struct/variant, found associated constant `<S>::C2`\n+    //~^ ERROR expected tuple struct or tuple variant, found associated constant `<S>::C2`\n }"}, {"sha": "a4311880bcbe9dc172550418490288a2d440d756", "filename": "src/test/ui/issues/issue-28992-empty.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,10 +1,10 @@\n-error[E0532]: expected tuple struct/variant, found constant `C1`\n+error[E0532]: expected tuple struct or tuple variant, found constant `C1`\n   --> $DIR/issue-28992-empty.rs:13:12\n    |\n LL |     if let C1(..) = 0 {}\n-   |            ^^ not a tuple struct/variant\n+   |            ^^ not a tuple struct or tuple variant\n \n-error[E0164]: expected tuple struct/variant, found associated constant `<S>::C2`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `<S>::C2`\n   --> $DIR/issue-28992-empty.rs:14:12\n    |\n LL |     if let S::C2(..) = 0 {}"}, {"sha": "75d8859961a0491b9076bd163ed83d7febcbfb74", "filename": "src/test/ui/issues/issue-31845.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,11 @@\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/issue-31845.rs:7:12\n    |\n-LL |            g();\n-   |            ^ help: a function with a similar name exists: `h`\n+LL | /         fn h() {\n+LL | |            g();\n+   | |            ^ help: a function with a similar name exists: `h`\n+LL | |         }\n+   | |_________- similarly named function `h` defined here\n \n error: aborting due to previous error\n "}, {"sha": "b3493508c5a9fb3e535aee1d1001d190ca84c8bb", "filename": "src/test/ui/issues/issue-32004.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,12 +8,12 @@ struct S;\n fn main() {\n     match Foo::Baz {\n         Foo::Bar => {}\n-        //~^ ERROR expected unit struct/variant or constant, found tuple variant `Foo::Bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found tuple variant `Foo::Bar`\n         _ => {}\n     }\n \n     match S {\n         S(()) => {}\n-        //~^ ERROR expected tuple struct/variant, found unit struct `S`\n+        //~^ ERROR expected tuple struct or tuple variant, found unit struct `S`\n     }\n }"}, {"sha": "ab723e26680dce3284f6d200f93264eb7beacf42", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,20 +1,22 @@\n-error[E0532]: expected unit struct/variant or constant, found tuple variant `Foo::Bar`\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `Foo::Bar`\n   --> $DIR/issue-32004.rs:10:9\n    |\n LL |     Bar(i32),\n    |     -------- `Foo::Bar` defined here\n+LL |     Baz\n+   |     --- similarly named unit variant `Baz` defined here\n ...\n LL |         Foo::Bar => {}\n    |         ^^^^^---\n    |         |    |\n    |         |    help: a unit variant with a similar name exists: `Baz`\n    |         did you mean `Foo::Bar( /* fields */ )`?\n \n-error[E0532]: expected tuple struct/variant, found unit struct `S`\n+error[E0532]: expected tuple struct or tuple variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9\n    |\n LL |         S(()) => {}\n-   |         ^ not a tuple struct/variant\n+   |         ^ not a tuple struct or tuple variant\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d595d1dd7e6d1c0404cb3545134636d28d3ce8c0", "filename": "src/test/ui/issues/issue-32086.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32086.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,6 +2,6 @@ struct S(u8);\n const C: S = S(10);\n \n fn main() {\n-    let C(a) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n-    let C(..) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n+    let C(a) = S(11); //~ ERROR expected tuple struct or tuple variant, found constant `C`\n+    let C(..) = S(11); //~ ERROR expected tuple struct or tuple variant, found constant `C`\n }"}, {"sha": "e566dea89088de50ab994b4e7decc691c293ca34", "filename": "src/test/ui/issues/issue-32086.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,12 +1,18 @@\n-error[E0532]: expected tuple struct/variant, found constant `C`\n+error[E0532]: expected tuple struct or tuple variant, found constant `C`\n   --> $DIR/issue-32086.rs:5:9\n    |\n+LL | struct S(u8);\n+   | ------------- similarly named tuple struct `S` defined here\n+...\n LL |     let C(a) = S(11);\n    |         ^ help: a tuple struct with a similar name exists: `S`\n \n-error[E0532]: expected tuple struct/variant, found constant `C`\n+error[E0532]: expected tuple struct or tuple variant, found constant `C`\n   --> $DIR/issue-32086.rs:6:9\n    |\n+LL | struct S(u8);\n+   | ------------- similarly named tuple struct `S` defined here\n+...\n LL |     let C(..) = S(11);\n    |         ^ help: a tuple struct with a similar name exists: `S`\n "}, {"sha": "7876811a9ac39703facfee392a43b5de5f789673", "filename": "src/test/ui/issues/issue-35675.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -7,13 +7,13 @@ enum Fruit {\n fn should_return_fruit() -> Apple {\n     //~^ ERROR cannot find type `Apple` in this scope\n     Apple(5)\n-    //~^ ERROR cannot find function `Apple` in this scope\n+    //~^ ERROR cannot find function, tuple struct or tuple variant `Apple` in this scope\n }\n \n fn should_return_fruit_too() -> Fruit::Apple {\n     //~^ ERROR expected type, found variant `Fruit::Apple`\n     Apple(5)\n-    //~^ ERROR cannot find function `Apple` in this scope\n+    //~^ ERROR cannot find function, tuple struct or tuple variant `Apple` in this scope\n }\n \n fn foo() -> Ok {"}, {"sha": "a9a27da55b1a1833ee695fc58db515850907065f", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -9,7 +9,7 @@ help: there is an enum variant `Fruit::Apple`; try using the variant's enum\n LL | fn should_return_fruit() -> Fruit {\n    |                             ^^^^^\n \n-error[E0425]: cannot find function `Apple` in this scope\n+error[E0425]: cannot find function, tuple struct or tuple variant `Apple` in this scope\n   --> $DIR/issue-35675.rs:9:5\n    |\n LL |     Apple(5)\n@@ -29,7 +29,7 @@ LL | fn should_return_fruit_too() -> Fruit::Apple {\n    |                                 not a type\n    |                                 help: try using the variant's enum: `Fruit`\n \n-error[E0425]: cannot find function `Apple` in this scope\n+error[E0425]: cannot find function, tuple struct or tuple variant `Apple` in this scope\n   --> $DIR/issue-35675.rs:15:5\n    |\n LL |     Apple(5)"}, {"sha": "058e1be75657741dae41f58608f5a1205f52e018", "filename": "src/test/ui/issues/issue-38412.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let Box(a) = loop { };\n-    //~^ ERROR expected tuple struct/variant, found struct `Box`\n+    //~^ ERROR expected tuple struct or tuple variant, found struct `Box`\n \n     // (The below is a trick to allow compiler to infer a type for\n     // variable `a` without attempting to ascribe a type to the"}, {"sha": "318c92ad35fc5c89caa78036cf48def28d6b70fe", "filename": "src/test/ui/issues/issue-38412.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct/variant, found struct `Box`\n+error[E0532]: expected tuple struct or tuple variant, found struct `Box`\n   --> $DIR/issue-38412.rs:2:9\n    |\n LL |     let Box(a) = loop { };"}, {"sha": "cc365dc4c938e2655053d46c9881edc02464610e", "filename": "src/test/ui/issues/issue-42944.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -6,13 +6,15 @@ mod bar {\n     use foo::B;\n \n     fn foo() {\n-        B(()); //~ ERROR expected function, found struct `B` [E0423]\n+        B(());\n+        //~^ ERROR expected function, tuple struct or tuple variant, found struct `B` [E0423]\n     }\n }\n \n mod baz {\n     fn foo() {\n-        B(()); //~ ERROR cannot find function `B` in this scope [E0425]\n+        B(());\n+        //~^ ERROR cannot find function, tuple struct or tuple variant `B` in this scope [E0425]\n     }\n }\n "}, {"sha": "c71194f41c1148cf6c518cfd20b23f7b96d59475", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,11 +1,11 @@\n-error[E0423]: expected function, found struct `B`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `B`\n   --> $DIR/issue-42944.rs:9:9\n    |\n LL |         B(());\n    |         ^ constructor is not visible here due to private fields\n \n-error[E0425]: cannot find function `B` in this scope\n-  --> $DIR/issue-42944.rs:15:9\n+error[E0425]: cannot find function, tuple struct or tuple variant `B` in this scope\n+  --> $DIR/issue-42944.rs:16:9\n    |\n LL |         B(());\n    |         ^ not found in this scope"}, {"sha": "5d8a859a7379cb8703a14b79555a14bda45d9902", "filename": "src/test/ui/issues/issue-46332.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,9 @@\n error[E0422]: cannot find struct, variant or union type `TyUInt` in this scope\n   --> $DIR/issue-46332.rs:9:5\n    |\n+LL | struct TyUint {}\n+   | ---------------- similarly named struct `TyUint` defined here\n+...\n LL |     TyUInt {};\n    |     ^^^^^^ help: a struct with a similar name exists (notice the capitalization): `TyUint`\n "}, {"sha": "d9100cf555b3c521304a743ed13e13e9dc05934b", "filename": "src/test/ui/issues/issue-55587.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-55587.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-55587.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,5 +1,5 @@\n use std::path::Path;\n \n fn main() {\n-    let Path::new(); //~ ERROR expected tuple struct/variant\n+    let Path::new(); //~ ERROR expected tuple struct or tuple variant\n }"}, {"sha": "307227e1c4d109fb5810f2fe8da852386149c75e", "filename": "src/test/ui/issues/issue-55587.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n   --> $DIR/issue-55587.rs:4:9\n    |\n LL |     let Path::new();"}, {"sha": "7132d15ee5fbfc0d0dba206efdf30b9c3c2e9d05", "filename": "src/test/ui/issues/issue-56835.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56835.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -3,7 +3,7 @@ pub struct Foo {}\n impl Foo {\n     fn bar(Self(foo): Self) {}\n     //~^ ERROR the `Self` constructor can only be used with tuple or unit structs\n-    //~^^ ERROR expected tuple struct/variant, found self constructor `Self` [E0164]\n+    //~^^ ERROR expected tuple struct or tuple variant, found self constructor `Self` [E0164]\n }\n \n fn main() {}"}, {"sha": "c200ba8d52a32d585186ed640cf2ea9c34541d3b", "filename": "src/test/ui/issues/issue-56835.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,7 +4,7 @@ error: the `Self` constructor can only be used with tuple or unit structs\n LL |     fn bar(Self(foo): Self) {}\n    |            ^^^^^^^^^ help: use curly brackets: `Self { /* fields */ }`\n \n-error[E0164]: expected tuple struct/variant, found self constructor `Self`\n+error[E0164]: expected tuple struct or tuple variant, found self constructor `Self`\n   --> $DIR/issue-56835.rs:4:12\n    |\n LL |     fn bar(Self(foo): Self) {}"}, {"sha": "30527903ed0f25147b03faa79e14c018ba4120e3", "filename": "src/test/ui/issues/issue-58022.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -11,7 +11,8 @@ impl Bar<[u8]> {\n     const SIZE: usize = 32;\n \n     fn new(slice: &[u8; Self::SIZE]) -> Self {\n-        Foo(Box::new(*slice)) //~ ERROR: expected function, found trait `Foo`\n+        Foo(Box::new(*slice))\n+        //~^ ERROR: expected function, tuple struct or tuple variant, found trait `Foo`\n     }\n }\n "}, {"sha": "a3e4cb6320240982c23d4a798334260bac7b4acf", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0423]: expected function, found trait `Foo`\n+error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo`\n   --> $DIR/issue-58022.rs:14:9\n    |\n LL |         Foo(Box::new(*slice))\n-   |         ^^^ not a function\n+   |         ^^^ not a function, tuple struct or tuple variant\n \n error[E0283]: type annotations needed: cannot resolve `_: Foo`\n   --> $DIR/issue-58022.rs:4:25"}, {"sha": "14f95827be8ea7b84df20c973147ab0e932956c3", "filename": "src/test/ui/issues/issue-5927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-5927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-5927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5927.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let z = match 3 {\n-        x(1) => x(1) //~ ERROR cannot find tuple struct/variant `x` in this scope\n+        x(1) => x(1) //~ ERROR cannot find tuple struct or tuple variant `x` in this scope\n         //~^ ERROR cannot find function `x` in this scope\n     };\n     assert!(z == 3);"}, {"sha": "d6cd6853dbdb5d8a97dda8cf1b046afaea05dedf", "filename": "src/test/ui/issues/issue-5927.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-5927.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-5927.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5927.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0531]: cannot find tuple struct/variant `x` in this scope\n+error[E0531]: cannot find tuple struct or tuple variant `x` in this scope\n   --> $DIR/issue-5927.rs:3:9\n    |\n LL |         x(1) => x(1)"}, {"sha": "ab952666fd1dae1aeb8d7d281c6e64c71b8c90dd", "filename": "src/test/ui/issues/issue-63983.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -6,9 +6,9 @@ enum MyEnum {\n fn foo(en: MyEnum) {\n     match en {\n         MyEnum::Tuple => \"\",\n-        //~^ ERROR expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+//~^ ERROR expected unit struct, unit variant or constant, found tuple variant `MyEnum::Tuple`\n         MyEnum::Struct => \"\",\n-        //~^ ERROR expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+//~^ ERROR expected unit struct, unit variant or constant, found struct variant `MyEnum::Struct`\n     };\n }\n "}, {"sha": "e54466faedde613e9b4327477c7c157d542cf09a", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `MyEnum::Tuple`\n   --> $DIR/issue-63983.rs:8:9\n    |\n LL |     Tuple(i32),\n@@ -7,7 +7,7 @@ LL |     Tuple(i32),\n LL |         MyEnum::Tuple => \"\",\n    |         ^^^^^^^^^^^^^ did you mean `MyEnum::Tuple( /* fields */ )`?\n \n-error[E0532]: expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+error[E0532]: expected unit struct, unit variant or constant, found struct variant `MyEnum::Struct`\n   --> $DIR/issue-63983.rs:10:9\n    |\n LL |     Struct{ s: i32 },"}, {"sha": "f1427ef46e928a9ab64f81a5f5a1aa70c49b8036", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,5 +1,5 @@\n struct X {}\n \n-const Y: X = X(\"\u00f6\"); //~ ERROR expected function, found struct `X`\n+const Y: X = X(\"\u00f6\"); //~ ERROR expected function, tuple struct or tuple variant, found struct `X`\n \n fn main() {}"}, {"sha": "44e5d38abbc54a37467e4756b2c66cfc357a3213", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,14 +1,15 @@\n-error[E0423]: expected function, found struct `X`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n   --> $DIR/issue-64792-bad-unicode-ctor.rs:3:14\n    |\n LL | struct X {}\n    | ----------- `X` defined here\n LL | \n LL | const Y: X = X(\"\u00f6\");\n-   |              ^\n-   |              |\n-   |              did you mean `X { /* fields */ }`?\n-   |              help: a constant with a similar name exists: `Y`\n+   | -------------^------\n+   | |            |\n+   | |            did you mean `X { /* fields */ }`?\n+   | |            help: a constant with a similar name exists: `Y`\n+   | similarly named constant `Y` defined here\n \n error: aborting due to previous error\n "}, {"sha": "2bcc0aa2782dd055547d23effb04008cd1f60c57", "filename": "src/test/ui/issues/issue-pr29383.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -6,7 +6,9 @@ enum E {\n fn main() {\n     match None {\n         None => {}\n-        Some(E::A(..)) => {} //~ ERROR expected tuple struct/variant, found unit variant `E::A`\n-        Some(E::B(..)) => {} //~ ERROR expected tuple struct/variant, found unit variant `E::B`\n+        Some(E::A(..)) => {}\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `E::A`\n+        Some(E::B(..)) => {}\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `E::B`\n     }\n }"}, {"sha": "e92fd6c2fdc5ac97e799fe83f0723447e5507fa7", "filename": "src/test/ui/issues/issue-pr29383.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,14 +1,14 @@\n-error[E0532]: expected tuple struct/variant, found unit variant `E::A`\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E::A`\n   --> $DIR/issue-pr29383.rs:9:14\n    |\n LL |         Some(E::A(..)) => {}\n-   |              ^^^^ not a tuple struct/variant\n+   |              ^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct/variant, found unit variant `E::B`\n-  --> $DIR/issue-pr29383.rs:10:14\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `E::B`\n+  --> $DIR/issue-pr29383.rs:11:14\n    |\n LL |         Some(E::B(..)) => {}\n-   |              ^^^^ not a tuple struct/variant\n+   |              ^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72e4f01e21edda641b4316b29bb19e76aa06c393", "filename": "src/test/ui/keyword/keyword-self-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+    let Self = 22; //~ ERROR cannot find unit struct, unit variant or constant `Self` in this scope\n }"}, {"sha": "060e7c3eafc26b2cbcbe0569347f563a4ee351ac", "filename": "src/test/ui/keyword/keyword-self-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+error[E0531]: cannot find unit struct, unit variant or constant `Self` in this scope\n   --> $DIR/keyword-self-as-identifier.rs:2:9\n    |\n LL |     let Self = 22;"}, {"sha": "b2caba893e07284f8148e9f8428ba9352867cb6f", "filename": "src/test/ui/macros/macro_undefined.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,13 @@\n error: cannot find macro `k` in this scope\n   --> $DIR/macro_undefined.rs:11:5\n    |\n-LL |     k!();\n-   |     ^ help: a macro with a similar name exists: `kl`\n+LL | /     macro_rules! kl {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____- similarly named macro `kl` defined here\n+...\n+LL |       k!();\n+   |       ^ help: a macro with a similar name exists: `kl`\n \n error: aborting due to previous error\n "}, {"sha": "99092602c96472195191edfc909fd2b90ac8485f", "filename": "src/test/ui/match/match-fn-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,9 +4,9 @@ fn main() {\n     let path = Path::new(\"foo\");\n     match path {\n         Path::new(\"foo\") => println!(\"foo\"),\n-        //~^ ERROR expected tuple struct/variant\n+        //~^ ERROR expected tuple struct or tuple variant\n         Path::new(\"bar\") => println!(\"bar\"),\n-        //~^ ERROR expected tuple struct/variant\n+        //~^ ERROR expected tuple struct or tuple variant\n         _ => (),\n     }\n }"}, {"sha": "611904e6e91a03e16652669dd14283cf901990de", "filename": "src/test/ui/match/match-fn-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,12 +1,12 @@\n-error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n   --> $DIR/match-fn-call.rs:6:9\n    |\n LL |         Path::new(\"foo\") => println!(\"foo\"),\n    |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n    |\n    = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n-error[E0164]: expected tuple struct/variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n   --> $DIR/match-fn-call.rs:8:9\n    |\n LL |         Path::new(\"bar\") => println!(\"bar\"),"}, {"sha": "fa03cdac29fc24c36afde881a4d201d08ac20d57", "filename": "src/test/ui/match/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -10,7 +10,7 @@ fn main() {\n           Color::Rgb(_, _, _) => { }\n           Color::Cmyk(_, _, _, _) => { }\n           Color::NoColor(_) => { }\n-          //~^ ERROR expected tuple struct/variant, found unit variant `Color::NoColor`\n+          //~^ ERROR expected tuple struct or tuple variant, found unit variant `Color::NoColor`\n         }\n     }\n }"}, {"sha": "cfffcd13851b8fcb355deadb217561d878b484a2", "filename": "src/test/ui/match/match-pattern-field-mismatch-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected tuple struct/variant, found unit variant `Color::NoColor`\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `Color::NoColor`\n   --> $DIR/match-pattern-field-mismatch-2.rs:12:11\n    |\n LL |           Color::NoColor(_) => { }\n-   |           ^^^^^^^^^^^^^^ not a tuple struct/variant\n+   |           ^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to previous error\n "}, {"sha": "a4fa97fef38e9eeb89f9374273a2551d9031d87e", "filename": "src/test/ui/match/match-pattern-field-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     fn foo(c: Color) {\n         match c {\n           Color::Rgb(_, _) => { }\n-          //~^ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n+          //~^ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3\n           Color::Cmyk(_, _, _, _) => { }\n           Color::NoColor => { }\n         }"}, {"sha": "49f5e09edf45af235d7c5938f34a0b8d0226e1f2", "filename": "src/test/ui/methods/method-path-in-pattern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -13,20 +13,20 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         Foo::bar => {}\n-        //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n     }\n     match 0u32 {\n         <Foo>::bar => {}\n-        //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n     }\n     match 0u32 {\n         <Foo>::trait_bar => {}\n-        //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n     }\n     if let Foo::bar = 0u32 {}\n-    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n     if let <Foo>::bar = 0u32 {}\n-    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n     if let Foo::trait_bar = 0u32 {}\n-    //~^ ERROR expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n }"}, {"sha": "b290c34d52774d692f4e4fc246fc19edce7fc030", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,34 +1,34 @@\n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:15:9\n    |\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n    |         ^^^^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:26:12\n    |\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}\n    |            ^^^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:30:12\n    |\n LL |     if let Foo::trait_bar = 0u32 {}"}, {"sha": "c05160792d360cb1b4b5dd19384255b5045730af", "filename": "src/test/ui/methods/method-resolvable-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -9,6 +9,6 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         <Foo as MyTrait>::trait_bar => {}\n-        //~^ ERROR expected unit struct/variant or constant, found method `MyTrait::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `MyTrait::trait_bar`\n     }\n }"}, {"sha": "4b25b694e13acdbbeb0c67031dd24ee799cf79ed", "filename": "src/test/ui/methods/method-resolvable-path-in-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-resolvable-path-in-pattern.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected unit struct/variant or constant, found method `MyTrait::trait_bar`\n+error[E0532]: expected unit struct, unit variant or constant, found method `MyTrait::trait_bar`\n   --> $DIR/method-resolvable-path-in-pattern.rs:11:9\n    |\n LL |         <Foo as MyTrait>::trait_bar => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to previous error\n "}, {"sha": "0484661a2e1543f8888bdf741313e104b9e0deab", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found type alias `m1::S`\n   --> $DIR/namespace-mix.rs:34:11\n    |\n+LL |     pub struct TS();\n+   |     ---------------- similarly named tuple struct `TS` defined here\n+...\n LL |     check(m1::S);\n    |           ^^^^^\n    |\n@@ -39,6 +42,8 @@ error[E0423]: expected value, found struct variant `m7::V`\n    |\n LL |         V {},\n    |         ---- `m7::V` defined here\n+LL |         TV(),\n+   |         ---- similarly named tuple variant `TV` defined here\n ...\n LL |     check(m7::V);\n    |           ^^^^^ did you mean `m7::V { /* fields */ }`?"}, {"sha": "27b03c0c2db27fbf655fe66b6a597c6e5f5556f7", "filename": "src/test/ui/parser/recover-from-bad-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     //~^ ERROR expected type, found `3`\n     match x {\n         Enum::Foo(a, b) => {}\n-        //~^ ERROR expected tuple struct/variant, found struct variant `Enum::Foo`\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n         Enum::Bar(a, b) => {}\n     }\n }"}, {"sha": "375e2d5454489e20c202b9e21e13fac41b2f0766", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -9,7 +9,7 @@ LL |     let x = Enum::Foo(a: 3, b: 4);\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n    = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n-error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9\n    |\n LL |     Foo { a: usize, b: usize },"}, {"sha": "79cc4b552a717eed3c9958b0a065a0837417298d", "filename": "src/test/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -15,7 +15,7 @@ fn f(_c: char) {}\n fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n-        A::D(_) => (),       //~ ERROR expected tuple struct/variant, found unit variant `A::D`\n+        A::D(_) => (), //~ ERROR expected tuple struct or tuple variant, found unit variant `A::D`\n         _ => ()\n     }\n     match 'c' {"}, {"sha": "5a7dab30d83be43ab957e9b23150663070d8b996", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,9 +4,12 @@ error[E0433]: failed to resolve: use of undeclared type or module `E`\n LL |         E::V => {}\n    |         ^ use of undeclared type or module `E`\n \n-error[E0532]: expected tuple struct/variant, found unit variant `A::D`\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `A::D`\n   --> $DIR/pattern-error-continue.rs:18:9\n    |\n+LL |     B(isize, isize),\n+   |     --------------- similarly named tuple variant `B` defined here\n+...\n LL |         A::D(_) => (),\n    |         ^^^-\n    |            |"}, {"sha": "3326b12ffa5353086229632b16d716ab265a5b23", "filename": "src/test/ui/privacy/privacy-ns1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -17,7 +17,7 @@ pub mod foo1 {\n fn test_glob1() {\n     use foo1::*;\n \n-    Bar();  //~ ERROR expected function, found trait `Bar`\n+    Bar();  //~ ERROR expected function, tuple struct or tuple variant, found trait `Bar`\n }\n \n // private type, public value\n@@ -47,7 +47,7 @@ pub mod foo3 {\n fn test_glob3() {\n     use foo3::*;\n \n-    Bar();  //~ ERROR cannot find function `Bar` in this scope\n+    Bar();  //~ ERROR cannot find function, tuple struct or tuple variant `Bar` in this scope\n     let _x: Box<Bar>;  //~ ERROR cannot find type `Bar` in this scope\n }\n "}, {"sha": "3c766a33baae8d5a80c29214d9e038f9bd61d37e", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,9 @@\n-error[E0423]: expected function, found trait `Bar`\n+error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n   --> $DIR/privacy-ns1.rs:20:5\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named unit struct `Baz` defined here\n+...\n LL |     Bar();\n    |     ^^^\n    |\n@@ -20,6 +23,9 @@ LL | use foo3::Bar;\n error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns1.rs:35:17\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named struct `Baz` defined here\n+...\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n    |\n@@ -36,9 +42,12 @@ LL | use foo2::Bar;\n LL | use foo3::Bar;\n    |\n \n-error[E0425]: cannot find function `Bar` in this scope\n+error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:50:5\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named unit struct `Baz` defined here\n+...\n LL |     Bar();\n    |     ^^^\n    |\n@@ -58,6 +67,9 @@ LL | use foo3::Bar;\n error[E0412]: cannot find type `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:51:17\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named struct `Baz` defined here\n+...\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n    |"}, {"sha": "a2cc9e6aa9515de937212ddfcfb55b2c907ff8fc", "filename": "src/test/ui/privacy/privacy-ns2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -17,13 +17,13 @@ pub mod foo1 {\n fn test_single1() {\n     use foo1::Bar;\n \n-    Bar(); //~ ERROR expected function, found trait `Bar`\n+    Bar(); //~ ERROR expected function, tuple struct or tuple variant, found trait `Bar`\n }\n \n fn test_list1() {\n     use foo1::{Bar,Baz};\n \n-    Bar(); //~ ERROR expected function, found trait `Bar`\n+    Bar(); //~ ERROR expected function, tuple struct or tuple variant, found trait `Bar`\n }\n \n // private type, public value"}, {"sha": "6f54259f91867fe1cb3ce9127e0c0eaaa29c0a65", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0423]: expected function, found trait `Bar`\n+error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n   --> $DIR/privacy-ns2.rs:20:5\n    |\n LL |     Bar();\n-   |     ^^^ not a function\n+   |     ^^^ not a function, tuple struct or tuple variant\n    |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n@@ -13,9 +13,12 @@ LL | use foo2::Bar;\n LL | use foo3::Bar;\n    |\n \n-error[E0423]: expected function, found trait `Bar`\n+error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n   --> $DIR/privacy-ns2.rs:26:5\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named unit struct `Baz` defined here\n+...\n LL |     Bar();\n    |     ^^^\n    |\n@@ -69,6 +72,9 @@ LL | use foo3::Bar;\n error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns2.rs:48:17\n    |\n+LL |     pub struct Baz;\n+   |     --------------- similarly named struct `Baz` defined here\n+...\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n    |"}, {"sha": "7b2ffefb05b1937b2d5c3b149d56945267cc8aa3", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,4 @@\n // aux-build:parent-source-spans.rs\n-\n-\n #![feature(decl_macro, proc_macro_hygiene)]\n \n extern crate parent_source_spans;"}, {"sha": "3e54a71f0e81005bd45e2f08c0660bb6f7398b53", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,5 +1,5 @@\n error: first final: \"hello\"\n-  --> $DIR/parent-source-spans.rs:17:12\n+  --> $DIR/parent-source-spans.rs:15:12\n    |\n LL |     three!($a, $b);\n    |            ^^\n@@ -8,7 +8,7 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: second final: \"world\"\n-  --> $DIR/parent-source-spans.rs:17:16\n+  --> $DIR/parent-source-spans.rs:15:16\n    |\n LL |     three!($a, $b);\n    |                ^^\n@@ -17,7 +17,7 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: first parent: \"hello\"\n-  --> $DIR/parent-source-spans.rs:11:5\n+  --> $DIR/parent-source-spans.rs:9:5\n    |\n LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: second parent: \"world\"\n-  --> $DIR/parent-source-spans.rs:11:5\n+  --> $DIR/parent-source-spans.rs:9:5\n    |\n LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n@@ -35,31 +35,31 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: first grandparent: \"hello\"\n-  --> $DIR/parent-source-spans.rs:37:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second grandparent: \"world\"\n-  --> $DIR/parent-source-spans.rs:37:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"hello\"\n-  --> $DIR/parent-source-spans.rs:37:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"world\"\n-  --> $DIR/parent-source-spans.rs:37:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"yay\"\n-  --> $DIR/parent-source-spans.rs:17:12\n+  --> $DIR/parent-source-spans.rs:15:12\n    |\n LL |     three!($a, $b);\n    |            ^^\n@@ -68,7 +68,7 @@ LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error: second final: \"rust\"\n-  --> $DIR/parent-source-spans.rs:17:16\n+  --> $DIR/parent-source-spans.rs:15:16\n    |\n LL |     three!($a, $b);\n    |                ^^\n@@ -77,55 +77,55 @@ LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error: first parent: \"yay\"\n-  --> $DIR/parent-source-spans.rs:43:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second parent: \"rust\"\n-  --> $DIR/parent-source-spans.rs:43:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"yay\"\n-  --> $DIR/parent-source-spans.rs:43:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"rust\"\n-  --> $DIR/parent-source-spans.rs:43:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"hip\"\n-  --> $DIR/parent-source-spans.rs:49:12\n+  --> $DIR/parent-source-spans.rs:47:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second final: \"hop\"\n-  --> $DIR/parent-source-spans.rs:49:19\n+  --> $DIR/parent-source-spans.rs:47:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error: first source: \"hip\"\n-  --> $DIR/parent-source-spans.rs:49:12\n+  --> $DIR/parent-source-spans.rs:47:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second source: \"hop\"\n-  --> $DIR/parent-source-spans.rs:49:19\n+  --> $DIR/parent-source-spans.rs:47:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:30:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n@@ -134,7 +134,7 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:30:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n@@ -143,7 +143,7 @@ LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:30:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`"}, {"sha": "02c82c01ed3e0fb80a06c98faab79b038b53ad82", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -13,14 +13,24 @@ LL |     Dlona!();\n error: cannot find macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:50:5\n    |\n-LL |     attr_proc_macra!();\n-   |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n+LL | / macro_rules! attr_proc_mac {\n+LL | |     () => {}\n+LL | | }\n+   | |_- similarly named macro `attr_proc_mac` defined here\n+...\n+LL |       attr_proc_macra!();\n+   |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n \n error: cannot find macro `FooWithLongNama` in this scope\n   --> $DIR/resolve-error.rs:47:5\n    |\n-LL |     FooWithLongNama!();\n-   |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n+LL | / macro_rules! FooWithLongNam {\n+LL | |     () => {}\n+LL | | }\n+   | |_- similarly named macro `FooWithLongNam` defined here\n+...\n+LL |       FooWithLongNama!();\n+   |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:42:10"}, {"sha": "b1b60b4b73fb9dbd6e0e8420b29fafb8b4ffbd42", "filename": "src/test/ui/qualified/qualified-path-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -18,7 +18,7 @@ impl S {\n fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n-        //~^ ERROR expected unit struct/variant or constant, found method `<<S as Tr>::A>::f<u8>`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `<<S as Tr>::A>::f<u8>`\n         0 ..= <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n     }\n }"}, {"sha": "92792f2e86a83a82ab421ef06d04939a5598122d", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct/variant or constant, found method `<<S as Tr>::A>::f<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found method `<<S as Tr>::A>::f<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}, {"sha": "dfc16d6ce443c157134147b3f6743bd815b74c2c", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let _ = namespaced_enums::A;\n     //~^ ERROR cannot find value `A`\n     let _ = namespaced_enums::B(10);\n-    //~^ ERROR cannot find function `B`\n+    //~^ ERROR cannot find function, tuple struct or tuple variant `B`\n     let _ = namespaced_enums::C { a: 10 };\n     //~^ ERROR cannot find struct, variant or union type `C`\n }"}, {"sha": "61816709ecc5d791e389a4cbdc4259fa283bea07", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -9,7 +9,7 @@ help: possible candidate is found in another module, you can import it into scop\n LL | use namespaced_enums::Foo::A;\n    |\n \n-error[E0425]: cannot find function `B` in crate `namespaced_enums`\n+error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:7:31\n    |\n LL |     let _ = namespaced_enums::B(10);"}, {"sha": "af0a3cbcb2d8167673df45f277b1729a852a2cd1", "filename": "src/test/ui/resolve/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,5 +4,5 @@ enum Foo {\n \n fn main() {\n     let f = Foo::Variant(42);\n-    //~^ ERROR expected function, found struct variant `Foo::Variant`\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct variant `Foo::Variant`\n }"}, {"sha": "39b444498102c5a360b7c107e30f697cfdbd6191", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0423]: expected function, found struct variant `Foo::Variant`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct variant `Foo::Variant`\n   --> $DIR/issue-18252.rs:6:13\n    |\n LL |     Variant { x: usize }"}, {"sha": "1674c166ddacb01d4db6e39b40cf403764d1930e", "filename": "src/test/ui/resolve/issue-5035.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -7,6 +7,9 @@ LL | use ImportError;\n error[E0404]: expected trait, found type alias `K`\n   --> $DIR/issue-5035.rs:3:6\n    |\n+LL | trait I {}\n+   | ---------- similarly named trait `I` defined here\n+LL | type K = dyn I;\n LL | impl K for isize {}\n    |      ^\n    |      |"}, {"sha": "954dc36f38e301ee680f2d15f825b92f16ef2736", "filename": "src/test/ui/resolve/issue-6702.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,5 +4,6 @@ struct Monster {\n \n \n fn main() {\n-    let _m = Monster(); //~ ERROR expected function, found struct `Monster`\n+    let _m = Monster();\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct `Monster`\n }"}, {"sha": "252d50c70f8c4cea50c2aeeb29153240b40cc403", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0423]: expected function, found struct `Monster`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Monster`\n   --> $DIR/issue-6702.rs:7:14\n    |\n LL | / struct Monster {"}, {"sha": "8d8f3f35211e29f6919e7ce3352ca9a92a32bef6", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -7,6 +7,9 @@ LL | fn foo(c: esize) {} // Misspelled primitive type name.\n error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:10:10\n    |\n+LL | enum Bar { }\n+   | ------------ similarly named enum `Bar` defined here\n+LL | \n LL | type A = Baz; // Misspelled type name.\n    |          ^^^ help: an enum with a similar name exists: `Bar`\n \n@@ -25,24 +28,36 @@ LL |     type A = Baz; // No suggestion here, Bar is not visible\n error[E0425]: cannot find value `MAXITEM` in this scope\n   --> $DIR/levenshtein.rs:24:20\n    |\n+LL | const MAX_ITEM: usize = 10;\n+   | --------------------------- similarly named constant `MAX_ITEM` defined here\n+...\n LL |     let v = [0u32; MAXITEM]; // Misspelled constant name.\n    |                    ^^^^^^^ help: a constant with a similar name exists: `MAX_ITEM`\n \n error[E0425]: cannot find function `foobar` in this scope\n   --> $DIR/levenshtein.rs:26:5\n    |\n+LL | fn foo_bar() {}\n+   | --------------- similarly named function `foo_bar` defined here\n+...\n LL |     foobar(); // Misspelled function name.\n    |     ^^^^^^ help: a function with a similar name exists: `foo_bar`\n \n error[E0412]: cannot find type `first` in module `m`\n   --> $DIR/levenshtein.rs:28:15\n    |\n+LL |     pub struct First;\n+   |     ----------------- similarly named struct `First` defined here\n+...\n LL |     let b: m::first = m::second; // Misspelled item in module.\n    |               ^^^^^ help: a struct with a similar name exists (notice the capitalization): `First`\n \n error[E0425]: cannot find value `second` in module `m`\n   --> $DIR/levenshtein.rs:28:26\n    |\n+LL |     pub struct Second;\n+   |     ------------------ similarly named unit struct `Second` defined here\n+...\n LL |     let b: m::first = m::second; // Misspelled item in module.\n    |                          ^^^^^^ help: a unit struct with a similar name exists (notice the capitalization): `Second`\n "}, {"sha": "8a450ab85e92673a5c26b333d1c12a892b68ec13", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -16,8 +16,15 @@ LL |         m::Z::Unit;\n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n-LL |         Z;\n-   |         ^\n+LL | /     fn f() {\n+LL | |         n::Z;\n+LL | |\n+LL | |         Z;\n+   | |         ^\n+...  |\n+LL | |         // This is ok, it is equivalent to not having braces\n+LL | |     }\n+   | |_____- similarly named function `f` defined here\n    |\n help: a function with a similar name exists\n    |\n@@ -46,8 +53,17 @@ LL |           let _: Z = Z::Struct;\n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n    |\n-LL |     let _: E = m::E;\n-   |                ^^^^\n+LL | /     fn f() {\n+LL | |         n::Z;\n+LL | |\n+LL | |         Z;\n+...  |\n+LL | |         // This is ok, it is equivalent to not having braces\n+LL | |     }\n+   | |_____- similarly named function `f` defined here\n+...\n+LL |       let _: E = m::E;\n+   |                  ^^^^\n    |\n help: a function with a similar name exists\n    |\n@@ -114,8 +130,17 @@ LL |       let _: E = E::Struct;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n    |\n-LL |     let _: Z = m::n::Z;\n-   |            ^\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____- similarly named enum `E` defined here\n+...\n+LL |       let _: Z = m::n::Z;\n+   |              ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -144,8 +169,17 @@ LL |     let _: Z = m::Z::Unit;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12\n    |\n-LL |     let _: Z = m::n::Z::Fn;\n-   |            ^\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____- similarly named enum `E` defined here\n+...\n+LL |       let _: Z = m::n::Z::Fn;\n+   |              ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -159,8 +193,17 @@ LL | use m::n::Z;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n    |\n-LL |     let _: Z = m::n::Z::Struct;\n-   |            ^\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____- similarly named enum `E` defined here\n+...\n+LL |       let _: Z = m::n::Z::Struct;\n+   |              ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -185,8 +228,17 @@ LL |       let _: Z = m::n::Z::Struct;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12\n    |\n-LL |     let _: Z = m::n::Z::Unit {};\n-   |            ^\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____- similarly named enum `E` defined here\n+...\n+LL |       let _: Z = m::n::Z::Unit {};\n+   |              ^\n    |\n help: an enum with a similar name exists\n    |"}, {"sha": "f1a1de4d9c0fd118520db027ab2d6a4676bed996", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,9 @@\n error[E0423]: expected value, found struct `Z`\n   --> $DIR/privacy-struct-ctor.rs:20:9\n    |\n+LL |     pub struct S(u8);\n+   |     ----------------- similarly named tuple struct `S` defined here\n+...\n LL |         Z;\n    |         ^\n    |         |"}, {"sha": "ee9bce60ce6310e125c960582659a04d514e9837", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -16,21 +16,21 @@ impl Tr for S {\n         let _: field;\n         //~^ ERROR cannot find type `field`\n         let field(..);\n-        //~^ ERROR cannot find tuple struct/variant `field`\n+        //~^ ERROR cannot find tuple struct or tuple variant `field`\n         field;\n         //~^ ERROR cannot find value `field`\n \n         let _: Type;\n         //~^ ERROR cannot find type `Type`\n         let Type(..);\n-        //~^ ERROR cannot find tuple struct/variant `Type`\n+        //~^ ERROR cannot find tuple struct or tuple variant `Type`\n         Type;\n         //~^ ERROR cannot find value `Type`\n \n         let _: method;\n         //~^ ERROR cannot find type `method`\n         let method(..);\n-        //~^ ERROR cannot find tuple struct/variant `method`\n+        //~^ ERROR cannot find tuple struct or tuple variant `method`\n         method;\n         //~^ ERROR cannot find value `method`\n     }"}, {"sha": "a05ac0f8543957b3504f519a357ccfe594b9f566", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `field` in this scope\n LL |         let _: field;\n    |                ^^^^^ not found in this scope\n \n-error[E0531]: cannot find tuple struct/variant `field` in this scope\n+error[E0531]: cannot find tuple struct or tuple variant `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:18:13\n    |\n LL |         let field(..);\n@@ -22,7 +22,7 @@ error[E0412]: cannot find type `Type` in this scope\n LL |         let _: Type;\n    |                ^^^^ help: try: `Self::Type`\n \n-error[E0531]: cannot find tuple struct/variant `Type` in this scope\n+error[E0531]: cannot find tuple struct or tuple variant `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:25:13\n    |\n LL |         let Type(..);\n@@ -40,7 +40,7 @@ error[E0412]: cannot find type `method` in this scope\n LL |         let _: method;\n    |                ^^^^^^ not found in this scope\n \n-error[E0531]: cannot find tuple struct/variant `method` in this scope\n+error[E0531]: cannot find tuple struct or tuple variant `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:32:13\n    |\n LL |         let method(..);"}, {"sha": "33080340cb67a4440254675d3cb67a6ddfec88be", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -25,6 +25,9 @@ LL |     a.b.J\n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:32:5\n    |\n+LL |     pub const I: i32 = 1;\n+   |     --------------------- similarly named constant `I` defined here\n+...\n LL |     a::b.J\n    |     ^^^^\n    |\n@@ -48,6 +51,9 @@ LL |     a.b.f();\n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:40:12\n    |\n+LL |     pub const I: i32 = 1;\n+   |     --------------------- similarly named constant `I` defined here\n+...\n LL |     v.push(a::b);\n    |            ^^^-\n    |               |\n@@ -56,6 +62,9 @@ LL |     v.push(a::b);\n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n    |\n+LL |     pub const I: i32 = 1;\n+   |     --------------------- similarly named constant `I` defined here\n+...\n LL |     a::b.f()\n    |     ^^^^\n    |\n@@ -71,6 +80,9 @@ LL |     a::b::f()\n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:50:5\n    |\n+LL |     pub const I: i32 = 1;\n+   |     --------------------- similarly named constant `I` defined here\n+...\n LL |     a::b\n    |     ^^^-\n    |        |\n@@ -79,6 +91,9 @@ LL |     a::b\n error[E0423]: expected function, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:55:5\n    |\n+LL |     pub const I: i32 = 1;\n+   |     --------------------- similarly named constant `I` defined here\n+...\n LL |     a::b()\n    |     ^^^-\n    |        |"}, {"sha": "298e7e479983d4b95a82d0a2e8d01ed43cf82e6f", "filename": "src/test/ui/resolve/tuple-struct-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,6 +4,6 @@ type A = S;\n fn main() {\n     let s = A(0, 1); //~ ERROR expected function\n     match s {\n-        A(..) => {} //~ ERROR expected tuple struct/variant\n+        A(..) => {} //~ ERROR expected tuple struct or tuple variant\n     }\n }"}, {"sha": "5a7873301c8c7b33209bcfa555d35ad927b2d175", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,14 +1,20 @@\n-error[E0423]: expected function, found type alias `A`\n+error[E0423]: expected function, tuple struct or tuple variant, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:5:13\n    |\n+LL | struct S(u8, u16);\n+   | ------------------ similarly named tuple struct `S` defined here\n+...\n LL |     let s = A(0, 1);\n    |             ^ help: a tuple struct with a similar name exists: `S`\n    |\n    = note: can't use a type alias as a constructor\n \n-error[E0532]: expected tuple struct/variant, found type alias `A`\n+error[E0532]: expected tuple struct or tuple variant, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:7:9\n    |\n+LL | struct S(u8, u16);\n+   | ------------------ similarly named tuple struct `S` defined here\n+...\n LL |         A(..) => {}\n    |         ^ help: a tuple struct with a similar name exists: `S`\n    |"}, {"sha": "8cff35c4bc5ec1c3d7e49137e24ce7685785be17", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     //~^ ERROR `..` required with struct marked as non-exhaustive\n \n     let ts = TupleStruct(640, 480);\n-    //~^ ERROR expected function, found struct `TupleStruct` [E0423]\n+    //~^ ERROR expected function, tuple struct or tuple variant, found struct `TupleStruct` [E0423]\n \n     let ts_explicit = structs::TupleStruct(640, 480);\n     //~^ ERROR tuple struct constructor `TupleStruct` is private [E0603]"}, {"sha": "944965a15e3d02941dfcb95189bfe5786d8a1836", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0423]: expected function, found struct `TupleStruct`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `TupleStruct`\n   --> $DIR/struct.rs:20:14\n    |\n LL |     let ts = TupleStruct(640, 480);"}, {"sha": "d52ac7ec3c39db17d264091a78688921c2e59e28", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let crate = 0;\n-    //~^ ERROR expected unit struct/variant or constant, found module `crate`\n+    //~^ ERROR expected unit struct, unit variant or constant, found module `crate`\n }"}, {"sha": "acbb4cf1a6942d8ec1ffdda1c170027ab4626d48", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,8 @@\n-error[E0532]: expected unit struct/variant or constant, found module `crate`\n+error[E0532]: expected unit struct, unit variant or constant, found module `crate`\n   --> $DIR/keyword-crate-as-identifier.rs:4:9\n    |\n LL |     let crate = 0;\n-   |         ^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to previous error\n "}, {"sha": "cfb87f5186d32dd2f33101c91b3620b0c17cb250", "filename": "src/test/ui/self/self_type_keyword-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,12 +2,12 @@ use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n \n pub fn main() {\n     let Self = 5;\n-    //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+    //~^ ERROR cannot find unit struct, unit variant or constant `Self` in this scope\n \n     match 15 {\n         Self => (),\n-        //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+        //~^ ERROR cannot find unit struct, unit variant or constant `Self` in this scope\n         Foo { x: Self } => (),\n-        //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+        //~^ ERROR cannot find unit struct, unit variant or constant `Self` in this scope\n     }\n }"}, {"sha": "4e931f91f70c4323727bd69512568e2c19a5ba1f", "filename": "src/test/ui/self/self_type_keyword-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -4,19 +4,19 @@ error[E0432]: unresolved import `self::Self`\n LL | use self::Self as Foo;\n    |     ^^^^^^^^^^^^^^^^^ no `Self` in the root\n \n-error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+error[E0531]: cannot find unit struct, unit variant or constant `Self` in this scope\n   --> $DIR/self_type_keyword-2.rs:4:9\n    |\n LL |     let Self = 5;\n    |         ^^^^ not found in this scope\n \n-error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+error[E0531]: cannot find unit struct, unit variant or constant `Self` in this scope\n   --> $DIR/self_type_keyword-2.rs:8:9\n    |\n LL |         Self => (),\n    |         ^^^^ not found in this scope\n \n-error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+error[E0531]: cannot find unit struct, unit variant or constant `Self` in this scope\n   --> $DIR/self_type_keyword-2.rs:10:18\n    |\n LL |         Foo { x: Self } => (),"}, {"sha": "b42bf8eea1a16d466d6508279a4ba120b4305e8e", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n         //~^ ERROR expected identifier, found keyword `Self`\n         mut Self => (),\n         //~^ ERROR `mut` must be followed by a named binding\n-        //~| ERROR cannot find unit struct/variant or constant `Self`\n+        //~| ERROR cannot find unit struct, unit variant or constant `Self`\n         ref mut Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         Self!() => (),"}, {"sha": "fa603276c8eb5e2c976adb03c856b1fc68c219bb", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -60,7 +60,7 @@ error: cannot find macro `Self` in this scope\n LL |         Self!() => (),\n    |         ^^^^\n \n-error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n+error[E0531]: cannot find unit struct, unit variant or constant `Self` in this scope\n   --> $DIR/self_type_keyword.rs:16:13\n    |\n LL |         mut Self => (),"}, {"sha": "56810a4915869056cdb990c9fb563179ea0430b7", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,6 +1,8 @@\n error[E0423]: expected value, found struct variant `E::B`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n    |\n+LL |     A(usize),\n+   |     -------- similarly named tuple variant `A` defined here\n LL |     B { a: usize },\n    |     -------------- `E::B` defined here\n ..."}, {"sha": "4b3c930dccd450f9c8c2d7ad90997277e2295489", "filename": "src/test/ui/traits/trait-impl-for-module.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,8 +1,12 @@\n error[E0573]: expected type, found module `a`\n   --> $DIR/trait-impl-for-module.rs:7:12\n    |\n-LL | impl A for a {\n-   |            ^ help: a trait with a similar name exists: `A`\n+LL | / trait A {\n+LL | | }\n+   | |_- similarly named trait `A` defined here\n+LL | \n+LL |   impl A for a {\n+   |              ^ help: a trait with a similar name exists: `A`\n \n error: aborting due to previous error\n "}, {"sha": "ab40bf580ea8ff7adb3a3eb11bf5f7d74743bcb0", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -6,7 +6,7 @@ impl Enum {\n     fn foo(&self) -> () {\n         match self {\n             Self::A => (),\n-            //~^ ERROR expected unit struct/variant or constant, found tuple variant\n+            //~^ ERROR expected unit struct, unit variant or constant, found tuple variant\n         }\n     }\n }"}, {"sha": "cfe273b9dd2550d402d8b5760b14f5a75df21930", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct/variant or constant, found tuple variant `<Self>::A`\n+error[E0533]: expected unit struct, unit variant or constant, found tuple variant `<Self>::A`\n   --> $DIR/incorrect-variant-form-through-Self-issue-58006.rs:8:13\n    |\n LL |             Self::A => (),"}, {"sha": "efdbebf266219098ff3f6804dbe0a50fdf10051e", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -8,14 +8,14 @@ type Alias = Enum;\n \n fn main() {\n     Alias::Braced;\n-    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n     let Alias::Braced = panic!();\n-    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n     let Alias::Braced(..) = panic!();\n-    //~^ ERROR expected tuple struct/variant, found struct variant `<Alias>::Braced` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found struct variant `<Alias>::Braced` [E0164]\n \n     Alias::Unit();\n     //~^ ERROR expected function, found enum variant `<Alias>::Unit`\n     let Alias::Unit() = panic!();\n-    //~^ ERROR expected tuple struct/variant, found unit variant `<Alias>::Unit` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found unit variant `<Alias>::Unit` [E0164]\n }"}, {"sha": "17efc08c6327f3e99062930e5c105c74798d7529", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,16 +1,16 @@\n-error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:10:5\n    |\n LL |     Alias::Braced;\n    |     ^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:12:9\n    |\n LL |     let Alias::Braced = panic!();\n    |         ^^^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct/variant, found struct variant `<Alias>::Braced`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `<Alias>::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:14:9\n    |\n LL |     let Alias::Braced(..) = panic!();\n@@ -32,7 +32,7 @@ help: `<Alias>::Unit` is a unit variant, you need to write it without the parent\n LL |     <Alias>::Unit;\n    |     ^^^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct/variant, found unit variant `<Alias>::Unit`\n+error[E0164]: expected tuple struct or tuple variant, found unit variant `<Alias>::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:19:9\n    |\n LL |     let Alias::Unit() = panic!();"}, {"sha": "dbd41da6daf0b9a59f49bc0bd3180b961324dd05", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -13,6 +13,9 @@ LL |     <u8 as E::Y>::NN;\n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:19:24\n    |\n+LL |     type Y = u16;\n+   |     ------------- similarly named associated type `Y` defined here\n+...\n LL |     let _: <u8 as Tr>::N;\n    |                        ^ help: an associated type with a similar name exists: `Y`\n \n@@ -31,6 +34,9 @@ LL |     let _: <u8 as A>::N;\n error[E0576]: cannot find method or associated constant `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:22:17\n    |\n+LL |     fn Y() {}\n+   |     --------- similarly named method `Y` defined here\n+...\n LL |     <u8 as Tr>::N;\n    |                 ^ help: a method with a similar name exists: `Y`\n \n@@ -61,6 +67,9 @@ LL |     <u8 as E>::Y;\n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:30:24\n    |\n+LL |     type Y = u16;\n+   |     ------------- similarly named associated type `Y` defined here\n+...\n LL |     let _: <u8 as Tr>::N::NN;\n    |                        ^ help: an associated type with a similar name exists: `Y`\n \n@@ -79,6 +88,9 @@ LL |     let _: <u8 as A>::N::NN;\n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:33:17\n    |\n+LL |     type Y = u16;\n+   |     ------------- similarly named associated type `Y` defined here\n+...\n LL |     <u8 as Tr>::N::NN;\n    |                 ^ help: an associated type with a similar name exists: `Y`\n \n@@ -157,6 +169,9 @@ LL |     <u8 as Tr::Y>::NN;\n error[E0575]: expected associated type, found method `Dr::Z`\n   --> $DIR/ufcs-partially-resolved.rs:52:12\n    |\n+LL |     type X = u16;\n+   |     ------------- similarly named associated type `X` defined here\n+...\n LL |     let _: <u8 as Dr>::Z;\n    |            ^^^^^^^^^^^^-\n    |                        |\n@@ -165,6 +180,9 @@ LL |     let _: <u8 as Dr>::Z;\n error[E0575]: expected method or associated constant, found associated type `Dr::X`\n   --> $DIR/ufcs-partially-resolved.rs:53:5\n    |\n+LL |     fn Z() {}\n+   |     --------- similarly named method `Z` defined here\n+...\n LL |     <u8 as Dr>::X;\n    |     ^^^^^^^^^^^^-\n    |                 |\n@@ -175,6 +193,9 @@ LL |     <u8 as Dr>::X;\n error[E0575]: expected associated type, found method `Dr::Z`\n   --> $DIR/ufcs-partially-resolved.rs:54:12\n    |\n+LL |     type X = u16;\n+   |     ------------- similarly named associated type `X` defined here\n+...\n LL |     let _: <u8 as Dr>::Z::N;\n    |            ^^^^^^^^^^^^-^^^\n    |                        |"}, {"sha": "ff5bf6238e20b5e71931e625cc05cad0fe6b2d4f", "filename": "src/test/ui/ui-testing-optout.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.stderr?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -2,17 +2,26 @@ error[E0412]: cannot find type `B` in this scope\n  --> $DIR/ui-testing-optout.rs:4:10\n   |\n 4 | type A = B;\n-  |          ^ help: a type alias with a similar name exists: `A`\n+  | ---------^-\n+  | |        |\n+  | |        help: a type alias with a similar name exists: `A`\n+  | similarly named type alias `A` defined here\n \n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/ui-testing-optout.rs:10:10\n    |\n+4  | type A = B;\n+   | ----------- similarly named type alias `A` defined here\n+...\n 10 | type C = D;\n    |          ^ help: a type alias with a similar name exists: `A`\n \n error[E0412]: cannot find type `F` in this scope\n   --> $DIR/ui-testing-optout.rs:95:10\n    |\n+4  | type A = B;\n+   | ----------- similarly named type alias `A` defined here\n+...\n 95 | type E = F;\n    |          ^ help: a type alias with a similar name exists: `A`\n "}]}