{"sha": "0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjVlYjVmNzJmMzU0NDg5Y2U4OTdhMmJkMWY2YzFlOTEwMmZkZDI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-05-08T00:07:07Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-05-08T00:07:07Z"}, "message": "Add select for masks", "tree": {"sha": "e13350dfcc2266f6e0edb307d0f323fc21ffa332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13350dfcc2266f6e0edb307d0f323fc21ffa332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "html_url": "https://github.com/rust-lang/rust/commit/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfebaf901e6ac63cb9de686ef21b4709e5b35976", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfebaf901e6ac63cb9de686ef21b4709e5b35976", "html_url": "https://github.com/rust-lang/rust/commit/dfebaf901e6ac63cb9de686ef21b4709e5b35976"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "3779d96a40ec4283a517e744b5de26b4439e05dd", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "patch": "@@ -82,6 +82,7 @@ extern \"platform-intrinsic\" {\n \n     // select\n     pub(crate) fn simd_select<T, U>(m: T, a: U, b: U) -> U;\n+    #[allow(unused)]\n     pub(crate) fn simd_select_bitmask<T, U>(m: T, a: U, b: U) -> U;\n }\n "}, {"sha": "a00af73ef4d4c4bf07f124cfc66668a69e775376", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "patch": "@@ -1,10 +1,13 @@\n mod sealed {\n-pub trait Sealed {}\n+    pub trait Sealed {}\n }\n use sealed::Sealed;\n \n /// Supporting trait for vector `select` function\n-pub trait Select<Mask>: Sealed {}\n+pub trait Select<Mask>: Sealed {\n+    #[doc(hidden)]\n+    fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n+}\n \n macro_rules! impl_select {\n     {\n@@ -17,9 +20,32 @@ macro_rules! impl_select {\n             crate::$mask<LANES>: crate::Mask,\n             crate::$bits_ty<LANES>: crate::LanesAtMost32,\n             Self: crate::LanesAtMost32,\n-        {}\n+        {\n+            #[doc(hidden)]\n+            #[inline]\n+            fn select(mask: crate::$mask<LANES>, true_values: Self, false_values: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n+            }\n+        }\n         )*\n \n+        impl<const LANES: usize> Sealed for crate::$mask<LANES>\n+        where\n+            Self: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+        {}\n+        impl<const LANES: usize> Select<Self> for crate::$mask<LANES>\n+        where\n+            Self: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+        {\n+            #[doc(hidden)]\n+            #[inline]\n+            fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n+                mask & true_values | !mask & false_values\n+            }\n+        }\n+\n         impl<const LANES: usize> crate::$mask<LANES>\n         where\n             Self: crate::Mask,\n@@ -38,8 +64,19 @@ macro_rules! impl_select {\n             /// let c = mask.select(a, b);\n             /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n             /// ```\n+            ///\n+            /// `select` can also be used with masks:\n+            /// ```\n+            /// # use core_simd::{Mask32};\n+            /// let a = Mask32::from_array([true, true, false, false]);\n+            /// let b = Mask32::from_array([false, false, true, true]);\n+            /// let mask = Mask32::from_array([true, false, false, true]);\n+            /// let c = mask.select(a, b);\n+            /// assert_eq!(c.to_array(), [true, false, true, false]);\n+            /// ```\n+            #[inline]\n             pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-                unsafe { crate::intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+                S::select(self, true_values, false_values)\n             }\n         }\n     }"}, {"sha": "b414167866e71df0afb8e2869452580bc8d5797a", "filename": "crates/core_simd/tests/mask_ops_impl/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs?ref=0bf5eb5f72f354489ce897a2bd1f6c1e9102fdd2", "patch": "@@ -1,8 +1,8 @@\n #[macro_use]\n mod mask_macros;\n \n-mod mask8;\n mod mask16;\n mod mask32;\n mod mask64;\n+mod mask8;\n mod masksize;"}]}