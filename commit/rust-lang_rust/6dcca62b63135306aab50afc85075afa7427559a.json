{"sha": "6dcca62b63135306aab50afc85075afa7427559a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2NhNjJiNjMxMzUzMDZhYWI1MGFmYzg1MDc1YWZhNzQyNzU1OWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T18:48:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T18:48:59Z"}, "message": "move -Zmiri-disable-isolation hint to help", "tree": {"sha": "8db6d2e53a5976eb2fa5001521c31bfca88dc696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db6d2e53a5976eb2fa5001521c31bfca88dc696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcca62b63135306aab50afc85075afa7427559a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcca62b63135306aab50afc85075afa7427559a", "html_url": "https://github.com/rust-lang/rust/commit/6dcca62b63135306aab50afc85075afa7427559a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcca62b63135306aab50afc85075afa7427559a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b823886c072dfda3e3fdd34e5661beaf57d6d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b823886c072dfda3e3fdd34e5661beaf57d6d7", "html_url": "https://github.com/rust-lang/rust/commit/a1b823886c072dfda3e3fdd34e5661beaf57d6d7"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "c46ff5354dec3c749bb1fc0fb8ba0ca3b33b16b0", "filename": "src/diagnostics.rs", "status": "modified", "additions": 53, "deletions": 29, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6dcca62b63135306aab50afc85075afa7427559a/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcca62b63135306aab50afc85075afa7427559a/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=6dcca62b63135306aab50afc85075afa7427559a", "patch": "@@ -4,54 +4,78 @@ use rustc_span::DUMMY_SP;\n \n use crate::*;\n \n+/// Details of premature program termination.\n+pub enum TerminationInfo {\n+    Exit(i64),\n+    Abort(Option<String>),\n+    UnsupportedInIsolation(String),\n+}\n+\n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n     CreatedAlloc(AllocId),\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n-pub fn report_diagnostic<'tcx, 'mir>(\n+pub fn report_error<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     mut e: InterpErrorInfo<'tcx>,\n ) -> Option<i64> {\n     use InterpError::*;\n-    let title = match e.kind {\n-        Unsupported(_) => \"unsupported operation\",\n-        UndefinedBehavior(_) => \"Undefined Behavior\",\n-        InvalidProgram(_) => bug!(\"This error should be impossible in Miri: {}\", e),\n-        ResourceExhaustion(_) => \"resource exhaustion\",\n-        MachineStop(_) => \"program stopped\",\n-    };\n-    let msg = match e.kind {\n-        MachineStop(ref info) => {\n+\n+    e.print_backtrace();\n+    let (title, msg, help) = match e.kind {\n+        MachineStop(info) => {\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n-            match info {\n-                TerminationInfo::Exit(code) => return Some(*code),\n-                TerminationInfo::Abort(None) => format!(\"the evaluated program aborted execution\"),\n-                TerminationInfo::Abort(Some(msg)) => format!(\"the evaluated program aborted execution: {}\", msg),\n-            }\n+            use TerminationInfo::*;\n+            let (title, msg) = match info {\n+                Exit(code) => return Some(*code),\n+                Abort(None) =>\n+                    (\"abnormal termination\", format!(\"the evaluated program aborted execution\")),\n+                Abort(Some(msg)) =>\n+                    (\"abnormal termination\", format!(\"the evaluated program aborted execution: {}\", msg)),\n+                UnsupportedInIsolation(msg) =>\n+                    (\"unsupported operation\", format!(\"{}\", msg)),\n+            };\n+            let help = match info {\n+                UnsupportedInIsolation(_) =>\n+                    Some(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\"),\n+                _ => None,\n+            };\n+            (title, msg, help)\n+        }\n+        _ => {\n+            let (title, msg) = match e.kind {\n+                Unsupported(_) =>\n+                    (\"unsupported operation\", e.to_string()),\n+                UndefinedBehavior(_) =>\n+                    (\"Undefined Behavior\", e.to_string()),\n+                ResourceExhaustion(_) =>\n+                    (\"resource exhaustion\", e.to_string()),\n+                _ =>\n+                    bug!(\"This error should be impossible in Miri: {}\", e),\n+            };\n+            let help = match e.kind {\n+                Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n+                    Some(\"set `MIRI_SYSROOT` to a Miri sysroot, which you can prepare with `cargo miri setup`\"),\n+                Unsupported(_) =>\n+                    Some(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"),\n+                UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) =>\n+                    Some(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\"),\n+                UndefinedBehavior(_) =>\n+                    Some(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\"),\n+                _ => None,\n+            };\n+            (title, msg, help)\n         }\n-        _ => e.to_string(),\n-    };\n-    let help = match e.kind {\n-        Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n-            Some(\"set `MIRI_SYSROOT` to a Miri sysroot, which you can prepare with `cargo miri setup`\"),\n-        Unsupported(_) =>\n-            Some(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"),\n-        UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) =>\n-            Some(\"this indicates a potential bug in the program: it violated *experimental* rules, and caused Undefined Behavior\"),\n-        UndefinedBehavior(_) =>\n-            Some(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\"),\n-        _ => None,\n     };\n-    e.print_backtrace();\n     report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, help, true)\n }\n \n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n /// Also emits a full stacktrace of the interpreter stack.\n-pub fn report_msg<'tcx, 'mir>(\n+fn report_msg<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     title: &str,\n     span_msg: String,"}, {"sha": "d2ca57c39a792c576021e7d2f379980eb0743b4e", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dcca62b63135306aab50afc85075afa7427559a/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcca62b63135306aab50afc85075afa7427559a/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=6dcca62b63135306aab50afc85075afa7427559a", "patch": "@@ -51,12 +51,6 @@ impl Default for MiriConfig {\n     }\n }\n \n-/// Details of premature program termination.\n-pub enum TerminationInfo {\n-    Exit(i64),\n-    Abort(Option<String>),\n-}\n-\n /// Returns a freshly created `InterpCx`, along with an `MPlaceTy` representing\n /// the location where the return value of the `start` lang item will be\n /// written to.\n@@ -229,6 +223,6 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n             }\n             Some(return_code)\n         }\n-        Err(e) => report_diagnostic(&ecx, e),\n+        Err(e) => report_error(&ecx, e),\n     }\n }"}, {"sha": "ab6e33f231884f1ecea26a53a7041bfbfcfa542d", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcca62b63135306aab50afc85075afa7427559a/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcca62b63135306aab50afc85075afa7427559a/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=6dcca62b63135306aab50afc85075afa7427559a", "patch": "@@ -367,10 +367,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// case.\n     fn check_no_isolation(&self, name: &str) -> InterpResult<'tcx> {\n         if !self.eval_context_ref().machine.communicate {\n-            throw_unsup_format!(\n-                \"`{}` not available when isolation is enabled (pass the flag `-Zmiri-disable-isolation` to disable isolation)\",\n+            throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n+                \"`{}` not available when isolation is enabled\",\n                 name,\n-            )\n+            )))\n         }\n         Ok(())\n     }"}, {"sha": "32eb5b41e591962bf94922af4d7bc12369ece3e3", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcca62b63135306aab50afc85075afa7427559a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcca62b63135306aab50afc85075afa7427559a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6dcca62b63135306aab50afc85075afa7427559a", "patch": "@@ -45,10 +45,10 @@ pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;\n \n pub use crate::diagnostics::{\n-    register_diagnostic, report_diagnostic, EvalContextExt as DiagnosticsEvalContextExt,\n-    NonHaltingDiagnostic,\n+    register_diagnostic, report_error, EvalContextExt as DiagnosticsEvalContextExt,\n+    TerminationInfo, NonHaltingDiagnostic,\n };\n-pub use crate::eval::{create_ecx, eval_main, MiriConfig, TerminationInfo};\n+pub use crate::eval::{create_ecx, eval_main, MiriConfig};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{\n     AllocExtra, Evaluator, FrameData, MemoryExtra, MiriEvalContext, MiriEvalContextExt,"}]}