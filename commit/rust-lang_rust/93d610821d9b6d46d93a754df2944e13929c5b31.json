{"sha": "93d610821d9b6d46d93a754df2944e13929c5b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDYxMDgyMWQ5YjZkNDZkOTNhNzU0ZGYyOTQ0ZTEzOTI5YzViMzE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-17T21:10:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-17T21:10:56Z"}, "message": "Rollup merge of #64544 - RalfJung:build-manifest, r=pietroalbini\n\nbuild-manifest: re-add some comments\n\nhttps://github.com/rust-lang/rust/pull/64543 also reverted the comments I added. This adds them back.\nIncludes https://github.com/rust-lang/rust/pull/64543.\n\nr? @pietroalbini", "tree": {"sha": "e2484514e55afc462df9c8877cdb9c3540e37aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2484514e55afc462df9c8877cdb9c3540e37aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d610821d9b6d46d93a754df2944e13929c5b31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgUvgCRBK7hj4Ov3rIwAAdHIIAILxnZMgRCvoQB7lhUpJkzZ8\nCOE0Qyj0A7WVORC0nigd051wUF4g+tiqln0K7HNEvqF/n2E6zPJqzXG5dW8T8xaV\nZYdR8qYm7KjIG01g1uTzB62/ZoQ4yFDzj2goGGeaULppqM7c+6a/X1FCgKjHJULU\nbfbUMt0od+iF4Cot0D6bZDUv5Tk+huNmMpBJr3/4ckwr/6GZL5qHg/yPfRZGKNE7\n/l+5QZcj93gJTuppQiYXbTaxJFwYvuibPCdNCkQ1M6+AHMX9TGvuXsvLlt0rIG5v\nZ9tRKg00luZAyPb/G53x/X8CEBE///APYH8wC7Xq5ey6zgoqCaso/ZsImH3mXp0=\n=0pOW\n-----END PGP SIGNATURE-----\n", "payload": "tree e2484514e55afc462df9c8877cdb9c3540e37aa8\nparent f8b6e26cfbd301bbced3e4cab2c25b0164a39c81\nparent a4dc33baf6496e58eed16f612031475c88545091\nauthor Tyler Mandry <tmandry@gmail.com> 1568754656 -0700\ncommitter GitHub <noreply@github.com> 1568754656 -0700\n\nRollup merge of #64544 - RalfJung:build-manifest, r=pietroalbini\n\nbuild-manifest: re-add some comments\n\nhttps://github.com/rust-lang/rust/pull/64543 also reverted the comments I added. This adds them back.\nIncludes https://github.com/rust-lang/rust/pull/64543.\n\nr? @pietroalbini\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d610821d9b6d46d93a754df2944e13929c5b31", "html_url": "https://github.com/rust-lang/rust/commit/93d610821d9b6d46d93a754df2944e13929c5b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d610821d9b6d46d93a754df2944e13929c5b31/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81", "html_url": "https://github.com/rust-lang/rust/commit/f8b6e26cfbd301bbced3e4cab2c25b0164a39c81"}, {"sha": "a4dc33baf6496e58eed16f612031475c88545091", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dc33baf6496e58eed16f612031475c88545091", "html_url": "https://github.com/rust-lang/rust/commit/a4dc33baf6496e58eed16f612031475c88545091"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "076bcd878df7196a23fa23d0b4c617ba88850d41", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93d610821d9b6d46d93a754df2944e13929c5b31/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d610821d9b6d46d93a754df2944e13929c5b31/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=93d610821d9b6d46d93a754df2944e13929c5b31", "patch": "@@ -2000,6 +2000,8 @@ impl Step for HashSign {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n+        // This gets called by `promote-release`\n+        // (https://github.com/rust-lang/rust-central-station/tree/master/promote-release).\n         let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n         if builder.config.dry_run {\n             return;\n@@ -2010,10 +2012,14 @@ impl Step for HashSign {\n         let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n             panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n         });\n-        let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n-            panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n-        });\n-        let pass = t!(fs::read_to_string(&file));\n+        let pass = if env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err() {\n+            let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n+                panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n+            });\n+            t!(fs::read_to_string(&file))\n+        } else {\n+            String::new()\n+        };\n \n         let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n "}, {"sha": "eab23f3cfffc4982036418693767a32a65719665", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93d610821d9b6d46d93a754df2944e13929c5b31/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d610821d9b6d46d93a754df2944e13929c5b31/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=93d610821d9b6d46d93a754df2944e13929c5b31", "patch": "@@ -1,3 +1,9 @@\n+//! Build a dist manifest, hash and sign everything.\n+//! This gets called by `promote-release`\n+//! (https://github.com/rust-lang/rust-central-station/tree/master/promote-release)\n+//! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n+//! by rustbuild (in `src/bootstrap/dist.rs`).\n+\n use toml;\n use serde::Serialize;\n \n@@ -270,6 +276,7 @@ fn main() {\n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n     if should_sign {\n+        // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n \n@@ -362,6 +369,7 @@ impl Builder {\n         }\n     }\n \n+    /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n             let filename = file.file_name().unwrap().to_str().unwrap();\n@@ -532,19 +540,20 @@ impl Builder {\n             .as_ref()\n             .cloned()\n             .map(|version| (version, true))\n-            .unwrap_or_default();\n+            .unwrap_or_default(); // `is_present` defaults to `false` here.\n \n-        // miri needs to build std with xargo, which doesn't allow stable/beta:\n-        // <https://github.com/japaric/xargo/pull/204#issuecomment-374888868>\n+        // Miri is nightly-only; never ship it for other trains.\n         if pkgname == \"miri-preview\" && self.rust_release != \"nightly\" {\n-            is_present = false; // ignore it\n+            is_present = false; // Pretend the component is entirely missing.\n         }\n \n         let targets = targets.iter().map(|name| {\n             if is_present {\n+                // The component generally exists, but it might still be missing for this target.\n                 let filename = self.filename(pkgname, name);\n                 let digest = match self.digests.remove(&filename) {\n                     Some(digest) => digest,\n+                    // This component does not exist for this target -- skip it.\n                     None => return (name.to_string(), Target::unavailable()),\n                 };\n                 let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");"}]}