{"sha": "0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3", "node_id": "C_kwDOAAsO6NoAKDA1NjZhZGUwYjEzZmE1ZTRlMDllYTZkNzJmZTdjYjkyYTFjYjEzZTM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-27T02:06:24Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-03T00:29:39Z"}, "message": "Use generics for interned types rather than copy-pasting impls\n\nThis makes it much simpler to add new interned types, rather than having\nto add 4+ impl blocks for each type.", "tree": {"sha": "9d2bee8e773d8fe0eac2ba6e07eb83eb7f1780c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2bee8e773d8fe0eac2ba6e07eb83eb7f1780c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3", "html_url": "https://github.com/rust-lang/rust/commit/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8e0bc5824be2a05f086649815b2e10473663ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8e0bc5824be2a05f086649815b2e10473663ea", "html_url": "https://github.com/rust-lang/rust/commit/ee8e0bc5824be2a05f086649815b2e10473663ea"}], "stats": {"total": 112, "additions": 43, "deletions": 69}, "files": [{"sha": "72de0a090af2dfe8908c01dd572227db3f4f43e6", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 43, "deletions": 69, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=0566ade0b13fa5e4e09ea6d72fe7cb92a1cb13e3", "patch": "@@ -4,13 +4,12 @@ use std::cell::RefCell;\n use std::cmp::{Ord, Ordering, PartialOrd};\n use std::collections::HashMap;\n use std::convert::AsRef;\n-use std::ffi::OsStr;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::marker::PhantomData;\n use std::mem;\n use std::ops::Deref;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::sync::Mutex;\n \n // FIXME: replace with std::lazy after it gets stabilized and reaches beta\n@@ -20,15 +19,9 @@ use crate::builder::Step;\n \n pub struct Interned<T>(usize, PhantomData<*const T>);\n \n-impl Default for Interned<String> {\n+impl<T: Internable + Default> Default for Interned<T> {\n     fn default() -> Self {\n-        INTERNER.intern_string(String::default())\n-    }\n-}\n-\n-impl Default for Interned<PathBuf> {\n-    fn default() -> Self {\n-        INTERNER.intern_path(PathBuf::default())\n+        T::default().intern()\n     }\n }\n \n@@ -77,87 +70,48 @@ impl fmt::Display for Interned<String> {\n     }\n }\n \n-impl fmt::Debug for Interned<String> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s: &str = &*self;\n-        f.write_fmt(format_args!(\"{:?}\", s))\n-    }\n-}\n-impl fmt::Debug for Interned<PathBuf> {\n+impl<T, U: ?Sized + fmt::Debug> fmt::Debug for Interned<T>\n+where\n+    Self: Deref<Target = U>,\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s: &Path = &*self;\n+        let s: &U = &*self;\n         f.write_fmt(format_args!(\"{:?}\", s))\n     }\n }\n \n-impl Hash for Interned<String> {\n+impl<T: Internable + Hash> Hash for Interned<T> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        let l = INTERNER.strs.lock().unwrap();\n+        let l = T::intern_cache().lock().unwrap();\n         l.get(*self).hash(state)\n     }\n }\n \n-impl Hash for Interned<PathBuf> {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        let l = INTERNER.paths.lock().unwrap();\n-        l.get(*self).hash(state)\n-    }\n-}\n-\n-impl Deref for Interned<String> {\n-    type Target = str;\n-    fn deref(&self) -> &'static str {\n-        let l = INTERNER.strs.lock().unwrap();\n-        unsafe { mem::transmute::<&str, &'static str>(l.get(*self)) }\n-    }\n-}\n-\n-impl Deref for Interned<PathBuf> {\n-    type Target = Path;\n-    fn deref(&self) -> &'static Path {\n-        let l = INTERNER.paths.lock().unwrap();\n-        unsafe { mem::transmute::<&Path, &'static Path>(l.get(*self)) }\n-    }\n-}\n-\n-impl AsRef<Path> for Interned<PathBuf> {\n-    fn as_ref(&self) -> &'static Path {\n-        let l = INTERNER.paths.lock().unwrap();\n-        unsafe { mem::transmute::<&Path, &'static Path>(l.get(*self)) }\n-    }\n-}\n-\n-impl AsRef<Path> for Interned<String> {\n-    fn as_ref(&self) -> &'static Path {\n-        let l = INTERNER.strs.lock().unwrap();\n-        unsafe { mem::transmute::<&Path, &'static Path>(l.get(*self).as_ref()) }\n+impl<T: Internable + Deref> Deref for Interned<T> {\n+    type Target = T::Target;\n+    fn deref(&self) -> &'static Self::Target {\n+        let l = T::intern_cache().lock().unwrap();\n+        unsafe { mem::transmute::<&Self::Target, &'static Self::Target>(l.get(*self)) }\n     }\n }\n \n-impl AsRef<OsStr> for Interned<PathBuf> {\n-    fn as_ref(&self) -> &'static OsStr {\n-        let l = INTERNER.paths.lock().unwrap();\n-        unsafe { mem::transmute::<&OsStr, &'static OsStr>(l.get(*self).as_ref()) }\n+impl<T: Internable + AsRef<U>, U: ?Sized> AsRef<U> for Interned<T> {\n+    fn as_ref(&self) -> &'static U {\n+        let l = T::intern_cache().lock().unwrap();\n+        unsafe { mem::transmute::<&U, &'static U>(l.get(*self).as_ref()) }\n     }\n }\n \n-impl AsRef<OsStr> for Interned<String> {\n-    fn as_ref(&self) -> &'static OsStr {\n-        let l = INTERNER.strs.lock().unwrap();\n-        unsafe { mem::transmute::<&OsStr, &'static OsStr>(l.get(*self).as_ref()) }\n-    }\n-}\n-\n-impl PartialOrd<Interned<String>> for Interned<String> {\n+impl<T: Internable + PartialOrd> PartialOrd for Interned<T> {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        let l = INTERNER.strs.lock().unwrap();\n+        let l = T::intern_cache().lock().unwrap();\n         l.get(*self).partial_cmp(l.get(*other))\n     }\n }\n \n-impl Ord for Interned<String> {\n+impl<T: Internable + Ord> Ord for Interned<T> {\n     fn cmp(&self, other: &Self) -> Ordering {\n-        let l = INTERNER.strs.lock().unwrap();\n+        let l = T::intern_cache().lock().unwrap();\n         l.get(*self).cmp(l.get(*other))\n     }\n }\n@@ -210,6 +164,26 @@ pub struct Interner {\n     paths: Mutex<TyIntern<PathBuf>>,\n }\n \n+trait Internable: Clone + Eq + Hash + 'static {\n+    fn intern_cache() -> &'static Mutex<TyIntern<Self>>;\n+\n+    fn intern(self) -> Interned<Self> {\n+        Self::intern_cache().lock().unwrap().intern(self)\n+    }\n+}\n+\n+impl Internable for String {\n+    fn intern_cache() -> &'static Mutex<TyIntern<Self>> {\n+        &INTERNER.strs\n+    }\n+}\n+\n+impl Internable for PathBuf {\n+    fn intern_cache() -> &'static Mutex<TyIntern<Self>> {\n+        &INTERNER.paths\n+    }\n+}\n+\n impl Interner {\n     pub fn intern_str(&self, s: &str) -> Interned<String> {\n         self.strs.lock().unwrap().intern_borrow(s)"}]}