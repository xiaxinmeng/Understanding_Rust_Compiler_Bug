{"sha": "2178ef8b220daec3228f6f4dae60787e506fa089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNzhlZjhiMjIwZGFlYzMyMjhmNmY0ZGFlNjA3ODdlNTA2ZmEwODk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-23T12:36:08Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-26T21:34:22Z"}, "message": "TryFrom for integers: use From instead for truely-infallible impls\n\nThere is precendent in C for having a minimum pointer size, but I don\u2019t feel confident enough about the future to mandate a maximum.", "tree": {"sha": "2fac7941468b3e8fa8431f426693398ec7aafd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fac7941468b3e8fa8431f426693398ec7aafd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2178ef8b220daec3228f6f4dae60787e506fa089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2178ef8b220daec3228f6f4dae60787e506fa089", "html_url": "https://github.com/rust-lang/rust/commit/2178ef8b220daec3228f6f4dae60787e506fa089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2178ef8b220daec3228f6f4dae60787e506fa089/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188e693b392116c46f746e86f8521f9621fcfd43", "url": "https://api.github.com/repos/rust-lang/rust/commits/188e693b392116c46f746e86f8521f9621fcfd43", "html_url": "https://github.com/rust-lang/rust/commit/188e693b392116c46f746e86f8521f9621fcfd43"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "fa535e0e628369c06e3c3b62036d307d752719ea", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2178ef8b220daec3228f6f4dae60787e506fa089/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2178ef8b220daec3228f6f4dae60787e506fa089/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2178ef8b220daec3228f6f4dae60787e506fa089", "patch": "@@ -3804,14 +3804,11 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8);\n     try_from_unbounded!(isize, i16, i32, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u16);\n     rev!(try_from_upper_bounded, usize, u32, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16);\n     rev!(try_from_both_bounded, usize, i32, i64, i128);\n \n-    rev!(try_from_unbounded, isize, u8);\n     rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i16);\n     rev!(try_from_both_bounded, isize, i32, i64, i128);\n }\n \n@@ -3830,14 +3827,14 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8, i16);\n     try_from_unbounded!(isize, i32, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u16, u32);\n+    rev!(try_from_unbounded, usize, u32);\n     rev!(try_from_upper_bounded, usize, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32);\n     rev!(try_from_both_bounded, usize, i64, i128);\n \n-    rev!(try_from_unbounded, isize, u8, u16);\n+    rev!(try_from_unbounded, isize, u16);\n     rev!(try_from_upper_bounded, isize, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i16, i32);\n+    rev!(try_from_unbounded, isize, i32);\n     rev!(try_from_both_bounded, isize, i64, i128);\n }\n \n@@ -3856,14 +3853,14 @@ mod ptr_try_from_impls {\n     try_from_both_bounded!(isize, i8, i16, i32);\n     try_from_unbounded!(isize, i64, i128);\n \n-    rev!(try_from_unbounded, usize, u16, u32, u64);\n+    rev!(try_from_unbounded, usize, u32, u64);\n     rev!(try_from_upper_bounded, usize, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n     rev!(try_from_both_bounded, usize, i128);\n \n-    rev!(try_from_unbounded, isize, u8, u16, u32);\n+    rev!(try_from_unbounded, isize, u16, u32);\n     rev!(try_from_upper_bounded, isize, u64, u128);\n-    rev!(try_from_unbounded, isize, i16, i32, i64);\n+    rev!(try_from_unbounded, isize, i32, i64);\n     rev!(try_from_both_bounded, isize, i128);\n }\n \n@@ -4074,6 +4071,20 @@ impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")]\n impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n \n+// The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n+// which imply that pointer-sized integers must be at least 16 bits:\n+// https://port70.net/~nsz/c/c99/n1256.html#7.18.2.4\n+impl_from! { u16, usize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+impl_from! { u8, isize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+impl_from! { i16, isize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+\n+// RISC-V defines the possibility of a 128-bit address space (RV128).\n+\n+// CHERI proposes 256-bit \u201ccapabilities\u201d. Unclear if this would be relevant to usize/isize.\n+// https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20171017a-cheri-poster.pdf\n+// http://www.csl.sri.com/users/neumann/2012resolve-cheri.pdf\n+\n+\n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.\n // Lossy float conversions are not implemented at this time."}]}