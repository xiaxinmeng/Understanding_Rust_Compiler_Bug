{"sha": "eeee0e8f4c30301d079ab225f093804c939c3ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZWUwZThmNGMzMDMwMWQwNzlhYjIyNWYwOTM4MDRjOTM5YzNlZjM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-16T11:37:49Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-16T17:45:41Z"}, "message": "Remove hax\n\nFixes #19321", "tree": {"sha": "fc0d062eec70f07c72d013feff53d45565bc24fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0d062eec70f07c72d013feff53d45565bc24fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeee0e8f4c30301d079ab225f093804c939c3ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeee0e8f4c30301d079ab225f093804c939c3ef3", "html_url": "https://github.com/rust-lang/rust/commit/eeee0e8f4c30301d079ab225f093804c939c3ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeee0e8f4c30301d079ab225f093804c939c3ef3/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 61, "additions": 1, "deletions": 60}, "files": [{"sha": "a8b08655355074ce127f58b864133bc0e5525852", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/eeee0e8f4c30301d079ab225f093804c939c3ef3/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeee0e8f4c30301d079ab225f093804c939c3ef3/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=eeee0e8f4c30301d079ab225f093804c939c3ef3", "patch": "@@ -58,7 +58,7 @@ pub use self::Linkage::*;\n \n use std::ffi::CString;\n use std::cell::RefCell;\n-use std::{raw, mem, ptr};\n+use std::{raw, mem};\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n@@ -2225,65 +2225,6 @@ pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n         .expect(\"got a non-UTF8 DebugLoc from LLVM\")\n }\n \n-// FIXME #15460 - create a public function that actually calls our\n-// static LLVM symbols. Otherwise the linker will just throw llvm\n-// away.  We're just calling lots of stuff until we transitively get\n-// all of LLVM. This is worse than anything.\n-pub unsafe fn static_link_hack_this_sucks() {\n-    LLVMInitializePasses();\n-\n-    LLVMInitializeX86TargetInfo();\n-    LLVMInitializeX86Target();\n-    LLVMInitializeX86TargetMC();\n-    LLVMInitializeX86AsmPrinter();\n-    LLVMInitializeX86AsmParser();\n-\n-    LLVMInitializeARMTargetInfo();\n-    LLVMInitializeARMTarget();\n-    LLVMInitializeARMTargetMC();\n-    LLVMInitializeARMAsmPrinter();\n-    LLVMInitializeARMAsmParser();\n-\n-    LLVMInitializeAArch64TargetInfo();\n-    LLVMInitializeAArch64Target();\n-    LLVMInitializeAArch64TargetMC();\n-    LLVMInitializeAArch64AsmPrinter();\n-    LLVMInitializeAArch64AsmParser();\n-\n-    LLVMInitializeMipsTargetInfo();\n-    LLVMInitializeMipsTarget();\n-    LLVMInitializeMipsTargetMC();\n-    LLVMInitializeMipsAsmPrinter();\n-    LLVMInitializeMipsAsmParser();\n-\n-    LLVMInitializePowerPCTargetInfo();\n-    LLVMInitializePowerPCTarget();\n-    LLVMInitializePowerPCTargetMC();\n-    LLVMInitializePowerPCAsmPrinter();\n-    LLVMInitializePowerPCAsmParser();\n-\n-    LLVMRustSetLLVMOptions(0 as c_int, ptr::null());\n-\n-    LLVMPassManagerBuilderPopulateModulePassManager(ptr::null_mut(), ptr::null_mut());\n-    LLVMPassManagerBuilderPopulateLTOPassManager(ptr::null_mut(), ptr::null_mut(), False, False);\n-    LLVMPassManagerBuilderPopulateFunctionPassManager(ptr::null_mut(), ptr::null_mut());\n-    LLVMPassManagerBuilderSetOptLevel(ptr::null_mut(), 0 as c_uint);\n-    LLVMPassManagerBuilderUseInlinerWithThreshold(ptr::null_mut(), 0 as c_uint);\n-    LLVMWriteBitcodeToFile(ptr::null_mut(), ptr::null());\n-    LLVMPassManagerBuilderCreate();\n-    LLVMPassManagerBuilderDispose(ptr::null_mut());\n-\n-    LLVMRustLinkInExternalBitcode(ptr::null_mut(), ptr::null(), 0 as size_t);\n-\n-    LLVMLinkInMCJIT();\n-    LLVMLinkInInterpreter();\n-\n-    extern {\n-        fn LLVMLinkInMCJIT();\n-        fn LLVMLinkInInterpreter();\n-    }\n-}\n-\n // The module containing the native LLVM dependencies, generated by the build system\n // Note that this must come after the rustllvm extern declaration so that\n // parts of LLVM that rustllvm depends on aren't thrown away by the linker."}]}