{"sha": "1d7a2472bf88da7364235334902321be32408388", "node_id": "C_kwDOAAsO6NoAKDFkN2EyNDcyYmY4OGRhNzM2NDIzNTMzNDkwMjMyMWJlMzI0MDgzODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-20T21:02:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-22T01:19:28Z"}, "message": "Print ty placeholders pretty", "tree": {"sha": "3f2eaafd6a9628ca9fbf3da30607fc55308bab63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2eaafd6a9628ca9fbf3da30607fc55308bab63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7a2472bf88da7364235334902321be32408388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a2472bf88da7364235334902321be32408388", "html_url": "https://github.com/rust-lang/rust/commit/1d7a2472bf88da7364235334902321be32408388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a2472bf88da7364235334902321be32408388/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "html_url": "https://github.com/rust-lang/rust/commit/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "888b3a50b77e9f811bdb48bb25a1bc149ba8f3b2", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d7a2472bf88da7364235334902321be32408388/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7a2472bf88da7364235334902321be32408388/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1d7a2472bf88da7364235334902321be32408388", "patch": "@@ -738,7 +738,9 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n-                ty::BoundTyKind::Anon => p!(write(\"Placeholder({:?})\", placeholder)),\n+                ty::BoundTyKind::Anon => {\n+                    self.pretty_print_placeholder_var(placeholder.universe, placeholder.bound.var)?\n+                }\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n@@ -1172,6 +1174,18 @@ pub trait PrettyPrinter<'tcx>:\n         }\n     }\n \n+    fn pretty_print_placeholder_var(\n+        &mut self,\n+        ui: ty::UniverseIndex,\n+        var: ty::BoundVar,\n+    ) -> Result<(), Self::Error> {\n+        if ui == ty::UniverseIndex::ROOT {\n+            write!(self, \"!{}\", var.index())\n+        } else {\n+            write!(self, \"!{}_{}\", ui.index(), var.index())\n+        }\n+    }\n+\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }"}, {"sha": "4c1f2dd0e5334b547c821b302f9a739073a8528f", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d7a2472bf88da7364235334902321be32408388/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7a2472bf88da7364235334902321be32408388/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=1d7a2472bf88da7364235334902321be32408388", "patch": "@@ -203,6 +203,10 @@ pub enum TyKind<I: Interner> {\n     /// `for<'a, T> &'a (): Trait<T>` and then convert the introduced bound variables\n     /// back to inference variables in a new inference context when inside of the query.\n     ///\n+    /// It is conventional to render anonymous bound types like `^N` or `^D_N`,\n+    /// where `N` is the bound variable's anonymous index into the binder, and\n+    /// `D` is the debruijn index, or totally omitted if the debruijn index is zero.\n+    ///\n     /// See the `rustc-dev-guide` for more details about\n     /// [higher-ranked trait bounds][1] and [canonical queries][2].\n     ///\n@@ -212,6 +216,12 @@ pub enum TyKind<I: Interner> {\n \n     /// A placeholder type, used during higher ranked subtyping to instantiate\n     /// bound variables.\n+    ///\n+    /// It is conventional to render anonymous placeholer types like `!N` or `!U_N`,\n+    /// where `N` is the placeholder variable's anonymous index (which corresponds\n+    /// to the bound variable's index from the binder from which it was instantiated),\n+    /// and `U` is the universe index in which it is instantiated, or totally omitted\n+    /// if the universe index is zero.\n     Placeholder(I::PlaceholderType),\n \n     /// A type variable used during type checking."}]}