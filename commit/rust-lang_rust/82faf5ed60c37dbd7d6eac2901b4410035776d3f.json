{"sha": "82faf5ed60c37dbd7d6eac2901b4410035776d3f", "node_id": "C_kwDOAAsO6NoAKDgyZmFmNWVkNjBjMzdkYmQ3ZDZlYWMyOTAxYjQ0MTAwMzU3NzZkM2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T05:07:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T05:07:22Z"}, "message": "Auto merge of #111895 - matthiaskrgr:rollup-9a6szng, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #111861 (Don't ICE on return-type notation when promoting trait preds to associated type bounds)\n - #111864 (Always require closure parameters to be `Sized`)\n - #111870 (Rename `traits_in_crate` query to `traits`)\n - #111880 (Don't ICE when computing PointerLike trait when region vars are in param-env)\n - #111887 (Add regression tests for pretty-printing inherent projections)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4a116f8c74e126b3a078ac4ae900c14b959ba64d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a116f8c74e126b3a078ac4ae900c14b959ba64d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82faf5ed60c37dbd7d6eac2901b4410035776d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82faf5ed60c37dbd7d6eac2901b4410035776d3f", "html_url": "https://github.com/rust-lang/rust/commit/82faf5ed60c37dbd7d6eac2901b4410035776d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82faf5ed60c37dbd7d6eac2901b4410035776d3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d826e01e874b1a7e079a0da83c38b48f9e8afe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d826e01e874b1a7e079a0da83c38b48f9e8afe2", "html_url": "https://github.com/rust-lang/rust/commit/9d826e01e874b1a7e079a0da83c38b48f9e8afe2"}, {"sha": "d49d347f15c8647920c9e489989a7d9a6197d3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49d347f15c8647920c9e489989a7d9a6197d3b6", "html_url": "https://github.com/rust-lang/rust/commit/d49d347f15c8647920c9e489989a7d9a6197d3b6"}], "stats": {"total": 207, "additions": 182, "deletions": 25}, "files": [{"sha": "e5b5dae551e875c2d4635b8e5b3a65d398cd3765", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -427,6 +427,8 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             //   supertrait).\n             if let ty::Alias(ty::Projection, projection) = ty.kind() {\n                 projection.substs == trait_identity_substs\n+                    // FIXME(return_type_notation): This check should be more robust\n+                    && !tcx.is_impl_trait_in_trait(projection.def_id)\n                     && tcx.associated_item(projection.def_id).container_id(tcx)\n                         == def_id.to_def_id()\n             } else {"}, {"sha": "bfabd44bb579227c442d31e82942162dc4d216e8", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -32,6 +32,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n+    params_can_be_unsized: bool,\n ) -> Option<GeneratorTypes<'tcx>> {\n     let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n \n@@ -94,7 +95,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if param.pat.simple_ident().is_none() && !tcx.features().unsized_fn_params {\n+        if param.pat.simple_ident().is_none() && !params_can_be_unsized {\n             fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n "}, {"sha": "9659a0ec13d4029324bd61e909b180622db7a2d6", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -89,6 +89,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr_def_id,\n             body,\n             closure.movability,\n+            // Closure \"rust-call\" ABI doesn't support unsized params\n+            false,\n         );\n \n         let parent_substs = InternalSubsts::identity_for_item("}, {"sha": "b97b55d8f7ee824e50327ff9ce8f7e9bfebc9020", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -212,7 +212,7 @@ fn typeck_with_fallback<'tcx>(\n         let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n         let fn_sig = fcx.normalize(body.value.span, fn_sig);\n \n-        check_fn(&mut fcx, fn_sig, decl, def_id, body, None);\n+        check_fn(&mut fcx, fn_sig, decl, def_id, body, None, tcx.features().unsized_fn_params);\n     } else {\n         let expected_type = if let Some(&hir::Ty { kind: hir::TyKind::Infer, span, .. }) = body_ty {\n             Some(fcx.next_ty_var(TypeVariableOrigin {"}, {"sha": "7425963d30ff811b7a93dd99a6e40cb694d71ba3", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -323,7 +323,7 @@ provide! { tcx, def_id, other, cdata,\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n-    traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    traits => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n     trait_impls_in_crate => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n     implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n     crate_incoherent_impls => { cdata.get_incoherent_impls(tcx, other) }"}, {"sha": "f067bca4b0b396846f1837c3da0014eefeabb7ec", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -1938,7 +1938,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_traits(&mut self) -> LazyArray<DefIndex> {\n         empty_proc_macro!(self);\n-        self.lazy_array(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n+        self.lazy_array(self.tcx.traits(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n@@ -2329,7 +2329,7 @@ pub fn provide(providers: &mut Providers) {\n                 .get(&def_id)\n                 .expect(\"no traits in scope for a doc link\")\n         },\n-        traits_in_crate: |tcx, LocalCrate| {\n+        traits: |tcx, LocalCrate| {\n             let mut traits = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Trait | DefKind::TraitAlias) {"}, {"sha": "1528be42f6a188251c9b8bb14e2e0b6cd6aae639", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -38,7 +38,10 @@ use crate::traits::query::{\n     OutlivesBound,\n };\n use crate::traits::specialization_graph;\n-use crate::traits::{self, ImplSource};\n+use crate::traits::{\n+    CanonicalChalkEnvironmentAndGoal, CodegenObligationError, EvaluationResult, ImplSource,\n+    ObjectSafetyViolation, ObligationCause, OverflowError, WellFormedLoc,\n+};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::ValidityRequirement;\n use crate::ty::subst::{GenericArg, SubstsRef};\n@@ -1273,7 +1276,7 @@ rustc_queries! {\n \n     query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-    ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n+    ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {\n         cache_on_disk_if { true }\n         desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n@@ -1294,7 +1297,7 @@ rustc_queries! {\n         desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(trait_id) }\n         cache_on_disk_if { true }\n     }\n-    query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n+    query object_safety_violations(trait_id: DefId) -> &'tcx [ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n     query check_is_object_safe(trait_id: DefId) -> bool {\n@@ -1838,8 +1841,7 @@ rustc_queries! {\n     }\n \n     /// A list of all traits in a crate, used by rustdoc and error reporting.\n-    /// NOTE: Not named just `traits` due to a naming conflict.\n-    query traits_in_crate(_: CrateNum) -> &'tcx [DefId] {\n+    query traits(_: CrateNum) -> &'tcx [DefId] {\n         desc { \"fetching all traits in a crate\" }\n         separate_provide_extern\n     }\n@@ -1953,12 +1955,12 @@ rustc_queries! {\n     /// `infcx.predicate_must_hold()` instead.\n     query evaluate_obligation(\n         goal: CanonicalPredicateGoal<'tcx>\n-    ) -> Result<traits::EvaluationResult, traits::OverflowError> {\n+    ) -> Result<EvaluationResult, OverflowError> {\n         desc { \"evaluating trait selection obligation `{}`\", goal.value.value }\n     }\n \n     query evaluate_goal(\n-        goal: traits::CanonicalChalkEnvironmentAndGoal<'tcx>\n+        goal: CanonicalChalkEnvironmentAndGoal<'tcx>\n     ) -> Result<\n         &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n         NoSolution\n@@ -2128,8 +2130,8 @@ rustc_queries! {\n     /// all of the cases that the normal `ty::Ty`-based wfcheck does. This is fine,\n     /// because the `ty::Ty`-based wfcheck is always run.\n     query diagnostic_hir_wf_check(\n-        key: (ty::Predicate<'tcx>, traits::WellFormedLoc)\n-    ) -> &'tcx Option<traits::ObligationCause<'tcx>> {\n+        key: (ty::Predicate<'tcx>, WellFormedLoc)\n+    ) -> &'tcx Option<ObligationCause<'tcx>> {\n         arena_cache\n         eval_always\n         no_hash"}, {"sha": "5393dba8c2e19657de9afb05fe80e523af80963b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -1199,7 +1199,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {\n         iter::once(LOCAL_CRATE)\n             .chain(self.crates(()).iter().copied())\n-            .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())\n+            .flat_map(move |cnum| self.traits(cnum).iter().copied())\n     }\n \n     #[inline]"}, {"sha": "644bfd33970dc0332b2583fe29d2961253690208", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -177,14 +177,18 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             return Err(NoSolution);\n         }\n \n-        if goal.predicate.self_ty().has_non_region_infer() {\n+        // The regions of a type don't affect the size of the type\n+        let tcx = ecx.tcx();\n+        // We should erase regions from both the param-env and type, since both\n+        // may have infer regions. Specifically, after canonicalizing and instantiating,\n+        // early bound regions turn into region vars in both the new and old solver.\n+        let key = tcx.erase_regions(goal.param_env.and(goal.predicate.self_ty()));\n+        // But if there are inference variables, we have to wait until it's resolved.\n+        if key.has_non_region_infer() {\n             return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n         }\n \n-        let tcx = ecx.tcx();\n-        let self_ty = tcx.erase_regions(goal.predicate.self_ty());\n-\n-        if let Ok(layout) = tcx.layout_of(goal.param_env.and(self_ty))\n+        if let Ok(layout) = tcx.layout_of(key)\n             && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             // FIXME: We could make this faster by making a no-constraints response"}, {"sha": "8bc82b9f54926b0cf62b145e536f153f749de909", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -967,16 +967,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         // The regions of a type don't affect the size of the type\n         let tcx = self.tcx();\n-        let self_ty =\n-            tcx.erase_regions(tcx.erase_late_bound_regions(obligation.predicate.self_ty()));\n-\n+        let self_ty = tcx.erase_late_bound_regions(obligation.predicate.self_ty());\n+        // We should erase regions from both the param-env and type, since both\n+        // may have infer regions. Specifically, after canonicalizing and instantiating,\n+        // early bound regions turn into region vars in both the new and old solver.\n+        let key = tcx.erase_regions(obligation.param_env.and(self_ty));\n         // But if there are inference variables, we have to wait until it's resolved.\n-        if self_ty.has_non_region_infer() {\n+        if key.has_non_region_infer() {\n             candidates.ambiguous = true;\n             return;\n         }\n \n-        if let Ok(layout) = tcx.layout_of(obligation.param_env.and(self_ty))\n+        if let Ok(layout) = tcx.layout_of(key)\n             && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             candidates.vec.push(BuiltinCandidate { has_nested: false });"}, {"sha": "e37f7d34ab5b8fdd7973691b8ebda23d35793661", "filename": "tests/ui/associated-inherent-types/issue-111879-0.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that we don't crash when printing inherent projections in diagnostics.\n+\n+pub struct Carrier<'a>(&'a ());\n+\n+pub type User = for<'b> fn(Carrier<'b>::Focus<i32>);\n+\n+impl<'a> Carrier<'a> {\n+    pub type Focus<T> = &'a mut User; //~ ERROR overflow evaluating associated type\n+}\n+\n+fn main() {}"}, {"sha": "7bdbad4401762a130ce821cbad55a779cf3005fd", "filename": "tests/ui/associated-inherent-types/issue-111879-0.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-0.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,8 @@\n+error: overflow evaluating associated type `Carrier<'b>::Focus<i32>`\n+  --> $DIR/issue-111879-0.rs:11:25\n+   |\n+LL |     pub type Focus<T> = &'a mut User;\n+   |                         ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7acc4f945051edb3556386bb7844fbfdf70e607e", "filename": "tests/ui/associated-inherent-types/issue-111879-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that we don't crash when printing inherent projections in diagnostics.\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+fn main(_: for<'a> fn(Foo<fn(&'a ())>::Assoc)) {} //~ ERROR `main` function has wrong type"}, {"sha": "689b45e09aaac8392df7189ddb7566e65aae790b", "filename": "tests/ui/associated-inherent-types/issue-111879-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111879-1.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,12 @@\n+error[E0580]: `main` function has wrong type\n+  --> $DIR/issue-111879-1.rs:12:1\n+   |\n+LL | fn main(_: for<'a> fn(Foo<fn(&'a ())>::Assoc)) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(for<'a> fn(Foo<fn(&'a ())>::Assoc))`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0580`."}, {"sha": "19bcfe3046bdc1cdd2904676e2381c461031bd7e", "filename": "tests/ui/async-await/return-type-notation/supertrait-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait, return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete and may not be safe to use\n+\n+trait IntFactory {\n+    fn stream(&self) -> impl Iterator<Item = i32>;\n+}\n+trait SendIntFactory: IntFactory<stream(): Send> + Send {}\n+\n+fn main() {}"}, {"sha": "c8cec4946b4e4dbd0a6c50f093a9f5a4970d2f3e", "filename": "tests/ui/async-await/return-type-notation/supertrait-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsupertrait-bound.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/supertrait-bound.rs:3:49\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait, return_type_notation)]\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d0785c887d8955b35f9c6bcf363eec6d13b264e8", "filename": "tests/ui/dyn-star/param-env-infer.current.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/param-env-infer.rs:5:12\n+   |\n+LL | #![feature(dyn_star, pointer_like_trait)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/param-env-infer.rs:12:10\n+   |\n+LL |     t as _\n+   |          ^ cannot infer type\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "d0785c887d8955b35f9c6bcf363eec6d13b264e8", "filename": "tests/ui/dyn-star/param-env-infer.next.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/param-env-infer.rs:5:12\n+   |\n+LL | #![feature(dyn_star, pointer_like_trait)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/param-env-infer.rs:12:10\n+   |\n+LL |     t as _\n+   |          ^ cannot infer type\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "9039dde5e93e2871bb3cbb3c5b992eed8c91da4d", "filename": "tests/ui/dyn-star/param-env-infer.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,16 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+// incremental\n+\n+#![feature(dyn_star, pointer_like_trait)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+use std::fmt::Debug;\n+use std::marker::PointerLike;\n+\n+fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+    t as _\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "3eb6498e9dcff64e43acba36568df6a1331d0605", "filename": "tests/ui/unsized-locals/issue-67981.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.rs?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(unsized_fn_params)]\n+\n+fn main() {\n+    let f: fn([u8]) = |_| {};\n+    //~^ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    let slice: Box<[u8]> = Box::new([1; 8]);\n+\n+    f(*slice);\n+}"}, {"sha": "a4b179ae2fd12b494ca770989cb6921b1718c5b8", "filename": "tests/ui/unsized-locals/issue-67981.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82faf5ed60c37dbd7d6eac2901b4410035776d3f/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr?ref=82faf5ed60c37dbd7d6eac2901b4410035776d3f", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-67981.rs:4:24\n+   |\n+LL |     let f: fn([u8]) = |_| {};\n+   |                        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     let f: fn([u8]) = |&_| {};\n+   |                        +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}