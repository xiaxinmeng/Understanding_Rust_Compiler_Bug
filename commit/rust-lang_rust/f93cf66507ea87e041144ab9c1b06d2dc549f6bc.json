{"sha": "f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "node_id": "C_kwDOAAsO6NoAKGY5M2NmNjY1MDdlYTg3ZTA0MTE0NGFiOWMxYjA2ZDJkYzU0OWY2YmM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T03:17:47Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T20:07:43Z"}, "message": "Rename `Type::def_id_full()` to `Type::def_id()`\n\nIt should be preferred over `def_id_no_primitives()`, so it should have\na shorter name. I also put it before `def_id_no_primitives()` so that it\nshows up first in the docs.", "tree": {"sha": "39389482ed6779eb22a11cec7485c234f8791fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39389482ed6779eb22a11cec7485c234f8791fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "html_url": "https://github.com/rust-lang/rust/commit/f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3561e149870fc60f27a3035747a0fe14ffd9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3561e149870fc60f27a3035747a0fe14ffd9f5", "html_url": "https://github.com/rust-lang/rust/commit/6e3561e149870fc60f27a3035747a0fe14ffd9f5"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "f36e11cbb0a6e76aaa4e10dfd6e6bc0b6dd5b8ab", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -374,7 +374,7 @@ crate fn build_impl(\n     // Only inline impl if the implementing type is\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n-        if let Some(did) = for_.def_id_full(&cx.cache) {\n+        if let Some(did) = for_.def_id(&cx.cache) {\n             if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n@@ -462,7 +462,7 @@ crate fn build_impl(\n     }\n \n     while let Some(ty) = stack.pop() {\n-        if let Some(did) = ty.def_id_full(&cx.cache) {\n+        if let Some(did) = ty.def_id(&cx.cache) {\n             if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n                 return;\n             }"}, {"sha": "ce0c4ebe7186b83dbed19f578a298df65ca71945", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -385,7 +385,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n-            self_def_id: self_type.def_id_full(&cx.cache),\n+            self_def_id: self_type.def_id(&cx.cache),\n             self_type: box self_type,\n             trait_,\n         }\n@@ -1887,7 +1887,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n     }\n \n     let for_ = impl_.self_ty.clean(cx);\n-    let type_alias = for_.def_id_full(&cx.cache).and_then(|did| match tcx.def_kind(did) {\n+    let type_alias = for_.def_id(&cx.cache).and_then(|did| match tcx.def_kind(did) {\n         DefKind::TyAlias => Some(tcx.type_of(did).clean(cx)),\n         _ => None,\n     });"}, {"sha": "4b0a7aed0c2c8702b0428a4e7b2354c08827f358", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -1529,28 +1529,28 @@ impl Type {\n             QPath { ref self_type, .. } => return self_type.inner_def_id(cache),\n             Generic(_) | Infer | ImplTrait(_) => return None,\n         };\n-        cache.and_then(|c| Primitive(t).def_id_full(c))\n+        cache.and_then(|c| Primitive(t).def_id(c))\n+    }\n+\n+    /// Use this method to get the [DefId] of a [clean] AST node, including [PrimitiveType]s.\n+    ///\n+    /// See [`Self::def_id_no_primitives`] for more.\n+    ///\n+    /// [clean]: crate::clean\n+    crate fn def_id(&self, cache: &Cache) -> Option<DefId> {\n+        self.inner_def_id(Some(cache))\n     }\n \n     /// Use this method to get the [`DefId`] of a [`clean`] AST node.\n     /// This will return [`None`] when called on a primitive [`clean::Type`].\n-    /// Use [`Self::def_id_full`] if you want to include primitives.\n+    /// Use [`Self::def_id`] if you want to include primitives.\n     ///\n     /// [`clean`]: crate::clean\n     /// [`clean::Type`]: crate::clean::Type\n-    // FIXME: get rid of this function and always use `def_id_full`\n+    // FIXME: get rid of this function and always use `def_id`\n     crate fn def_id_no_primitives(&self) -> Option<DefId> {\n         self.inner_def_id(None)\n     }\n-\n-    /// Use this method to get the [DefId] of a [clean] AST node, including [PrimitiveType]s.\n-    ///\n-    /// See [`Self::def_id_no_primitives`] for more.\n-    ///\n-    /// [clean]: crate::clean\n-    crate fn def_id_full(&self, cache: &Cache) -> Option<DefId> {\n-        self.inner_def_id(Some(cache))\n-    }\n }\n \n /// A primitive (aka, builtin) type."}, {"sha": "54988871f41ddab0e99216cfdff746e0959c0911", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     .as_ref()\n                     .map_or(false, |t| self.cache.masked_crates.contains(&t.def_id().krate))\n                 || i.for_\n-                    .def_id_full(self.cache)\n+                    .def_id(self.cache)\n                     .map_or(false, |d| self.cache.masked_crates.contains(&d.krate))\n             {\n                 return None;\n@@ -456,7 +456,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n \n             if let Some(generics) = i.trait_.as_ref().and_then(|t| t.generics()) {\n                 for bound in generics {\n-                    if let Some(did) = bound.def_id_full(self.cache) {\n+                    if let Some(did) = bound.def_id(self.cache) {\n                         dids.insert(did);\n                     }\n                 }"}, {"sha": "8e064d6d8bf9d83f7f3d331db2ae936218266498", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -1168,8 +1168,8 @@ fn render_deref_methods(\n     debug!(\"Render deref methods for {:#?}, target {:#?}\", impl_.inner_impl().for_, target);\n     let what =\n         AssocItemRender::DerefFor { trait_: deref_type, type_: real_target, deref_mut_: deref_mut };\n-    if let Some(did) = target.def_id_full(cache) {\n-        if let Some(type_did) = impl_.inner_impl().for_.def_id_full(cache) {\n+    if let Some(did) = target.def_id(cache) {\n+        if let Some(type_did) = impl_.inner_impl().for_.def_id(cache) {\n             // `impl Deref<Target = S> for S`\n             if did == type_did {\n                 // Avoid infinite cycles\n@@ -1215,7 +1215,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     let mut out = Buffer::html();\n \n-    if let Some(did) = decl.output.as_return().and_then(|t| t.def_id_full(cx.cache())) {\n+    if let Some(did) = decl.output.as_return().and_then(|t| t.def_id(cx.cache())) {\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n@@ -2058,8 +2058,8 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n         })\n     {\n         debug!(\"found target, real_target: {:?} {:?}\", target, real_target);\n-        if let Some(did) = target.def_id_full(c) {\n-            if let Some(type_did) = impl_.inner_impl().for_.def_id_full(c) {\n+        if let Some(did) = target.def_id(c) {\n+            if let Some(type_did) = impl_.inner_impl().for_.def_id(c) {\n                 // `impl Deref<Target = S> for S`\n                 if did == type_did {\n                     // Avoid infinite cycles\n@@ -2069,7 +2069,7 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n         }\n         let deref_mut = v.iter().any(|i| i.trait_did() == cx.tcx().lang_items().deref_mut_trait());\n         let inner_impl = target\n-            .def_id_full(c)\n+            .def_id(c)\n             .or_else(|| {\n                 target.primitive_type().and_then(|prim| c.primitive_locations.get(&prim).cloned())\n             })\n@@ -2232,10 +2232,7 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n         let mut res = implementors\n             .iter()\n             .filter(|i| {\n-                i.inner_impl()\n-                    .for_\n-                    .def_id_full(cache)\n-                    .map_or(false, |d| !cache.paths.contains_key(&d))\n+                i.inner_impl().for_.def_id(cache).map_or(false, |d| !cache.paths.contains_key(&d))\n             })\n             .filter_map(|i| extract_for_impl_name(&i.impl_item, cx))\n             .collect::<Vec<_>>();"}, {"sha": "94177aa24b86b02a80ee41deb813f03136c2c2bf", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -21,7 +21,7 @@ use super::{\n     render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n     ImplRenderingParameters,\n };\n-use crate::clean::{self};\n+use crate::clean;\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n@@ -742,7 +742,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         }\n \n         let (local, foreign) = implementors.iter().partition::<Vec<_>, _>(|i| {\n-            i.inner_impl().for_.def_id_full(cache).map_or(true, |d| cache.paths.contains_key(&d))\n+            i.inner_impl().for_.def_id(cache).map_or(true, |d| cache.paths.contains_key(&d))\n         });\n \n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) ="}, {"sha": "91a0cb413eb28d0f3017ebbb274a05775b3dc2f7", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93cf66507ea87e041144ab9c1b06d2dc549f6bc/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f93cf66507ea87e041144ab9c1b06d2dc549f6bc", "patch": "@@ -70,7 +70,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n                 if let Some(prim) = target.primitive_type() {\n                     cleaner.prims.insert(prim);\n-                } else if let Some(did) = target.def_id_full(&cx.cache) {\n+                } else if let Some(did) = target.def_id(&cx.cache) {\n                     cleaner.items.insert(did.into());\n                 }\n             }"}]}