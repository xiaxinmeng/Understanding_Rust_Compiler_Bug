{"sha": "47a534c197444f3af04994350dfdf83bd97316bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTUzNGMxOTc0NDRmM2FmMDQ5OTQzNTBkZmRmODNiZDk3MzE2YmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T19:39:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-13T14:36:31Z"}, "message": "make blocks fn& and fn stand for \"any closure\"", "tree": {"sha": "bcc6f68b5eb7ba248294221ff2ce68506b81b14e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc6f68b5eb7ba248294221ff2ce68506b81b14e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a534c197444f3af04994350dfdf83bd97316bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a534c197444f3af04994350dfdf83bd97316bb", "html_url": "https://github.com/rust-lang/rust/commit/47a534c197444f3af04994350dfdf83bd97316bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a534c197444f3af04994350dfdf83bd97316bb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f3bfeec27c3457de30929d7dbf914a5b350808c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3bfeec27c3457de30929d7dbf914a5b350808c", "html_url": "https://github.com/rust-lang/rust/commit/3f3bfeec27c3457de30929d7dbf914a5b350808c"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "80d701120f169932352613f2c18ab5c66f168c27", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=47a534c197444f3af04994350dfdf83bd97316bb", "patch": "@@ -182,6 +182,7 @@ export variant_info;\n export walk_ty;\n export occurs_check_fails;\n export closure_kind;\n+export ck_any;\n export ck_block;\n export ck_box;\n export ck_uniq;\n@@ -235,6 +236,7 @@ type raw_t = {struct: sty,\n type t = uint;\n \n tag closure_kind {\n+    ck_any;\n     ck_block;\n     ck_box;\n     ck_uniq;"}, {"sha": "c48c92c4e7ebf5c540220fb04b191324a152dfd8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=47a534c197444f3af04994350dfdf83bd97316bb", "patch": "@@ -110,10 +110,11 @@ tag pat_ {\n tag mutability { mut; imm; maybe_mut; }\n \n tag proto {\n-    proto_bare;    // fn\n+    proto_bare;    // native fn\n+    proto_any;     // fn\n     proto_uniq;    // fn~\n     proto_box;     // fn@\n-    proto_block;   // block\n+    proto_block;   // fn&\n }\n \n tag binop {"}, {"sha": "32840c730af70076bbbacacc20a4c614f2eb7dfc", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a534c197444f3af04994350dfdf83bd97316bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=47a534c197444f3af04994350dfdf83bd97316bb", "patch": "@@ -481,7 +481,7 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n         alt proto {\n-          ast::proto_bare. { p.warn(\"fn is deprecated, use native fn\"); }\n+          ast::proto_bare. { p.fatal(\"fn is deprecated, use native fn\"); }\n           _ { /* fallthrough */ }\n         }\n         t = parse_ty_fn(proto, p);\n@@ -490,12 +490,6 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"native\") {\n         expect_word(p, \"fn\");\n         t = parse_ty_fn(ast::proto_bare, p);\n-    } else if eat_word(p, \"lambda\") {\n-        p.warn(\"lambda is deprecated, use fn@\");\n-        t = parse_ty_fn(ast::proto_box, p);\n-    } else if eat_word(p, \"sendfn\") {\n-        p.warn(\"sendfn is deprecated, use fn~\");\n-        t = parse_ty_fn(ast::proto_uniq, p);\n     } else if p.token == token::MOD_SEP || is_ident(p.token) {\n         let path = parse_path(p);\n         t = ast::ty_path(path, p.get_id());\n@@ -800,12 +794,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_fn_expr(p, proto));\n     } else if eat_word(p, \"block\") {\n         ret pexpr(parse_fn_expr(p, ast::proto_block));\n-    } else if eat_word(p, \"lambda\") {\n-        //(breaks prettyprinting!) p.warn(\"lambda is deprecated, use fn@\");\n-        ret pexpr(parse_fn_expr(p, ast::proto_box));\n-    } else if eat_word(p, \"sendfn\") {\n-        //(breaks prettyprinting!) p.warn(\"sendfn is deprecated, use fn~\");\n-        ret pexpr(parse_fn_expr(p, ast::proto_uniq));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));\n     } else if eat_word(p, \"unsafe\") {\n@@ -2067,14 +2055,29 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n }\n \n fn parse_fn_ty_proto(p: parser) -> ast::proto {\n+<<<<<<< HEAD\n     if p.token == token::AT {\n         p.bump();\n         ast::proto_box\n     } else if p.token == token::TILDE {\n+=======\n+    alt p.peek() {\n+      token::AT. {\n+        p.bump();\n+        ast::proto_box\n+      }\n+      token::TILDE. {\n+>>>>>>> make blocks fn& and fn stand for \"any closure\"\n         p.bump();\n         ast::proto_uniq\n-    } else {\n+      }\n+      token::BINOP(token::AND.) {\n+        p.bump();\n+        ast::proto_block\n+      }\n+      _ {\n         ast::proto_bare\n+      }\n     }\n }\n "}]}