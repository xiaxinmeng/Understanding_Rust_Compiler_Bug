{"sha": "cae9267d4735fa84cf7758b000ae1d64bdbac55c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTkyNjdkNDczNWZhODRjZjc3NThiMDAwYWUxZDY0YmRiYWM1NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-03T19:14:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-03T19:14:20Z"}, "message": "Auto merge of #29949 - fhahn:issue-21659-show-relevant-trait-impls, r=arielb1\n\nThis PR for #21659 uses `DefId.for_each_relevant_impl()` to show other possible implementations in the \"trait not implemented\" message.", "tree": {"sha": "41fa100c1163ebd14edc4f206fcf95e1d89348ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41fa100c1163ebd14edc4f206fcf95e1d89348ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae9267d4735fa84cf7758b000ae1d64bdbac55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae9267d4735fa84cf7758b000ae1d64bdbac55c", "html_url": "https://github.com/rust-lang/rust/commit/cae9267d4735fa84cf7758b000ae1d64bdbac55c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae9267d4735fa84cf7758b000ae1d64bdbac55c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4744472fe03cceb81747ac9c7c64ae5fe6340c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4744472fe03cceb81747ac9c7c64ae5fe6340c0b", "html_url": "https://github.com/rust-lang/rust/commit/4744472fe03cceb81747ac9c7c64ae5fe6340c0b"}, {"sha": "a8d60708ecabc90ca4b72e12483159339a0b40ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d60708ecabc90ca4b72e12483159339a0b40ce", "html_url": "https://github.com/rust-lang/rust/commit/a8d60708ecabc90ca4b72e12483159339a0b40ce"}], "stats": {"total": 166, "additions": 164, "deletions": 2}, "files": [{"sha": "038c414662a8a2ec6e61aee7304fa1d5d51d21b3", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=cae9267d4735fa84cf7758b000ae1d64bdbac55c", "patch": "@@ -27,9 +27,11 @@ use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n+use middle::ty::fast_reject;\n use middle::ty::fold::TypeFoldable;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n+use std::cmp;\n use std::fmt;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n use syntax::codemap::Span;\n@@ -231,12 +233,53 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                                                       obligation.cause.span);\n                             if let Some(s) = custom_note {\n                                 err.fileline_note(obligation.cause.span, &s);\n+                            } else {\n+                                let simp = fast_reject::simplify_type(infcx.tcx,\n+                                                                      trait_ref.self_ty(),\n+                                                                      true);\n+                                let mut impl_candidates = Vec::new();\n+                                let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n+\n+                                match simp {\n+                                    Some(simp) => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+                                        let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n+                                        let imp_simp = fast_reject::simplify_type(infcx.tcx,\n+                                                                                  imp.self_ty(),\n+                                                                                  true);\n+                                        if let Some(imp_simp) = imp_simp {\n+                                            if simp != imp_simp {\n+                                                return;\n+                                            }\n+                                        }\n+                                        impl_candidates.push(imp);\n+                                    }),\n+                                    None => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+                                        impl_candidates.push(\n+                                            infcx.tcx.impl_trait_ref(def_id).unwrap());\n+                                    })\n+                                };\n+\n+                                if impl_candidates.len() > 0 {\n+                                    err.fileline_help(\n+                                        obligation.cause.span,\n+                                        &format!(\"the following implementations were found:\"));\n+\n+                                    let end = cmp::min(4, impl_candidates.len());\n+                                    for candidate in &impl_candidates[0..end] {\n+                                        err.fileline_help(obligation.cause.span,\n+                                                          &format!(\"  {:?}\", candidate));\n+                                    }\n+                                    if impl_candidates.len() > 4 {\n+                                        err.fileline_help(obligation.cause.span,\n+                                                          &format!(\"and {} others\",\n+                                                                   impl_candidates.len()-4));\n+                                    }\n+                                }\n                             }\n                             note_obligation_cause(infcx, &mut err, obligation);\n                             err.emit();\n                         }\n-                    }\n-\n+                    },\n                     ty::Predicate::Equate(ref predicate) => {\n                         let predicate = infcx.resolve_type_vars_if_possible(predicate);\n                         let err = infcx.equality_predicate(obligation.cause.span,"}, {"sha": "416eef4ad258f94eef5553f909962e31b3ae5560", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-1.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs?ref=cae9267d4735fa84cf7758b000ae1d64bdbac55c", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<A> {\n+    fn foo(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+trait NotRelevant<A> {\n+    fn nr(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Foo<i32> for Bar {}\n+\n+impl Foo<u8> for Bar {}\n+\n+impl NotRelevant<usize> for Bar {}\n+\n+fn main() {\n+    let f1 = Bar;\n+\n+    f1.foo(1usize);\n+    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    // | help: the following implementations were found:\n+    // | help: implementation 1: `Foo<i32>`\n+    // | help: implementation 2: `Foo<u8>`\n+}"}, {"sha": "07a7c98dd7ff6091595efab99bc38355ca1dc69a", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-2.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs?ref=cae9267d4735fa84cf7758b000ae1d64bdbac55c", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<A> {\n+    fn foo(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+trait NotRelevant<A> {\n+    fn nr(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Foo<i8> for Bar {}\n+impl Foo<i16> for Bar {}\n+impl Foo<i32> for Bar {}\n+\n+impl Foo<u8> for Bar {}\n+impl Foo<u16> for Bar {}\n+impl Foo<u32> for Bar {}\n+\n+impl NotRelevant<usize> for Bar {}\n+\n+fn main() {\n+    let f1 = Bar;\n+\n+    f1.foo(1usize);\n+    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    // | help: the following implementations were found:\n+    // | help:   Foo<i8>\n+    // | help:   Foo<i16>\n+    // | help:   Foo<i32>\n+    // | help:   Foo<u8>\n+    // | help: and 2 others\n+}"}, {"sha": "0bb944edb9d84899848885a493a2d6a822a39982", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-3.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae9267d4735fa84cf7758b000ae1d64bdbac55c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-3.rs?ref=cae9267d4735fa84cf7758b000ae1d64bdbac55c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<A> {\n+    fn foo(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+trait NotRelevant<A> {\n+    fn nr(&self, a: A) -> A {\n+        a\n+    }\n+}\n+\n+struct Bar;\n+\n+impl NotRelevant<usize> for Bar {}\n+\n+fn main() {\n+    let f1 = Bar;\n+\n+    f1.foo(1usize);\n+    //~^ error: method named `foo` found for type `Bar` in the current scope\n+    //~| help: items from traits can only be used if the trait is implemented and in scope\n+    //~| help: candidate #1: `Foo`\n+}"}]}