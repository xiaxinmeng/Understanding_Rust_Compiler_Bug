{"sha": "719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOWVlYjI2MGI1Yzg3MGZkNmJlZTI0ZTVlMDRmY2YyMjAzZThhMGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-07T03:11:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-07T03:11:51Z"}, "message": "Rollup merge of #61990 - llogiq:questionmark-test, r=QuietMisdreavus\n\nFirst question mark in doctest\n\nWe have had `?` for `Result`s in doctests for some time, but so far haven't used them in doctests. With this PR, I want to start the de-`unwrap`ping of doctests \u2013 and the discussion on where to do so.\n\nThere is one downside, which is that the code can no longer be copied into a plain `main()` method, on the other hand, there should be a workable error if one does this.", "tree": {"sha": "af1cf9569a8488ab1f2c8e03d6053439eb6cee4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1cf9569a8488ab1f2c8e03d6053439eb6cee4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIWL4CRBK7hj4Ov3rIwAAdHIIADL9/z5sLaftGYF1ERzoejnE\nMSMqUgEEas8OMMTOCaa44CPwwPHp7d1gd2owANeb2mOfO/o9KAzP9A4frNcrtrZT\nqq86xT6+6lFlTx4TwFybYaIPeXb8E0LclCGMv7Z5xnL4NaDq5PkT4jvZVxysZPaW\nXeUcf1/jUuQJzoOmQdoJYhLVjiuB1JGEYwCNILbcI6Cs9RmF1Ndre3EWFe2p8qwn\n03ZhZ15eTJC3XRWx0HsR7SiUpgQqNJpBHNPi8UBVkoQUwmv+98ra+VM7ER9JMD9Q\ntgy8dQWQERbj3lOUJ+8TIyJNdZCvF3+b3QRm6VDKfygnnxHxxezpaJpH2sTv8p0=\n=cZ2X\n-----END PGP SIGNATURE-----\n", "payload": "tree af1cf9569a8488ab1f2c8e03d6053439eb6cee4e\nparent b0bd5f236d9bea38b8c9048f379fec179b09984c\nparent ee05fc8104e5e2fecf8f67fc3d4259d5d576a20f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562469111 +0200\ncommitter GitHub <noreply@github.com> 1562469111 +0200\n\nRollup merge of #61990 - llogiq:questionmark-test, r=QuietMisdreavus\n\nFirst question mark in doctest\n\nWe have had `?` for `Result`s in doctests for some time, but so far haven't used them in doctests. With this PR, I want to start the de-`unwrap`ping of doctests \u2013 and the discussion on where to do so.\n\nThere is one downside, which is that the code can no longer be copied into a plain `main()` method, on the other hand, there should be a workable error if one does this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "html_url": "https://github.com/rust-lang/rust/commit/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0bd5f236d9bea38b8c9048f379fec179b09984c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bd5f236d9bea38b8c9048f379fec179b09984c", "html_url": "https://github.com/rust-lang/rust/commit/b0bd5f236d9bea38b8c9048f379fec179b09984c"}, {"sha": "ee05fc8104e5e2fecf8f67fc3d4259d5d576a20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee05fc8104e5e2fecf8f67fc3d4259d5d576a20f", "html_url": "https://github.com/rust-lang/rust/commit/ee05fc8104e5e2fecf8f67fc3d4259d5d576a20f"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "58ea0207c56098ab57be2193e7d935b6be2ff573", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "patch": "@@ -335,11 +335,14 @@ macro_rules! r#try {\n /// ```\n /// use std::io::Write;\n ///\n-/// let mut w = Vec::new();\n-/// write!(&mut w, \"test\").unwrap();\n-/// write!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let mut w = Vec::new();\n+///     write!(&mut w, \"test\")?;\n+///     write!(&mut w, \"formatted {}\", \"arguments\")?;\n ///\n-/// assert_eq!(w, b\"testformatted arguments\");\n+///     assert_eq!(w, b\"testformatted arguments\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects"}]}