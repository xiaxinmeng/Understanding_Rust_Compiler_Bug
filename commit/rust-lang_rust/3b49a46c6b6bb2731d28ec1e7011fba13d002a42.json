{"sha": "3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDlhNDZjNmI2YmIyNzMxZDI4ZWMxZTcwMTFmYmExM2QwMDJhNDI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-12-09T21:38:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T21:38:27Z"}, "message": "Rollup merge of #79818 - richkadel:llvm-coverage-counters-2.1.0, r=tmandry\n\nFixes to Rust coverage\n\nFixes: #79725\n\nSome macros can create a situation where `fn_sig_span` and `body_span`\nmap to different files.\n\nNew documentation on coverage tests incorrectly assumed multiple test\nbinaries could just be listed at the end of the `llvm-cov` command,\nbut it turns out each binary needs a `--object` prefix.\n\nThis PR fixes the bug and updates the documentation to correct that\nissue. It also fixes a few other minor issues in internal implementation\ncomments, and adds documentation on getting coverage results for doc\ntests.", "tree": {"sha": "bb221a724ad9f9c5874c0fe67167a4741b5fa093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb221a724ad9f9c5874c0fe67167a4741b5fa093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "html_url": "https://github.com/rust-lang/rust/commit/3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a410af97a8e315b70c3be39951c264cee7afa7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a410af97a8e315b70c3be39951c264cee7afa7c8", "html_url": "https://github.com/rust-lang/rust/commit/a410af97a8e315b70c3be39951c264cee7afa7c8"}, {"sha": "95c268f64d71427b00b46fde8fbf499d380e9409", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c268f64d71427b00b46fde8fbf499d380e9409", "html_url": "https://github.com/rust-lang/rust/commit/95c268f64d71427b00b46fde8fbf499d380e9409"}], "stats": {"total": 213, "additions": 157, "deletions": 56}, "files": [{"sha": "72ba5bbd5f26928596e8f1bf101267862b3af95f", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -241,7 +241,7 @@ fn save_function_record(\n /// (functions referenced by other \"used\" or public items). Any other functions considered unused,\n /// or \"Unreachable\" were still parsed and processed through the MIR stage.\n ///\n-/// We can find the unreachable functions by the set different of all MIR `DefId`s (`tcx` query\n+/// We can find the unreachable functions by the set difference of all MIR `DefId`s (`tcx` query\n /// `mir_keys`) minus the codegenned `DefId`s (`tcx` query `collect_and_partition_mono_items`).\n ///\n /// *HOWEVER* the codegenned `DefId`s are partitioned across multiple `CodegenUnit`s (CGUs), and"}, {"sha": "2408a999c05a3ea587d308b5b5d857e5c1ca3131", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -33,7 +33,7 @@ impl CoverageGraph {\n         // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n         // equivalents. Note that since the BasicCoverageBlock graph has been fully simplified, the\n         // each predecessor of a BCB leader_bb should be in a unique BCB, and each successor of a\n-        // BCB last_bb should bin in its own unique BCB. Therefore, collecting the BCBs using\n+        // BCB last_bb should be in its own unique BCB. Therefore, collecting the BCBs using\n         // `bb_to_bcb` should work without requiring a deduplication step.\n \n         let successors = IndexVec::from_fn_n(\n@@ -283,7 +283,9 @@ rustc_index::newtype_index! {\n     }\n }\n \n-/// A BasicCoverageBlockData (BCB) represents the maximal-length sequence of MIR BasicBlocks without\n+/// `BasicCoverageBlockData` holds the data indexed by a `BasicCoverageBlock`.\n+///\n+/// A `BasicCoverageBlock` (BCB) represents the maximal-length sequence of MIR `BasicBlock`s without\n /// conditional branches, and form a new, simplified, coverage-specific Control Flow Graph, without\n /// altering the original MIR CFG.\n ///"}, {"sha": "f69748db238c08dcf69235ba32919ff35db23d24", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -88,6 +88,7 @@ struct Instrumentor<'a, 'tcx> {\n     pass_name: &'a str,\n     tcx: TyCtxt<'tcx>,\n     mir_body: &'a mut mir::Body<'tcx>,\n+    source_file: Lrc<SourceFile>,\n     fn_sig_span: Span,\n     body_span: Span,\n     basic_coverage_blocks: CoverageGraph,\n@@ -96,9 +97,13 @@ struct Instrumentor<'a, 'tcx> {\n \n impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n     fn new(pass_name: &'a str, tcx: TyCtxt<'tcx>, mir_body: &'a mut mir::Body<'tcx>) -> Self {\n+        let source_map = tcx.sess.source_map();\n         let (some_fn_sig, hir_body) = fn_sig_and_body(tcx, mir_body.source.def_id());\n         let body_span = hir_body.value.span;\n-        let fn_sig_span = match some_fn_sig {\n+        let source_file = source_map.lookup_source_file(body_span.lo());\n+        let fn_sig_span = match some_fn_sig.filter(|fn_sig| {\n+            Lrc::ptr_eq(&source_file, &source_map.lookup_source_file(fn_sig.span.hi()))\n+        }) {\n             Some(fn_sig) => fn_sig.span.with_hi(body_span.lo()),\n             None => body_span.shrink_to_lo(),\n         };\n@@ -108,6 +113,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n             pass_name,\n             tcx,\n             mir_body,\n+            source_file,\n             fn_sig_span,\n             body_span,\n             basic_coverage_blocks,\n@@ -268,8 +274,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let tcx = self.tcx;\n         let source_map = tcx.sess.source_map();\n         let body_span = self.body_span;\n-        let source_file = source_map.lookup_source_file(body_span.lo());\n-        let file_name = Symbol::intern(&source_file.name.to_string());\n+        let file_name = Symbol::intern(&self.source_file.name.to_string());\n \n         let mut bcb_counters = IndexVec::from_elem_n(None, self.basic_coverage_blocks.num_nodes());\n         for covspan in coverage_spans {\n@@ -285,11 +290,20 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                 bug!(\"Every BasicCoverageBlock should have a Counter or Expression\");\n             };\n             graphviz_data.add_bcb_coverage_span_with_counter(bcb, &covspan, &counter_kind);\n+\n+            debug!(\n+                \"Calling make_code_region(file_name={}, source_file={:?}, span={}, body_span={})\",\n+                file_name,\n+                self.source_file,\n+                source_map.span_to_string(span),\n+                source_map.span_to_string(body_span)\n+            );\n+\n             inject_statement(\n                 self.mir_body,\n                 counter_kind,\n                 self.bcb_last_bb(bcb),\n-                Some(make_code_region(file_name, &source_file, span, body_span)),\n+                Some(make_code_region(file_name, &self.source_file, span, body_span)),\n             );\n         }\n     }"}, {"sha": "fd3e782f6df432cd65df46640fcfc367e746414f", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -217,6 +217,27 @@ pub struct CoverageSpans<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n+    /// Generate a minimal set of `CoverageSpan`s, each representing a contiguous code region to be\n+    /// counted.\n+    ///\n+    /// The basic steps are:\n+    ///\n+    /// 1. Extract an initial set of spans from the `Statement`s and `Terminator`s of each\n+    ///    `BasicCoverageBlockData`.\n+    /// 2. Sort the spans by span.lo() (starting position). Spans that start at the same position\n+    ///    are sorted with longer spans before shorter spans; and equal spans are sorted\n+    ///    (deterministically) based on \"dominator\" relationship (if any).\n+    /// 3. Traverse the spans in sorted order to identify spans that can be dropped (for instance,\n+    ///    if another span or spans are already counting the same code region), or should be merged\n+    ///    into a broader combined span (because it represents a contiguous, non-branching, and\n+    ///    uninterrupted region of source code).\n+    ///\n+    ///    Closures are exposed in their enclosing functions as `Assign` `Rvalue`s, and since\n+    ///    closures have their own MIR, their `Span` in their enclosing function should be left\n+    ///    \"uncovered\".\n+    ///\n+    /// Note the resulting vector of `CoverageSpan`s may not be fully sorted (and does not need\n+    /// to be).\n     pub(super) fn generate_coverage_spans(\n         mir_body: &'a mir::Body<'tcx>,\n         fn_sig_span: Span,\n@@ -247,27 +268,6 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n         coverage_spans.to_refined_spans()\n     }\n \n-    /// Generate a minimal set of `CoverageSpan`s, each representing a contiguous code region to be\n-    /// counted.\n-    ///\n-    /// The basic steps are:\n-    ///\n-    /// 1. Extract an initial set of spans from the `Statement`s and `Terminator`s of each\n-    ///    `BasicCoverageBlockData`.\n-    /// 2. Sort the spans by span.lo() (starting position). Spans that start at the same position\n-    ///    are sorted with longer spans before shorter spans; and equal spans are sorted\n-    ///    (deterministically) based on \"dominator\" relationship (if any).\n-    /// 3. Traverse the spans in sorted order to identify spans that can be dropped (for instance,\n-    ///    if another span or spans are already counting the same code region), or should be merged\n-    ///    into a broader combined span (because it represents a contiguous, non-branching, and\n-    ///    uninterrupted region of source code).\n-    ///\n-    ///    Closures are exposed in their enclosing functions as `Assign` `Rvalue`s, and since\n-    ///    closures have their own MIR, their `Span` in their enclosing function should be left\n-    ///    \"uncovered\".\n-    ///\n-    /// Note the resulting vector of `CoverageSpan`s does may not be fully sorted (and does not need\n-    /// to be).\n     fn mir_to_initial_sorted_coverage_spans(&self) -> Vec<CoverageSpan> {\n         let mut initial_spans = Vec::<CoverageSpan>::with_capacity(self.mir_body.num_nodes() * 2);\n         for (bcb, bcb_data) in self.basic_coverage_blocks.iter_enumerated() {"}, {"sha": "6ca5ae40707c57b850b12b4ffa46985bb3a31fa9", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -213,19 +213,102 @@ Then run the `cov` tool, with the `profdata` file and all test binaries:\n $ cargo cov -- report \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n-    target/debug/deps/lib-30768f9c53506dc5 \\\n-    target/debug/deps/json5format-fececd4653271682\n+    --object target/debug/deps/lib-30768f9c53506dc5 \\\n+    --object target/debug/deps/json5format-fececd4653271682\n $ cargo cov -- show \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n-    target/debug/deps/lib-30768f9c53506dc5 \\\n-    target/debug/deps/json5format-fececd4653271682 \\\n+    --object target/debug/deps/lib-30768f9c53506dc5 \\\n+    --object target/debug/deps/json5format-fececd4653271682 \\\n     --show-instantiations --show-line-counts-or-regions \\\n     --Xdemangler=rustfilt | less -R\n ```\n \n _Note the command line option `--ignore-filename-regex=/.cargo/registry`, which excludes the sources for dependencies from the coverage results._\n \n+### Tips for listing the binaries automatically\n+\n+For `bash` users, one suggested way to automatically complete the `cov` command with the list of binaries is with a command like:\n+\n+```bash\n+$ cargo cov -- report \\\n+    $( \\\n+      for file in \\\n+        $( \\\n+          RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+            cargo test --tests --no-run --message-format=json \\\n+              | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n+              | grep -v dSYM - \\\n+        ); \\\n+      do \\\n+        printf \"%s %s \" -object $file; \\\n+      done \\\n+    ) \\\n+  --instr-profile=json5format.profdata --summary-only # and/or other options\n+```\n+\n+Adding `--no-run --message-format=json` to the _same_ `cargo test` command used to run\n+the tests (including the same environment variables and flags) generates output in a JSON\n+format that `jq` can easily query.\n+\n+The `printf` command takes this list and generates the `--object <binary>` arguments\n+for each listed test binary.\n+\n+### Including doc tests\n+\n+The previous examples run `cargo test` with `--tests`, which excludes doc tests.[^79417]\n+\n+To include doc tests in the coverage results, drop the `--tests` flag, and apply the\n+`-Zinstrument-coverage` flag, and some doc-test-specific options in the\n+`RUSTDOCFLAGS` environment variable. (The `cargo profdata` command does not change.)\n+\n+```bash\n+$ RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+  RUSTDOCFLAGS=\"-Zinstrument-coverage -Zunstable-options --persist-doctests target/debug/doctestbins\" \\\n+  LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n+    cargo test\n+$ cargo profdata -- merge \\\n+    -sparse json5format-*.profraw -o json5format.profdata\n+```\n+\n+The `-Zunstable-options --persist-doctests` flag is required, to save the test binaries\n+(with their coverage maps) for `llvm-cov`.\n+\n+```bash\n+$ cargo cov -- report \\\n+    $( \\\n+      for file in \\\n+        $( \\\n+          RUSTFLAGS=\"-Zinstrument-coverage\" \\\n+          RUSTDOCFLAGS=\"-Zinstrument-coverage -Zunstable-options --persist-doctests target/debug/doctestbins\" \\\n+            cargo test --no-run --message-format=json \\\n+              | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n+              | grep -v dSYM - \\\n+        ) \\\n+        target/debug/doctestbins/*/rust_out; \\\n+      do \\\n+        [[ -x $file ]] && printf \"%s %s \" -object $file; \\\n+      done \\\n+    ) \\\n+  --instr-profile=json5format.profdata --summary-only # and/or other options\n+```\n+\n+Note, the differences in this `cargo cov` command, compared with the version without\n+doc tests, include:\n+\n+* The `cargo test ... --no-run` command is updated with the same environment variables\n+  and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n+  is only used when _running_ the tests.)\n+* The file glob pattern `target/debug/doctestbins/*/rust_out` adds the `rust_out`\n+  binaries generated for doc tests (note, however, that some `rust_out` files may not\n+  be executable binaries).\n+* `[[ -x $file ]] &&` filters the files passed on to the `printf`, to include only\n+  executable binaries.\n+\n+[^79417]: There is ongoing work to resolve a known issue\n+[(#79417)](https://github.com/rust-lang/rust/issues/79417) that doc test coverage\n+generates incorrect source line numbers in `llvm-cov show` results.\n+\n ## Other references\n \n Rust's implementation and workflow for source-based code coverage is based on the same library and tools used to implement [source-based code coverage in Clang]. (This document is partially based on the Clang guide.)"}, {"sha": "a5d6970009a3b1b7ada4ccaeb4717d1e37489ab5", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -147,13 +147,19 @@ else\n \t# Note `llvm-cov show` output for some programs can vary, but can be ignored\n \t# by inserting `// ignore-llvm-cov-show-diffs` at the top of the source file.\n \t#\n-\t# FIXME(richkadel): It looks like most past variations seem to have been mitigated. None of the\n-\t# Rust test source samples have the `// ignore-llvm-cov-show-diffs` anymore. The main variation\n-\t# I had seen (and is still present in the new `coverage/lib/used_crate.rs`) is the `llvm-cov show`\n-\t# reporting of multiple instantiations of a generic function with different type substitutions.\n-\t# For some reason, `llvm-cov show` can report these in a non-deterministic order, breaking the\n-\t# `diff` comparision. I was able to work around the problem with `diff --ignore-matching-lines=RE`\n+\t# FIXME(richkadel): None of the Rust test source samples have the\n+\t# `// ignore-llvm-cov-show-diffs` anymore. This directive exists to work around a limitation\n+\t# with `llvm-cov show`. When reporting coverage for multiple instantiations of a generic function,\n+\t# with different type substitutions, `llvm-cov show` prints these in a non-deterministic order,\n+\t# breaking the `diff` comparision.\n+\t#\n+\t# A partial workaround is implemented below, with `diff --ignore-matching-lines=RE`\n \t# to ignore each line prefixing each generic instantiation coverage code region.\n+\t#\n+\t# This workaround only works if the coverage counts are identical across all reported\n+\t# instantiations. If there is no way to ensure this, you may need to apply the\n+\t# `// ignore-llvm-cov-show-diffs` directive, and rely on the `.json` and counter\n+\t# files for validating results have not changed.\n \n \t$(DIFF) --ignore-matching-lines='::<.*>.*:$$' \\\n \t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n@@ -190,10 +196,6 @@ endif\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n \t\t| \"$(PYTHON)\" $(BASEDIR)/prettify_json.py \\\n \t\t> \"$(TMPDIR)\"/actual_export_coverage.$@.json\n-\t# FIXME(richkadel): With the addition of `--ignore-matching-lines=RE` to ignore the\n-\t# non-deterministically-ordered coverage results for multiple instantiations of generics with\n-\t# differing type substitutions, I probably don't need the `.json` files anymore (and may not\n-\t# need `prettify_json.py` either).\n \n ifdef RUSTC_BLESS_TEST\n \tcp \"$(TMPDIR)\"/actual_export_coverage.$@.json expected_export_coverage.$@.json"}, {"sha": "e14e733fff6d4cbe55f76924985cb802434c4a49", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "ed91e8898ee98695655294272db60123732f3187", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.async.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -35,9 +35,6 @@ Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 21:1 -> 21:23, #1\n Counter in file 0 67:5 -> 67:23, #1\n Counter in file 0 38:1 -> 38:19, #1\n-Counter in file 0 29:1 -> 29:22, #1\n-Counter in file 0 93:1 -> 101:2, #1\n-Counter in file 0 91:1 -> 91:25, #1\n Counter in file 0 38:19 -> 42:12, #1\n Counter in file 0 43:9 -> 43:10, #3\n Counter in file 0 43:14 -> 43:18, (#1 + 0)\n@@ -49,11 +46,14 @@ Counter in file 0 44:27 -> 44:32, #8\n Counter in file 0 44:36 -> 44:38, (#6 + 0)\n Counter in file 0 45:14 -> 45:16, #7\n Counter in file 0 47:1 -> 47:2, (#5 + (#6 + #7))\n+Counter in file 0 29:1 -> 29:22, #1\n+Counter in file 0 93:1 -> 101:2, #1\n+Counter in file 0 91:1 -> 91:25, #1\n Counter in file 0 51:5 -> 52:18, #1\n Counter in file 0 53:13 -> 53:14, #2\n Counter in file 0 63:13 -> 63:14, (#1 - #2)\n Counter in file 0 65:5 -> 65:6, (#2 + (#1 - #2))\n-Counter in file 0 13:20 -> 13:21, #1\n+Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 49:1 -> 68:12, #1\n Counter in file 0 69:9 -> 69:10, #2\n Counter in file 0 69:14 -> 69:27, (#1 + 0)\n@@ -69,8 +69,8 @@ Counter in file 0 86:14 -> 86:16, #2\n Counter in file 0 87:14 -> 87:16, #3\n Counter in file 0 89:1 -> 89:2, (#3 + (#2 + (#1 - (#3 + #2))))\n Counter in file 0 17:1 -> 17:20, #1\n-Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 66:5 -> 66:23, #1\n+Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 117:17 -> 117:19, #1"}, {"sha": "e2cbf6f709e6ef83654c7ff3b90d742b43f83ccd", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.generics.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.generics.txt?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -32,12 +32,12 @@ Combined regions:\n   10:5 -> 12:6 (count=1)\n Segment at 10:5 (count = 1), RegionEntry\n Segment at 12:6 (count = 0), Skipped\n-Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworklENtNtNtCs6HRHKMTmAen_4core3ops4drop4Drop4dropB4_\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworklENtNtNtCs3rFBWs28XFJ_4core3ops4drop4Drop4dropB4_\n Combined regions:\n   17:5 -> 19:6 (count=1)\n Segment at 17:5 (count = 1), RegionEntry\n Segment at 19:6 (count = 0), Skipped\n-Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworkdENtNtNtCs6HRHKMTmAen_4core3ops4drop4Drop4dropB4_\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworkdENtNtNtCs3rFBWs28XFJ_4core3ops4drop4Drop4dropB4_\n Combined regions:\n   17:5 -> 19:6 (count=1)\n Segment at 17:5 (count = 1), RegionEntry"}, {"sha": "b0319cd9e189679630ee4c6c182a9a55ca42ea0e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.uses_crate.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3b49a46c6b6bb2731d28ec1e7011fba13d002a42/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt?ref=3b49a46c6b6bb2731d28ec1e7011fba13d002a42", "patch": "@@ -1,5 +1,5 @@\n-Counter in file 0 25:1 -> 27:2, #1\n Counter in file 0 17:1 -> 19:2, #1\n+Counter in file 0 25:1 -> 27:2, #1\n Counter in file 0 17:1 -> 19:2, #1\n Counter in file 0 5:1 -> 12:2, #1\n Counter in file 0 17:1 -> 19:2, 0\n@@ -78,17 +78,17 @@ Segment at 51:1 (count = 0), RegionEntry\n Segment at 51:2 (count = 0), Skipped\n Segment at 53:1 (count = 1), RegionEntry\n Segment at 61:2 (count = 0), Skipped\n-Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionRINtNtCsFAjihUSTht_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionReECs4fqI2P2rA04_10uses_crate\n Combined regions:\n   17:1 -> 19:2 (count=1)\n Segment at 17:1 (count = 1), RegionEntry\n Segment at 19:2 (count = 0), Skipped\n-Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionReECs4fqI2P2rA04_10uses_crate\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionRINtNtCs3QflaznQylx_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n Combined regions:\n   17:1 -> 19:2 (count=1)\n Segment at 17:1 (count = 1), RegionEntry\n Segment at 19:2 (count = 0), Skipped\n-Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate46used_only_from_this_lib_crate_generic_functionINtNtCsFAjihUSTht_5alloc3vec3VeclEEB2_\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate46used_only_from_this_lib_crate_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEEB2_\n Combined regions:\n   21:1 -> 23:2 (count=1)\n Segment at 21:1 (count = 1), RegionEntry\n@@ -98,7 +98,7 @@ Combined regions:\n   21:1 -> 23:2 (count=1)\n Segment at 21:1 (count = 1), RegionEntry\n Segment at 23:2 (count = 0), Skipped\n-Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate50used_from_bin_crate_and_lib_crate_generic_functionINtNtCsFAjihUSTht_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate50used_from_bin_crate_and_lib_crate_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n Combined regions:\n   25:1 -> 27:2 (count=1)\n Segment at 25:1 (count = 1), RegionEntry"}]}