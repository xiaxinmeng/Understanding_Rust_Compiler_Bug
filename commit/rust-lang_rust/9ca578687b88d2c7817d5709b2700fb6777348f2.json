{"sha": "9ca578687b88d2c7817d5709b2700fb6777348f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYTU3ODY4N2I4OGQyYzc4MTdkNTcwOWIyNzAwZmI2Nzc3MzQ4ZjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-12T21:43:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-12T21:43:44Z"}, "message": "check stack discipline of tasks", "tree": {"sha": "44f2cb6e30fbc7f326a920df1f06ac3037547757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f2cb6e30fbc7f326a920df1f06ac3037547757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ca578687b88d2c7817d5709b2700fb6777348f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca578687b88d2c7817d5709b2700fb6777348f2", "html_url": "https://github.com/rust-lang/rust/commit/9ca578687b88d2c7817d5709b2700fb6777348f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ca578687b88d2c7817d5709b2700fb6777348f2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ffa2f938ec3171180b8e0d4dc20bf92b3a8cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ffa2f938ec3171180b8e0d4dc20bf92b3a8cfd", "html_url": "https://github.com/rust-lang/rust/commit/c2ffa2f938ec3171180b8e0d4dc20bf92b3a8cfd"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "72a321425ef063ca826ab410c9e8f9cf26647017", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9ca578687b88d2c7817d5709b2700fb6777348f2/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca578687b88d2c7817d5709b2700fb6777348f2/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=9ca578687b88d2c7817d5709b2700fb6777348f2", "patch": "@@ -17,8 +17,10 @@\n //! runtime impact. Therefore, it is largely compiled out if\n //! debug-assertions are not enabled.\n //!\n-//! The basic sanity check, always enabled, is that there is always a\n-//! task (or ignore) on the stack when you do read/write.\n+//! The basic sanity check, enabled if you have debug assertions\n+//! enabled, is that there is always a task (or ignore) on the stack\n+//! when you do read/write, and that the tasks are pushed/popped\n+//! according to a proper stack discipline.\n //!\n //! Optionally, if you specify RUST_FORBID_DEP_GRAPH_EDGE, you can\n //! specify an edge filter to be applied to each edge as it is\n@@ -81,13 +83,23 @@ impl ShadowGraph {\n                 DepMessage::Write(ref n) => self.check_edge(top(&stack), Some(Some(n))),\n                 DepMessage::PushTask(ref n) => stack.push(Some(n.clone())),\n                 DepMessage::PushIgnore => stack.push(None),\n-                DepMessage::PopTask(_) |\n+                DepMessage::PopTask(ref n) => {\n+                    match stack.pop() {\n+                        Some(Some(m)) => {\n+                            if *n != m {\n+                                bug!(\"stack mismatch: found {:?} expected {:?}\", m, n)\n+                            }\n+                        }\n+                        Some(None) => bug!(\"stack mismatch: found Ignore expected {:?}\", n),\n+                        None => bug!(\"stack mismatch: found empty stack, expected {:?}\", n),\n+                    }\n+                }\n                 DepMessage::PopIgnore => {\n-                    // we could easily check that the stack is\n-                    // well-formed here, but since we use closures and\n-                    // RAII accessors, this bug basically never\n-                    // happens, so it seems not worth the overhead\n-                    stack.pop();\n+                    match stack.pop() {\n+                        Some(Some(m)) => bug!(\"stack mismatch: found {:?} expected ignore\", m),\n+                        Some(None) => (),\n+                        None => bug!(\"stack mismatch: found empty stack, expected ignore\"),\n+                    }\n                 }\n                 DepMessage::Query => (),\n             }"}]}