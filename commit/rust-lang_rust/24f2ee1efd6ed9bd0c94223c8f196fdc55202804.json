{"sha": "24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "node_id": "C_kwDOAAsO6NoAKDI0ZjJlZTFlZmQ2ZWQ5YmQwYzk0MjIzYzhmMTk2ZmRjNTUyMDI4MDQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-22T17:20:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-22T17:43:48Z"}, "message": "rustc_metadata: Cleanup to `get_module_children`\n\nto unify proc-macro and non-proc-macro cases in particular.", "tree": {"sha": "4d2a19712f3d223892498d1aa73d46dea405c606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2a19712f3d223892498d1aa73d46dea405c606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "html_url": "https://github.com/rust-lang/rust/commit/24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f2ee1efd6ed9bd0c94223c8f196fdc55202804/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "html_url": "https://github.com/rust-lang/rust/commit/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030"}], "stats": {"total": 75, "additions": 26, "deletions": 49}, "files": [{"sha": "261512aeb4425bb2a133a3167398c42c9e7bf20b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 26, "deletions": 49, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/24f2ee1efd6ed9bd0c94223c8f196fdc55202804/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f2ee1efd6ed9bd0c94223c8f196fdc55202804/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=24f2ee1efd6ed9bd0c94223c8f196fdc55202804", "patch": "@@ -29,7 +29,7 @@ use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n };\n use rustc_session::Session;\n-use rustc_span::hygiene::{ExpnIndex, MacroKind};\n+use rustc_span::hygiene::ExpnIndex;\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n@@ -989,6 +989,21 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         DiagnosticItems { id_to_name, name_to_id }\n     }\n \n+    fn get_mod_child(self, id: DefIndex, sess: &Session) -> ModChild {\n+        let ident = self.item_ident(id, sess);\n+        let kind = self.def_kind(id);\n+        let def_id = self.local_def_id(id);\n+        let res = Res::Def(kind, def_id);\n+        let vis = self.get_visibility(id);\n+        let span = self.get_span(id, sess);\n+        let macro_rules = match kind {\n+            DefKind::Macro(..) => self.root.tables.macro_rules.get(self, id).is_some(),\n+            _ => false,\n+        };\n+\n+        ModChild { ident, res, vis, span, macro_rules }\n+    }\n+\n     /// Iterates over all named children of the given module,\n     /// including both proper items and reexports.\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n@@ -1003,48 +1018,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 // If we are loading as a proc macro, we want to return\n                 // the view of this crate as a proc macro crate.\n                 if id == CRATE_DEF_INDEX {\n-                    for def_index in data.macros.decode(self) {\n-                        let raw_macro = self.raw_proc_macro(def_index);\n-                        let res = Res::Def(\n-                            DefKind::Macro(macro_kind(raw_macro)),\n-                            self.local_def_id(def_index),\n-                        );\n-                        let ident = self.item_ident(def_index, sess);\n-                        yield ModChild {\n-                            ident,\n-                            res,\n-                            vis: ty::Visibility::Public,\n-                            span: ident.span,\n-                            macro_rules: false,\n-                        };\n+                    for child_index in data.macros.decode(self) {\n+                        yield self.get_mod_child(child_index, sess);\n                     }\n                 }\n-                return;\n-            }\n-\n-            // Iterate over all children.\n-            if let Some(children) = self.root.tables.children.get(self, id) {\n-                for child_index in children.decode((self, sess)) {\n-                    let ident = self.item_ident(child_index, sess);\n-                    let kind = self.def_kind(child_index);\n-                    let def_id = self.local_def_id(child_index);\n-                    let res = Res::Def(kind, def_id);\n-                    let vis = self.get_visibility(child_index);\n-                    let span = self.get_span(child_index, sess);\n-                    let macro_rules = match kind {\n-                        DefKind::Macro(..) => {\n-                            self.root.tables.macro_rules.get(self, child_index).is_some()\n-                        }\n-                        _ => false,\n-                    };\n-\n-                    yield ModChild { ident, res, vis, span, macro_rules };\n+            } else {\n+                // Iterate over all children.\n+                for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n+                    yield self.get_mod_child(child_index, sess);\n                 }\n-            }\n \n-            if let Some(exports) = self.root.tables.module_reexports.get(self, id) {\n-                for exp in exports.decode((self, sess)) {\n-                    yield exp;\n+                if let Some(reexports) = self.root.tables.module_reexports.get(self, id) {\n+                    for reexport in reexports.decode((self, sess)) {\n+                        yield reexport;\n+                    }\n                 }\n             }\n         })\n@@ -1784,13 +1771,3 @@ impl CrateMetadata {\n         None\n     }\n }\n-\n-// Cannot be implemented on 'ProcMacro', as libproc_macro\n-// does not depend on librustc_ast\n-fn macro_kind(raw: &ProcMacro) -> MacroKind {\n-    match raw {\n-        ProcMacro::CustomDerive { .. } => MacroKind::Derive,\n-        ProcMacro::Attr { .. } => MacroKind::Attr,\n-        ProcMacro::Bang { .. } => MacroKind::Bang,\n-    }\n-}"}]}