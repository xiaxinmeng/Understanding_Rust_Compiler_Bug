{"sha": "4b9de4cc6327b8c72716b1102a7db4f0858a76db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOWRlNGNjNjMyN2I4YzcyNzE2YjExMDJhN2RiNGYwODU4YTc2ZGI=", "commit": {"author": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-03-21T15:02:14Z"}, "committer": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2017-04-13T00:12:49Z"}, "message": "Update unstable book with global_asm feature", "tree": {"sha": "efe9635cd68aabb2f551c24193fa42cc7eb3b3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe9635cd68aabb2f551c24193fa42cc7eb3b3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9de4cc6327b8c72716b1102a7db4f0858a76db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9de4cc6327b8c72716b1102a7db4f0858a76db", "html_url": "https://github.com/rust-lang/rust/commit/4b9de4cc6327b8c72716b1102a7db4f0858a76db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9de4cc6327b8c72716b1102a7db4f0858a76db/comments", "author": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9240054b3ee5690b6c75bebdb6316a14bdd46340", "url": "https://api.github.com/repos/rust-lang/rust/commits/9240054b3ee5690b6c75bebdb6316a14bdd46340", "html_url": "https://github.com/rust-lang/rust/commit/9240054b3ee5690b6c75bebdb6316a14bdd46340"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "8221d22eaac7b7c80366dc9887bbcffd786c7c08", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=4b9de4cc6327b8c72716b1102a7db4f0858a76db", "patch": "@@ -83,6 +83,7 @@\n - [future_atomic_orderings](future-atomic-orderings.md)\n - [generic_param_attrs](generic-param-attrs.md)\n - [get_type_id](get-type-id.md)\n+- [global_asm](global_asm.md)\n - [heap_api](heap-api.md)\n - [i128](i128.md)\n - [i128_type](i128-type.md)"}, {"sha": "5e68be633e7ab2d69aa066853c888b7ccf5c3467", "filename": "src/doc/unstable-book/src/asm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md?ref=4b9de4cc6327b8c72716b1102a7db4f0858a76db", "patch": "@@ -189,3 +189,5 @@ constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n+If you need more power and don't mind losing some of the niceties of\n+`asm!`, check out [global_asm](global_asm.html)."}, {"sha": "f092a4ad6640c2d5141c9ad1a8a93fe7fe583a1e", "filename": "src/doc/unstable-book/src/global_asm.md", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b9de4cc6327b8c72716b1102a7db4f0858a76db/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fglobal_asm.md?ref=4b9de4cc6327b8c72716b1102a7db4f0858a76db", "patch": "@@ -0,0 +1,78 @@\n+# `global_asm`\n+\n+The tracking issue for this feature is: [#35119]\n+\n+[#35119]: https://github.com/rust-lang/rust/issues/35119\n+\n+------------------------\n+\n+The `global_asm!` macro allows the programmer to write arbitrary\n+assembly outside the scope of a function body, passing it through\n+`rustc` and `llvm` to the assembler. The macro is a no-frills\n+interface to LLVM's concept of [module-level inline assembly]. That is,\n+all caveats applicable to LLVM's module-level inline assembly apply\n+to `global_asm!`.\n+\n+[module-level inline assembly]: http://llvm.org/docs/LangRef.html#module-level-inline-assembly\n+\n+`global_asm!` fills a role not currently satisfied by either `asm!`\n+or `#[naked]` functions. The programmer has _all_ features of the\n+assembler at their disposal. The linker will expect to resolve any\n+symbols defined in the inline assembly, modulo any symbols marked as\n+external. It also means syntax for directives and assembly follow the\n+conventions of the assembler in your toolchain.\n+\n+A simple usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# you also need relevant target_arch cfgs\n+global_asm!(include_str(\"something_neato.s\"));\n+```\n+\n+And a more complicated usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# #![cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+\n+pub mod sally {\n+    global_asm!(r#\"\n+        .global foo\n+      foo:\n+        jmp baz\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn baz() {}\n+}\n+\n+// the symbols `foo` and `bar` are global, no matter where\n+// `global_asm!` was used.\n+extern \"C\" {\n+    fn foo();\n+    fn bar();\n+}\n+\n+pub mod harry {\n+    global_asm!(r#\"\n+        .global bar\n+      bar:\n+        jmp quux\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn quux() {}\n+}\n+```\n+\n+You may use `global_asm!` multiple times, anywhere in your crate, in\n+whatever way suits you. The effect is as if you concatenated all\n+usages and placed the larger, single usage in the crate root.\n+\n+------------------------\n+\n+If you don't need quite as much power and flexibility as\n+`global_asm!` provides, and you don't mind restricting your inline\n+assembly to `fn` bodies only, you might try the [asm](asm.html)\n+feature instead."}]}