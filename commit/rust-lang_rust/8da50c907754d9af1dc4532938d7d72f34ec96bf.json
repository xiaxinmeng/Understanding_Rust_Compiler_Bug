{"sha": "8da50c907754d9af1dc4532938d7d72f34ec96bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTUwYzkwNzc1NGQ5YWYxZGM0NTMyOTM4ZDdkNzJmMzRlYzk2YmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-05T13:06:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-03-09T17:27:23Z"}, "message": "Change `ChildBySource` to allow reusing `DynMap`", "tree": {"sha": "4eee9fdbf92b308abf5a24646f0c113055193154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eee9fdbf92b308abf5a24646f0c113055193154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da50c907754d9af1dc4532938d7d72f34ec96bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da50c907754d9af1dc4532938d7d72f34ec96bf", "html_url": "https://github.com/rust-lang/rust/commit/8da50c907754d9af1dc4532938d7d72f34ec96bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da50c907754d9af1dc4532938d7d72f34ec96bf/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45ac6effe37562daa97e6675c54963252f65664", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45ac6effe37562daa97e6675c54963252f65664", "html_url": "https://github.com/rust-lang/rust/commit/c45ac6effe37562daa97e6675c54963252f65664"}], "stats": {"total": 50, "additions": 18, "deletions": 32}, "files": [{"sha": "6dde74138229938ee8f123fcbaef5bd3aa4f1dfe", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8da50c907754d9af1dc4532938d7d72f34ec96bf/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da50c907754d9af1dc4532938d7d72f34ec96bf/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=8da50c907754d9af1dc4532938d7d72f34ec96bf", "patch": "@@ -17,13 +17,16 @@ use crate::{\n };\n \n pub trait ChildBySource {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap;\n-}\n-\n-impl ChildBySource for TraitId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n+        self.child_by_source_to(db, &mut res);\n+        res\n+    }\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, map: &mut DynMap);\n+}\n \n+impl ChildBySource for TraitId {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let data = db.trait_data(*self);\n         for (_name, item) in data.items.iter() {\n             match *item {\n@@ -41,15 +44,11 @@ impl ChildBySource for TraitId {\n                 }\n             }\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for ImplId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let data = db.impl_data(*self);\n         for &item in data.items.iter() {\n             match item {\n@@ -67,25 +66,21 @@ impl ChildBySource for ImplId {\n                 }\n             }\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for ModuleId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let def_map = self.def_map(db);\n         let module_data = &def_map[self.local_id];\n-        module_data.scope.child_by_source(db)\n+        module_data.scope.child_by_source_to(db, res);\n     }\n }\n \n impl ChildBySource for ItemScope {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-        self.declarations().for_each(|item| add_module_def(db, &mut res, item));\n-        self.impls().for_each(|imp| add_impl(db, &mut res, imp));\n-        return res;\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n+        self.declarations().for_each(|item| add_module_def(db, res, item));\n+        self.impls().for_each(|imp| add_impl(db, res, imp));\n \n         fn add_module_def(db: &dyn DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n             match item {\n@@ -134,9 +129,7 @@ impl ChildBySource for ItemScope {\n }\n \n impl ChildBySource for VariantId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n@@ -150,28 +143,23 @@ impl ChildBySource for VariantId {\n                 }\n             }\n         }\n-        res\n     }\n }\n \n impl ChildBySource for EnumId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let arena_map = self.child_source(db);\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n             let id = EnumVariantId { parent: *self, local_id };\n             res[keys::VARIANT].insert(arena_map.with_value(source.clone()), id)\n         }\n-\n-        res\n     }\n }\n \n impl ChildBySource for DefWithBodyId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let body = db.body(*self);\n-        body.item_scope.child_by_source(db)\n+        body.item_scope.child_by_source_to(db, res);\n     }\n }"}, {"sha": "a056ab797efda3ae25cd025ffbf18cf455124e98", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8da50c907754d9af1dc4532938d7d72f34ec96bf/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da50c907754d9af1dc4532938d7d72f34ec96bf/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=8da50c907754d9af1dc4532938d7d72f34ec96bf", "patch": "@@ -421,8 +421,7 @@ impl HasChildSource<LocalConstParamId> for GenericDefId {\n }\n \n impl ChildBySource for GenericDefId {\n-    fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap) {\n         let (_, sm) = GenericParams::new(db, *self);\n \n         let sm = sm.as_ref();\n@@ -440,6 +439,5 @@ impl ChildBySource for GenericDefId {\n             let id = ConstParamId { parent: *self, local_id };\n             res[keys::CONST_PARAM].insert(sm.with_value(src.clone()), id);\n         }\n-        res\n     }\n }"}]}