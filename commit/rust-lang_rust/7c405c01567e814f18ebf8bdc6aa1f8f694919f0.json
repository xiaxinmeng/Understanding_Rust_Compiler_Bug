{"sha": "7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNDA1YzAxNTY3ZTgxNGYxOGViZjhiZGM2YWExZjhmNjk0OTE5ZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T18:32:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T18:32:35Z"}, "message": "Simplify", "tree": {"sha": "c94bf2281d287691e72c28695a202589079750c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94bf2281d287691e72c28695a202589079750c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "html_url": "https://github.com/rust-lang/rust/commit/7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c405c01567e814f18ebf8bdc6aa1f8f694919f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007032f8504be1274972e4f23afaf0bc431d92d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/007032f8504be1274972e4f23afaf0bc431d92d5", "html_url": "https://github.com/rust-lang/rust/commit/007032f8504be1274972e4f23afaf0bc431d92d5"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "e8ddcc3c27436d4643bb9d5912c8018964350ebf", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c405c01567e814f18ebf8bdc6aa1f8f694919f0/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c405c01567e814f18ebf8bdc6aa1f8f694919f0/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "patch": "@@ -70,20 +70,27 @@ impl ItemScope {\n     }\n \n     /// Get a name from current module scope, legacy macros are not included\n-    pub(crate) fn get(&self, name: &Name, shadow: BuiltinShadowMode) -> Option<PerNs> {\n+    pub(crate) fn get(&self, name: &Name, shadow: BuiltinShadowMode) -> PerNs {\n         match shadow {\n-            BuiltinShadowMode::Module => {\n-                self.visible.get(name).or_else(|| BUILTIN_SCOPE.get(name)).copied()\n-            }\n+            BuiltinShadowMode::Module => self\n+                .visible\n+                .get(name)\n+                .or_else(|| BUILTIN_SCOPE.get(name))\n+                .copied()\n+                .unwrap_or_else(PerNs::none),\n             BuiltinShadowMode::Other => {\n                 let item = self.visible.get(name).copied();\n                 if let Some(def) = item {\n                     if let Some(ModuleDefId::ModuleId(_)) = def.take_types() {\n-                        return BUILTIN_SCOPE.get(name).copied().or(item);\n+                        return BUILTIN_SCOPE\n+                            .get(name)\n+                            .copied()\n+                            .or(item)\n+                            .unwrap_or_else(PerNs::none);\n                     }\n                 }\n \n-                item.or_else(|| BUILTIN_SCOPE.get(name).copied())\n+                item.or_else(|| BUILTIN_SCOPE.get(name).copied()).unwrap_or_else(PerNs::none)\n             }\n         }\n     }"}, {"sha": "695014c7bb95dcea74065020110cce2d6e77e77e", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c405c01567e814f18ebf8bdc6aa1f8f694919f0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c405c01567e814f18ebf8bdc6aa1f8f694919f0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=7c405c01567e814f18ebf8bdc6aa1f8f694919f0", "patch": "@@ -180,13 +180,7 @@ impl CrateDefMap {\n                     }\n \n                     // Since it is a qualified path here, it should not contains legacy macros\n-                    match self[module.local_id].scope.get(&segment, prefer_module(i)) {\n-                        Some(def) => def,\n-                        _ => {\n-                            log::debug!(\"path segment {:?} not found\", segment);\n-                            return ResolvePathResult::empty(ReachedFixedPoint::No);\n-                        }\n-                    }\n+                    self[module.local_id].scope.get(&segment, prefer_module(i))\n                 }\n                 ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n                     // enum variant\n@@ -243,7 +237,7 @@ impl CrateDefMap {\n         //  - std prelude\n         let from_legacy_macro =\n             self[module].scope.get_legacy_macro(name).map_or_else(PerNs::none, PerNs::macros);\n-        let from_scope = self[module].scope.get(name, shadow).unwrap_or_else(PerNs::none);\n+        let from_scope = self[module].scope.get(name, shadow);\n         let from_extern_prelude =\n             self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n         let from_prelude = self.resolve_in_prelude(db, name, shadow);\n@@ -256,7 +250,7 @@ impl CrateDefMap {\n         name: &Name,\n         shadow: BuiltinShadowMode,\n     ) -> PerNs {\n-        let from_crate_root = self[self.root].scope.get(name, shadow).unwrap_or_else(PerNs::none);\n+        let from_crate_root = self[self.root].scope.get(name, shadow);\n         let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n \n         from_crate_root.or(from_extern_prelude)\n@@ -277,7 +271,7 @@ impl CrateDefMap {\n                 keep = db.crate_def_map(prelude.krate);\n                 &keep\n             };\n-            def_map[prelude.local_id].scope.get(name, shadow).unwrap_or_else(PerNs::none)\n+            def_map[prelude.local_id].scope.get(name, shadow)\n         } else {\n             PerNs::none()\n         }"}]}