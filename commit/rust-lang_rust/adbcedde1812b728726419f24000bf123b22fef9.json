{"sha": "adbcedde1812b728726419f24000bf123b22fef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYmNlZGRlMTgxMmI3Mjg3MjY0MTlmMjQwMDBiZjEyM2IyMmZlZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T17:59:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T19:00:15Z"}, "message": "Remove the second code-path for completing names in patterns", "tree": {"sha": "1bc2cd72a1fc81f49fef36c408d82ebdb3207969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc2cd72a1fc81f49fef36c408d82ebdb3207969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbcedde1812b728726419f24000bf123b22fef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbcedde1812b728726419f24000bf123b22fef9", "html_url": "https://github.com/rust-lang/rust/commit/adbcedde1812b728726419f24000bf123b22fef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbcedde1812b728726419f24000bf123b22fef9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2dd7bafc24ac405aebf29f04120ca071019e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2dd7bafc24ac405aebf29f04120ca071019e92", "html_url": "https://github.com/rust-lang/rust/commit/6a2dd7bafc24ac405aebf29f04120ca071019e92"}], "stats": {"total": 101, "additions": 31, "deletions": 70}, "files": [{"sha": "1c8b50eeca9e60e641d84f5eeda381d0072e5bbf", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 12, "deletions": 45, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=adbcedde1812b728726419f24000bf123b22fef9", "patch": "@@ -4,23 +4,25 @@ use crate::completion::{CompletionContext, Completions};\n \n /// Completes constats and paths in patterns.\n pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_pat_binding {\n+    if !ctx.is_pat_binding_or_const {\n         return;\n     }\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n     ctx.scope().process_all_names(&mut |name, res| {\n-        let def = match &res {\n-            hir::ScopeDef::ModuleDef(def) => def,\n+        match &res {\n+            hir::ScopeDef::ModuleDef(def) => match def {\n+                hir::ModuleDef::Adt(hir::Adt::Enum(..))\n+                | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n+                | hir::ModuleDef::EnumVariant(..)\n+                | hir::ModuleDef::Const(..)\n+                | hir::ModuleDef::Module(..) => (),\n+                _ => return,\n+            },\n+            hir::ScopeDef::MacroDef(_) => (),\n             _ => return,\n         };\n-        match def {\n-            hir::ModuleDef::Adt(hir::Adt::Enum(..))\n-            | hir::ModuleDef::EnumVariant(..)\n-            | hir::ModuleDef::Const(..)\n-            | hir::ModuleDef::Module(..) => (),\n-            _ => return,\n-        }\n+\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n }\n@@ -69,34 +71,13 @@ mod tests {\n                 insert: \"E\",\n                 kind: Enum,\n             },\n-            CompletionItem {\n-                label: \"E\",\n-                source_range: [246; 246),\n-                delete: [246; 246),\n-                insert: \"E\",\n-                kind: Enum,\n-            },\n             CompletionItem {\n                 label: \"X\",\n                 source_range: [246; 246),\n                 delete: [246; 246),\n                 insert: \"X\",\n                 kind: EnumVariant,\n             },\n-            CompletionItem {\n-                label: \"X\",\n-                source_range: [246; 246),\n-                delete: [246; 246),\n-                insert: \"X\",\n-                kind: EnumVariant,\n-            },\n-            CompletionItem {\n-                label: \"Z\",\n-                source_range: [246; 246),\n-                delete: [246; 246),\n-                insert: \"Z\",\n-                kind: Const,\n-            },\n             CompletionItem {\n                 label: \"Z\",\n                 source_range: [246; 246),\n@@ -111,13 +92,6 @@ mod tests {\n                 insert: \"m\",\n                 kind: Module,\n             },\n-            CompletionItem {\n-                label: \"m\",\n-                source_range: [246; 246),\n-                delete: [246; 246),\n-                insert: \"m\",\n-                kind: Module,\n-            },\n         ]\n         \"###);\n     }\n@@ -138,13 +112,6 @@ mod tests {\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n-            CompletionItem {\n-                label: \"E\",\n-                source_range: [151; 151),\n-                delete: [151; 151),\n-                insert: \"E\",\n-                kind: Enum,\n-            },\n             CompletionItem {\n                 label: \"E\",\n                 source_range: [151; 151),"}, {"sha": "665597e4cbd5f7ad51f673da9856c695246ff062", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=adbcedde1812b728726419f24000bf123b22fef9", "patch": "@@ -1,19 +1,13 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use crate::completion::{CompletionContext, Completions};\n-use hir::{ModuleDef, ScopeDef};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path && !ctx.is_pat_binding_and_path {\n+    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const) {\n         return;\n     }\n \n-    ctx.scope().process_all_names(&mut |name, res| match (ctx.is_pat_binding_and_path, &res) {\n-        (true, ScopeDef::ModuleDef(ModuleDef::Function(..))) => (),\n-        (true, ScopeDef::ModuleDef(ModuleDef::Static(..))) => (),\n-        (true, ScopeDef::Local(..)) => (),\n-        _ => acc.add_resolution(ctx, name.to_string(), &res),\n-    });\n+    ctx.scope().process_all_names(&mut |name, res| acc.add_resolution(ctx, name.to_string(), &res));\n }\n \n #[cfg(test)]"}, {"sha": "b8213d62f5d25a73d6bae6344ac70abe3c1e616e", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=adbcedde1812b728726419f24000bf123b22fef9", "patch": "@@ -35,10 +35,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n-    pub(super) is_pat_binding: bool,\n-    // A bind battern which may also be part of a path.\n-    // if let Some(En<|>) = Some(Enum::A)\n-    pub(super) is_pat_binding_and_path: bool,\n+    pub(super) is_pat_binding_or_const: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -97,8 +94,7 @@ impl<'a> CompletionContext<'a> {\n             record_lit_pat: None,\n             impl_def: None,\n             is_param: false,\n-            is_pat_binding: false,\n-            is_pat_binding_and_path: false,\n+            is_pat_binding_or_const: false,\n             is_trivial_path: false,\n             path_prefix: None,\n             after_if: false,\n@@ -190,18 +186,19 @@ impl<'a> CompletionContext<'a> {\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n-                let parent = bind_pat.syntax().parent();\n-                if parent.clone().and_then(ast::MatchArm::cast).is_some()\n-                    || parent.clone().and_then(ast::Condition::cast).is_some()\n-                {\n-                    self.is_pat_binding = true;\n+                self.is_pat_binding_or_const = true;\n+                if bind_pat.has_at() || bind_pat.is_ref() || bind_pat.is_mutable() {\n+                    self.is_pat_binding_or_const = false;\n                 }\n-\n-                if parent.and_then(ast::RecordFieldPatList::cast).is_none()\n-                    && bind_pat.pat().is_none()\n-                    && !bind_pat.is_ref()\n-                {\n-                    self.is_pat_binding_and_path = true;\n+                if bind_pat.syntax().parent().and_then(ast::RecordFieldPatList::cast).is_some() {\n+                    self.is_pat_binding_or_const = false;\n+                }\n+                if let Some(let_stmt) = bind_pat.syntax().ancestors().find_map(ast::LetStmt::cast) {\n+                    if let Some(pat) = let_stmt.pat() {\n+                        if bind_pat.syntax().text_range().is_subrange(&pat.syntax().text_range()) {\n+                            self.is_pat_binding_or_const = false;\n+                        }\n+                    }\n                 }\n             }\n             if is_node::<ast::Param>(name.syntax()) {"}, {"sha": "bf7d137be7de9833da3e8918c3c4dfa28423738f", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbcedde1812b728726419f24000bf123b22fef9/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=adbcedde1812b728726419f24000bf123b22fef9", "patch": "@@ -325,6 +325,9 @@ impl ast::BindPat {\n     pub fn is_ref(&self) -> bool {\n         self.syntax().children_with_tokens().any(|n| n.kind() == T![ref])\n     }\n+    pub fn has_at(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|it| it.kind() == T![@])\n+    }\n }\n \n pub struct SlicePatComponents {"}]}