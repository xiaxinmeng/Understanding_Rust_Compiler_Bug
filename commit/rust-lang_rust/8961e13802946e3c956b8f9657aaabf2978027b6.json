{"sha": "8961e13802946e3c956b8f9657aaabf2978027b6", "node_id": "C_kwDOAAsO6NoAKDg5NjFlMTM4MDI5NDZlM2M5NTZiOGY5NjU3YWFhYmYyOTc4MDI3YjY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-11-25T18:12:43Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-11-25T18:13:11Z"}, "message": "Use None when the stack is empty", "tree": {"sha": "bce7044dc843a2585e7ae1b9c0f41ac5841627cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce7044dc843a2585e7ae1b9c0f41ac5841627cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8961e13802946e3c956b8f9657aaabf2978027b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8961e13802946e3c956b8f9657aaabf2978027b6", "html_url": "https://github.com/rust-lang/rust/commit/8961e13802946e3c956b8f9657aaabf2978027b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8961e13802946e3c956b8f9657aaabf2978027b6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a312329b0addbb2321ab4af5ac7132719f18e51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a312329b0addbb2321ab4af5ac7132719f18e51c", "html_url": "https://github.com/rust-lang/rust/commit/a312329b0addbb2321ab4af5ac7132719f18e51c"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "dacb3a9b88f8f660f67bb234c552f7fbf90960f3", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8961e13802946e3c956b8f9657aaabf2978027b6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8961e13802946e3c956b8f9657aaabf2978027b6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=8961e13802946e3c956b8f9657aaabf2978027b6", "patch": "@@ -179,12 +179,14 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n         self.top_user_relevant_frame = Some(frame_idx);\n     }\n \n-    pub fn top_user_relevant_frame(&self) -> usize {\n+    /// Returns the topmost frame that is considered user-relevant, or the\n+    /// top of the stack if there is no such frame, or `None` if the stack is empty.\n+    pub fn top_user_relevant_frame(&self) -> Option<usize> {\n         debug_assert_eq!(self.top_user_relevant_frame, self.compute_top_user_relevant_frame());\n         // This can be called upon creation of an allocation. We create allocations while setting up\n         // parts of the Rust runtime when we do not have any stack frames yet, so we need to handle\n         // empty stacks.\n-        self.top_user_relevant_frame.unwrap_or_else(|| self.stack.len().saturating_sub(1))\n+        self.top_user_relevant_frame.or_else(|| self.stack.len().checked_sub(1))\n     }\n }\n "}, {"sha": "cfa47c5c004d564eee5ae7ab86634c0c6961555d", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8961e13802946e3c956b8f9657aaabf2978027b6/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8961e13802946e3c956b8f9657aaabf2978027b6/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=8961e13802946e3c956b8f9657aaabf2978027b6", "patch": "@@ -940,9 +940,8 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     /// `#[track_caller]`.\n     /// This function is backed by a cache, and can be assumed to be very fast.\n     pub fn current_span(&self) -> Span {\n-        self.stack()\n-            .get(self.top_user_relevant_frame())\n-            .map(Frame::current_span)\n+        self.top_user_relevant_frame()\n+            .map(|frame_idx| self.stack()[frame_idx].current_span())\n             .unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n@@ -954,17 +953,17 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub fn caller_span(&self) -> Span {\n         // We need to go down at least to the caller (len - 2), or however\n         // far we have to go to find a frame in a local crate which is also not #[track_caller].\n-        let frame_idx = self.top_user_relevant_frame();\n-        let stack = self.stack();\n-        let frame_idx = cmp::min(frame_idx, stack.len().saturating_sub(2));\n-        stack.get(frame_idx).map(Frame::current_span).unwrap_or(rustc_span::DUMMY_SP)\n+        self.top_user_relevant_frame()\n+            .map(|frame_idx| cmp::min(frame_idx, self.stack().len() - 2))\n+            .map(|frame_idx| self.stack()[frame_idx].current_span())\n+            .unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n     fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameData<'tcx>>] {\n         self.threads.active_thread_stack()\n     }\n \n-    fn top_user_relevant_frame(&self) -> usize {\n+    fn top_user_relevant_frame(&self) -> Option<usize> {\n         self.threads.active_thread_ref().top_user_relevant_frame()\n     }\n "}]}