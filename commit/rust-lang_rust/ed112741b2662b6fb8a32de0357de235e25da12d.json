{"sha": "ed112741b2662b6fb8a32de0357de235e25da12d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTEyNzQxYjI2NjJiNmZiOGEzMmRlMDM1N2RlMjM1ZTI1ZGExMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T14:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T14:56:53Z"}, "message": "Auto merge of #6656 - phansch:command-failed-print-stderr, r=flip1995\n\nclippy_dev: Pass stderr to CommandFailed\n\nThis improves error reporting when running `rustfmt` fails for some reason, as seen [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/Issue.20with.20rustfmt). It will now include the stderr output in the `CliError::CommandFailed` error.\n\nchangelog: none", "tree": {"sha": "59896193c23e9624773ce154e255f1c57037317e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59896193c23e9624773ce154e255f1c57037317e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed112741b2662b6fb8a32de0357de235e25da12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed112741b2662b6fb8a32de0357de235e25da12d", "html_url": "https://github.com/rust-lang/rust/commit/ed112741b2662b6fb8a32de0357de235e25da12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed112741b2662b6fb8a32de0357de235e25da12d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c0459217d1661edfa794c8bb122452b92fb485", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c0459217d1661edfa794c8bb122452b92fb485", "html_url": "https://github.com/rust-lang/rust/commit/95c0459217d1661edfa794c8bb122452b92fb485"}, {"sha": "da26b2149f69e977afb9a758307cef1c759570af", "url": "https://api.github.com/repos/rust-lang/rust/commits/da26b2149f69e977afb9a758307cef1c759570af", "html_url": "https://github.com/rust-lang/rust/commit/da26b2149f69e977afb9a758307cef1c759570af"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "4d0fdadbd85d184d6b927db81211764c729e5153", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed112741b2662b6fb8a32de0357de235e25da12d/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed112741b2662b6fb8a32de0357de235e25da12d/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=ed112741b2662b6fb8a32de0357de235e25da12d", "patch": "@@ -8,7 +8,7 @@ use walkdir::WalkDir;\n \n #[derive(Debug)]\n pub enum CliError {\n-    CommandFailed(String),\n+    CommandFailed(String, String),\n     IoError(io::Error),\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n@@ -75,8 +75,8 @@ pub fn run(check: bool, verbose: bool) {\n \n     fn output_err(err: CliError) {\n         match err {\n-            CliError::CommandFailed(command) => {\n-                eprintln!(\"error: A command failed! `{}`\", command);\n+            CliError::CommandFailed(command, stderr) => {\n+                eprintln!(\"error: A command failed! `{}`\\nstderr: {}\", command, stderr);\n             },\n             CliError::IoError(err) => {\n                 eprintln!(\"error: {}\", err);\n@@ -136,12 +136,16 @@ fn exec(\n         println!(\"{}\", format_command(&program, &dir, args));\n     }\n \n-    let mut child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n-    let code = child.wait()?;\n-    let success = code.success();\n+    let child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n+    let output = child.wait_with_output()?;\n+    let success = output.status.success();\n \n     if !context.check && !success {\n-        return Err(CliError::CommandFailed(format_command(&program, &dir, args)));\n+        let stderr = std::str::from_utf8(&output.stderr).unwrap_or(\"\");\n+        return Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            String::from(stderr),\n+        ));\n     }\n \n     Ok(success)\n@@ -177,7 +181,10 @@ fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n     {\n         Err(CliError::RustfmtNotInstalled)\n     } else {\n-        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+        Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            std::str::from_utf8(&output.stderr).unwrap_or(\"\").to_string(),\n+        ))\n     }\n }\n "}]}