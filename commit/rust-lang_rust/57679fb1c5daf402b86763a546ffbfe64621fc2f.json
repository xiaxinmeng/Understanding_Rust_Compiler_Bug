{"sha": "57679fb1c5daf402b86763a546ffbfe64621fc2f", "node_id": "C_kwDOAAsO6NoAKDU3Njc5ZmIxYzVkYWY0MDJiODY3NjNhNTQ2ZmZiZmU2NDYyMWZjMmY", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-12T19:11:49Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-22T15:25:50Z"}, "message": "Better error recovery in Subdiagnostic derive", "tree": {"sha": "b6cc17f42c27b4a2ebb9ec537f52fe67d88dffbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6cc17f42c27b4a2ebb9ec537f52fe67d88dffbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57679fb1c5daf402b86763a546ffbfe64621fc2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57679fb1c5daf402b86763a546ffbfe64621fc2f", "html_url": "https://github.com/rust-lang/rust/commit/57679fb1c5daf402b86763a546ffbfe64621fc2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57679fb1c5daf402b86763a546ffbfe64621fc2f/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7251cc441f19306e6e71715a9ab36029c543268", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7251cc441f19306e6e71715a9ab36029c543268", "html_url": "https://github.com/rust-lang/rust/commit/e7251cc441f19306e6e71715a9ab36029c543268"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "6545ae086b15801e6106258d904c5c85a1a1d719", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/57679fb1c5daf402b86763a546ffbfe64621fc2f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57679fb1c5daf402b86763a546ffbfe64621fc2f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=57679fb1c5daf402b86763a546ffbfe64621fc2f", "patch": "@@ -13,6 +13,7 @@ use std::collections::HashMap;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n+use super::error::invalid_attr;\n use super::utils::{SpannedOption, SubdiagnosticKind};\n \n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n@@ -271,18 +272,18 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n             \"skip_arg\" => Ok(quote! {}),\n             \"primary_span\" => {\n                 if kind_stats.has_multipart_suggestion {\n-                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                        diag.help(\n+                    invalid_attr(attr, &Meta::Path(path))\n+                        .help(\n                             \"multipart suggestions use one or more `#[suggestion_part]`s rather \\\n                             than one `#[primary_span]`\",\n                         )\n-                    })\n-                }\n-\n-                report_error_if_not_applied_to_span(attr, &info)?;\n+                        .emit();\n+                } else {\n+                    report_error_if_not_applied_to_span(attr, &info)?;\n \n-                let binding = info.binding.binding.clone();\n-                self.span_field.set_once(binding, span);\n+                    let binding = info.binding.binding.clone();\n+                    self.span_field.set_once(binding, span);\n+                }\n \n                 Ok(quote! {})\n             }\n@@ -292,14 +293,16 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n                 if kind_stats.has_multipart_suggestion {\n                     span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n                         .emit();\n-                    Ok(quote! {})\n                 } else {\n-                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                        diag.help(\n-                                \"`#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\",\n-                            )\n-                    });\n+                    invalid_attr(attr, &Meta::Path(path))\n+                        .help(\n+                            \"`#[suggestion_part(...)]` is only valid in multipart suggestions, \\\n+                             use `#[primary_span]` instead\",\n+                        )\n+                        .emit();\n                 }\n+\n+                Ok(quote! {})\n             }\n             \"applicability\" => {\n                 if kind_stats.has_multipart_suggestion || kind_stats.has_normal_suggestion {\n@@ -322,19 +325,24 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n \n                 Ok(quote! {})\n             }\n-            _ => throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+            _ => {\n                 let mut span_attrs = vec![];\n                 if kind_stats.has_multipart_suggestion {\n                     span_attrs.push(\"suggestion_part\");\n                 }\n                 if !kind_stats.all_multipart_suggestions {\n                     span_attrs.push(\"primary_span\")\n                 }\n-                diag.help(format!(\n-                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n-                    span_attrs.join(\", \")\n-                ))\n-            }),\n+\n+                invalid_attr(attr, &Meta::Path(path))\n+                    .help(format!(\n+                        \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                        span_attrs.join(\", \")\n+                    ))\n+                    .emit();\n+\n+                Ok(quote! {})\n+            }\n         }\n     }\n "}]}