{"sha": "d47ec165826acd95893c5e76e506be3d22188c99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0N2VjMTY1ODI2YWNkOTU4OTNjNWU3NmU1MDZiZTNkMjIxODhjOTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-04T14:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T14:15:28Z"}, "message": "Rollup merge of #71697 - felix91gr:new_prop_into_fn_call, r=wesleywiser\n\nAdded MIR constant propagation of Scalars into function call arguments\n\nNow for the function call arguments!\n\nCaveats:\n1. It's only being enabled at `mir-opt-2` or higher, because currently codegen gives performance regressions with this optimization.\n2. Only propagates Scalars. Tuples and references (references are `Indirect`, right??) are not being propagated into as of this PR.\n3. Maybe more tests would be nice?\n4. I need (shamefully) to ask @wesleywiser to write in his words (or explain to me, and then I can write it down) why we want to ignore propagation into `ScalarPairs` and `Indirect` arguments.\n\nr? @wesleywiser", "tree": {"sha": "47bd6d45e6cec9be5f2c83e78156e52d3744f583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47bd6d45e6cec9be5f2c83e78156e52d3744f583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d47ec165826acd95893c5e76e506be3d22188c99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesCOCCRBK7hj4Ov3rIwAAdHIIAIJU4GtJQnL803vpqhPC+HmC\nlxMfCU1nirHpkUFV7uyVmi4ZtV+4OwZYBLllObZmVE6YyuNX7pL5f/Ar6jWgLnjE\nj9Z/yU5w3PGKqCEIqwx1GhK+xePo8jqh/5vKLQgOX6jGRPHzCaWRS42zBs/N1Kvf\najYTK9MPhOV/GPItPaTyWaxIosWbjROAM5o8/H8V7hVj2lCnne5sjoTu2YBp42yu\n8MW68f2I7I+G+fXm7/3mgk8d8ghMeHwR8JoQEbPeiq7u98Fgj+37l0VaeA9epNGq\nUVMq9wM7h2HmwBAynFabLRAYfTvrGjQYM421NPRtBsQEVqDzAds4ipozTuZs0dc=\n=B9Q/\n-----END PGP SIGNATURE-----\n", "payload": "tree 47bd6d45e6cec9be5f2c83e78156e52d3744f583\nparent 679431f7419e5fe2644a008092f00ccd36779dfb\nparent d0dea9f5887c8371279b0b07ce0380f060ca1e99\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588601728 +0200\ncommitter GitHub <noreply@github.com> 1588601728 +0200\n\nRollup merge of #71697 - felix91gr:new_prop_into_fn_call, r=wesleywiser\n\nAdded MIR constant propagation of Scalars into function call arguments\n\nNow for the function call arguments!\n\nCaveats:\n1. It's only being enabled at `mir-opt-2` or higher, because currently codegen gives performance regressions with this optimization.\n2. Only propagates Scalars. Tuples and references (references are `Indirect`, right??) are not being propagated into as of this PR.\n3. Maybe more tests would be nice?\n4. I need (shamefully) to ask @wesleywiser to write in his words (or explain to me, and then I can write it down) why we want to ignore propagation into `ScalarPairs` and `Indirect` arguments.\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d47ec165826acd95893c5e76e506be3d22188c99", "html_url": "https://github.com/rust-lang/rust/commit/d47ec165826acd95893c5e76e506be3d22188c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d47ec165826acd95893c5e76e506be3d22188c99/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679431f7419e5fe2644a008092f00ccd36779dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/679431f7419e5fe2644a008092f00ccd36779dfb", "html_url": "https://github.com/rust-lang/rust/commit/679431f7419e5fe2644a008092f00ccd36779dfb"}, {"sha": "d0dea9f5887c8371279b0b07ce0380f060ca1e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dea9f5887c8371279b0b07ce0380f060ca1e99", "html_url": "https://github.com/rust-lang/rust/commit/d0dea9f5887c8371279b0b07ce0380f060ca1e99"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "7926bf535b3b714268916933d8c50c145fa0b20f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d47ec165826acd95893c5e76e506be3d22188c99/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47ec165826acd95893c5e76e506be3d22188c99/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d47ec165826acd95893c5e76e506be3d22188c99", "patch": "@@ -787,6 +787,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonUse(_) => {}\n+            // FIXME(felix91gr): explain the reasoning behind this\n             MutatingUse(MutatingUseContext::Projection) => {\n                 if self.local_kinds[local] != LocalKind::Temp {\n                     self.can_const_prop[local] = ConstPropMode::NoPropagation;\n@@ -969,13 +970,58 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n             | TerminatorKind::FalseUnwind { .. } => {}\n-            //FIXME(wesleywiser) Call does have Operands that could be const-propagated\n-            TerminatorKind::Call { .. } => {}\n+            // Every argument in our function calls can be const propagated.\n+            TerminatorKind::Call { ref mut args, .. } => {\n+                let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n+                // Constant Propagation into function call arguments is gated\n+                // under mir-opt-level 2, because LLVM codegen gives performance\n+                // regressions with it.\n+                if mir_opt_level >= 2 {\n+                    for opr in args {\n+                        /*\n+                          The following code would appear to be incomplete, because\n+                          the function `Operand::place()` returns `None` if the\n+                          `Operand` is of the variant `Operand::Constant`. In this\n+                          context however, that variant will never appear. This is why:\n+\n+                          When constructing the MIR, all function call arguments are\n+                          copied into `Locals` of `LocalKind::Temp`. At least, all arguments\n+                          that are not unsized (Less than 0.1% are unsized. See #71170\n+                          to learn more about those).\n+\n+                          This means that, conversely, all `Operands` found as function call\n+                          arguments are of the variant `Operand::Copy`. This allows us to\n+                          simplify our handling of `Operands` in this case.\n+                        */\n+                        if let Some(l) = opr.place().and_then(|p| p.as_local()) {\n+                            if let Some(value) = self.get_const(l) {\n+                                if self.should_const_prop(value) {\n+                                    // FIXME(felix91gr): this code only handles `Scalar` cases.\n+                                    // For now, we're not handling `ScalarPair` cases because\n+                                    // doing so here would require a lot of code duplication.\n+                                    // We should hopefully generalize `Operand` handling into a fn,\n+                                    // and use it to do const-prop here and everywhere else\n+                                    // where it makes sense.\n+                                    if let interpret::Operand::Immediate(\n+                                        interpret::Immediate::Scalar(\n+                                            interpret::ScalarMaybeUndef::Scalar(scalar),\n+                                        ),\n+                                    ) = *value\n+                                    {\n+                                        *opr = self.operand_from_scalar(\n+                                            scalar,\n+                                            value.layout.ty,\n+                                            source_info.span,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n         // We remove all Locals which are restricted in propagation to their containing blocks.\n-        // We wouldn't need to clone, but the borrow checker can't see that we're not aliasing\n-        // the locals_of_current_block field, so we need to clone it first.\n-        // let ecx = &mut self.ecx;\n         for local in self.locals_of_current_block.iter() {\n             Self::remove_const(&mut self.ecx, local);\n         }"}, {"sha": "596ddcb43533ba2360545b5b43f7815a6d4ddf4d", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d47ec165826acd95893c5e76e506be3d22188c99/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d47ec165826acd95893c5e76e506be3d22188c99/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff?ref=d47ec165826acd95893c5e76e506be3d22188c99", "patch": "@@ -22,20 +22,27 @@\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n+-         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +         _3 = const 1u32;                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-+                                          // ty::Const\n+                                           // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/scalar_literal_propagation.rs:4:13: 4:14\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-          _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-                                           // ty::Const\n++         _2 = const consume(const 1u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n++                                          // ty::Const\n                                            // + ty: fn(u32) {consume}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:15\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {"}, {"sha": "0bd4ba97b3ca0b6ec6e63cbf892f51f562d36bae", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d47ec165826acd95893c5e76e506be3d22188c99/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d47ec165826acd95893c5e76e506be3d22188c99/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=d47ec165826acd95893c5e76e506be3d22188c99", "patch": "@@ -50,6 +50,7 @@\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -         _6 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -                                          // ty::Const\n@@ -66,6 +67,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         _5 = const ((), ());             // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-                                          // ty::Const\n+-                                          // + ty: ((), ())\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n@@ -79,13 +87,15 @@\n                                            // + ty: ((), ())\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:21: 14:22\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n -         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         _11 = const Temp { x: 40u8 };    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n@@ -105,6 +115,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n+-         _9 = const 42u8;                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-                                          // ty::Const\n+-                                          // + ty: u8\n+-                                          // + val: Value(Scalar(0x2a))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -                                          // ty::Const\n@@ -117,11 +134,12 @@\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x2a))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n       }\n   \n       bb2: {\n+-         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:34: 16:35\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n -         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n +         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36"}]}