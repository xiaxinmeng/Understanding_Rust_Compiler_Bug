{"sha": "5c1cb5bbc6532c114ee509db7458ebe4967153da", "node_id": "C_kwDOAAsO6NoAKDVjMWNiNWJiYzY1MzJjMTE0ZWU1MDlkYjc0NThlYmU0OTY3MTUzZGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-04T11:48:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-04T23:33:33Z"}, "message": "Turn projections into copies in CopyProp.", "tree": {"sha": "c21b82566ada08e36f0745cc8c27919f8343ef63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21b82566ada08e36f0745cc8c27919f8343ef63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c1cb5bbc6532c114ee509db7458ebe4967153da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1cb5bbc6532c114ee509db7458ebe4967153da", "html_url": "https://github.com/rust-lang/rust/commit/5c1cb5bbc6532c114ee509db7458ebe4967153da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c1cb5bbc6532c114ee509db7458ebe4967153da/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de7d7fb22a579a3d59ddb1c959d1b3da224aafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de7d7fb22a579a3d59ddb1c959d1b3da224aafa", "html_url": "https://github.com/rust-lang/rust/commit/3de7d7fb22a579a3d59ddb1c959d1b3da224aafa"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "8f16df93a56d167563c663ab7ef35ec55677cd23", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c1cb5bbc6532c114ee509db7458ebe4967153da/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1cb5bbc6532c114ee509db7458ebe4967153da/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=5c1cb5bbc6532c114ee509db7458ebe4967153da", "patch": "@@ -153,8 +153,8 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n         if let Operand::Move(place) = *operand\n-            && let Some(local) = place.as_local()\n-            && !self.fully_moved.contains(local)\n+            && !place.has_deref()\n+            && !self.fully_moved.contains(place.local)\n         {\n             *operand = Operand::Copy(place);\n         }"}, {"sha": "02308beb88af27b42bd9fcfed01d5c11bed855bf", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff?ref=5c1cb5bbc6532c114ee509db7458ebe4967153da", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: Foo) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n+      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<Foo>(move _1) -> bb1; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n++         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:19:28: 19:34\n+                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:22:28: 22:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+      }\n+  }\n+  "}, {"sha": "2a1bbae99a4c8b3c4899f3ea9d4096c9ef70df06", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=5c1cb5bbc6532c114ee509db7458ebe4967153da", "patch": "@@ -0,0 +1,34 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn opaque(_: impl Sized) -> bool { true }\n+\n+struct Foo(u8);\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(a: Foo) -> bool {\n+    mir!(\n+        {\n+            let b = a;\n+            // This is a move out of a copy, so must become a copy of `a.0`.\n+            let c = Move(b.0);\n+            Call(RET, bb1, opaque(Move(a)))\n+        }\n+        bb1 = {\n+            Call(RET, ret, opaque(Move(c)))\n+        }\n+        ret = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert!(f(Foo(0)));\n+}\n+\n+// EMIT_MIR move_projection.f.CopyProp.diff"}, {"sha": "69d12bc2d5394e28255da860170f5d5e8777a94b", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5c1cb5bbc6532c114ee509db7458ebe4967153da/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=5c1cb5bbc6532c114ee509db7458ebe4967153da", "patch": "@@ -37,7 +37,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     }\n \n     bb3: {\n-        _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        _4 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         StorageLive(_6);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         _6 = (move _4,);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29"}]}