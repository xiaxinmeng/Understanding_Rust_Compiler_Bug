{"sha": "def144c2e752cf2040d21fbd0cf04f5779cce898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjE0NGMyZTc1MmNmMjA0MGQyMWZiZDBjZjA0ZjU3NzljY2U4OTg=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-03-27T19:50:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-04-12T15:48:01Z"}, "message": "Improve CSS for \"hide contents, not items\"\n\nIntroduce a first use of the `<details>` and `<summary>` tags as\nreplacements for the JS-built toggles. I think this has the potential to\nreplace all the JS toggles and generally clean up the JS, CSS, and HTML.\n\nSplit rendering of attributes into two cases: in the case where they are\nrendered as descendents of a `<pre>` tag, where they use indent spaces and\nnewlines for formatting, matching their surrounding markup. In the case\nwhere they are rendered as descendants of a `<code>` tag, they are\nrendered as `<div>`. This let me clean up some fragile CSS that was\nadjusting the margin-left of attributes depending on context.\n\nRemove toggles for attributes. With the ALLOWED_ATTRIBUTES filter, it's\nrare for an item to have more than one attribute, so hiding attributes\nbehind a toggle doesn't save any screen space in the common case.\n\nFix a couple of invocations of `matches!` that didn't compile on my\nmachine.\n\nFix a boolean for the JS `createToggle` call that was causing\n\"Expand description\" to show up spuriously on already-expanded\ndescriptions.\n\nAdd JS for auto-hide settings and hide all / show all.\n\nRemove a z-index property and some font color tweaks made unnecessary\nby the <details> toggles.\n\nAdd CSS for the <details> toggles.", "tree": {"sha": "45b7fb002bdff5cadfd1e85b57a754fddf960b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b7fb002bdff5cadfd1e85b57a754fddf960b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def144c2e752cf2040d21fbd0cf04f5779cce898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def144c2e752cf2040d21fbd0cf04f5779cce898", "html_url": "https://github.com/rust-lang/rust/commit/def144c2e752cf2040d21fbd0cf04f5779cce898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def144c2e752cf2040d21fbd0cf04f5779cce898/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846a4e9b5cc49ab42a62a15cd2813b0be34fb868", "url": "https://api.github.com/repos/rust-lang/rust/commits/846a4e9b5cc49ab42a62a15cd2813b0be34fb868", "html_url": "https://github.com/rust-lang/rust/commit/846a4e9b5cc49ab42a62a15cd2813b0be34fb868"}], "stats": {"total": 246, "additions": 116, "deletions": 130}, "files": [{"sha": "d0d9034f6e6c62c0901dbcf9d420376354170bae", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -43,7 +43,6 @@ use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n \n-use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n@@ -487,7 +486,6 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n         )\n             .into(),\n         (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n-        (\"auto-hide-attributes\", \"Auto-hide item attributes.\", true).into(),\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n         (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", true)\n             .into(),\n@@ -936,19 +934,21 @@ fn render_assoc_item(\n             + name.as_str().len()\n             + generics_len;\n \n-        let (indent, end_newline) = if parent == ItemType::Trait {\n+        let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n             header_len += 4;\n-            (4, false)\n+            let indent_str = \"    \";\n+            render_attributes_in_pre(w, meth, indent_str);\n+            (4, indent_str, false)\n         } else {\n-            (0, true)\n+            render_attributes_in_code(w, meth);\n+            (0, \"\", true)\n         };\n-        render_attributes(w, meth, false);\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            if parent == ItemType::Trait { \"    \" } else { \"\" },\n+            indent_str,\n             vis,\n             constness,\n             asyncness,\n@@ -1004,35 +1004,33 @@ const ALLOWED_ATTRIBUTES: &[Symbol] = &[\n     sym::non_exhaustive,\n ];\n \n-// The `top` parameter is used when generating the item declaration to ensure it doesn't have a\n-// left padding. For example:\n-//\n-// #[foo] <----- \"top\" attribute\n-// struct Foo {\n-//     #[bar] <---- not \"top\" attribute\n-//     bar: usize,\n-// }\n-fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n-    let attrs = it\n-        .attrs\n+fn attributes(it: &clean::Item) -> Vec<String> {\n+    it.attrs\n         .other_attrs\n         .iter()\n         .filter_map(|attr| {\n             if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(pprust::attribute_to_string(&attr))\n+                Some(pprust::attribute_to_string(&attr).replace(\"\\n\", \"\").replace(\"  \", \" \"))\n             } else {\n                 None\n             }\n         })\n-        .join(\"\\n\");\n+        .collect()\n+}\n \n-    if !attrs.is_empty() {\n-        write!(\n-            w,\n-            \"<span class=\\\"docblock attributes{}\\\">{}</span>\",\n-            if top { \" top-attr\" } else { \"\" },\n-            &attrs\n-        );\n+// When an attribute is rendered inside a `<pre>` tag, it is formatted using\n+// a whitespace prefix and newline.\n+fn render_attributes_in_pre(w: &mut Buffer, it: &clean::Item, prefix: &str) {\n+    for a in attributes(it) {\n+        write!(w, \"{}{}\\n\", prefix, a);\n+    }\n+}\n+\n+// When an attribute is rendered inside a <code> tag, it is formatted using\n+// a div to produce a newline after it.\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n+    for a in attributes(it) {\n+        write!(w, \"<div>{}</div>\", a);\n     }\n }\n "}, {"sha": "03c4bb837f57d9dcdb2b2585f5356ab14201036d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -11,8 +11,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes, render_impl,\n-    render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n+    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::cache::Cache;\n@@ -138,11 +138,15 @@ fn should_hide_fields(n_fields: usize) -> bool {\n }\n \n fn toggle_open(w: &mut Buffer, text: &str) {\n-    write!(w, \"<div class=\\\"docblock type-contents-toggle\\\" data-toggle-text=\\\"{}\\\">\", text);\n+    write!(\n+        w,\n+        \"<details class=\\\"type-contents-toggle\\\"><summary class=\\\"hideme\\\"><span>Show {}</span></summary>\",\n+        text\n+    );\n }\n \n fn toggle_close(w: &mut Buffer) {\n-    w.write_str(\"</div>\");\n+    w.write_str(\"</details>\");\n }\n \n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n@@ -391,7 +395,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n     )\n     .len();\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n@@ -420,7 +424,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust trait\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}{}{}trait {}{}{}\",\n@@ -729,7 +733,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     w.write_str(\"<pre class=\\\"rust trait-alias\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"trait {}{}{} = {};</pre>\",\n@@ -750,7 +754,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n \n fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     w.write_str(\"<pre class=\\\"rust opaque\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = impl {bounds};</pre>\",\n@@ -771,7 +775,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     w.write_str(\"<pre class=\\\"rust typedef\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = {type_};</pre>\",\n@@ -793,7 +797,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust union\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         render_union(w, it, Some(&s.generics), &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -839,7 +843,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust enum\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}enum {}{}{}\",\n@@ -1019,7 +1023,7 @@ fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n \n fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     w.write_str(\"<pre class=\\\"rust const\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n \n     write!(\n         w,\n@@ -1058,7 +1062,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust struct\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_code(w, it);\n         render_struct(w, it, Some(&s.generics), s.struct_type, &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -1107,7 +1111,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n     w.write_str(\"<pre class=\\\"rust static\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"{vis}static {mutability}{name}: {typ}</pre>\",\n@@ -1121,7 +1125,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n     w.write_str(\"<pre class=\\\"rust foreigntype\\\">extern {\\n\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\",\n@@ -1304,10 +1308,8 @@ fn render_union(\n     }\n \n     write!(w, \" {{\\n{}\", tab);\n-    let count_fields = fields\n-        .iter()\n-        .filter(|f| matches!(clean::StructFieldItem(..), *f.kind))\n-        .count();\n+    let count_fields =\n+        fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n     let toggle = should_hide_fields(count_fields);\n     if toggle {\n         toggle_open(w, \"fields\");\n@@ -1361,10 +1363,8 @@ fn render_struct(\n                 write!(w, \"{}\", print_where_clause(g, cx.cache(), cx.tcx(), 0, true),)\n             }\n             w.write_str(\" {\");\n-            let count_fields = fields\n-                .iter()\n-                .filter(|f| matches!(clean::StructFieldItem(..) = *f.kind))\n-                .count();\n+            let count_fields =\n+                fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n             let has_visible_fields = count_fields > 0;\n             let toggle = should_hide_fields(count_fields);\n             if toggle {"}, {"sha": "1b14f67fce1318498c4e49104d3455661e9c0b66", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 16, "deletions": 42, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass */\n /* global onEach, onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n@@ -2316,6 +2315,9 @@ function hideThemeButtonState() {\n         if (hasClass(innerToggle, \"will-expand\")) {\n             updateLocalStorage(\"rustdoc-collapse\", \"false\");\n             removeClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = true;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(false);\n             });\n@@ -2328,6 +2330,9 @@ function hideThemeButtonState() {\n         } else {\n             updateLocalStorage(\"rustdoc-collapse\", \"true\");\n             addClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = false;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 var parent = e.parentNode;\n                 var superParent = null;\n@@ -2569,6 +2574,7 @@ function hideThemeButtonState() {\n         var toggle = createSimpleToggle(false);\n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n+        let hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n@@ -2615,6 +2621,14 @@ function hideThemeButtonState() {\n         onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n         onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n         var impl_call = function() {};\n+        // Large items are hidden by default in the HTML. If the setting overrides that, show 'em.\n+        if (!hideLargeItemContents) {\n+            onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n+                if (hasClass(e, \"type-contents-toggle\")) {\n+                    e.open = true;\n+                }\n+            });\n+        }\n         if (hideMethodDocs === true) {\n             impl_call = function(e, newToggle) {\n                 if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n@@ -2703,14 +2717,6 @@ function hideThemeButtonState() {\n                         }\n                     });\n                 }\n-            } else if (hasClass(e, \"type-contents-toggle\")) {\n-                let text = e.getAttribute(\"data-toggle-text\");\n-                let hideItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n-                let tog = createToggle(toggle, `Show ${text}`, null, \"\", !hideItemContents);\n-                e.parentNode.insertBefore(tog,  e);\n-                if (hideItemContents) {\n-                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-                }\n             }\n             if (e.parentNode.id === \"main\") {\n                 var otherMessage = \"\";\n@@ -2744,7 +2750,7 @@ function hideThemeButtonState() {\n                         otherMessage,\n                         fontSize,\n                         extraClass,\n-                        false),\n+                        true),\n                     e);\n                 if (hasClass(e, \"non-exhaustive\") === true) {\n                     collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n@@ -2763,38 +2769,6 @@ function hideThemeButtonState() {\n         }\n     }());\n \n-    function createToggleWrapper(tog) {\n-        var span = document.createElement(\"span\");\n-        span.className = \"toggle-label\";\n-        span.style.display = \"none\";\n-        span.innerHTML = \"&nbsp;Expand&nbsp;attributes\";\n-        tog.appendChild(span);\n-\n-        var wrapper = document.createElement(\"div\");\n-        wrapper.className = \"toggle-wrapper toggle-attributes\";\n-        wrapper.appendChild(tog);\n-        return wrapper;\n-    }\n-\n-    (function() {\n-        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-        var itemAttributesFunc = function() {};\n-        if (getSettingValue(\"auto-hide-attributes\") !== \"false\") {\n-            itemAttributesFunc = function(x) {\n-                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-            };\n-        }\n-        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-            var attr_tog = attributesToggle.cloneNode(true);\n-            if (hasClass(i_e, \"top-attr\") === true) {\n-                addClass(attr_tog, \"top-attr\");\n-            }\n-            i_e.parentNode.insertBefore(attr_tog, i_e);\n-            itemAttributesFunc(i_e);\n-        });\n-    }());\n-\n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n         var lineNumbersFunc = function() {};"}, {"sha": "64972bc23891b764d29c6187d0bc95d47a3de6a3", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -970,10 +970,6 @@ a.test-arrow:hover{\n \tposition: absolute;\n \tleft: -23px;\n \ttop: 0;\n-\n-\t/* The click event for this is defined on the document,\n-\t   so bubbling does not work. See https://github.com/rust-lang/rust/issues/83332 */\n-\tz-index: 10;\n }\n \n h3 > .collapse-toggle, h4 > .collapse-toggle {\n@@ -1058,11 +1054,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tmargin-top: 3px;\n }\n \n-/* for hiding fields/variants/associated items */\n-.enum > .toggle-wrapper + .docblock, .struct > .toggle-wrapper + .docblock, .union > .toggle-wrapper + .docblock, .trait > .toggle-wrapper + .docblock {\n-\tmargin-left: 0px;\n-}\n-\n .docblock > .section-header:first-child {\n \tmargin-left: 15px;\n \tmargin-top: 0;\n@@ -1076,22 +1067,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tdisplay: block;\n }\n \n-.attributes {\n-\tdisplay: block;\n-\tmargin-top: 0px !important;\n-\tmargin-right: 0px;\n-\tmargin-bottom: 0px !important;\n-\tmargin-left: 30px;\n-}\n-.toggle-attributes.collapsed {\n-\tmargin-bottom: 0;\n-}\n-.impl-items > .toggle-attributes {\n-\tmargin-left: 20px;\n-}\n-.impl-items .attributes {\n-\tfont-weight: 500;\n-}\n \n :target > code {\n \topacity: 1;\n@@ -1778,16 +1753,56 @@ div.name.expand::before {\n \ttop: 2px;\n }\n \n-/* This part is to fix the \"Expand attributes\" part in the type declaration. */\n-.type-decl > pre > .toggle-wrapper.toggle-attributes.top-attr {\n-\tmargin-left: 0 !important;\n+/* The hideme class is used on summary tags that contain a span with\n+\tplaceholder text shown only when the toggle is closed. For instance,\n+\t\"Expand description\" or \"Show methods\". */\n+details > summary.hideme {\n+\tcursor: pointer;\n+}\n+\n+details > summary::-webkit-details-marker {\n+\tdisplay: none;\n+}\n+\n+details > summary.hideme > span {\n+\tmargin-left: 9px;\n+\tcolor: #999;\n }\n-.type-decl > pre > .docblock.attributes.top-attr {\n-\tmargin-left: 1.8em !important;\n+\n+details > summary::before {\n+\tcontent: \"[+]\";\n+\tfont-weight: 300;\n+\tfont-size: 0.8em;\n+\tcolor: #999;\n+\tletter-spacing: 1px;\n+}\n+\n+details > summary.hideme::before {\n+\tposition: relative;\n }\n-.type-decl > pre .toggle-attributes {\n-\tmargin-left: 2.2em;\n+\n+details > summary:not(.hideme)::before {\n+\tfloat: left;\n }\n-.type-decl > pre > .docblock.attributes {\n-\tmargin-left: 4em;\n+\n+/* When a \"hideme\" summary is open and the \"Expand description\" or \"Show\n+\tmethods\" text is hidden, we want the [-] toggle that remains to not\n+\taffect the layout of the items to its right. To do that, we use\n+\tabsolute positioning. Note that we also set position: relative\n+\ton the parent <details> to make this work properly. */\n+details[open] > summary.hideme {\n+\tposition: absolute;\n+}\n+\n+details[open] {\n+\tposition: relative;\n+}\n+\n+details[open] > summary.hideme > span {\n+\tdisplay: none;\n+}\n+\n+details[open] > summary::before {\n+\tcontent: \"[\u2212]\";\n+\tdisplay: inline;\n }"}, {"sha": "2ed87fdedaec686616e46c3b6435bd5d3b63384d", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -1,6 +1,5 @@\n // From rust:\n /* global resourcesSuffix */\n-\n var darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");"}, {"sha": "b24f4035ca868d6056109970f5f65fca1e0b36b7", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -218,7 +218,7 @@ a {\n \tcolor: #c5c5c5;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow):not(.collapse-toggle),\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #39AFD7;"}, {"sha": "e863ed03f515696172151eccc67d1dd624713480", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -176,7 +176,7 @@ a {\n \tcolor: #ddd;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow):not(.collapse-toggle),\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #D2991D;"}, {"sha": "9335dd96d299af9e4d69858d6a1380f64c0a8f68", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/def144c2e752cf2040d21fbd0cf04f5779cce898/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=def144c2e752cf2040d21fbd0cf04f5779cce898", "patch": "@@ -174,7 +174,7 @@ a {\n \tcolor: #000;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow):not(.collapse-toggle),\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #3873AD;"}]}