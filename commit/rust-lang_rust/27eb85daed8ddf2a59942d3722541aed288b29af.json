{"sha": "27eb85daed8ddf2a59942d3722541aed288b29af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZWI4NWRhZWQ4ZGRmMmE1OTk0MmQzNzIyNTQxYWVkMjg4YjI5YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-08T03:16:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-08T03:16:11Z"}, "message": "auto merge of #10333 : huonw/rust/ascii, r=alexcrichton\n\nThis renames to_str_ascii to as_str_ascii and makes it non-copying,\r\nwhich is possible now that strings no longer have a hidden extra\r\nbyte/null terminator.\r\n\r\nFixes #6120.", "tree": {"sha": "ad0fba2a564bdf95c50eb0dfba8b734e2a0e4359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0fba2a564bdf95c50eb0dfba8b734e2a0e4359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27eb85daed8ddf2a59942d3722541aed288b29af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27eb85daed8ddf2a59942d3722541aed288b29af", "html_url": "https://github.com/rust-lang/rust/commit/27eb85daed8ddf2a59942d3722541aed288b29af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27eb85daed8ddf2a59942d3722541aed288b29af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00bb2ec0462cba7ad9be04db44a3b1255aaafc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00bb2ec0462cba7ad9be04db44a3b1255aaafc6", "html_url": "https://github.com/rust-lang/rust/commit/f00bb2ec0462cba7ad9be04db44a3b1255aaafc6"}, {"sha": "b95a8c63fd7f89d38dc5ddee106cb0865274874e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95a8c63fd7f89d38dc5ddee106cb0865274874e", "html_url": "https://github.com/rust-lang/rust/commit/b95a8c63fd7f89d38dc5ddee106cb0865274874e"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "dcb0d2ef01d39b2dbea49215cbf5f6c784e6839c", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=27eb85daed8ddf2a59942d3722541aed288b29af", "patch": "@@ -52,10 +52,8 @@ fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n \n-    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n     let kind = line.slice(start_kind, idx);\n-    let kind = kind.to_ascii().to_lower().to_str_ascii();\n+    let kind = kind.to_ascii().to_lower().into_str();\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }"}, {"sha": "2de7c1ba6dc4fee185e2ed59dadb837717f5747a", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=27eb85daed8ddf2a59942d3722541aed288b29af", "patch": "@@ -887,12 +887,8 @@ mod tests {\n         // tjc: funny that we have to use parens\n         fn ile(x: &(&'static str), y: &(&'static str)) -> bool\n         {\n-            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-            // to_ascii_move and to_str_move to not do a unnecessary clone.\n-            // (Actually, could just remove the to_str_* call, but needs an deriving(Ord) on\n-            // Ascii)\n-            let x = x.to_ascii().to_lower().to_str_ascii();\n-            let y = y.to_ascii().to_lower().to_str_ascii();\n+            let x = x.to_ascii().to_lower().into_str();\n+            let y = y.to_ascii().to_lower().into_str();\n             x <= y\n         }\n "}, {"sha": "c57cd134e01b665900652876a8d8ae308976ecbe", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=27eb85daed8ddf2a59942d3722541aed288b29af", "patch": "@@ -669,10 +669,8 @@ pub fn build_session_options(binary: @str,\n     for level in lint_levels.iter() {\n         let level_name = lint::level_to_str(*level);\n \n-        // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-        // to_ascii_move and to_str_move to not do a unnecessary copy.\n         let level_short = level_name.slice_chars(0, 1);\n-        let level_short = level_short.to_ascii().to_upper().to_str_ascii();\n+        let level_short = level_short.to_ascii().to_upper().into_str();\n         let flags = vec::append(matches.opt_strs(level_short),\n                                 matches.opt_strs(level_name));\n         for lint_name in flags.iter() {"}, {"sha": "ddf7c934a49d56af2b205c29dd63e45eebec9f28", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=27eb85daed8ddf2a59942d3722541aed288b29af", "patch": "@@ -17,7 +17,7 @@ use str::OwnedStr;\n use container::Container;\n use cast;\n use iter::Iterator;\n-use vec::{CopyableVector, ImmutableVector, MutableVector};\n+use vec::{ImmutableVector, MutableVector};\n use to_bytes::IterBytes;\n use option::{Some, None};\n \n@@ -154,10 +154,10 @@ impl AsciiCast<Ascii> for char {\n \n /// Trait for copyless casting to an ascii vector.\n pub trait OwnedAsciiCast {\n-    /// Take ownership and cast to an ascii vector without trailing zero element.\n+    /// Take ownership and cast to an ascii vector.\n     fn into_ascii(self) -> ~[Ascii];\n \n-    /// Take ownership and cast to an ascii vector without trailing zero element.\n+    /// Take ownership and cast to an ascii vector.\n     /// Does not perform validation checks.\n     unsafe fn into_ascii_nocheck(self) -> ~[Ascii];\n }\n@@ -188,26 +188,26 @@ impl OwnedAsciiCast for ~str {\n     }\n }\n \n-/// Trait for converting an ascii type to a string. Needed to convert `&[Ascii]` to `~str`\n+/// Trait for converting an ascii type to a string. Needed to convert\n+/// `&[Ascii]` to `&str`.\n pub trait AsciiStr {\n     /// Convert to a string.\n-    fn to_str_ascii(&self) -> ~str;\n+    fn as_str_ascii<'a>(&'a self) -> &'a str;\n \n     /// Convert to vector representing a lower cased ascii string.\n     fn to_lower(&self) -> ~[Ascii];\n \n     /// Convert to vector representing a upper cased ascii string.\n     fn to_upper(&self) -> ~[Ascii];\n \n-    /// Compares two Ascii strings ignoring case\n+    /// Compares two Ascii strings ignoring case.\n     fn eq_ignore_case(self, other: &[Ascii]) -> bool;\n }\n \n impl<'self> AsciiStr for &'self [Ascii] {\n     #[inline]\n-    fn to_str_ascii(&self) -> ~str {\n-        let cpy = self.to_owned();\n-        unsafe { cast::transmute(cpy) }\n+    fn as_str_ascii<'a>(&'a self) -> &'a str {\n+        unsafe { cast::transmute(*self) }\n     }\n \n     #[inline]\n@@ -443,12 +443,12 @@ mod tests {\n         let v = ~[40u8, 32u8, 59u8]; assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n         let v = ~\"( ;\";              assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n \n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lower().to_str_ascii(), ~\"abcdef&?#\");\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEF&?#\");\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lower().into_str(), ~\"abcdef&?#\");\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_upper().into_str(), ~\"ABCDEF&?#\");\n \n-        assert_eq!(\"\".to_ascii().to_lower().to_str_ascii(), ~\"\");\n-        assert_eq!(\"YMCA\".to_ascii().to_lower().to_str_ascii(), ~\"ymca\");\n-        assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEFXYZ:.;\");\n+        assert_eq!(\"\".to_ascii().to_lower().into_str(), ~\"\");\n+        assert_eq!(\"YMCA\".to_ascii().to_lower().into_str(), ~\"ymca\");\n+        assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().into_str(), ~\"ABCDEFXYZ:.;\");\n \n         assert!(\"aBcDeF&?#\".to_ascii().eq_ignore_case(\"AbCdEf&?#\".to_ascii()));\n \n@@ -465,7 +465,10 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_ascii_to_str() { assert_eq!(v2ascii!([40, 32, 59]).to_str_ascii(), ~\"( ;\"); }\n+    fn test_ascii_as_str() {\n+        let v = v2ascii!([40, 32, 59]);\n+        assert_eq!(v.as_str_ascii(), \"( ;\");\n+    }\n \n     #[test]\n     fn test_ascii_into_str() {"}, {"sha": "8ac224003b8340939ecd7b2fb9dad106ca6cfdd7", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb85daed8ddf2a59942d3722541aed288b29af/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=27eb85daed8ddf2a59942d3722541aed288b29af", "patch": "@@ -72,10 +72,8 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n        let (k,v) = (*kv).clone();\n        unsafe {\n            let b = str::raw::from_utf8(k);\n-           // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-           // to_ascii_move and to_str_move to not do a unnecessary copy.\n            buffer.push_str(format!(\"{} {:0.3f}\\n\",\n-                                   b.to_ascii().to_upper().to_str_ascii(), v));\n+                                   b.into_ascii().to_upper().into_str(), v));\n        }\n    }\n \n@@ -84,9 +82,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n-   // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n-   // to_ascii_move and to_str_move to not do a unnecessary copy.\n-   let key = key.to_ascii().to_lower().to_str_ascii();\n+   let key = key.into_ascii().to_lower().into_str();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }"}]}