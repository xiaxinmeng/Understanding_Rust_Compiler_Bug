{"sha": "bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTc5MzZjOGE0NjZlNTZkNDcyYjgxMWUwYWNhMGNmOGZmZGY5YTE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-04T01:56:15Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace `eval_place()` with use of `InterpCx`", "tree": {"sha": "f274545ce17f8befddaf37d9b6921453a3163eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f274545ce17f8befddaf37d9b6921453a3163eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "html_url": "https://github.com/rust-lang/rust/commit/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59367b074f1523353dddefa678ffe3cac9fd4e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/59367b074f1523353dddefa678ffe3cac9fd4e50", "html_url": "https://github.com/rust-lang/rust/commit/59367b074f1523353dddefa678ffe3cac9fd4e50"}], "stats": {"total": 100, "additions": 43, "deletions": 57}, "files": [{"sha": "0328f93859bb737ac1c400d4ae89fa664dacea2b", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -389,6 +389,14 @@ pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n \n+    /// Error used by the `ConstProp` pass when an attempt is made\n+    /// to read an uninitialized local.\n+    UninitializedLocal,\n+\n+    /// Error used by the `ConstProp` pass to prevent reading statics\n+    /// while evaluating `const` items.\n+    ReadOfStaticInConst,\n+\n     // -- Everything below is not categorized yet --\n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n@@ -511,6 +519,8 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     addresses, e.g., comparing pointers into different allocations\"),\n             DeadLocal =>\n                 write!(f, \"tried to access a dead local variable\"),\n+            UninitializedLocal =>\n+                write!(f, \"tried to access an uninitialized local variable\"),\n             DerefFunctionPointer =>\n                 write!(f, \"tried to dereference a function pointer\"),\n             ExecuteMemory =>\n@@ -552,6 +562,8 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     not a power of two\"),\n             Unsupported(ref msg) =>\n                 write!(f, \"{}\", msg),\n+            ReadOfStaticInConst =>\n+                write!(f, \"tried to read from a static during const evaluation\"),\n         }\n     }\n }"}, {"sha": "7ca14b51740a964b3cc6082b273419c9f5e2cdf2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -134,8 +134,7 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_unsup!(DeadLocal),\n-            LocalValue::Uninitialized =>\n-                bug!(\"The type checker should prevent reading from a never-written local\"),\n+            LocalValue::Uninitialized => throw_unsup!(UninitializedLocal),\n             LocalValue::Live(val) => Ok(val),\n         }\n     }"}, {"sha": "89af0031bfd260e5afea01520dc68fba9924048e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -481,7 +481,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     // Evaluate a place with the goal of reading from it.  This lets us sometimes\n     // avoid allocations.\n-    pub(super) fn eval_place_to_op(\n+    pub fn eval_place_to_op(\n         &self,\n         place: &mir::Place<'tcx>,\n         layout: Option<TyLayout<'tcx>>,"}, {"sha": "f9ba1452d64fa76e458a932037c93a3baa557375", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -597,6 +597,15 @@ where\n             }\n \n             StaticKind::Static => {\n+                //if the first frame on the stack isn't a static item, then we shouldn't\n+                //eval any static places (unless -Z unleash-the-miri-inside-of-you is on)\n+                if let ty::InstanceDef::Item(item_def_id) = self.stack[0].instance.def {\n+                    if !self.tcx.is_static(item_def_id) &&\n+                        !self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+                        trace!(\"eval_static_to_mplace: can't eval static in constant\");\n+                        throw_unsup!(ReadOfStaticInConst);\n+                    }\n+                }\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;"}, {"sha": "ff1a7c2c48fd942365efedcc417a490f03e35ae3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 50, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -6,14 +6,14 @@ use std::cell::Cell;\n use rustc::hir::def::DefKind;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n-    Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n-    TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n+    Local, NullOp, UnOp, StatementKind, Statement, LocalKind,\n+    TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp,\n     SourceScope, SourceScopeLocalData, LocalDecl,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{Scalar, GlobalId, InterpResult, PanicInfo};\n+use rustc::mir::interpret::{Scalar, InterpResult, PanicInfo};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -282,53 +282,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n-        let mut eval = match place.base {\n-            PlaceBase::Local(loc) => self.get_const(loc).clone()?,\n-            PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted, _), ..}) => {\n-                let generics = self.tcx.generics_of(self.source.def_id());\n-                if generics.requires_monomorphization(self.tcx) {\n-                    // FIXME: can't handle code with generics\n-                    return None;\n-                }\n-                let substs = InternalSubsts::identity_for_item(self.tcx, self.source.def_id());\n-                let instance = Instance::new(self.source.def_id(), substs);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: Some(promoted),\n-                };\n-                let res = self.use_ecx(source_info, |this| {\n-                    this.ecx.const_eval_raw(cid)\n-                })?;\n-                trace!(\"evaluated promoted {:?} to {:?}\", promoted, res);\n-                res.into()\n-            }\n-            _ => return None,\n-        };\n-\n-        for (i, elem) in place.projection.iter().enumerate() {\n-            let proj_base = &place.projection[..i];\n-\n-            match elem {\n-                ProjectionElem::Field(field, _) => {\n-                    trace!(\"field proj on {:?}\", proj_base);\n-                    eval = self.use_ecx(source_info, |this| {\n-                        this.ecx.operand_field(eval, field.index() as u64)\n-                    })?;\n-                },\n-                ProjectionElem::Deref => {\n-                    trace!(\"processing deref\");\n-                    eval = self.use_ecx(source_info, |this| {\n-                        this.ecx.deref_operand(eval)\n-                    })?.into();\n-                }\n-                // We could get more projections by using e.g., `operand_projection`,\n-                // but we do not even have the stack frame set up properly so\n-                // an `Index` projection would throw us off-track.\n-                _ => return None,\n-            }\n-        }\n-\n-        Some(eval)\n+        self.use_ecx(source_info, |this| {\n+            this.ecx.eval_place_to_op(place, None)\n+        })\n     }\n \n     fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {"}, {"sha": "05595ce147c96f6b17472fda1e6b2325f2cb8f9a", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -34,7 +34,7 @@ fn main() {\n //      assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n //  bb1: {\n-//      _1 = (*_2)[_6];\n+//      _1 = const 2u32;\n //      ...\n //      return;\n //  }"}, {"sha": "274967ef60de54cb477ee0948057e7133d342a0c", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -11,6 +11,7 @@ struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n+    //~| ERROR any use of this value will cause an error\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "de3459c72dd2b0397ab80996ed1dae5c62814d9f", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -9,13 +9,21 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:17:5\n+  --> $DIR/issue-50814.rs:18:5\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |     ^-----------------\n    |      |\n    |      referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814.rs:13:21\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX;\n+   |     ----------------^^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     attempt to add with overflow\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "6fbc1ed52c4788bcc36828684bb585faf96357e2", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc17936c8a466e56d472b811e0aca0cf8ffdf9a1/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=bc17936c8a466e56d472b811e0aca0cf8ffdf9a1", "patch": "@@ -6,4 +6,5 @@ LL | static B: [u32; 1] = [0; A.len()];\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0013`.\n+Some errors have detailed explanations: E0013, E0080.\n+For more information about an error, try `rustc --explain E0013`."}]}