{"sha": "dc5ce0a9703451da7ecac062fbc239fe4890a996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNWNlMGE5NzAzNDUxZGE3ZWNhYzA2MmZiYzIzOWZlNDg5MGE5OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T21:21:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T21:21:40Z"}, "message": "auto merge of #14298 : kmcallister/rust/pattern-macros, r=huonw\n\nFirst commit is an unrelated fix for a test suite warning I introduced last week.", "tree": {"sha": "103419947fe6b00e0e0ea57904cff76efe70d316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103419947fe6b00e0e0ea57904cff76efe70d316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5ce0a9703451da7ecac062fbc239fe4890a996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5ce0a9703451da7ecac062fbc239fe4890a996", "html_url": "https://github.com/rust-lang/rust/commit/dc5ce0a9703451da7ecac062fbc239fe4890a996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5ce0a9703451da7ecac062fbc239fe4890a996/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e865415c2fe2c0e83fe1955238db082a1374c380", "url": "https://api.github.com/repos/rust-lang/rust/commits/e865415c2fe2c0e83fe1955238db082a1374c380", "html_url": "https://github.com/rust-lang/rust/commit/e865415c2fe2c0e83fe1955238db082a1374c380"}, {"sha": "fd40d0cf5b873ebc94b64fb1abcf2e14fd38dcf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd40d0cf5b873ebc94b64fb1abcf2e14fd38dcf7", "html_url": "https://github.com/rust-lang/rust/commit/fd40d0cf5b873ebc94b64fb1abcf2e14fd38dcf7"}], "stats": {"total": 297, "additions": 283, "deletions": 14}, "files": [{"sha": "e03e24e606d818ae2708134120d498e580946818", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -482,6 +482,7 @@ mod test {\n     }\n \n     #[test]\n+    #[allow(experimental)]\n     fn clone_ref_updates_flag() {\n         let x = RefCell::new(0);\n         {"}, {"sha": "3f7bfefe27e578d911dde59fb45f9e2617403ceb", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -142,6 +142,10 @@ impl<'a> CFGBuilder<'a> {\n                     self.pats_all(post.iter().map(|p| *p), vec_exit);\n                 self.add_node(pat.id, [post_exit])\n             }\n+\n+            ast::PatMac(_) => {\n+                self.tcx.sess.span_bug(pat.span, \"unexpanded macro\");\n+            }\n         }\n     }\n "}, {"sha": "bbea1349c14749f167aec8d6ab423e33ecb9ad9c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -392,6 +392,7 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n           None => Some(vec(before.len() + after.len()))\n         }\n       }\n+      PatMac(_) => cx.tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n \n@@ -849,6 +850,10 @@ fn specialize(cx: &MatchCheckCtxt,\n                     _ => None\n                 }\n             }\n+            PatMac(_) => {\n+                cx.tcx.sess.span_err(pat_span, \"unexpanded macro\");\n+                None\n+            }\n         }\n     }\n }\n@@ -947,6 +952,7 @@ fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n       }\n       PatEnum(_,_) => {}\n       PatVec(..) => { this_pattern!() }\n+      PatMac(_) => cx.tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n "}, {"sha": "10357ef3d567754a45417897f65f1cbb02e092a5", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -1088,6 +1088,10 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n           ast::PatLit(_) | ast::PatRange(_, _) => {\n               /*always ok*/\n           }\n+\n+          ast::PatMac(_) => {\n+              self.tcx().sess.span_bug(pat.span, \"unexpanded macro\");\n+          }\n         }\n \n         Ok(())"}, {"sha": "8df57e7adfbe82b723d7fcd3b9db796bb1a4bf24", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -2282,6 +2282,9 @@ fn bind_irrefutable_pat<'a>(\n             bcx.sess().span_bug(pat.span,\n                                 \"vector patterns are never irrefutable!\");\n         }\n+        ast::PatMac(..) => {\n+            bcx.sess().span_bug(pat.span, \"unexpanded macro\");\n+        }\n         ast::PatWild | ast::PatWildMulti | ast::PatLit(_) | ast::PatRange(_, _) => ()\n     }\n     return bcx;"}, {"sha": "744200c80e8a45a1d9bd926f735337ea9bf1893a", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -2664,6 +2664,11 @@ fn populate_scope_map(cx: &CrateContext,\n                     walk_pattern(cx, sub_pat, scope_stack, scope_map);\n                 }\n             }\n+\n+            ast::PatMac(_) => {\n+                cx.sess().span_bug(pat.span, \"debuginfo::populate_scope_map() - \\\n+                                              Found unexpanded macro.\");\n+            }\n         }\n     }\n "}, {"sha": "e223f4001dfd6dff6834f86fd01dfcb5de18846c", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -722,6 +722,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n         }\n         fcx.write_ty(pat.id, expected);\n       }\n+\n+      ast::PatMac(_) => tcx.sess.bug(\"unexpanded macro\"),\n     }\n }\n "}, {"sha": "48e390b35fb103dc81934d7d805c093a14de754a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -1731,7 +1731,12 @@ fn name_from_pat(p: &ast::Pat) -> String {\n         PatRange(..) => fail!(\"tried to get argument name from PatRange, \\\n                               which is not allowed in function arguments\"),\n         PatVec(..) => fail!(\"tried to get argument name from pat_vec, \\\n-                             which is not allowed in function arguments\")\n+                             which is not allowed in function arguments\"),\n+        PatMac(..) => {\n+            warn!(\"can't document the name of a function argument \\\n+                   produced by a pattern macro\");\n+            \"(argument produced by macro)\".to_string()\n+        }\n     }\n }\n "}, {"sha": "edeff1229bd91ee1ad954d2751f62b8ee6bf588b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -353,7 +353,8 @@ pub enum Pat_ {\n     PatRange(@Expr, @Expr),\n     // [a, b, ..i, y, z] is represented as\n     // PatVec(~[a, b], Some(i), ~[y, z])\n-    PatVec(Vec<@Pat> , Option<@Pat>, Vec<@Pat> )\n+    PatVec(Vec<@Pat> , Option<@Pat>, Vec<@Pat> ),\n+    PatMac(Mac),\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash, Show)]"}, {"sha": "5b61cd45483ac2d2eac0a35654c6ad6299a31d4e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -665,6 +665,7 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n                 slice.iter().advance(|&p| walk_pat(p, |p| it(p))) &&\n                 after.iter().advance(|&p| walk_pat(p, |p| it(p)))\n         }\n+        PatMac(_) => fail!(\"attempted to analyze unexpanded pattern\"),\n         PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n         PatEnum(_, _) => {\n             true"}, {"sha": "e4c7fbb1debdda208b878b4c5f356c1f778dcc21", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -114,6 +114,10 @@ pub trait MacResult {\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         None\n     }\n+    /// Create a pattern.\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        None\n+    }\n \n     /// Create a statement.\n     ///\n@@ -139,6 +143,20 @@ impl MacResult for MacExpr {\n         Some(self.e)\n     }\n }\n+/// A convenience type for macros that return a single pattern.\n+pub struct MacPat {\n+    p: @ast::Pat\n+}\n+impl MacPat {\n+    pub fn new(p: @ast::Pat) -> Box<MacResult> {\n+        box MacPat { p: p } as Box<MacResult>\n+    }\n+}\n+impl MacResult for MacPat {\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        Some(self.p)\n+    }\n+}\n /// A convenience type for macros that return a single item.\n pub struct MacItem {\n     i: @ast::Item\n@@ -194,12 +212,24 @@ impl DummyResult {\n             span: sp,\n         }\n     }\n+\n+    /// A plain dummy pattern.\n+    pub fn raw_pat(sp: Span) -> @ast::Pat {\n+        @ast::Pat {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::PatWild,\n+            span: sp,\n+        }\n+    }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(&self) -> Option<@ast::Expr> {\n         Some(DummyResult::raw_expr(self.span))\n     }\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        Some(DummyResult::raw_pat(self.span))\n+    }\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         if self.expr_only {\n             None"}, {"sha": "03001acc5d04d47e6914d640bce40c29691f67f0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{P, Block, Crate, DeclLocal, ExprMac};\n+use ast::{P, Block, Crate, DeclLocal, ExprMac, PatMac};\n use ast::{Local, Ident, MacInvocTT};\n use ast::{ItemMac, Mrk, Stmt, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::TokenTree;\n@@ -92,8 +92,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                 None => {\n                                     fld.cx.span_err(\n                                         pth.span,\n-                                        format!(\"non-expr macro in expr pos: \\\n-                                                 {}\",\n+                                        format!(\"non-expression macro in expression position: {}\",\n                                                 extnamestr.get().as_slice()\n                                         ).as_slice());\n                                     return DummyResult::raw_expr(e.span);\n@@ -487,7 +486,7 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n                 }\n                 None => {\n                     fld.cx.span_err(pth.span,\n-                                    format!(\"expr macro in item position: {}\",\n+                                    format!(\"non-item macro in item position: {}\",\n                                             extnamestr.get()).as_slice());\n                     return SmallVector::zero();\n                 }\n@@ -639,7 +638,7 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n                 Some(stmt) => stmt,\n                 None => {\n                     fld.cx.span_err(pth.span,\n-                                    format!(\"non-stmt macro in stmt pos: {}\",\n+                                    format!(\"non-statement macro in statement position: {}\",\n                                             extnamestr).as_slice());\n                     return SmallVector::zero();\n                 }\n@@ -842,6 +841,83 @@ pub fn expand_block_elts(b: &Block, fld: &mut MacroExpander) -> P<Block> {\n     })\n }\n \n+pub fn expand_pat(p: @ast::Pat, fld: &mut MacroExpander) -> @ast::Pat {\n+    let (pth, tts) = match p.node {\n+        PatMac(ref mac) => {\n+            match mac.node {\n+                MacInvocTT(ref pth, ref tts, _) => {\n+                    (pth, (*tts).clone())\n+                }\n+            }\n+        }\n+        _ => return noop_fold_pat(p, fld),\n+    };\n+    if pth.segments.len() > 1u {\n+        fld.cx.span_err(pth.span, \"expected macro name without module separators\");\n+        return DummyResult::raw_pat(p.span);\n+    }\n+    let extname = pth.segments.get(0).identifier;\n+    let extnamestr = token::get_ident(extname);\n+    let marked_after = match fld.extsbox.find(&extname.name) {\n+        None => {\n+            fld.cx.span_err(pth.span,\n+                            format!(\"macro undefined: '{}!'\",\n+                                    extnamestr).as_slice());\n+            // let compilation continue\n+            return DummyResult::raw_pat(p.span);\n+        }\n+\n+        Some(&NormalTT(ref expander, span)) => {\n+            fld.cx.bt_push(ExpnInfo {\n+                call_site: p.span,\n+                callee: NameAndSpan {\n+                    name: extnamestr.get().to_string(),\n+                    format: MacroBang,\n+                    span: span\n+                }\n+            });\n+\n+            let fm = fresh_mark();\n+            let marked_before = mark_tts(tts.as_slice(), fm);\n+            let mac_span = original_span(fld.cx);\n+            let expanded = match expander.expand(fld.cx,\n+                                   mac_span.call_site,\n+                                   marked_before.as_slice()).make_pat() {\n+                Some(e) => e,\n+                None => {\n+                    fld.cx.span_err(\n+                        pth.span,\n+                        format!(\n+                            \"non-pattern macro in pattern position: {}\",\n+                            extnamestr.get()\n+                        ).as_slice()\n+                    );\n+                    return DummyResult::raw_pat(p.span);\n+                }\n+            };\n+\n+            // mark after:\n+            mark_pat(expanded,fm)\n+        }\n+        _ => {\n+            fld.cx.span_err(p.span,\n+                            format!(\"{}! is not legal in pattern position\",\n+                                    extnamestr.get()).as_slice());\n+            return DummyResult::raw_pat(p.span);\n+        }\n+    };\n+\n+    let fully_expanded =\n+        fld.fold_pat(marked_after).node.clone();\n+    fld.cx.bt_pop();\n+\n+    @ast::Pat {\n+        id: ast::DUMMY_NODE_ID,\n+        node: fully_expanded,\n+        span: p.span,\n+    }\n+}\n+\n pub struct IdentRenamer<'a> {\n     renames: &'a mut RenameList,\n }\n@@ -885,6 +961,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n         expand_expr(expr, self)\n     }\n \n+    fn fold_pat(&mut self, pat: @ast::Pat) -> @ast::Pat {\n+        expand_pat(pat, self)\n+    }\n+\n     fn fold_item(&mut self, item: @ast::Item) -> SmallVector<@ast::Item> {\n         expand_item(item, self)\n     }\n@@ -974,6 +1054,11 @@ fn mark_expr(expr: @ast::Expr, m: Mrk) -> @ast::Expr {\n     new_mark_folder(m).fold_expr(expr)\n }\n \n+// apply a given mark to the given pattern. Used following the expansion of a macro.\n+fn mark_pat(pat: @ast::Pat, m: Mrk) -> @ast::Pat {\n+    new_mark_folder(m).fold_pat(pat)\n+}\n+\n // apply a given mark to the given stmt. Used following the expansion of a macro.\n fn mark_stmt(expr: &ast::Stmt, m: Mrk) -> @ast::Stmt {\n     new_mark_folder(m).fold_stmt(expr)"}, {"sha": "c69e5f9ba0f11ec8651669c64e57a9035cdaea13", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -63,6 +63,11 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         self.ensure_complete_parse(true);\n         Some(ret)\n     }\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        let ret = self.parser.borrow_mut().parse_pat();\n+        self.ensure_complete_parse(false);\n+        Some(ret)\n+    }\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         let mut ret = SmallVector::zero();\n         loop {"}, {"sha": "b66d1f7eae58258cd448c12aa399be6e35ce3c8d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -770,6 +770,7 @@ pub fn noop_fold_pat<T: Folder>(p: @Pat, folder: &mut T) -> @Pat {\n                     slice.map(|x| folder.fold_pat(x)),\n                     after.iter().map(|x| folder.fold_pat(*x)).collect())\n         }\n+        PatMac(ref mac) => PatMac(folder.fold_mac(mac)),\n     };\n \n     @Pat {"}, {"sha": "65ad83d4b4fb15948635ab7cf55fc8adc6605bc1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -2911,15 +2911,28 @@ impl<'a> Parser<'a> {\n                 pat = PatRange(start, end);\n             } else if is_plain_ident(&self.token) && !can_be_enum_or_struct {\n                 let name = self.parse_path(NoTypesAllowed).path;\n-                let sub;\n-                if self.eat(&token::AT) {\n-                    // parse foo @ pat\n-                    sub = Some(self.parse_pat());\n+                if self.eat(&token::NOT) {\n+                    // macro invocation\n+                    let ket = token::close_delimiter_for(&self.token)\n+                                    .unwrap_or_else(|| self.fatal(\"expected open delimiter\"));\n+                    self.bump();\n+\n+                    let tts = self.parse_seq_to_end(&ket,\n+                                                    seq_sep_none(),\n+                                                    |p| p.parse_token_tree());\n+\n+                    let mac = MacInvocTT(name, tts, EMPTY_CTXT);\n+                    pat = ast::PatMac(codemap::Spanned {node: mac, span: self.span});\n                 } else {\n-                    // or just foo\n-                    sub = None;\n+                    let sub = if self.eat(&token::AT) {\n+                        // parse foo @ pat\n+                        Some(self.parse_pat())\n+                    } else {\n+                        // or just foo\n+                        None\n+                    };\n+                    pat = PatIdent(BindByValue(MutImmutable), name, sub);\n                 }\n-                pat = PatIdent(BindByValue(MutImmutable), name, sub);\n             } else {\n                 // parse an enum pat\n                 let enum_path = self.parse_path(LifetimeAndTypesWithColons)"}, {"sha": "3127085ffedca2684a070b01cd97abe6eb3e7050", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -1757,6 +1757,7 @@ impl<'a> State<'a> {\n                                    |s, &p| s.print_pat(p)));\n                 try!(word(&mut self.s, \"]\"));\n             }\n+            ast::PatMac(ref m) => try!(self.print_mac(m)),\n         }\n         self.ann.post(self, NodePat(pat))\n     }"}, {"sha": "eb7aeb0e327a0e116386ecfb18c32c69de2df2b1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -457,6 +457,7 @@ pub fn walk_pat<E: Clone, V: Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E)\n                 visitor.visit_pat(*postpattern, env.clone())\n             }\n         }\n+        PatMac(ref macro) => visitor.visit_mac(macro, env),\n     }\n }\n "}, {"sha": "94386858d294999f797836160e5b452ef7d56277", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -22,8 +22,16 @@ macro_rules! ignored_expr {\n     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n }\n \n+macro_rules! ignored_pat {\n+    () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n+}\n+\n ignored_item!()\n \n fn main() {\n     ignored_expr!()\n+    match 1 {\n+        ignored_pat!() => (),\n+        _ => (),\n+    }\n }"}, {"sha": "0b6a14c0fc9316e204e37bf87123324e689c559f", "filename": "src/test/compile-fail/pattern-macro-hygeine.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygeine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygeine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-macro-hygeine.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! foo ( () => ( x ) )\n+\n+fn main() {\n+    let foo!() = 2;\n+    x + 1; //~ ERROR unresolved name `x`\n+}"}, {"sha": "6dc663c56205b5ab81008b89cc273c947573a5a1", "filename": "src/test/run-pass/macro-pat.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ce0a9703451da7ecac062fbc239fe4890a996/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat.rs?ref=dc5ce0a9703451da7ecac062fbc239fe4890a996", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! mypat(\n+    () => (\n+        Some('y')\n+    )\n+)\n+\n+macro_rules! char_x(\n+    () => (\n+        'x'\n+    )\n+)\n+\n+macro_rules! some(\n+    ($x:pat) => (\n+        Some($x)\n+    )\n+)\n+\n+macro_rules! indirect(\n+    () => (\n+        some!(char_x!())\n+    )\n+)\n+\n+macro_rules! ident_pat(\n+    ($x:ident) => (\n+        $x\n+    )\n+)\n+\n+fn f(c: Option<char>) -> uint {\n+    match c {\n+        Some('x') => 1,\n+        mypat!() => 2,\n+        _ => 3,\n+    }\n+}\n+\n+pub fn main() {\n+    assert_eq!(1, f(Some('x')));\n+    assert_eq!(2, f(Some('y')));\n+    assert_eq!(3, f(None));\n+\n+    assert_eq!(1, match Some('x') {\n+        Some(char_x!()) => 1,\n+        _ => 2,\n+    });\n+\n+    assert_eq!(1, match Some('x') {\n+        some!(char_x!()) => 1,\n+        _ => 2,\n+    });\n+\n+    assert_eq!(1, match Some('x') {\n+        indirect!() => 1,\n+        _ => 2,\n+    });\n+\n+    assert_eq!(3, {\n+        let ident_pat!(x) = 2;\n+        x+1\n+    });\n+}"}]}