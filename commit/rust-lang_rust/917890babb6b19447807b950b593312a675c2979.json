{"sha": "917890babb6b19447807b950b593312a675c2979", "node_id": "C_kwDOAAsO6NoAKDkxNzg5MGJhYmI2YjE5NDQ3ODA3Yjk1MGI1OTMzMTJhNjc1YzI5Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-08T16:33:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-08T16:33:48Z"}, "message": "Auto merge of #8201 - smoelius:master, r=camsteffen\n\nChange `unnecessary_to_owned` `into_iter` suggestions to `MaybeIncorrect`\n\nI am having a hard time finding a good solution for #8148, so I am wondering if is enough to just change the suggestion's applicability to `MaybeIncorrect`?\n\nI apologize, as I realize this is a bit of a cop out.\n\nchangelog: none", "tree": {"sha": "c00b1433e13b7f8b179c69065b20c10699871dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00b1433e13b7f8b179c69065b20c10699871dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917890babb6b19447807b950b593312a675c2979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917890babb6b19447807b950b593312a675c2979", "html_url": "https://github.com/rust-lang/rust/commit/917890babb6b19447807b950b593312a675c2979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917890babb6b19447807b950b593312a675c2979/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be7cf763693d71e5893d7ec406f859e316ed4b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/be7cf763693d71e5893d7ec406f859e316ed4b05", "html_url": "https://github.com/rust-lang/rust/commit/be7cf763693d71e5893d7ec406f859e316ed4b05"}, {"sha": "366234a515ab6538c83e5b58481b2c45abd72d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/366234a515ab6538c83e5b58481b2c45abd72d76", "html_url": "https://github.com/rust-lang/rust/commit/366234a515ab6538c83e5b58481b2c45abd72d76"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "3741a1cdc5eb0565eb5ea16f919c0b489271f213", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=917890babb6b19447807b950b593312a675c2979", "patch": "@@ -1895,6 +1895,11 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// The unnecessary calls result in useless allocations.\n     ///\n+    /// ### Known problems\n+    /// `unnecessary_to_owned` can falsely trigger if `IntoIterator::into_iter` is applied to an\n+    /// owned copy of a resource and the resource is later used mutably. See\n+    /// [#8148](https://github.com/rust-lang/rust-clippy/issues/8148).\n+    ///\n     /// ### Example\n     /// ```rust\n     /// let path = std::path::Path::new(\"x\");"}, {"sha": "4f589a6d3187eba7f3dfa50dac7c55d6c67f42ff", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=917890babb6b19447807b950b593312a675c2979", "patch": "@@ -18,7 +18,7 @@ pub fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol\n         if let Some(callee_def_id) = fn_def_id(cx, parent);\n         if is_into_iter(cx, callee_def_id);\n         then {\n-            check_for_loop_iter(cx, parent, method_name, receiver)\n+            check_for_loop_iter(cx, parent, method_name, receiver, false)\n         } else {\n             false\n         }\n@@ -34,6 +34,7 @@ pub fn check_for_loop_iter(\n     expr: &'tcx Expr<'tcx>,\n     method_name: Symbol,\n     receiver: &'tcx Expr<'tcx>,\n+    cloned_before_iter: bool,\n ) -> bool {\n     if_chain! {\n         if let Some(grandparent) = get_parent_expr(cx, expr).and_then(|parent| get_parent_expr(cx, parent));\n@@ -70,12 +71,22 @@ pub fn check_for_loop_iter(\n                 expr.span,\n                 &format!(\"unnecessary use of `{}`\", method_name),\n                 |diag| {\n-                    diag.span_suggestion(expr.span, \"use\", snippet, Applicability::MachineApplicable);\n+                    // If `check_into_iter_call_arg` called `check_for_loop_iter` because a call to\n+                    // a `to_owned`-like function was removed, then the next suggestion may be\n+                    // incorrect. This is because the iterator that results from the call's removal\n+                    // could hold a reference to a resource that is used mutably. See\n+                    // https://github.com/rust-lang/rust-clippy/issues/8148.\n+                    let applicability = if cloned_before_iter {\n+                        Applicability::MaybeIncorrect\n+                    } else {\n+                        Applicability::MachineApplicable\n+                    };\n+                    diag.span_suggestion(expr.span, \"use\", snippet, applicability);\n                     for addr_of_expr in addr_of_exprs {\n                         match addr_of_expr.kind {\n                             ExprKind::AddrOf(_, _, referent) => {\n                                 let span = addr_of_expr.span.with_hi(referent.span.lo());\n-                                diag.span_suggestion(span, \"remove this `&`\", String::new(), Applicability::MachineApplicable);\n+                                diag.span_suggestion(span, \"remove this `&`\", String::new(), applicability);\n                             }\n                             _ => unreachable!(),\n                         }"}, {"sha": "7e17f163b2126f5fad0099df445c89782c8c1beb", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917890babb6b19447807b950b593312a675c2979/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=917890babb6b19447807b950b593312a675c2979", "patch": "@@ -187,22 +187,31 @@ fn check_into_iter_call_arg(\n         if let Some(item_ty) = get_iterator_item_ty(cx, parent_ty);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n-            if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver) {\n+            if unnecessary_iter_cloned::check_for_loop_iter(\n+                cx,\n+                parent,\n+                method_name,\n+                receiver,\n+                true,\n+            ) {\n                 return true;\n             }\n             let cloned_or_copied = if is_copy(cx, item_ty) {\n                 \"copied\"\n             } else {\n                 \"cloned\"\n             };\n+            // The next suggestion may be incorrect because the removal of the `to_owned`-like\n+            // function could cause the iterator to hold a reference to a resource that is used\n+            // mutably. See https://github.com/rust-lang/rust-clippy/issues/8148.\n             span_lint_and_sugg(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 parent.span,\n                 &format!(\"unnecessary use of `{}`\", method_name),\n                 \"use\",\n                 format!(\"{}.iter().{}()\", receiver_snippet, cloned_or_copied),\n-                Applicability::MachineApplicable,\n+                Applicability::MaybeIncorrect,\n             );\n             return true;\n         }"}]}