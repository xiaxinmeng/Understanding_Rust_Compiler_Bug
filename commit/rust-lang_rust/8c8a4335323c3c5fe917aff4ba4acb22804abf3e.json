{"sha": "8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOGE0MzM1MzIzYzNjNWZlOTE3YWZmNGJhNGFjYjIyODA0YWJmM2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "public.oliver.schneider@kit.edu", "date": "2018-01-29T14:10:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:14Z"}, "message": "Merge const linting pass into const prop", "tree": {"sha": "ee8c0af9e7e619a9b7582fc3dcc5a08768832b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8c0af9e7e619a9b7582fc3dcc5a08768832b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53YACgkQpp+NIls6\n19n39xAAhbUpcwwK74jV8phb49mWix+mwaHAcb6xWAgxtqvb8f8siFSAyzNvS0Ea\nbjlgkxBlzb64cm0OUdoDx2lp6Sya9xZY4uYT/Dol+yVlYfysbgI+36+BdhICFf3D\nilr4luYtTacwICd6NSHEVIgSkSs1KaD5dEn7f+ErYCFomERucI29uKE8LUl2v/Lr\n2QfgCU0WI/mHaytk63n9CRrZHaYd4axV5oYPQU0BR5pZ9RsSnfrz2vsHfD+/uKrk\nC6zAbivjit8Cbr4KcMO1UykjGMXs++cH86YqnbAgSTxPuddSVGOXvta4tZW3zGDN\n+loTk9xOXjB2CC04yogyZvlW5xINgbzpzb6sj4JczEP9J2osNZy9m/bRwTqX7Ok3\nWHk/KbIvFhwrI9teAPWoiposyE4R2wWAuOkeLWj7z6NVnShoAuTMpzGSbfQekqvl\nTU/PIuYF/S+c2iUSvOJLqRuE6e8S1Xl3zgTo475VGy6tp9PVl+freQKsduFnrjY/\nWeL+3XpnvQSXJq4jznCoOw2l4t4qYnPuHepPQ1fELvXeXTZ6NuG3kXEPQ5K/5j09\nFUD9sR0JN+Rp/1QqQZ3UXNo0ZkSk6Wso0LZi/bFVyKXcuM/EbmGvoXYGBoFxp38D\nuF0+xUJlt6H8Me4nqAS0upVK3mY6AAba40CTyKICP7pz8NmJvek=\n=gdpm\n-----END PGP SIGNATURE-----", "payload": "tree ee8c0af9e7e619a9b7582fc3dcc5a08768832b75\nparent 0f72f0009a309059952feb973a8e066845988f2a\nauthor Oliver Schneider <public.oliver.schneider@kit.edu> 1517235026 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494454 +0100\n\nMerge const linting pass into const prop\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "html_url": "https://github.com/rust-lang/rust/commit/8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f72f0009a309059952feb973a8e066845988f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f72f0009a309059952feb973a8e066845988f2a", "html_url": "https://github.com/rust-lang/rust/commit/0f72f0009a309059952feb973a8e066845988f2a"}], "stats": {"total": 229, "additions": 23, "deletions": 206}, "files": [{"sha": "65649c82da6ffecc59ed278f3a0687a523cf4cce", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "patch": "@@ -1087,13 +1087,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n             stability::check_unused_or_stable_features(tcx)\n         });\n \n-\n-        time(time_passes,\n-             \"MIR linting\",\n-             || for def_id in tcx.body_owners() {\n-                 mir::check_const_err::check(tcx, def_id)\n-             });\n-\n         time(time_passes, \"lint checking\", || lint::check_crate(tcx));\n \n         return Ok(f(tcx, analysis, rx, tcx.sess.compile_status()));"}, {"sha": "9827dd58cd640417974d0c295ac48b0d3ac9493e", "filename": "src/librustc_mir/check_const_err.rs", "status": "removed", "additions": 0, "deletions": 197, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/0f72f0009a309059952feb973a8e066845988f2a/src%2Flibrustc_mir%2Fcheck_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f72f0009a309059952feb973a8e066845988f2a/src%2Flibrustc_mir%2Fcheck_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fcheck_const_err.rs?ref=0f72f0009a309059952feb973a8e066845988f2a", "patch": "@@ -1,197 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Lints statically known runtime failures\n-\n-use rustc::mir::*;\n-use rustc::hir;\n-use rustc::hir::map::Node;\n-use rustc::mir::visit::Visitor;\n-use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr, ErrKind};\n-use rustc::hir::def::Def;\n-use rustc::traits;\n-use interpret::eval_body_with_mir;\n-use rustc::ty::{TyCtxt, ParamEnv};\n-use rustc::ty::Instance;\n-use rustc::ty::layout::LayoutOf;\n-use rustc::hir::def_id::DefId;\n-use rustc::ty::subst::Substs;\n-\n-fn is_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n-    if let Some(node) = tcx.hir.get_if_local(def_id) {\n-        match node {\n-            Node::NodeItem(&hir::Item {\n-                node: hir::ItemConst(..), ..\n-            }) => true,\n-            _ => false\n-        }\n-    } else {\n-        match tcx.describe_def(def_id) {\n-            Some(Def::Const(_)) => true,\n-            _ => false\n-        }\n-    }\n-}\n-\n-pub fn check<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n-    let mir = &tcx.optimized_mir(def_id);\n-    let substs = Substs::identity_for_item(tcx, def_id);\n-    let instance = Instance::new(def_id, substs);\n-    let param_env = tcx.param_env(def_id);\n-\n-    if is_const(tcx, def_id) {\n-        let cid = GlobalId {\n-            instance,\n-            promoted: None,\n-        };\n-        eval_body_with_mir(tcx, cid, mir, param_env);\n-    }\n-\n-    ConstErrVisitor {\n-        tcx,\n-        mir,\n-    }.visit_mir(mir);\n-    let outer_def_id = if tcx.is_closure(def_id) {\n-        tcx.closure_base_def_id(def_id)\n-    } else {\n-        def_id\n-    };\n-    let generics = tcx.generics_of(outer_def_id);\n-    // FIXME: miri should be able to eval stuff that doesn't need info\n-    // from the generics\n-    if generics.parent_types as usize + generics.types.len() > 0 {\n-        return;\n-    }\n-    for i in 0.. mir.promoted.len() {\n-        use rustc_data_structures::indexed_vec::Idx;\n-        let cid = GlobalId {\n-            instance,\n-            promoted: Some(Promoted::new(i)),\n-        };\n-        eval_body_with_mir(tcx, cid, mir, param_env);\n-    }\n-}\n-\n-struct ConstErrVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n-}\n-\n-impl<'a, 'tcx> ConstErrVisitor<'a, 'tcx> {\n-    fn eval_op(&self, op: &Operand<'tcx>) -> Option<u128> {\n-        let op = match *op {\n-            Operand::Constant(ref c) => c,\n-            _ => return None,\n-        };\n-        match op.literal {\n-            Literal::Value { value } => match value.val {\n-                ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))) => Some(b),\n-                _ => return None,\n-            },\n-            _ => None,\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for ConstErrVisitor<'a, 'tcx> {\n-    fn visit_terminator(&mut self,\n-                        block: BasicBlock,\n-                        terminator: &Terminator<'tcx>,\n-                        location: Location) {\n-        self.super_terminator(block, terminator, location);\n-        match terminator.kind {\n-            TerminatorKind::Assert { ref cond, expected, ref msg, .. } => {\n-                let cond = match self.eval_op(cond) {\n-                    Some(val) => val,\n-                    None => return,\n-                };\n-                if (cond == 1) == expected {\n-                    return;\n-                }\n-                assert!(cond <= 1);\n-                // If we know we always panic, and the error message\n-                // is also constant, then we can produce a warning.\n-\n-                let kind = match *msg {\n-                    AssertMessage::BoundsCheck { ref len, ref index } => {\n-                        let len = match self.eval_op(len) {\n-                            Some(val) => val,\n-                            None => return,\n-                        };\n-                        let index = match self.eval_op(index) {\n-                            Some(val) => val,\n-                            None => return,\n-                        };\n-                        ErrKind::IndexOutOfBounds {\n-                            len: len as u64,\n-                            index: index as u64\n-                        }\n-                    }\n-                    AssertMessage::Math(ref err) => ErrKind::Math(err.clone()),\n-                    AssertMessage::GeneratorResumedAfterReturn |\n-                    // FIXME(oli-obk): can we report a const_err warning here?\n-                    AssertMessage::GeneratorResumedAfterPanic => return,\n-                };\n-                let span = terminator.source_info.span;\n-                let msg = ConstEvalErr{ span, kind };\n-                let scope_info = match self.mir.visibility_scope_info {\n-                    ClearCrossCrate::Set(ref data) => data,\n-                    ClearCrossCrate::Clear => return,\n-                };\n-                let node_id = scope_info[terminator.source_info.scope].lint_root;\n-                self.tcx.lint_node(::rustc::lint::builtin::CONST_ERR,\n-                            node_id,\n-                            msg.span,\n-                            &msg.description().into_oneline().into_owned());\n-            },\n-            _ => {},\n-        }\n-    }\n-    fn visit_rvalue(&mut self,\n-                    rvalue: &Rvalue<'tcx>,\n-                    location: Location) {\n-        self.super_rvalue(rvalue, location);\n-        use rustc::mir::BinOp;\n-        match *rvalue {\n-            Rvalue::BinaryOp(BinOp::Shr, ref lop, ref rop) |\n-            Rvalue::BinaryOp(BinOp::Shl, ref lop, ref rop) => {\n-                let val = match self.eval_op(rop) {\n-                    Some(val) => val,\n-                    None => return,\n-                };\n-                let ty = lop.ty(self.mir, self.tcx);\n-                let param_env = ParamEnv::empty(traits::Reveal::All);\n-                let bits = (self.tcx, param_env).layout_of(ty).unwrap().size.bits();\n-                if val >= bits as u128 {\n-                    let data = &self.mir[location.block];\n-                    let stmt_idx = location.statement_index;\n-                    let source_info = if stmt_idx < data.statements.len() {\n-                        data.statements[stmt_idx].source_info\n-                    } else {\n-                        data.terminator().source_info\n-                    };\n-                    let span = source_info.span;\n-                    let scope_info = match self.mir.visibility_scope_info {\n-                        ClearCrossCrate::Set(ref data) => data,\n-                        ClearCrossCrate::Clear => return,\n-                    };\n-                    let node_id = scope_info[source_info.scope].lint_root;\n-                    self.tcx.lint_node(\n-                        ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                        node_id,\n-                        span,\n-                        \"bitshift exceeds the type's number of bits\");\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-}"}, {"sha": "c31e95fd826c686026b4ab9d83aa3727addebfab", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "patch": "@@ -71,7 +71,6 @@ pub mod transform;\n pub mod util;\n pub mod interpret;\n pub mod monomorphize;\n-pub mod check_const_err;\n \n pub use hair::pattern::check_crate as matchck_crate;\n use rustc::ty::maps::Providers;"}, {"sha": "35fce184bebe8e610fe702cda8bda91df4b422a7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8a4335323c3c5fe917aff4ba4acb22804abf3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8c8a4335323c3c5fe917aff4ba4acb22804abf3e", "patch": "@@ -212,8 +212,30 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                 let instance = Instance::new(self.source.def_id, substs);\n                 let ecx = mk_borrowck_eval_cx(self.tcx, instance, self.mir, span).unwrap();\n \n-                let l = ecx.value_to_primval(ValTy { value: left.0, ty: left.1 }).ok()?;\n                 let r = ecx.value_to_primval(ValTy { value: right.0, ty: right.1 }).ok()?;\n+                let param_env = ParamEnv::empty(traits::Reveal::All);\n+                let bits = (self.tcx, param_env).layout_of(left.ty).unwrap().size.bits();\n+                if r >= bits as u128 {\n+                    let data = &self.mir[location.block];\n+                    let stmt_idx = location.statement_index;\n+                    let source_info = if stmt_idx < data.statements.len() {\n+                        data.statements[stmt_idx].source_info\n+                    } else {\n+                        data.terminator().source_info\n+                    };\n+                    let span = source_info.span;\n+                    let scope_info = match self.mir.visibility_scope_info {\n+                        ClearCrossCrate::Set(ref data) => data,\n+                        ClearCrossCrate::Clear => return,\n+                    };\n+                    let node_id = scope_info[source_info.scope].lint_root;\n+                    self.tcx.lint_node(\n+                        ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n+                        node_id,\n+                        span,\n+                        \"bitshift exceeds the type's number of bits\");\n+                }\n+                let l = ecx.value_to_primval(ValTy { value: left.0, ty: left.1 }).ok()?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n                 match ecx.binary_op(op, l, left.1, r, right.1) {\n                     Ok((val, overflow)) => {"}]}