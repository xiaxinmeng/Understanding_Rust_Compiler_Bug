{"sha": "3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "node_id": "C_kwDOAAsO6NoAKDNjYzFmNWVkNWIwNGVhNjUxMmI3MTBlMjMxYzE0N2I0NTQ2ZjhlNTI", "commit": {"author": {"name": "Yacin Tmimi", "email": "yacintmimi@gmail.com", "date": "2022-04-29T03:08:22Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-08T17:55:43Z"}, "message": "Add tests for issue 4573\n\nIt's unclear which PR resolved this issue, however the behavior of\nadding inline comments to the next line can't be reproduced.\n\nThese test cases should serve to prevent a regression.", "tree": {"sha": "b09c5fc7871a80ef0f587424a5b6fdb0d408535e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09c5fc7871a80ef0f587424a5b6fdb0d408535e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "html_url": "https://github.com/rust-lang/rust/commit/3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc1f5ed5b04ea6512b710e231c147b4546f8e52/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c03e1842f637e34b23297fa3a0aeeb0fcdca1c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03e1842f637e34b23297fa3a0aeeb0fcdca1c47", "html_url": "https://github.com/rust-lang/rust/commit/c03e1842f637e34b23297fa3a0aeeb0fcdca1c47"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "82cfe4f535981cde155774e16cac9bb0588094cc", "filename": "tests/target/issue_4573.rs", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/3cc1f5ed5b04ea6512b710e231c147b4546f8e52/tests%2Ftarget%2Fissue_4573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc1f5ed5b04ea6512b710e231c147b4546f8e52/tests%2Ftarget%2Fissue_4573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4573.rs?ref=3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "patch": "@@ -0,0 +1,245 @@\n+// rustmft-version:Two\n+// rustmft-use_small_heuristics:Max\n+// rustmft-merge_derives:false\n+// These are the same rustfmt configuration options that are used\n+// in the comiler as of ce39461ca75a and 8eb7c58dbb7b\n+// These are commits in https://github.com/rust-lang/rust\n+\n+#![no_std] // inner attribute comment\n+// inner attribute comment\n+#![no_implicit_prelude]\n+// post inner attribute comment\n+\n+#[cfg(not(miri))] // inline comment\n+#[no_link]\n+extern crate foo;\n+\n+// before attributes\n+#[no_link]\n+// between attributes\n+#[cfg(not(miri))] // inline comment\n+extern crate foo as bar;\n+\n+#[cfg(not(miri))] // inline comment\n+// between attribute and use\n+use foo;\n+\n+#[cfg(not(miri))] // inline comment\n+use foo;\n+\n+/* pre attributre */\n+#[cfg(not(miri))]\n+use foo::bar;\n+\n+#[cfg(not(miri))] // inline comment\n+use foo::bar as FooBar;\n+\n+#[cfg(not(miri))] // inline comment\n+#[allow(unused)]\n+#[deprecated(\n+    since = \"5.2\",  // inline inner comment\n+    note = \"FOO was rarely used. Users should instead use BAR\"\n+)]\n+#[allow(unused)]\n+static FOO: i32 = 42;\n+\n+#[used]\n+#[export_name = \"FOO\"]\n+#[cfg(not(miri))] // inline comment\n+#[deprecated(\n+    since = \"5.2\",\n+    note = \"FOO was rarely used. Users should instead use BAR\"\n+)]\n+static FOO: i32 = 42;\n+\n+#[cfg(not(miri))] // inline comment\n+#[export_name = \"FOO\"]\n+static BAR: &'static str = \"bar\";\n+\n+#[cfg(not(miri))] // inline comment\n+const BAR: i32 = 42;\n+\n+#[cfg(not(miri))] // inline comment\n+#[no_mangle]\n+#[link_section = \".example_section\"]\n+fn foo(bar: usize) {\n+    #[cfg(not(miri))] // inline comment\n+    println!(\"hello world!\");\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+mod foo {}\n+\n+#[cfg(not(miri))] // inline comment\n+extern \"C\" {\n+    fn my_c_function(x: i32) -> bool;\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+#[link(name = \"CoreFoundation\", kind = \"framework\")]\n+extern \"C\" {\n+\n+    #[link_name = \"actual_symbol_name\"] // inline comment\n+    // between attribute and function\n+    fn my_c_function(x: i32) -> bool;\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+pub extern \"C\" fn callable_from_c(x: i32) -> bool {\n+    x % 3 == 0\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+/* between attribute block comment */\n+#[no_mangle]\n+/* between attribute and type */\n+type Foo = Bar<u8>;\n+\n+#[no_mangle]\n+#[cfg(not(miri))] // inline comment\n+#[non_exhaustive] // inline comment\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+#[no_mangle]\n+#[cfg(not(miri))] /* inline comment */\n+struct Foo<A> {\n+    x: A,\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+union Foo<A, B> {\n+    x: A,\n+    y: B,\n+}\n+\n+#[cfg(not(miri))] // inline comment\n+trait Foo {}\n+\n+#[cfg(not(miri))] // inline comment\n+trait Foo = Bar + Quux;\n+\n+#[cfg(not(miri))] // inline comment\n+impl Foo {}\n+\n+#[cfg(not(miri))] // inline comment\n+macro_rules! bar {\n+    (3) => {};\n+}\n+\n+mod nested {\n+    #[cfg(not(miri))] // inline comment\n+    // between attribute and use\n+    use foo;\n+\n+    #[cfg(not(miri))] // inline comment\n+    use foo;\n+\n+    #[cfg(not(miri))] // inline comment\n+    use foo::bar;\n+\n+    #[cfg(not(miri))] // inline comment\n+    use foo::bar as FooBar;\n+\n+    #[cfg(not(miri))] // inline comment\n+    static FOO: i32 = 42;\n+\n+    #[cfg(not(miri))] // inline comment\n+    static FOO: i32 = 42;\n+\n+    #[cfg(not(miri))] // inline comment\n+    static FOO: &'static str = \"bar\";\n+\n+    #[cfg(not(miri))] // inline comment\n+    const FOO: i32 = 42;\n+\n+    #[cfg(not(miri))] // inline comment\n+    fn foo(bar: usize) {\n+        #[cfg(not(miri))] // inline comment\n+        println!(\"hello world!\");\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    mod foo {}\n+\n+    #[cfg(not(miri))] // inline comment\n+    mod foo {}\n+\n+    #[cfg(not(miri))] // inline comment\n+    extern \"C\" {\n+        fn my_c_function(x: i32) -> bool;\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    #[link(name = \"CoreFoundation\", kind = \"framework\")]\n+    extern \"C\" {\n+\n+        #[link_name = \"actual_symbol_name\"] // inline comment\n+        // between attribute and function\n+        fn my_c_function(x: i32) -> bool;\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    pub extern \"C\" fn callable_from_c(x: i32) -> bool {\n+        x % 3 == 0\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    type Foo = Bar<u8>;\n+\n+    #[cfg(not(miri))] // inline comment\n+    #[non_exhaustive] // inline comment\n+    enum Foo {\n+        // comment\n+        #[attribute_1]\n+        #[attribute_2] // comment\n+        // comment!\n+        Bar,\n+        /* comment */\n+        #[attribute_1]\n+        #[attribute_2] /* comment */\n+        #[attribute_3]\n+        #[attribute_4]\n+        /* comment! */\n+        Baz,\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    struct Foo<A> {\n+        x: A,\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    union Foo<A, B> {\n+        #[attribute_1]\n+        #[attribute_2] /* comment */\n+        #[attribute_3]\n+        #[attribute_4] // comment\n+        x: A,\n+        y: B,\n+    }\n+\n+    #[cfg(not(miri))] // inline comment\n+    #[allow(missing_docs)]\n+    trait Foo {\n+        #[must_use] /* comment\n+                     * that wrappes to\n+                     * the next line */\n+        fn bar() {}\n+    }\n+\n+    #[allow(missing_docs)]\n+    #[cfg(not(miri))] // inline comment\n+    trait Foo = Bar + Quux;\n+\n+    #[allow(missing_docs)]\n+    #[cfg(not(miri))] // inline comment\n+    impl Foo {}\n+\n+    #[cfg(not(miri))] // inline comment\n+    macro_rules! bar {\n+        (3) => {};\n+    }\n+}"}]}