{"sha": "a576514e13d5608ab48847958c2b97ab5ab01d85", "node_id": "C_kwDOAAsO6NoAKGE1NzY1MTRlMTNkNTYwOGFiNDg4NDc5NThjMmI5N2FiNWFiMDFkODU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T10:16:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T14:52:54Z"}, "message": "Introduce `-Zterminal-urls` to use OSC8 for error codes\n\nTerminals supporting the OSC8 Hyperlink Extension can support inline\nanchors where the text is user defineable but clicking on it opens a\nbrowser to a specified URLs, just like `<a href=\"URL\">` does in HTML.\n\nhttps://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda", "tree": {"sha": "4a7905999c7474e22fa4891d2522cc53690f12de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7905999c7474e22fa4891d2522cc53690f12de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a576514e13d5608ab48847958c2b97ab5ab01d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a576514e13d5608ab48847958c2b97ab5ab01d85", "html_url": "https://github.com/rust-lang/rust/commit/a576514e13d5608ab48847958c2b97ab5ab01d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a576514e13d5608ab48847958c2b97ab5ab01d85/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00e24d76a9ac03b146d3bf89e2161b2466c6551", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e24d76a9ac03b146d3bf89e2161b2466c6551", "html_url": "https://github.com/rust-lang/rust/commit/a00e24d76a9ac03b146d3bf89e2161b2466c6551"}], "stats": {"total": 108, "additions": 99, "deletions": 9}, "files": [{"sha": "290652f45155c512801732d9ee34c6754c695e60", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -23,7 +23,7 @@ use rustc_codegen_ssa::{traits::CodegenBackend, CodegenErrors, CodegenResults};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n-use rustc_errors::{ErrorGuaranteed, PResult};\n+use rustc_errors::{ErrorGuaranteed, PResult, TerminalUrl};\n use rustc_feature::find_gated_cfg;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n@@ -1192,6 +1192,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         None,\n         false,\n         false,\n+        TerminalUrl::No,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "ac8f40987e86422cc8d50904f33d936e7061aed6", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -18,7 +18,7 @@ use crate::translation::{to_fluent_args, Translate};\n use crate::{\n     diagnostic::DiagnosticLocation, CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage,\n     FluentBundle, Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic,\n-    SubstitutionHighlight, SuggestionStyle,\n+    SubstitutionHighlight, SuggestionStyle, TerminalUrl,\n };\n use rustc_lint_defs::pluralize;\n \n@@ -66,6 +66,7 @@ impl HumanReadableErrorType {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n@@ -80,6 +81,7 @@ impl HumanReadableErrorType {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         )\n     }\n }\n@@ -652,6 +654,7 @@ pub struct EmitterWriter {\n \n     macro_backtrace: bool,\n     track_diagnostics: bool,\n+    terminal_url: TerminalUrl,\n }\n \n #[derive(Debug)]\n@@ -672,6 +675,7 @@ impl EmitterWriter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -685,6 +689,7 @@ impl EmitterWriter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -699,6 +704,7 @@ impl EmitterWriter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -711,6 +717,7 @@ impl EmitterWriter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -1378,7 +1385,13 @@ impl EmitterWriter {\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n-                buffer.append(0, code, Style::Level(*level));\n+                let code = if let TerminalUrl::Yes = self.terminal_url {\n+                    let path = \"https://doc.rust-lang.org/error_codes\";\n+                    format!(\"\\x1b]8;;{path}/{code}.html\\x07{code}\\x1b]8;;\\x07\")\n+                } else {\n+                    code.clone()\n+                };\n+                buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n                 label_width += 2 + code.len();\n             }"}, {"sha": "e475fc725c33b01014928a136dd2e91b9b588d5c", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -17,6 +17,7 @@ use crate::translation::{to_fluent_args, Translate};\n use crate::DiagnosticId;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n+    TerminalUrl,\n };\n use rustc_lint_defs::Applicability;\n \n@@ -47,6 +48,7 @@ pub struct JsonEmitter {\n     diagnostic_width: Option<usize>,\n     macro_backtrace: bool,\n     track_diagnostics: bool,\n+    terminal_url: TerminalUrl,\n }\n \n impl JsonEmitter {\n@@ -60,6 +62,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::BufWriter::new(io::stderr())),\n@@ -73,6 +76,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -84,6 +88,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n@@ -96,6 +101,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         )\n     }\n \n@@ -110,6 +116,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -123,6 +130,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -360,6 +368,7 @@ impl Diagnostic {\n                 je.diagnostic_width,\n                 je.macro_backtrace,\n                 je.track_diagnostics,\n+                je.terminal_url,\n             )\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);"}, {"sha": "f161532d3b7e2ac89d37993dc580ed4ed20806f4", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -4,7 +4,7 @@ use crate::json::JsonEmitter;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{ColorConfig, HumanReadableErrorType};\n-use crate::Handler;\n+use crate::{Handler, TerminalUrl};\n use rustc_span::{BytePos, Span};\n \n use std::str;\n@@ -60,6 +60,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         );\n \n         let span = Span::with_root_ctxt(BytePos(span.0), BytePos(span.1));"}, {"sha": "83b733d4c067736691fe5d5901a3c659644eacbe", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -573,6 +573,7 @@ impl Handler {\n             None,\n             flags.macro_backtrace,\n             flags.track_diagnostics,\n+            TerminalUrl::No,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }\n@@ -1838,6 +1839,13 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     );\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TerminalUrl {\n+    No,\n+    Yes,\n+    Auto,\n+}\n+\n /// Useful type to use with `Result<>` indicate that an error has already\n /// been reported to the user, so no need to continue checking.\n #[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "f80141403bf150cb2252762869c97fb9b064c77e", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -8,7 +8,7 @@ use rustc_span::{BytePos, Span};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Handler, MultiSpan, PResult};\n+use rustc_errors::{Handler, MultiSpan, PResult, TerminalUrl};\n \n use std::io;\n use std::io::prelude::*;\n@@ -152,6 +152,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         #[allow(rustc::untranslatable_diagnostic)]"}, {"sha": "7bef89a3704a891f330c1bb7919b198150863a80", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -4,7 +4,7 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n-use rustc_errors::LanguageIdentifier;\n+use rustc_errors::{LanguageIdentifier, TerminalUrl};\n use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n     RelocModel, RelroLevel, SplitDebuginfo, StackProtector, TargetTriple, TlsModel,\n@@ -399,6 +399,8 @@ mod desc {\n     pub const parse_code_model: &str = \"one of supported code models (`rustc --print code-models`)\";\n     pub const parse_tls_model: &str = \"one of supported TLS models (`rustc --print tls-models`)\";\n     pub const parse_target_feature: &str = parse_string;\n+    pub const parse_terminal_url: &str =\n+        \"either a boolean (`yes`, `no`, `on`, `off`, etc), or `auto`\";\n     pub const parse_wasi_exec_model: &str = \"either `command` or `reactor`\";\n     pub const parse_split_debuginfo: &str =\n         \"one of supported split-debuginfo modes (`off`, `packed`, or `unpacked`)\";\n@@ -979,6 +981,16 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_terminal_url(slot: &mut TerminalUrl, v: Option<&str>) -> bool {\n+        *slot = match v {\n+            Some(\"on\" | \"\" | \"yes\" | \"y\") | None => TerminalUrl::Yes,\n+            Some(\"off\" | \"no\" | \"n\") => TerminalUrl::No,\n+            Some(\"auto\") => TerminalUrl::Auto,\n+            _ => return false,\n+        };\n+        true\n+    }\n+\n     pub(crate) fn parse_symbol_mangling_version(\n         slot: &mut Option<SymbolManglingVersion>,\n         v: Option<&str>,\n@@ -1602,6 +1614,8 @@ options! {\n         \"show extended diagnostic help (default: no)\"),\n     temps_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"the directory the intermediate files are written to\"),\n+    terminal_urls: TerminalUrl = (TerminalUrl::No, parse_terminal_url, [UNTRACKED],\n+        \"use the OSC 8 hyperlink terminal specification to print hyperlinks in the compiler output\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),"}, {"sha": "54b68b8341f5061f14a964f7afad096fba384e1f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -24,6 +24,7 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n     ErrorGuaranteed, FluentBundle, IntoDiagnostic, LazyFallbackBundle, MultiSpan, Noted,\n+    TerminalUrl,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1273,6 +1274,19 @@ fn default_emitter(\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.unstable_opts.macro_backtrace;\n     let track_diagnostics = sopts.unstable_opts.track_diagnostics;\n+    let terminal_url = match sopts.unstable_opts.terminal_urls {\n+        TerminalUrl::Auto => {\n+            match (std::env::var(\"COLORTERM\").as_deref(), std::env::var(\"TERM\").as_deref()) {\n+                (Ok(\"truecolor\"), Ok(\"xterm-256color\"))\n+                    if sopts.unstable_features.is_nightly_build() =>\n+                {\n+                    TerminalUrl::Yes\n+                }\n+                _ => TerminalUrl::No,\n+            }\n+        }\n+        t => t,\n+    };\n     match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1297,6 +1311,7 @@ fn default_emitter(\n                     sopts.diagnostic_width,\n                     macro_backtrace,\n                     track_diagnostics,\n+                    terminal_url,\n                 );\n                 Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             }\n@@ -1312,6 +1327,7 @@ fn default_emitter(\n                 sopts.diagnostic_width,\n                 macro_backtrace,\n                 track_diagnostics,\n+                terminal_url,\n             )\n             .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n@@ -1624,6 +1640,7 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n                 None,\n                 false,\n                 false,\n+                TerminalUrl::No,\n             ))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } => Box::new(JsonEmitter::basic(\n@@ -1634,6 +1651,7 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         )),\n     };\n     rustc_errors::Handler::with_emitter(true, None, emitter)"}, {"sha": "05b2a5334f19f561d9a1d79dc2f0560774fa5b60", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::sync::{self, Lrc};\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n+use rustc_errors::TerminalUrl;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::{Namespace, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LocalDefId};\n@@ -164,6 +165,7 @@ pub(crate) fn new_handler(\n                     diagnostic_width,\n                     false,\n                     unstable_opts.track_diagnostics,\n+                    TerminalUrl::No,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )\n@@ -183,6 +185,7 @@ pub(crate) fn new_handler(\n                     diagnostic_width,\n                     false,\n                     unstable_opts.track_diagnostics,\n+                    TerminalUrl::No,\n                 )\n                 .ui_testing(unstable_opts.ui_testing),\n             )"}, {"sha": "57c41b57311dffcfad19c3bafc9c4ed2aaa8cc07", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{ColorConfig, ErrorGuaranteed, FatalError};\n+use rustc_errors::{ColorConfig, ErrorGuaranteed, FatalError, TerminalUrl};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::{self as hir, intravisit, CRATE_HIR_ID};\n use rustc_interface::interface;\n@@ -557,6 +557,7 @@ pub(crate) fn make_test(\n                 Some(80),\n                 false,\n                 false,\n+                TerminalUrl::No,\n             )\n             .supports_color();\n \n@@ -571,6 +572,7 @@ pub(crate) fn make_test(\n                 None,\n                 false,\n                 false,\n+                TerminalUrl::No,\n             );\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n@@ -756,6 +758,7 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n                 None,\n                 false,\n                 false,\n+                TerminalUrl::No,\n             );\n \n             let handler = Handler::with_emitter(false, None, Box::new(emitter));"}, {"sha": "0b31e20fc87c003ed6631cfdea8ae25a87eeae71", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Applicability, Handler, SuggestionStyle};\n+use rustc_errors::{Applicability, Handler, SuggestionStyle, TerminalUrl};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n@@ -717,6 +717,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                     None,\n                     false,\n                     false,\n+                    TerminalUrl::No,\n                 );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);"}, {"sha": "e45835efe7464fd51490a6b1d645e32532ff87a7", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -220,6 +220,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         None,\n         false,\n         false,\n+        rustc_errors::TerminalUrl::No,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "9014026b0aa4ad93c868fdb05cce7f2592ba39cf", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -4,7 +4,7 @@ use std::sync::atomic::{AtomicBool, Ordering};\n use rustc_data_structures::sync::{Lrc, Send};\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::translation::Translate;\n-use rustc_errors::{ColorConfig, Diagnostic, Handler, Level as DiagnosticLevel};\n+use rustc_errors::{ColorConfig, Diagnostic, Handler, Level as DiagnosticLevel, TerminalUrl};\n use rustc_session::parse::ParseSess as RawParseSess;\n use rustc_span::{\n     source_map::{FilePathMapping, SourceMap},\n@@ -135,6 +135,7 @@ fn default_handler(\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         ))\n     };\n     Handler::with_emitter("}, {"sha": "3bb975f28825f23a43addb6fcf700c316c666d8f", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -168,6 +168,7 @@\n     -Z                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n     -Z                                   teach=val -- show extended diagnostic help (default: no)\n     -Z                               temps-dir=val -- the directory the intermediate files are written to\n+    -Z                           terminal-urls=val -- use the OSC 8 hyperlink terminal specification to print hyperlinks in the compiler output\n     -Z                                 thinlto=val -- enable ThinLTO when possible\n     -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n     -Z                                 threads=val -- use a thread pool with N threads"}, {"sha": "1f04e2aade17f48873846276d6320a501fdce2d0", "filename": "tests/ui/diagnostic-flags/terminal_urls.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.rs?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Zterminal-urls=yes\n+fn main() {\n+    let () = 4; //~ ERROR\n+}"}, {"sha": "7f7e69c5d5da7d77bb17d6962bf3e2db58bfe483", "filename": "tests/ui/diagnostic-flags/terminal_urls.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a576514e13d5608ab48847958c2b97ab5ab01d85/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-flags%2Fterminal_urls.stderr?ref=a576514e13d5608ab48847958c2b97ab5ab01d85", "patch": "@@ -0,0 +1,11 @@\n+error[\u001b]8;;https://doc.rust-lang.org/error_codes/E0308.html\u0007E0308\u001b]8;;\u0007]: mismatched types\n+  --> $DIR/terminal_urls.rs:3:9\n+   |\n+LL |     let () = 4;\n+   |         ^^   - this expression has type `{integer}`\n+   |         |\n+   |         expected integer, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}