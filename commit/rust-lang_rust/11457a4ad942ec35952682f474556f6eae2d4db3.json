{"sha": "11457a4ad942ec35952682f474556f6eae2d4db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDU3YTRhZDk0MmVjMzU5NTI2ODJmNDc0NTU2ZjZlYWUyZDRkYjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T08:59:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T09:21:31Z"}, "message": "fix comparing function pointers with intptrcast", "tree": {"sha": "c5062e22d008ad289cf6e98c919a16d2a7c286d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5062e22d008ad289cf6e98c919a16d2a7c286d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11457a4ad942ec35952682f474556f6eae2d4db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11457a4ad942ec35952682f474556f6eae2d4db3", "html_url": "https://github.com/rust-lang/rust/commit/11457a4ad942ec35952682f474556f6eae2d4db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11457a4ad942ec35952682f474556f6eae2d4db3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec279f290b166d72060bc7bfcee72fbc6fc89fe", "html_url": "https://github.com/rust-lang/rust/commit/1ec279f290b166d72060bc7bfcee72fbc6fc89fe"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "f8102642bdb46ab974b8244127ac372795da4320", "filename": "src/intptrcast.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/11457a4ad942ec35952682f474556f6eae2d4db3/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11457a4ad942ec35952682f474556f6eae2d4db3/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=11457a4ad942ec35952682f474556f6eae2d4db3", "patch": "@@ -1,25 +1,26 @@\n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n+use std::collections::{HashMap, hash_map::Entry};\n+use std::cmp::max;\n \n use rand::Rng;\n \n-use rustc::mir::interpret::{AllocId, Pointer, InterpResult};\n-use rustc_mir::interpret::Memory;\n+use rustc_mir::interpret::{AllocId, Pointer, InterpResult, Memory, AllocCheck};\n use rustc_target::abi::Size;\n \n use crate::{Evaluator, Tag, STACK_ADDR};\n \n pub type MemoryExtra = RefCell<GlobalState>;\n \n-#[derive(Clone, Debug, Default)]\n-pub struct AllocExtra {\n-    base_addr: Cell<Option<u64>>\n-}\n-\n #[derive(Clone, Debug)]\n pub struct GlobalState {\n     /// This is used as a map between the address of each allocation and its `AllocId`.\n     /// It is always sorted\n     pub int_to_ptr_map: Vec<(u64, AllocId)>,\n+    /// The base address for each allocation.  We cannot put that into\n+    /// `AllocExtra` because function pointers also have a base address, and\n+    /// they do not have an `AllocExtra`.\n+    /// This is the inverse of `int_to_ptr_map`.\n+    pub base_addr: HashMap<AllocId, u64>,\n     /// This is used as a memory address when a new pointer is casted to an integer. It\n     /// is always larger than any address that was previously made part of a block.\n     pub next_base_addr: u64,\n@@ -29,6 +30,7 @@ impl Default for GlobalState {\n     fn default() -> Self {\n         GlobalState {\n             int_to_ptr_map: Vec::default(),\n+            base_addr: HashMap::default(),\n             next_base_addr: STACK_ADDR,\n         }\n     }\n@@ -71,13 +73,13 @@ impl<'mir, 'tcx> GlobalState {\n         memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n+        let global_state = &mut *global_state;\n \n-        let alloc = memory.get(ptr.alloc_id)?;\n-        let align = alloc.align.bytes();\n+        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::Live)?;\n \n-        let base_addr = match alloc.extra.intptrcast.base_addr.get() { \n-            Some(base_addr) => base_addr,\n-            None => {\n+        let base_addr = match global_state.base_addr.entry(ptr.alloc_id) {\n+            Entry::Occupied(entry) => *entry.get(),\n+            Entry::Vacant(entry) => {\n                 // This allocation does not have a base address yet, pick one.\n                 // Leave some space to the previous allocation, to give it some chance to be less aligned.\n                 let slack = {\n@@ -86,11 +88,12 @@ impl<'mir, 'tcx> GlobalState {\n                     rng.gen_range(0, 16)\n                 };\n                 // From next_base_addr + slack, round up to adjust for alignment.\n-                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align);\n-                alloc.extra.intptrcast.base_addr.set(Some(base_addr));\n+                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align.bytes());\n+                entry.insert(base_addr);\n \n-                // Remember next base address.\n-                global_state.next_base_addr = base_addr + alloc.bytes.len() as u64;\n+                // Remember next base address.  If this allocation is zero-sized, leave a gap\n+                // of at least 1 to avoid two allocations having the same base address.\n+                global_state.next_base_addr = base_addr + max(size.bytes(), 1);\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id)); \n@@ -99,7 +102,7 @@ impl<'mir, 'tcx> GlobalState {\n             }\n         };\n \n-        debug_assert_eq!(base_addr % align, 0); // sanity check\n+        debug_assert_eq!(base_addr % align.bytes(), 0); // sanity check\n         Ok(base_addr + ptr.offset.bytes())\n     }\n "}, {"sha": "20fe2e055fb53887f8ddaac5066063e1dfc67b68", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11457a4ad942ec35952682f474556f6eae2d4db3/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11457a4ad942ec35952682f474556f6eae2d4db3/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=11457a4ad942ec35952682f474556f6eae2d4db3", "patch": "@@ -42,7 +42,6 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n     pub stacked_borrows: stacked_borrows::AllocExtra,\n-    pub intptrcast: intptrcast::AllocExtra,\n }\n \n /// Extra global memory data\n@@ -277,7 +276,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n             mutability: alloc.mutability,\n             extra: AllocExtra {\n                 stacked_borrows: stacks,\n-                intptrcast: Default::default(),\n             },\n         };\n         (Cow::Owned(alloc), base_tag)"}, {"sha": "c0d3e9398dc5d4eebb0a9c4e12ebd08d85020887", "filename": "tests/run-pass/intptrcast_format.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11457a4ad942ec35952682f474556f6eae2d4db3/tests%2Frun-pass%2Fintptrcast_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11457a4ad942ec35952682f474556f6eae2d4db3/tests%2Frun-pass%2Fintptrcast_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast_format.rs?ref=11457a4ad942ec35952682f474556f6eae2d4db3", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Zmiri-seed=\n+\n+fn main() {\n+    println!(\"Hello {}\", 13);\n+    println!(\"{:0<width$}\", \"hello\", width = 10);\n+}"}, {"sha": "3c9a55d0d4c1aeb35639cb8a39eb742dc3fc6cf1", "filename": "tests/run-pass/intptrcast_format.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11457a4ad942ec35952682f474556f6eae2d4db3/tests%2Frun-pass%2Fintptrcast_format.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11457a4ad942ec35952682f474556f6eae2d4db3/tests%2Frun-pass%2Fintptrcast_format.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast_format.stdout?ref=11457a4ad942ec35952682f474556f6eae2d4db3", "patch": "@@ -0,0 +1,2 @@\n+Hello 13\n+hello00000"}]}