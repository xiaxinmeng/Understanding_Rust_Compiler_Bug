{"sha": "f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YzU1ZGQwOGY4ZTAyMTQ1ZDI4ZjJjY2RjMDdjZjNlOWQ5ZmZjMWI=", "commit": {"author": {"name": "changchun.fan", "email": "changchun.fan@gmail.com", "date": "2016-08-22T07:37:08Z"}, "committer": {"name": "fcc", "email": "changchun.fan@qq.com", "date": "2016-08-26T01:13:59Z"}, "message": "Fix documentation in cell mod", "tree": {"sha": "96277b65cf99268faa70f7719f3e72e75ec6ff16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96277b65cf99268faa70f7719f3e72e75ec6ff16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b", "html_url": "https://github.com/rust-lang/rust/commit/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71bdeea561355ba5adbc9a1f44f4f866a75a15c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/71bdeea561355ba5adbc9a1f44f4f866a75a15c4", "html_url": "https://github.com/rust-lang/rust/commit/71bdeea561355ba5adbc9a1f44f4f866a75a15c4"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "9b8c1be231ad2038d152441e5cd4c2a0326c1d83", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f4c55dd08f8e02145d28f2ccdc07cf3e9d9ffc1b", "patch": "@@ -119,26 +119,55 @@\n //! `Cell<T>`.\n //!\n //! ```\n+//! #![feature(core_intrinsics)]\n+//! #![feature(shared)]\n //! use std::cell::Cell;\n+//! use std::ptr::Shared;\n+//! use std::intrinsics::abort;\n+//! use std::intrinsics::assume;\n //!\n-//! struct Rc<T> {\n-//!     ptr: *mut RcBox<T>\n+//! struct Rc<T: ?Sized> {\n+//!     ptr: Shared<RcBox<T>>\n //! }\n //!\n-//! struct RcBox<T> {\n-//! # #[allow(dead_code)]\n+//! struct RcBox<T: ?Sized> {\n+//!     strong: Cell<usize>,\n+//!     refcount: Cell<usize>,\n //!     value: T,\n-//!     refcount: Cell<usize>\n //! }\n //!\n-//! impl<T> Clone for Rc<T> {\n+//! impl<T: ?Sized> Clone for Rc<T> {\n //!     fn clone(&self) -> Rc<T> {\n-//!         unsafe {\n-//!             (*self.ptr).refcount.set((*self.ptr).refcount.get() + 1);\n-//!             Rc { ptr: self.ptr }\n-//!         }\n+//!         self.inc_strong();\n+//!         Rc { ptr: self.ptr }\n+//!     }\n+//! }\n+//!\n+//! trait RcBoxPtr<T: ?Sized> {\n+//!\n+//!     fn inner(&self) -> &RcBox<T>;\n+//!\n+//!     fn strong(&self) -> usize {\n+//!         self.inner().strong.get()\n+//!     }\n+//!\n+//!     fn inc_strong(&self) {\n+//!         self.inner()\n+//!             .strong\n+//!             .set(self.strong()\n+//!                      .checked_add(1)\n+//!                      .unwrap_or_else(|| unsafe { abort() }));\n //!     }\n //! }\n+//!\n+//! impl<T: ?Sized> RcBoxPtr<T> for Rc<T> {\n+//!    fn inner(&self) -> &RcBox<T> {\n+//!        unsafe {\n+//!            assume(!(*(&self.ptr as *const _ as *const *const ())).is_null());\n+//!            &(**self.ptr)\n+//!        }\n+//!    }\n+//! }\n //! ```\n //!\n "}]}