{"sha": "3090086000f056ce50ddea8c71ca20f6892b6d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTAwODYwMDBmMDU2Y2U1MGRkZWE4YzcxY2EyMGY2ODkyYjZkODA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-03T23:34:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-03T23:34:25Z"}, "message": "Merge pull request #1627 from topecongiro/issue-1624\n\nRefactor vertical layout of function definition with options", "tree": {"sha": "9d94d882229145910602e18ec1cd19156541cb05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d94d882229145910602e18ec1cd19156541cb05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3090086000f056ce50ddea8c71ca20f6892b6d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3090086000f056ce50ddea8c71ca20f6892b6d80", "html_url": "https://github.com/rust-lang/rust/commit/3090086000f056ce50ddea8c71ca20f6892b6d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3090086000f056ce50ddea8c71ca20f6892b6d80/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f96233a354b9cc33b4b447d0402065fb6a07efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f96233a354b9cc33b4b447d0402065fb6a07efc", "html_url": "https://github.com/rust-lang/rust/commit/9f96233a354b9cc33b4b447d0402065fb6a07efc"}, {"sha": "dd13761f85f078160f22b947c95bd1461ed23d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd13761f85f078160f22b947c95bd1461ed23d1b", "html_url": "https://github.com/rust-lang/rust/commit/dd13761f85f078160f22b947c95bd1461ed23d1b"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "13c84f6ed2a0f652d1e90c98b5c0cf438dd79060", "filename": "src/items.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3090086000f056ce50ddea8c71ca20f6892b6d80/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3090086000f056ce50ddea8c71ca20f6892b6d80/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3090086000f056ce50ddea8c71ca20f6892b6d80", "patch": "@@ -1587,7 +1587,10 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n     result.push_str(&generics_str);\n \n-    let snuggle_angle_bracket = last_line_width(&generics_str) == 1;\n+    let snuggle_angle_bracket = generics_str\n+        .lines()\n+        .last()\n+        .map_or(false, |l| l.trim_left().len() == 1);\n \n     // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway.\n@@ -1619,24 +1622,28 @@ fn rewrite_fn_base(context: &RewriteContext,\n     // Check if vertical layout was forced.\n     if one_line_budget == 0 {\n         if snuggle_angle_bracket {\n-            result.push_str(\"(\");\n-        } else if context.config.fn_args_paren_newline() {\n-            result.push('\\n');\n-            result.push_str(&arg_indent.to_string(context.config));\n-            arg_indent = arg_indent + 1; // extra space for `(`\n             result.push('(');\n-            if context.config.spaces_within_parens() && fd.inputs.len() > 0 {\n-                result.push(' ')\n-            }\n         } else {\n-            result.push_str(\"(\\n\");\n-            result.push_str(&arg_indent.to_string(context.config));\n+            if context.config.fn_args_paren_newline() {\n+                result.push('\\n');\n+                result.push_str(&arg_indent.to_string(context.config));\n+                if context.config.fn_args_layout() == IndentStyle::Visual {\n+                    arg_indent = arg_indent + 1; // extra space for `(`\n+                }\n+                result.push('(');\n+            } else {\n+                result.push_str(\"(\");\n+                if context.config.fn_args_layout() == IndentStyle::Visual {\n+                    result.push('\\n');\n+                    result.push_str(&arg_indent.to_string(context.config));\n+                }\n+            }\n         }\n     } else {\n         result.push('(');\n-        if context.config.spaces_within_parens() && fd.inputs.len() > 0 {\n-            result.push(' ')\n-        }\n+    }\n+    if context.config.spaces_within_parens() && fd.inputs.len() > 0 && result.ends_with('(') {\n+        result.push(' ')\n     }\n \n     if multi_line_ret_str {\n@@ -1999,25 +2006,21 @@ fn compute_budgets_for_args(context: &RewriteContext,\n \n         if one_line_budget > 0 {\n             // 4 = \"() {\".len()\n-            let multi_line_budget = try_opt!(context\n-                                                 .config\n-                                                 .max_width()\n-                                                 .checked_sub(indent.width() + result.len() + 4));\n+            let multi_line_overhead = indent.width() + result.len() +\n+                                      if newline_brace { 2 } else { 4 };\n+            let multi_line_budget =\n+                try_opt!(context.config.max_width().checked_sub(multi_line_overhead));\n \n             return Some((one_line_budget, multi_line_budget, indent + result.len() + 1));\n         }\n     }\n \n     // Didn't work. we must force vertical layout and put args on a newline.\n     let new_indent = indent.block_indent(context.config);\n-    let used_space = new_indent.width() + 4; // Account for `(` and `)` and possibly ` {`.\n-    let max_space = context.config.max_width();\n-    if used_space <= max_space {\n-        Some((0, max_space - used_space, new_indent))\n-    } else {\n-        // Whoops! bankrupt.\n-        None\n-    }\n+    // Account for `)` and possibly ` {`.\n+    let used_space = new_indent.width() + if ret_str_len == 0 { 1 } else { 3 };\n+    let max_space = try_opt!(context.config.max_width().checked_sub(used_space));\n+    Some((0, max_space, new_indent))\n }\n \n fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {"}, {"sha": "e9ba39f666cba7ab18855023610b59bf282531b3", "filename": "tests/target/fn-custom-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=3090086000f056ce50ddea8c71ca20f6892b6d80", "patch": "@@ -52,8 +52,7 @@ impl Foo {\n         'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n         TTTTTTTTTTTTT,\n         UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n-    >\n-        (\n+    >(\n         a: Aaaaaaaaaaaaaaa,\n     ) {\n         bar();"}, {"sha": "a29aac411ba96f1d92054d86a128a8e19641fae9", "filename": "tests/target/fn-custom-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=3090086000f056ce50ddea8c71ca20f6892b6d80", "patch": "@@ -54,8 +54,7 @@ impl Foo {\n         'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n         TTTTTTTTTTTTT,\n         UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW\n-    >\n-        (\n+    >(\n         a: Aaaaaaaaaaaaaaa,\n     ) {\n         bar();"}, {"sha": "dcdb18611a652ec9b46e0e1d31bde71a0fece998", "filename": "tests/target/issue-1624.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Fissue-1624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3090086000f056ce50ddea8c71ca20f6892b6d80/tests%2Ftarget%2Fissue-1624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1624.rs?ref=3090086000f056ce50ddea8c71ca20f6892b6d80", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-fn_args_layout: Block\n+// rustfmt-fn_args_paren_newline: false\n+\n+// #1624\n+pub unsafe fn some_long_function_name(\n+    arg1: Type1,\n+    arg2: Type2,\n+) -> (SomeLongTypeName, AnotherLongTypeName, AnotherLongTypeName) {\n+}"}]}