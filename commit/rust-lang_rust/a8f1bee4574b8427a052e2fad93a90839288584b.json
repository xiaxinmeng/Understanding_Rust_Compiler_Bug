{"sha": "a8f1bee4574b8427a052e2fad93a90839288584b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjFiZWU0NTc0Yjg0MjdhMDUyZTJmYWQ5M2E5MDgzOTI4ODU4NGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-24T21:04:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-24T22:37:21Z"}, "message": "fix some unused pattern binding warnings", "tree": {"sha": "ed1c24409eaad0000d43610d740a742acd57282c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1c24409eaad0000d43610d740a742acd57282c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f1bee4574b8427a052e2fad93a90839288584b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f1bee4574b8427a052e2fad93a90839288584b", "html_url": "https://github.com/rust-lang/rust/commit/a8f1bee4574b8427a052e2fad93a90839288584b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f1bee4574b8427a052e2fad93a90839288584b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba7434cb17c19438b00730b37741f2d61449ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba7434cb17c19438b00730b37741f2d61449ad8", "html_url": "https://github.com/rust-lang/rust/commit/5ba7434cb17c19438b00730b37741f2d61449ad8"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "036bb0022ca450e52d5f3b1d1d6cfe97f0974671", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -231,7 +231,7 @@ struct bitv {\n                   assign     => s.become(s1,     self.nbits),\n                   difference => s.difference(s1, self.nbits)\n                 },\n-                big(s1) => self.die()\n+                big(_) => self.die()\n               },\n               big(s) => match other.rep {\n                 small(_) => self.die(),"}, {"sha": "68dd986025b54613d784b9fa1adad35983c544d9", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -193,7 +193,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n     let item_path = @/* FIXME (#2543) */ copy cx.path;\n     cx.map.insert(i.id, node_item(i, item_path));\n     match i.node {\n-      item_impl(_, opt_ir, _, ms) => {\n+      item_impl(_, _, _, ms) => {\n         let impl_did = ast_util::local_def(i.id);\n         for ms.each |m| {\n             map_method(impl_did, extend(cx, i.ident), m,"}, {"sha": "17a9942c4892ac4945c51fa0efad421c1ff2fbda", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -372,7 +372,7 @@ impl inlined_item: inlined_item_utils {\n           ii_ctor(ctor, nm, tps, parent_id) => {\n               visit::visit_class_ctor_helper(ctor, nm, tps, parent_id, e, v);\n           }\n-          ii_dtor(dtor, nm, tps, parent_id) => {\n+          ii_dtor(dtor, _, tps, parent_id) => {\n               visit::visit_class_dtor_helper(dtor, tps, parent_id, e, v);\n           }\n         }\n@@ -504,7 +504,7 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             vfn(id);\n \n             match fk {\n-              visit::fk_ctor(nm, _, tps, self_id, parent_id) => {\n+              visit::fk_ctor(_, _, tps, self_id, parent_id) => {\n                 vec::iter(tps, |tp| vfn(tp.id));\n                 vfn(id);\n                 vfn(self_id);\n@@ -583,7 +583,7 @@ pure fn is_item_impl(item: @ast::item) -> bool {\n fn walk_pat(pat: @pat, it: fn(@pat)) {\n     it(pat);\n     match pat.node {\n-      pat_ident(_, pth, some(p)) => walk_pat(p, it),\n+      pat_ident(_, _, some(p)) => walk_pat(p, it),\n       pat_rec(fields, _) | pat_struct(_, fields, _) =>\n         for fields.each |f| { walk_pat(f.pat, it) },\n       pat_enum(_, some(s)) | pat_tup(s) => for s.each |p| {"}, {"sha": "132e8f6b8dd3c75af9118de5f2d16f5642770e2d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -204,7 +204,7 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n             ast::meta_name_value(nb, vb) => na == nb && va.node == vb.node,\n             _ => false\n           },\n-          ast::meta_list(na, la) => {\n+          ast::meta_list(*) => {\n \n             // ~[Fixme-sorting]\n             // FIXME (#607): Needs implementing"}, {"sha": "a66b37b49bd373285bcba34b3f5fc0d79ab42e34", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -211,7 +211,7 @@ fn expand_item_mac(exts: hashmap<~str, syntax_extension>,\n                                                span: expand.span}}));\n             let maybe_it = match expanded {\n               mr_item(it) => fld.fold_item(it),\n-              mr_expr(e) => cx.span_fatal(pth.span,\n+              mr_expr(_) => cx.span_fatal(pth.span,\n                                          ~\"expr macro in item position: \" +\n                                          *extname),\n               mr_def(mdef) => {"}, {"sha": "1c501120c069bb77032d9a17bd892cbdc5c8f144", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -41,7 +41,7 @@ impl message: gen_send {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item {\n         debug!(\"pipec: gen_send\");\n         match self {\n-          message(id, span, tys, this,\n+          message(_id, span, tys, this,\n                   some({state: next, tys: next_tys})) => {\n             debug!(\"pipec: next state exists\");\n             let next = this.proto.get_state(next);\n@@ -126,7 +126,7 @@ impl message: gen_send {\n                             cx.expr_block(body))\n           }\n \n-            message(id, span, tys, this, none) => {\n+            message(_id, span, tys, this, none) => {\n                 debug!(\"pipec: no next state\");\n                 let arg_names = tys.mapi(|i, _ty| (~\"x_\" + i.to_str()));\n "}, {"sha": "6a9507f5ce393390eed685626539789f2d73bed1", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -635,7 +635,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     let mut clauses: ~[@clause] = ~[];\n     for args.each |arg| {\n         match arg.node {\n-          expr_vec(elts, mutbl) => {\n+          expr_vec(elts, _) => {\n             if vec::len(elts) != 2u {\n                 cx.span_fatal((*arg).span,\n                               ~\"extension clause must consist of ~[\" +"}, {"sha": "77e0970d423ab0156be826672a719491e25872a5", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -42,11 +42,11 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n \n     // Extract the arguments:\n     let lhses:~[@named_match] = match argument_map.get(lhs_nm) {\n-      @matched_seq(s, sp) => s,\n+      @matched_seq(s, _) => s,\n       _ => cx.span_bug(sp, ~\"wrong-structured lhs\")\n     };\n     let rhses:~[@named_match] = match argument_map.get(rhs_nm) {\n-      @matched_seq(s, sp) => s,\n+      @matched_seq(s, _) => s,\n       _ => cx.span_bug(sp, ~\"wrong-structured rhs\")\n     };\n "}, {"sha": "360605aab2c2b4ffead0d4455e69aee4aaa9d2c3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -116,7 +116,7 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n                  mac_invoc(fld.fold_path(pth),\n                            option::map(arg, |x| fld.fold_expr(x)), body)\n                }\n-               mac_invoc_tt(pth, tt) => m.node,\n+               mac_invoc_tt(*) => m.node,\n                mac_ellipsis => mac_ellipsis,\n                mac_aq(_,_) => /* FIXME (#2543) */ copy m.node,\n                mac_var(_) => /* FIXME (#2543) */ copy m.node,"}, {"sha": "8f44a165ea4be2e5dfbf69d4d806142b6a4e123d", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -31,7 +31,7 @@ fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n       ast::stmt_expr(e, _) => {\n         return expr_requires_semi_to_be_stmt(e);\n       }\n-      ast::stmt_semi(e, _) => {\n+      ast::stmt_semi(*) => {\n         return false;\n       }\n     }"}, {"sha": "615d546bb96677439148bc64eefda747d929457d", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -130,7 +130,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: ~str,\n         vec::push(items, i);\n       }\n       ast::cdir_view_item(vi) => vec::push(view_items, vi),\n-      ast::cdir_syntax(pth) => ()\n+      ast::cdir_syntax(*) => ()\n     }\n }\n //"}, {"sha": "bef69be4e8acc4ce10a692def525a402cfbe6c32", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -313,7 +313,7 @@ fn scan_digits(rdr: string_reader, radix: uint) -> ~str {\n         let c = rdr.curr;\n         if c == '_' { bump(rdr); again; }\n         match char::to_digit(c, radix) {\n-          some(d) => {\n+          some(_) => {\n             str::push_char(rslt, c);\n             bump(rdr);\n           }"}, {"sha": "29c41949e21236bac6902ba734960c4b59c50f0d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -923,7 +923,7 @@ fn print_if(s: ps, test: @ast::expr, blk: ast::blk,\n \n fn print_mac(s: ps, m: ast::mac) {\n     match m.node {\n-      ast::mac_invoc(path, arg, body) => {\n+      ast::mac_invoc(path, arg, _body) => {\n         word(s.s, ~\"#\");\n         print_path(s, path, false);\n         match arg {"}, {"sha": "56d3d3a26f4499c817b8ea95bdf17a52178a2926", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -384,11 +384,11 @@ fn visit_exprs<E>(exprs: ~[@expr], e: E, v: vt<E>) {\n \n fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n     match m.node {\n-      ast::mac_invoc(pth, arg, body) => {\n+      ast::mac_invoc(_, arg, _) => {\n         option::map(arg, |arg| v.visit_expr(arg, e, v)); }\n-      ast::mac_invoc_tt(pth, tt) => { /* no user-serviceable parts inside */ }\n+      ast::mac_invoc_tt(*) => { /* no user-serviceable parts inside */ }\n       ast::mac_ellipsis => (),\n-      ast::mac_aq(_, e) => { /* FIXME: maybe visit (Issue #2340) */ }\n+      ast::mac_aq(*) => { /* FIXME: maybe visit (Issue #2340) */ }\n       ast::mac_var(_) => ()\n     }\n }"}, {"sha": "dddcdd64da374b61e43a084a07573b6adc0b2530", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -759,7 +759,7 @@ fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n                               none);\n         trans_free(bcx, v)\n       }\n-      ty::ty_uniq(content_mt) => {\n+      ty::ty_uniq(*) => {\n         uniq::make_free_glue(bcx, v, t)\n       }\n       ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) |\n@@ -1062,8 +1062,8 @@ fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n             cx = f(cx, llfld_a, fld.mt.ty);\n         }\n       }\n-      ty::ty_estr(ty::vstore_fixed(n)) |\n-      ty::ty_evec(_, ty::vstore_fixed(n)) => {\n+      ty::ty_estr(ty::vstore_fixed(_)) |\n+      ty::ty_evec(_, ty::vstore_fixed(_)) => {\n         let (base, len) = tvec::get_base_and_len(cx, av, t);\n         cx = tvec::iter_vec_raw(cx, base, t, len, f);\n       }\n@@ -2071,7 +2071,7 @@ fn trans_external_path(ccx: @crate_ctxt, did: ast::def_id, t: ty::t)\n fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> option<ty::t> {\n     // FIXME[mono] could do this recursively. is that worthwhile? (#2529)\n     match ty::get(ty).struct {\n-      ty::ty_box(mt) => {\n+      ty::ty_box(*) => {\n         some(ty::mk_opaque_box(tcx))\n       }\n       ty::ty_fn(ref fty) => {\n@@ -2199,10 +2199,10 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       ast_map::node_method(m, _, pt) => (pt, m.ident, m.span),\n       ast_map::node_foreign_item(i, ast::foreign_abi_rust_intrinsic, pt)\n       => (pt, i.ident, i.span),\n-      ast_map::node_foreign_item(_, abi, _) => {\n+      ast_map::node_foreign_item(*) => {\n         // Foreign externs don't have to be monomorphized.\n         return {val: get_item_val(ccx, fn_id.node),\n-             must_cast: true};\n+                must_cast: true};\n       }\n       ast_map::node_ctor(nm, _, ct, _, pt) => (pt, nm, ct.span),\n       ast_map::node_dtor(_, dtor, _, pt) =>\n@@ -2286,13 +2286,13 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n         }\n         d\n       }\n-      ast_map::node_method(mth, impl_def_id, _) => {\n+      ast_map::node_method(mth, _, _) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(mth.attrs, d);\n         impl::trans_method(ccx, pt, mth, psubsts, d);\n         d\n       }\n-      ast_map::node_ctor(nm, tps, ctor, parent_id, _) => {\n+      ast_map::node_ctor(_, tps, ctor, parent_id, _) => {\n         // ctors don't have attrs, at least not right now\n         let d = mk_lldecl();\n         let tp_tys = ty::ty_params_to_tys(ccx.tcx, tps);\n@@ -2356,7 +2356,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             trans_item(ccx, *item);\n             local_def(item.id)\n           }\n-          csearch::found(ast::ii_ctor(ctor, nm, tps, parent_id)) => {\n+          csearch::found(ast::ii_ctor(ctor, _, tps, _)) => {\n             ccx.external.insert(fn_id, some(ctor.node.id));\n             local_def(ctor.node.id)\n           }\n@@ -2398,7 +2398,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             }\n             local_def(mth.id)\n           }\n-          csearch::found(ast::ii_dtor(dtor, nm, tps, parent_id)) => {\n+          csearch::found(ast::ii_dtor(dtor, _, tps, _)) => {\n               ccx.external.insert(fn_id, some(dtor.node.id));\n               local_def(dtor.node.id)\n           }\n@@ -2500,7 +2500,8 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         match table.find(id) {\n           some(local_mem(v)) => {val: v, kind: lv_owned},\n           some(local_imm(v)) => {val: v, kind: lv_owned_imm},\n-          r => fail(~\"take_local: internal error\")\n+          none => fail(fmt!(\"take_local: internal error, \\\n+                             found no entry for %?\", id))\n         }\n     }\n     match def {\n@@ -2516,7 +2517,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         assert (cx.fcx.lllocals.contains_key(nid));\n         return take_local(cx.fcx.lllocals, nid);\n       }\n-      ast::def_self(sid) => {\n+      ast::def_self(_) => {\n         let slf = match copy cx.fcx.llself {\n           some(s) => cast_self(cx, s),\n           none => cx.sess().bug(~\"trans_local_var: reference to self \\\n@@ -2690,7 +2691,7 @@ fn expr_is_lval(bcx: block, e: @ast::expr) -> bool {\n fn trans_callee(bcx: block, e: @ast::expr) -> lval_maybe_callee {\n     let _icx = bcx.insn_ctxt(\"trans_callee\");\n     match e.node {\n-      ast::expr_path(path) => return trans_path(bcx, e.id),\n+      ast::expr_path(_) => return trans_path(bcx, e.id),\n       ast::expr_field(base, _, _) => {\n         // Lval means this is a record field, so not a method\n         if !expr_is_lval(bcx, e) {\n@@ -2949,7 +2950,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n     // translate the arg expr as an lvalue\n     let lv = match ret_flag {\n       // If there is a ret_flag, this *must* be a loop body\n-      some(ptr) => match check e.node {\n+      some(_) => match check e.node {\n         ast::expr_loop_body(blk) => {\n             let scratch = alloc_ty(cx, expr_ty(cx, blk));\n             let bcx = trans_loop_body(cx, e, ret_flag, save_in(scratch));\n@@ -3858,7 +3859,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n               }\n             }\n           }\n-          ast::expr_loop_body(blk) => {\n+          ast::expr_loop_body(_) => {\n             return trans_loop_body(bcx, e, none, dest);\n           }\n           ast::expr_do_body(blk) => {\n@@ -5383,11 +5384,11 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                         vec::append(*pth, ~[path_name(ni.ident)]),\n                         ni.id)\n           }\n-          ast_map::node_ctor(nm, tps, ctor, _, pt) => {\n+          ast_map::node_ctor(nm, _, ctor, _, pt) => {\n             let my_path = vec::append(*pt, ~[path_name(nm)]);\n             register_fn(ccx, ctor.span, my_path, ctor.node.id)\n           }\n-          ast_map::node_dtor(tps, dt, parent_id, pt) => {\n+          ast_map::node_dtor(_, dt, parent_id, pt) => {\n             /*\n                 Don't just call register_fn, since we don't want to add\n                 the implicit self argument automatically (we want to make sure"}, {"sha": "2e926507d8245f1f1a47803d2b136e8bd33609a5", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -242,7 +242,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n           }\n           const_get_elt(arr, iv as uint)\n       }\n-      ast::expr_cast(base, tp) => {\n+      ast::expr_cast(base, _) => {\n         let ety = ty::expr_ty(cx.tcx, e), llty = type_of::type_of(cx, ety);\n         let basety = ty::expr_ty(cx.tcx, base);\n         let v = const_expr(cx, base);\n@@ -311,7 +311,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n       ast::expr_rec(fs, none) => {\n         C_struct(fs.map(|f| const_expr(cx, f.node.expr)))\n       }\n-      ast::expr_vec(es, m_imm) => {\n+      ast::expr_vec(es, ast::m_imm) => {\n         let (v, _, _) = const_vec(cx, e, es);\n         v\n       }\n@@ -327,7 +327,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                       ~\"bad const-slice lit\") }\n             }\n           }\n-          ast::expr_vec(es, m_imm) => {\n+          ast::expr_vec(es, ast::m_imm) => {\n             let (cv, sz, llunitty) = const_vec(cx, e, es);\n             let llty = val_ty(cv);\n             let gv = do str::as_c_str(\"const\") |name| {\n@@ -342,7 +342,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                 ~\"bad const-slice expr\")\n         }\n       }\n-      ast::expr_path(path) => {\n+      ast::expr_path(_) => {\n         match cx.tcx.def_map.find(e.id) {\n           some(ast::def_const(def_id)) => {\n             // Don't know how to handle external consts"}, {"sha": "f6cd78e3015eb906ddb1e536ab4a35537bf43cfc", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f1bee4574b8427a052e2fad93a90839288584b/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=a8f1bee4574b8427a052e2fad93a90839288584b", "patch": "@@ -95,7 +95,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n       ty::ty_estr(ty::vstore_uniq) => {\n         T_unique_ptr(T_unique(cx, T_vec(cx, T_i8())))\n       }\n-      ty::ty_enum(did, _) => {\n+      ty::ty_enum(*) => {\n         // Only create the named struct, but don't fill it in. We\n         // fill it in *after* placing it into the type cache. This\n         // avoids creating more than one copy of the enum when one"}]}