{"sha": "6be3446f92b444cd6584c7948be9f7cf20ce5518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTM0NDZmOTJiNDQ0Y2Q2NTg0Yzc5NDhiZTlmN2NmMjBjZTU1MTg=", "commit": {"author": {"name": "Matthew Parkinson", "email": "mattpark@microsoft.com", "date": "2020-01-20T10:01:17Z"}, "committer": {"name": "Matthew Parkinson", "email": "mattpark@microsoft.com", "date": "2020-01-20T10:09:51Z"}, "message": "Added minor clarification to specification of realloc.\n\nThe `layout` for the returned allocation of a `realloc` is\nonly implicitly specified.  This change makes it explicit.", "tree": {"sha": "26b5f5c0052241459b16a115bbb4343446616981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b5f5c0052241459b16a115bbb4343446616981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be3446f92b444cd6584c7948be9f7cf20ce5518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be3446f92b444cd6584c7948be9f7cf20ce5518", "html_url": "https://github.com/rust-lang/rust/commit/6be3446f92b444cd6584c7948be9f7cf20ce5518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be3446f92b444cd6584c7948be9f7cf20ce5518/comments", "author": {"login": "mjp41", "id": 270363, "node_id": "MDQ6VXNlcjI3MDM2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/270363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjp41", "html_url": "https://github.com/mjp41", "followers_url": "https://api.github.com/users/mjp41/followers", "following_url": "https://api.github.com/users/mjp41/following{/other_user}", "gists_url": "https://api.github.com/users/mjp41/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjp41/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjp41/subscriptions", "organizations_url": "https://api.github.com/users/mjp41/orgs", "repos_url": "https://api.github.com/users/mjp41/repos", "events_url": "https://api.github.com/users/mjp41/events{/privacy}", "received_events_url": "https://api.github.com/users/mjp41/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjp41", "id": 270363, "node_id": "MDQ6VXNlcjI3MDM2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/270363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjp41", "html_url": "https://github.com/mjp41", "followers_url": "https://api.github.com/users/mjp41/followers", "following_url": "https://api.github.com/users/mjp41/following{/other_user}", "gists_url": "https://api.github.com/users/mjp41/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjp41/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjp41/subscriptions", "organizations_url": "https://api.github.com/users/mjp41/orgs", "repos_url": "https://api.github.com/users/mjp41/repos", "events_url": "https://api.github.com/users/mjp41/events{/privacy}", "received_events_url": "https://api.github.com/users/mjp41/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900811e43047fc5593f39b0363373530b02c87e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/900811e43047fc5593f39b0363373530b02c87e0", "html_url": "https://github.com/rust-lang/rust/commit/900811e43047fc5593f39b0363373530b02c87e0"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "09f743fb81e4c53885434e20536640904ad3902d", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be3446f92b444cd6584c7948be9f7cf20ce5518/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be3446f92b444cd6584c7948be9f7cf20ce5518/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=6be3446f92b444cd6584c7948be9f7cf20ce5518", "patch": "@@ -525,7 +525,8 @@ pub unsafe trait GlobalAlloc {\n     /// The memory may or may not have been deallocated,\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n-    /// this method).\n+    /// this method). The new memory block is allocated with `layout`, but\n+    /// with the `size` updated to `new_size`.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}]}