{"sha": "3f7640884128c6d2acaa9aee3b582cc372044b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzY0MDg4NDEyOGM2ZDJhY2FhOWFlZTNiNTgyY2MzNzIwNDRiNmQ=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-06-06T23:01:53Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-09-03T20:50:36Z"}, "message": "added feature gate enable-per-target-ignores\nupdated and augmented tests in html/markdown.rs", "tree": {"sha": "1dec1912be9626e043917cf4746e62a0618d09f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dec1912be9626e043917cf4746e62a0618d09f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7640884128c6d2acaa9aee3b582cc372044b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7640884128c6d2acaa9aee3b582cc372044b6d", "html_url": "https://github.com/rust-lang/rust/commit/3f7640884128c6d2acaa9aee3b582cc372044b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7640884128c6d2acaa9aee3b582cc372044b6d/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "html_url": "https://github.com/rust-lang/rust/commit/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "d8fe8d6c8a362da39a3c5addcc1476c1739c2d6e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -81,6 +81,10 @@ pub struct Options {\n     pub runtool: Option<String>,\n     /// Arguments to pass to the runtool\n     pub runtool_args: Vec<String>,\n+    /// Whether to allow ignoring doctests on a per-target basis\n+    /// For example, using ignore-foo to ignore running the doctest on any target that\n+    /// contains \"foo\" as a substring\n+    pub enable_per_target_ignores: bool,\n \n     // Options that affect the documentation process\n \n@@ -146,6 +150,7 @@ impl fmt::Debug for Options {\n             .field(\"render_options\", &self.render_options)\n             .field(\"runtool\", &self.runtool)\n             .field(\"runtool_args\", &self.runtool_args)\n+            .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n             .finish()\n     }\n }\n@@ -474,6 +479,7 @@ impl Options {\n         let extern_strs = matches.opt_strs(\"extern\");\n         let runtool = matches.opt_str(\"runtool\");\n         let runtool_args = matches.opt_strs(\"runtool-arg\");\n+        let enable_per_target_ignores = matches.opt_present(\"enable-per-target-ignores\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -506,6 +512,7 @@ impl Options {\n             persist_doctests,\n             runtool,\n             runtool_args,\n+            enable_per_target_ignores,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "cdc6d4eda40064d468480d892ca7af5826b7b180", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -199,7 +199,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let ignore;\n         let edition;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n-            let parse_result = LangString::parse(&lang, self.check_error_codes);\n+            let parse_result = LangString::parse(&lang, self.check_error_codes, false);\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n@@ -551,7 +551,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes: ErrorCodes) {\n+pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes: ErrorCodes,\n+                                           enable_per_target_ignores: bool) {\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n     let mut nb_lines = 0;\n@@ -564,7 +565,7 @@ pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes\n                 let block_info = if s.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*s, error_codes)\n+                    LangString::parse(&*s, error_codes, enable_per_target_ignores)\n                 };\n                 if !block_info.rust {\n                     continue;\n@@ -639,7 +640,11 @@ impl LangString {\n         }\n     }\n \n-    fn parse(string: &str, allow_error_code_check: ErrorCodes) -> LangString {\n+    fn parse(\n+        string: &str,\n+        allow_error_code_check: ErrorCodes,\n+        enable_per_target_ignores: bool\n+    ) -> LangString {\n         let allow_error_code_check = allow_error_code_check.as_bool();\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n@@ -660,7 +665,7 @@ impl LangString {\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n                 \"ignore\" => { data.ignore = Ignore::All; seen_rust_tags = !seen_other_tags; }\n-                x if x.starts_with(\"ignore-\") => {\n+                x if enable_per_target_ignores && x.starts_with(\"ignore-\") => {\n                     ignores.push(x.trim_start_matches(\"ignore-\").to_owned());\n                     seen_rust_tags = !seen_other_tags;\n                 }\n@@ -941,7 +946,7 @@ crate fn rust_code_blocks(md: &str) -> Vec<RustCodeBlock> {\n                 let lang_string = if syntax.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*syntax, ErrorCodes::Yes)\n+                    LangString::parse(&*syntax, ErrorCodes::Yes, false)\n                 };\n \n                 if lang_string.rust {"}, {"sha": "8f6067da0833592eb6ad657c0fa24734f61c9dcf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -355,6 +355,11 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"show-coverage\",\n                       \"calculate percentage of public items with documentation\")\n         }),\n+        unstable(\"enable-per-target-ignores\", |o| {\n+            o.optflag(\"\",\n+                      \"enable-per-target-ignores\",\n+                      \"parse ignore-foo for ignoring doctests on a per-target basis\")\n+        }),\n         unstable(\"runtool\", |o| {\n             o.optopt(\"\",\n                      \"runtool\","}, {"sha": "67faec6bd3d0caaef64dbb6ee694bfa4e352ba42", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -147,7 +147,7 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n \n-    find_testable_code(&input_str, &mut collector, codes);\n+    find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores);\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&options.test_args, collector.tests,"}, {"sha": "3bb1d0deca78dc2bd08929c9cc03a22aeb82fb26", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -336,7 +336,7 @@ pub fn look_for_tests<'tcx>(\n         found_tests: 0,\n     };\n \n-    find_testable_code(&dox, &mut tests, ErrorCodes::No);\n+    find_testable_code(&dox, &mut tests, ErrorCodes::No, false);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n         let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());"}, {"sha": "a30ac1a51289323d3d056ff39e1164696f3caa22", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7640884128c6d2acaa9aee3b582cc372044b6d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3f7640884128c6d2acaa9aee3b582cc372044b6d", "patch": "@@ -325,7 +325,7 @@ fn run_test(\n         cmd = Command::new(tool);\n         cmd.arg(output_file);\n         cmd.args(runtool_args);\n-    }else{\n+    } else {\n         cmd = Command::new(output_file);\n     }\n \n@@ -857,7 +857,10 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // anything else, this will combine them for us.\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             self.collector.set_position(attrs.span.unwrap_or(DUMMY_SP));\n-            markdown::find_testable_code(&doc, self.collector, self.codes);\n+            markdown::find_testable_code(&doc,\n+                                         self.collector,\n+                                         self.codes,\n+                                         self.collector.enable_per_target_ignores);\n         }\n \n         nested(self);"}]}