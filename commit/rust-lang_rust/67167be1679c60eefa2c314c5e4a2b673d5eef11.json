{"sha": "67167be1679c60eefa2c314c5e4a2b673d5eef11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTY3YmUxNjc5YzYwZWVmYTJjMzE0YzVlNGEyYjY3M2Q1ZWVmMTE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-05-17T16:14:43Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-05-26T14:52:02Z"}, "message": "Make empty_line_after_outer_attr an early lint", "tree": {"sha": "48a4ac82e3ab3c68ccd322847f216f9136b8db4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a4ac82e3ab3c68ccd322847f216f9136b8db4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67167be1679c60eefa2c314c5e4a2b673d5eef11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl7NLRIACgkQK0OZxL9N\ny95U7BAAov05oPX1DsmYvOz6/WoBQpQyUMQknFqZmiadjlwwFzK5wDphOSKAw5oX\nE5IK+54lXYiEMysVa2XlbzXoUopwBt65FFdn0N3LsSDeoAWNj7VFzSjoOMBoS7fV\nNxt9+U/5mYPbB9mpbPg9ovPef8w6NjU1iKMI2v0AMi3Ejf1u3g8Jmp/UnOunRQsI\nIPqmgOA0Vb0XhvTpcULTHtlkQ8m9hPYIqPrlJmCAXZcWhQwJ3SCp1UYJf5d7ODVj\nNfzXiOhz9axjtbou5rTCyZK7ct9J/CwmScs/gjTrmkhHLoMMSYtm/NObU6XKhg+z\nCLgwS90XTdVYhyBkyrPC7VQsSf1BtJo3GLIQxgNBfHXfLcLPvyV8sllhvrhpJ2l0\nEs03cuQMu/gH4xYeek7Tyi4lCW1/d+S/aND1z66OaUAlMcCJwAO9FY16ZCUMgSoY\nZdCOiiCVXwjtPGmcup/5+EpsH5ezn8JuQa8pvyNWKjVft/Gf0yNq9L1hkTLx6/WI\nI6S6hRhykk3WkBJoScC47oNueGBzZmYflBJaQiDLZxLvwtqV3Nc5dlPZEcwYzv0K\n71h+SXlRITgpfv6gSLWkqfIa6II1XUNo1Jk3dYVSmBrbJqtyi8vz4M+x1UX3QlWA\nY2xfs1/rhftNAm34AZGCD091SiOfyXMx3M21P/kQJcmzqCrcZJ8=\n=gXUP\n-----END PGP SIGNATURE-----", "payload": "tree 48a4ac82e3ab3c68ccd322847f216f9136b8db4a\nparent 578692d9b0205102968032bd4a63c3b262c43b63\nauthor Philipp Hansch <dev@phansch.net> 1589732083 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1590504722 +0200\n\nMake empty_line_after_outer_attr an early lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67167be1679c60eefa2c314c5e4a2b673d5eef11", "html_url": "https://github.com/rust-lang/rust/commit/67167be1679c60eefa2c314c5e4a2b673d5eef11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67167be1679c60eefa2c314c5e4a2b673d5eef11/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578692d9b0205102968032bd4a63c3b262c43b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/578692d9b0205102968032bd4a63c3b262c43b63", "html_url": "https://github.com/rust-lang/rust/commit/578692d9b0205102968032bd4a63c3b262c43b63"}], "stats": {"total": 149, "additions": 109, "deletions": 40}, "files": [{"sha": "043a79f200199a2080a82519ce5992950512296a", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -33,5 +33,9 @@ semver = \"0.9.0\"\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n url = { version =  \"2.1.0\", features = [\"serde\"] }\n \n+[dev-dependencies]\n+quote = \"*\"\n+syn = { version = \"*\", features = [\"full\"] }\n+\n [features]\n deny-warnings = []"}, {"sha": "41f125d48398fd4aba769e031d601631215715b3", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -248,7 +248,6 @@ declare_lint_pass!(Attributes => [\n     INLINE_ALWAYS,\n     DEPRECATED_SEMVER,\n     USELESS_ATTRIBUTE,\n-    EMPTY_LINE_AFTER_OUTER_ATTR,\n     UNKNOWN_CLIPPY_LINTS,\n ]);\n \n@@ -480,36 +479,6 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n     }\n \n     for attr in attrs {\n-        let attr_item = if let AttrKind::Normal(ref attr) = attr.kind {\n-            attr\n-        } else {\n-            continue;\n-        };\n-\n-        if attr.style == AttrStyle::Outer {\n-            if attr_item.args.inner_tokens().is_empty() || !is_present_in_source(cx, attr.span) {\n-                return;\n-            }\n-\n-            let begin_of_attr_to_item = Span::new(attr.span.lo(), span.lo(), span.ctxt());\n-            let end_of_attr_to_item = Span::new(attr.span.hi(), span.lo(), span.ctxt());\n-\n-            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n-                let lines = snippet.split('\\n').collect::<Vec<_>>();\n-                let lines = without_block_comments(lines);\n-\n-                if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n-                    span_lint(\n-                        cx,\n-                        EMPTY_LINE_AFTER_OUTER_ATTR,\n-                        begin_of_attr_to_item,\n-                        \"Found an empty line after an outer attribute. \\\n-                         Perhaps you forgot to add a `!` to make it an inner attribute?\",\n-                    );\n-                }\n-            }\n-        }\n-\n         if let Some(values) = attr.meta_item_list() {\n             if values.len() != 1 || !attr.check_name(sym!(inline)) {\n                 continue;\n@@ -551,15 +520,57 @@ fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n     }\n }\n \n-declare_lint_pass!(EarlyAttributes => [DEPRECATED_CFG_ATTR, MISMATCHED_TARGET_OS]);\n+declare_lint_pass!(EarlyAttributes => [\n+    DEPRECATED_CFG_ATTR,\n+    MISMATCHED_TARGET_OS,\n+    EMPTY_LINE_AFTER_OUTER_ATTR,\n+]);\n \n impl EarlyLintPass for EarlyAttributes {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &rustc_ast::ast::Item) {\n+        check_empty_line_after_outer_attr(cx, item);\n+    }\n+\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n         check_deprecated_cfg_attr(cx, attr);\n         check_mismatched_target_os(cx, attr);\n     }\n }\n \n+fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::ast::Item) {\n+    for attr in &item.attrs {\n+        let attr_item = if let AttrKind::Normal(ref attr) = attr.kind {\n+            attr\n+        } else {\n+            return;\n+        };\n+\n+        if attr.style == AttrStyle::Outer {\n+            if attr_item.args.inner_tokens().is_empty() || !is_present_in_source(cx, attr.span) {\n+                return;\n+            }\n+\n+            let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt());\n+            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt());\n+\n+            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n+                let lines = snippet.split('\\n').collect::<Vec<_>>();\n+                let lines = without_block_comments(lines);\n+\n+                if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n+                    span_lint(\n+                        cx,\n+                        EMPTY_LINE_AFTER_OUTER_ATTR,\n+                        begin_of_attr_to_item,\n+                        \"Found an empty line after an outer attribute. \\\n+                        Perhaps you forgot to add a `!` to make it an inner attribute?\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n     if_chain! {\n         // check cfg_attr"}, {"sha": "2758b9a7e760439433abd5011244713d2b9c75c8", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -38,7 +38,7 @@ fn clippy_driver_path() -> PathBuf {\n //        as what we manually pass to `cargo` invocation\n fn third_party_crates() -> String {\n     use std::collections::HashMap;\n-    static CRATES: &[&str] = &[\"serde\", \"serde_derive\", \"regex\", \"clippy_lints\"];\n+    static CRATES: &[&str] = &[\"serde\", \"serde_derive\", \"regex\", \"clippy_lints\", \"syn\", \"quote\"];\n     let dep_dir = cargo::TARGET_LIB.join(\"deps\");\n     let mut crates: HashMap<&str, PathBuf> = HashMap::with_capacity(CRATES.len());\n     for entry in fs::read_dir(dep_dir).unwrap() {"}, {"sha": "e6626d57a772253f7db6def1ce4c17e99e25562a", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -0,0 +1,37 @@\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(repr128, proc_macro_hygiene, proc_macro_quote)]\n+#![allow(clippy::useless_conversion)]\n+\n+extern crate proc_macro;\n+extern crate quote;\n+extern crate syn;\n+\n+use proc_macro::TokenStream;\n+use quote::{quote, quote_spanned};\n+use syn::parse_macro_input;\n+use syn::{parse_quote, ItemTrait, TraitItem};\n+\n+#[proc_macro_attribute]\n+pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    let mut item = parse_macro_input!(input as ItemTrait);\n+    for inner in &mut item.items {\n+        if let TraitItem::Method(method) = inner {\n+            let sig = &method.sig;\n+            let block = &mut method.default;\n+            if let Some(block) = block {\n+                let brace = block.brace_token;\n+\n+                let my_block = quote_spanned!( brace.span => {\n+                    // Should not trigger `empty_line_after_outer_attr`\n+                    #[crate_type = \"lib\"]\n+                    #sig #block\n+                    Vec::new()\n+                });\n+                *block = parse_quote!(#my_block);\n+            }\n+        }\n+    }\n+    TokenStream::from(quote!(#item))\n+}"}, {"sha": "3e92bca986ab55b4990a8d32e4f3f64a89f65289", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -1,8 +1,12 @@\n+// aux-build:proc_macro_attr.rs\n #![warn(clippy::empty_line_after_outer_attr)]\n #![allow(clippy::assertions_on_constants)]\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n \n+#[macro_use]\n+extern crate proc_macro_attr;\n+\n // This should produce a warning\n #[crate_type = \"lib\"]\n \n@@ -93,4 +97,17 @@ pub struct S;\n /* test */\n pub struct T;\n \n-fn main() { }\n+// This should not produce a warning\n+// See https://github.com/rust-lang/rust-clippy/issues/5567\n+#[fake_async_trait]\n+pub trait Bazz {\n+    fn foo() -> Vec<u8> {\n+        let _i = \"\";\n+\n+\n+\n+        vec![]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bf753a732f000f78c956833f7ea3f7f25bed7286", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67167be1679c60eefa2c314c5e4a2b673d5eef11/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=67167be1679c60eefa2c314c5e4a2b673d5eef11", "patch": "@@ -1,5 +1,5 @@\n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:7:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:11:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -10,15 +10,15 @@ LL | | fn with_one_newline_and_comment() { assert!(true) }\n    = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:19:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:23:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | fn with_one_newline() { assert!(true) }\n    | |_\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:24:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:28:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -27,23 +27,23 @@ LL | | fn with_two_newlines() { assert!(true) }\n    | |_\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:31:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:35:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | enum Baz {\n    | |_\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:39:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:43:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | struct Foo {\n    | |_\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:47:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:51:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |"}]}