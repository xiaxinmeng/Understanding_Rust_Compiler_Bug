{"sha": "f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmUwN2QxZjNmOGU5ODEyMDE2OWRlYTU5ZWJjNGQyZWVlNDI1NWM=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-09-02T05:39:44Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-09-14T04:47:14Z"}, "message": "Add support for negative literals.", "tree": {"sha": "0030bbd69f22ad0e5249ddc84bf27ddcdccd0d19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0030bbd69f22ad0e5249ddc84bf27ddcdccd0d19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "html_url": "https://github.com/rust-lang/rust/commit/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ffd2ea26c657ccab0a467c6843b7ce4300ef63", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ffd2ea26c657ccab0a467c6843b7ce4300ef63", "html_url": "https://github.com/rust-lang/rust/commit/c0ffd2ea26c657ccab0a467c6843b7ce4300ef63"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "1d6a10744b5699edc6a1de59a6abe3d514da25a3", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "patch": "@@ -158,10 +158,15 @@ fn consume_block_comment(rdr: reader) {\n     be consume_whitespace_and_comments(rdr);\n }\n \n-fn digits_to_string(s: str) -> int {\n+fn string_to_int(s: str) -> int {\n+    let negative = false;\n+    if str::char_at(s, 0u) == '-' {\n+        negative = true;\n+        s = str::substr(s, 1u, str::byte_len(s) - 1u);\n+    }\n     let accum_int: int = 0;\n     for c: u8 in s { accum_int *= 10; accum_int += dec_digit_val(c as char); }\n-    ret accum_int;\n+    ret if negative { -accum_int } else { accum_int };\n }\n \n fn scan_exponent(rdr: reader) -> option::t<str> {\n@@ -182,6 +187,17 @@ fn scan_exponent(rdr: reader) -> option::t<str> {\n     } else { ret none::<str>; }\n }\n \n+fn scan_dec_digits_with_prefix(rdr: reader) -> str {\n+    let negative = false;\n+    if rdr.curr() == '-' {\n+        negative = true;\n+        rdr.bump();\n+    }\n+    let digits = scan_dec_digits(rdr);\n+    if negative { str::unshift_char(digits, '-') }\n+    ret digits;\n+}\n+\n fn scan_dec_digits(rdr: reader) -> str {\n     let c = rdr.curr();\n     let rslt: str = \"\";\n@@ -196,7 +212,6 @@ fn scan_dec_digits(rdr: reader) -> str {\n fn scan_number(c: char, rdr: reader) -> token::token {\n     let accum_int = 0;\n     let num_str: str = \"\";\n-    let is_dec_integer: bool = false;\n     let n = rdr.next();\n     if c == '0' && n == 'x' {\n         rdr.bump();\n@@ -216,8 +231,10 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n             rdr.bump();\n             c = rdr.curr();\n         }\n-    } else { num_str = scan_dec_digits(rdr); is_dec_integer = true; }\n-    if is_dec_integer { accum_int = digits_to_string(num_str); }\n+    } else {\n+        num_str = scan_dec_digits_with_prefix(rdr);\n+        accum_int = string_to_int(num_str);\n+    }\n     c = rdr.curr();\n     n = rdr.next();\n     if c == 'u' || c == 'i' {\n@@ -341,7 +358,9 @@ fn next_token_inner(rdr: reader) -> token::token {\n         ret token::IDENT(interner::intern::<str>(*rdr.get_interner(),\n                                                  accum_str), is_mod_name);\n     }\n-    if is_dec_digit(c) { ret scan_number(c, rdr); }\n+    if is_dec_digit(c) || (c == '-' && is_dec_digit(rdr.next())) {\n+        ret scan_number(c, rdr);\n+    }\n     fn binop(rdr: reader, op: token::binop) -> token::token {\n         rdr.bump();\n         if rdr.curr() == '=' {"}, {"sha": "78f0451c9cf40dee5d643bb9c84fe20bb7fec76a", "filename": "src/test/run-pass/negative.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c/src%2Ftest%2Frun-pass%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c/src%2Ftest%2Frun-pass%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnegative.rs?ref=f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    alt -5 {\n+      -5 {}\n+      _ { fail }\n+    }\n+}\n\\ No newline at end of file"}]}