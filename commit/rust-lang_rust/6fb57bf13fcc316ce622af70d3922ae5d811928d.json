{"sha": "6fb57bf13fcc316ce622af70d3922ae5d811928d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjU3YmYxM2ZjYzMxNmNlNjIyYWY3MGQzOTIyYWU1ZDgxMTkyOGQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T03:54:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T03:54:25Z"}, "message": "Rollup merge of #39431 - alexcrichton:no-more-makefiles, r=brson\n\nDelete the makefile build system\n\nThis PR deletes the makefile build system in favor of the rustbuild build system. The beta has now been branched so 1.16 will continue to be buildable from the makefiles, but going forward 1.17 will only be buildable with rustbuild.\n\nRustbuild has been the default build system [since 1.15.0](https://github.com/rust-lang/rust/pull/37817) and the makefiles were [proposed for deletion](https://internals.rust-lang.org/t/proposal-for-promoting-rustbuild-to-official-status/4368) at this time back in November of last year.\n\nAnd now with the deletion of these makefiles we can start getting those sweet sweet improvements of using crates.io crates in the compiler!", "tree": {"sha": "9768f794e9c3f6afd5922540a2f1aed98618f96b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9768f794e9c3f6afd5922540a2f1aed98618f96b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb57bf13fcc316ce622af70d3922ae5d811928d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb57bf13fcc316ce622af70d3922ae5d811928d", "html_url": "https://github.com/rust-lang/rust/commit/6fb57bf13fcc316ce622af70d3922ae5d811928d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb57bf13fcc316ce622af70d3922ae5d811928d/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8fa5af213e24e83ded9dbed15572045c27fbbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8fa5af213e24e83ded9dbed15572045c27fbbf", "html_url": "https://github.com/rust-lang/rust/commit/3d8fa5af213e24e83ded9dbed15572045c27fbbf"}, {"sha": "c8e0d04878f38e8a91e7a6196fb18878da208887", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e0d04878f38e8a91e7a6196fb18878da208887", "html_url": "https://github.com/rust-lang/rust/commit/c8e0d04878f38e8a91e7a6196fb18878da208887"}], "stats": {"total": 8223, "additions": 75, "deletions": 8148}, "files": [{"sha": "a776f1b1e1041f1973bcedc2ea311dfc9ec38d03", "filename": ".travis.yml", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -33,7 +33,6 @@ matrix:\n     - env: IMAGE=x86_64-gnu-aux\n     - env: IMAGE=x86_64-gnu-debug\n     - env: IMAGE=x86_64-gnu-nopt\n-    - env: IMAGE=x86_64-gnu-make\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n     - env: IMAGE=x86_64-gnu-distcheck\n     - env: IMAGE=x86_64-gnu-incremental\n@@ -57,13 +56,6 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n-    - env: >\n-        RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin --disable-rustbuild\n-        SRC=.\n-      os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\""}, {"sha": "429996126f92b6dd7d13fcfd1b0ce5d224842e98", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -93,11 +93,6 @@ system internals, try asking in [`#rust-internals`][pound-rust-internals].\n \n [bootstrap]: https://github.com/rust-lang/rust/tree/master/src/bootstrap/\n \n-> **Note**: the build system was recently rewritten from a jungle of makefiles\n-> to the current incarnation you'll see in `src/bootstrap`. If you experience\n-> bugs you can temporarily revert back to the makefiles with\n-> `--disable-rustbuild` passed to `./configure`.\n-\n ### Configuration\n \n Before you can start building the compiler you need to configure the build for"}, {"sha": "8dbe24213905a64b195458e03045a374f047c7cf", "filename": "Makefile.in", "status": "removed", "additions": 0, "deletions": 297, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,297 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# <help> \\(^o^)/\n-#\n-# Greetings, adventurer! The Rust Build System is at your service.\n-#\n-# Whether you want a genuine copy of `rustc`, access to the latest and\n-# most authoritative Rust documentation, or even to investigate the\n-# most intimate workings of the compiler itself, you've come to the\n-# right place. Let's see what's on the menu.\n-#\n-# Please note that most of these options only work if configure was\n-# run with --disable-rustbuild. For documentation on the new build\n-# system, see CONTRIBUTING.md.\n-#\n-# First, start with one of these build targets:\n-#\n-#   * all - The default. Build a complete, bootstrapped compiler.\n-#           `rustc` will be in `${target-triple}/stage2/bin/`. Run it\n-#           directly from the build directory if you like. This also\n-#           comes with docs in `doc/`.\n-#\n-#   * check - Run the complete test suite\n-#\n-#   * clean - Clean the build repository. It is advised to run this\n-#             command if you want to build Rust again, after an update\n-#             of the git repository.\n-#\n-#   * install - Install Rust. Note that installation is not necessary\n-#               to use the compiler.\n-#\n-#   * uninstall - Uninstall the binaries\n-#\n-# For tips on working with The Rust Build System, just:\n-#\n-#     run `make tips`\n-#\n-# Otherwise\n-#\n-#     run `make`\n-#\n-# </help>\n-#\n-# <tips>\n-#\n-# # The Rust Build System Tip Line\n-#\n-# There are a bazillion different targets you might want to build. Here\n-# are a few ideas.\n-#\n-#   * docs - Build gobs of HTML documentation and put it into `doc/`\n-#   * check-$(crate) - Test a crate, e.g. `check-std`\n-#   * check-ref - Run the language reference tests\n-#   * check-docs - Test the documentation examples\n-#   * check-stage$(stage)-$(crate) - Test a crate in a specific stage\n-#   * check-stage$(stage)-{rpass,rfail,cfail,rmake,...} - Run tests in src/test/\n-#   * check-stage1-T-$(target)-H-$(host) - Run cross-compiled-tests\n-#   * tidy - Basic style check, show highest rustc error code and\n-#     the status of language and lib features\n-#   * rustc-stage$(stage) - Only build up to a specific stage\n-#   * $host/stage1/bin/rustc - Only build stage1 rustc, not libstd. For further\n-#     information see \"Rust recipes for build system success\" below.\n-#\n-# Then mix in some of these environment variables to harness the\n-# ultimate power of The Rust Build System.\n-#\n-#   * `VERBOSE=1` - Print all commands. Use this to see what's going on.\n-#   * `RUSTFLAGS=...` - Add compiler flags to all `rustc` invocations\n-#   * `JEMALLOC_FLAGS=...` - Pass flags to jemalloc's configure script\n-#\n-#   * `TESTNAME=...` - Specify the name of tests to run\n-#   * `CHECK_IGNORED=1` - Run normally-ignored tests\n-#   * `PLEASE_BENCH=1` - Run crate benchmarks (enable `--bench` flag)\n-#\n-#   * `CFG_ENABLE_VALGRIND=1` - Run tests under valgrind\n-#   * `VALGRIND_COMPILE=1` - Run the compiler itself under valgrind\n-#                            (requires `CFG_ENABLE_VALGRIND`)\n-#\n-#   * `NO_REBUILD=1` - Don't rebootstrap when testing std\n-#                      (and possibly other crates)\n-#   * `NO_MKFILE_DEPS=1` - Don't rebuild for modified .mk files\n-#\n-#   * `SAVE_TEMPS=1` - Use `--save-temps` flag on all `rustc` invocations\n-#   * `ASM_COMMENTS=1` - Use `-Z asm-comments`\n-#   * `TIME_PASSES=1` - Use `-Z time-passes`\n-#   * `TIME_LLVM_PASSES=1` - Use `-Z time-llvm-passes`\n-#   * `TRACE=1` - Use `-Z trace`\n-#\n-# # Rust recipes for build system success\n-#\n-#     // Modifying libstd? Use this command to run unit tests just on your change\n-#     make check-stage1-std NO_REBUILD=1 NO_BENCH=1\n-#\n-#     // Modifying just rustc?\n-#     // Compile rustc+libstd once\n-#     make rustc-stage1\n-#     // From now on use this command to rebuild just rustc and reuse the previously built libstd\n-#     // $host is a target triple, eg. x86_64-unknown-linux-gnu\n-#     // The resulting binary is located at $host/stage1/bin/rustc.\n-#     // If there are any issues with libstd recompile it with the command above.\n-#     make $host/stage1/bin/rustc\n-#\n-#     // Added a run-pass test? Use this to test running your test\n-#     make check-stage1-rpass TESTNAME=my-shiny-new-test\n-#\n-#     // Having trouble figuring out which test is failing? Turn off parallel tests\n-#     make check-stage1-std RUST_TEST_THREADS=1\n-#\n-#     // To make debug!() and other logging calls visible, reconfigure:\n-#     ./configure --enable-debug-assertions\n-#     make ....\n-#\n-# If you really feel like getting your hands dirty, then:\n-#\n-#     run `make nitty-gritty`\n-#\n-# # Make command examples\n-#\n-# ## Docs linked commands\n-#\n-# * make check-stage1-rustdocck: Builds rustdoc. It has the advantage to compile\n-#                                quite quickly since we're only using stage1\n-#                                executables.\n-# * make doc/error-index.md: Gets all doc blocks from doc comments and error\n-#                            explanations to put them in a markdown file. You\n-#                            can then test them by running\n-#                            \"rustdoc --test error-index.md\".\n-#\n-# And of course, the wonderfully useful 'make tidy'! Always run it before opening a pull request to rust!\n-#\n-# </tips>\n-#\n-# <nitty-gritty>\n-#\n-# # The Rust Build System\n-#\n-# Gosh I wish there was something useful here (TODO).\n-#\n-# # An (old) explanation of how the build is structured:\n-#\n-# *Note: Hey, like, this is probably inaccurate, and is definitely\n-# an outdated and insufficient explanation of the remarkable\n-# Rust Build System.*\n-#\n-# There are multiple build stages (0-3) needed to verify that the\n-# compiler is properly self-hosting. Each stage is divided between\n-# 'host' artifacts and 'target' artifacts, where the stageN host\n-# compiler builds artifacts for 1 or more stageN target architectures.\n-# Once the stageN target compiler has been built for the host\n-# architecture it is promoted (copied) to a stageN+1 host artifact.\n-#\n-# The stage3 host compiler is a compiler that successfully builds\n-# itself and should (in theory) be bitwise identical to the stage2\n-# host compiler. The process is bootstrapped using a stage0 host\n-# compiler downloaded from a previous snapshot.\n-#\n-# At no time should stageN artifacts be interacting with artifacts\n-# from other stages. For consistency, we use the 'promotion' logic\n-# for all artifacts, even those that don't make sense on non-host\n-# architectures.\n-#\n-# The directory layout for a stage is intended to match the layout\n-# of the installed compiler, and looks like the following:\n-#\n-# stageN - this is the system root, corresponding to, e.g. /usr\n-#   bin - binaries compiled for the host\n-#   lib - libraries used by the host compiler\n-#     rustlib - rustc's own place to organize libraries\n-#       $(target) - target-specific artifacts\n-#         bin - binaries for target architectures\n-#         lib - libraries for target architectures\n-#\n-# A note about host libraries:\n-#\n-# The only libraries that get promoted to stageN/lib are those needed\n-# by rustc. In general, rust programs, even those compiled for the\n-# host architecture will use libraries from the target\n-# directories. This gives rust some freedom to experiment with how\n-# libraries are managed and versioned without polluting the common\n-# areas of the filesystem.\n-#\n-# General rust binaries may still live in the host bin directory; they\n-# will just link against the libraries in the target lib directory.\n-#\n-# Admittedly this is a little convoluted.\n-#\n-# If you find yourself working on the make infrastructure itself, and trying to\n-# find the value of a given variable after expansion, you can use:\n-#\n-# make print-VARIABLE_NAME\n-#\n-# To extract it\n-#\n-# </nitty-gritty>\n-#\n-\n-######################################################################\n-# Primary rules\n-######################################################################\n-\n-# Issue #9531: If you change the order of any of the following (or add\n-# new definitions), make sure definitions always precede their uses,\n-# especially for the dependency lists of recipes.\n-\n-# First, load the variables exported by the configure script\n-include config.mk\n-\n-# Just a few macros used everywhere\n-include $(CFG_SRC_DIR)mk/util.mk\n-# Reconfiguring when the makefiles or submodules change\n-include $(CFG_SRC_DIR)mk/reconfig.mk\n-# All crates and their dependencies\n-include $(CFG_SRC_DIR)mk/crates.mk\n-# Various bits of setup, common macros, and top-level rules\n-include $(CFG_SRC_DIR)mk/main.mk\n-# C and assembly components that are not LLVM\n-include $(CFG_SRC_DIR)mk/rt.mk\n-# Rules for crates in the target directories\n-include $(CFG_SRC_DIR)mk/target.mk\n-# Rules for crates in the host directories\n-include $(CFG_SRC_DIR)mk/host.mk\n-# Special rules for bootstrapping stage0\n-include $(CFG_SRC_DIR)mk/stage0.mk\n-# Rust-specific LLVM extensions\n-include $(CFG_SRC_DIR)mk/rustllvm.mk\n-# Documentation\n-include $(CFG_SRC_DIR)mk/docs.mk\n-# LLVM\n-include $(CFG_SRC_DIR)mk/llvm.mk\n-# Rules for installing debugger scripts\n-include $(CFG_SRC_DIR)mk/debuggers.mk\n-\n-######################################################################\n-# Secondary makefiles, conditionalized for speed\n-######################################################################\n-\n-# The test suite\n-ifneq ($(strip $(findstring check,$(MAKECMDGOALS)) \\\n-               $(findstring test,$(MAKECMDGOALS))  \\\n-               $(findstring tidy,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including test rules)\n-  include $(CFG_SRC_DIR)mk/tests.mk\n-  include $(CFG_SRC_DIR)mk/grammar.mk\n-endif\n-\n-# Copy all the distributables to another directory for binary install\n-ifneq ($(strip $(findstring prepare,$(MAKECMDGOALS)) \\\n-               $(findstring dist,$(MAKECMDGOALS)) \\\n-               $(findstring install,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including prepare rules)\n-  include $(CFG_SRC_DIR)mk/prepare.mk\n-endif\n-\n-# Source and binary distribution artifacts\n-ifneq ($(strip $(findstring dist,$(MAKECMDGOALS)) \\\n-               $(findstring install,$(MAKECMDGOALS)) \\\n-               $(findstring clean,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including dist rules)\n-  include $(CFG_SRC_DIR)mk/dist.mk\n-endif\n-\n-# (Unix) Installation from the build directory\n-ifneq ($(findstring install,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including install rules)\n-  include $(CFG_SRC_DIR)mk/install.mk\n-endif\n-\n-# Cleaning\n-ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including clean rules)\n-  include $(CFG_SRC_DIR)mk/clean.mk\n-endif\n-\n-# CTAGS building\n-ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.vi,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.rustc.emacs,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.rustc.vi,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including ctags rules)\n-  include $(CFG_SRC_DIR)mk/ctags.mk\n-endif\n-\n-.DEFAULT:\n-\t@echo\n-\t@echo \"======================================================\"\n-\t@echo \"== If you need help, run 'make help' or 'make tips' ==\"\n-\t@echo \"======================================================\"\n-\t@echo\n-\texit 1"}, {"sha": "2183d8da95f89bb40946449ca4d7f3c92fa0fa62", "filename": "appveyor.yml", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -15,11 +15,6 @@ environment:\n     SCRIPT: python x.py test --host i686-pc-windows-msvc --target i686-pc-windows-msvc && python x.py dist\n     DEPLOY: 1\n \n-  # MSVC makefiles\n-  - MSYS_BITS: 64\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --disable-rustbuild\n-    RUST_CHECK_TARGET: check\n-\n   # MSVC cargotest\n   - MSYS_BITS: 64\n     NO_VENDOR: 1\n@@ -58,13 +53,6 @@ environment:\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n \n-  - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --disable-rustbuild\n-    RUST_CHECK_TARGET: check\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n-    MINGW_DIR: mingw32\n-\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test && python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended"}, {"sha": "597f007633640fbb079bde04d002ba4f733e0816", "filename": "configure", "status": "modified", "additions": 2, "deletions": 856, "changes": 858, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -994,191 +994,12 @@ then\n     putvar CFG_LOCAL_RUST_ROOT\n fi\n \n-# Force bitrig to build with clang; gcc doesn't like us there\n-if [ $CFG_OSTYPE = unknown-bitrig ]\n-then\n-    step_msg \"on Bitrig, forcing use of clang\"\n-    CFG_ENABLE_CLANG=1\n-fi\n-\n-# default gcc version under OpenBSD maybe too old, try using egcc, which is a\n-# gcc version from ports\n-if [ $CFG_OSTYPE = unknown-openbsd ]\n-then\n-    if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-        step_msg \"older GCC found, try with egcc instead\"\n-\n-        # probe again but using egcc\n-        probe CFG_GCC egcc\n-\n-        # and use egcc/eg++ for CC/CXX too if it was found\n-        # (but user setting has priority)\n-        if [ -n \"$CFG_GCC\" ]; then\n-            CC=\"${CC:-egcc}\"\n-            CXX=\"${CXX:-eg++}\"\n-        fi\n-    fi\n-fi\n-\n-# OS X 10.9, gcc is actually clang. This can cause some confusion in the build\n-# system, so if we find that gcc is clang, we should just use clang directly.\n-if [ $CFG_OSTYPE = apple-darwin -a -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_OSX_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1 | grep \"Apple LLVM version\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"on OS X >=10.9, forcing use of clang\"\n-        CFG_ENABLE_CLANG=1\n-    else\n-        if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-            step_msg \"older GCC found, using clang instead\"\n-            CFG_ENABLE_CLANG=1\n-        else\n-            # on OS X, with xcode 5 and newer, certain developers may have\n-            # cc, gcc and g++ point to a  mixture of clang and gcc\n-            # if so, this will create very strange build errors\n-            # this last stanza is to detect some such problems and save the future rust\n-            # contributor some time solving that issue.\n-            # this detection could be generalized to other OSes aside from OS X\n-            # but the issue seems most likely to happen on OS X\n-\n-            chk_cc () {\n-                $1 --version 2> /dev/null | grep -q $2\n-            }\n-            # check that gcc, cc and g++ all point to the same compiler.\n-            # note that for xcode 5, g++ points to clang, not clang++\n-            if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n-                (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))); then\n-                err \"the gcc and g++ in your path point to different compilers.\n-    Check which versions are in your path with gcc --version and g++ --version.\n-    To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n-            fi\n-\n-        fi\n-    fi\n-fi\n-\n-# If the clang isn't already enabled, check for GCC, and if it is missing, turn\n-# on clang as a backup.\n-if [ -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-  CFG_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1)\n-  if [ $? -ne 0 ]\n-  then\n-    step_msg \"GCC not installed, will try using Clang\"\n-    CFG_ENABLE_CLANG=1\n-  fi\n-fi\n-\n-# Okay, at this point, we have made up our minds about whether we are\n-# going to force CFG_ENABLE_CLANG or not; save the setting if so.\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    putvar CFG_ENABLE_CLANG\n-fi\n-\n-if [ -z \"$CFG_DISABLE_LIBCPP\" -a -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_USING_LIBCPP=\"1\"\n-else\n-    CFG_USING_LIBCPP=\"0\"\n-fi\n-\n # Same with jemalloc.  save the setting here.\n if [ -n \"$CFG_DISABLE_JEMALLOC\" ]\n then\n     putvar CFG_DISABLE_JEMALLOC\n fi\n \n-if [ -n \"$CFG_LLVM_ROOT\" -a -z \"$CFG_DISABLE_LLVM_VERSION_CHECK\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n-then\n-    step_msg \"using custom LLVM at $CFG_LLVM_ROOT\"\n-\n-    LLVM_CONFIG=\"$CFG_LLVM_ROOT/bin/llvm-config\"\n-    LLVM_VERSION=$($LLVM_CONFIG --version)\n-\n-    case $LLVM_VERSION in\n-        (3.[7-9]*)\n-            msg \"found ok version of LLVM: $LLVM_VERSION\"\n-            ;;\n-        (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.7\"\n-            ;;\n-    esac\n-\n-    if \"$CFG_LLVM_ROOT/bin/llvm-mc\" -help | grep -- \"-relocation-model\"; then\n-        msg \"found older llvm-mc\"\n-        CFG_LLVM_MC_HAS_RELOCATION_MODEL=1\n-        putvar CFG_LLVM_MC_HAS_RELOCATION_MODEL\n-    fi\n-fi\n-\n-# Even when the user overrides the choice of CC, still try to detect\n-# clang to disable some clang-specific warnings.  We here draw a\n-# distinction between:\n-#\n-#  CFG_ENABLE_CLANG : passed --enable-clang, or host \"requires\" clang,\n-#  CFG_USING_CLANG : compiler (clang / gcc / $CC) looks like clang.\n-#\n-# This distinction is important because there are some safeguards we\n-# would prefer to skip when merely CFG_USING_CLANG is set; but when\n-# CFG_ENABLE_CLANG is set, that indicates that we are opting into\n-# running such safeguards.\n-\n-if [ -n \"$CC\" ]\n-then\n-    msg \"skipping compiler inference steps; using provided CC=$CC\"\n-    CFG_CC=\"$CC\"\n-\n-    CFG_OSX_CC_VERSION=$(\"$CFG_CC\" --version 2>&1 | grep \"clang\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"note, user-provided CC looks like clang; CC=$CC.\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    fi\n-else\n-    if [ -n \"$CFG_ENABLE_CLANG\" ]\n-    then\n-        if [ -z \"$CFG_CLANG\" ]\n-        then\n-            err \"clang requested but not found\"\n-        fi\n-        CFG_CC=\"$CFG_CLANG\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    else\n-        CFG_CC=\"gcc\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    case \"$CC\" in\n-        (''|*clang)\n-        if [ -z \"$CC\" ]\n-        then\n-            CFG_CC=\"clang\"\n-            CFG_CXX=\"clang++\"\n-        fi\n-    esac\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-then\n-    if [ -z \"$CFG_CCACHE\" ]\n-    then\n-        err \"ccache requested but not found\"\n-    fi\n-\n-    CFG_CC=\"ccache $CFG_CC\"\n-fi\n-\n-if [ -z \"$CC\" -a -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n-then\n-    err \"either clang or gcc is required\"\n-fi\n-\n # All safeguards based on $CFG_ENABLE_CLANG should occur before this\n # point in the script; after this point, script logic should inspect\n # $CFG_USING_CLANG rather than $CFG_ENABLE_CLANG.\n@@ -1191,12 +1012,6 @@ envopt CFLAGS\n envopt CXXFLAGS\n envopt LDFLAGS\n \n-# stdc++ name in use\n-# used to manage non-standard name (on OpenBSD for example)\n-program_transform_name=$($CFG_CC -v 2>&1 | sed -n \"s/.*--program-transform-name='\\([^']*\\)'.*/\\1/p\")\n-CFG_STDCPP_NAME=$(echo \"stdc++\" | sed \"${program_transform_name}\")\n-putvar CFG_STDCPP_NAME\n-\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n@@ -1224,651 +1039,6 @@ do\n done\n CFG_TARGET=$V_TEMP\n \n-# check target-specific tool-chains\n-for i in $CFG_TARGET\n-do\n-    L_CHECK=false\n-    for j in $CFG_SUPPORTED_TARGET\n-    do\n-        if [ $i = $j ]\n-        then\n-            L_CHECK=true\n-        fi\n-    done\n-\n-    if [ $L_CHECK = false ]\n-    then\n-        err \"unsupported target triples \\\"$i\\\" found\"\n-    fi\n-\n-    case $i in\n-        *android*)\n-            case $i in\n-                armv7-linux-androideabi)\n-                    cmd_prefix=\"arm-linux-androideabi\"\n-                    ;;\n-                *)\n-                    cmd_prefix=$i\n-                    ;;\n-            esac\n-\n-            upper_snake_target=$(echo \"$i\" | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n-            eval ndk=\\$\"CFG_${upper_snake_target}_NDK\"\n-            if [ -z \"$ndk\" ]\n-            then\n-                ndk=$CFG_ANDROID_CROSS_PATH\n-                eval \"CFG_${upper_snake_target}_NDK\"=$CFG_ANDROID_CROSS_PATH\n-                warn \"generic/default Android NDK option is deprecated (use --$i-ndk option instead)\"\n-            fi\n-\n-            # Perform a basic sanity check of the NDK\n-            for android_ndk_tool in \"$ndk/bin/$cmd_prefix-gcc\" \"$ndk/bin/$cmd_prefix-g++\" \"$ndk/bin/$cmd_prefix-ar\"\n-            do\n-                if [ ! -f $android_ndk_tool ]\n-                then\n-                    err \"NDK tool $android_ndk_tool not found (bad or missing --$i-ndk option?)\"\n-                fi\n-            done\n-            ;;\n-        *-unknown-nacl)\n-\t    if [ -z \"$CFG_NACL_CROSS_PATH\" ]\n-\t    then\n-\t\terr \"I need the NaCl SDK path! (use --nacl-cross-path)\"\n-\t    fi\n-\t    ;;\n-        arm-apple-darwin)\n-            if [ $CFG_OSTYPE != apple-darwin ]\n-            then\n-                err \"The iOS target is only supported on Mac OS X\"\n-            fi\n-            ;;\n-\n-        *-msvc)\n-            # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n-            # The Cygwin build does not have generators for Visual Studio, so\n-            # detect that here and error.\n-            if ! \"$CFG_CMAKE\" --help | sed -n '/^Generators/,$p' | grep 'Visual Studio' > /dev/null\n-            then\n-                err \"\n-\n-cmake does not support Visual Studio generators.\n-\n-This is likely due to it being an msys/cygwin build of cmake, \\\n-rather than the required windows version, built using MinGW \\\n-or Visual Studio.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-cmake \\\n-package instead of cmake:\n-\n-$ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n-\"\n-            fi\n-\n-            # Use the REG program to figure out where VS is installed\n-            # We need to figure out where cl.exe and link.exe are, so we do some\n-            # munging and some probing here. We also look for the default\n-            # INCLUDE and LIB variables for MSVC so we can set those in the\n-            # build system as well.\n-            install=$(cmd //c reg QUERY \\\n-                       'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\14.0' \\\n-                       -v InstallDir)\n-            if [ -z \"$install\" ]; then\n-              install=$(cmd //c reg QUERY \\\n-                         'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\12.0' \\\n-                         -v InstallDir)\n-            fi\n-            need_ok \"couldn't find visual studio install root\"\n-            CFG_MSVC_ROOT=$(echo \"$install\" | grep InstallDir | sed 's/.*REG_SZ[ ]*//')\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            putvar CFG_MSVC_ROOT\n-\n-            case $i in\n-                x86_64-*)\n-                    bits=x86_64\n-                    msvc_part=amd64\n-                    ;;\n-                i*86-*)\n-                    bits=i386\n-                    msvc_part=\n-                    ;;\n-                *)\n-                    err \"can only target x86 targets for MSVC\"\n-                    ;;\n-            esac\n-            bindir=\"${CFG_MSVC_ROOT}/VC/bin\"\n-            if [ -n \"$msvc_part\" ]; then\n-                bindir=\"$bindir/$msvc_part\"\n-            fi\n-            eval CFG_MSVC_BINDIR_$bits=\"\\\"$bindir\\\"\"\n-            eval CFG_MSVC_CL_$bits=\"\\\"$bindir/cl.exe\\\"\"\n-            eval CFG_MSVC_LIB_$bits=\"\\\"$bindir/lib.exe\\\"\"\n-            eval CFG_MSVC_LINK_$bits=\"\\\"$bindir/link.exe\\\"\"\n-\n-            vcvarsall=\"${CFG_MSVC_ROOT}/VC/vcvarsall.bat\"\n-            include_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !INCLUDE!)\n-            need_ok \"failed to learn about MSVC's INCLUDE\"\n-            lib_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !LIB!)\n-            need_ok \"failed to learn about MSVC's LIB\"\n-\n-            eval CFG_MSVC_INCLUDE_PATH_${bits}=\"\\\"$include_path\\\"\"\n-            eval CFG_MSVC_LIB_PATH_${bits}=\"\\\"$lib_path\\\"\"\n-\n-            putvar CFG_MSVC_BINDIR_${bits}\n-            putvar CFG_MSVC_CL_${bits}\n-            putvar CFG_MSVC_LIB_${bits}\n-            putvar CFG_MSVC_LINK_${bits}\n-            putvar CFG_MSVC_INCLUDE_PATH_${bits}\n-            putvar CFG_MSVC_LIB_PATH_${bits}\n-            ;;\n-\n-        *)\n-            ;;\n-    esac\n-done\n-\n-if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n-then\n-    # There are some MSYS python builds which will auto-translate\n-    # windows-style paths to MSYS-style paths in Python itself.\n-    # Unfortunately this breaks LLVM's build system as somewhere along\n-    # the line LLVM prints a path into a file from Python and then CMake\n-    # later tries to interpret that path. If Python prints a MSYS path\n-    # and CMake tries to use it as a Windows path, you're gonna have a\n-    # Bad Time.\n-    #\n-    # Consequently here we try to detect when that happens and print an\n-    # error if it does.\n-    if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/' > /dev/null\n-    then\n-        err \"\n-\n-python is silently translating windows paths to MSYS paths \\\n-and the build will fail if this python is used.\n-\n-Either an official python install must be used or an \\\n-alternative python package in MinGW must be used.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-python2 \\\n-package instead of python2:\n-\n-$ pacman -S mingw-w64-x86_64-python2\n-\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_PERF\" ]\n-then\n-    HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`\n-    if [ -z \"$HAVE_PERF_LOGFD\" ];\n-    then\n-        CFG_PERF_WITH_LOGFD=1\n-        putvar CFG_PERF_WITH_LOGFD\n-    fi\n-fi\n-\n-if [ -n \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-\n-  step_msg \"making directories\"\n-\n-  for i in \\\n-      doc doc/std doc/extra \\\n-      dl tmp dist\n-  do\n-      make_dir $i\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/llvm\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/rustllvm\n-  done\n-\n-  for t in $CFG_TARGET\n-  do\n-    make_dir $t/rt\n-    for s in 0 1 2 3\n-    do\n-      make_dir $t/rt/stage$s\n-      make_dir $t/rt/jemalloc\n-      make_dir $t/rt/compiler-rt\n-      for i in                                          \\\n-        isaac sync test \\\n-        arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n-      do\n-        make_dir $t/rt/stage$s/$i\n-      done\n-    done\n-  done\n-\n-  for h in $CFG_HOST\n-  do\n-      for t in $CFG_TARGET\n-      do\n-          # host bin dir stage0\n-          make_dir $h/stage0/bin\n-\n-          # host lib dir stage0\n-          make_dir $h/stage0/lib\n-\n-          # host test dir stage0\n-          make_dir $h/stage0/test\n-\n-          # target bin dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/bin\n-\n-          # target lib dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/lib\n-\n-          for i in 1 2 3\n-          do\n-              # host bin dir\n-              make_dir $h/stage$i/bin\n-\n-              # host lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE\n-\n-              # host test dir\n-              make_dir $h/stage$i/test\n-\n-              # target bin dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n-\n-              # target lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n-          done\n-      done\n-\n-      make_dir $h/test/run-pass\n-      make_dir $h/test/run-pass-valgrind\n-      make_dir $h/test/run-pass-fulldeps\n-      make_dir $h/test/run-fail\n-      make_dir $h/test/run-fail-fulldeps\n-      make_dir $h/test/compile-fail\n-      make_dir $h/test/parse-fail\n-      make_dir $h/test/compile-fail-fulldeps\n-      make_dir $h/test/bench\n-      make_dir $h/test/perf\n-      make_dir $h/test/pretty\n-      make_dir $h/test/debuginfo-gdb\n-      make_dir $h/test/debuginfo-lldb\n-      make_dir $h/test/codegen\n-      make_dir $h/test/codegen-units\n-      make_dir $h/test/rustdoc\n-  done\n-\n-fi\n-\n-# Configure submodules\n-step_msg \"configuring submodules\"\n-\n-# Have to be in the top of src directory for this\n-if [ -z \"$CFG_DISABLE_MANAGE_SUBMODULES\" ] && [ -n \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    cd ${CFG_SRC_DIR}\n-\n-    msg \"git: submodule sync\"\n-    \"${CFG_GIT}\" submodule sync\n-\n-    msg \"git: submodule init\"\n-    \"${CFG_GIT}\" submodule init\n-\n-    # Disable submodules that we're not using\n-    if [ -n \"${CFG_LLVM_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/llvm\"\n-        \"${CFG_GIT}\" submodule deinit src/llvm\n-    fi\n-    if [ -n \"${CFG_JEMALLOC_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/jemalloc\"\n-        \"${CFG_GIT}\" submodule deinit src/jemalloc\n-    fi\n-\n-    msg \"git: submodule update\"\n-    \"${CFG_GIT}\" submodule update\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach sync\"\n-    \"${CFG_GIT}\" submodule foreach --recursive 'if test -e .gitmodules; then git submodule sync; fi'\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach update\"\n-    \"${CFG_GIT}\" submodule update --recursive\n-    need_ok \"git failed\"\n-\n-    # NB: this is just for the sake of getting the submodule SHA1 values\n-    # and status written into the build log.\n-    msg \"git: submodule status\"\n-    \"${CFG_GIT}\" submodule status --recursive\n-\n-    msg \"git: submodule clobber\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git clean -dxf\n-    need_ok \"git failed\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git checkout .\n-    need_ok \"git failed\"\n-\n-    cd ${CFG_BUILD_DIR}\n-fi\n-\n-# Do a sanity check that the submodule source exists. Because GitHub\n-# automatically publishes broken tarballs that can't be disabled, and\n-# people download them and try to use them.\n-if [ ! -e \"${CFG_SRC_DIR}/src/liblibc\" ]; then\n-    err \"some submodules are missing. Is this a broken tarball?\n-\n-If you downloaded this tarball from the GitHub release pages at\n-https://github.com/rust-lang/rust/releases,\n-then please delete it and instead download the source from\n-https://www.rust-lang.org/downloads.html\"\n-\n-fi\n-\n-# Configure llvm, only if necessary\n-step_msg \"looking at LLVM\"\n-CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_HOST\n-do\n-    do_reconfigure=1\n-    is_msvc=0\n-    case \"$t\" in\n-        (*-msvc)\n-        is_msvc=1\n-        ;;\n-    esac\n-\n-    if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-    then\n-        msg \"not configuring LLVM, rustbuild in use\"\n-        do_reconfigure=0\n-    elif [ -z \"$CFG_LLVM_ROOT\" ]\n-    then\n-        LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n-        LLVM_INST_DIR=$LLVM_BUILD_DIR\n-        # For some weird reason the MSVC output dir is different than Unix\n-        if [ ${is_msvc} -ne 0 ]; then\n-            if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n-            then\n-                # Just use LLVM straight from its build directory to\n-                # avoid 'make install' time\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug\n-            else\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n-            fi\n-        fi\n-    else\n-        msg \"not reconfiguring LLVM, external LLVM root\"\n-        # The user is using their own LLVM\n-        LLVM_BUILD_DIR=\n-        LLVM_INST_DIR=$CFG_LLVM_ROOT\n-        do_reconfigure=0\n-        # Check that LLVm FileCheck is available. Needed for the tests\n-        if [ -z \"$CFG_DISABLE_CODEGEN_TESTS\" ]; then\n-            need_cmd $LLVM_INST_DIR/bin/FileCheck\n-        fi\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-    # because git is hilarious, it might have put the module index\n-    # in a couple places.\n-        index1=\"${CFG_SRC_DIR}.git/modules/src/llvm/index\"\n-        index2=\"${CFG_SRC_DIR}src/llvm/.git/index\"\n-        for index in ${index1} ${index2}\n-        do\n-            config_status=\"${LLVM_BUILD_DIR}/config.status\"\n-            if test -e ${index} -a \\\n-                    -e ${config_status} -a \\\n-                    ${config_status} -nt ${index}\n-            then\n-                msg \"not reconfiguring LLVM, config.status is fresh\"\n-                do_reconfigure=0\n-            fi\n-        done\n-    fi\n-\n-    # We need the generator later on for compiler-rt even if LLVM's not built\n-    if [ -n \"$CFG_NINJA\" ]\n-    then\n-        generator=\"Ninja\"\n-    elif [ ${is_msvc} -ne 0 ]\n-    then\n-        case \"$CFG_MSVC_ROOT\" in\n-            *14.0*)\n-                generator=\"Visual Studio 14 2015\"\n-                ;;\n-            *12.0*)\n-                generator=\"Visual Studio 12 2013\"\n-                ;;\n-            *)\n-                err \"can't determine generator for LLVM cmake\"\n-                ;;\n-        esac\n-        case \"$t\" in\n-            x86_64-*)\n-                generator=\"$generator Win64\"\n-                ;;\n-            i686-*)\n-                ;;\n-            *)\n-                err \"can only build LLVM for x86 platforms\"\n-                ;;\n-        esac\n-    else\n-        generator=\"Unix Makefiles\"\n-    fi\n-    CFG_CMAKE_GENERATOR=$generator\n-    putvar CFG_CMAKE_GENERATOR\n-\n-    msg \"configuring LLVM for $t\"\n-\n-    LLVM_CFLAGS_32=\"\"\n-    LLVM_CXXFLAGS_32=\"\"\n-    LLVM_LDFLAGS_32=\"\"\n-    LLVM_CFLAGS_64=\"\"\n-    LLVM_CXXFLAGS_64=\"\"\n-    LLVM_LDFLAGS_64=\"\"\n-\n-    case \"$CFG_CC\" in\n-        (\"ccache clang\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"clang++\"\n-            LLVM_CC_32_ARG1=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"clang++\"\n-            LLVM_CC_64_ARG1=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"clang\")\n-            LLVM_CXX_32=\"clang++\"\n-            LLVM_CC_32=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"clang++\"\n-            LLVM_CC_64=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"ccache gcc\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"g++\"\n-            LLVM_CC_32_ARG1=\"gcc\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"g++\"\n-            LLVM_CC_64_ARG1=\"gcc\"\n-            ;;\n-        (\"gcc\")\n-            if [ -z \"$CFG_ENABLE_SCCACHE\" ]; then\n-                LLVM_CXX_32=\"g++\"\n-                LLVM_CC_32=\"gcc\"\n-\n-                LLVM_CXX_64=\"g++\"\n-                LLVM_CC_64=\"gcc\"\n-            else\n-                LLVM_CXX_32=\"sccache\"\n-                LLVM_CC_32=\"sccache\"\n-                LLVM_CXX_32_ARG1=\"g++\"\n-                LLVM_CC_32_ARG1=\"gcc\"\n-\n-                LLVM_CXX_64=\"sccache\"\n-                LLVM_CC_64=\"sccache\"\n-                LLVM_CXX_64_ARG1=\"g++\"\n-                LLVM_CC_64_ARG1=\"gcc\"\n-            fi\n-            ;;\n-\n-        (*)\n-            msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-            then\n-                if [ -z \"$CFG_CCACHE\" ]\n-                then\n-                    err \"ccache requested but not found\"\n-                fi\n-\n-                LLVM_CXX_32=\"ccache\"\n-                LLVM_CC_32=\"ccache\"\n-                LLVM_CXX_32_ARG1=\"$CXX\"\n-                LLVM_CC_32_ARG1=\"$CC\"\n-\n-                LLVM_CXX_64=\"ccache\"\n-                LLVM_CC_64=\"ccache\"\n-                LLVM_CXX_64_ARG1=\"$CXX\"\n-                LLVM_CC_64_ARG1=\"$CC\"\n-            else\n-                LLVM_CXX_32=\"$CXX\"\n-                LLVM_CC_32=\"$CC\"\n-\n-                LLVM_CXX_64=\"$CXX\"\n-                LLVM_CC_64=\"$CC\"\n-            fi\n-\n-            ;;\n-    esac\n-\n-    case \"$CFG_CPUTYPE\" in\n-        (x86*)\n-            LLVM_CFLAGS_32=\"$LLVM_CFLAGS_32 -m32\"\n-            LLVM_CXXFLAGS_32=\"$LLVM_CXXFLAGS_32 -m32\"\n-            LLVM_LDFLAGS_32=\"$LLVM_LDFLAGS_32 -m32\"\n-            ;;\n-    esac\n-\n-    if echo $t | grep -q x86_64\n-    then\n-        LLVM_CXX=$LLVM_CXX_64\n-        LLVM_CC=$LLVM_CC_64\n-        LLVM_CXX_ARG1=$LLVM_CXX_64_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_64_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_64\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n-    else\n-        LLVM_CXX=$LLVM_CXX_32\n-        LLVM_CC=$LLVM_CC_32\n-        LLVM_CXX_ARG1=$LLVM_CXX_32_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_32_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_32\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n-    fi\n-\n-    if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBCXX=ON\"\n-    fi\n-\n-    # Turn off things we don't need\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_TESTS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_EXAMPLES=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_DOCS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ZLIB=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DWITH_POLY=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_TERMINFO=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBEDIT=OFF\"\n-\n-    arch=\"$(echo \"$t\" | cut -d - -f 1)\"\n-\n-    if [ \"$arch\" = i686 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_BUILD_32_BITS=ON\"\n-    fi\n-\n-    if [ \"$t\" != \"$CFG_BUILD\" ]; then\n-        # see http://llvm.org/docs/HowToCrossCompileLLVM.html\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CROSSCOMPILING=True\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGET_ARCH=$arch\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TABLEGEN=$CFG_BUILD_DIR/$CFG_BUILD/llvm/bin/llvm-tblgen\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE=$t\"\n-    fi\n-\n-    # MSVC handles compiler business itself\n-    if [ ${is_msvc} -eq 0 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER=$LLVM_CC\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER=$LLVM_CXX\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_C_FLAGS=$LLVM_CFLAGS'\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_CXX_FLAGS=$LLVM_CXXFLAGS'\"\n-        if [ -n \"$LLVM_CC_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER_ARG1=$LLVM_CC_ARG1\"\n-        fi\n-        if [ -n \"$LLVM_CXX_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER_ARG1=$LLVM_CXX_ARG1\"\n-        fi\n-        # FIXME: What about LDFLAGS?\n-    fi\n-\n-    if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-    elif [ -n \"$CFG_ENABLE_LLVM_RELEASE_DEBUGINFO\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-    fi\n-    if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-    then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-    fi\n-\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n-        (cd $LLVM_BUILD_DIR && eval \"\\\"$CFG_CMAKE\\\"\" $CMAKE_ARGS)\n-        need_ok \"LLVM cmake configure failed\"\n-    fi\n-\n-    # Construct variables for LLVM build and install directories for\n-    # each target. These will be named\n-    # CFG_LLVM_BUILD_DIR_${target_triple} but all the hyphens in\n-    # target_triple will be converted to underscore, because bash\n-    # variables can't contain hyphens. The makefile will then have to\n-    # convert back.\n-    CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n-    CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)\n-    eval ${CFG_LLVM_BUILD_DIR}=\"'$LLVM_BUILD_DIR'\"\n-    eval ${CFG_LLVM_INST_DIR}=\"'$LLVM_INST_DIR'\"\n-done\n-\n-\n step_msg \"writing configuration\"\n \n putvar CFG_SRC_DIR\n@@ -1916,15 +1086,8 @@ do\n     putvar $CFG_LLVM_INST_DIR\n done\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    INPUT_MAKEFILE=src/bootstrap/mk/Makefile.in\n-else\n-    INPUT_MAKEFILE=Makefile.in\n-fi\n-\n msg\n-copy_if_changed ${CFG_SRC_DIR}${INPUT_MAKEFILE} ./Makefile\n+copy_if_changed ${CFG_SRC_DIR}src/bootstrap/mk/Makefile.in ./Makefile\n move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n@@ -1941,22 +1104,5 @@ else\n     X_PY=${CFG_SRC_DIR_RELATIVE}x.py\n fi\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-    msg \"NOTE you have now configured rust to use a rewritten build system\"\n-    msg \"     called rustbuild, and as a result this may have bugs that \"\n-    msg \"     you did not see before. If you experience any issues you can\"\n-    msg \"     go back to the old build system with --disable-rustbuild and\"\n-    msg \"     please feel free to report any bugs!\"\n-    msg \"\"\n-    msg \"run \\`python ${X_PY} --help\\`\"\n-else\n-    warn \"the makefile-based build system is deprecated in favor of rustbuild\"\n-    msg \"\"\n-    msg \"It is recommended you avoid passing --disable-rustbuild to get your\"\n-    msg \"build working as the makefiles will be deleted on 2017-02-02. If you\"\n-    msg \"encounter bugs with rustbuild please file issues against rust-lang/rust\"\n-    msg \"\"\n-    msg \"run \\`make help\\`\"\n-fi\n-\n+msg \"run \\`python ${X_PY} --help\\`\"\n msg"}, {"sha": "5d822f1b1aba62c645969712bab2bba46ad73018", "filename": "mk/cfg/aarch64-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-apple-ios.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,33 +0,0 @@\n-# aarch64-apple-ios configuration\n-CFG_SDK_NAME_aarch64-apple-ios := iphoneos\n-CFG_SDK_ARCHS_aarch64-apple-ios := arm64\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_aarch64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_aarch64-apple-ios := -target aarch64-apple-darwin -isysroot $(CFG_IOS_SDK_aarch64-apple-ios) -mios-version-min=7.0 -arch arm64\n-CC_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-LINK_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_aarch64-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_aarch64-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_aarch64-apple-ios = 1\n-CFG_STATIC_LIB_NAME_aarch64-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_aarch64-apple-ios = lib$(1)-*.a.dSYM\n-CFG_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_JEMALLOC_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_GCCISH_CFLAGS_aarch64-apple-ios :=  -fPIC $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_GCCISH_CXXFLAGS_aarch64-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios) -I$(CFG_IOS_SDK_aarch64-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_aarch64-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_aarch64-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_aarch64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_aarch64-apple-ios := -mattr=+neon,+cyclone,+fp-armv8\n-CFG_INSTALL_NAME_aarch64-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_LIBUV_LINK_FLAGS_aarch64-apple-ios =\n-CFG_EXE_SUFFIX_aarch64-apple-ios :=\n-CFG_WINDOWSY_aarch64-apple-ios :=\n-CFG_UNIXY_aarch64-apple-ios := 1\n-CFG_LDPATH_aarch64-apple-ios :=\n-CFG_RUN_aarch64-apple-ios = $(2)\n-CFG_RUN_TARG_aarch64-apple-ios = $(call CFG_RUN_aarch64-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_aarch64-apple-ios := aarch64-apple-ios"}, {"sha": "274f73834d42b77b9c001c24d0bb7f9f9d008539", "filename": "mk/cfg/aarch64-linux-android.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-linux-android.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# aarch64-linux-android configuration\n-# CROSS_PREFIX_aarch64-linux-android-\n-CC_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc\n-CXX_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-g++\n-CPP_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc -E\n-AR_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-ar\n-CFG_LIB_NAME_aarch64-linux-android=lib$(1).so\n-CFG_STATIC_LIB_NAME_aarch64-linux-android=lib$(1).a\n-CFG_LIB_GLOB_aarch64-linux-android=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_aarch64-linux-android=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_aarch64-linux-android := -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_aarch64-linux-android := -Wall -g -fPIC -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_aarch64-linux-android := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_aarch64-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_aarch64-linux-android := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_aarch64-linux-android :=\n-CFG_INSTALL_NAME_aarch64-linux-android =\n-CFG_EXE_SUFFIX_aarch64-linux-android :=\n-CFG_WINDOWSY_aarch64-linux-android :=\n-CFG_UNIXY_aarch64-linux-android := 1\n-CFG_LDPATH_aarch64-linux-android :=\n-CFG_RUN_aarch64-linux-android=\n-CFG_RUN_TARG_aarch64-linux-android=\n-RUSTC_FLAGS_aarch64-linux-android :=\n-RUSTC_CROSS_FLAGS_aarch64-linux-android :=\n-CFG_GNU_TRIPLE_aarch64-linux-android := aarch64-linux-android"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/aarch64-unknown-fuchsia.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "6637423e4951a9826c7b3004d1c939a4713cad47", "filename": "mk/cfg/aarch64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# aarch64-unknown-linux-gnu configuration\n-CROSS_PREFIX_aarch64-unknown-linux-gnu=aarch64-linux-gnu-\n-CC_aarch64-unknown-linux-gnu=gcc\n-CXX_aarch64-unknown-linux-gnu=g++\n-CPP_aarch64-unknown-linux-gnu=gcc -E\n-AR_aarch64-unknown-linux-gnu=ar\n-CFG_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_aarch64-unknown-linux-gnu := -D__aarch64__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_aarch64-unknown-linux-gnu := -Wall -g -fPIC -D__aarch64__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_aarch64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_aarch64-unknown-linux-gnu := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_aarch64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_aarch64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_aarch64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_aarch64-unknown-linux-gnu :=\n-CFG_WINDOWSY_aarch64-unknown-linux-gnu :=\n-CFG_UNIXY_aarch64-unknown-linux-gnu := 1\n-CFG_LDPATH_aarch64-unknown-linux-gnu :=\n-CFG_RUN_aarch64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_aarch64-unknown-linux-gnu=$(call CFG_RUN_aarch64-unknown-linux-gnu,,$(2))\n-RUSTC_FLAGS_aarch64-unknown-linux-gnu :=\n-RUSTC_CROSS_FLAGS_aarch64-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_aarch64-unknown-linux-gnu := aarch64-unknown-linux-gnu"}, {"sha": "c084954f2e9d069169da387789f817df457654e7", "filename": "mk/cfg/arm-linux-androideabi.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-linux-androideabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-linux-androideabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-linux-androideabi.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,25 +0,0 @@\n-# arm-linux-androideabi configuration\n-CC_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc\n-CXX_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-g++\n-CPP_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc -E\n-AR_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-ar\n-CFG_LIB_NAME_arm-linux-androideabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-linux-androideabi=lib$(1).a\n-CFG_LIB_GLOB_arm-linux-androideabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-linux-androideabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_arm-linux-androideabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_arm-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-linux-androideabi :=\n-CFG_INSTALL_NAME_arm-linux-androideabi =\n-CFG_EXE_SUFFIX_arm-linux-androideabi :=\n-CFG_WINDOWSY_arm-linux-androideabi :=\n-CFG_UNIXY_arm-linux-androideabi := 1\n-CFG_LDPATH_arm-linux-androideabi :=\n-CFG_RUN_arm-linux-androideabi=\n-CFG_RUN_TARG_arm-linux-androideabi=\n-RUSTC_FLAGS_arm-linux-androideabi :=\n-RUSTC_CROSS_FLAGS_arm-linux-androideabi :=\n-CFG_GNU_TRIPLE_arm-linux-androideabi := arm-linux-androideabi"}, {"sha": "f66ad04eefe8e3d00246476a3d170d077d7ca5ae", "filename": "mk/cfg/arm-unknown-linux-gnueabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-\n-CC_arm-unknown-linux-gnueabi=gcc\n-CXX_arm-unknown-linux-gnueabi=g++\n-CPP_arm-unknown-linux-gnueabi=gcc -E\n-AR_arm-unknown-linux-gnueabi=ar\n-CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-gnueabi :=\n-CFG_INSTALL_NAME_arm-unknown-linux-gnueabi =\n-CFG_EXE_SUFFIX_arm-unknown-linux-gnueabi :=\n-CFG_WINDOWSY_arm-unknown-linux-gnueabi :=\n-CFG_UNIXY_arm-unknown-linux-gnueabi := 1\n-CFG_LDPATH_arm-unknown-linux-gnueabi :=\n-CFG_RUN_arm-unknown-linux-gnueabi=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-gnueabi=$(call CFG_RUN_arm-unknown-linux-gnueabi,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-gnueabi :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabi :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-gnueabi := arm-unknown-linux-gnueabi"}, {"sha": "defe0dc3e70eb6e92ceea365143d56054b3c3874", "filename": "mk/cfg/arm-unknown-linux-gnueabihf.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-gnueabihf configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-\n-CC_arm-unknown-linux-gnueabihf=gcc\n-CXX_arm-unknown-linux-gnueabihf=g++\n-CPP_arm-unknown-linux-gnueabihf=gcc -E\n-AR_arm-unknown-linux-gnueabihf=ar\n-CFG_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabihf := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-gnueabihf :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n-CFG_EXE_SUFFIX_arm-unknown-linux-gnueabihf :=\n-CFG_WINDOWSY_arm-unknown-linux-gnueabihf :=\n-CFG_UNIXY_arm-unknown-linux-gnueabihf := 1\n-CFG_LDPATH_arm-unknown-linux-gnueabihf :=\n-CFG_RUN_arm-unknown-linux-gnueabihf=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-gnueabihf=$(call CFG_RUN_arm-unknown-linux-gnueabihf,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-gnueabihf := -C target-feature=+v6,+vfp2\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabihf :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-gnueabihf := arm-unknown-linux-gnueabihf"}, {"sha": "4d1438d592ece54be42049103e402968ab982fa5", "filename": "mk/cfg/arm-unknown-linux-musleabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-musleabi configuration\n-CROSS_PREFIX_arm-unknown-linux-musleabi=arm-linux-musleabi-\n-CC_arm-unknown-linux-musleabi=gcc\n-CXX_arm-unknown-linux-musleabi=g++\n-CPP_arm-unknown-linux-musleabi=gcc -E\n-AR_arm-unknown-linux-musleabi=ar\n-CFG_LIB_NAME_arm-unknown-linux-musleabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-musleabi=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-musleabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-musleabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-musleabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-musleabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-musleabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-musleabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-musleabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-musleabi :=\n-CFG_INSTALL_NAME_arm-unknown-linux-musleabi =\n-CFG_EXE_SUFFIX_arm-unknown-linux-musleabi :=\n-CFG_WINDOWSY_arm-unknown-linux-musleabi :=\n-CFG_UNIXY_arm-unknown-linux-musleabi := 1\n-CFG_LDPATH_arm-unknown-linux-musleabi :=\n-CFG_RUN_arm-unknown-linux-musleabi=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-musleabi=$(call CFG_RUN_arm-unknown-linux-musleabi,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-musleabi :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-musleabi :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-musleabi := arm-unknown-linux-musleabi"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/arm-unknown-linux-musleabihf.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead.\n\\ No newline at end of file"}, {"sha": "98567a03c28a9804edb13c6448918dde719ccd89", "filename": "mk/cfg/armv5te-unknown-linux-gnueabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# armv5-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_armv5te-unknown-linux-gnueabi=arm-linux-gnueabi-\n-CC_armv5te-unknown-linux-gnueabi=gcc\n-CXX_armv5te-unknown-linux-gnueabi=g++\n-CPP_armv5te-unknown-linux-gnueabi=gcc -E\n-AR_armv5te-unknown-linux-gnueabi=ar\n-CFG_LIB_NAME_armv5te-unknown-linux-gnueabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv5te-unknown-linux-gnueabi=lib$(1).a\n-CFG_LIB_GLOB_armv5te-unknown-linux-gnueabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv5te-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv5te-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft  $(CFLAGS) -march=armv5te -marm\n-CFG_GCCISH_CFLAGS_armv5te-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv5te -marm\n-CFG_GCCISH_CXXFLAGS_armv5te-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv5te-unknown-linux-gnueabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_armv5te-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv5te-unknown-linux-gnueabi :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabi =\n-CFG_EXE_SUFFIX_armv5te-unknown-linux-gnueabi :=\n-CFG_WINDOWSY_armv5te-unknown-linux-gnueabi :=\n-CFG_UNIXY_armv5te-unknown-linux-gnueabi := 1\n-CFG_LDPATH_armv5te-unknown-linux-gnueabi :=\n-CFG_RUN_armv5te-unknown-linux-gnueabi=$(2)\n-CFG_RUN_TARG_armv5te-unknown-linux-gnueabi=$(call CFG_RUN_armv5te-unknown-linux-gnueabi,,$(2))\n-RUSTC_FLAGS_armv5te-unknown-linux-gnueabi :=\n-RUSTC_CROSS_FLAGS_armv5te-unknown-linux-gnueabi :=\n-CFG_GNU_TRIPLE_armv5te-unknown-linux-gnueabi := armv5te-unknown-linux-gnueabi"}, {"sha": "34ca4de6563e41626fe59d68bca0af2a3437b724", "filename": "mk/cfg/armv7-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-apple-ios.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,30 +0,0 @@\n-# armv7-apple-ios configuration\n-CFG_SDK_NAME_armv7-apple-ios := iphoneos\n-CFG_SDK_ARCHS_armv7-apple-ios := armv7\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_armv7-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_armv7-apple-ios := -target armv7-apple-ios -isysroot $(CFG_IOS_SDK_armv7-apple-ios) -mios-version-min=7.0\n-CC_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_armv7-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_armv7-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_armv7-apple-ios = 1\n-CFG_STATIC_LIB_NAME_armv7-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_armv7-apple-ios = lib$(1)-*.a.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_SDK_FLAGS_armv7-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -mfpu=vfp3 -arch armv7\n-CFG_GCCISH_CXXFLAGS_armv7-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -I$(CFG_IOS_SDK_armv7-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_armv7-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_armv7-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_armv7-apple-ios := -mattr=+vfp3,+v7,+neon -march=arm\n-CFG_INSTALL_NAME_armv7-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_armv7-apple-ios :=\n-CFG_WINDOWSY_armv7-apple-ios :=\n-CFG_UNIXY_armv7-apple-ios := 1\n-CFG_LDPATH_armv7-apple-ios :=\n-CFG_RUN_armv7-apple-ios = $(2)\n-CFG_RUN_TARG_armv7-apple-ios = $(call CFG_RUN_armv7-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_armv7-apple-ios := armv7-apple-ios"}, {"sha": "e5bf2e4df7ab3851d366b3e98ccde17d5a6068c1", "filename": "mk/cfg/armv7-linux-androideabi.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-linux-androideabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-linux-androideabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-linux-androideabi.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,25 +0,0 @@\n-# armv7-linux-androideabi configuration\n-CC_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc\n-CXX_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-g++\n-CPP_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc -E\n-AR_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-ar\n-CFG_LIB_NAME_armv7-linux-androideabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv7-linux-androideabi=lib$(1).a\n-CFG_LIB_GLOB_armv7-linux-androideabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv7-linux-androideabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_armv7-linux-androideabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_armv7-linux-androideabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv7-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_armv7-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv7-linux-androideabi :=\n-CFG_INSTALL_NAME_armv7-linux-androideabi =\n-CFG_EXE_SUFFIX_armv7-linux-androideabi :=\n-CFG_WINDOWSY_armv7-linux-androideabi :=\n-CFG_UNIXY_armv7-linux-androideabi := 1\n-CFG_LDPATH_armv7-linux-androideabi :=\n-CFG_RUN_armv7-linux-androideabi=\n-CFG_RUN_TARG_armv7-linux-androideabi=\n-RUSTC_FLAGS_armv7-linux-androideabi :=\n-RUSTC_CROSS_FLAGS_armv7-linux-androideabi :=\n-CFG_GNU_TRIPLE_armv7-linux-androideabi := arm-linux-androideabi"}, {"sha": "a8e39668ded5e3cfd88e0a8b07ce9f1ed0029e76", "filename": "mk/cfg/armv7-unknown-linux-gnueabihf.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-# armv7-unknown-linux-gnueabihf configuration\n-CROSS_PREFIX_armv7-unknown-linux-gnueabihf=arm-linux-gnueabihf-\n-CC_armv7-unknown-linux-gnueabihf=gcc\n-CXX_armv7-unknown-linux-gnueabihf=g++\n-CPP_armv7-unknown-linux-gnueabihf=gcc -E\n-AR_armv7-unknown-linux-gnueabihf=ar\n-CFG_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).a\n-CFG_LIB_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS) -march=armv7-a\n-CFG_GCCISH_CFLAGS_armv7-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS) -march=armv7-a\n-CFG_GCCISH_CXXFLAGS_armv7-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv7-unknown-linux-gnueabihf := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_armv7-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv7-unknown-linux-gnueabihf :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n-CFG_EXE_SUFFIX_armv7-unknown-linux-gnueabihf :=\n-CFG_WINDOWSY_armv7-unknown-linux-gnueabihf :=\n-CFG_UNIXY_armv7-unknown-linux-gnueabihf := 1\n-CFG_LDPATH_armv7-unknown-linux-gnueabihf :=\n-CFG_RUN_armv7-unknown-linux-gnueabihf=$(2)\n-CFG_RUN_TARG_armv7-unknown-linux-gnueabihf=$(call CFG_RUN_armv7-unknown-linux-gnueabihf,,$(2))\n-RUSTC_FLAGS_armv7-unknown-linux-gnueabihf :=\n-RUSTC_CROSS_FLAGS_armv7-unknown-linux-gnueabihf :=\n-CFG_GNU_TRIPLE_armv7-unknown-linux-gnueabihf := armv7-unknown-linux-gnueabihf"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/armv7-unknown-linux-musleabihf.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead.\n\\ No newline at end of file"}, {"sha": "6da7905a7003bd955ebd6e7a18b5c3c0dfd2a3df", "filename": "mk/cfg/armv7s-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7s-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Farmv7s-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7s-apple-ios.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,30 +0,0 @@\n-# armv7s-apple-ios configuration\n-CFG_SDK_NAME_armv7s-apple-ios := iphoneos\n-CFG_SDK_ARCHS_armv7s-apple-ios := armv7s\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_armv7s-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_armv7s-apple-ios := -target armv7s-apple-ios -isysroot $(CFG_IOS_SDK_armv7s-apple-ios) -mios-version-min=7.0\n-CC_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_armv7s-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_armv7s-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_armv7s-apple-ios = 1\n-CFG_STATIC_LIB_NAME_armv7s-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_armv7s-apple-ios = lib$(1)-*.a.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7s-apple-ios := -arch armv7s $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7s-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -arch armv7s\n-CFG_GCCISH_CXXFLAGS_armv7s-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -I$(CFG_IOS_SDK_armv7s-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_armv7s-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7s-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_armv7s-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_armv7s-apple-ios := -mattr=+vfp4,+v7,+neon\n-CFG_INSTALL_NAME_armv7s-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_armv7s-apple-ios :=\n-CFG_WINDOWSY_armv7s-apple-ios :=\n-CFG_UNIXY_armv7s-apple-ios := 1\n-CFG_LDPATH_armv7s-apple-ios :=\n-CFG_RUN_armv7s-apple-ios = $(2)\n-CFG_RUN_TARG_armv7s-apple-ios = $(call CFG_RUN_armv7s-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_armv7s-apple-ios := armv7s-apple-ios"}, {"sha": "a98a51b06b5d3374e38a2588b6a30d9adb1febc3", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# asmjs-unknown-emscripten configuration\n-CC_asmjs-unknown-emscripten=emcc\n-CXX_asmjs-unknown-emscripten=em++\n-CPP_asmjs-unknown-emscripten=$(CPP)\n-AR_asmjs-unknown-emscripten=emar\n-CFG_LIB_NAME_asmjs-unknown-emscripten=lib$(1).so\n-CFG_STATIC_LIB_NAME_asmjs-unknown-emscripten=lib$(1).a\n-CFG_LIB_GLOB_asmjs-unknown-emscripten=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_asmjs-unknown-emscripten=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_asmjs-unknown-emscripten := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten :=  -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_asmjs-unknown-emscripten := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_asmjs-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_asmjs-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_asmjs-unknown-emscripten :=\n-CFG_INSTALL_NAME_asmjs-unknown-emscripten =\n-CFG_EXE_SUFFIX_asmjs-unknown-emscripten =\n-CFG_WINDOWSY_asmjs-unknown-emscripten :=\n-CFG_UNIXY_asmjs-unknown-emscripten := 1\n-CFG_LDPATH_asmjs-unknown-emscripten :=\n-CFG_RUN_asmjs-unknown-emscripten=$(2)\n-CFG_RUN_TARG_asmjs-unknown-emscripten=$(call CFG_RUN_asmjs-unknown-emscripten,,$(2))\n-CFG_GNU_TRIPLE_asmjs-unknown-emscripten := asmjs-unknown-emscripten\n-CFG_DISABLE_JEMALLOC_asmjs-unknown-emscripten := 1"}, {"sha": "bfb7fa281f242aadf870ef16185b5de8faaaed5e", "filename": "mk/cfg/i386-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi386-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi386-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi386-apple-ios.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,30 +0,0 @@\n-# i386-apple-ios configuration\n-CFG_SDK_NAME_i386-apple-ios := iphonesimulator\n-CFG_SDK_ARCHS_i386-apple-ios := i386\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOSSIM_SDK_i386-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n-CFG_IOSSIM_FLAGS_i386-apple-ios := -m32 -target i386-apple-ios -isysroot $(CFG_IOSSIM_SDK_i386-apple-ios) -mios-simulator-version-min=7.0\n-CC_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n-CXX_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-CPP_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-AR_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n-endif\n-CFG_LIB_NAME_i386-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_i386-apple-ios = lib$(1)-*.dylib\n-CFG_INSTALL_ONLY_RLIB_i386-apple-ios = 1\n-CFG_STATIC_LIB_NAME_i386-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_i386-apple-ios = lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_i386-apple-ios :=  -g -fPIC -m32 $(CFG_IOSSIM_FLAGS_i386-apple-ios)\n-CFG_GCCISH_CXXFLAGS_i386-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_i386-apple-ios) -I$(CFG_IOSSIM_SDK_i386-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_i386-apple-ios := -lpthread -m32 -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios)\n-CFG_GCCISH_DEF_FLAG_i386-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_i386-apple-ios =\n-CFG_INSTALL_NAME_i386-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_i386-apple-ios :=\n-CFG_WINDOWSY_i386-apple-ios :=\n-CFG_UNIXY_i386-apple-ios := 1\n-CFG_LDPATH_i386-apple-ios =\n-CFG_RUN_i386-apple-ios = $(2)\n-CFG_RUN_TARG_i386-apple-ios = $(call CFG_RUN_i386-apple-ios,,$(2))\n-CFG_JEMALLOC_CFLAGS_i386-apple-ios = $(CFG_IOSSIM_FLAGS_i386-apple-ios) -target i386-apple-ios #-Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios) -Wl,-no_compact_unwind\n-CFG_GNU_TRIPLE_i386-apple-ios := i386-apple-ios"}, {"sha": "48f1ecec3a704632d4fc9ef1367376697795c751", "filename": "mk/cfg/i586-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-pc-windows-msvc.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,28 +0,0 @@\n-# i586-pc-windows-msvc configuration\n-CC_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-LINK_i586-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n-CXX_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-CPP_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-AR_i586-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n-CFG_LIB_NAME_i586-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_i586-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_i586-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_i586-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n-CFG_GCCISH_CXXFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n-CFG_GCCISH_LINK_FLAGS_i586-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_i586-pc-windows-msvc :=\n-CFG_LLC_FLAGS_i586-pc-windows-msvc :=\n-CFG_INSTALL_NAME_i586-pc-windows-msvc =\n-CFG_EXE_SUFFIX_i586-pc-windows-msvc := .exe\n-CFG_WINDOWSY_i586-pc-windows-msvc := 1\n-CFG_UNIXY_i586-pc-windows-msvc :=\n-CFG_LDPATH_i586-pc-windows-msvc :=\n-CFG_RUN_i586-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_i586-pc-windows-msvc=$(call CFG_RUN_i586-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_i586-pc-windows-msvc := i586-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_i586-pc-windows-msvc := 1"}, {"sha": "fa2909196dcf184e5761ffb4e83dbb435c30c56e", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# i586-unknown-linux-gnu configuration\n-CC_i586-unknown-linux-gnu=$(CC)\n-CXX_i586-unknown-linux-gnu=$(CXX)\n-CPP_i586-unknown-linux-gnu=$(CPP)\n-AR_i586-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_i586-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS) -march=pentium\n-CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i586-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_i586-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_i586-unknown-linux-gnu =\n-CFG_WINDOWSY_i586-unknown-linux-gnu :=\n-CFG_UNIXY_i586-unknown-linux-gnu := 1\n-CFG_LDPATH_i586-unknown-linux-gnu :=\n-CFG_RUN_i586-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_i586-unknown-linux-gnu=$(call CFG_RUN_i586-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_i586-unknown-linux-gnu := i586-unknown-linux-gnu"}, {"sha": "e4b3431e8b67f0256916445fafa712ffd94f3253", "filename": "mk/cfg/i686-apple-darwin.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-apple-darwin.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# i686-apple-darwin configuration\n-CC_i686-apple-darwin=$(CC)\n-CXX_i686-apple-darwin=$(CXX)\n-CPP_i686-apple-darwin=$(CPP)\n-AR_i686-apple-darwin=$(AR)\n-CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n-CFG_STATIC_LIB_NAME_i686-apple-darwin=lib$(1).a\n-CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n-CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-apple-darwin := -m32 -arch i386 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-apple-darwin :=  -g -fPIC -m32 -arch i386 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m32\n-CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_i686-apple-darwin :=\n-CFG_INSTALL_NAME_i686-apple-darwin = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_i686-apple-darwin :=\n-CFG_WINDOWSY_i686-apple-darwin :=\n-CFG_UNIXY_i686-apple-darwin := 1\n-CFG_LDPATH_i686-apple-darwin :=\n-CFG_RUN_i686-apple-darwin=$(2)\n-CFG_RUN_TARG_i686-apple-darwin=$(call CFG_RUN_i686-apple-darwin,,$(2))\n-CFG_GNU_TRIPLE_i686-apple-darwin := i686-apple-darwin"}, {"sha": "2843a8e9be53f98e15bc73e2dd25c90b836f3b6e", "filename": "mk/cfg/i686-linux-android.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-linux-android.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,25 +0,0 @@\n-# i686-linux-android configuration\n-CC_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-gcc\n-CXX_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-g++\n-CPP_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-gcc -E\n-AR_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-ar\n-CFG_LIB_NAME_i686-linux-android=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-linux-android=lib$(1).a\n-CFG_LIB_GLOB_i686-linux-android=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-linux-android=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-linux-android := -D__i686__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-linux-android := -Wall -g -fPIC -D__i686__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-linux-android := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_i686-linux-android := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-linux-android :=\n-CFG_INSTALL_NAME_i686-linux-android =\n-CFG_EXE_SUFFIX_i686-linux-android :=\n-CFG_WINDOWSY_i686-linux-android :=\n-CFG_UNIXY_i686-linux-android := 1\n-CFG_LDPATH_i686-linux-android :=\n-CFG_RUN_i686-linux-android=\n-CFG_RUN_TARG_i686-linux-android=\n-RUSTC_FLAGS_i686-linux-android :=\n-RUSTC_CROSS_FLAGS_i686-linux-android :=\n-CFG_GNU_TRIPLE_i686-linux-android := i686-linux-android"}, {"sha": "50c2b8c98acd3c130d221dfdfc327f165b960036", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,27 +0,0 @@\n-# i686-pc-windows-gnu configuration\n-CROSS_PREFIX_i686-pc-windows-gnu=i686-w64-mingw32-\n-CC_i686-pc-windows-gnu=gcc\n-CXX_i686-pc-windows-gnu=g++\n-CPP_i686-pc-windows-gnu=gcc -E\n-AR_i686-pc-windows-gnu=ar\n-CFG_LIB_NAME_i686-pc-windows-gnu=$(1).dll\n-CFG_STATIC_LIB_NAME_i686-pc-windows-gnu=$(1).lib\n-CFG_LIB_GLOB_i686-pc-windows-gnu=$(1)-*.dll\n-CFG_LIB_DSYM_GLOB_i686-pc-windows-gnu=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-pc-windows-gnu := -march=i686 -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-pc-windows-gnu :=  -g -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-pc-windows-gnu := -shared -g -m32\n-CFG_GCCISH_DEF_FLAG_i686-pc-windows-gnu :=\n-CFG_LLC_FLAGS_i686-pc-windows-gnu :=\n-CFG_INSTALL_NAME_i686-pc-windows-gnu =\n-CFG_EXE_SUFFIX_i686-pc-windows-gnu := .exe\n-CFG_WINDOWSY_i686-pc-windows-gnu := 1\n-CFG_UNIXY_i686-pc-windows-gnu :=\n-CFG_LDPATH_i686-pc-windows-gnu :=\n-CFG_RUN_i686-pc-windows-gnu=$(2)\n-CFG_RUN_TARG_i686-pc-windows-gnu=$(call CFG_RUN_i686-pc-windows-gnu,,$(2))\n-CFG_GNU_TRIPLE_i686-pc-windows-gnu := i686-w64-mingw32\n-CFG_THIRD_PARTY_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o\n-CFG_INSTALLED_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n-CFG_RUSTRT_HAS_STARTUP_OBJS_i686-pc-windows-gnu := 1"}, {"sha": "b0289b9892e206244e101afc858c28349a403f16", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,28 +0,0 @@\n-# i686-pc-windows-msvc configuration\n-CC_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-LINK_i686-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n-CXX_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-CPP_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-AR_i686-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n-CFG_LIB_NAME_i686-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_i686-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_i686-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_i686-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i686-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_CXXFLAGS_i686-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_LINK_FLAGS_i686-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_i686-pc-windows-msvc :=\n-CFG_LLC_FLAGS_i686-pc-windows-msvc :=\n-CFG_INSTALL_NAME_i686-pc-windows-msvc =\n-CFG_EXE_SUFFIX_i686-pc-windows-msvc := .exe\n-CFG_WINDOWSY_i686-pc-windows-msvc := 1\n-CFG_UNIXY_i686-pc-windows-msvc :=\n-CFG_LDPATH_i686-pc-windows-msvc :=\n-CFG_RUN_i686-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_i686-pc-windows-msvc := 1"}, {"sha": "a9d4446d5d49b5048060977cb1585d62e3b7b77a", "filename": "mk/cfg/i686-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-freebsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,22 +0,0 @@\n-# i686-unknown-freebsd configuration\n-CC_i686-unknown-freebsd=$(CC)\n-CXX_i686-unknown-freebsd=$(CXX)\n-CPP_i686-unknown-freebsd=$(CPP)\n-AR_i686-unknown-freebsd=$(AR)\n-CFG_LIB_NAME_i686-unknown-freebsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-freebsd=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-freebsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-freebsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-freebsd := -m32 -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-freebsd :=  -g -fPIC -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-freebsd := -m32 -shared -fPIC -g -pthread -lrt\n-CFG_GCCISH_DEF_FLAG_i686-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-freebsd :=\n-CFG_INSTALL_NAME_i686-unknown-freebsd =\n-CFG_EXE_SUFFIX_i686-unknown-freebsd :=\n-CFG_WINDOWSY_i686-unknown-freebsd :=\n-CFG_UNIXY_i686-unknown-freebsd := 1\n-CFG_LDPATH_i686-unknown-freebsd :=\n-CFG_RUN_i686-unknown-freebsd=$(2)\n-CFG_RUN_TARG_i686-unknown-freebsd=$(call CFG_RUN_i686-unknown-freebsd,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-freebsd := i686-unknown-freebsd"}, {"sha": "cbacbff070e881c38fa1eb95fd365097bd3c06a3", "filename": "mk/cfg/i686-unknown-haiku.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-haiku.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,27 +0,0 @@\n-# i686-unknown-haiku configuration\n-CROSS_PREFIX_i686-unknown-haiku=i586-pc-haiku-\n-CC_i686-unknown-haiku=$(CC)\n-CXX_i686-unknown-haiku=$(CXX)\n-CPP_i686-unknown-haiku=$(CPP)\n-AR_i686-unknown-haiku=$(AR)\n-CFG_LIB_NAME_i686-unknown-haiku=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-haiku=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-haiku=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-haiku=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i686-unknown-haiku := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-haiku := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-unknown-haiku := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-haiku := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-haiku := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-haiku := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_i686-unknown-haiku := .linux.def\n-CFG_LLC_FLAGS_i686-unknown-haiku :=\n-CFG_INSTALL_NAME_i686-unknown-haiku =\n-CFG_EXE_SUFFIX_i686-unknown-haiku =\n-CFG_WINDOWSY_i686-unknown-haiku :=\n-CFG_UNIXY_i686-unknown-haiku := 1\n-CFG_PATH_MUNGE_i686-unknown-haiku := true\n-CFG_LDPATH_i686-unknown-haiku :=\n-CFG_RUN_i686-unknown-haiku=$(2)\n-CFG_RUN_TARG_i686-unknown-haiku=$(call CFG_RUN_i686-unknown-haiku,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-haiku := i686-unknown-haiku"}, {"sha": "9e2312008a10ad6916ea34dbe5fb9b32b5d7cb6b", "filename": "mk/cfg/i686-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# i686-unknown-linux-gnu configuration\n-CC_i686-unknown-linux-gnu=$(CC)\n-CXX_i686-unknown-linux-gnu=$(CXX)\n-CPP_i686-unknown-linux-gnu=$(CPP)\n-AR_i686-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=i686\n-CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_i686-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_i686-unknown-linux-gnu =\n-CFG_WINDOWSY_i686-unknown-linux-gnu :=\n-CFG_UNIXY_i686-unknown-linux-gnu := 1\n-CFG_LDPATH_i686-unknown-linux-gnu :=\n-CFG_RUN_i686-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-linux-gnu := i686-unknown-linux-gnu"}, {"sha": "d6c1ce8967a20f66fc5823346ee7d64a116dc5d3", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,29 +0,0 @@\n-# i686-unknown-linux-musl configuration\n-CC_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_i686-unknown-linux-musl=$(CXX)\n-CPP_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n-AR_i686-unknown-linux-musl=$(AR)\n-CFG_INSTALL_ONLY_RLIB_i686-unknown-linux-musl = 1\n-CFG_LIB_NAME_i686-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-linux-musl=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-musl :=  -g -fPIC -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_i686-unknown-linux-musl :=\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-musl :=\n-CFG_GCCISH_DEF_FLAG_i686-unknown-linux-musl :=\n-CFG_LLC_FLAGS_i686-unknown-linux-musl :=\n-CFG_INSTALL_NAME_i686-unknown-linux-musl =\n-CFG_EXE_SUFFIX_i686-unknown-linux-musl =\n-CFG_WINDOWSY_i686-unknown-linux-musl :=\n-CFG_UNIXY_i686-unknown-linux-musl := 1\n-CFG_LDPATH_i686-unknown-linux-musl :=\n-CFG_RUN_i686-unknown-linux-musl=$(2)\n-CFG_RUN_TARG_i686-unknown-linux-musl=$(call CFG_RUN_i686-unknown-linux-musl,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-linux-musl := i686-unknown-linux-musl\n-CFG_THIRD_PARTY_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n-CFG_INSTALLED_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n-\n-NATIVE_DEPS_libc_T_i686-unknown-linux-musl += libc.a\n-NATIVE_DEPS_std_T_i686-unknown-linux-musl += crt1.o crti.o crtn.o\n-NATIVE_DEPS_unwind_T_i686-unknown-linux-musl += libunwind.a"}, {"sha": "b839937c9768b3c7ee151be4295ac9b4d7ca68d7", "filename": "mk/cfg/i686-unknown-openbsd.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-openbsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# i686-unknown-openbsd configuration\n-CC_i686-unknown-openbsd=$(CC)\n-CXX_i686-unknown-openbsd=$(CXX)\n-CPP_i686-unknown-openbsd=$(CPP)\n-AR_i686-unknown-openbsd=$(AR)\n-CFG_LIB_NAME_i686-unknown-openbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-openbsd=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-openbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-openbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-openbsd := -m32 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-openbsd :=  -g -fPIC -m32 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-openbsd := -shared -fPIC -g -pthread -m32\n-CFG_GCCISH_DEF_FLAG_i686-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-openbsd :=\n-CFG_INSTALL_NAME_i686-unknown-openbsd =\n-CFG_EXE_SUFFIX_i686-unknown-openbsd :=\n-CFG_WINDOWSY_i686-unknown-openbsd :=\n-CFG_UNIXY_i686-unknown-openbsd := 1\n-CFG_LDPATH_i686-unknown-openbsd :=\n-CFG_RUN_i686-unknown-openbsd=$(2)\n-CFG_RUN_TARG_i686-unknown-openbsd=$(call CFG_RUN_i686-unknown-openbsd,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-openbsd := i686-unknown-openbsd\n-RUSTC_FLAGS_i686-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n-CFG_DISABLE_JEMALLOC_i686-unknown-openbsd := 1"}, {"sha": "a73367291746f5b7d84da643727fee49abf7cef3", "filename": "mk/cfg/le32-unknown-nacl.mk", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fle32-unknown-nacl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fle32-unknown-nacl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fle32-unknown-nacl.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,40 +0,0 @@\n-# le32-unknown-nacl (portable, PNaCl)\n-ifneq ($(CFG_NACL_CROSS_PATH),)\n-\n-CC_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool cc)\n-CXX_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool c++)\n-CPP_le32-unknown-nacl=$(CXX_le32-unknown-nacl) -E\n-AR_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool ar)\n-\n-CFG_PNACL_TOOLCHAIN := $(abspath $(dir $(AR_le32-unknown-nacl)/../))\n-\n-# Note: pso's aren't supported by PNaCl.\n-CFG_LIB_NAME_le32-unknown-nacl=lib$(1).pso\n-CFG_STATIC_LIB_NAME_le32-unknown-nacl=lib$(1).a\n-CFG_LIB_GLOB_le32-unknown-nacl=lib$(1)-*.pso\n-CFG_LIB_DSYM_GLOB_le32-unknown-nacl=lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_le32-unknown-nacl := -Wall -Wno-unused-variable -Wno-unused-value $(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --cflags) -D_YUGA_LITTLE_ENDIAN=1 -D_YUGA_BIG_ENDIAN=0\n-CFG_GCCISH_CXXFLAGS_le32-unknown-nacl := -stdlib=libc++ $(CFG_GCCISH_CFLAGS_le32-unknown-nacl)\n-CFG_GCCISH_LINK_FLAGS_le32-unknown-nacl := -static -pthread -lm\n-CFG_GCCISH_DEF_FLAG_le32-unknown-nacl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_le32-unknown-nacl := -Wl,-no-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_le32-unknown-nacl :=\n-CFG_DEF_SUFFIX_le32-unknown-nacl := .le32.nacl.def\n-CFG_INSTALL_NAME_le32-unknown-nacl =\n-CFG_EXE_SUFFIX_le32-unknown-nacl = .pexe\n-CFG_WINDOWSY_le32-unknown-nacl :=\n-CFG_UNIXY_le32-unknown-nacl := 1\n-CFG_NACLY_le32-unknown-nacl := 1\n-CFG_PATH_MUNGE_le32-unknown-nacl := true\n-CFG_LDPATH_le32-unknown-nacl :=\n-CFG_RUN_le32-unknown-nacl=$(2)\n-CFG_RUN_TARG_le32-unknown-nacl=$(call CFG_RUN_le32-unknown-nacl,,$(2))\n-RUSTC_FLAGS_le32-unknown-nacl:=\n-RUSTC_CROSS_FLAGS_le32-unknown-nacl=-L $(CFG_NACL_CROSS_PATH)/lib/pnacl/Release -L $(CFG_PNACL_TOOLCHAIN)/lib/clang/3.7.0/lib/le32-nacl -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/usr/lib -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/lib\n-CFG_GNU_TRIPLE_le32-unknown-nacl := le32-unknown-nacl\n-\n-# strdup isn't defined unless -std=gnu++11 is used :/\n-LLVM_FILTER_CXXFLAGS_le32-unknown-nacl := -std=c++11\n-LLVM_EXTRA_CXXFLAGS_le32-unknown-nacl := -std=gnu++11\n-\n-endif"}, {"sha": "0783a4c17a4f2153393e5f17171e78793c2e6f94", "filename": "mk/cfg/mips-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# mips-unknown-linux-gnu configuration\n-CC_mips-unknown-linux-gnu=mips-linux-gnu-gcc\n-CXX_mips-unknown-linux-gnu=mips-linux-gnu-g++\n-CPP_mips-unknown-linux-gnu=mips-linux-gnu-gcc -E\n-AR_mips-unknown-linux-gnu=mips-linux-gnu-ar\n-CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_mips-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mips-unknown-linux-gnu := -mips32r2 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -mabi=32\n-CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mips-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_mips-unknown-linux-gnu :=\n-CFG_WINDOWSY_mips-unknown-linux-gnu :=\n-CFG_UNIXY_mips-unknown-linux-gnu := 1\n-CFG_LDPATH_mips-unknown-linux-gnu :=\n-CFG_RUN_mips-unknown-linux-gnu=\n-CFG_RUN_TARG_mips-unknown-linux-gnu=\n-RUSTC_FLAGS_mips-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_mips-unknown-linux-gnu := mips-unknown-linux-gnu"}, {"sha": "33528b986f6e574d485ef99ee2c630753621d1bb", "filename": "mk/cfg/mips-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-musl.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# mips-unknown-linux-musl configuration\n-CC_mips-unknown-linux-musl=mips-linux-musl-gcc\n-CXX_mips-unknown-linux-musl=mips-linux-musl-g++\n-CPP_mips-unknown-linux-musl=mips-linux-musl-gcc -E\n-AR_mips-unknown-linux-musl=mips-linux-musl-ar\n-CFG_LIB_NAME_mips-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_mips-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_mips-unknown-linux-musl=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mips-unknown-linux-musl=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mips-unknown-linux-musl := -mips32r2 -msoft-float -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-musl := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mips-unknown-linux-musl := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-musl := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n-CFG_GCCISH_DEF_FLAG_mips-unknown-linux-musl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mips-unknown-linux-musl :=\n-CFG_INSTALL_NAME_mips-unknown-linux-musl =\n-CFG_EXE_SUFFIX_mips-unknown-linux-musl =\n-CFG_WINDOWSY_mips-unknown-linux-musl :=\n-CFG_UNIXY_mips-unknown-linux-musl := 1\n-CFG_LDPATH_mips-unknown-linux-musl :=\n-CFG_RUN_mips-unknown-linux-musl=\n-CFG_RUN_TARG_mips-unknown-linux-musl=\n-RUSTC_FLAGS_mips-unknown-linux-musl :=\n-CFG_GNU_TRIPLE_mips-unknown-linux-musl := mips-unknown-linux-musl"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips-unknown-linux-uclibc.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64-unknown-linux-gnuabi64.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64el-unknown-linux-gnuabi64.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "f15a086b64e8892550a976a120baf031e8d81723", "filename": "mk/cfg/mipsel-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# mipsel-unknown-linux-gnu configuration\n-CC_mipsel-unknown-linux-gnu=mipsel-linux-gnu-gcc\n-CXX_mipsel-unknown-linux-gnu=mipsel-linux-gnu-g++\n-CPP_mipsel-unknown-linux-gnu=mipsel-linux-gnu-gcc\n-AR_mipsel-unknown-linux-gnu=mipsel-linux-gnu-ar\n-CFG_LIB_NAME_mipsel-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_mipsel-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_mipsel-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mipsel-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mipsel-unknown-linux-gnu := -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mipsel-unknown-linux-gnu := -Wall -g -fPIC -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mipsel-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mipsel-unknown-linux-gnu := -shared -fPIC -g -mips32\n-CFG_GCCISH_DEF_FLAG_mipsel-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mipsel-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_mipsel-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_mipsel-unknown-linux-gnu :=\n-CFG_WINDOWSY_mipsel-unknown-linux-gnu :=\n-CFG_UNIXY_mipsel-unknown-linux-gnu := 1\n-CFG_LDPATH_mipsel-unknown-linux-gnu :=\n-CFG_RUN_mipsel-unknown-linux-gnu=\n-CFG_RUN_TARG_mipsel-unknown-linux-gnu=\n-RUSTC_FLAGS_mipsel-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_mipsel-unknown-linux-gnu := mipsel-unknown-linux-gnu"}, {"sha": "db836b81c5fd56d12dabdd32e735be0e3e867b0b", "filename": "mk/cfg/mipsel-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# mipsel-unknown-linux-musl configuration\n-CC_mipsel-unknown-linux-musl=mipsel-linux-musl-gcc\n-CXX_mipsel-unknown-linux-musl=mipsel-linux-musl-g++\n-CPP_mipsel-unknown-linux-musl=mipsel-linux-musl-gcc\n-AR_mipsel-unknown-linux-musl=mipsel-linux-musl-ar\n-CFG_LIB_NAME_mipsel-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_mipsel-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_mipsel-unknown-linux-musl=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mipsel-unknown-linux-musl=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mipsel-unknown-linux-musl := -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mipsel-unknown-linux-musl := -Wall -g -fPIC -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mipsel-unknown-linux-musl := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mipsel-unknown-linux-musl := -shared -fPIC -g -mips32\n-CFG_GCCISH_DEF_FLAG_mipsel-unknown-linux-musl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mipsel-unknown-linux-musl :=\n-CFG_INSTALL_NAME_mipsel-unknown-linux-musl =\n-CFG_EXE_SUFFIX_mipsel-unknown-linux-musl :=\n-CFG_WINDOWSY_mipsel-unknown-linux-musl :=\n-CFG_UNIXY_mipsel-unknown-linux-musl := 1\n-CFG_LDPATH_mipsel-unknown-linux-musl :=\n-CFG_RUN_mipsel-unknown-linux-musl=\n-CFG_RUN_TARG_mipsel-unknown-linux-musl=\n-RUSTC_FLAGS_mipsel-unknown-linux-musl :=\n-CFG_GNU_TRIPLE_mipsel-unknown-linux-musl := mipsel-unknown-linux-musl"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mipsel-unknown-linux-uclibc.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "9c5720de4b310dc8d44f9691d6382df55a456987", "filename": "mk/cfg/powerpc-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# powerpc-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc-unknown-linux-gnu=powerpc-linux-gnu-\n-CC_powerpc-unknown-linux-gnu=$(CC)\n-CXX_powerpc-unknown-linux-gnu=$(CXX)\n-CPP_powerpc-unknown-linux-gnu=$(CPP)\n-AR_powerpc-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_powerpc-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_powerpc-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc-unknown-linux-gnu :=\n-CFG_RUN_powerpc-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc-unknown-linux-gnu=$(call CFG_RUN_powerpc-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc-unknown-linux-gnu := powerpc-unknown-linux-gnu"}, {"sha": "389bb6f0cab492e02110d3f6f1bc74a33faa3f4b", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,25 +0,0 @@\n-# powerpc64-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc64-unknown-linux-gnu=powerpc-linux-gnu-\n-CC_powerpc64-unknown-linux-gnu=$(CC)\n-CXX_powerpc64-unknown-linux-gnu=$(CXX)\n-CPP_powerpc64-unknown-linux-gnu=$(CPP)\n-AR_powerpc64-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_powerpc64-unknown-linux-gnu := -m64\n-CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_powerpc64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc64-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc64-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc64-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc64-unknown-linux-gnu :=\n-CFG_RUN_powerpc64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc64-unknown-linux-gnu=$(call CFG_RUN_powerpc64-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc64-unknown-linux-gnu := powerpc64-unknown-linux-gnu"}, {"sha": "6884fa11e7412ceedd76d40cf4a5e44e15143c49", "filename": "mk/cfg/powerpc64le-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# powerpc64le-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc64le-unknown-linux-gnu=powerpc64le-linux-gnu-\n-CC_powerpc64le-unknown-linux-gnu=$(CC)\n-CXX_powerpc64le-unknown-linux-gnu=$(CXX)\n-CPP_powerpc64le-unknown-linux-gnu=$(CPP)\n-AR_powerpc64le-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_powerpc64le-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc64le-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc64le-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_powerpc64le-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc64le-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc64le-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc64le-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc64le-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc64le-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc64le-unknown-linux-gnu :=\n-CFG_RUN_powerpc64le-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc64le-unknown-linux-gnu=$(call CFG_RUN_powerpc64le-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc64le-unknown-linux-gnu := powerpc64le-unknown-linux-gnu"}, {"sha": "eb1cb2329c4f35412029638a3d252ab4b0398c93", "filename": "mk/cfg/s390x-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# s390x-unknown-linux-gnu configuration\n-CROSS_PREFIX_s390x-unknown-linux-gnu=s390x-linux-gnu-\n-CC_s390x-unknown-linux-gnu=$(CC)\n-CXX_s390x-unknown-linux-gnu=$(CXX)\n-CPP_s390x-unknown-linux-gnu=$(CPP)\n-AR_s390x-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_s390x-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_s390x-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_s390x-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_s390x-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_s390x-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_s390x-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_s390x-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_s390x-unknown-linux-gnu =\n-CFG_WINDOWSY_s390x-unknown-linux-gnu :=\n-CFG_UNIXY_s390x-unknown-linux-gnu := 1\n-CFG_LDPATH_s390x-unknown-linux-gnu :=\n-CFG_RUN_s390x-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_s390x-unknown-linux-gnu=$(call CFG_RUN_s390x-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_s390x-unknown-linux-gnu := s390x-unknown-linux-gnu"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/sparc64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "a2b01ba0537c7f78ff72eb87b01e7df996530b1a", "filename": "mk/cfg/sparc64-unknown-netbsd.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead."}, {"sha": "997bdfbf03ab191af0de9d40c8de297709a3e0b1", "filename": "mk/cfg/wasm32-unknown-emscripten.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# wasm32-unknown-emscripten configuration\n-CC_wasm32-unknown-emscripten=emcc\n-CXX_wasm32-unknown-emscripten=em++\n-CPP_wasm32-unknown-emscripten=$(CPP)\n-AR_wasm32-unknown-emscripten=emar\n-CFG_LIB_NAME_wasm32-unknown-emscripten=lib$(1).so\n-CFG_STATIC_LIB_NAME_wasm32-unknown-emscripten=lib$(1).a\n-CFG_LIB_GLOB_wasm32-unknown-emscripten=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_wasm32-unknown-emscripten=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_wasm32-unknown-emscripten := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_wasm32-unknown-emscripten :=  -g -fPIC -m32 -s BINARYEN=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_wasm32-unknown-emscripten := -fno-rtti -s BINARYEN=1 $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_wasm32-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32 -s BINARYEN=1\n-CFG_GCCISH_DEF_FLAG_wasm32-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_wasm32-unknown-emscripten :=\n-CFG_INSTALL_NAME_wasm32-unknown-emscripten =\n-CFG_EXE_SUFFIX_wasm32-unknown-emscripten =\n-CFG_WINDOWSY_wasm32-unknown-emscripten :=\n-CFG_UNIXY_wasm32-unknown-emscripten := 1\n-CFG_LDPATH_wasm32-unknown-emscripten :=\n-CFG_RUN_wasm32-unknown-emscripten=$(2)\n-CFG_RUN_TARG_wasm32-unknown-emscripten=$(call CFG_RUN_wasm32-unknown-emscripten,,$(2))\n-CFG_GNU_TRIPLE_wasm32-unknown-emscripten := wasm32-unknown-emscripten\n-CFG_DISABLE_JEMALLOC_wasm32-unknown-emscripten := 1"}, {"sha": "8af47b671a8505a2727b7d69adfae00b23afed19", "filename": "mk/cfg/x86_64-apple-darwin.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-darwin.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-apple-darwin configuration\n-CC_x86_64-apple-darwin=$(CC)\n-CXX_x86_64-apple-darwin=$(CXX)\n-CPP_x86_64-apple-darwin=$(CPP)\n-AR_x86_64-apple-darwin=$(AR)\n-CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n-CFG_STATIC_LIB_NAME_x86_64-apple-darwin=lib$(1).a\n-CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n-CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-apple-darwin := -m64 -arch x86_64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-apple-darwin :=  -g -fPIC -m64 -arch x86_64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_x86_64-apple-darwin :=\n-CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_x86_64-apple-darwin :=\n-CFG_WINDOWSY_x86_64-apple-darwin :=\n-CFG_UNIXY_x86_64-apple-darwin := 1\n-CFG_LDPATH_x86_64-apple-darwin :=\n-CFG_RUN_x86_64-apple-darwin=$(2)\n-CFG_RUN_TARG_x86_64-apple-darwin=$(call CFG_RUN_x86_64-apple-darwin,,$(2))\n-CFG_GNU_TRIPLE_x86_64-apple-darwin := x86_64-apple-darwin"}, {"sha": "764cdc15996d0c5fe8fc93f8b0d1ca35bc949194", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,32 +0,0 @@\n-# x86_64-apple-ios configuration\n-CFG_SDK_NAME_x86_64-apple-ios := iphonesimulator\n-CFG_SDK_ARCHS_x86_64-apple-ios := x86_64\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOSSIM_SDK_x86_64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n-CFG_IOSSIM_FLAGS_x86_64-apple-ios := -m64 -target x86_64-apple-ios -isysroot $(CFG_IOSSIM_SDK_x86_64-apple-ios) -mios-simulator-version-min=7.0\n-CC_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n-CXX_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-CPP_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-AR_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n-endif\n-CFG_LIB_NAME_x86_64-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_x86_64-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_x86_64-apple-ios = 1\n-CFG_STATIC_LIB_NAME_x86_64-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_x86_64-apple-ios = lib$(1)-*.a.dSYM\n-CFG_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_JEMALLOC_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_GCCISH_CFLAGS_x86_64-apple-ios :=  -fPIC $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_GCCISH_CXXFLAGS_x86_64-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_x86_64-apple-ios) -I$(CFG_IOSSIM_SDK_x86_64-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_x86_64-apple-ios := -lpthread -Wl,-no_compact_unwind -m64 -Wl,-syslibroot $(CFG_IOSSIM_SDK_x86_64-apple-ios)\n-CFG_GCCISH_DEF_FLAG_x86_64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_x86_64-apple-ios :=\n-CFG_INSTALL_NAME_x86_64-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_LIBUV_LINK_FLAGS_x86_64-apple-ios :=\n-CFG_EXE_SUFFIX_x86_64-apple-ios :=\n-CFG_WINDOWSY_x86_64-apple-ios :=\n-CFG_UNIXY_x86_64-apple-ios := 1\n-CFG_LDPATH_x86_64-apple-ios :=\n-CFG_RUN_x86_64-apple-ios = $(2)\n-CFG_RUN_TARG_x86_64-apple-ios = $(call CFG_RUN_x86_64-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_i386-apple-ios := x86_64-apple-ios"}, {"sha": "82e7b23279fb5339c9fe773df72f26341132880c", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,27 +0,0 @@\n-# x86_64-pc-windows-gnu configuration\n-CROSS_PREFIX_x86_64-pc-windows-gnu=x86_64-w64-mingw32-\n-CC_x86_64-pc-windows-gnu=gcc\n-CXX_x86_64-pc-windows-gnu=g++\n-CPP_x86_64-pc-windows-gnu=gcc -E\n-AR_x86_64-pc-windows-gnu=ar\n-CFG_LIB_NAME_x86_64-pc-windows-gnu=$(1).dll\n-CFG_STATIC_LIB_NAME_x86_64-pc-windows-gnu=$(1).lib\n-CFG_LIB_GLOB_x86_64-pc-windows-gnu=$(1)-*.dll\n-CFG_LIB_DSYM_GLOB_x86_64-pc-windows-gnu=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-gnu := -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-gnu :=  -g -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-gnu := -shared -g -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-gnu :=\n-CFG_LLC_FLAGS_x86_64-pc-windows-gnu :=\n-CFG_INSTALL_NAME_x86_64-pc-windows-gnu =\n-CFG_EXE_SUFFIX_x86_64-pc-windows-gnu := .exe\n-CFG_WINDOWSY_x86_64-pc-windows-gnu := 1\n-CFG_UNIXY_x86_64-pc-windows-gnu :=\n-CFG_LDPATH_x86_64-pc-windows-gnu :=\n-CFG_RUN_x86_64-pc-windows-gnu=$(2)\n-CFG_RUN_TARG_x86_64-pc-windows-gnu=$(call CFG_RUN_x86_64-pc-windows-gnu,,$(2))\n-CFG_GNU_TRIPLE_x86_64-pc-windows-gnu := x86_64-w64-mingw32\n-CFG_THIRD_PARTY_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o\n-CFG_INSTALLED_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n-CFG_RUSTRT_HAS_STARTUP_OBJS_x86_64-pc-windows-gnu := 1"}, {"sha": "30e996a97273f11b6af50cfd328ab117f8a10c0a", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,28 +0,0 @@\n-# x86_64-pc-windows-msvc configuration\n-CC_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-LINK_x86_64-pc-windows-msvc=$(CFG_MSVC_LINK_x86_64)\n-CXX_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-CPP_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-AR_x86_64-pc-windows-msvc=$(CFG_MSVC_LIB_x86_64)\n-CFG_LIB_NAME_x86_64-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_x86_64-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_x86_64-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_x86_64-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-msvc :=\n-CFG_LLC_FLAGS_x86_64-pc-windows-msvc :=\n-CFG_INSTALL_NAME_x86_64-pc-windows-msvc =\n-CFG_EXE_SUFFIX_x86_64-pc-windows-msvc := .exe\n-CFG_WINDOWSY_x86_64-pc-windows-msvc := 1\n-CFG_UNIXY_x86_64-pc-windows-msvc :=\n-CFG_LDPATH_x86_64-pc-windows-msvc :=\n-CFG_RUN_x86_64-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_x86_64-pc-windows-msvc := 1"}, {"sha": "53d58b9fceaa6ab0b762bf74229558de5e0ca1a4", "filename": "mk/cfg/x86_64-rumprun-netbsd.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,25 +0,0 @@\n-# x86_64-rumprun-netbsd configuration\n-CROSS_PREFIX_x86_64-rumprun-netbsd=x86_64-rumprun-netbsd-\n-CC_x86_64-rumprun-netbsd=gcc\n-CXX_x86_64-rumprun-netbsd=g++\n-CPP_x86_64-rumprun-netbsd=gcc -E\n-AR_x86_64-rumprun-netbsd=ar\n-CFG_INSTALL_ONLY_RLIB_x86_64-rumprun-netbsd = 1\n-CFG_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-rumprun-netbsd=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_x86_64-rumprun-netbsd := -m64\n-CFG_GCCISH_CFLAGS_x86_64-rumprun-netbsd :=  -g -fPIC -m64\n-CFG_GCCISH_CXXFLAGS_x86_64-rumprun-netbsd :=\n-CFG_GCCISH_LINK_FLAGS_x86_64-rumprun-netbsd :=\n-CFG_GCCISH_DEF_FLAG_x86_64-rumprun-netbsd :=\n-CFG_LLC_FLAGS_x86_64-rumprun-netbsd :=\n-CFG_INSTALL_NAME_x86_64-rumprun-netbsd =\n-CFG_EXE_SUFFIX_x86_64-rumprun-netbsd =\n-CFG_WINDOWSY_x86_64-rumprun-netbsd :=\n-CFG_UNIXY_x86_64-rumprun-netbsd := 1\n-CFG_LDPATH_x86_64-rumprun-netbsd :=\n-CFG_RUN_x86_64-rumprun-netbsd=$(2)\n-CFG_RUN_TARG_x86_64-rumprun-netbsd=$(call CFG_RUN_x86_64-rumprun-netbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-rumprun-netbsd := x86_64-rumprun-netbsd\n-CFG_DISABLE_JEMALLOC_x86_64-rumprun-netbsd := 1"}, {"sha": "7fc323b234aee9b750dfff8813d4904caa1a723b", "filename": "mk/cfg/x86_64-sun-solaris.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-sun-solaris.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-sun-solaris configuration\n-CROSS_PREFIX_x86_64-sun-solaris=x86_64-sun-solaris2.11-\n-CC_x86_64-sun-solaris=$(CC)\n-CXX_x86_64-sun-solaris=$(CXX)\n-CPP_x86_64-sun-solaris=$(CPP)\n-AR_x86_64-sun-solaris=$(AR)\n-CFG_LIB_NAME_x86_64-sun-solaris=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-sun-solaris=lib$(1).a\n-CFG_LIB_GLOB_x86_64-sun-solaris=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-sun-solaris=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-sun-solaris := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-sun-solaris :=  -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-sun-solaris := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-sun-solaris := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-sun-solaris :=\n-CFG_INSTALL_NAME_x86_64-sun-solaris =\n-CFG_EXE_SUFFIX_x86_64-sun-solaris :=\n-CFG_WINDOWSY_x86_64-sun-solaris :=\n-CFG_UNIXY_x86_64-sun-solaris := 1\n-CFG_LDPATH_x86_64-sun-solaris :=\n-CFG_RUN_x86_64-sun-solaris=$(2)\n-CFG_RUN_TARG_x86_64-sun-solaris=$(call CFG_RUN_x86_64-sun-solaris,,$(2))\n-CFG_GNU_TRIPLE_x86_64-sun-solaris := x86_64-sun-solaris"}, {"sha": "8ac31c176188b0a50a4efcf923f5825868ace821", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-bitrig-elf configuration\n-CC_x86_64-unknown-bitrig=$(CC)\n-CXX_x86_64-unknown-bitrig=$(CXX)\n-CPP_x86_64-unknown-bitrig=$(CPP)\n-AR_x86_64-unknown-bitrig=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-bitrig=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-bitrig=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig :=  -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-bitrig :=\n-CFG_INSTALL_NAME_x86_64-unknown-bitrig =\n-CFG_EXE_SUFFIX_x86_64-unknown-bitrig :=\n-CFG_WINDOWSY_x86_64-unknown-bitrig :=\n-CFG_UNIXY_x86_64-unknown-bitrig := 1\n-CFG_LDPATH_x86_64-unknown-bitrig :=\n-CFG_RUN_x86_64-unknown-bitrig=$(2)\n-CFG_RUN_TARG_x86_64-unknown-bitrig=$(call CFG_RUN_x86_64-unknown-bitrig,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-bitrig := x86_64-unknown-bitrig\n-CFG_DISABLE_JEMALLOC_x86_64-unknown-bitrig := 1"}, {"sha": "579a9a809e205604011e59c73deb368f3eb248ec", "filename": "mk/cfg/x86_64-unknown-dragonfly.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,22 +0,0 @@\n-# x86_64-pc-dragonfly-elf configuration\n-CC_x86_64-unknown-dragonfly=$(CC)\n-CXX_x86_64-unknown-dragonfly=$(CXX)\n-CPP_x86_64-unknown-dragonfly=$(CPP)\n-AR_x86_64-unknown-dragonfly=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-dragonfly=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-dragonfly=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly :=  -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-dragonfly :=\n-CFG_INSTALL_NAME_x86_64-unknown-dragonfly =\n-CFG_EXE_SUFFIX_x86_64-unknown-dragonfly :=\n-CFG_WINDOWSY_x86_64-unknown-dragonfly :=\n-CFG_UNIXY_x86_64-unknown-dragonfly := 1\n-CFG_LDPATH_x86_64-unknown-dragonfly :=\n-CFG_RUN_x86_64-unknown-dragonfly=$(2)\n-CFG_RUN_TARG_x86_64-unknown-dragonfly=$(call CFG_RUN_x86_64-unknown-dragonfly,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-dragonfly := x86_64-unknown-dragonfly"}, {"sha": "c700601eac7a18a1427d48fcc866e37d5b40ad2b", "filename": "mk/cfg/x86_64-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,22 +0,0 @@\n-# x86_64-unknown-freebsd configuration\n-CC_x86_64-unknown-freebsd=$(CC)\n-CXX_x86_64-unknown-freebsd=$(CXX)\n-CPP_x86_64-unknown-freebsd=$(CPP)\n-AR_x86_64-unknown-freebsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-freebsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-freebsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-freebsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-freebsd :=\n-CFG_WINDOWSY_x86_64-unknown-freebsd :=\n-CFG_UNIXY_x86_64-unknown-freebsd := 1\n-CFG_LDPATH_x86_64-unknown-freebsd :=\n-CFG_RUN_x86_64-unknown-freebsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-freebsd := x86_64-unknown-freebsd"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/x86_64-unknown-fuchsia.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "4c2d888be06fbb6a52eacad88eae1572c678a6e4", "filename": "mk/cfg/x86_64-unknown-haiku.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-haiku.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,27 +0,0 @@\n-# x86_64-unknown-haiku configuration\n-CROSS_PREFIX_x86_64-unknown-haiku=x86_64-unknown-haiku-\n-CC_x86_64-unknown-haiku=$(CC)\n-CXX_x86_64-unknown-haiku=$(CXX)\n-CPP_x86_64-unknown-haiku=$(CPP)\n-AR_x86_64-unknown-haiku=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-haiku=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-haiku=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-haiku=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-haiku=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_x86_64-unknown-haiku := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-haiku := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-haiku := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-haiku := -shared -fPIC -ldl -pthread -lrt -g -m64\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-haiku := .linux.def\n-CFG_LLC_FLAGS_x86_64-unknown-haiku :=\n-CFG_INSTALL_NAME_x86_64-unknown-haiku =\n-CFG_EXE_SUFFIX_x86_64-unknown-haiku =\n-CFG_WINDOWSY_x86_64-unknown-haiku :=\n-CFG_UNIXY_x86_64-unknown-haiku := 1\n-CFG_PATH_MUNGE_x86_64-unknown-haiku := true\n-CFG_LDPATH_x86_64-unknown-haiku :=\n-CFG_RUN_x86_64-unknown-haiku=$(2)\n-CFG_RUN_TARG_x86_64-unknown-haiku=$(call CFG_RUN_x86_64-unknown-haiku,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-haiku := x86_64-unknown-haiku"}, {"sha": "817ce22e4f59d10fdf099113ca8a6ea447210dac", "filename": "mk/cfg/x86_64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-linux-gnu configuration\n-CC_x86_64-unknown-linux-gnu=$(CC)\n-CXX_x86_64-unknown-linux-gnu=$(CXX)\n-CPP_x86_64-unknown-linux-gnu=$(CPP)\n-AR_x86_64-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-gnu := -m64\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu :=  -g -fPIC -m64\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_x86_64-unknown-linux-gnu =\n-CFG_WINDOWSY_x86_64-unknown-linux-gnu :=\n-CFG_UNIXY_x86_64-unknown-linux-gnu := 1\n-CFG_LDPATH_x86_64-unknown-linux-gnu :=\n-CFG_RUN_x86_64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_x86_64-unknown-linux-gnu=$(call CFG_RUN_x86_64-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-linux-gnu := x86_64-unknown-linux-gnu"}, {"sha": "6f707ac3b3fb8512fa4b67e86b77816ee1589979", "filename": "mk/cfg/x86_64-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,29 +0,0 @@\n-# x86_64-unknown-linux-musl configuration\n-CC_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_x86_64-unknown-linux-musl=$(CXX)\n-CPP_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n-AR_x86_64-unknown-linux-musl=$(AR)\n-CFG_INSTALL_ONLY_RLIB_x86_64-unknown-linux-musl = 1\n-CFG_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-linux-musl=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-musl := -m64 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-musl :=  -g -fPIC -m64 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-musl :=\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-musl :=\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-musl :=\n-CFG_LLC_FLAGS_x86_64-unknown-linux-musl :=\n-CFG_INSTALL_NAME_x86_64-unknown-linux-musl =\n-CFG_EXE_SUFFIX_x86_64-unknown-linux-musl =\n-CFG_WINDOWSY_x86_64-unknown-linux-musl :=\n-CFG_UNIXY_x86_64-unknown-linux-musl := 1\n-CFG_LDPATH_x86_64-unknown-linux-musl :=\n-CFG_RUN_x86_64-unknown-linux-musl=$(2)\n-CFG_RUN_TARG_x86_64-unknown-linux-musl=$(call CFG_RUN_x86_64-unknown-linux-musl,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-linux-musl := x86_64-unknown-linux-musl\n-CFG_THIRD_PARTY_OBJECTS_x86_64-unknown-linux-musl := crt1.o crti.o crtn.o\n-CFG_INSTALLED_OBJECTS_x86_64-unknown-linux-musl := crt1.o crti.o crtn.o\n-\n-NATIVE_DEPS_libc_T_x86_64-unknown-linux-musl += libc.a\n-NATIVE_DEPS_std_T_x86_64-unknown-linux-musl += crt1.o crti.o crtn.o\n-NATIVE_DEPS_unwind_T_x86_64-unknown-linux-musl += libunwind.a"}, {"sha": "93bb2d672653e8f46b68cf5efb8dc1059fe04abf", "filename": "mk/cfg/x86_64-unknown-netbsd.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-netbsd configuration\n-CROSS_PREFIX_x86_64-unknown-netbsd=x86_64-unknown-netbsd-\n-CC_x86_64-unknown-netbsd=$(CC)\n-CXX_x86_64-unknown-netbsd=$(CXX)\n-CPP_x86_64-unknown-netbsd=$(CPP)\n-AR_x86_64-unknown-netbsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-netbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-netbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-netbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-netbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-netbsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-netbsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-netbsd := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-netbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-netbsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-netbsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-netbsd :=\n-CFG_WINDOWSY_x86_64-unknown-netbsd :=\n-CFG_UNIXY_x86_64-unknown-netbsd := 1\n-CFG_LDPATH_x86_64-unknown-netbsd :=\n-CFG_RUN_x86_64-unknown-netbsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-netbsd=$(call CFG_RUN_x86_64-unknown-netbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-netbsd := x86_64-unknown-netbsd"}, {"sha": "7cca1f7b18b3d6cdd5ffc65d6cbced0897f0ed6f", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,24 +0,0 @@\n-# x86_64-pc-openbsd-elf configuration\n-CC_x86_64-unknown-openbsd=$(CC)\n-CXX_x86_64-unknown-openbsd=$(CXX)\n-CPP_x86_64-unknown-openbsd=$(CPP)\n-AR_x86_64-unknown-openbsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-openbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-openbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-openbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-openbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-openbsd := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd :=  -g -fPIC -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-openbsd := -shared -fPIC -g -pthread -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-openbsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-openbsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-openbsd :=\n-CFG_WINDOWSY_x86_64-unknown-openbsd :=\n-CFG_UNIXY_x86_64-unknown-openbsd := 1\n-CFG_LDPATH_x86_64-unknown-openbsd :=\n-CFG_RUN_x86_64-unknown-openbsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-openbsd=$(call CFG_RUN_x86_64-unknown-openbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-openbsd := x86_64-unknown-openbsd\n-RUSTC_FLAGS_x86_64-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n-CFG_DISABLE_JEMALLOC_x86_64-unknown-openbsd := 1"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/x86_64-unknown-redox.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-redox.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcfg%2Fx86_64-unknown-redox.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-redox.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "7013d9f03f836c25e341b40622804577952dd021", "filename": "mk/clean.mk", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,122 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Cleanup\n-######################################################################\n-\n-CLEAN_STAGE_RULES := \\\n- $(foreach stage, $(STAGES), \\\n-  $(foreach host, $(CFG_HOST), \\\n-   clean$(stage)_H_$(host) \\\n-   $(foreach target, $(CFG_TARGET), \\\n-    clean$(stage)_T_$(target)_H_$(host))))\n-\n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n-    $(foreach host, $(CFG_HOST), clean-generic-H-$(host))\n-\n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n-    $(foreach host, $(CFG_TARGET), clean-generic-T-$(host))\n-\n-CLEAN_LLVM_RULES = \\\n- $(foreach target, $(CFG_HOST), \\\n-  clean-llvm$(target))\n-\n-.PHONY: clean clean-all clean-misc clean-llvm\n-\n-clean-all: clean clean-llvm\n-\n-clean-llvm: $(CLEAN_LLVM_RULES)\n-\n-clean: clean-misc clean-grammar $(CLEAN_STAGE_RULES)\n-\n-clean-misc:\n-\t@$(call E, cleaning)\n-\t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n-\t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n-\t$(Q)rm -Rf $(GENERATED)\n-\t$(Q)rm -Rf tmp/*\n-\t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz $(PKG_NAME)-*.exe\n-\t$(Q)rm -Rf dist/*\n-\t$(Q)rm -Rf doc\n-\n-clean-grammar:\n-\t@$(call E, cleaning grammar verification)\n-\t$(Q)rm -Rf grammar\n-define CLEAN_GENERIC\n-\n-clean-generic-$(2)-$(1):\n-\t$(Q)find $(1)/rustllvm \\\n-\t         $(1)/rt \\\n-\t\t $(1)/test \\\n-\t\t $(1)/stage* \\\n-\t\t -type f \\( \\\n-         -name '*.[odasS]' -o \\\n-         -name '*.so' -o \\\n-         -name '*.dylib' -o \\\n-         -name '*.rlib' -o \\\n-         -name 'stamp.*' -o \\\n-         -name '*.lib' -o \\\n-         -name '*.dll' -o \\\n-         -name '*.def' -o \\\n-         -name '*.py' -o \\\n-         -name '*.pyc' -o \\\n-         -name '*.bc' -o \\\n-         -name '*.rs' \\\n-         \\) \\\n-         | xargs rm -f\n-\t$(Q)find $(1) \\\n-         -name '*.dSYM' \\\n-         | xargs rm -Rf\n-endef\n-\n-$(foreach host, $(CFG_HOST), $(eval $(call CLEAN_GENERIC,$(host),H)))\n-$(foreach targ, $(CFG_TARGET), $(eval $(call CLEAN_GENERIC,$(targ),T)))\n-\n-define CLEAN_HOST_STAGE_N\n-\n-clean$(1)_H_$(2): \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_H_$(2)-tool-$$(tool))\n-\t$$(Q)rm -fr $(2)/rt/libbacktrace\n-\n-clean$(1)_H_$(2)-tool-%:\n-\t$$(Q)rm -f $$(HBIN$(1)_H_$(2))/$$*$$(X_$(2))\n-\n-clean$(1)_H_$(2)-lib-%:\n-\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_LIB_GLOB_$(2),$$*)\n-\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_RLIB_GLOB,$$*)\n-\n-endef\n-\n-$(foreach host, $(CFG_HOST), \\\n- $(eval $(foreach stage, $(STAGES), \\\n-  $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n-\n-define CLEAN_TARGET_STAGE_N\n-\n-clean$(1)_T_$(2)_H_$(3): \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n-\n-clean$(1)_T_$(2)_H_$(3)-tool-%:\n-\t$$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/$$*$$(X_$(2))\n-\n-clean$(1)_T_$(2)_H_$(3)-lib-%:\n-\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_LIB_GLOB_$(2),$$*)\n-\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_RLIB_GLOB,$$*)\n-endef\n-\n-$(foreach host, $(CFG_HOST), \\\n- $(eval $(foreach target, $(CFG_TARGET), \\\n-  $(eval $(foreach stage, 0 1 2 3, \\\n-   $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))"}, {"sha": "320ba44ed805db394078476a72ee6c08079d3146", "filename": "mk/crates.mk", "status": "removed", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,228 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-################################################################################\n-# Rust's standard distribution of crates and tools\n-#\n-# The crates outlined below are the standard distribution of libraries provided\n-# in a rust installation. These rules are meant to abstract over the\n-# dependencies (both native and rust) of crates and basically generate all the\n-# necessary makefile rules necessary to build everything.\n-#\n-# Here's an explanation of the variables below\n-#\n-#   TARGET_CRATES\n-#\tThis list of crates will be built for all targets, including\n-#\tcross-compiled targets\n-#\n-#   HOST_CRATES\n-#\tThis list of crates will be compiled for only host targets. Note that\n-#\tthis set is explicitly *not* a subset of TARGET_CRATES, but rather it is\n-#\ta disjoint set. Nothing in the TARGET_CRATES set can depend on crates in\n-#\tthe HOST_CRATES set, but the HOST_CRATES set can depend on target\n-#\tcrates.\n-#\n-#   TOOLS\n-#\tA list of all tools which will be built as part of the compilation\n-#\tprocess. It is currently assumed that most tools are built through\n-#\tsrc/driver/driver.rs with a particular configuration (there's a\n-#\tcorresponding library providing the implementation)\n-#\n-#   DEPS_<crate>\n-#\tThese lists are the dependencies of the <crate> that is to be built.\n-#\tRust dependencies are listed bare (i.e. std) and native\n-#\tdependencies have a \"native:\" prefix (i.e. native:hoedown). All deps\n-#\twill be built before the crate itself is built.\n-#\n-#   TOOL_DEPS_<tool>/TOOL_SOURCE_<tool>\n-#\tSimilar to the DEPS variable, this is the library crate dependencies\n-#\tlist for tool as well as the source file for the specified tool\n-#\n-# You shouldn't need to modify much other than these variables. Crates are\n-# automatically generated for all stage/host/target combinations.\n-################################################################################\n-\n-TARGET_CRATES := libc std term \\\n-                 getopts collections test rand \\\n-                 compiler_builtins core alloc \\\n-                 std_unicode rustc_bitflags \\\n-\t\t alloc_system alloc_jemalloc \\\n-\t\t panic_abort panic_unwind unwind\n-RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n-                rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n-                rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n-                rustc_const_eval rustc_const_math rustc_incremental proc_macro\n-HOST_CRATES := syntax syntax_ext proc_macro_plugin syntax_pos $(RUSTC_CRATES) \\\n-\t\trustdoc fmt_macros flate arena graphviz log serialize\n-TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n-\n-DEPS_core :=\n-DEPS_compiler_builtins := core native:compiler-rt\n-DEPS_alloc := core libc alloc_system\n-DEPS_alloc_system := core libc\n-DEPS_alloc_jemalloc := core libc native:jemalloc\n-DEPS_collections := core alloc std_unicode\n-DEPS_libc := core\n-DEPS_rand := core\n-DEPS_rustc_bitflags := core\n-DEPS_std_unicode := core\n-DEPS_panic_abort := libc alloc\n-DEPS_panic_unwind := libc alloc unwind\n-DEPS_unwind := libc\n-\n-RUSTFLAGS_compiler_builtins := -lstatic=compiler-rt\n-RUSTFLAGS_panic_abort := -C panic=abort\n-\n-DEPS_std := core libc rand alloc collections compiler_builtins std_unicode \\\n-\tnative:backtrace \\\n-\talloc_system panic_abort panic_unwind unwind\n-DEPS_arena := std\n-DEPS_glob := std\n-DEPS_flate := std native:miniz\n-DEPS_fmt_macros = std\n-DEPS_getopts := std\n-DEPS_graphviz := std\n-DEPS_log := std\n-DEPS_num := std\n-DEPS_serialize := std log\n-DEPS_term := std\n-DEPS_test := std getopts term native:rust_test_helpers\n-\n-DEPS_syntax := std term serialize log arena libc rustc_bitflags std_unicode rustc_errors \\\n-\t\t\tsyntax_pos rustc_data_structures\n-DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros proc_macro\n-DEPS_proc_macro := syntax syntax_pos rustc_plugin log\n-DEPS_syntax_pos := serialize\n-DEPS_proc_macro_plugin := syntax syntax_pos rustc_plugin\n-\n-DEPS_rustc_const_math := std syntax log serialize\n-DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize \\\n-\t\t\t     rustc_back graphviz syntax_pos\n-\n-DEPS_rustc := syntax fmt_macros flate arena serialize getopts \\\n-              log graphviz rustc_llvm rustc_back rustc_data_structures\\\n-\t      rustc_const_math syntax_pos rustc_errors\n-DEPS_rustc_back := std syntax flate log libc\n-DEPS_rustc_borrowck := rustc log graphviz syntax syntax_pos rustc_errors rustc_mir\n-DEPS_rustc_data_structures := std log serialize libc\n-DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n-                     rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n-                     rustc_trans rustc_privacy rustc_lint rustc_plugin \\\n-                     rustc_metadata syntax_ext proc_macro_plugin \\\n-                     rustc_passes rustc_save_analysis rustc_const_eval \\\n-                     rustc_incremental syntax_pos rustc_errors proc_macro rustc_data_structures\n-DEPS_rustc_errors := log libc serialize syntax_pos\n-DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval\n-DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n-DEPS_proc_macro := std syntax\n-DEPS_rustc_metadata := rustc syntax syntax_pos rustc_errors rustc_const_math \\\n-\t\t\tproc_macro syntax_ext\n-DEPS_rustc_passes := syntax syntax_pos rustc core rustc_const_eval rustc_errors\n-DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags\n-DEPS_rustc_resolve := arena rustc log syntax syntax_pos rustc_errors\n-DEPS_rustc_platform_intrinsics := std\n-DEPS_rustc_plugin := rustc rustc_metadata syntax syntax_pos rustc_errors\n-DEPS_rustc_privacy := rustc log syntax syntax_pos\n-DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n-                    log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n-                    rustc_const_math rustc_const_eval rustc_incremental rustc_errors syntax_pos\n-DEPS_rustc_incremental := rustc syntax_pos serialize rustc_data_structures\n-DEPS_rustc_save_analysis := rustc log syntax syntax_pos serialize\n-DEPS_rustc_typeck := rustc syntax syntax_pos rustc_platform_intrinsics rustc_const_math \\\n-                     rustc_const_eval rustc_errors rustc_data_structures\n-\n-DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts test \\\n-                rustc_lint rustc_const_eval syntax_pos rustc_data_structures\n-\n-TOOL_DEPS_compiletest := test getopts log serialize\n-TOOL_DEPS_rustdoc := rustdoc\n-TOOL_DEPS_rustc := rustc_driver\n-TOOL_DEPS_rustbook := std rustdoc\n-TOOL_DEPS_error_index_generator := rustdoc syntax serialize\n-TOOL_SOURCE_compiletest := $(S)src/tools/compiletest/src/main.rs\n-TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n-TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n-TOOL_SOURCE_rustbook := $(S)src/tools/rustbook/main.rs\n-TOOL_SOURCE_error_index_generator := $(S)src/tools/error_index_generator/main.rs\n-\n-ONLY_RLIB_compiler_builtins := 1\n-ONLY_RLIB_core := 1\n-ONLY_RLIB_libc := 1\n-ONLY_RLIB_alloc := 1\n-ONLY_RLIB_rand := 1\n-ONLY_RLIB_collections := 1\n-ONLY_RLIB_std_unicode := 1\n-ONLY_RLIB_rustc_bitflags := 1\n-ONLY_RLIB_alloc_system := 1\n-ONLY_RLIB_alloc_jemalloc := 1\n-ONLY_RLIB_panic_unwind := 1\n-ONLY_RLIB_panic_abort := 1\n-ONLY_RLIB_unwind := 1\n-\n-TARGET_SPECIFIC_alloc_jemalloc := 1\n-\n-# Documented-by-default crates\n-DOC_CRATES := std alloc collections core libc std_unicode\n-\n-ifeq ($(CFG_DISABLE_JEMALLOC),)\n-RUSTFLAGS_rustc_back := --cfg 'feature=\"jemalloc\"'\n-endif\n-\n-################################################################################\n-# You should not need to edit below this line\n-################################################################################\n-\n-CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n-\n-# This macro creates some simple definitions for each crate being built, just\n-# some munging of all of the parameters above.\n-#\n-# $(1) is the crate to generate variables for\n-define RUST_CRATE\n-CRATEFILE_$(1) := $$(SREL)src/lib$(1)/lib.rs\n-RSINPUTS_$(1) := $$(call rwildcard,$(S)src/lib$(1)/,*.rs)\n-NATIVE_DEPS_$(1) := $$(patsubst native:%,%,$$(filter native:%,$$(DEPS_$(1))))\n-endef\n-\n-$(foreach crate,$(CRATES),$(eval $(call RUST_CRATE,$(crate))))\n-\n-# $(1) - crate\n-# $(2) - target\n-define RUST_CRATE_DEPS\n-RUST_DEPS_$(1)_T_$(2) := $$(filter-out native:%,$$(DEPS_$(1)))\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n- $(foreach crate,$(CRATES),$(eval $(call RUST_CRATE_DEPS,$(crate),$(target)))))\n-\n-# $(1) - target\n-# $(2) - crate\n-define DEFINE_TARGET_CRATES\n-ifndef TARGET_SPECIFIC_$(2)\n-TARGET_CRATES_$(1) += $(2)\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n- $(foreach crate,$(TARGET_CRATES),\\\n-  $(eval $(call DEFINE_TARGET_CRATES,$(target),$(crate)))))\n-\n-# Similar to the macro above for crates, this macro is for tools\n-#\n-# $(1) is the crate to generate variables for\n-define RUST_TOOL\n-TOOL_INPUTS_$(1) := $$(call rwildcard,$$(dir $$(TOOL_SOURCE_$(1))),*.rs)\n-endef\n-\n-$(foreach crate,$(TOOLS),$(eval $(call RUST_TOOL,$(crate))))\n-\n-CRATEFILE_libc := $(SREL)src/liblibc/src/lib.rs\n-RUSTFLAGS_libc := --cfg stdbuild"}, {"sha": "1fcb0bb4debbce6109f33d171084fadfc6704c2f", "filename": "mk/ctags.mk", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fctags.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fctags.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fctags.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,35 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# TAGS file creation.  No dependency tracking, just do it on demand.\n-# Requires Exuberant Ctags: http://ctags.sourceforge.net/index.html\n-######################################################################\n-\n-.PHONY: TAGS.emacs TAGS.vi\n-\n-CTAGS_RUSTC_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/lib%test,, \\\n-\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/lib*)) ${CFG_SRC_DIR}src/libtest\n-CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/librust%,, \\\n-                $(patsubst ${CFG_SRC_DIR}src/lib%test,, \\\n-\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/lib*))) ${CFG_SRC_DIR}src/libtest\n-CTAGS_OPTS=--options=\"${CFG_SRC_DIR}src/etc/ctags.rust\" --languages=Rust --recurse\n-\n-TAGS.rustc.emacs:\n-\tctags -e -f $@ ${CTAGS_OPTS} ${CTAGS_RUSTC_LOCATIONS}\n-\n-TAGS.emacs:\n-\tctags -e -f $@ ${CTAGS_OPTS} ${CTAGS_LOCATIONS}\n-\n-TAGS.rustc.vi:\n-\tctags -f $@ ${CTAGS_OPTS} ${CTAGS_RUSTC_LOCATIONS}\n-\n-TAGS.vi:\n-\tctags -f $@ ${CTAGS_OPTS} ${CTAGS_LOCATIONS}"}, {"sha": "fbf32dc1a397f2468b10eecd1100394472c7eb50", "filename": "mk/debuggers.mk", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdebuggers.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdebuggers.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdebuggers.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,145 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Copy debugger related scripts\n-######################################################################\n-\n-\n-## GDB ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB=gdb_load_rust_pretty_printers.py \\\n-                                 gdb_rust_pretty_printing.py \\\n-                                 debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-DEBUGGER_BIN_SCRIPTS_GDB=rust-gdb\n-DEBUGGER_BIN_SCRIPTS_GDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_GDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-\n-## LLDB ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB=lldb_rust_formatters.py \\\n-                                  debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-DEBUGGER_BIN_SCRIPTS_LLDB=rust-lldb\n-DEBUGGER_BIN_SCRIPTS_LLDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_LLDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-\n-## ALL ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL=gdb_load_rust_pretty_printers.py \\\n-                                 gdb_rust_pretty_printing.py \\\n-                                 lldb_rust_formatters.py \\\n-                                 debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-DEBUGGER_BIN_SCRIPTS_ALL=$(DEBUGGER_BIN_SCRIPTS_GDB) \\\n-                         $(DEBUGGER_BIN_SCRIPTS_LLDB)\n-DEBUGGER_BIN_SCRIPTS_ALL_ABS=$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) \\\n-                             $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\n-\n-# $(1) - the stage to copy to\n-# $(2) - the host triple\n-define DEF_INSTALL_DEBUGGER_SCRIPTS_HOST\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-gdb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-lldb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-all.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-none.done:\n-\t$(Q)touch $$@\n-\n-endef\n-\n-# Expand host make-targets for all stages\n-$(foreach stage,$(STAGES), \\\n-  $(foreach host,$(CFG_HOST), \\\n-    $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_HOST,$(stage),$(host)))))\n-\n-# $(1) is the stage number\n-# $(2) is the target triple\n-# $(3) is the host triple\n-define DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-gdb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-lldb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-all.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-none.done:\n-\t$(Q)touch $$@\n-\n-endef\n-\n-# Expand target make-targets for all stages\n-$(foreach stage,$(STAGES), \\\n-  $(foreach target,$(CFG_TARGET), \\\n-    $(foreach host,$(CFG_HOST), \\\n-      $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET,$(stage),$(target),$(host))))))"}, {"sha": "238ba8acee42f894fb7aaae3648de1a5d0d91e65", "filename": "mk/dist.mk", "status": "removed", "additions": 0, "deletions": 382, "changes": 382, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,382 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Distribution\n-######################################################################\n-\n-# Primary targets:\n-#\n-# * dist - make all distribution artifacts\n-# * distcheck - sanity check dist artifacts\n-# * dist-tar-src - source tarballs\n-# * dist-tar-bins - Ad-hoc Unix binary installers\n-# * dist-docs - Stage docs for upload\n-\n-PKG_NAME := $(CFG_PACKAGE_NAME)\n-STD_PKG_NAME := rust-std-$(CFG_PACKAGE_VERS)\n-DOC_PKG_NAME := rust-docs-$(CFG_PACKAGE_VERS)\n-MINGW_PKG_NAME := rust-mingw-$(CFG_PACKAGE_VERS)\n-SRC_PKG_NAME := rust-src-$(CFG_PACKAGE_VERS)\n-\n-# License suitable for displaying in a popup\n-LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n-\tcat $^ > $@\n-\n-\n-######################################################################\n-# Source tarball\n-######################################################################\n-\n-PKG_TAR = dist/$(PKG_NAME)-src.tar.gz\n-\n-PKG_GITMODULES := $(S)src/llvm $(S)src/compiler-rt \\\n-\t\t  $(S)src/rt/hoedown $(S)src/jemalloc\n-PKG_FILES := \\\n-    $(S)COPYRIGHT                              \\\n-    $(S)LICENSE-APACHE                         \\\n-    $(S)LICENSE-MIT                            \\\n-    $(S)CONTRIBUTING.md                        \\\n-    $(S)README.md                              \\\n-    $(S)RELEASES.md                            \\\n-    $(S)configure $(S)Makefile.in              \\\n-    $(S)man                                    \\\n-    $(addprefix $(S)src/,                      \\\n-      bootstrap                                \\\n-      build_helper                             \\\n-      doc                                      \\\n-      driver                                   \\\n-      etc                                      \\\n-      $(foreach crate,$(CRATES),lib$(crate))   \\\n-      libcollectionstest                       \\\n-      libcoretest                              \\\n-      libbacktrace                             \\\n-      rt                                       \\\n-      rtstartup                                \\\n-      rustllvm                                 \\\n-      rustc                                    \\\n-      stage0.txt                               \\\n-      rust-installer                           \\\n-      tools                                    \\\n-      test                                     \\\n-      vendor)                                  \\\n-    $(PKG_GITMODULES)                          \\\n-    $(filter-out config.stamp, \\\n-                 $(MKFILES_FOR_TARBALL))\n-\n-UNROOTED_PKG_FILES := $(patsubst $(S)%,./%,$(PKG_FILES))\n-\n-tmp/dist/$$(SRC_PKG_NAME)-image: $(PKG_FILES)\n-\t@$(call E, making src image)\n-\t$(Q)rm -Rf tmp/dist/$(SRC_PKG_NAME)-image\n-\t$(Q)mkdir -p tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust\n-\t$(Q)echo \"$(CFG_VERSION)\" > tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust/version\n-\t$(Q)tar \\\n-         -C $(S) \\\n-         -f - \\\n-         --exclude-vcs \\\n-         --exclude=*~ \\\n-         --exclude=*.pyc \\\n-         --exclude=*/llvm/test/*/*.ll \\\n-         --exclude=*/llvm/test/*/*.td \\\n-         --exclude=*/llvm/test/*/*.s \\\n-         --exclude=*/llvm/test/*/*/*.ll \\\n-         --exclude=*/llvm/test/*/*/*.td \\\n-         --exclude=*/llvm/test/*/*/*.s \\\n-         -c $(UNROOTED_PKG_FILES) | tar -x -f - -C tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust\n-\n-$(PKG_TAR): tmp/dist/$$(SRC_PKG_NAME)-image\n-\t@$(call E, making $@)\n-\t$(Q)tar -czf $(PKG_TAR) -C tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src rust --transform 's,^rust,$(PKG_NAME),S'\n-\n-dist-tar-src: $(PKG_TAR)\n-\n-distcheck-tar-src: dist-tar-src\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n-\t$(Q)rm -Rf tmp/distcheck/srccheck\n-\t$(Q)mkdir -p tmp/distcheck\n-\t@$(call E, unpacking $(PKG_TAR) in tmp/distcheck/$(PKG_NAME))\n-\t$(Q)cd tmp/distcheck && tar -xzf ../../$(PKG_TAR)\n-\t@$(call E, configuring in tmp/distcheck/srccheck)\n-\t$(Q)mkdir -p tmp/distcheck/srccheck\n-\t$(Q)cd tmp/distcheck/srccheck && ../$(PKG_NAME)/configure\n-\t@$(call E, making 'check' in tmp/distcheck/srccheck)\n-\t$(Q)+make -C tmp/distcheck/srccheck check\n-\t@$(call E, making 'clean' in tmp/distcheck/srccheck)\n-\t$(Q)+make -C tmp/distcheck/srccheck clean\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n-\t$(Q)rm -Rf tmp/distcheck/srccheck\n-\n-\n-######################################################################\n-# Unix binary installer tarballs\n-######################################################################\n-\n-define DEF_START_INSTALLER\n-dist-install-dir-$(1)-%: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-install-dir-$(1)-%: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-install-dir-$(1)-%: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-install-dir-$(1)-%: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-install-dir-$(1)-%: PREPARE_CLEAN=true\n-\n-$$(eval $$(call DEF_PREPARE,dir-$(1)))\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n-  $(eval $(call DEF_START_INSTALLER,$(target))))\n-\n-define DEF_INSTALLER\n-\n-dist-install-dir-$(1)-host: PREPARE_HOST=$(1)\n-dist-install-dir-$(1)-host: PREPARE_TARGETS=$(2)\n-dist-install-dir-$(1)-host: PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)-image\n-dist-install-dir-$(1)-host: prepare-base-dir-$(1)-host docs\n-\t$$(Q)mkdir -p $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)/share/doc/rust\n-\n-prepare-overlay-$(1):\n-\t$$(Q)rm -Rf tmp/dist/$$(PKG_NAME)-$(1)-overlay\n-\t$$(Q)mkdir -p tmp/dist/$$(PKG_NAME)-$(1)-overlay\n-\t$$(Q)cp $$(S)COPYRIGHT tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)LICENSE-APACHE tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)LICENSE-MIT tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)README.md tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-# This tiny morsel of metadata is used by rust-packaging\n-\t$$(Q)echo \"$(CFG_VERSION)\" > tmp/dist/$$(PKG_NAME)-$(1)-overlay/version\n-\n-dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)-host prepare-overlay-$(1)\n-\t@$(call E, build: $$@)\n-# On a MinGW target we've got a few runtime DLL dependencies that we need\n-# to include. THe first argument to `make-win-dist` is where to put these DLLs\n-# (the image we're creating) and the second argument is a junk directory to\n-# ignore all the other MinGW stuff the script creates.\n-ifeq ($$(findstring pc-windows-gnu,$(1)),pc-windows-gnu)\n-\t$$(Q)rm -Rf tmp/dist/win-rust-gcc-$(1)\n-\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n-\t\ttmp/dist/$$(PKG_NAME)-$(1)-image \\\n-\t\ttmp/dist/win-rust-gcc-$(1) $(1)\n-endif\n-# On 32-bit MinGW we're always including a DLL which needs some extra licenses\n-# to distribute. On 64-bit MinGW we don't actually distribute anything requiring\n-# us to distribute a license but it's likely that the install will *also*\n-# include the rust-mingw package down below, which also need licenses, so to be\n-# safe we just inlude it here in all MinGW packages.\n-ifdef CFG_WINDOWSY_$(1)\n-ifeq ($$(findstring $(1),gnu),gnu)\n-\t$$(Q)cp -r $$(S)src/etc/third-party \\\n-\t\ttmp/dist/$$(PKG_NAME)-$(1)-image/share/doc/\n-endif\n-endif\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-is-ready-to-roll. \\\n-\t\t--image-dir=tmp/dist/$$(PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--non-installed-overlay=tmp/dist/$$(PKG_NAME)-$(1)-overlay \\\n-\t\t--package-name=$$(PKG_NAME)-$(1) \\\n-\t\t--component-name=rustc \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(PKG_NAME)-$(1)-image\n-\n-dist-doc-install-dir-$(1): docs\n-\t$$(Q)mkdir -p tmp/dist/$$(DOC_PKG_NAME)-$(1)-image/share/doc/rust\n-\t$$(Q)cp -r doc tmp/dist/$$(DOC_PKG_NAME)-$(1)-image/share/doc/rust/html\n-\n-dist/$$(DOC_PKG_NAME)-$(1).tar.gz: dist-doc-install-dir-$(1)\n-\t@$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust-Documentation \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-documentation-is-installed. \\\n-\t\t--image-dir=tmp/dist/$$(DOC_PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(DOC_PKG_NAME)-$(1) \\\n-\t\t--component-name=rust-docs \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo \\\n-\t\t--bulk-dirs=share/doc/rust/html\n-\t$$(Q)rm -R tmp/dist/$$(DOC_PKG_NAME)-$(1)-image\n-\n-# Creates the rust-mingw package, and the first argument to make-win-dist is a\n-# \"temporary directory\" which is just thrown away (this contains the runtime\n-# DLLs included in the rustc package above) and the second argument is where to\n-# place all the MinGW components (which is what we want).\n-dist-mingw-install-dir-$(1):\n-\t$$(Q)mkdir -p tmp/dist/rust-mingw-tmp-$(1)-image\n-\t$$(Q)rm -Rf tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image\n-\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n-\t\ttmp/dist/rust-mingw-tmp-$(1)-image \\\n-\t\ttmp/dist/$$(MINGW_PKG_NAME)-$(1)-image $(1)\n-\n-dist/$$(MINGW_PKG_NAME)-$(1).tar.gz: dist-mingw-install-dir-$(1)\n-\t@$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust-MinGW \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-MinGW-is-installed. \\\n-\t\t--image-dir=tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(MINGW_PKG_NAME)-$(1) \\\n-\t\t--component-name=rust-mingw \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image\n-\n-endef\n-\n-# $(1) - host\n-# $(2) - target\n-define DEF_INSTALLER_TARGETS\n-\n-dist-install-dir-$(2)-target: PREPARE_HOST=$(1)\n-dist-install-dir-$(2)-target: PREPARE_TARGETS=$(2)\n-dist-install-dir-$(2)-target: PREPARE_DEST_DIR=tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n-dist-install-dir-$(2)-target: prepare-base-dir-$(2)-target\n-\n-dist/$$(STD_PKG_NAME)-$(2).tar.gz: dist-install-dir-$(2)-target\n-\t@$$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=std-is-standing-at-the-ready. \\\n-\t\t--image-dir=tmp/dist/$$(STD_PKG_NAME)-$(2)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(STD_PKG_NAME)-$(2) \\\n-\t\t--component-name=rust-std-$(2) \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n-endef\n-\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER,$(host))))\n-\n-dist/$(SRC_PKG_NAME).tar.gz: tmp/dist/$(SRC_PKG_NAME)-image\n-\t@$(call E, build: $@)\n-\t$(Q)$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Awesome-Source. \\\n-\t\t--image-dir=tmp/dist/$(SRC_PKG_NAME)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$(SRC_PKG_NAME) \\\n-\t\t--component-name=rust-src \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\n-# When generating packages for the standard library, we've actually got a lot of\n-# artifacts to choose from. Each of the CFG_HOST compilers will have a copy of\n-# the standard library for each CFG_TARGET, but we only want to generate one\n-# standard library package. As a result, for each entry in CFG_TARGET we need to\n-# pick a CFG_HOST to get the standard library from.\n-#\n-# In theory it doesn't actually matter what host we choose as it should be the\n-# case that all hosts produce the same set of libraries for a target (regardless\n-# of the host itself). Currently there is a bug in the compiler, however, which\n-# means this is not the case (see #29228 and #29235). To solve the first of\n-# those bugs, we prefer to select a standard library from the host it was\n-# generated from, allowing plugins to work in more situations.\n-#\n-# For all CFG_TARGET entries in CFG_HOST, however, we just pick CFG_BUILD as the\n-# host we slurp up a standard library from.\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER_TARGETS,$(host),$(host))))\n-$(foreach target,$(filter-out $(CFG_HOST),$(CFG_TARGET)),\\\n-  $(eval $(call DEF_INSTALLER_TARGETS,$(CFG_BUILD),$(target))))\n-\n-ifdef CFG_WINDOWSY_$(CFG_BUILD)\n-define BUILD_MINGW_TARBALL\n-ifeq ($$(findstring gnu,$(1)),gnu)\n-MAYBE_MINGW_TARBALLS += dist/$(MINGW_PKG_NAME)-$(1).tar.gz\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call BUILD_MINGW_TARBALL,$(host))))\n-endif\n-\n-ifeq ($(CFG_DISABLE_DOCS),)\n-MAYBE_DOC_TARBALLS=$(foreach host,$(CFG_HOST),dist/$(DOC_PKG_NAME)-$(host).tar.gz)\n-endif\n-\n-dist-tar-bins: \\\n-\t$(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).tar.gz) \\\n-\t$(foreach target,$(CFG_TARGET),dist/$(STD_PKG_NAME)-$(target).tar.gz) \\\n-\t$(MAYBE_DOC_TARBALLS) $(MAYBE_MINGW_TARBALLS)\n-\n-# Just try to run the compiler for the build host\n-distcheck-tar-bins: dist-tar-bins\n-\t@$(call E, checking binary tarball)\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n-\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n-\t$(Q)mkdir -p tmp/distcheck\n-\t$(Q)cd tmp/distcheck && tar -xzf ../../dist/$(PKG_NAME)-$(CFG_BUILD).tar.gz\n-\t$(Q)mkdir -p tmp/distcheck/tarbininstall\n-\t$(Q)sh tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=tmp/distcheck/tarbininstall\n-\t$(Q)sh tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=tmp/distcheck/tarbininstall --uninstall\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n-\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n-\n-######################################################################\n-# Docs\n-######################################################################\n-\n-# Just copy the docs to a folder under dist with the appropriate name\n-# for uploading to S3\n-dist-docs: docs\n-\t$(Q) rm -Rf dist/doc\n-\t$(Q) mkdir -p dist/doc/\n-\t$(Q) cp -r doc dist/doc/$(CFG_PACKAGE_VERS)\n-\n-distcheck-docs: dist-docs\n-\n-######################################################################\n-# Primary targets (dist, distcheck)\n-######################################################################\n-\n-MAYBE_DIST_TAR_SRC=dist-tar-src dist/$(SRC_PKG_NAME).tar.gz\n-MAYBE_DISTCHECK_TAR_SRC=distcheck-tar-src dist/$(SRC_PKG_NAME).tar.gz\n-\n-# FIXME #13224: On OS X don't produce tarballs simply because --exclude-vcs don't work.\n-# This is a huge hack because I just don't have time to figure out another solution.\n-ifeq ($(CFG_OSTYPE), apple-darwin)\n-MAYBE_DIST_TAR_SRC=\n-MAYBE_DISTCHECK_TAR_SRC=\n-endif\n-\n-# Don't bother with source tarballs on windows just because we historically haven't.\n-ifeq ($(CFG_OSTYPE), pc-windows-gnu)\n-MAYBE_DIST_TAR_SRC=\n-MAYBE_DISTCHECK_TAR_SRC=\n-endif\n-\n-ifneq ($(CFG_DISABLE_DOCS),)\n-MAYBE_DIST_DOCS=\n-MAYBE_DISTCHECK_DOCS=\n-else\n-MAYBE_DIST_DOCS=dist-docs\n-MAYBE_DISTCHECK_DOCS=distcheck-docs\n-endif\n-\n-dist: $(MAYBE_DIST_TAR_SRC) dist-tar-bins $(MAYBE_DIST_DOCS)\n-\n-distcheck: $(MAYBE_DISTCHECK_TAR_SRC) distcheck-tar-bins $(MAYBE_DISTCHECK_DOCS)\n-\t$(Q)rm -Rf tmp/distcheck\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo \"Rust ready for distribution (see ./dist)\"\n-\t@echo -----------------------------------------------\n-\n-.PHONY: dist distcheck"}, {"sha": "6c0be654e1f5d74a8e39b6f18f26896742fda9d1", "filename": "mk/docs.mk", "status": "removed", "additions": 0, "deletions": 222, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,222 +0,0 @@\n-# Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# The various pieces of standalone documentation.\n-#\n-# The DOCS variable is their names (with no file extension).\n-#\n-# RUSTDOC_FLAGS_xyz variables are extra arguments to pass to the\n-# rustdoc invocation for xyz.\n-#\n-# RUSTDOC_DEPS_xyz are extra dependencies for the rustdoc invocation\n-# on xyz.\n-#\n-# L10N_LANGS are the languages for which the docs have been\n-# translated.\n-######################################################################\n-DOCS := index \\\n-    complement-lang-faq complement-design-faq complement-project-faq \\\n-    rustdoc reference grammar\n-\n-# Legacy guides, preserved for a while to reduce the number of 404s\n-DOCS += guide-crates guide-error-handling guide-ffi guide-macros guide \\\n-    guide-ownership guide-plugins guide-pointers guide-strings guide-tasks \\\n-    guide-testing tutorial intro\n-\n-\n-RUSTDOC_DEPS_reference := doc/full-toc.inc\n-RUSTDOC_FLAGS_reference := --html-in-header=doc/full-toc.inc\n-\n-L10N_LANGS := ja\n-\n-# Generally no need to edit below here.\n-\n-# The options are passed to the documentation generators.\n-RUSTDOC_HTML_OPTS_NO_CSS = --html-before-content=doc/version_info.html \\\n-\t--html-in-header=doc/favicon.inc \\\n-\t--html-after-content=doc/footer.inc \\\n-\t--markdown-playground-url='https://play.rust-lang.org/'\n-\n-RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css\n-\n-# The rustdoc executable...\n-RUSTDOC_EXE = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n-# ...with rpath included in case --disable-rpath was provided to\n-# ./configure\n-RUSTDOC = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTDOC_EXE)\n-\n-# The rustbook executable...\n-RUSTBOOK_EXE = $(HBIN2_H_$(CFG_BUILD))/rustbook$(X_$(CFG_BUILD))\n-# ...with rpath included in case --disable-rpath was provided to\n-# ./configure\n-RUSTBOOK = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTBOOK_EXE)\n-\n-# The error_index_generator executable...\n-ERR_IDX_GEN_EXE = $(HBIN2_H_$(CFG_BUILD))/error_index_generator$(X_$(CFG_BUILD))\n-ERR_IDX_GEN = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE)\n-ERR_IDX_GEN_MD = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE) markdown\n-\n-D := $(S)src/doc\n-\n-DOC_TARGETS := book nomicon error-index\n-COMPILER_DOC_TARGETS :=\n-DOC_L10N_TARGETS :=\n-\n-# If NO_REBUILD is set then break the dependencies on rustdoc so we\n-# build the documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n-HTML_DEPS := $(RUSTDOC_EXE)\n-else\n-HTML_DEPS :=\n-endif\n-\n-######################################################################\n-# Rust version\n-######################################################################\n-\n-HTML_DEPS += doc/version_info.html\n-doc/version_info.html: $(D)/version_info.html.template $(MKFILE_DEPS) \\\n-                       $(wildcard $(D)/*.*) | doc/\n-\t@$(call E, version-info: $@)\n-\t$(Q)sed -e \"s/VERSION/$(CFG_RELEASE)/; \\\n-                s/SHORT_HASH/$(CFG_SHORT_VER_HASH)/; \\\n-                s/STAMP/$(CFG_VER_HASH)/;\" $< >$@\n-\n-GENERATED += doc/version_info.html\n-\n-######################################################################\n-# Docs from rustdoc\n-######################################################################\n-\n-doc/:\n-\t@mkdir -p $@\n-\n-HTML_DEPS += doc/rust.css\n-doc/rust.css: $(D)/rust.css | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-HTML_DEPS += doc/favicon.inc\n-doc/favicon.inc: $(D)/favicon.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-doc/full-toc.inc: $(D)/full-toc.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-HTML_DEPS += doc/footer.inc\n-doc/footer.inc: $(D)/footer.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-# The (english) documentation for each doc item.\n-DOC_TARGETS += doc/not_found.html\n-doc/not_found.html: $(D)/not_found.md $(HTML_DEPS) | doc/\n-\t@$(call E, rustdoc: $@)\n-\t$(Q)$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) \\\n-\t\t--markdown-no-toc \\\n-\t\t--markdown-css https://doc.rust-lang.org/rust.css $<\n-\n-define DEF_DOC\n-\n-# HTML (rustdoc)\n-DOC_TARGETS += doc/$(1).html\n-doc/$(1).html: $$(D)/$(1).md $$(HTML_DEPS) $$(RUSTDOC_DEPS_$(1)) | doc/\n-\t@$$(call E, rustdoc: $$@)\n-\t$$(Q)$$(RUSTDOC) $$(RUSTDOC_HTML_OPTS) $$(RUSTDOC_FLAGS_$(1)) $$<\n-\n-endef\n-\n-$(foreach docname,$(DOCS),$(eval $(call DEF_DOC,$(docname))))\n-\n-\n-######################################################################\n-# Rustdoc (libstd/extra)\n-######################################################################\n-\n-\n-# The library documenting macro\n-#\n-# $(1) - The crate name (std/extra)\n-#\n-# Passes --cfg stage2 to rustdoc because it uses the stage2 librustc.\n-define DEF_LIB_DOC\n-\n-# If NO_REBUILD is set then break the dependencies on rustdoc so we\n-# build crate documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n-LIB_DOC_DEP_$(1) = \\\n-\t$$(CRATEFILE_$(1)) \\\n-\t$$(RSINPUTS_$(1)) \\\n-\t$$(RUSTDOC_EXE) \\\n-\t$$(foreach dep,$$(RUST_DEPS_$(1)_T_$(CFG_BUILD)), \\\n-\t\t$$(TLIB2_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.$$(dep)) \\\n-\t$$(foreach dep,$$(filter $$(DOC_CRATES), $$(RUST_DEPS_$(1)_T_$(CFG_BUILD))), \\\n-\t\tdoc/$$(dep)/)\n-else\n-LIB_DOC_DEP_$(1) = $$(CRATEFILE_$(1)) $$(RSINPUTS_$(1))\n-endif\n-\n-doc/$(1)/:\n-\t$$(Q)mkdir -p $$@\n-\n-doc/$(1)/index.html: CFG_COMPILER_HOST_TRIPLE = $(CFG_TARGET)\n-doc/$(1)/index.html: $$(LIB_DOC_DEP_$(1)) doc/$(1)/\n-\t@$$(call E, rustdoc: $$@)\n-\t$$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(CFG_BUILD)) \\\n-\t\t$$(RUSTDOC) --cfg dox --cfg stage2 $$(RUSTFLAGS_$(1)) $$<\n-endef\n-\n-$(foreach crate,$(CRATES),$(eval $(call DEF_LIB_DOC,$(crate))))\n-\n-COMPILER_DOC_TARGETS := $(CRATES:%=doc/%/index.html)\n-ifdef CFG_ENABLE_COMPILER_DOCS\n-  DOC_TARGETS += $(COMPILER_DOC_TARGETS)\n-else\n-  DOC_TARGETS += $(DOC_CRATES:%=doc/%/index.html)\n-endif\n-\n-ifdef CFG_DISABLE_DOCS\n-  $(info cfg: disabling doc build (CFG_DISABLE_DOCS))\n-  DOC_TARGETS :=\n-  COMPILER_DOC_TARGETS :=\n-endif\n-\n-docs: $(DOC_TARGETS)\n-doc: docs\n-compiler-docs: $(COMPILER_DOC_TARGETS)\n-\n-book: doc/book/index.html\n-\n-doc/book/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/book/*.md) | doc/\n-\t@$(call E, rustbook: $@)\n-\t$(Q)rm -rf doc/book\n-\t$(Q)$(RUSTBOOK) build $(S)src/doc/book doc/book\n-\n-nomicon: doc/nomicon/index.html\n-\n-doc/nomicon/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/nomicon/*.md) | doc/\n-\t@$(call E, rustbook: $@)\n-\t$(Q)rm -rf doc/nomicon\n-\t$(Q)$(RUSTBOOK) build $(S)src/doc/nomicon doc/nomicon\n-\n-error-index: doc/error-index.html\n-\n-# Metadata used to generate the index is created as a side effect of\n-# the build so this depends on every crate being up to date.\n-doc/error-index.html: $(ERR_IDX_GEN_EXE) $(CSREQ$(2)_T_$(CFG_BUILD)_H_$(CFG_BUILD)) | doc/\n-\t$(Q)$(call E, error_index_generator: $@)\n-\t$(Q)$(ERR_IDX_GEN)\n-\n-doc/error-index.md: $(ERR_IDX_GEN_EXE) $(CSREQ$(2)_T_$(CFG_BUILD)_H_$(CFG_BUILD)) | doc/\n-\t$(Q)$(call E, error_index_generator: $@)\n-\t$(Q)$(ERR_IDX_GEN_MD)"}, {"sha": "1bd042adb218fdb958cc9a16bebd5f57e6ec1509", "filename": "mk/grammar.mk", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,117 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-BG = $(CFG_BUILD_DIR)/grammar/\n-SG = $(S)src/grammar/\n-B = $(CFG_BUILD_DIR)/$(CFG_BUILD)/stage2/\n-L = $(B)lib/rustlib/$(CFG_BUILD)/lib\n-LD = $(CFG_BUILD)/stage2/lib/rustlib/$(CFG_BUILD)/lib/\n-RUSTC = $(STAGE2_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-ifeq ($(CFG_OSTYPE),apple-darwin)\n-\tFLEX_LDFLAGS=-ll\n-else\n-\tFLEX_LDFLAGS=-lfl\n-endif\n-\n-# Run the reference lexer against libsyntax and compare the tokens and spans.\n-# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n-#\n-# $(1) is the file to test.\n-define LEXER_TEST\n-grep \"// ignore-lexer-test\" $(1) ; \\\n-  if [ $$? -eq 1 ]; then \\\n-   CLASSPATH=$(B)grammar $(CFG_GRUN) RustLexer tokens -tokens < $(1) \\\n-   | $(B)grammar/verify $(1) ; \\\n-  fi\n-endef\n-\n-$(BG):\n-\t$(Q)mkdir -p $(BG)\n-\n-$(BG)RustLexer.class: $(BG) $(SG)RustLexer.g4\n-\t$(Q)$(CFG_ANTLR4) -o $(BG) $(SG)RustLexer.g4\n-\t$(Q)$(CFG_JAVAC) -d $(BG) -classpath $(CFG_ANTLR4_JAR) $(BG)RustLexer.java\n-\n-check-build-lexer-verifier: $(BG)verify\n-\n-ifeq ($(NO_REBUILD),)\n-VERIFY_DEPS :=  rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.rustc\n-else\n-VERIFY_DEPS :=\n-endif\n-\n-$(BG)verify: $(BG) $(SG)verify.rs $(VERIFY_DEPS)\n-\t$(Q)$(RUSTC) --out-dir $(BG) -L $(L) $(SG)verify.rs\n-\n-ifdef CFG_JAVAC\n-ifdef CFG_ANTLR4\n-ifdef CFG_GRUN\n-check-lexer: $(BG) $(BG)RustLexer.class check-build-lexer-verifier\n-\t$(info Verifying libsyntax against the reference lexer ...)\n-\t$(Q)$(SG)check.sh $(S) \"$(BG)\" \\\n-\t\t\"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\"\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-\n-$(BG)lex.yy.c: $(SG)lexer.l $(BG)\n-\t@$(call E, flex: $@)\n-\t$(Q)$(CFG_FLEX) -o $@ $<\n-\n-$(BG)lexer-lalr.o: $(BG)lex.yy.c $(BG)parser-lalr.tab.h\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -include $(BG)parser-lalr.tab.h -c -o $@ $<\n-\n-$(BG)parser-lalr.tab.c $(BG)parser-lalr.tab.h: $(SG)parser-lalr.y\n-\t@$(call E, bison: $@)\n-\t$(Q)$(CFG_BISON) $< --output=$(BG)parser-lalr.tab.c --defines=$(BG)parser-lalr.tab.h \\\n-\t\t--name-prefix=rs --warnings=error=all\n-\n-$(BG)parser-lalr.o: $(BG)parser-lalr.tab.c\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -c -o $@ $<\n-\n-$(BG)parser-lalr-main.o: $(SG)parser-lalr-main.c\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -std=c99 -c -o $@ $<\n-\n-$(BG)parser-lalr: $(BG)parser-lalr.o $(BG)parser-lalr-main.o $(BG)lexer-lalr.o\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -o $@ $^ $(FLEX_LDFLAGS)\n-\n-\n-ifdef CFG_FLEX\n-ifdef CFG_BISON\n-check-grammar: $(BG) $(BG)parser-lalr\n-\t$(info Verifying grammar ...)\n-\t$(SG)testparser.py -p $(BG)parser-lalr -s $(S)src\n-\n-else\n-$(info cfg: bison not available, skipping parser test...)\n-check-grammar:\n-\n-endif\n-else\n-$(info cfg: flex not available, skipping parser test...)\n-check-grammar:\n-\n-endif"}, {"sha": "d17479bd894e5f91fa83d0a3ee0080a3da02232a", "filename": "mk/host.mk", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,84 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Generic rule for copying any target crate to a host crate. This rule will also\n-# promote any dependent rust crates up to their host locations as well\n-#\n-# $(1) - the stage to copy from\n-# $(2) - the stage to copy to\n-# $(3) - the host triple\n-# $(4) - the target triple (same as $(3))\n-# $(5) - the name of the crate being processed\n-define CP_HOST_STAGE_N_CRATE\n-\n-ifeq ($$(ONLY_RLIB_$(5)),)\n-$$(HLIB$(2)_H_$(4))/stamp.$(5): \\\n-\t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5) \\\n-\t$$(RUST_DEPS_$(5)_T_$(3):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$(@D)/lib$(5))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(3)_H_$(4))/$$(call CFG_LIB_GLOB_$(3),$(5)) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n-else\n-$$(HLIB$(2)_H_$(4))/stamp.$(5):\n-\t$$(Q)touch $$@\n-endif\n-\n-endef\n-\n-# Same as the above macro, but for tools instead of crates\n-define CP_HOST_STAGE_N_TOOL\n-\n-$$(HBIN$(2)_H_$(4))/$(5)$$(X_$(3)): \\\n-\t$$(TBIN$(1)_T_$(3)_H_$(4))/$(5)$$(X_$(3)) \\\n-\t$$(TOOL_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n-\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-\n-# Miscellaneous rules for just making a few directories.\n-#\n-# $(1) - the stage to copy from\n-# $(2) - the stage to copy to\n-# $(3) - the target triple\n-# $(4) - the host triple (same as $(3))\n-define CP_HOST_STAGE_N\n-\n-ifneq ($(CFG_LIBDIR_RELATIVE),bin)\n-$$(HLIB$(2)_H_$(4))/:\n-\t@mkdir -p $$@\n-endif\n-\n-endef\n-\n-$(foreach t,$(CFG_HOST), \\\n-\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t))) \\\n-\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t))) \\\n-\t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))\n-\n-$(foreach crate,$(CRATES), \\\n- $(foreach t,$(CFG_HOST), \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,0,1,$(t),$(t),$(crate))) \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,1,2,$(t),$(t),$(crate))) \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,2,3,$(t),$(t),$(crate)))))\n-\n-$(foreach tool,$(TOOLS), \\\n- $(foreach t,$(CFG_HOST), \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,0,1,$(t),$(t),$(tool))) \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,1,2,$(t),$(t),$(tool))) \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,2,3,$(t),$(t),$(tool)))))"}, {"sha": "be212869f0103517b8856b0ff1bed4b65e58ed86", "filename": "mk/install.mk", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,138 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-RUN_INSTALLER = cd tmp/empty_dir && \\\n-\tsh ../../tmp/dist/$(1)/install.sh \\\n-\t\t--prefix=\"$(DESTDIR)$(CFG_PREFIX)\" \\\n-\t\t--libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" \\\n-\t\t--mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \\\n-\t\t--docdir=\"$(DESTDIR)$(CFG_DOCDIR)\"\n-\n-install:\n-ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n-# Build the dist as the original user\n-\t$(Q)sudo -u \"$$SUDO_USER\" $(MAKE) prepare_install\n-else\n-\t$(Q)$(MAKE) prepare_install\n-endif\n-ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)$(call RUN_INSTALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --disable-ldconfig\n-endif\n-\t$(Q)$(foreach target,$(CFG_TARGET),\\\n-\t  ($(call RUN_INSTALLER,$(STD_PKG_NAME)-$(target)) --disable-ldconfig);)\n-\t$(Q)$(call RUN_INSTALLER,$(PKG_NAME)-$(CFG_BUILD))\n-# Remove tmp files because it's a decent amount of disk space\n-\t$(Q)rm -R tmp/dist\n-\n-prepare_install: dist-tar-bins | tmp/empty_dir\n-\n-uninstall:\n-ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n-# Build the dist as the original user\n-\t$(Q)sudo -u \"$$SUDO_USER\" $(MAKE) prepare_uninstall\n-else\n-\t$(Q)$(MAKE) prepare_uninstall\n-endif\n-ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)$(call RUN_INSTALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --uninstall\n-endif\n-\t$(Q)$(call RUN_INSTALLER,$(PKG_NAME)-$(CFG_BUILD)) --uninstall\n-\t$(Q)$(foreach target,$(CFG_TARGET),\\\n-\t  ($(call RUN_INSTALLER,$(STD_PKG_NAME)-$(target)) --uninstall);)\n-# Remove tmp files because it's a decent amount of disk space\n-\t$(Q)rm -R tmp/dist\n-\n-prepare_uninstall: dist-tar-bins | tmp/empty_dir\n-\n-.PHONY: install prepare_install uninstall prepare_uninstall\n-\n-tmp/empty_dir:\n-\tmkdir -p $@\n-\n-######################################################################\n-# Android remote installation\n-######################################################################\n-\n-# Android runtime setup\n-# FIXME: This probably belongs somewhere else\n-\n-# target platform specific variables for android\n-define DEF_ADB_DEVICE_STATUS\n-CFG_ADB_DEVICE_STATUS=$(1)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-    $(if $(findstring adb,$(CFG_ADB)), \\\n-      $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n-        $(info install: install-runtime-target for $(target) enabled \\\n-          $(info install: android device attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n-        $(info install: install-runtime-target for $(target) disabled \\\n-          $(info install: android device not attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n-      ), \\\n-      $(info install: install-runtime-target for $(target) disabled \\\n-        $(info install: adb not found) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n-    ), \\\n-  ) \\\n-)\n-\n-ifeq (install-runtime-target,$(firstword $(MAKECMDGOALS)))\n-$(eval $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)):;@:)\n-L_TOKEN := $(word 2,$(MAKECMDGOALS))\n-ifeq ($(L_TOKEN),)\n-CFG_RUNTIME_PUSH_DIR=/system/lib\n-else\n-CFG_RUNTIME_PUSH_DIR=$(L_TOKEN)\n-endif\n-\n-ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n-ifdef VERBOSE\n- ADB = adb $(1)\n- ADB_PUSH = adb push $(1) $(2)\n- ADB_SHELL = adb shell $(1) $(2)\n-else\n- ADB = $(Q)$(call E, adb $(1)) && adb $(1) 1>/dev/null\n- ADB_PUSH = $(Q)$(call E, adb push $(1)) && adb push $(1) $(2) 1>/dev/null\n- ADB_SHELL = $(Q)$(call E, adb shell $(1) $(2)) && adb shell $(1) $(2) 1>/dev/null\n-endif\n-\n-define INSTALL_RUNTIME_TARGET_N\n-install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n-\t$$(Q)$$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n-\t    $$(call ADB_PUSH,$$(TL$(1)$(2))/$$(call CFG_LIB_GLOB_$(1),$$(crate)), \\\n-\t\t\t$$(CFG_RUNTIME_PUSH_DIR));)\n-endef\n-\n-define INSTALL_RUNTIME_TARGET_CLEANUP_N\n-install-runtime-target-$(1)-cleanup:\n-\t$$(Q)$$(call ADB,remount)\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n-\t    $$(call ADB_SHELL,rm,$$(CFG_RUNTIME_PUSH_DIR)/$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n-  $(eval $(call INSTALL_RUNTIME_TARGET_N,$(taget),$(CFG_BUILD))) \\\n-  $(eval $(call INSTALL_RUNTIME_TARGET_CLEANUP_N,$(target))) \\\n-  ))\n-\n-install-runtime-target: \\\n-\tinstall-runtime-target-arm-linux-androideabi-cleanup \\\n-\tinstall-runtime-target-arm-linux-androideabi-host-$(CFG_BUILD)\n-else\n-install-runtime-target:\n-\t@echo \"No device to install runtime library\"\n-\t@echo\n-endif\n-endif"}, {"sha": "76367e6f3a628c1d391b09d403dd17266987dc63", "filename": "mk/llvm.mk", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,124 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-LLVM_DEPS := $(S)/.gitmodules\n-else\n-\n-# This is just a rough approximation of LLVM deps\n-LLVM_DEPS_SRC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)lib,*cpp *hpp)\n-LLVM_DEPS_INC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)include,*cpp *hpp)\n-LLVM_DEPS=$(LLVM_DEPS_SRC) $(LLVM_DEPS_INC)\n-endif\n-\n-ifdef CFG_DISABLE_OPTIMIZE_LLVM\n-LLVM_BUILD_CONFIG_MODE := Debug\n-else ifdef CFG_ENABLE_LLVM_RELEASE_DEBUGINFO\n-LLVM_BUILD_CONFIG_MODE := RelWithDebInfo\n-else\n-LLVM_BUILD_CONFIG_MODE := Release\n-endif\n-\n-define DEF_LLVM_RULES\n-\n-ifeq ($(1),$$(CFG_BUILD))\n-LLVM_DEPS_TARGET_$(1) := $$(LLVM_DEPS)\n-else\n-LLVM_DEPS_TARGET_$(1) := $$(LLVM_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n-endif\n-\n-# If CFG_LLVM_ROOT is defined then we don't build LLVM ourselves\n-ifeq ($(CFG_LLVM_ROOT),)\n-\n-LLVM_STAMP_$(1) = $(S)src/rustllvm/llvm-auto-clean-trigger\n-LLVM_DONE_$(1) = $$(CFG_LLVM_BUILD_DIR_$(1))/llvm-finished-building\n-\n-$$(LLVM_CONFIG_$(1)): $$(LLVM_DONE_$(1))\n-\n-ifneq ($$(CFG_NINJA),)\n-BUILD_LLVM_$(1) := $$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-BUILD_LLVM_$(1) := $$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n-\t\t\t--config $$(LLVM_BUILD_CONFIG_MODE)\n-else\n-BUILD_LLVM_$(1) := $$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n-endif\n-\n-$$(LLVM_DONE_$(1)): $$(LLVM_DEPS_TARGET_$(1)) $$(LLVM_STAMP_$(1))\n-\t@$$(call E, cmake: llvm)\n-\t$$(Q)if ! cmp $$(LLVM_STAMP_$(1)) $$(LLVM_DONE_$(1)); then \\\n-\t\t$$(MAKE) clean-llvm$(1); \\\n-\t\t$$(BUILD_LLVM_$(1)); \\\n-\tfi\n-\t$$(Q)cp $$(LLVM_STAMP_$(1)) $$@\n-\n-ifneq ($$(CFG_NINJA),)\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1)) -t clean\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t--target clean\n-else\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n-endif\n-\n-else\n-clean-llvm$(1):\n-endif\n-\n-$$(LLVM_AR_$(1)): $$(LLVM_CONFIG_$(1))\n-\n-ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n-LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-\t\t\t\t\t-print-file-name=lib$(CFG_STDCPP_NAME).a))\"\n-else\n-LLVM_STDCPP_RUSTFLAGS_$(1) =\n-endif\n-\n-\n-# LLVM linkage:\n-# Note: Filter with llvm-config so that optional targets which aren't present\n-# don't cause errors (ie PNaCl's target is only present within PNaCl's LLVM\n-# fork).\n-LLVM_LINKAGE_PATH_$(1):=$$(abspath $$(RT_OUTPUT_DIR_$(1))/llvmdeps.rs)\n-$$(LLVM_LINKAGE_PATH_$(1)): $(S)src/etc/mklldeps.py $$(LLVM_CONFIG_$(1))\n-\t$(Q)$(CFG_PYTHON) \"$$<\" \"$$@\" \"$$(filter $$(shell \\\n-\t\t\t\t$$(LLVM_CONFIG_$(1)) --components), \\\n-                        $(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\" \\\n-\t\t\"$$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" $$(LLVM_CONFIG_$(1)) \\\n-\t\t\"$(CFG_STDCPP_NAME)\" \"$$(CFG_USING_LIBCPP)\"\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_LLVM_RULES,$(host))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n-\n-# This can't be done in target.mk because it's included before this file.\n-define LLVM_LINKAGE_DEPS\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(2))\n-RUSTFLAGS$(1)_rustc_llvm_T_$(2) += $$(shell echo $$(LLVM_ALL_COMPONENTS_$(2)) | tr '-' '_' |\\\n-\tsed -e 's/^ //;s/\\([^ ]*\\)/\\-\\-cfg \"llvm_component=\\\\\"\\1\\\\\"\"/g')\n-endef\n-\n-$(foreach source,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,0,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,1,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,2,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,3,$(target),$(source)))))"}, {"sha": "6b409eebc74c8f6972206ac6860846abd2755387", "filename": "mk/main.mk", "status": "removed", "additions": 0, "deletions": 641, "changes": 641, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,641 +0,0 @@\n-# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Version numbers and strings\n-######################################################################\n-\n-# The version number\n-CFG_RELEASE_NUM=1.17.0\n-\n-# An optional number to put after the label, e.g. '.2' -> '-beta.2'\n-# NB Make sure it starts with a dot to conform to semver pre-release\n-# versions (section 9)\n-CFG_PRERELEASE_VERSION=.1\n-\n-ifeq ($(CFG_RELEASE_CHANNEL),stable)\n-# This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n-CFG_RELEASE=$(CFG_RELEASE_NUM)\n-# This is the string used in dist artifact file names, e.g. \"0.12.0\", \"nightly\"\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n-CFG_DISABLE_UNSTABLE_FEATURES=1\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n-# When building beta distributables just reuse the same \"beta\" name\n-# so when we upload we'll always override the previous beta. This\n-# doesn't actually impact the version reported by rustc - it's just\n-# for file naming.\n-CFG_PACKAGE_VERS=beta\n-CFG_DISABLE_UNSTABLE_FEATURES=1\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),nightly)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-nightly\n-# When building nightly distributables just reuse the same \"nightly\" name\n-# so when we upload we'll always override the previous nighly. This\n-# doesn't actually impact the version reported by rustc - it's just\n-# for file naming.\n-CFG_PACKAGE_VERS=nightly\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),dev)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-dev\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-dev\n-endif\n-\n-# Append a version-dependent hash to each library, so we can install different\n-# versions in the same place\n-CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n-\n-# If local-rust is the same major.minor as the current version, then force a local-rebuild\n-ifdef CFG_ENABLE_LOCAL_RUST\n-SEMVER_PREFIX=$(shell echo $(CFG_RELEASE_NUM) | grep -E -o '^[[:digit:]]+\\.[[:digit:]]+')\n-LOCAL_RELEASE=$(shell $(S)src/etc/local_stage0.sh --print-rustc-release $(CFG_LOCAL_RUST_ROOT))\n-ifneq (,$(filter $(SEMVER_PREFIX).%,$(LOCAL_RELEASE)))\n-    CFG_INFO := $(info cfg: auto-detected local-rebuild using $(LOCAL_RELEASE))\n-    CFG_ENABLE_LOCAL_REBUILD = 1\n-endif\n-endif\n-\n-# The name of the package to use for creating tarballs, installers etc.\n-CFG_PACKAGE_NAME=rustc-$(CFG_PACKAGE_VERS)\n-\n-# The version string plus commit information - this is what rustc reports\n-CFG_VERSION = $(CFG_RELEASE)\n-CFG_GIT_DIR := $(CFG_SRC_DIR).git\n-# since $(CFG_GIT) may contain spaces (especially on Windows),\n-# we need to escape them. (\" \" to r\"\\ \")\n-# Note that $(subst ...) ignores space after `subst`,\n-# so we use a hack: define $(SPACE) which contains space character.\n-SPACE :=\n-SPACE +=\n-ifneq ($(CFG_GIT),)\n-ifneq ($(wildcard $(subst $(SPACE),\\$(SPACE),$(CFG_GIT_DIR))),)\n-    CFG_VER_DATE = $(shell git --git-dir='$(CFG_GIT_DIR)' log -1 --date=short --pretty=format:'%cd')\n-    CFG_VER_HASH = $(shell git --git-dir='$(CFG_GIT_DIR)' rev-parse HEAD)\n-    CFG_SHORT_VER_HASH = $(shell git --git-dir='$(CFG_GIT_DIR)' rev-parse --short=9 HEAD)\n-    CFG_VERSION += ($(CFG_SHORT_VER_HASH) $(CFG_VER_DATE))\n-endif\n-endif\n-\n-# Windows exe's need numeric versions - don't use anything but\n-# numbers and dots here\n-CFG_VERSION_WIN = $(CFG_RELEASE_NUM)\n-\n-CFG_INFO := $(info cfg: version $(CFG_VERSION))\n-\n-######################################################################\n-# More configuration\n-######################################################################\n-\n-MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n-MKFILES_FOR_TARBALL:=$(MKFILE_DEPS)\n-ifneq ($(NO_MKFILE_DEPS),)\n-MKFILE_DEPS :=\n-endif\n-NON_BUILD_HOST = $(filter-out $(CFG_BUILD),$(CFG_HOST))\n-NON_BUILD_TARGET = $(filter-out $(CFG_BUILD),$(CFG_TARGET))\n-\n-ifneq ($(MAKE_RESTARTS),)\n-CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n-endif\n-\n-CFG_INFO := $(info cfg: build triple $(CFG_BUILD))\n-CFG_INFO := $(info cfg: host triples $(CFG_HOST))\n-CFG_INFO := $(info cfg: target triples $(CFG_TARGET))\n-\n-ifneq ($(wildcard $(NON_BUILD_HOST)),)\n-CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST))\n-endif\n-ifneq ($(wildcard $(NON_BUILD_TARGET)),)\n-CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET))\n-endif\n-\n-CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n-CFG_GCCISH_CFLAGS :=\n-CFG_GCCISH_LINK_FLAGS :=\n-\n-CFG_JEMALLOC_FLAGS :=\n-\n-ifdef CFG_DISABLE_OPTIMIZE\n-  $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n-  CFG_RUSTC_FLAGS +=\n-  CFG_JEMALLOC_FLAGS += --enable-debug\n-else\n-  # The rtopt cfg turns off runtime sanity checks\n-  CFG_RUSTC_FLAGS += -O --cfg rtopt\n-endif\n-\n-CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n-\n-ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n-  $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n-  CFG_RUSTC_FLAGS += -C debug-assertions=on\n-endif\n-\n-ifdef CFG_ENABLE_DEBUGINFO\n-  $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n-  CFG_RUSTC_FLAGS += -g\n-else ifdef CFG_ENABLE_DEBUGINFO_LINES\n-  $(info cfg: enabling line number debuginfo (CFG_ENABLE_DEBUGINFO_LINES))\n-  CFG_RUSTC_FLAGS += -Cdebuginfo=1\n-endif\n-\n-ifdef SAVE_TEMPS\n-  CFG_RUSTC_FLAGS += -C save-temps\n-endif\n-ifdef ASM_COMMENTS\n-  CFG_RUSTC_FLAGS += -Z asm-comments\n-endif\n-ifdef TIME_PASSES\n-  CFG_RUSTC_FLAGS += -Z time-passes\n-endif\n-ifdef TIME_LLVM_PASSES\n-  CFG_RUSTC_FLAGS += -Z time-llvm-passes\n-endif\n-ifdef TRACE\n-  CFG_RUSTC_FLAGS += -Z trace\n-endif\n-ifndef CFG_DISABLE_RPATH\n-CFG_RUSTC_FLAGS += -C rpath\n-endif\n-\n-# The executables crated during this compilation process have no need to include\n-# static copies of libstd and libextra. We also generate dynamic versions of all\n-# libraries, so in the interest of space, prefer dynamic linking throughout the\n-# compilation process.\n-#\n-# Note though that these flags are omitted for the *bins* in stage2+. This means\n-# that the snapshot will be generated with a statically linked rustc so we only\n-# have to worry about the distribution of one file (with its native dynamic\n-# dependencies)\n-RUSTFLAGS_STAGE0 += -C prefer-dynamic\n-RUSTFLAGS_STAGE1 += -C prefer-dynamic\n-RUST_LIB_FLAGS_ST2 += -C prefer-dynamic\n-RUST_LIB_FLAGS_ST3 += -C prefer-dynamic\n-\n-# Landing pads require a lot of codegen. We can get through bootstrapping faster\n-# by not emitting them.\n-\n-ifdef CFG_DISABLE_STAGE0_LANDING_PADS\n-  RUSTFLAGS_STAGE0 += -Z no-landing-pads\n-endif\n-\n-# platform-specific auto-configuration\n-include $(CFG_SRC_DIR)mk/platform.mk\n-\n-# Run the stage1/2 compilers under valgrind\n-ifdef VALGRIND_COMPILE\n-  CFG_VALGRIND_COMPILE := $(CFG_VALGRIND)\n-else\n-  CFG_VALGRIND_COMPILE :=\n-endif\n-\n-\n-ifndef CFG_DISABLE_VALGRIND_RPASS\n-  $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n-  $(info cfg: valgrind-rpass command set to $(CFG_VALGRIND))\n-  CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n-else\n-  $(info cfg: disabling valgrind run-pass tests)\n-  CFG_VALGRIND_RPASS :=\n-endif\n-\n-\n-ifdef CFG_ENABLE_VALGRIND\n-  $(info cfg: enabling valgrind (CFG_ENABLE_VALGRIND))\n-  CFG_JEMALLOC_FLAGS += --enable-valgrind\n-else\n-  CFG_VALGRIND :=\n-endif\n-\n-######################################################################\n-# Target-and-rule \"utility variables\"\n-######################################################################\n-\n-define DEF_FOR_TARGET\n-X_$(1) := $(CFG_EXE_SUFFIX_$(1))\n-ifndef CFG_LLVM_TARGET_$(1)\n-CFG_LLVM_TARGET_$(1) := $(1)\n-endif\n-endef\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEF_FOR_TARGET,$(target))))\n-\n-# \"Source\" files we generate in builddir along the way.\n-GENERATED :=\n-\n-# Delete the built-in rules.\n-.SUFFIXES:\n-%:: %,v\n-%:: RCS/%,v\n-%:: RCS/%\n-%:: s.%\n-%:: SCCS/s.%\n-\n-\n-######################################################################\n-# Cleaning out old crates\n-######################################################################\n-\n-# $(1) is the path for directory to match against\n-# $(2) is the glob to use in the match\n-#\n-# Note that a common bug is to accidentally construct the glob denoted\n-# by $(2) with a space character prefix, which invalidates the\n-# construction $(1)$(2).\n-define CHECK_FOR_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: there are previous\" \\'$(notdir $(2))\\' \"libraries:\" $$MATCHES; fi\n-endef\n-\n-# Same interface as above, but deletes rather than just listing the files.\n-ifdef VERBOSE\n-define REMOVE_ALL_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: removing previous\" \\'$(notdir $(1))\\' \"libraries:\" $$MATCHES; rm $$MATCHES ; fi\n-endef\n-else\n-define REMOVE_ALL_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then rm $$MATCHES ; fi\n-endef\n-endif\n-\n-# We use a different strategy for LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n-# than in the macros above because it needs the result of running the\n-# `ls` command after other rules in the command list have run; the\n-# macro-expander for $(wildcard ...) would deliver its results too\n-# soon. (This is in contrast to the macros above, which are meant to\n-# be run at the outset of a command list in a rule.)\n-ifdef VERBOSE\n-define LIST_ALL_OLD_GLOB_MATCHES\n-  @echo \"info: now are following matches for\" '$(notdir $(1))' \"libraries:\"\n-  @( ls $(1) 2>/dev/null || true )\n-endef\n-else\n-define LIST_ALL_OLD_GLOB_MATCHES\n-endef\n-endif\n-\n-######################################################################\n-# LLVM macros\n-######################################################################\n-\n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend msp430 sparc\n-LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n-                interpreter instrumentation\n-\n-ifneq ($(CFG_LLVM_ROOT),)\n-# Ensure we only try to link targets that the installed LLVM actually has:\n-LLVM_COMPONENTS := $(filter $(shell $(CFG_LLVM_ROOT)/bin/llvm-config$(X_$(CFG_BUILD)) --components),\\\n-\t\t\t$(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\n-else\n-LLVM_COMPONENTS := $(LLVM_OPTIONAL_COMPONENTS) $(LLVM_REQUIRED_COMPONENTS)\n-endif\n-\n-# Only build these LLVM tools\n-LLVM_TOOLS=bugpoint llc llvm-ar llvm-as llvm-dis llvm-mc opt llvm-extract\n-\n-define DEF_LLVM_VARS\n-# The configure script defines these variables with the target triples\n-# separated by Z. This defines new ones with the expected format.\n-ifeq ($$(CFG_LLVM_ROOT),)\n-CFG_LLVM_BUILD_DIR_$(1):=$$(CFG_LLVM_BUILD_DIR_$(subst -,_,$(1)))\n-CFG_LLVM_INST_DIR_$(1):=$$(CFG_LLVM_INST_DIR_$(subst -,_,$(1)))\n-else\n-CFG_LLVM_INST_DIR_$(1):=$$(CFG_LLVM_ROOT)\n-endif\n-\n-# Any rules that depend on LLVM should depend on LLVM_CONFIG\n-LLVM_CONFIG_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-config$$(X_$(1))\n-LLVM_MC_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-mc$$(X_$(1))\n-LLVM_AR_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-ar$$(X_$(1))\n-LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n-LLVM_BINDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --bindir)\n-LLVM_INCDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --includedir)\n-LLVM_LIBDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libdir)\n-LLVM_LIBDIR_RUSTFLAGS_$(1)=-L native=\"$$(LLVM_LIBDIR_$(1))\"\n-LLVM_LDFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --ldflags)\n-ifeq ($$(findstring freebsd,$(1)),freebsd)\n-# On FreeBSD, it may search wrong headers (that are for pre-installed LLVM),\n-# so we replace -I with -iquote to ensure that it searches bundled LLVM first.\n-LLVM_CXXFLAGS_$(1)=$$(subst -I, -iquote , $$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags))\n-else\n-LLVM_CXXFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags)\n-endif\n-LLVM_HOST_TRIPLE_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --host-target)\n-\n-LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X_$(1))\n-LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n-\n-LLVM_ALL_COMPONENTS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --components)\n-LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_LLVM_VARS,$(host))))\n-\n-######################################################################\n-# Exports for sub-utilities\n-######################################################################\n-\n-# Note that any variable that re-configure should pick up needs to be\n-# exported\n-\n-export CFG_SRC_DIR\n-export CFG_SRC_DIR_RELATIVE\n-export CFG_BUILD_DIR\n-ifdef CFG_VER_DATE\n-export CFG_VER_DATE\n-endif\n-ifdef CFG_VER_HASH\n-export CFG_VER_HASH\n-endif\n-export CFG_VERSION\n-export CFG_VERSION_WIN\n-export CFG_RELEASE\n-export CFG_PACKAGE_NAME\n-export CFG_BUILD\n-export CFG_RELEASE_CHANNEL\n-export CFG_LLVM_ROOT\n-export CFG_PREFIX\n-export CFG_LIBDIR\n-export CFG_LIBDIR_RELATIVE\n-export CFG_DISABLE_INJECT_STD_VERSION\n-ifdef CFG_DISABLE_UNSTABLE_FEATURES\n-CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATURES))\n-# Turn on feature-staging\n-export CFG_DISABLE_UNSTABLE_FEATURES\n-# Subvert unstable feature lints to do the self-build\n-endif\n-ifdef CFG_MUSL_ROOT\n-export CFG_MUSL_ROOT\n-endif\n-\n-export RUSTC_BOOTSTRAP := 1\n-\n-######################################################################\n-# Per-stage targets and runner\n-######################################################################\n-\n-# Valid setting-strings are 'all', 'none', 'gdb', 'lldb'\n-# This 'function' will determine which debugger scripts to copy based on a\n-# target triple. See debuggers.mk for more information.\n-TRIPLE_TO_DEBUGGER_SCRIPT_SETTING=\\\n- $(if $(findstring windows-msvc,$(1)),none,all)\n-\n-STAGES = 0 1 2 3\n-\n-define SREQ\n-# $(1) is the stage number\n-# $(2) is the target triple\n-# $(3) is the host triple\n-\n-# Destinations of artifacts for the host compiler\n-HROOT$(1)_H_$(3) = $(3)/stage$(1)\n-HBIN$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n-\n-ifeq ($$(CFG_WINDOWSY_$(3)),1)\n-# On Windows we always store host runtime libraries in the 'bin' directory because\n-# there's no rpath. Target libraries go under $CFG_LIBDIR_RELATIVE (usually 'lib').\n-HLIB_RELATIVE$(1)_H_$(3) = bin\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)/rustlib/$(2)\n-# Remove the next 3 lines after a snapshot\n-ifeq ($(1),0)\n-RUSTFLAGS_STAGE0 += -L $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n-endif\n-\n-else\n-\n-ifeq ($(1),0)\n-HLIB_RELATIVE$(1)_H_$(3) = lib\n-else\n-HLIB_RELATIVE$(1)_H_$(3) = $$(CFG_LIBDIR_RELATIVE)\n-endif\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustlib/$(2)\n-\n-endif\n-HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(HLIB_RELATIVE$(1)_H_$(3))\n-\n-# Destinations of artifacts for target architectures\n-TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n-TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n-\n-# Preqrequisites for using the stageN compiler\n-ifeq ($(1),0)\n-HSREQ$(1)_H_$(3) = $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\n-else\n-HSREQ$(1)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t$$(MKFILE_DEPS) \\\n-\ttmp/install-debugger-scripts$(1)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(3)).done\n-endif\n-\n-# Prerequisites for using the stageN compiler to build target artifacts\n-TSREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(foreach obj,$$(REQUIRED_OBJECTS_$(2)),\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n-\n-# Prerequisites for a working stageN compiler and libraries, for a specific\n-# target\n-SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(foreach dep,$$(TARGET_CRATES_$(2)), \\\n-\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(2)).done\n-\n-# Prerequisites for a working stageN compiler and complete set of target\n-# libraries\n-CSREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t$$(foreach dep,$$(HOST_CRATES),$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n-\n-ifeq ($(1),0)\n-# Don't run the stage0 compiler under valgrind - that ship has sailed\n-CFG_VALGRIND_COMPILE$(1) =\n-else\n-CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)\n-endif\n-\n-# Add RUSTFLAGS_STAGEN values to the build command\n-EXTRAFLAGS_STAGE$(1) = $$(RUSTFLAGS_STAGE$(1))\n-\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n-\n-endef\n-\n-# Same macro/variables as above, but defined in a separate loop so it can use\n-# all the variables above for all archs. The RPATH_VAR setup sometimes needs to\n-# reach across triples to get things in order.\n-#\n-# Defines (with the standard $(1)_T_$(2)_H_$(3) suffix):\n-# * `LD_LIBRARY_PATH_ENV_NAME`: the name for the key to use in the OS\n-#   environment to access or extend the lookup path for dynamic\n-#   libraries.  Note on Windows, that key is `$PATH`, and thus not\n-#   only conflates programs with dynamic libraries, but also often\n-#   contains spaces which confuse make.\n-# * `LD_LIBRARY_PATH_ENV_HOSTDIR`: the entry to add to lookup path for the host\n-# * `LD_LIBRARY_PATH_ENV_TARGETDIR`: the entry to add to lookup path for target\n-#\n-# Below that, HOST_RPATH_VAR and TARGET_RPATH_VAR are defined in terms of the\n-# above settings.\n-#\n-define SREQ_CMDS\n-\n-ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := DYLD_LIBRARY_PATH\n-else\n-ifeq ($$(CFG_WINDOWSY_$(3)),1)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := PATH\n-else\n-ifeq ($$(OSTYPE_$(3)),unknown-haiku)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LIBRARY_PATH\n-else\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LD_LIBRARY_PATH\n-endif\n-endif\n-endif\n-\n-LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(HLIB$(1)_H_$(3)):$$(CFG_LLVM_INST_DIR_$(3))/lib\n-LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(TLIB$(1)_T_$(2)_H_$(3))\n-\n-HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n-TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n-\n-RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(HOST_RPATH_VAR$(1)_T_$(2)_H_$(3))\n-\n-# Pass --cfg stage0 only for the build->host part of stage0;\n-# if you're building a cross config, the host->* parts are\n-# effectively stage1, since it uses the just-built stage0.\n-#\n-# Also be sure to use the right rpath because we're loading libraries from the\n-# CFG_BUILD's stage1 directory for our target, so switch this one instance of\n-# `RPATH_VAR` to get the bootstrap working.\n-ifeq ($(1),0)\n-ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n-\n-RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR1_T_$(2)_H_$$(CFG_BUILD))\n-else\n-ifdef CFG_ENABLE_LOCAL_REBUILD\n-# Assume the local-rebuild rustc already has stage1 features too.\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n-endif\n-endif\n-endif\n-\n-STAGE$(1)_T_$(2)_H_$(3) := \\\n-\t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(call CFG_RUN_TARG_$(3),$(1), \\\n-\t\t$$(CFG_VALGRIND_COMPILE$(1)) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n-                $$(RUSTC_FLAGS_$(2))\n-\n-endef\n-\n-$(foreach build,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n-\n-$(foreach build,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call SREQ_CMDS,$(stage),$(target),$(build))))))))\n-\n-######################################################################\n-# rustc-H-targets\n-#\n-# Builds a functional Rustc for the given host.\n-######################################################################\n-\n-define DEF_RUSTC_STAGE_TARGET\n-# $(1) == architecture\n-# $(2) == stage\n-\n-rustc-stage$(2)-H-$(1): \\\n-\t$$(foreach target,$$(CFG_TARGET),$$(SREQ$(2)_T_$$(target)_H_$(1)))\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach stage,1 2 3, \\\n-  $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n-\n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n-\n-define DEF_RUSTC_TARGET\n-# $(1) == architecture\n-\n-rustc-H-$(1): rustc-stage2-H-$(1)\n-endef\n-\n-$(foreach host,$(CFG_TARGET), \\\n- $(eval $(call DEF_RUSTC_TARGET,$(host))))\n-\n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n-rustc: rustc-H-$(CFG_BUILD)\n-\n-rustc-H-all: $(foreach host,$(CFG_HOST),rustc-H-$(host))\n-\n-######################################################################\n-# Entrypoint rule\n-######################################################################\n-\n-.DEFAULT_GOAL := all\n-\n-define ALL_TARGET_N\n-ifneq ($$(findstring $(1),$$(CFG_HOST)),)\n-# This is a host\n-all-target-$(1)-host-$(2): $$(CSREQ2_T_$(1)_H_$(2))\n-else\n-# This is a target only\n-all-target-$(1)-host-$(2): $$(SREQ2_T_$(1)_H_$(2))\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(foreach host,$(CFG_HOST), \\\n- $(eval $(call ALL_TARGET_N,$(target),$(host)))))\n-\n-ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET), \\\n-\t$(foreach host,$(CFG_HOST), \\\n- all-target-$(target)-host-$(host)))\n-\n-all-no-docs: $(ALL_TARGET_RULES) $(GENERATED)\n-all: all-no-docs docs\n-\n-######################################################################\n-# Build system documentation\n-######################################################################\n-\n-# $(1) is the name of the doc <section> in Makefile.in\n-# pick everything between tags | remove first line | remove last line\n-# | remove extra (?) line | strip leading `#` from lines\n-SHOW_DOCS = $(Q)awk '/<$(1)>/,/<\\/$(1)>/' $(S)/Makefile.in | sed '1d' | sed '$$d' | sed 's/^\\# \\?//'\n-\n-help:\n-\t$(call SHOW_DOCS,help)\n-\n-tips:\n-\t$(call SHOW_DOCS,tips)\n-\n-nitty-gritty:\n-\t$(call SHOW_DOCS,nitty-gritty)"}, {"sha": "6a7a20cbfdb99b1b77f4049adc913b1b7fe07bc8", "filename": "mk/platform.mk", "status": "removed", "additions": 0, "deletions": 250, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,250 +0,0 @@\n-# Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-# Create variables HOST_<triple> containing the host part\n-# of each target triple.  For example, the triple i686-darwin-macos\n-# would create a variable HOST_i686-darwin-macos with the value\n-# i386.\n-define DEF_HOST_VAR\n-  HOST_$(1) = $(patsubst i%86,i386,$(word 1,$(subst -, ,$(1))))\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_HOST_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET),$(info cfg: host for $(t) is $(HOST_$(t))))\n-\n-# Ditto for OSTYPE\n-define DEF_OSTYPE_VAR\n-  OSTYPE_$(1) = $(subst $(firstword $(subst -, ,$(1)))-,,$(1))\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n-\n-# On Darwin, we need to run dsymutil so the debugging information ends\n-# up in the right place.  On other platforms, it automatically gets\n-# embedded into the executable, so use a no-op command.\n-CFG_DSYMUTIL := true\n-\n-# Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%, \\\n-      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n-\n-ifdef CFG_DISABLE_OPTIMIZE_CXX\n-  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n-  CFG_GCCISH_CFLAGS += -O0\n-else\n-  CFG_GCCISH_CFLAGS += -O2\n-endif\n-\n-# The soname thing is for supporting a statically linked jemalloc.\n-# see https://blog.mozilla.org/jseward/2012/06/05/valgrind-now-supports-jemalloc-builds-directly/\n-ifdef CFG_VALGRIND\n-  CFG_VALGRIND += --error-exitcode=100 \\\n-                  --fair-sched=try \\\n-                  --quiet \\\n-                  --soname-synonyms=somalloc=NONE \\\n-                  --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n-                  $(OS_SUPP)\n-  ifdef CFG_ENABLE_HELGRIND\n-    CFG_VALGRIND += --tool=helgrind\n-  else\n-    CFG_VALGRIND += --tool=memcheck \\\n-                    --leak-check=full\n-  endif\n-endif\n-\n-# If we actually want to run Valgrind on a given platform, set this variable\n-define DEF_GOOD_VALGRIND\n-  ifeq ($(OSTYPE_$(1)),unknown-linux-gnu)\n-    GOOD_VALGRIND_$(1) = 1\n-  endif\n-  ifneq (,$(filter $(OSTYPE_$(1)),apple-darwin freebsd))\n-    ifeq ($(HOST_$(1)),x86_64)\n-      GOOD_VALGRIND_$(1) = 1\n-    endif\n-  endif\n-  ifdef GOOD_VALGRIND_$(t)\n-    $$(info cfg: have good valgrind for $(t))\n-  else\n-    $$(info cfg: no good valgrind for $(t))\n-  endif\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_GOOD_VALGRIND,$(t))))\n-\n-AR := ar\n-\n-define SET_FROM_CFG\n-  ifdef CFG_$(1)\n-    ifeq ($(origin $(1)),undefined)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n-    endif\n-    ifeq ($(origin $(1)),default)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n-    endif\n-  endif\n-endef\n-\n-$(foreach cvar,CC CXX CPP CFLAGS CXXFLAGS CPPFLAGS, \\\n-  $(eval $(call SET_FROM_CFG,$(cvar))))\n-\n-CFG_RLIB_GLOB=lib$(1)-*.rlib\n-\n-include $(wildcard $(CFG_SRC_DIR)mk/cfg/*.mk)\n-\n-define ADD_INSTALLED_OBJECTS\n-  INSTALLED_OBJECTS_$(1) += $$(CFG_INSTALLED_OBJECTS_$(1))\n-  REQUIRED_OBJECTS_$(1) += $$(CFG_THIRD_PARTY_OBJECTS_$(1))\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_INSTALLED_OBJECTS,$(target))))\n-\n-define DEFINE_LINKER\n-  ifndef LINK_$(1)\n-    LINK_$(1) := $$(CC_$(1))\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEFINE_LINKER,$(target))))\n-\n-define ADD_JEMALLOC_DEP\n-  ifndef CFG_DISABLE_JEMALLOC_$(1)\n-    ifndef CFG_DISABLE_JEMALLOC\n-      RUST_DEPS_std_T_$(1) += alloc_jemalloc\n-      TARGET_CRATES_$(1) += alloc_jemalloc\n-    endif\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_JEMALLOC_DEP,$(target))))\n-\n-# The -Qunused-arguments sidesteps spurious warnings from clang\n-define FILTER_FLAGS\n-  ifeq ($$(CFG_USING_CLANG),1)\n-    ifneq ($(findstring clang,$$(shell $(CC_$(1)) -v)),)\n-      CFG_GCCISH_CFLAGS_$(1) += -Qunused-arguments\n-      CFG_GCCISH_CXXFLAGS_$(1) += -Qunused-arguments\n-    endif\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call FILTER_FLAGS,$(target))))\n-\n-# Configure various macros to pass gcc or cl.exe style arguments\n-define CC_MACROS\n-  CFG_CC_INCLUDE_$(1)=-I $$(1)\n-  ifeq ($$(findstring msvc,$(1)),msvc)\n-    CFG_CC_OUTPUT_$(1)=-Fo:$$(1)\n-    CFG_CREATE_ARCHIVE_$(1)='$$(AR_$(1))' -OUT:$$(1)\n-  else\n-    CFG_CC_OUTPUT_$(1)=-o $$(1)\n-    CFG_CREATE_ARCHIVE_$(1)=$$(AR_$(1)) crus $$(1)\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call CC_MACROS,$(target))))\n-\n-\n-ifeq ($(CFG_CCACHE_CPP2),1)\n-  CCACHE_CPP2=1\n-  export CCACHE_CPP\n-endif\n-\n-ifdef CFG_CCACHE_BASEDIR\n-  CCACHE_BASEDIR=$(CFG_CCACHE_BASEDIR)\n-  export CCACHE_BASEDIR\n-endif\n-\n-FIND_COMPILER = $(strip $(1:ccache=))\n-\n-define CFG_MAKE_TOOLCHAIN\n-  # Prepend the tools with their prefix if cross compiling\n-  ifneq ($(CFG_BUILD),$(1))\n-    ifneq ($$(findstring msvc,$(1)),msvc)\n-       CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n-       CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n-       CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n-       AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n-       LINK_$(1)=$(CROSS_PREFIX_$(1))$(LINK_$(1))\n-       RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(LINK_$(1))) \\\n-           -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n-\n-       RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n-    endif\n-  endif\n-\n-  CFG_COMPILE_C_$(1) = '$$(call FIND_COMPILER,$$(CC_$(1)))' \\\n-        $$(CFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        -c $$(call CFG_CC_OUTPUT_$(1),$$(1)) $$(2)\n-  CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n-        $$(LDFLAGS) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-  CFG_COMPILE_CXX_$(1) = '$$(call FIND_COMPILER,$$(CXX_$(1)))' \\\n-        $$(CXXFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS) \\\n-        $$(CFG_GCCISH_CXXFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_GCCISH_CXXFLAGS_$(1)) \\\n-        -c $$(call CFG_CC_OUTPUT_$(1),$$(1)) $$(2)\n-  CFG_LINK_CXX_$(1) = $$(CXX_$(1)) \\\n-        $$(LDFLAGS) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-\n-  ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel powerpc),)\n-\n-  # On Bitrig, we need the relocation model to be PIC for everything\n-  ifeq (,$(filter $(OSTYPE_$(1)),bitrig))\n-    LLVM_MC_RELOCATION_MODEL=\"pic\"\n-  else\n-    LLVM_MC_RELOCATION_MODEL=\"default\"\n-  endif\n-\n-  # LLVM changed this flag in 3.9\n-  ifdef CFG_LLVM_MC_HAS_RELOCATION_MODEL\n-    LLVM_MC_RELOC_FLAG := -relocation-model=$$(LLVM_MC_RELOCATION_MODEL)\n-  else\n-    LLVM_MC_RELOC_FLAG := -position-independent\n-  endif\n-\n-  # We're using llvm-mc as our assembler because it supports\n-  # .cfi pseudo-ops on mac\n-  CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(2) | \\\n-                    $$(LLVM_MC_$$(CFG_BUILD)) \\\n-                    -assemble \\\n-                    $$(LLVM_MC_RELOC_FLAG) \\\n-                    -filetype=obj \\\n-                    -triple=$(1) \\\n-                    -o=$$(1)\n-  else\n-\n-  # For the ARM, AARCH64, MIPS and POWER crosses, use the toolchain assembler\n-  # FIXME: We should be able to use the LLVM assembler\n-  CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-                   $$(2) -c -o $$(1)\n-\n-  endif\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "20e20e9b5df7eb166b677e13c2b4e2c4a8d39fcd", "filename": "mk/prepare.mk", "status": "removed", "additions": 0, "deletions": 251, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,251 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Basic support for producing installation images.\n-#\n-# The 'prepare' build target copies all release artifacts from the build\n-# directory to some other location, placing all binaries, libraries, and\n-# docs in their final locations relative to each other.\n-#\n-# It requires the following variables to be set:\n-#\n-#   PREPARE_HOST - the host triple\n-#   PREPARE_TARGETS - the target triples, space separated\n-#   PREPARE_DEST_DIR - the directory to put the image\n-\n-PREPARE_STAGE=2\n-\n-DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n-DEFAULT_PREPARE_BIN_CMD = install -m755\n-DEFAULT_PREPARE_LIB_CMD = install -m644\n-DEFAULT_PREPARE_MAN_CMD = install -m644\n-\n-# Create a directory\n-# $(1) is the directory\n-#\n-# XXX: These defines are called to generate make steps.\n-# Adding blank lines means two steps from different defines will not end up on\n-# the same line.\n-define PREPARE_DIR\n-\n-\t@$(call E, prepare: $(1))\n-\t$(Q)$(PREPARE_DIR_CMD) $(1)\n-\n-endef\n-\n-# Copy an executable\n-# $(1) is the filename/libname-glob\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_BIN\n-\n-\t@$(call E, prepare: $(PREPARE_DEST_BIN_DIR)/$(1))\n-\t$(Q)$(PREPARE_BIN_CMD) $(PREPARE_SOURCE_BIN_DIR)/$(1) $(PREPARE_DEST_BIN_DIR)/$(1)\n-\n-endef\n-\n-# Copy a dylib or rlib\n-# $(1) is the filename/libname-glob\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_LIB\n-\n-\t@$(call E, prepare: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n-\t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n-\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))), \\\n-                        $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n-\tif [ -n \"$$MATCHES\" ]; then \\\n-\t  echo \"warning: one or libraries matching Rust library '$(1)'\" && \\\n-\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     && \\\n-\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"      && \\\n-\t  echo $$MATCHES ; \\\n-\tfi\n-\t$(Q)$(PREPARE_LIB_CMD) `ls -drt1 $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)` $(PREPARE_WORKING_DEST_LIB_DIR)/\n-\n-endef\n-\n-# Copy a man page\n-# $(1) - source dir\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_MAN\n-\n-\t@$(call E, prepare: $(PREPARE_DEST_MAN_DIR)/$(1))\n-\t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n-\n-endef\n-\n-PREPARE_TOOLS = $(filter-out compiletest rustbook error_index_generator, $(TOOLS))\n-\n-\n-# $(1) is tool\n-# $(2) is stage\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_HOST_TOOL\n-prepare-host-tool-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_SOURCE_BIN_DIR=$$(HBIN$(2)_H_$(3))\n-prepare-host-tool-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                  $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n-                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n-                                  prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(call PREPARE_MAN,$(1).1),),)\n-endef\n-\n-# Libraries are compiled using the --libdir provided to configure, but\n-# we store them in the tarball using just \"lib\" so that the install\n-# script can then rewrite them back to the correct path.\n-PREPARE_TAR_LIB_DIR = $(patsubst $(CFG_LIBDIR_RELATIVE)%,lib%,$(1))\n-\n-# For host libraries only install dylibs, not rlibs since the host libs are only\n-# used to support rustc and rustc uses dynamic linking\n-#\n-# $(1) is tool\n-# $(2) is stage\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_HOST_LIB\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_WORKING_SOURCE_LIB_DIR=$$(HLIB$(2)_H_$(3))\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(call PREPARE_TAR_LIB_DIR,$$(HLIB_RELATIVE$(2)_H_$(3)))\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                 $$(foreach dep,$$(RUST_DEPS_$(1)_T_$(3)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n-                                 $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n-                                 prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(if $$(findstring 1,$$(ONLY_RLIB_$(1))),, \\\n-          $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1)))),),)\n-endef\n-\n-\n-# $(1) is stage\n-# $(2) is target\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_TARGET_N\n-# Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_WORKING_SOURCE_LIB_DIR=$$(TLIB$(1)_T_$(2)_H_$(3))\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_SOURCE_BIN_DIR=$$(TBIN$(1)_T_$(2)_H_$(3))\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(3)/bin\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n-        $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-          $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n-        $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n-          $$(foreach crate,$$(HOST_CRATES), \\\n-            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)),)\n-# Only install if this host and target combo is being prepared. Also be sure to\n-# *not* install the rlibs for host crates because there's no need to statically\n-# link against most of them. They just produce a large amount of extra size\n-# bloat.\n-\t$$(if $$(findstring $(1), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(2), $$(PREPARE_TARGETS)), \\\n-        $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR)) \\\n-          $$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR)) \\\n-          $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-\t    $$(if $$(or $$(findstring 1, $$(ONLY_RLIB_$$(crate))),$$(findstring 1,$$(CFG_INSTALL_ONLY_RLIB_$(2)))),, \\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))) \\\n-            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))) \\\n-          $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n-            $$(foreach crate,$$(HOST_CRATES), \\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),) \\\n-\t  $$(foreach object,$$(INSTALLED_OBJECTS_$(2)),\\\n-\t    $$(call PREPARE_LIB,$$(object))) \\\n-\t  $$(foreach bin,$$(INSTALLED_BINS_$(3)),\\\n-\t    $$(call PREPARE_BIN,$$(bin))) \\\n-\t,),),)\n-endef\n-\n-define INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $(PREPARE_DEST_BIN_DIR)\n-\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n-endef\n-\n-define INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_BIN_DIR)\n-\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n-endef\n-\n-define INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)echo \"No debugger scripts will be installed for host $(PREPARE_HOST)\"\n-endef\n-\n-# $(1) is PREPARE_HOST\n-INSTALL_DEBUGGER_SCRIPT_COMMANDS=$(if $(findstring windows,$(1)),\\\n-                                   $(INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS),\\\n-                                   $(if $(findstring darwin,$(1)),\\\n-                                     $(INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS),\\\n-                                     $(INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS)))\n-\n-define DEF_PREPARE\n-\n-prepare-base-$(1)-%: PREPARE_SOURCE_MAN_DIR=$$(S)/man\n-prepare-base-$(1)-%: PREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_DIR)/bin\n-prepare-base-$(1)-%: PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(call PREPARE_TAR_LIB_DIR,$$(CFG_LIBDIR_RELATIVE))\n-prepare-base-$(1)-%: PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n-\n-prepare-base-$(1)-target: prepare-target-$(1)\n-prepare-base-$(1)-host: prepare-host-$(1) prepare-debugger-scripts-$(1)\n-\n-prepare-host-$(1): prepare-host-tools-$(1)\n-\n-prepare-host-tools-$(1): \\\n-        $$(foreach tool, $$(PREPARE_TOOLS), \\\n-          $$(foreach host,$$(CFG_HOST), \\\n-            prepare-host-tool-$$(tool)-$$(PREPARE_STAGE)-$$(host)-$(1)))\n-\n-prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR))\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR))\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR)/rustlib/etc)\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n-\n-prepare-debugger-scripts-$(1): prepare-host-dirs-$(1) \\\n-                               $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) \\\n-                               $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS)\n-\t$$(call INSTALL_DEBUGGER_SCRIPT_COMMANDS,$$(PREPARE_HOST))\n-\n-$$(foreach tool,$$(PREPARE_TOOLS), \\\n-  $$(foreach host,$$(CFG_HOST), \\\n-      $$(eval $$(call DEF_PREPARE_HOST_TOOL,$$(tool),$$(PREPARE_STAGE),$$(host),$(1)))))\n-\n-$$(foreach lib,$$(CRATES), \\\n-  $$(foreach host,$$(CFG_HOST), \\\n-    $$(eval $$(call DEF_PREPARE_HOST_LIB,$$(lib),$$(PREPARE_STAGE),$$(host),$(1)))))\n-\n-prepare-target-$(1): \\\n-        $$(foreach host,$$(CFG_HOST), \\\n-           $$(foreach target,$$(CFG_TARGET), \\\n-             prepare-target-$$(target)-host-$$(host)-$$(PREPARE_STAGE)-$(1)))\n-\n-$$(foreach host,$$(CFG_HOST), \\\n-  $$(foreach target,$$(CFG_TARGET), \\\n-    $$(eval $$(call DEF_PREPARE_TARGET_N,$$(PREPARE_STAGE),$$(target),$$(host),$(1)))))\n-\n-prepare-maybe-clean-$(1):\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n-      @$$(call E, cleaning destination $$(PREPARE_DEST_DIR)),)\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n-      $$(Q)rm -rf $$(PREPARE_DEST_DIR),)\n-\n-\n-endef"}, {"sha": "b8f51097868d41a2dafb243525b7e6a80885a136", "filename": "mk/reconfig.mk", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Freconfig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Freconfig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Freconfig.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,43 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Recursive wildcard function\n-# http://blog.jgc.org/2011/07/gnu-make-recursive-wildcard-function.html\n-rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) \\\n-  $(filter $(subst *,%,$2),$d))\n-\n-ifndef CFG_DISABLE_MANAGE_SUBMODULES\n-# This is a pretty expensive operation but I don't see any way to avoid it\n-# NB: This only looks for '+' status (wrong commit checked out), not '-' status\n-# (nothing checked out at all).  `./configure --{llvm,jemalloc}-root`\n-# will explicitly deinitialize the corresponding submodules, and we don't\n-# want to force constant rebuilds in that case.\n-NEED_GIT_RECONFIG=$(shell cd \"$(CFG_SRC_DIR)\" && $(CFG_GIT) submodule status | grep -c '^+')\n-else\n-NEED_GIT_RECONFIG=0\n-endif\n-\n-ifeq ($(NEED_GIT_RECONFIG),0)\n-else\n-# If the submodules have changed then always execute config.mk\n-.PHONY: config.stamp\n-endif\n-\n-Makefile config.mk: config.stamp\n-\n-ifeq ($(SREL),)\n-SREL_ROOT := ./\n-else\n-SREL_ROOT := $(SREL)\n-endif\n-\n-config.stamp: $(S)configure $(S)Makefile.in $(S)src/stage0.txt\n-\t@$(call E, cfg: reconfiguring)\n-\t$(SREL_ROOT)configure $(CFG_CONFIGURE_ARGS)"}, {"sha": "f5149281d50712b1e30563d3122cbb37c10f4f0a", "filename": "mk/rt.mk", "status": "removed", "additions": 0, "deletions": 721, "changes": 721, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,721 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-################################################################################\n-# Native libraries built as part of the rust build process\n-#\n-# This portion of the rust build system is meant to keep track of native\n-# dependencies and how to build them. It is currently required that all native\n-# dependencies are built as static libraries, as slinging around dynamic\n-# libraries isn't exactly the most fun thing to do.\n-#\n-# This section should need minimal modification to add new libraries. The\n-# relevant variables are:\n-#\n-#   NATIVE_LIBS\n-#\tThis is a list of all native libraries which are built as part of the\n-#\tbuild process. It will build all libraries into RT_OUTPUT_DIR with the\n-#\tappropriate name of static library as dictated by the target platform\n-#\n-#   NATIVE_DEPS_<lib>\n-#\tThis is a list of files relative to the src/rt directory which are\n-#\tneeded to build the native library. Each file will be compiled to an\n-#\tobject file, and then all the object files will be assembled into an\n-#\tarchive (static library). The list contains files of any extension\n-#\n-# If adding a new library, you should update the NATIVE_LIBS list, and then list\n-# the required files below it. The list of required files is a list of files\n-# that's per-target so you're allowed to conditionally add files based on the\n-# target.\n-################################################################################\n-NATIVE_LIBS := hoedown miniz rust_test_helpers\n-\n-# A macro to add a generic implementation of intrinsics iff a arch optimized implementation is not\n-# already in the list.\n-# $(1) is the target\n-# $(2) is the intrinsic\n-define ADD_INTRINSIC\n-  ifeq ($$(findstring X,$$(foreach intrinsic,$$(COMPRT_OBJS_$(1)),$$(if $$(findstring $(2),$$(intrinsic)),X,))),)\n-    COMPRT_OBJS_$(1) += $(2)\n-  endif\n-endef\n-\n-# $(1) is the target triple\n-define NATIVE_LIBRARIES\n-\n-NATIVE_DEPS_hoedown_$(1) := hoedown/src/autolink.c \\\n-\t\t\thoedown/src/buffer.c \\\n-\t\t\thoedown/src/document.c \\\n-\t\t\thoedown/src/escape.c \\\n-\t\t\thoedown/src/html.c \\\n-\t\t\thoedown/src/html_blocks.c \\\n-\t\t\thoedown/src/html_smartypants.c \\\n-\t\t\thoedown/src/stack.c \\\n-\t\t\thoedown/src/version.c\n-NATIVE_DEPS_miniz_$(1) = miniz.c\n-NATIVE_DEPS_rust_test_helpers_$(1) := rust_test_helpers.c\n-\n-################################################################################\n-# You shouldn't find it that necessary to edit anything below this line.\n-################################################################################\n-\n-# While we're defining the native libraries for each target, we define some\n-# common rules used to build files for various targets.\n-\n-RT_OUTPUT_DIR_$(1) := $(1)/rt\n-\n-$$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.c $$(MKFILE_DEPS)\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n-\t\t$$(call CFG_CC_INCLUDE_$(1),$$(S)src/rt/hoedown/src) \\\n-\t\t$$(call CFG_CC_INCLUDE_$(1),$$(S)src/rt) \\\n-                 $$(RUNTIME_CFLAGS_$(1))) $$<\n-\n-$$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.S $$(MKFILE_DEPS) \\\n-\t    $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n-\n-# On MSVC targets the compiler's default include path (e.g. where to find system\n-# headers) is specified by the INCLUDE environment variable. This may not be set\n-# so the ./configure script scraped the relevant values and this is the location\n-# that we put them into cl.exe's environment.\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(RT_OUTPUT_DIR_$(1))/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-$(1)/rustllvm/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET),$(eval $(call NATIVE_LIBRARIES,$(target))))\n-\n-# A macro for devining how to build third party libraries listed above (based\n-# on their dependencies).\n-#\n-# $(1) is the target\n-# $(2) is the lib name\n-define THIRD_PARTY_LIB\n-\n-OBJS_$(2)_$(1) := $$(NATIVE_DEPS_$(2)_$(1):%=$$(RT_OUTPUT_DIR_$(1))/%)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.c=.o)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.cpp=.o)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.S=.o)\n-NATIVE_$(2)_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$(2))\n-$$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(eval $(call RUNTIME_RULES,$(target))))\n-$(foreach lib,$(NATIVE_LIBS), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call THIRD_PARTY_LIB,$(target),$(lib)))))\n-\n-\n-################################################################################\n-# Building third-party targets with external build systems\n-#\n-# This location is meant for dependencies which have external build systems. It\n-# is still assumed that the output of each of these steps is a static library\n-# in the correct location.\n-################################################################################\n-\n-define DEF_THIRD_PARTY_TARGETS\n-\n-# $(1) is the target triple\n-\n-ifeq ($$(CFG_WINDOWSY_$(1)),1)\n-  # A bit of history here, this used to be --enable-lazy-lock added in #14006\n-  # which was filed with jemalloc in jemalloc/jemalloc#83 which was also\n-  # reported to MinGW: http://sourceforge.net/p/mingw-w64/bugs/395/\n-  #\n-  # When updating jemalloc to 4.0, however, it was found that binaries would\n-  # exit with the status code STATUS_RESOURCE_NOT_OWNED indicating that a thread\n-  # was unlocking a mutex it never locked. Disabling this \"lazy lock\" option\n-  # seems to fix the issue, but it was enabled by default for MinGW targets in\n-  # 13473c7 for jemalloc.\n-  #\n-  # As a result of all that, force disabling lazy lock on Windows, and after\n-  # reading some code it at least *appears* that the initialization of mutexes\n-  # is otherwise ok in jemalloc, so shouldn't cause problems hopefully...\n-  #\n-  # tl;dr: make windows behave like other platforms by disabling lazy locking,\n-  #        but requires passing an option due to a historical default with\n-  #        jemalloc.\n-  JEMALLOC_ARGS_$(1) := --disable-lazy-lock\n-else ifeq ($(OSTYPE_$(1)), apple-ios)\n-  JEMALLOC_ARGS_$(1) := --disable-tls\n-else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n-  # We force android to have prefixed symbols because apparently replacement of\n-  # the libc allocator doesn't quite work. When this was tested (unprefixed\n-  # symbols), it was found that the `realpath` function in libc would allocate\n-  # with libc malloc (not jemalloc malloc), and then the standard library would\n-  # free with jemalloc free, causing a segfault.\n-  #\n-  # If the test suite passes, however, without symbol prefixes then we should be\n-  # good to go!\n-  JEMALLOC_ARGS_$(1) := --disable-tls --with-jemalloc-prefix=je_\n-else ifeq ($(findstring dragonfly, $(OSTYPE_$(1))), dragonfly)\n-  JEMALLOC_ARGS_$(1) := --with-jemalloc-prefix=je_\n-endif\n-\n-ifdef CFG_ENABLE_DEBUG_JEMALLOC\n-  JEMALLOC_ARGS_$(1) += --enable-debug --enable-fill\n-endif\n-\n-################################################################################\n-# jemalloc\n-################################################################################\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-JEMALLOC_DEPS := $(S)/.gitmodules\n-else\n-JEMALLOC_DEPS := $(wildcard \\\n-\t\t   $(S)src/jemalloc/* \\\n-\t\t   $(S)src/jemalloc/*/* \\\n-\t\t   $(S)src/jemalloc/*/*/* \\\n-\t\t   $(S)src/jemalloc/*/*/*/*)\n-endif\n-\n-# See #17183 for details, this file is touched during the build process so we\n-# don't want to consider it as a dependency.\n-JEMALLOC_DEPS := $(filter-out $(S)src/jemalloc/VERSION,$(JEMALLOC_DEPS))\n-\n-JEMALLOC_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc)\n-ifeq ($$(CFG_WINDOWSY_$(1)),1)\n-  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_s)\n-else\n-  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_pic)\n-endif\n-JEMALLOC_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(JEMALLOC_NAME_$(1))\n-JEMALLOC_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/jemalloc\n-JEMALLOC_LOCAL_$(1) := $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1))\n-\n-$$(JEMALLOC_LOCAL_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n-\t@$$(call E, make: jemalloc)\n-\tcd \"$$(JEMALLOC_BUILD_DIR_$(1))\"; \"$(S)src/jemalloc/configure\" \\\n-\t\t$$(JEMALLOC_ARGS_$(1)) $(CFG_JEMALLOC_FLAGS) \\\n-\t\t--build=$$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$$(CFG_GNU_TRIPLE_$(1)) \\\n-\t\tCC=\"$$(CC_$(1)) $$(CFG_JEMALLOC_CFLAGS_$(1))\" \\\n-\t\tAR=\"$$(AR_$(1))\" \\\n-\t\tRANLIB=\"$$(AR_$(1)) s\" \\\n-\t\tCPPFLAGS=\"-I $(S)src/rt/\" \\\n-\t\tEXTRA_CFLAGS=\"-g1 -ffunction-sections -fdata-sections\"\n-\t$$(Q)$$(MAKE) -C \"$$(JEMALLOC_BUILD_DIR_$(1))\" build_lib_static\n-\n-ifeq ($(1),$$(CFG_BUILD))\n-ifneq ($$(CFG_JEMALLOC_ROOT),)\n-$$(JEMALLOC_LIB_$(1)): $$(CFG_JEMALLOC_ROOT)/libjemalloc_pic.a\n-\t@$$(call E, copy: jemalloc)\n-\t$$(Q)cp $$< $$@\n-else\n-$$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_LOCAL_$(1))\n-\t$$(Q)cp $$< $$@\n-endif\n-else\n-$$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_LOCAL_$(1))\n-\t$$(Q)cp $$< $$@\n-endif\n-\n-################################################################################\n-# compiler-rt\n-################################################################################\n-\n-# Everything below is a manual compilation of compiler-rt, disregarding its\n-# build system. See comments in `src/bootstrap/native.rs` for more information.\n-\n-COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n-COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n-COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n-\n-# We must avoid compiling both a generic implementation (e.g. `floatdidf.c) and an arch optimized\n-# implementation (e.g. `x86_64/floatdidf.S) of the same symbol (e.g. `floatdidf) because that causes\n-# linker errors. To avoid that, we first add all the arch optimized implementations and then add the\n-# generic implementations if and only if its arch optimized version is not already in the list. This\n-# last part is handled by the ADD_INTRINSIC macro.\n-\n-COMPRT_OBJS_$(1) :=\n-\n-ifeq ($$(findstring msvc,$(1)),)\n-ifeq ($$(findstring x86_64,$(1)),x86_64)\n-COMPRT_OBJS_$(1) += \\\n-      x86_64/chkstk.o \\\n-      x86_64/chkstk2.o \\\n-      x86_64/floatdidf.o \\\n-      x86_64/floatdisf.o \\\n-      x86_64/floatdixf.o \\\n-      x86_64/floatundidf.o \\\n-      x86_64/floatundisf.o \\\n-      x86_64/floatundixf.o\n-endif\n-\n-ifeq ($$(findstring i686,$$(patsubts i%86,i686,$(1))),i686)\n-COMPRT_OBJS_$(1) += \\\n-      i386/ashldi3.o \\\n-      i386/ashrdi3.o \\\n-      i386/chkstk.o \\\n-      i386/chkstk2.o \\\n-      i386/divdi3.o \\\n-      i386/floatdidf.o \\\n-      i386/floatdisf.o \\\n-      i386/floatdixf.o \\\n-      i386/floatundidf.o \\\n-      i386/floatundisf.o \\\n-      i386/floatundixf.o \\\n-      i386/lshrdi3.o \\\n-      i386/moddi3.o \\\n-      i386/muldi3.o \\\n-      i386/udivdi3.o \\\n-      i386/umoddi3.o\n-endif\n-\n-else\n-\n-ifeq ($$(findstring x86_64,$(1)),x86_64)\n-COMPRT_OBJS_$(1) += \\\n-      x86_64/floatdidf.o \\\n-      x86_64/floatdisf.o \\\n-      x86_64/floatdixf.o\n-endif\n-\n-endif\n-\n-# Generic ARM sources, nothing compiles on iOS though\n-ifeq ($$(findstring arm,$(1)),arm)\n-ifeq ($$(findstring ios,$(1)),)\n-COMPRT_OBJS_$(1) += \\\n-  arm/aeabi_cdcmp.o \\\n-  arm/aeabi_cdcmpeq_check_nan.o \\\n-  arm/aeabi_cfcmp.o \\\n-  arm/aeabi_cfcmpeq_check_nan.o \\\n-  arm/aeabi_dcmp.o \\\n-  arm/aeabi_div0.o \\\n-  arm/aeabi_drsub.o \\\n-  arm/aeabi_fcmp.o \\\n-  arm/aeabi_frsub.o \\\n-  arm/aeabi_idivmod.o \\\n-  arm/aeabi_ldivmod.o \\\n-  arm/aeabi_memcmp.o \\\n-  arm/aeabi_memcpy.o \\\n-  arm/aeabi_memmove.o \\\n-  arm/aeabi_memset.o \\\n-  arm/aeabi_uidivmod.o \\\n-  arm/aeabi_uldivmod.o \\\n-  arm/bswapdi2.o \\\n-  arm/bswapsi2.o \\\n-  arm/clzdi2.o \\\n-  arm/clzsi2.o \\\n-  arm/comparesf2.o \\\n-  arm/divmodsi4.o \\\n-  arm/divsi3.o \\\n-  arm/modsi3.o \\\n-  arm/switch16.o \\\n-  arm/switch32.o \\\n-  arm/switch8.o \\\n-  arm/switchu8.o \\\n-  arm/sync_synchronize.o \\\n-  arm/udivmodsi4.o \\\n-  arm/udivsi3.o \\\n-  arm/umodsi3.o\n-endif\n-endif\n-\n-# Thumb sources\n-ifeq ($$(findstring armv7,$(1)),armv7)\n-COMPRT_OBJS_$(1) += \\\n-  arm/sync_fetch_and_add_4.o \\\n-  arm/sync_fetch_and_add_8.o \\\n-  arm/sync_fetch_and_and_4.o \\\n-  arm/sync_fetch_and_and_8.o \\\n-  arm/sync_fetch_and_max_4.o \\\n-  arm/sync_fetch_and_max_8.o \\\n-  arm/sync_fetch_and_min_4.o \\\n-  arm/sync_fetch_and_min_8.o \\\n-  arm/sync_fetch_and_nand_4.o \\\n-  arm/sync_fetch_and_nand_8.o \\\n-  arm/sync_fetch_and_or_4.o \\\n-  arm/sync_fetch_and_or_8.o \\\n-  arm/sync_fetch_and_sub_4.o \\\n-  arm/sync_fetch_and_sub_8.o \\\n-  arm/sync_fetch_and_umax_4.o \\\n-  arm/sync_fetch_and_umax_8.o \\\n-  arm/sync_fetch_and_umin_4.o \\\n-  arm/sync_fetch_and_umin_8.o \\\n-  arm/sync_fetch_and_xor_4.o \\\n-  arm/sync_fetch_and_xor_8.o\n-endif\n-\n-# VFP sources\n-ifeq ($$(findstring eabihf,$(1)),eabihf)\n-COMPRT_OBJS_$(1) += \\\n-  arm/adddf3vfp.o \\\n-  arm/addsf3vfp.o \\\n-  arm/divdf3vfp.o \\\n-  arm/divsf3vfp.o \\\n-  arm/eqdf2vfp.o \\\n-  arm/eqsf2vfp.o \\\n-  arm/extendsfdf2vfp.o \\\n-  arm/fixdfsivfp.o \\\n-  arm/fixsfsivfp.o \\\n-  arm/fixunsdfsivfp.o \\\n-  arm/fixunssfsivfp.o \\\n-  arm/floatsidfvfp.o \\\n-  arm/floatsisfvfp.o \\\n-  arm/floatunssidfvfp.o \\\n-  arm/floatunssisfvfp.o \\\n-  arm/gedf2vfp.o \\\n-  arm/gesf2vfp.o \\\n-  arm/gtdf2vfp.o \\\n-  arm/gtsf2vfp.o \\\n-  arm/ledf2vfp.o \\\n-  arm/lesf2vfp.o \\\n-  arm/ltdf2vfp.o \\\n-  arm/ltsf2vfp.o \\\n-  arm/muldf3vfp.o \\\n-  arm/mulsf3vfp.o \\\n-  arm/negdf2vfp.o \\\n-  arm/negsf2vfp.o \\\n-  arm/nedf2vfp.o \\\n-  arm/nesf2vfp.o \\\n-  arm/restore_vfp_d8_d15_regs.o \\\n-  arm/save_vfp_d8_d15_regs.o \\\n-  arm/subdf3vfp.o \\\n-  arm/subsf3vfp.o \\\n-  arm/truncdfsf2vfp.o \\\n-  arm/unorddf2vfp.o \\\n-  arm/unordsf2vfp.o\n-endif\n-\n-$(foreach intrinsic,absvdi2.o \\\n-  absvsi2.o \\\n-  adddf3.o \\\n-  addsf3.o \\\n-  addvdi3.o \\\n-  addvsi3.o \\\n-  apple_versioning.o \\\n-  ashldi3.o \\\n-  ashrdi3.o \\\n-  clear_cache.o \\\n-  clzdi2.o \\\n-  clzsi2.o \\\n-  cmpdi2.o \\\n-  comparedf2.o \\\n-  comparesf2.o \\\n-  ctzdi2.o \\\n-  ctzsi2.o \\\n-  divdc3.o \\\n-  divdf3.o \\\n-  divdi3.o \\\n-  divmoddi4.o \\\n-  divmodsi4.o \\\n-  divsc3.o \\\n-  divsf3.o \\\n-  divsi3.o \\\n-  divxc3.o \\\n-  extendsfdf2.o \\\n-  extendhfsf2.o \\\n-  ffsdi2.o \\\n-  fixdfdi.o \\\n-  fixdfsi.o \\\n-  fixsfdi.o \\\n-  fixsfsi.o \\\n-  fixunsdfdi.o \\\n-  fixunsdfsi.o \\\n-  fixunssfdi.o \\\n-  fixunssfsi.o \\\n-  fixunsxfdi.o \\\n-  fixunsxfsi.o \\\n-  fixxfdi.o \\\n-  floatdidf.o \\\n-  floatdisf.o \\\n-  floatdixf.o \\\n-  floatsidf.o \\\n-  floatsisf.o \\\n-  floatundidf.o \\\n-  floatundisf.o \\\n-  floatundixf.o \\\n-  floatunsidf.o \\\n-  floatunsisf.o \\\n-  int_util.o \\\n-  lshrdi3.o \\\n-  moddi3.o \\\n-  modsi3.o \\\n-  muldc3.o \\\n-  muldf3.o \\\n-  muldi3.o \\\n-  mulodi4.o \\\n-  mulosi4.o \\\n-  muloti4.o \\\n-  mulsc3.o \\\n-  mulsf3.o \\\n-  mulvdi3.o \\\n-  mulvsi3.o \\\n-  mulxc3.o \\\n-  negdf2.o \\\n-  negdi2.o \\\n-  negsf2.o \\\n-  negvdi2.o \\\n-  negvsi2.o \\\n-  paritydi2.o \\\n-  paritysi2.o \\\n-  popcountdi2.o \\\n-  popcountsi2.o \\\n-  powidf2.o \\\n-  powisf2.o \\\n-  powixf2.o \\\n-  subdf3.o \\\n-  subsf3.o \\\n-  subvdi3.o \\\n-  subvsi3.o \\\n-  truncdfhf2.o \\\n-  truncdfsf2.o \\\n-  truncsfhf2.o \\\n-  ucmpdi2.o \\\n-  udivdi3.o \\\n-  udivmoddi4.o \\\n-  udivmodsi4.o \\\n-  udivsi3.o \\\n-  umoddi3.o \\\n-  umodsi3.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-\n-ifeq ($$(findstring ios,$(1)),)\n-$(foreach intrinsic,absvti2.o \\\n-  addtf3.o \\\n-  addvti3.o \\\n-  ashlti3.o \\\n-  ashrti3.o \\\n-  clzti2.o \\\n-  cmpti2.o \\\n-  ctzti2.o \\\n-  divtf3.o \\\n-  divti3.o \\\n-  ffsti2.o \\\n-  fixdfti.o \\\n-  fixsfti.o \\\n-  fixunsdfti.o \\\n-  fixunssfti.o \\\n-  fixunsxfti.o \\\n-  fixxfti.o \\\n-  floattidf.o \\\n-  floattisf.o \\\n-  floattixf.o \\\n-  floatuntidf.o \\\n-  floatuntisf.o \\\n-  floatuntixf.o \\\n-  lshrti3.o \\\n-  modti3.o \\\n-  multf3.o \\\n-  multi3.o \\\n-  mulvti3.o \\\n-  negti2.o \\\n-  negvti2.o \\\n-  parityti2.o \\\n-  popcountti2.o \\\n-  powitf2.o \\\n-  subtf3.o \\\n-  subvti3.o \\\n-  trampoline_setup.o \\\n-  ucmpti2.o \\\n-  udivmodti4.o \\\n-  udivti3.o \\\n-  umodti3.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring apple,$(1)),apple)\n-$(foreach intrinsic,atomic_flag_clear.o \\\n-  atomic_flag_clear_explicit.o \\\n-  atomic_flag_test_and_set.o \\\n-  atomic_flag_test_and_set_explicit.o \\\n-  atomic_signal_fence.o \\\n-  atomic_thread_fence.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring windows,$(1)),)\n-$(call ADD_INTRINSIC,$(1),emutls.o)\n-endif\n-\n-ifeq ($$(findstring msvc,$(1)),)\n-\n-ifeq ($$(findstring freebsd,$(1)),)\n-ifeq ($$(findstring netbsd,$(1)),)\n-$(call ADD_INTRINSIC,$(1),gcc_personality_v0.o)\n-endif\n-endif\n-endif\n-\n-ifeq ($$(findstring aarch64,$(1)),aarch64)\n-$(foreach intrinsic,comparetf2.o \\\n-  extenddftf2.o \\\n-  extendsftf2.o \\\n-  fixtfdi.o \\\n-  fixtfsi.o \\\n-  fixtfti.o \\\n-  fixunstfdi.o \\\n-  fixunstfsi.o \\\n-  fixunstfti.o \\\n-  floatditf.o \\\n-  floatsitf.o \\\n-  floatunditf.o \\\n-  floatunsitf.o \\\n-  multc3.o \\\n-  trunctfdf2.o \\\n-  trunctfsf2.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -Zl -D__func__=__FUNCTION__\n-else\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -fno-builtin -fvisibility=hidden \\\n-\t-fomit-frame-pointer -ffreestanding\n-endif\n-\n-COMPRT_OBJS_$(1) := $$(COMPRT_OBJS_$(1):%=$$(COMPRT_BUILD_DIR_$(1))/%)\n-\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.c\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1),$$@,$$<)\n-\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.S \\\n-\t    $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n-\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-endif\n-\n-ifeq ($$(findstring emscripten,$(1)),emscripten)\n-# FIXME: emscripten doesn't use compiler-rt and can't build it without\n-# further hacks\n-COMPRT_OBJS_$(1) :=\n-endif\n-\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-################################################################################\n-# libbacktrace\n-#\n-# We use libbacktrace on linux to get symbols in backtraces, but only on linux.\n-# Elsewhere we use other system utilities, so this library is only built on\n-# linux.\n-################################################################################\n-\n-BACKTRACE_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),backtrace)\n-BACKTRACE_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(BACKTRACE_NAME_$(1))\n-BACKTRACE_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libbacktrace\n-\n-# We don't use this on platforms that aren't linux-based (with the exception of\n-# msys2/mingw builds on windows, which use it to read the dwarf debug\n-# information) so just make the file available, the compilation of libstd won't\n-# actually build it.\n-ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-\n-else ifeq ($$(findstring ios,$$(OSTYPE_$(1))),ios)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else ifeq ($$(findstring emscripten,$(1)),emscripten)\n-# FIXME: libbacktrace doesn't understand the emscripten triple\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-BACKTRACE_DEPS := $(S)/.gitmodules\n-else\n-BACKTRACE_DEPS := $(wildcard $(S)src/libbacktrace/*)\n-endif\n-\n-# We need to export CFLAGS because otherwise it doesn't pick up cross compile\n-# builds. If libbacktrace doesn't realize this, it will attempt to read 64-bit\n-# elf headers when compiled for a 32-bit system, yielding blank backtraces.\n-#\n-# This also removes the -Werror flag specifically to prevent errors during\n-# configuration.\n-#\n-# Down below you'll also see echos into the config.h generated by the\n-# ./configure script. This is done to force libbacktrace to *not* use the\n-# atomic/sync functionality because it pulls in unnecessary dependencies and we\n-# never use it anyway.\n-#\n-# We also use `env PWD=` to clear the PWD environment variable, and then\n-# execute the command in a new shell. This is necessary to workaround a\n-# buildbot/msys2 bug: the shell is launched with PWD set to a windows-style path,\n-# which results in all further uses of `pwd` also printing a windows-style path,\n-# which breaks libbacktrace's configure script. Clearing PWD within the same\n-# shell is not sufficient.\n-\n-$$(BACKTRACE_BUILD_DIR_$(1))/Makefile: $$(BACKTRACE_DEPS) $$(MKFILE_DEPS)\n-\t@$$(call E, configure: libbacktrace for $(1))\n-\t$$(Q)rm -rf $$(BACKTRACE_BUILD_DIR_$(1))\n-\t$$(Q)mkdir -p $$(BACKTRACE_BUILD_DIR_$(1))\n-\t$$(Q)(cd $$(BACKTRACE_BUILD_DIR_$(1)) && env \\\n-\t      PWD= \\\n-\t      CC=\"$$(CC_$(1))\" \\\n-\t      AR=\"$$(AR_$(1))\" \\\n-\t      RANLIB=\"$$(AR_$(1)) s\" \\\n-\t      CFLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1)) -Wno-error -fno-stack-protector\" \\\n-\t      $(S)src/libbacktrace/configure --build=$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$(CFG_GNU_TRIPLE_$(1)))\n-\t$$(Q)echo '#undef HAVE_ATOMIC_FUNCTIONS' >> \\\n-\t      $$(BACKTRACE_BUILD_DIR_$(1))/config.h\n-\t$$(Q)echo '#undef HAVE_SYNC_FUNCTIONS' >> \\\n-\t      $$(BACKTRACE_BUILD_DIR_$(1))/config.h\n-\n-$$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n-\t@$$(call E, make: libbacktrace)\n-\t$$(Q)$$(MAKE) -C $$(BACKTRACE_BUILD_DIR_$(1)) \\\n-\t\tINCDIR=$(S)src/libbacktrace\n-\t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n-\n-endif\n-\n-################################################################################\n-# libc/libunwind for musl\n-#\n-# When we're building a musl-like target we're going to link libc/libunwind\n-# statically into the standard library and liblibc, so we need to make sure\n-# they're in a location that we can find\n-################################################################################\n-\n-ifeq ($$(findstring musl,$(1)),musl)\n-$$(RT_OUTPUT_DIR_$(1))/%: $$(CFG_MUSL_ROOT)/lib/%\n-\tcp $$^ $$@\n-else\n-# Ask gcc where it is\n-$$(RT_OUTPUT_DIR_$(1))/%:\n-\tcp $$(shell $$(CC_$(1)) -print-file-name=$$(@F)) $$@\n-endif\n-\n-endef\n-\n-# Instantiate template for all stages/targets\n-$(foreach target,$(CFG_TARGET), \\\n-     $(eval $(call DEF_THIRD_PARTY_TARGETS,$(target))))"}, {"sha": "2d63f69960f78a949b952d4fdf8e916c1559c398", "filename": "mk/rustllvm.mk", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,71 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# rustc LLVM-extensions (C++) library variables and rules\n-######################################################################\n-\n-define DEF_RUSTLLVM_TARGETS\n-\n-# FIXME: Lately, on windows, llvm-config --includedir is not enough\n-# to find the llvm includes (probably because we're not actually installing\n-# llvm, but using it straight out of the build directory)\n-ifdef CFG_WINDOWSY_$(1)\n-LLVM_EXTRA_INCDIRS_$(1)= $$(call CFG_CC_INCLUDE_$(1),$(S)src/llvm/include) \\\n-                         $$(call CFG_CC_INCLUDE_$(1),\\\n-\t\t\t   $$(CFG_LLVM_BUILD_DIR_$(1))/include)\n-endif\n-\n-RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, \\\n-\tRustWrapper.cpp PassWrapper.cpp \\\n-\tArchiveWrapper.cpp)\n-\n-RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n-                     $$(call CFG_CC_INCLUDE_$(1),$$(LLVM_INCDIR_$(1))) \\\n-                     $$(call CFG_CC_INCLUDE_$(1),$$(S)src/rustllvm/include)\n-RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=$(1)/rustllvm/%.o)\n-\n-# Flag that we are building with Rust's llvm fork\n-ifeq ($(CFG_LLVM_ROOT),)\n-RUSTLLVM_CXXFLAGS_$(1) := -DLLVM_RUSTLLVM\n-endif\n-\n-# Note that we appease `cl.exe` and its need for some sort of exception\n-# handling flag with the `EHsc` argument here as well.\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-EXTRA_RUSTLLVM_CXXFLAGS_$(1) := //EHsc\n-endif\n-\n-$$(RT_OUTPUT_DIR_$(1))/$$(call CFG_STATIC_LIB_NAME_$(1),rustllvm): \\\n-\t    $$(RUSTLLVM_OBJS_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-RUSTLLVM_COMPONENTS_$(1) = $$(shell echo $$(LLVM_ALL_COMPONENTS_$(1)) |\\\n-\ttr 'a-z-' 'A-Z_'| sed -e 's/^ //;s/\\([^ ]*\\)/\\-DLLVM_COMPONENT_\\1/g')\n-\n-# On MSVC we need to double-escape arguments that llvm-config printed which\n-# start with a '/'. The shell we're running in will auto-translate the argument\n-# `/foo` to `C:/msys64/foo` but we really want it to be passed through as `/foo`\n-# so the argument passed to our shell must be `//foo`.\n-$(1)/rustllvm/%.o: $(S)src/rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@,) \\\n-\t\t$$(subst  /,//,$$(LLVM_CXXFLAGS_$(1))) \\\n-\t\t$$(RUSTLLVM_COMPONENTS_$(1)) \\\n-\t\t$$(RUSTLLVM_CXXFLAGS_$(1)) \\\n-\t\t$$(EXTRA_RUSTLLVM_CXXFLAGS_$(1)) \\\n-\t\t$$(RUSTLLVM_INCS_$(1)) \\\n-\t\t$$<\n-endef\n-\n-# Instantiate template for all stages\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_RUSTLLVM_TARGETS,$(host))))"}, {"sha": "8a2bf2ebbde649817af12b2eb753fa2559939a3a", "filename": "mk/stage0.mk", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,49 +0,0 @@\n-# Extract the snapshot host compiler\n-\n-$(HBIN0_H_$(CFG_BUILD))/:\n-\tmkdir -p $@\n-\n-# On windows these two are the same, so cause a redifinition warning\n-ifneq ($(HBIN0_H_$(CFG_BUILD)),$(HLIB0_H_$(CFG_BUILD)))\n-$(HLIB0_H_$(CFG_BUILD))/:\n-\tmkdir -p $@\n-endif\n-\n-$(SNAPSHOT_RUSTC_POST_CLEANUP): \\\n-\t\t$(S)src/stage0.txt \\\n-\t\t$(S)src/etc/local_stage0.sh \\\n-\t\t$(S)src/etc/get-stage0.py $(MKFILE_DEPS) \\\n-\t\t| $(HBIN0_H_$(CFG_BUILD))/\n-\t@$(call E, fetch: $@)\n-ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD) $(CFG_LOCAL_RUST_ROOT) rustlib\n-else\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-stage0.py $(CFG_BUILD)\n-endif\n-\t$(Q)if [ -e \"$@\" ]; then touch \"$@\"; else echo \"ERROR: snapshot $@ not found\"; exit 1; fi\n-\n-# For other targets, let the host build the target:\n-\n-define BOOTSTRAP_STAGE0\n-  # $(1) target to bootstrap\n-  # $(2) stage to bootstrap from\n-  # $(3) target to bootstrap from\n-\n-$(HBIN0_H_$(1))/:\n-\tmkdir -p $@\n-\n-$(HLIB0_H_$(1))/:\n-\tmkdir -p $@\n-\n-$$(HBIN0_H_$(1))/rustc$$(X_$(1)): \\\n-\t\t$$(TBIN$(2)_T_$(1)_H_$(3))/rustc$$(X_$(1)) \\\n-\t\t| $(HBIN0_H_$(1))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-# Use stage1 to build other architectures: then you don't have to wait\n-# for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_BUILD_HOST), \\\n- $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD))))"}, {"sha": "1b139909ab458587e6398629275c2245183fca77", "filename": "mk/target.mk", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,209 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# This is the compile-time target-triple for the compiler. For the compiler at\n-# runtime, this should be considered the host-triple. More explanation for why\n-# this exists can be found on issue #2400\n-export CFG_COMPILER_HOST_TRIPLE\n-\n-# Used as defaults for the runtime ar and cc tools\n-export CFG_DEFAULT_LINKER\n-export CFG_DEFAULT_AR\n-\n-# Macro that generates the full list of dependencies for a crate at a particular\n-# stage/target/host tuple.\n-#\n-# $(1) - stage\n-# $(2) - target\n-# $(3) - host\n-# $(4) crate\n-define RUST_CRATE_FULLDEPS\n-CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(RSINPUTS_$(4)) \\\n-\t\t$$(foreach dep,$$(RUST_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n-\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate,$(CRATES), \\\n-    $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n-\n-# RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n-# for all stage/target architecture combinations. This is one giant rule which\n-# works as follows:\n-#\n-#   1. The immediate dependencies are the rust source files\n-#   2. Each rust crate dependency is listed (based on their stamp files),\n-#      as well as all native dependencies (listed in RT_OUTPUT_DIR)\n-#   3. The stage (n-1) compiler is required through the TSREQ dependency\n-#   4. When actually executing the rule, the first thing we do is to clean out\n-#      old libs and rlibs via the REMOVE_ALL_OLD_GLOB_MATCHES macro\n-#   5. Finally, we get around to building the actual crate. It's just one\n-#      \"small\" invocation of the previous stage rustc. We use -L to\n-#      RT_OUTPUT_DIR so all the native dependencies are picked up.\n-#      Additionally, we pass in the llvm dir so rustc can link against it.\n-#   6. Some cleanup is done (listing what was just built) if verbose is turned\n-#      on.\n-#\n-# $(1) is the stage\n-# $(2) is the target triple\n-# $(3) is the host triple\n-# $(4) is the crate name\n-define RUST_TARGET_STAGE_N\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n-\t\t$$(LLVM_CONFIG_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$(@D)/lib$(4))\n-\t@touch $$@.start_time\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n-\t$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) \\\n-\t\t$$(RUST_LIB_FLAGS_ST$(1)) \\\n-\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t$$(LLVM_STDCPP_RUSTFLAGS_$(2)) \\\n-\t\t$$(RUSTFLAGS_$(4)) \\\n-\t\t$$(RUSTFLAGS$(1)_$(4)) \\\n-\t\t$$(RUSTFLAGS$(1)_$(4)_T_$(2)) \\\n-\t\t--out-dir $$(@D) \\\n-\t\t-C extra-filename=-$$(CFG_FILENAME_EXTRA) \\\n-\t\t-C metadata=$$(CFG_FILENAME_EXTRA) \\\n-\t\t$$<\n-\t@touch -r $$@.start_time $$@ && rm $$@.start_time\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n-\n-endef\n-\n-# Macro for building any tool as part of the rust compilation process. Each\n-# tool is defined in crates.mk with a list of library dependencies as well as\n-# the source file for the tool. Building each tool will also be passed '--cfg\n-# <tool>' for usage in driver.rs\n-#\n-# This build rule is similar to the one found above, just tweaked for\n-# locations and things.\n-#\n-# $(1) - stage\n-# $(2) - target triple\n-# $(3) - host triple\n-# $(4) - name of the tool being built\n-define TARGET_TOOL\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\t\t$$(TOOL_SOURCE_$(4)) \\\n-\t\t$$(TOOL_INPUTS_$(4)) \\\n-\t\t$$(foreach dep,$$(TOOL_DEPS_$(4)), \\\n-\t\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t-o $$@ $$< --cfg $(4)\n-\n-endef\n-\n-# Macro for building runtime startup/shutdown object files;\n-# these are Rust's equivalent of crti.o, crtn.o\n-#\n-# $(1) - stage\n-# $(2) - target triple\n-# $(3) - host triple\n-# $(4) - object basename\n-define TARGET_RUSTRT_STARTUP_OBJ\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o: \\\n-\t\t$(S)src/rtstartup/$(4).rs \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.core \\\n-\t\t$$(HSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --emit=obj -o $$@ $$<\n-\n-ifeq ($$(CFG_RUSTRT_HAS_STARTUP_OBJS_$(2)), 1)\n-# Add dependencies on Rust startup objects to all crates that depend on core.\n-# This ensures that they are built after core (since they depend on it),\n-# but before everything else (since they are needed for linking dylib crates).\n-$$(foreach crate, $$(TARGET_CRATES_$(2)), \\\n-\t$$(if $$(findstring core,$$(DEPS_$$(crate))), \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate))) : $$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o\n-endif\n-\n-endef\n-\n-# Every recipe in RUST_TARGET_STAGE_N outputs to $$(TLIB$(1)_T_$(2)_H_$(3),\n-# a directory that can be cleaned out during the middle of a run of\n-# the get-snapshot.py script.  Therefore, every recipe needs to have\n-# an order-only dependency either on $(SNAPSHOT_RUSTC_POST_CLEANUP) or\n-# on $$(TSREQ$(1)_T_$(2)_H_$(3)), to ensure that no products will be\n-# put into the target area until after the get-snapshot.py script has\n-# had its chance to clean it out; otherwise the other products will be\n-# inadvertently included in the clean out.\n-SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n-\n-define TARGET_HOST_RULES\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/: $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\tmkdir -p $$@\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/: $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\tmkdir -p $$@\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/%: $$(RT_OUTPUT_DIR_$(2))/% \\\n-\t    $$(SNAPSHOT_RUSTC_POST_CLEANUP) \\\n-\t    | $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-endef\n-\n-$(foreach source,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call TARGET_HOST_RULES,0,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,1,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,2,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,3,$(target),$(source)))))\n-\n-# In principle, each host can build each target for both libs and tools\n-$(foreach crate,$(CRATES), \\\n- $(foreach source,$(CFG_HOST), \\\n-  $(foreach target,$(CFG_TARGET), \\\n-   $(eval $(call RUST_TARGET_STAGE_N,0,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,1,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,2,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,3,$(target),$(source),$(crate))))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach tool,$(TOOLS), \\\n-    $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach obj,rsbegin rsend, \\\n-    $(eval $(call TARGET_RUSTRT_STARTUP_OBJ,$(stage),$(target),$(host),$(obj)))))))"}, {"sha": "3317688f042a2049ed3c19cb6379e4f8234c4831", "filename": "mk/tests.mk", "status": "removed", "additions": 0, "deletions": 1057, "changes": 1057, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,1057 +0,0 @@\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-######################################################################\n-# Test variables\n-######################################################################\n-\n-# The names of crates that must be tested\n-\n-# libcore/libstd_unicode tests are in a separate crate\n-DEPS_coretest :=\n-$(eval $(call RUST_CRATE,coretest))\n-\n-DEPS_collectionstest :=\n-$(eval $(call RUST_CRATE,collectionstest))\n-\n-TEST_TARGET_CRATES = $(filter-out core std_unicode alloc_system libc \\\n-\t\t     \t\t  alloc_jemalloc panic_unwind \\\n-\t\t\t\t  panic_abort,$(TARGET_CRATES)) \\\n-\t\t\tcollectionstest coretest\n-TEST_DOC_CRATES = $(DOC_CRATES) arena flate fmt_macros getopts graphviz \\\n-                log rand serialize syntax term test\n-TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\\n-\t\t   \t\trustc_trans rustc_lint,\\\n-                     $(HOST_CRATES))\n-TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n-\n-######################################################################\n-# Environment configuration\n-######################################################################\n-\n-# The arguments to all test runners\n-ifdef TESTNAME\n-  TESTARGS += $(TESTNAME)\n-endif\n-\n-ifdef CHECK_IGNORED\n-  TESTARGS += --ignored\n-endif\n-\n-# Arguments to the cfail/rfail/rpass tests\n-ifdef CFG_VALGRIND\n-  CTEST_RUNTOOL = --runtool \"$(CFG_VALGRIND)\"\n-endif\n-\n-CTEST_TESTARGS := $(TESTARGS)\n-\n-# --bench is only relevant for crate tests, not for the compile tests\n-ifdef PLEASE_BENCH\n-  TESTARGS += --bench\n-endif\n-\n-ifdef VERBOSE\n-  CTEST_TESTARGS += --verbose\n-endif\n-\n-# Setting locale ensures that gdb's output remains consistent.\n-# This prevents tests from failing with some locales (fixes #17423).\n-export LC_ALL=C\n-\n-TEST_LOG_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-TEST_OK_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).ok\n-\n-define DEF_TARGET_COMMANDS\n-\n-ifdef CFG_UNIXY_$(1)\n-  CFG_RUN_TEST_$(1)=$$(TARGET_RPATH_VAR$$(2)_T_$$(3)_H_$$(4)) \\\n-\t  $$(call CFG_RUN_$(1),,$$(CFG_VALGRIND) $$(1))\n-endif\n-\n-ifdef CFG_WINDOWSY_$(1)\n-  CFG_TESTLIB_$(1)=$$(CFG_BUILD_DIR)$$(2)/$$(strip \\\n-   $$(if $$(findstring stage0,$$(1)), \\\n-       stage0/$$(CFG_LIBDIR_RELATIVE), \\\n-      $$(if $$(findstring stage1,$$(1)), \\\n-           stage1/$$(CFG_LIBDIR_RELATIVE), \\\n-          $$(if $$(findstring stage2,$$(1)), \\\n-               stage2/$$(CFG_LIBDIR_RELATIVE), \\\n-               $$(if $$(findstring stage3,$$(1)), \\\n-                    stage3/$$(CFG_LIBDIR_RELATIVE), \\\n-               )))))/rustlib/$$(CFG_BUILD)/lib\n-  CFG_RUN_TEST_$(1)=$$(TARGET_RPATH_VAR$$(2)_T_$$(3)_H_$$(4)) \\\n-\t  $$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(4)),$$(1))\n-endif\n-\n-# Run the compiletest runner itself under valgrind\n-ifdef CTEST_VALGRIND\n-CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n-      $$(call CFG_RUN_TEST_$$(CFG_BUILD),$$(3),$$(4))\n-else\n-CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n-      $$(call CFG_RUN_$$(CFG_BUILD),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n-endif\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n-\n-# Target platform specific variables for android\n-define DEF_ADB_DEVICE_STATUS\n-CFG_ADB_DEVICE_STATUS=$(1)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-    $(if $(findstring adb,$(CFG_ADB)), \\\n-      $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[:_A-Za-z0-9-]+[[:blank:]]+device')), \\\n-        $(info check: android device attached) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, true)), \\\n-        $(info check: android device not attached) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n-      ), \\\n-      $(info check: adb not found) \\\n-      $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n-    ), \\\n-  ) \\\n-)\n-\n-ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n-CFG_ADB_TEST_DIR=/data/tmp\n-\n-$(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n- $(shell $(CFG_ADB) remount 1>/dev/null) \\\n- $(shell $(CFG_ADB) shell rm -r $(CFG_ADB_TEST_DIR) >/dev/null) \\\n- $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)) \\\n- $(shell $(CFG_ADB) push $(S)src/etc/adb_run_wrapper.sh $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-   $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)/$(target)) \\\n-   $(foreach crate,$(TARGET_CRATES_$(target)), \\\n-    $(shell $(CFG_ADB) push $(TLIB2_T_$(target)_H_$(CFG_BUILD))/$(call CFG_LIB_GLOB_$(target),$(crate)) \\\n-                    $(CFG_ADB_TEST_DIR)/$(target))), \\\n- )))\n-else\n-CFG_ADB_TEST_DIR=\n-endif\n-\n-# $(1) - name of doc test\n-# $(2) - file of the test\n-define DOCTEST\n-DOC_NAMES := $$(DOC_NAMES) $(1)\n-DOCFILE_$(1) := $(2)\n-endef\n-\n-$(foreach doc,$(DOCS), \\\n-  $(eval $(call DOCTEST,md-$(doc),$(S)src/doc/$(doc).md)))\n-$(foreach file,$(wildcard $(S)src/doc/book/*.md), \\\n-  $(eval $(call DOCTEST,$(file:$(S)src/doc/book/%.md=book-%),$(file))))\n-$(foreach file,$(wildcard $(S)src/doc/nomicon/*.md), \\\n-  $(eval $(call DOCTEST,$(file:$(S)src/doc/nomicon/%.md=nomicon-%),$(file))))\n-######################################################################\n-# Main test targets\n-######################################################################\n-\n-# The main testing target. Tests lots of stuff.\n-check: check-sanitycheck cleantmptestlogs cleantestlibs all check-stage2 tidy\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# As above but don't bother running tidy.\n-check-notidy: check-sanitycheck cleantmptestlogs cleantestlibs all check-stage2\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# A slightly smaller set of tests for smoke testing.\n-check-lite: check-sanitycheck cleantestlibs cleantmptestlogs \\\n-\t$(foreach crate,$(TEST_TARGET_CRATES),check-stage2-$(crate)) \\\n-\tcheck-stage2-rpass check-stage2-rpass-valgrind \\\n-\tcheck-stage2-rfail check-stage2-cfail check-stage2-pfail check-stage2-rmake\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Only check the 'reference' tests: rpass/cfail/rfail/rmake.\n-check-ref: check-sanitycheck cleantestlibs cleantmptestlogs check-stage2-rpass \\\n-\tcheck-stage2-rpass-valgrind check-stage2-rfail check-stage2-cfail check-stage2-pfail \\\n-\tcheck-stage2-rmake\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Only check the docs.\n-check-docs: check-sanitycheck cleantestlibs cleantmptestlogs check-stage2-docs\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Some less critical tests that are not prone to breakage.\n-# Not run as part of the normal test suite, but tested by bors on checkin.\n-check-secondary: check-build-compiletest check-build-lexer-verifier check-lexer check-pretty\n-\n-.PHONY: check-sanitycheck\n-\n-check-sanitycheck:\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-sanitycheck.py\n-\n-# check + check-secondary.\n-#\n-# Issue #17883: build check-secondary first so hidden dependencies in\n-# e.g. building compiletest are exercised (resolve those by adding\n-# deps to rules that need them; not by putting `check` first here).\n-check-all: check-secondary check\n-\n-# Pretty-printing tests.\n-check-pretty: check-stage2-T-$(CFG_BUILD)-H-$(CFG_BUILD)-pretty-exec\n-\n-define DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE\n-check-stage$(1)-build-compiletest: \t$$(HBIN$(1)_H_$(CFG_BUILD))/compiletest$$(X_$(CFG_BUILD))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE,$(stage))))\n-\n-check-build-compiletest: \\\n-\tcheck-stage1-build-compiletest \\\n-\tcheck-stage2-build-compiletest\n-\n-.PHONY: cleantmptestlogs cleantestlibs\n-\n-cleantmptestlogs:\n-\t$(Q)rm -f tmp/*.log\n-\n-cleantestlibs:\n-\t$(Q)find $(CFG_BUILD)/test \\\n-         -name '*.[odasS]' -o \\\n-         -name '*.so' -o \\\n-         -name '*.dylib' -o \\\n-         -name '*.dll' -o \\\n-         -name '*.def' -o \\\n-         -name '*.bc' -o \\\n-         -name '*.dSYM' -o \\\n-         -name '*.libaux' -o \\\n-         -name '*.out' -o \\\n-         -name '*.err' -o \\\n-\t -name '*.debugger.script' \\\n-         | xargs rm -rf\n-\n-\n-######################################################################\n-# Tidy\n-######################################################################\n-\n-.PHONY: tidy\n-tidy: $(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD)) \\\n-\t\t$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t$(TARGET_RPATH_VAR0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $< $(S)src\n-\n-$(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD)): \\\n-\t\t$(TSREQ0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n-\t\t$(TLIB0_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.std \\\n-\t\t$(call rwildcard,$(S)src/tools/tidy/src,*.rs) \\\n-\t\t$(SNAPSHOT_RUSTC_POST_CLEANUP) | \\\n-\t\t$(TLIB0_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-\t$(STAGE0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(S)src/tools/tidy/src/main.rs \\\n-\t\t--out-dir $(@D) --crate-name tidy\n-\n-######################################################################\n-# Sets of tests\n-######################################################################\n-\n-define DEF_TEST_SETS\n-\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-valgrind-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rustdocck-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-incremental-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-ui-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-error-index-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-mir-opt-exec\n-\n-ifndef CFG_DISABLE_CODEGEN_TESTS\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-units-exec\n-endif\n-\n-# Only test the compiler-dependent crates when the target is\n-# able to build a compiler (when the target triple is in the set of host triples)\n-ifneq ($$(findstring $(2),$$(CFG_HOST)),)\n-\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-full-exec\n-\n-check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n-\t$$(foreach crate,$$(TEST_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n-\n-else\n-\n-check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n-\t$$(foreach crate,$$(TEST_TARGET_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n-\n-endif\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec: \\\n-        $$(foreach crate,$$(TEST_DOC_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$$(crate)-exec)\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n-        $$(foreach docname,$$(DOC_NAMES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec) \\\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec \\\n-    check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-valgrind-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-exec\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-    $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n-\n-\n-######################################################################\n-# Crate testing\n-######################################################################\n-\n-define TEST_RUNNER\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test crates without rebuilding any of the\n-# parent crates.\n-ifeq ($(NO_REBUILD),)\n-TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t\t    $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-\t\t\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n-\t\t\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\n-\n-else\n-TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n-endif\n-\n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(TESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, rustc: $$@)\n-\t$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) -o $$@ $$< --test \\\n-\t\t-Cmetadata=\"test-crate\" -L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t$$(RUSTFLAGS_$(4))\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(foreach crate,$(TEST_CRATES), \\\n-    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host),$(crate))))))))))\n-\n-define DEF_TEST_CRATE_RULES\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, run: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(1),$(2),$(3)) $$(TESTARGS) \\\n-\t    --logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-\t    $$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) \\\n-\t    && touch -r $$@.start_time $$@ && rm $$@.start_time\n-endef\n-\n-define DEF_TEST_CRATE_RULES_android\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, run: $$< via adb)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n-\t$$(Q)$(CFG_ADB) shell '(cd $(CFG_ADB_TEST_DIR); LD_LIBRARY_PATH=./$(2) \\\n-\t\t./$$(notdir $$<) \\\n-\t\t--logfile $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log \\\n-\t\t$$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) $(TESTARGS))' \\\n-\t\t> tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n-\t$$(Q)cat tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n-\t$$(Q)touch tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-\t$$(Q)$(CFG_ADB) pull $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log tmp/\n-\t$$(Q)$(CFG_ADB) shell rm $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-\t@if grep -q \"result: ok\" tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\tthen \\\n-\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\t\ttouch -r $$@.start_time $$@ && rm $$@.start_time; \\\n-\telse \\\n-\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\t\texit 101; \\\n-\tfi\n-endef\n-\n-define DEF_TEST_CRATE_RULES_null\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, failing: no device for $$< )\n-\tfalse\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate, $(TEST_CRATES), \\\n-    $(if $(findstring $(target),$(CFG_BUILD)), \\\n-     $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n-     $(if $(findstring android, $(target)), \\\n-      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n-       $(eval $(call DEF_TEST_CRATE_RULES_android,$(stage),$(target),$(host),$(crate))), \\\n-       $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n-      ), \\\n-      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))) \\\n-     ))))))\n-\n-######################################################################\n-# Rules for the compiletest tests (rpass, rfail, etc.)\n-######################################################################\n-\n-RPASS_RS := $(call rwildcard,$(S)src/test/run-pass/,*.rs)\n-RPASS_VALGRIND_RS := $(call rwildcard,$(S)src/test/run-pass-valgrind/,*.rs)\n-RPASS_FULL_RS := $(call rwildcard,$(S)src/test/run-pass-fulldeps/,*.rs)\n-RFAIL_FULL_RS := $(call rwildcard,$(S)src/test/run-fail-fulldeps/,*.rs)\n-CFAIL_FULL_RS := $(call rwildcard,$(S)src/test/compile-fail-fulldeps/,*.rs)\n-RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n-RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n-CFAIL_RS := $(call rwildcard,$(S)src/test/compile-fail/,*.rs)\n-PFAIL_RS := $(call rwildcard,$(S)src/test/parse-fail/,*.rs)\n-PRETTY_RS := $(call rwildcard,$(S)src/test/pretty/,*.rs)\n-DEBUGINFO_GDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n-DEBUGINFO_LLDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n-CODEGEN_RS := $(call rwildcard,$(S)src/test/codegen/,*.rs)\n-CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n-CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n-INCREMENTAL_RS := $(call rwildcard,$(S)src/test/incremental/,*.rs)\n-RMAKE_RS := $(wildcard $(S)src/test/run-make/*/Makefile)\n-UI_RS := $(call rwildcard,$(S)src/test/ui/,*.rs) \\\n-         $(call rwildcard,$(S)src/test/ui/,*.stdout) \\\n-         $(call rwildcard,$(S)src/test/ui/,*.stderr)\n-RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n-MIR_OPT_RS := $(call rwildcard,$(S)src/test/mir-opt/,*.rs)\n-\n-RPASS_TESTS := $(RPASS_RS)\n-RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RS)\n-RPASS_FULL_TESTS := $(RPASS_FULL_RS)\n-RFAIL_FULL_TESTS := $(RFAIL_FULL_RS)\n-CFAIL_FULL_TESTS := $(CFAIL_FULL_RS)\n-RFAIL_TESTS := $(RFAIL_RS)\n-CFAIL_TESTS := $(CFAIL_RS)\n-PFAIL_TESTS := $(PFAIL_RS)\n-PRETTY_TESTS := $(PRETTY_RS)\n-DEBUGINFO_GDB_TESTS := $(DEBUGINFO_GDB_RS)\n-DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n-CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n-CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n-INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n-RMAKE_TESTS := $(RMAKE_RS)\n-UI_TESTS := $(UI_RS)\n-MIR_OPT_TESTS := $(MIR_OPT_RS)\n-RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n-\n-CTEST_SRC_BASE_rpass = run-pass\n-CTEST_BUILD_BASE_rpass = run-pass\n-CTEST_MODE_rpass = run-pass\n-CTEST_RUNTOOL_rpass = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rpass-valgrind = run-pass-valgrind\n-CTEST_BUILD_BASE_rpass-valgrind = run-pass-valgrind\n-CTEST_MODE_rpass-valgrind = run-pass-valgrind\n-CTEST_RUNTOOL_rpass-valgrind = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rpass-full = run-pass-fulldeps\n-CTEST_BUILD_BASE_rpass-full = run-pass-fulldeps\n-CTEST_MODE_rpass-full = run-pass\n-CTEST_RUNTOOL_rpass-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rfail-full = run-fail-fulldeps\n-CTEST_BUILD_BASE_rfail-full = run-fail-fulldeps\n-CTEST_MODE_rfail-full = run-fail\n-CTEST_RUNTOOL_rfail-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_cfail-full = compile-fail-fulldeps\n-CTEST_BUILD_BASE_cfail-full = compile-fail-fulldeps\n-CTEST_MODE_cfail-full = compile-fail\n-CTEST_RUNTOOL_cfail-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rfail = run-fail\n-CTEST_BUILD_BASE_rfail = run-fail\n-CTEST_MODE_rfail = run-fail\n-CTEST_RUNTOOL_rfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_cfail = compile-fail\n-CTEST_BUILD_BASE_cfail = compile-fail\n-CTEST_MODE_cfail = compile-fail\n-CTEST_RUNTOOL_cfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_pfail = parse-fail\n-CTEST_BUILD_BASE_pfail = parse-fail\n-CTEST_MODE_pfail = parse-fail\n-CTEST_RUNTOOL_pfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_debuginfo-gdb = debuginfo\n-CTEST_BUILD_BASE_debuginfo-gdb = debuginfo-gdb\n-CTEST_MODE_debuginfo-gdb = debuginfo-gdb\n-CTEST_RUNTOOL_debuginfo-gdb = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_debuginfo-lldb = debuginfo\n-CTEST_BUILD_BASE_debuginfo-lldb = debuginfo-lldb\n-CTEST_MODE_debuginfo-lldb = debuginfo-lldb\n-CTEST_RUNTOOL_debuginfo-lldb = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_codegen = codegen\n-CTEST_BUILD_BASE_codegen = codegen\n-CTEST_MODE_codegen = codegen\n-CTEST_RUNTOOL_codegen = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_codegen-units = codegen-units\n-CTEST_BUILD_BASE_codegen-units = codegen-units\n-CTEST_MODE_codegen-units = codegen-units\n-CTEST_RUNTOOL_codegen-units = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_incremental = incremental\n-CTEST_BUILD_BASE_incremental = incremental\n-CTEST_MODE_incremental = incremental\n-CTEST_RUNTOOL_incremental = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rmake = run-make\n-CTEST_BUILD_BASE_rmake = run-make\n-CTEST_MODE_rmake = run-make\n-CTEST_RUNTOOL_rmake = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_ui = ui\n-CTEST_BUILD_BASE_ui = ui\n-CTEST_MODE_ui = ui\n-CTEST_RUNTOOL_ui = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_mir-opt = mir-opt\n-CTEST_BUILD_BASE_mir-opt = mir-opt\n-CTEST_MODE_mir-opt = mir-opt\n-CTEST_RUNTOOL_mir-opt = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rustdocck = rustdoc\n-CTEST_BUILD_BASE_rustdocck = rustdoc\n-CTEST_MODE_rustdocck = rustdoc\n-CTEST_RUNTOOL_rustdocck = $(CTEST_RUNTOOL)\n-\n-# CTEST_DISABLE_$(TEST_GROUP), if set, will cause the test group to be\n-# disabled and the associated message to be printed as a warning\n-# during attempts to run those tests.\n-\n-ifeq ($(CFG_GDB),)\n-CTEST_DISABLE_debuginfo-gdb = \"no gdb found\"\n-endif\n-\n-ifeq ($(CFG_LLDB),)\n-CTEST_DISABLE_debuginfo-lldb = \"no lldb found\"\n-endif\n-\n-ifneq ($(CFG_OSTYPE),apple-darwin)\n-CTEST_DISABLE_debuginfo-lldb = \"lldb tests are only run on darwin\"\n-endif\n-\n-ifeq ($(CFG_OSTYPE),apple-darwin)\n-CTEST_DISABLE_debuginfo-gdb = \"gdb on darwin needs root\"\n-endif\n-\n-ifeq ($(findstring android, $(CFG_TARGET)), android)\n-CTEST_DISABLE_debuginfo-gdb =\n-CTEST_DISABLE_debuginfo-lldb = \"lldb tests are disabled on android\"\n-endif\n-\n-ifeq ($(findstring msvc,$(CFG_TARGET)),msvc)\n-CTEST_DISABLE_debuginfo-gdb = \"gdb tests are disabled on MSVC\"\n-endif\n-\n-# CTEST_DISABLE_NONSELFHOST_$(TEST_GROUP), if set, will cause that\n-# test group to be disabled *unless* the target is able to build a\n-# compiler (i.e. when the target triple is in the set of host\n-# triples).  The associated message will be printed as a warning\n-# during attempts to run those tests.\n-\n-define DEF_CTEST_VARS\n-\n-# All the per-stage build rules you might want to call from the\n-# command line.\n-#\n-# $(1) is the stage number\n-# $(2) is the target triple to test\n-# $(3) is the host triple to test\n-\n-# Prerequisites for compiletest tests\n-TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/compiletest$$(X_$(3)) \\\n-\t$$(SREQ$(1)_T_$(2)_H_$(3))\n-\n-# Rules for the cfail/rfail/rpass test runner\n-\n-# The tests select when to use debug configuration on their own;\n-# remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(subst -C debug-assertions=on,,$$(CFG_RUSTC_FLAGS)))\n-\n-# The tests cannot be optimized while the rest of the compiler is optimized, so\n-# filter out the optimization (if any) from rustc and then figure out if we need\n-# to be optimized\n-CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n-ifndef CFG_DISABLE_OPTIMIZE_TESTS\n-CTEST_RUSTC_FLAGS += -O\n-endif\n-\n-# Analogously to the above, whether to pass `-g` when compiling tests\n-# is a separate choice from whether to pass `-g` when building the\n-# compiler and standard library themselves.\n-CTEST_RUSTC_FLAGS := $$(subst -g,,$$(CTEST_RUSTC_FLAGS))\n-CTEST_RUSTC_FLAGS := $$(subst -Cdebuginfo=1,,$$(CTEST_RUSTC_FLAGS))\n-ifdef CFG_ENABLE_DEBUGINFO_TESTS\n-CTEST_RUSTC_FLAGS += -g\n-endif\n-\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) = \\\n-\t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n-        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-        --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-        --llvm-filecheck $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin/FileCheck \\\n-        --stage-id stage$(1)-$(2) \\\n-        --target $(2) \\\n-        --host $(3) \\\n-\t--docck-python $$(CFG_PYTHON) \\\n-\t--lldb-python $$(CFG_LLDB_PYTHON) \\\n-        --gdb=\"$(CFG_GDB)\" \\\n-        --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n-        --llvm-version=\"$$(LLVM_VERSION_$(3))\" \\\n-        --android-cross-path=$(CFG_ARM_LINUX_ANDROIDEABI_NDK) \\\n-        --adb-path=$(CFG_ADB) \\\n-        --adb-test-dir=$(CFG_ADB_TEST_DIR) \\\n-        --host-rustcflags \"$(RUSTC_FLAGS_$(3)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(3))\" \\\n-        --lldb-python-dir=$(CFG_LLDB_PYTHON_DIR) \\\n-        --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n-\t--cc '$$(call FIND_COMPILER,$$(CC_$(2)))' \\\n-\t--cxx '$$(call FIND_COMPILER,$$(CXX_$(2)))' \\\n-\t--cflags \"$$(CFG_GCCISH_CFLAGS_$(2))\" \\\n-\t--llvm-components \"$$(LLVM_ALL_COMPONENTS_$(2))\" \\\n-\t--llvm-cxxflags \"$$(LLVM_CXXFLAGS_$(2))\" \\\n-        $$(CTEST_TESTARGS)\n-\n-ifdef CFG_VALGRIND_RPASS\n-ifdef GOOD_VALGRIND_$(2)\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --valgrind-path \"$(CFG_VALGRIND_RPASS)\"\n-endif\n-endif\n-\n-ifndef CFG_DISABLE_VALGRIND_RPASS\n-ifdef GOOD_VALGRIND_$(2)\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --force-valgrind\n-endif\n-endif\n-\n-CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n-CTEST_DEPS_rpass-valgrind_$(1)-T-$(2)-H-$(3) = $$(RPASS_VALGRIND_TESTS)\n-CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_rfail-full_$(1)-T-$(2)-H-$(3) = $$(RFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_cfail-full_$(1)-T-$(2)-H-$(3) = $$(CFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n-CTEST_DEPS_cfail_$(1)-T-$(2)-H-$(3) = $$(CFAIL_TESTS)\n-CTEST_DEPS_pfail_$(1)-T-$(2)-H-$(3) = $$(PFAIL_TESTS)\n-CTEST_DEPS_debuginfo-gdb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_GDB_TESTS)\n-CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n-                                               $(S)src/etc/lldb_batchmode.py \\\n-                                               $(S)src/etc/lldb_rust_formatters.py\n-CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n-CTEST_DEPS_codegen-units_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_UNITS_TESTS)\n-CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n-CTEST_DEPS_rmake_$(1)-T-$(2)-H-$(3) = $$(RMAKE_TESTS) \\\n-\t$$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_ui_$(1)-T-$(2)-H-$(3) = $$(UI_TESTS)\n-CTEST_DEPS_mir-opt_$(1)-T-$(2)-H-$(3) = $$(MIR_OPT_TESTS)\n-CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t\t$$(CSREQ$(1)_T_$(3)_H_$(3)) \\\n-\t\t$$(SREQ$(1)_T_$(3)_H_$(3)) \\\n-\t\t$(S)src/etc/htmldocck.py\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n-\n-define DEF_RUN_COMPILETEST\n-\n-CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) = \\\n-        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n-        --src-base $$(S)src/test/$$(CTEST_SRC_BASE_$(4))/ \\\n-        --build-base $(3)/test/$$(CTEST_BUILD_BASE_$(4))/ \\\n-        --mode $$(CTEST_MODE_$(4)) \\\n-\t$$(CTEST_RUNTOOL_$(4))\n-\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-# CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)\n-# Goal: leave this variable as empty string if we should run the test.\n-# Otherwise, set it to the reason we are not running the test.\n-# (Encoded as a separate variable because GNU make does not have a\n-# good way to express OR on ifeq commands)\n-\n-ifneq ($$(CTEST_DISABLE_$(4)),)\n-# Test suite is disabled for all configured targets.\n-CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_$(4))\n-else\n-# else, check if non-self-hosted target (i.e. target not-in hosts) ...\n-ifeq ($$(findstring $(2),$$(CFG_HOST)),)\n-# ... if so, then check if this test suite is disabled for non-selfhosts.\n-ifneq ($$(CTEST_DISABLE_NONSELFHOST_$(4)),)\n-# Test suite is disabled for this target.\n-CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_NONSELFHOST_$(4))\n-endif\n-endif\n-# Neither DISABLE nor DISABLE_NONSELFHOST is set ==> okay, run the test.\n-endif\n-\n-ifeq ($$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)),)\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-                $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n-\t@$$(call E, run $(4) [$(2)]: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n-\t\t$$(CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n-\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-                && touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-else\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)):\n-\t@$$(call E, run $(4) [$(2)]: $$<)\n-\t@$$(call E, warning: tests disabled: $$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)))\n-\ttouch $$@\n-\n-endif\n-\n-endef\n-\n-CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n-\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental \\\n-\trmake ui mir-opt\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(foreach name,$(CTEST_NAMES), \\\n-   $(eval $(call DEF_RUN_COMPILETEST,$(stage),$(target),$(host),$(name))))))))))\n-\n-PRETTY_NAMES = pretty-rpass pretty-rpass-valgrind pretty-rpass-full pretty-rfail-full pretty-rfail \\\n-    pretty-pretty\n-PRETTY_DEPS_pretty-rpass = $(RPASS_TESTS)\n-PRETTY_DEPS_pretty-rpass-valgrind = $(RPASS_VALGRIND_TESTS)\n-PRETTY_DEPS_pretty-rpass-full = $(RPASS_FULL_TESTS)\n-PRETTY_DEPS_pretty-rfail-full = $(RFAIL_FULL_TESTS)\n-PRETTY_DEPS_pretty-rfail = $(RFAIL_TESTS)\n-PRETTY_DEPS_pretty-pretty = $(PRETTY_TESTS)\n-PRETTY_DIRNAME_pretty-rpass = run-pass\n-PRETTY_DIRNAME_pretty-rpass-valgrind = run-pass-valgrind\n-PRETTY_DIRNAME_pretty-rpass-full = run-pass-fulldeps\n-PRETTY_DIRNAME_pretty-rfail-full = run-fail-fulldeps\n-PRETTY_DIRNAME_pretty-rfail = run-fail\n-PRETTY_DIRNAME_pretty-pretty = pretty\n-\n-define DEF_PRETTY_FULLDEPS\n-PRETTY_DEPS$(1)_T_$(2)_H_$(3)_pretty-rpass-full = $$(CSREQ$(1)_T_$(3)_H_$(3))\n-PRETTY_DEPS$(1)_T_$(2)_H_$(3)_pretty-rfail-full = $$(CSREQ$(1)_T_$(3)_H_$(3))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_PRETTY_FULLDEPS,$(stage),$(target),$(host))))))\n-\n-define DEF_RUN_PRETTY_TEST\n-\n-PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4) = \\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n-        --src-base $$(S)src/test/$$(PRETTY_DIRNAME_$(4))/ \\\n-        --build-base $(3)/test/$$(PRETTY_DIRNAME_$(4))/ \\\n-        --mode pretty\n-\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t        $$(PRETTY_DEPS_$(4)) \\\n-\t        $$(PRETTY_DEPS$(1)_T_$(2)_H_$(3)_$(4))\n-\t@$$(call E, run pretty-rpass [$(2)]: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n-\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-                && touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach pretty-name,$(PRETTY_NAMES), \\\n-    $(eval $(call DEF_RUN_PRETTY_TEST,$(stage),$(target),$(host),$(pretty-name)))))))\n-\n-\n-######################################################################\n-# Crate & freestanding documentation tests\n-######################################################################\n-\n-define DEF_RUSTDOC\n-RUSTDOC_EXE_$(1)_T_$(2)_H_$(3) := $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n-RUSTDOC_$(1)_T_$(2)_H_$(3) := $$(RPATH_VAR$(1)_T_$(2)_H_$(3)) $$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_RUSTDOC,$(stage),$(target),$(host))))))\n-\n-# Freestanding\n-\n-define DEF_DOC_TEST\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test documentation without rebuilding\n-# rustdoc etc.\n-ifeq ($(NO_REBUILD),)\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(DOCFILE_$(4)) \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-else\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(DOCFILE_$(4))\n-endif\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(DOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, run doc-$(4) [$(2)])\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --cfg dox --test $$< \\\n-\t\t--test-args \"$$(TESTARGS)\" && \\\n-\t\ttouch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n-\ttouch $$@\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach docname,$(DOC_NAMES), \\\n-    $(eval $(call DEF_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n-\n-# Crates\n-\n-define DEF_CRATE_DOC_TEST\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test crate documentation without\n-# rebuilding any of the parent crates.\n-ifeq ($(NO_REBUILD),)\n-CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n-\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-else\n-CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n-endif\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec: \\\n-\t$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4))\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, run doc-crate-$(4) [$(2)])\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test --cfg dox \\\n-\t        $$(CRATEFILE_$(4)) --test-args \"$$(TESTARGS)\" && \\\n-\t        touch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)):\n-\ttouch $$@\n-endif\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate,$(TEST_DOC_CRATES), \\\n-    $(eval $(call DEF_CRATE_DOC_TEST,$(stage),$(target),$(host),$(crate)))))))\n-\n-define DEF_DOC_TEST_ERROR_INDEX\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-error-index-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index)\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index): \\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\tdoc/error-index.md\n-\t$$(Q)touch $$@.start_time\n-\t$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test doc/error-index.md\n-\t$$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index):\n-\t$$(Q)touch $$@\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_DOC_TEST_ERROR_INDEX,$(stage),$(target),$(host))))))\n-\n-######################################################################\n-# Shortcut rules\n-######################################################################\n-\n-TEST_GROUPS = \\\n-\tcrates \\\n-\t$(foreach crate,$(TEST_CRATES),$(crate)) \\\n-\t$(foreach crate,$(TEST_DOC_CRATES),doc-crate-$(crate)) \\\n-\trpass \\\n-\trpass-valgrind \\\n-\trpass-full \\\n-\trfail-full \\\n-\tcfail-full \\\n-\trfail \\\n-\tcfail \\\n-\tpfail \\\n-\trmake \\\n-\trustdocck \\\n-\tdebuginfo-gdb \\\n-\tdebuginfo-lldb \\\n-\tcodegen \\\n-\tcodegen-units \\\n-\tincremental \\\n-\tui \\\n-\tdoc \\\n-\t$(foreach docname,$(DOC_NAMES),doc-$(docname)) \\\n-\tpretty \\\n-\tpretty-rpass \\\n-\tpretty-rpass-valgrind \\\n-\tpretty-rpass-full \\\n-\tpretty-rfail-full \\\n-\tpretty-rfail \\\n-\tpretty-pretty \\\n-\tmir-opt \\\n-\t$(NULL)\n-\n-define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST\n-check-stage$(1)-T-$(2)-H-$(3): check-stage$(1)-T-$(2)-H-$(3)-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach host,$(CFG_HOST), \\\n-   $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n-check-stage$(1)-T-$(2)-H-$(3)-$(4): check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach host,$(CFG_HOST), \\\n-   $(foreach group,$(TEST_GROUPS), \\\n-    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n-\n-define DEF_CHECK_FOR_STAGE\n-check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD)\n-check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET), \\\n-                           check-stage$(1)-H-$$(target))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_GROUP\n-check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD)-$(2)\n-check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET), \\\n-                               check-stage$(1)-H-$$(target)-$(2))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach group,$(TEST_GROUPS), \\\n-  $(eval $(call DEF_CHECK_FOR_STAGE_AND_GROUP,$(stage),$(group)))))\n-\n-\n-define DEF_CHECK_FOR_STAGE_AND_HOSTS\n-check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET), \\\n-                           check-stage$(1)-T-$$(target)-H-$(2))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST), \\\n-  $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n-check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET), \\\n-                                check-stage$(1)-T-$$(target)-H-$(2)-$(3))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST), \\\n-  $(foreach group,$(TEST_GROUPS), \\\n-   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n-\n-define DEF_CHECK_DOC_FOR_STAGE\n-check-stage$(1)-docs: $$(foreach docname,$$(DOC_NAMES), \\\n-                       check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(docname)) \\\n-                     $$(foreach crate,$$(TEST_DOC_CRATES), \\\n-                       check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-crate-$$(crate)) \\\n-                     check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-error-index-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_DOC_FOR_STAGE,$(stage))))\n-\n-define DEF_CHECK_CRATE\n-check-$(1): check-stage2-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-$(1)-exec\n-endef\n-\n-$(foreach crate,$(TEST_CRATES), \\\n- $(eval $(call DEF_CHECK_CRATE,$(crate))))"}, {"sha": "918484ac463522865db3dbacefacc5a651933f42", "filename": "mk/util.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Futil.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/mk%2Futil.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Futil.mk?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,23 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-ifdef VERBOSE\n-  Q :=\n-  E =\n-else\n-  Q := @\n-  E = echo $(1)\n-endif\n-\n-print-%:\n-\t@echo $*=$($*)\n-\n-S := $(CFG_SRC_DIR)\n-SREL := $(CFG_SRC_DIR_RELATIVE)"}, {"sha": "6d814619eb6083f096bebaa2d76600cec099179b", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -99,6 +99,7 @@ name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "81e745bc76c9e7a1cdcf19be62f849297822b049", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -15,55 +15,45 @@\n //! `package_vers`, and otherwise indicating to the compiler what it should\n //! print out as part of its version information.\n \n-use std::fs::File;\n-use std::io::prelude::*;\n use std::process::Command;\n \n use build_helper::output;\n \n use Build;\n \n-pub fn collect(build: &mut Build) {\n-    // Currently the canonical source for the release number (e.g. 1.10.0) and\n-    // the prerelease version (e.g. `.1`) is in `mk/main.mk`. We \"parse\" that\n-    // here to learn about those numbers.\n-    let mut main_mk = String::new();\n-    t!(t!(File::open(build.src.join(\"mk/main.mk\"))).read_to_string(&mut main_mk));\n-    let mut release_num = \"\";\n-    let mut prerelease_version = \"\";\n-    for line in main_mk.lines() {\n-        if line.starts_with(\"CFG_RELEASE_NUM\") {\n-            release_num = line.split('=').skip(1).next().unwrap().trim();\n-        }\n-        if line.starts_with(\"CFG_PRERELEASE_VERSION\") {\n-            prerelease_version = line.split('=').skip(1).next().unwrap().trim();\n-        }\n-    }\n+// The version number\n+const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+\n+// An optional number to put after the label, e.g. '.2' -> '-beta.2'\n+// Be sure to make this starts with a dot to conform to semver pre-release\n+// versions (section 9)\n+const CFG_PRERELEASE_VERSION: &'static str = \".1\";\n \n-    build.release_num = release_num.to_string();\n-    build.prerelease_version = release_num.to_string();\n+pub fn collect(build: &mut Build) {\n+    build.release_num = CFG_RELEASE_NUM.to_string();\n+    build.prerelease_version = CFG_RELEASE_NUM.to_string();\n \n     // Depending on the channel, passed in `./configure --release-channel`,\n     // determine various properties of the build.\n     match &build.config.channel[..] {\n         \"stable\" => {\n-            build.release = release_num.to_string();\n+            build.release = CFG_RELEASE_NUM.to_string();\n             build.package_vers = build.release.clone();\n             build.unstable_features = false;\n         }\n         \"beta\" => {\n-            build.release = format!(\"{}-beta{}\", release_num,\n-                                   prerelease_version);\n+            build.release = format!(\"{}-beta{}\", CFG_RELEASE_NUM,\n+                                   CFG_PRERELEASE_VERSION);\n             build.package_vers = \"beta\".to_string();\n             build.unstable_features = false;\n         }\n         \"nightly\" => {\n-            build.release = format!(\"{}-nightly\", release_num);\n+            build.release = format!(\"{}-nightly\", CFG_RELEASE_NUM);\n             build.package_vers = \"nightly\".to_string();\n             build.unstable_features = true;\n         }\n         _ => {\n-            build.release = format!(\"{}-dev\", release_num);\n+            build.release = format!(\"{}-dev\", CFG_RELEASE_NUM);\n             build.package_vers = build.release.clone();\n             build.unstable_features = true;\n         }"}, {"sha": "1c3901bf2a14349619d1fdc379fb57bfd7b33970", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -381,13 +381,11 @@ pub fn rust_src(build: &Build) {\n         \"README.md\",\n         \"RELEASES.md\",\n         \"configure\",\n-        \"Makefile.in\",\n         \"x.py\",\n     ];\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"mk\"\n     ];\n \n     let filter_fn = move |path: &Path| {"}, {"sha": "536095503e0daed170d0d0e6dcf4fbdc50bcca56", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -9,11 +9,12 @@\n # except according to those terms.\n \n include config.mk\n-include $(CFG_SRC_DIR)mk/util.mk\n \n ifdef VERBOSE\n+Q :=\n BOOTSTRAP_ARGS := -v\n else\n+Q := @\n BOOTSTRAP_ARGS :=\n endif\n "}, {"sha": "c6071d704f5f6b7cc66ae6ddded1622e2115690a", "filename": "src/ci/docker/x86_64-gnu-make/Dockerfile", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,26 +0,0 @@\n-FROM ubuntu:16.04\n-\n-RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n-  make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n-  python2.7 \\\n-  git \\\n-  cmake \\\n-  sudo \\\n-  gdb \\\n-  xz-utils\n-\n-ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n-RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n-      tar xJf - -C /usr/local/bin --strip-components=1\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --disable-rustbuild\n-ENV RUST_CHECK_TARGET check"}, {"sha": "83d54789ff3572a12b8ec6ae4ade1c6fa9d638a0", "filename": "src/etc/Dockerfile", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,27 +0,0 @@\n-FROM ubuntu:xenial\n-\n-# curl\n-#   Download stage0, see src/bootstrap/bootstrap.py\n-# g++\n-#   Compile LLVM binding in src/rustllvm\n-# gdb\n-#   Used to run tests in src/test/debuginfo\n-# git\n-#   Get commit hash and commit date in version string\n-# make\n-#   Run build scripts in mk\n-# libedit-dev zlib1g-dev\n-#   LLVM dependencies as packaged in Ubuntu\n-#   (They are optional, but Ubuntu package enables them)\n-# llvm-3.7-dev (installed by llvm-3.7-tools)\n-#   LLVM\n-# llvm-3.7-tools\n-#   FileCheck is used to run tests in src/test/codegen\n-\n-RUN apt-get update && apt-get -y install \\\n-    curl g++ gdb git make \\\n-    libedit-dev zlib1g-dev \\\n-    llvm-3.7-tools cmake\n-\n-RUN mkdir /build\n-WORKDIR /build"}, {"sha": "50e30caa2b34b0fa58700b81091da0fe28185b93", "filename": "src/etc/apple-darwin.supp", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fapple-darwin.supp", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fapple-darwin.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fapple-darwin.supp?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,75 +0,0 @@\n-{\n-   osx-frameworks.rs-fails-otherwise-1\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-3\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:realloc\n-   ...\n-   fun:_read_images\n-   fun:map_images_nolock\n-   ...\n-   fun:_ZN4dyldL18notifyBatchPartialE17dyld_image_statesbPFPKcS0_jPK15dyld_image_infoE\n-   fun:_ZN4dyld36registerImageStateBatchChangeHandlerE17dyld_image_statesPFPKcS0_jPK15dyld_image_infoE\n-   fun:dyld_register_image_state_change_handler\n-   fun:_objc_init\n-   fun:_os_object_init\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-4\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-   fun:_ZN16ImageLoaderMachO16doInitializationERKN11ImageLoader11LinkContextE\n-   fun:_ZN11ImageLoader23recursiveInitializationERKNS_11LinkContextEjRNS_21InitializerTimingListERNS_15UninitedUpwardsE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc_zone_malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   fails-since-xcode-7.2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_malloc\n-   fun:_objc_copyClassNamesForImage\n-   fun:_ZL9protocolsv\n-   fun:_Z9readClassP10objc_classbb\n-   fun:gc_init\n-   fun:_ZL33objc_initializeClassPair_internalP10objc_classPKcS0_S0_\n-   fun:layout_string_create\n-   fun:_ZL12realizeClassP10objc_class\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-}"}, {"sha": "0e103fbcffbad6a0fb1b2f34044b0887200519c8", "filename": "src/etc/check-sanitycheck.py", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fcheck-sanitycheck.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fcheck-sanitycheck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-sanitycheck.py?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,58 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import subprocess\n-import sys\n-import functools\n-\n-STATUS = 0\n-\n-def error_unless_permitted(env_var, message):\n-    global STATUS\n-    if not os.getenv(env_var):\n-        sys.stderr.write(message)\n-        STATUS = 1\n-\n-def only_on(platforms):\n-    def decorator(func):\n-        @functools.wraps(func)\n-        def inner():\n-            if any(map(lambda x: sys.platform.startswith(x), platforms)):\n-                func()\n-        return inner\n-    return decorator\n-\n-@only_on(['linux', 'darwin', 'freebsd', 'openbsd'])\n-def check_rlimit_core():\n-    import resource\n-    soft, hard = resource.getrlimit(resource.RLIMIT_CORE)\n-    if soft > 0:\n-        error_unless_permitted('ALLOW_NONZERO_RLIMIT_CORE', \"\"\"\\\n-RLIMIT_CORE is set to a nonzero value (%d). During debuginfo, the test suite\n-will segfault many rustc's, creating many potentially large core files.\n-set ALLOW_NONZERO_RLIMIT_CORE to ignore this warning\n-\"\"\" % (soft))\n-\n-@only_on(['win32'])\n-def check_console_code_page():\n-    if '65001' not in subprocess.check_output(['cmd', '/c', 'chcp']):\n-        sys.stderr.write('Warning: the console output code page is not UTF-8, \\\n-some tests may fail. Use `cmd /c \"chcp 65001\"` to setup UTF-8 code page.\\n')\n-\n-def main():\n-    check_console_code_page()\n-    check_rlimit_core()\n-\n-if __name__ == '__main__':\n-    main()\n-    sys.exit(STATUS)"}, {"sha": "9312b685c14a2b5dc79d1aacfd31ad11e9901713", "filename": "src/etc/check-summary.py", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,57 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import glob\n-import sys\n-\n-if __name__ == '__main__':\n-    summaries = []\n-\n-    def summarise(fname):\n-        summary = {}\n-        with open(fname) as fd:\n-            for line in fd:\n-                splitline = line.strip().split(' ')\n-                if len(splitline) == 1:\n-                    continue\n-                status = splitline[0]\n-                test = splitline[-1]\n-                # track bench runs\n-                if splitline[1] == 'ns/iter':\n-                    status = 'bench'\n-                if status not in summary:\n-                    summary[status] = []\n-                summary[status].append(test)\n-            summaries.append((fname, summary))\n-\n-    def count(t):\n-        return sum(map(lambda f: len(f[1].get(t, [])), summaries))\n-\n-    logfiles = sys.argv[1:]\n-    for files in map(glob.glob, logfiles):\n-        map(summarise, files)\n-    ok = count('ok')\n-    failed = count('failed')\n-    ignored = count('ignored')\n-    measured = count('bench')\n-    print(\"summary of %d test runs: %d passed; %d failed; %d ignored; %d measured\" %\n-          (len(logfiles), ok, failed, ignored, measured))\n-    print(\"\")\n-\n-    if failed > 0:\n-        print(\"failed tests:\")\n-        for f, s in summaries:\n-            failures = s.get('failed', [])\n-            if len(failures) > 0:\n-                print(\"  %s:\" % (f))\n-            for test in failures:\n-                print(\"    %s\" % (test))"}, {"sha": "127251cc802c9ccec20dc19c01901cbad412f43e", "filename": "src/etc/get-stage0.py", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fget-stage0.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fget-stage0.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-stage0.py?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-\n-path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../bootstrap\"))\n-sys.path.append(path)\n-\n-import bootstrap\n-\n-def main(triple):\n-    src_root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\"))\n-    data = bootstrap.stage0_data(src_root)\n-\n-    channel, date = data['rustc'].split('-', 1)\n-\n-    dl_dir = 'dl'\n-    if not os.path.exists(dl_dir):\n-        os.makedirs(dl_dir)\n-\n-    filename = 'rustc-{}-{}.tar.gz'.format(channel, triple)\n-    url = 'https://static.rust-lang.org/dist/{}/{}'.format(date, filename)\n-    dst = dl_dir + '/' + filename\n-    bootstrap.get(url, dst)\n-\n-    stage0_dst = triple + '/stage0'\n-    if os.path.exists(stage0_dst):\n-        for root, _, files in os.walk(stage0_dst):\n-            for f in files:\n-                os.unlink(os.path.join(root, f))\n-    else:\n-        os.makedirs(stage0_dst)\n-    bootstrap.unpack(dst, stage0_dst, match='rustc', verbose=True)\n-\n-if __name__ == '__main__':\n-    main(sys.argv[1])"}, {"sha": "ee77206640eab2a70bc8f6f086a9fe1b76ef95db", "filename": "src/etc/local_stage0.sh", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,79 +0,0 @@\n-#!/bin/sh\n-# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-TARG_DIR=$1\n-PREFIX=$2\n-RUSTLIBDIR=$3\n-\n-LIB_DIR=lib\n-LIB_PREFIX=lib\n-\n-OS=`uname -s`\n-case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\"|\"SunOS\"|\"Haiku\")\n-    BIN_SUF=\n-    LIB_SUF=.so\n-    ;;\n-    (\"Darwin\")\n-    BIN_SUF=\n-    LIB_SUF=.dylib\n-    ;;\n-    (*)\n-    BIN_SUF=.exe\n-    LIB_SUF=.dll\n-    LIB_DIR=bin\n-    LIB_PREFIX=\n-    ;;\n-esac\n-\n-if [ -z $PREFIX ]; then\n-    echo \"No local rust specified.\"\n-    exit 1\n-fi\n-\n-if [ ! -e ${PREFIX}/bin/rustc${BIN_SUF} ]; then\n-    echo \"No local rust installed at ${PREFIX}\"\n-    exit 1\n-fi\n-\n-if [ -z $TARG_DIR ]; then\n-    echo \"No target directory specified.\"\n-    exit 1\n-fi\n-\n-case \"$TARG_DIR\" in\n---print-rustc-release)\n-  # not actually copying to TARG_DIR, just print the local rustc version and exit\n-  ${PREFIX}/bin/rustc${BIN_SUF} --version --verbose | sed -ne 's/^release: //p'\n-;;\n-*)\n-\n-cp ${PREFIX}/bin/rustc${BIN_SUF} ${TARG_DIR}/stage0/bin/\n-cp ${PREFIX}/${LIB_DIR}/${RUSTLIBDIR}/${TARG_DIR}/${LIB_DIR}/* ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}arena*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}extra*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rust*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}std*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}syntax*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}flate*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}fmt_macros*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}getopts*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}graphviz*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}log*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rbml*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}serialize*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}term*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}proc_macro*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-\n-# do not fail if one of the above fails, as all we need is a working rustc!\n-exit 0\n-\n-esac"}, {"sha": "24b007576aa24ad673a6687d246400f0dd16b459", "filename": "src/etc/mklldeps.py", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,113 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-import subprocess\n-\n-f = open(sys.argv[1], 'wb')\n-\n-components = sys.argv[2].split() # splits on whitespace\n-enable_static = sys.argv[3]\n-llvm_config = sys.argv[4]\n-stdcpp_name = sys.argv[5]\n-use_libcpp = sys.argv[6]\n-\n-f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// WARNING: THIS IS A GENERATED FILE, DO NOT MODIFY\n-//          take a look at src/etc/mklldeps.py if you're interested\n-\"\"\")\n-\n-\n-def run(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        print(\"failed to run llvm_config: args = `{}`\".format(args))\n-        print(err)\n-        sys.exit(1)\n-    return out\n-\n-def runErr(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        return False, out\n-    else:\n-        return True, out\n-\n-f.write(\"\\n\")\n-\n-args = [llvm_config, '--shared-mode']\n-args.extend(components)\n-llvm_shared, out = runErr(args)\n-if llvm_shared:\n-    llvm_shared = 'shared' in out\n-\n-# LLVM libs\n-args = [llvm_config, '--libs', '--system-libs']\n-args.extend(components)\n-out = run(args)\n-for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n-    if len(lib) == 0:\n-        continue\n-    # in some cases we get extra spaces in between libs so ignore those\n-    if len(lib) == 1 and lib == ' ':\n-        continue\n-    # not all libs strictly follow -lfoo, on Bitrig, there is -pthread\n-    if lib[0:2] == '-l':\n-        lib = lib.strip()[2:]\n-    elif lib[0] == '-':\n-        lib = lib.strip()[1:]\n-    # If this actually points at a literal file then we're on MSVC which now\n-    # prints full paths, so get just the name of the library and strip off the\n-    # trailing \".lib\"\n-    elif os.path.exists(lib):\n-        lib = os.path.basename(lib)[:-4]\n-    elif lib[-4:] == '.lib':\n-        lib = lib[:-4]\n-    f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n-    if not llvm_shared and 'LLVM' in lib:\n-        f.write(\", kind = \\\"static\\\"\")\n-    f.write(\")]\\n\")\n-\n-# LLVM ldflags\n-out = run([llvm_config, '--ldflags'])\n-for lib in out.strip().split(' '):\n-    if lib[:2] == \"-l\":\n-        f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n-\n-# C++ runtime library\n-out = run([llvm_config, '--cxxflags'])\n-if enable_static == '1':\n-    assert('stdlib=libc++' not in out)\n-    f.write(\"#[link(name = \\\"\" + stdcpp_name + \"\\\", kind = \\\"static\\\")]\\n\")\n-else:\n-    # Note that we use `cfg_attr` here because on MSVC the C++ standard library\n-    # is not c++ or stdc++, but rather the linker takes care of linking the\n-    # right standard library.\n-    if use_libcpp != \"0\" or 'stdlib=libc++' in out:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"c++\\\"))]\\n\")\n-    else:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"\" + stdcpp_name + \"\\\"))]\\n\")\n-\n-# Attach everything to an extern block\n-f.write(\"extern {}\\n\")"}, {"sha": "6e409af79aecfe48f4c49bcd8cc97ae1dbb110b6", "filename": "src/etc/x86.supp", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,65 +0,0 @@\n-{\n-   goddammit-llvm-why-u-no-valgrind\n-   Memcheck:Cond\n-   fun:*\n-   ...\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-1\n-   Memcheck:Addr1\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-2\n-   Memcheck:Addr2\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-3\n-   Memcheck:Addr4\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-4\n-   Memcheck:Addr8\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite\n-   fun:malloc\n-   fun:tlv_allocate_and_initialize_for_key\n-   fun:tlv_get_addr\n-   ...\n-   fun:start\n-}"}, {"sha": "a3402bf399427be5dcc61f95f0f6df3b1f98831e", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     // FIXME: This is a hack to support building targets that don't"}, {"sha": "8d81a09f5af0fbf947726145a61a7c8f42235e57", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -30,22 +30,6 @@ pub use imp::*;\n mod imp {\n     use libc::{c_int, c_void, size_t};\n \n-    // Linkage directives to pull in jemalloc and its dependencies.\n-    //\n-    // On some platforms we need to be sure to link in `pthread` which jemalloc\n-    // depends on, and specifically on android we need to also link to libgcc.\n-    // Currently jemalloc is compiled with gcc which will generate calls to\n-    // intrinsics that are libgcc specific (e.g. those intrinsics aren't present in\n-    // libcompiler-rt), so link that in to get that support.\n-    #[link(name = \"jemalloc\", kind = \"static\")]\n-    #[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n-    #[cfg_attr(all(not(windows),\n-                   not(target_os = \"android\"),\n-                   not(target_env = \"musl\")),\n-               link(name = \"pthread\"))]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     // Note that the symbols here are prefixed by default on OSX and Windows (we\n     // don't explicitly request it), and on Android and DragonFly we explicitly\n     // request it as unprefixing cause segfaults (mismatches in allocators)."}, {"sha": "12016980a2c656be8c5ace4d6ea27285865ca26a", "filename": "src/libflate/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     gcc::Config::new()\n         .file(\"../rt/miniz.c\")\n         .compile(\"libminiz.a\");"}, {"sha": "dedec7b1609fadaea92cdaf9e1d970f42dfe4dd9", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -74,10 +74,6 @@ impl Drop for Bytes {\n     }\n }\n \n-#[link(name = \"miniz\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n extern \"C\" {\n     /// Raw miniz compression function.\n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,"}, {"sha": "84abc6bc4a5132e248470e31ad231cf1e12b8aa5", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -301,10 +301,6 @@ unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n // with any GCC runtime.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n pub mod eh_frame_registry {\n-    #[link(name = \"gcc_eh\")]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     extern \"C\" {\n         fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);"}, {"sha": "c74a9308e4eba4913aff70e4d598d8babf7d9c8b", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -47,8 +47,6 @@ fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>)\n }\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n         .map(PathBuf::from)"}, {"sha": "f300bf16145a736c92f95768eb911ada60f24c3e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -422,13 +422,3 @@ impl Drop for OperandBundleDef {\n         }\n     }\n }\n-\n-// The module containing the native LLVM dependencies, generated by the build system\n-// Note that this must come after the rustllvm extern declaration so that\n-// parts of LLVM that rustllvm depends on aren't thrown away by the linker.\n-// Works to the above fix for #15460 to ensure LLVM dependencies that\n-// are only used by rustllvm don't get stripped by the linker.\n-#[cfg(not(cargobuild))]\n-mod llvmdeps {\n-    include! { env!(\"CFG_LLVM_LINKAGE_FILE\") }\n-}"}, {"sha": "fcb7af11dce2f061d2abbfd0bcc1e0af72ee6ad0", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     let mut cfg = gcc::Config::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")"}, {"sha": "a0f4a3a87434845c7f464723bea9f47f4842c985", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -162,11 +162,6 @@ struct hoedown_buffer {\n     unit: libc::size_t,\n }\n \n-// hoedown FFI\n-#[link(name = \"hoedown\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern {\n     fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n                                  nesting_level: libc::c_int)"}, {"sha": "0fca374f6e6d1035381faf7ba96498965663378b", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");"}, {"sha": "3a552c060a9b9066d0031e1007213b15561184e4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -464,9 +464,6 @@ mod panicking;\n mod rand;\n mod memchr;\n \n-// This module just defines per-platform native library dependencies\n-mod rtdeps;\n-\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;"}, {"sha": "d76e8816ca45f3932b37baf92a35fcdf8fca5028", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -311,12 +311,12 @@ impl<'a> Location<'a> {\n }\n \n fn default_hook(info: &PanicInfo) {\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     use sys_common::backtrace;\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     let log_backtrace = {\n         let panics = update_panic_count(0);\n \n@@ -341,7 +341,7 @@ fn default_hook(info: &PanicInfo) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n \n-        #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+        #[cfg(feature = \"backtrace\")]\n         {\n             use sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "5dc6ee2bc8c660921d7f1cac3062ce41525d0e47", "filename": "src/libstd/rtdeps.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,68 +0,0 @@\n-// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! This module contains the linkage attributes to all runtime dependencies of\n-//! the standard library This varies per-platform, but these libraries are\n-//! necessary for running libstd.\n-\n-#![cfg(not(cargobuild))]\n-\n-// LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n-// libm. Hence, we must explicitly link to it.\n-//\n-// On Linux, librt and libdl are indirect dependencies via std,\n-// and binutils 2.22+ won't add them automatically\n-#[cfg(all(target_os = \"linux\", not(target_env = \"musl\")))]\n-#[link(name = \"dl\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"android\")]\n-#[link(name = \"dl\")]\n-#[link(name = \"log\")]\n-extern {}\n-\n-#[cfg(target_os = \"freebsd\")]\n-#[link(name = \"execinfo\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(any(target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"solaris\")]\n-#[link(name = \"socket\")]\n-#[link(name = \"posix4\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-// For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n-// missing (ie always error) in Newlib.\n-#[cfg(all(target_os = \"nacl\", not(test)))]\n-#[link(name = \"nacl_io\", kind = \"static\")]\n-#[link(name = \"c++\", kind = \"static\")] // for `nacl_io` and EH.\n-#[link(name = \"pthread\", kind = \"static\")]\n-extern {}\n-\n-#[cfg(target_os = \"macos\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"ios\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"haiku\")]\n-#[link(name = \"network\")]\n-extern {}"}, {"sha": "6e35a472792c464de35268ebcd4897bb91d333eb", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -189,11 +189,6 @@ mod imp {\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }\n \n-        #[link(name = \"Foundation\", kind = \"framework\")]\n-        #[link(name = \"objc\")]\n-        #[cfg(not(cargobuild))]\n-        extern {}\n-\n         type Sel = *const libc::c_void;\n         type NsId = *const libc::c_void;\n "}, {"sha": "c57751a01d7c1b6f0293da4c000cd33b51e0dab4", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -33,7 +33,7 @@ pub mod weak;\n \n pub mod args;\n pub mod android;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod env;"}, {"sha": "77ebad4e344c24adbcef0ae199fee1c7a9c8168b", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -257,10 +257,6 @@ mod imp {\n     #[allow(non_upper_case_globals)]\n     const kSecRandomDefault: *const SecRandom = ptr::null();\n \n-    #[link(name = \"Security\", kind = \"framework\")]\n-    #[cfg(not(cargobuild))]\n-    extern {}\n-\n     extern {\n         fn SecRandomCopyBytes(rnd: *const SecRandom,\n                               count: size_t, bytes: *mut u8) -> c_int;"}, {"sha": "e5010ca356449cfcf1c56e2145c3aab7c6c44f22", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -833,13 +833,6 @@ pub struct CONSOLE_READCONSOLE_CONTROL {\n }\n pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n \n-#[link(name = \"ws2_32\")]\n-#[link(name = \"userenv\")]\n-#[link(name = \"shell32\")]\n-#[link(name = \"advapi32\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern \"system\" {\n     pub fn WSAStartup(wVersionRequested: WORD,\n                       lpWSAData: LPWSADATA) -> c_int;"}, {"sha": "0bdbeddb112121b0a015925bc83fc866e4dd0b31", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -39,9 +39,6 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n                       msg: *const libc::c_char,\n                       errnum: libc::c_int);\n     enum backtrace_state {}\n-    #[link(name = \"backtrace\", kind = \"static\")]\n-    #[cfg(all(not(test), not(cargobuild)))]\n-    extern {}\n \n     extern {\n         fn backtrace_create_state(filename: *const libc::c_char,"}, {"sha": "d4d3365dc0198a8129d08c6d10c28f0e85573de3", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -29,7 +29,7 @@ use sync::Once;\n use sys;\n \n pub mod at_exit_imp;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;\n@@ -50,7 +50,7 @@ pub use sys::net;\n #[cfg(not(target_os = \"redox\"))]\n pub mod net;\n \n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;"}, {"sha": "f18b694d3d0c70e5feb861718c31b1cee5f161ba", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -11,8 +11,6 @@\n use std::env;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {"}, {"sha": "7fb58373251a515be8a104da34b7af5829918597", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -240,34 +240,3 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n }\n } // cfg_if!\n-\n-#[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n-               target_os = \"freebsd\",\n-               target_os = \"solaris\",\n-               target_os = \"haiku\",\n-               all(target_os = \"linux\",\n-                   target_env = \"musl\",\n-                   not(target_arch = \"x86\"),\n-                   not(target_arch = \"x86_64\"))),\n-           link(name = \"gcc_s\"))]\n-#[cfg_attr(all(target_os = \"linux\",\n-               target_env = \"musl\",\n-               any(target_arch = \"x86\", target_arch = \"x86_64\"),\n-               not(test)),\n-           link(name = \"unwind\", kind = \"static\"))]\n-#[cfg_attr(target_os = \"fuchsia\",\n-           link(name = \"unwind\"))]\n-#[cfg_attr(any(target_os = \"android\", target_os = \"openbsd\"),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", target_vendor = \"rumprun\"),\n-           link(name = \"unwind\"))]\n-#[cfg_attr(target_os = \"dragonfly\",\n-           link(name = \"gcc_pic\"))]\n-#[cfg_attr(target_os = \"bitrig\",\n-           link(name = \"c++abi\"))]\n-#[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"),\n-           link(name = \"gcc_eh\"))]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}"}, {"sha": "1fc98a78a7c473c73148174942d0e62f82bb9fda", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -2,9 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"compiletest\"\n version = \"0.0.0\"\n-build = \"build.rs\"\n \n [dependencies]\n log = \"0.3\"\n env_logger = { version = \"0.3.5\", default-features = false }\n rustc-serialize = \"0.3\"\n+filetime = \"0.1\""}, {"sha": "d5164b9b7591814430a77c9286ffab1b6cb19214", "filename": "src/tools/compiletest/build.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Ftools%2Fcompiletest%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8fa5af213e24e83ded9dbed15572045c27fbbf/src%2Ftools%2Fcompiletest%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fbuild.rs?ref=3d8fa5af213e24e83ded9dbed15572045c27fbbf", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-}"}, {"sha": "522cd222c269171efd09f2a2b76e5a527df53d34", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -25,13 +25,15 @@ use extract_gdb_version;\n pub struct EarlyProps {\n     pub ignore: bool,\n     pub should_fail: bool,\n+    pub aux: Vec<String>,\n }\n \n impl EarlyProps {\n     pub fn from_file(config: &Config, testfile: &Path) -> Self {\n         let mut props = EarlyProps {\n             ignore: false,\n             should_fail: false,\n+            aux: Vec::new(),\n         };\n \n         iter_header(testfile,\n@@ -50,6 +52,10 @@ impl EarlyProps {\n                 ignore_lldb(config, ln) ||\n                 ignore_llvm(config, ln);\n \n+            if let Some(s) = parse_aux_build(ln) {\n+                props.aux.push(s);\n+            }\n+\n             props.should_fail = props.should_fail || parse_name_directive(ln, \"should-fail\");\n         });\n "}, {"sha": "5a97f7e3ee9b533321328b2d8548f3367b783687", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -21,24 +21,19 @@\n extern crate libc;\n extern crate test;\n extern crate getopts;\n-\n-#[cfg(cargobuild)]\n extern crate rustc_serialize;\n-#[cfg(not(cargobuild))]\n-extern crate serialize as rustc_serialize;\n-\n #[macro_use]\n extern crate log;\n-\n-#[cfg(cargobuild)]\n extern crate env_logger;\n+extern crate filetime;\n \n use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use filetime::FileTime;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n@@ -58,11 +53,7 @@ mod raise_fd_limit;\n mod uidiff;\n \n fn main() {\n-    #[cfg(cargobuild)]\n-    fn log_init() { env_logger::init().unwrap(); }\n-    #[cfg(not(cargobuild))]\n-    fn log_init() {}\n-    log_init();\n+    env_logger::init().unwrap();\n \n     let config = parse_config(env::args().collect());\n \n@@ -478,7 +469,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     };\n \n     // Debugging emscripten code doesn't make sense today\n-    let mut ignore = early_props.ignore;\n+    let mut ignore = early_props.ignore || !up_to_date(config, testpaths, &early_props);\n     if (config.mode == DebugInfoGdb || config.mode == DebugInfoLldb) &&\n         config.target.contains(\"emscripten\") {\n         ignore = true;\n@@ -494,6 +485,42 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     }\n }\n \n+fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n+    let stamp_name = format!(\"{}-H-{}-T-{}-S-{}.stamp\",\n+                             testpaths.file.file_name().unwrap()\n+                                           .to_str().unwrap(),\n+                             config.host,\n+                             config.target,\n+                             config.stage_id);\n+    config.build_base.canonicalize()\n+          .unwrap_or(config.build_base.clone())\n+          .join(stamp_name)\n+}\n+\n+fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> bool {\n+    let stamp = mtime(&stamp(config, testpaths));\n+    let mut inputs = vec![\n+        mtime(&testpaths.file),\n+        mtime(&config.rustc_path),\n+    ];\n+    for aux in props.aux.iter() {\n+        inputs.push(mtime(&testpaths.file.parent().unwrap()\n+                                         .join(\"auxiliary\")\n+                                         .join(aux)));\n+    }\n+    for lib in config.run_lib_path.read_dir().unwrap() {\n+        let lib = lib.unwrap();\n+        inputs.push(mtime(&lib.path()));\n+    }\n+    inputs.iter().any(|input| *input > stamp)\n+}\n+\n+fn mtime(path: &Path) -> FileTime {\n+    fs::metadata(path).map(|f| {\n+        FileTime::from_last_modification_time(&f)\n+    }).unwrap_or(FileTime::zero())\n+}\n+\n pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName {\n     // Convert a complete path to something like\n     //"}, {"sha": "bcec1f63bc089df560acffeb839d7ca69a2c4c85", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb57bf13fcc316ce622af70d3922ae5d811928d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6fb57bf13fcc316ce622af70d3922ae5d811928d", "patch": "@@ -80,6 +80,8 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n     }\n \n     base_cx.complete_all();\n+\n+    File::create(::stamp(&config, &testpaths)).unwrap();\n }\n \n struct TestCx<'test> {"}]}