{"sha": "2fbe9274aae88709cb7aefada157c47e4232e2eb", "node_id": "C_kwDOAAsO6NoAKDJmYmU5Mjc0YWFlODg3MDljYjdhZWZhZGExNTdjNDdlNDIzMmUyZWI", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-29T13:33:57Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-31T22:49:42Z"}, "message": "improve panic message for slice windows and chunks", "tree": {"sha": "29ddf10f28a91d21c6f8ba9a5791e681115e5e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ddf10f28a91d21c6f8ba9a5791e681115e5e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbe9274aae88709cb7aefada157c47e4232e2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe9274aae88709cb7aefada157c47e4232e2eb", "html_url": "https://github.com/rust-lang/rust/commit/2fbe9274aae88709cb7aefada157c47e4232e2eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe9274aae88709cb7aefada157c47e4232e2eb/comments", "author": null, "committer": null, "parents": [{"sha": "dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "html_url": "https://github.com/rust-lang/rust/commit/dc1d9d50fba2f6a1ccab8748a0050cde38253f60"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "6ea16bf643071120f523a21f7cf88d3710ceb639", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe9274aae88709cb7aefada157c47e4232e2eb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe9274aae88709cb7aefada157c47e4232e2eb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=2fbe9274aae88709cb7aefada157c47e4232e2eb", "patch": "@@ -805,8 +805,9 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {\n-        let size = NonZeroUsize::new(size).expect(\"size is zero\");\n+        let size = NonZeroUsize::new(size).expect(\"window size must be non-zero\");\n         Windows::new(self, size)\n     }\n \n@@ -839,8 +840,9 @@ impl<T> [T] {\n     /// [`rchunks`]: slice::rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         Chunks::new(self, chunk_size)\n     }\n \n@@ -877,8 +879,9 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: slice::rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksMut::new(self, chunk_size)\n     }\n \n@@ -914,8 +917,9 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: slice::rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -956,8 +960,9 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1037,9 +1042,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1068,9 +1074,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1108,8 +1115,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1186,9 +1194,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1223,9 +1232,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1265,8 +1275,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1297,8 +1308,9 @@ impl<T> [T] {\n     /// [`windows`]: slice::windows\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n+        assert!(N != 0, \"window size must be non-zero\");\n         ArrayWindows::new(self)\n     }\n \n@@ -1331,8 +1343,9 @@ impl<T> [T] {\n     /// [`chunks`]: slice::chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunks::new(self, chunk_size)\n     }\n \n@@ -1369,8 +1382,9 @@ impl<T> [T] {\n     /// [`chunks_mut`]: slice::chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksMut::new(self, chunk_size)\n     }\n \n@@ -1408,8 +1422,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExact::new(self, chunk_size)\n     }\n \n@@ -1451,8 +1466,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExactMut::new(self, chunk_size)\n     }\n "}]}