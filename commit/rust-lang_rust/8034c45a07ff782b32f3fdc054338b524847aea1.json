{"sha": "8034c45a07ff782b32f3fdc054338b524847aea1", "node_id": "C_kwDOAAsO6NoAKDgwMzRjNDVhMDdmZjc4MmIzMmYzZmRjMDU0MzM4YjUyNDg0N2FlYTE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-27T08:03:10Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-27T08:50:07Z"}, "message": "Support arrays of zeros in Vec's __rust_alloc_zeroed optimization", "tree": {"sha": "91492975c35dc3517f24385eb8128dbe871ee32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91492975c35dc3517f24385eb8128dbe871ee32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8034c45a07ff782b32f3fdc054338b524847aea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8034c45a07ff782b32f3fdc054338b524847aea1", "html_url": "https://github.com/rust-lang/rust/commit/8034c45a07ff782b32f3fdc054338b524847aea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8034c45a07ff782b32f3fdc054338b524847aea1/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "html_url": "https://github.com/rust-lang/rust/commit/185a3f0a112fd6439247cf15452d0c5dfb3c8c92"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "868f2f1e3231b089fd906854216871a7feb63a84", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8034c45a07ff782b32f3fdc054338b524847aea1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8034c45a07ff782b32f3fdc054338b524847aea1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=8034c45a07ff782b32f3fdc054338b524847aea1", "patch": "@@ -2,7 +2,7 @@ use crate::boxed::Box;\n \n #[rustc_specialization_trait]\n pub(super) unsafe trait IsZero {\n-    /// Whether this value is zero\n+    /// Whether this value's representation is all zeros\n     fn is_zero(&self) -> bool;\n }\n \n@@ -49,6 +49,13 @@ unsafe impl<T> IsZero for *mut T {\n     }\n }\n \n+unsafe impl<T: IsZero, const N: usize> IsZero for [T; N] {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        self.iter().all(IsZero::is_zero)\n+    }\n+}\n+\n // `Option<&T>` and `Option<Box<T>>` are guaranteed to represent `None` as null.\n // For fat pointers, the bytes that would be the pointer metadata in the `Some`\n // variant are padding in the `None` variant, so ignoring them and"}]}