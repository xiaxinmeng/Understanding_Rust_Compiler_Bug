{"sha": "8ccda2438ea093291501d59ef24ddd8936e1dc16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2RhMjQzOGVhMDkzMjkxNTAxZDU5ZWYyNGRkZDg5MzZlMWRjMTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-23T08:25:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-23T08:25:30Z"}, "message": "Rollup merge of #58609 - gabi-250:mutable-refs, r=oli-obk\n\nAllow Self::Module to be mutated.\n\nThis only changes `&Self::Module` to `&mut Self::Module` in a couple of places.\n\n`codegen_allocator` and `write_metadata` from `ExtraBackendMethods` mutate the underlying LLVM module. As such, it makes sense for these two functions to receive a mutable reference to the module (as opposed to an immutable one).\n\nI am trying to implement `codegen_allocator` for my backend, and I need to be able to mutate `Self::Module`:\nhttps://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src/librustc_codegen_ssa/traits/backend.rs#L41\nModifying the module in `codegen_allocator`/`write_metadata` is not a problem for the LLVM backend, because [ModuleLlvm](https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/lib.rs#L357) contains a raw pointer to the underlying LLVM module, so it can easily be mutated through FFI calls.\n\nI am trying to avoid interior mutability and `unsafe` as much as I can. What do you think? Does this change make sense, or is there a reason why this should stay the way it is?", "tree": {"sha": "94a336216a4151d4868fcb23dc9cd5f423da0f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a336216a4151d4868fcb23dc9cd5f423da0f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccda2438ea093291501d59ef24ddd8936e1dc16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJccQN7CRBK7hj4Ov3rIwAAdHIIADX1aRxy78hV7sxPHzrvYf4J\nB3Qp9kcCdt5toOmYHL/gScLpkUVmkZmsqeaHZaTLk7EExFLbzWy4sjMQWukIe3m6\nWFRAde0lTJ77aVxKsVRaxMIgwUYin9HYPf5KRlS+UMYz/u90lx874YpO9WhkMBFF\nEEjLI9tRQmG7+Q+yq8VwH5N6R53SZxb468T6+nMS7dQaoflY30g+hIgOzy6kHkAK\nrLyP0uAUHOI4+amFHZ7bZ6VYe6oeQJuhodwKm1T4VzXnap1KYQmYbAaGYXn23k8l\nFMa9o8ljjsmXSsMylU6sGR6BE9N4PFhDMCSE9O6eYuYqXpDkJ1l8TSKEta1hwas=\n=X0J1\n-----END PGP SIGNATURE-----\n", "payload": "tree 94a336216a4151d4868fcb23dc9cd5f423da0f97\nparent 73e661a0a5acf98ae932cceca00212578aeeea33\nparent e5d1fa58f2dd5e86dd91f370313a4be85a39917a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550910330 +0100\ncommitter GitHub <noreply@github.com> 1550910330 +0100\n\nRollup merge of #58609 - gabi-250:mutable-refs, r=oli-obk\n\nAllow Self::Module to be mutated.\n\nThis only changes `&Self::Module` to `&mut Self::Module` in a couple of places.\n\n`codegen_allocator` and `write_metadata` from `ExtraBackendMethods` mutate the underlying LLVM module. As such, it makes sense for these two functions to receive a mutable reference to the module (as opposed to an immutable one).\n\nI am trying to implement `codegen_allocator` for my backend, and I need to be able to mutate `Self::Module`:\nhttps://github.com/rust-lang/rust/blob/f66e4697ae286985ddefc53c3a047614568458bb/src/librustc_codegen_ssa/traits/backend.rs#L41\nModifying the module in `codegen_allocator`/`write_metadata` is not a problem for the LLVM backend, because [ModuleLlvm](https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/lib.rs#L357) contains a raw pointer to the underlying LLVM module, so it can easily be mutated through FFI calls.\n\nI am trying to avoid interior mutability and `unsafe` as much as I can. What do you think? Does this change make sense, or is there a reason why this should stay the way it is?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccda2438ea093291501d59ef24ddd8936e1dc16", "html_url": "https://github.com/rust-lang/rust/commit/8ccda2438ea093291501d59ef24ddd8936e1dc16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccda2438ea093291501d59ef24ddd8936e1dc16/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e661a0a5acf98ae932cceca00212578aeeea33", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e661a0a5acf98ae932cceca00212578aeeea33", "html_url": "https://github.com/rust-lang/rust/commit/73e661a0a5acf98ae932cceca00212578aeeea33"}, {"sha": "e5d1fa58f2dd5e86dd91f370313a4be85a39917a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d1fa58f2dd5e86dd91f370313a4be85a39917a", "html_url": "https://github.com/rust-lang/rust/commit/e5d1fa58f2dd5e86dd91f370313a4be85a39917a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "9787b07ef8cc2cbca9b681dccaa6ed79464a16aa", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=8ccda2438ea093291501d59ef24ddd8936e1dc16", "patch": "@@ -9,7 +9,7 @@ use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n     let llcx = &*mods.llcx;\n     let llmod = mods.llmod();\n     let usize = match &tcx.sess.target.target.target_pointer_width[..] {"}, {"sha": "7b2e8ec3df6bb42ac96df64f23d7cd4b2945ce7f", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=8ccda2438ea093291501d59ef24ddd8936e1dc16", "patch": "@@ -46,7 +46,7 @@ use crate::value::Value;\n \n pub fn write_metadata<'a, 'gcx>(\n     tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-    llvm_module: &ModuleLlvm\n+    llvm_module: &mut ModuleLlvm\n ) -> EncodedMetadata {\n     use std::io::Write;\n     use flate2::Compression;"}, {"sha": "9a75b8495ded35a13c8378065c9a66a6464be02c", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=8ccda2438ea093291501d59ef24ddd8936e1dc16", "patch": "@@ -120,11 +120,11 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     fn write_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n-        metadata: &ModuleLlvm\n+        metadata: &mut ModuleLlvm\n     ) -> EncodedMetadata {\n         base::write_metadata(tcx, metadata)\n     }\n-    fn codegen_allocator(&self, tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind) {\n+    fn codegen_allocator(&self, tcx: TyCtxt, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n     fn compile_codegen_unit<'a, 'tcx: 'a>("}, {"sha": "92f5c39fe5a181fba9bfa87f3bdfacfe0005747a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=8ccda2438ea093291501d59ef24ddd8936e1dc16", "patch": "@@ -551,9 +551,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                                                             &[\"crate\"],\n                                                             Some(\"metadata\")).as_str()\n                                                                              .to_string();\n-    let metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n+    let mut metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n     let metadata = time(tcx.sess, \"write metadata\", || {\n-        backend.write_metadata(tcx, &metadata_llvm_module)\n+        backend.write_metadata(tcx, &mut metadata_llvm_module)\n     });\n     tcx.sess.profiler(|p| p.end_activity(ProfileCategory::Codegen));\n \n@@ -636,9 +636,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                                                        &[\"crate\"],\n                                                        Some(\"allocator\")).as_str()\n                                                                          .to_string();\n-        let modules = backend.new_metadata(tcx, &llmod_id);\n+        let mut modules = backend.new_metadata(tcx, &llmod_id);\n         time(tcx.sess, \"write allocator module\", || {\n-            backend.codegen_allocator(tcx, &modules, kind)\n+            backend.codegen_allocator(tcx, &mut modules, kind)\n         });\n \n         Some(ModuleCodegen {"}, {"sha": "6f92024ea8af3fd8a8b275c66873b619742c99ea", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccda2438ea093291501d59ef24ddd8936e1dc16/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=8ccda2438ea093291501d59ef24ddd8936e1dc16", "patch": "@@ -36,9 +36,9 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n     fn write_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n-        metadata: &Self::Module,\n+        metadata: &mut Self::Module,\n     ) -> EncodedMetadata;\n-    fn codegen_allocator(&self, tcx: TyCtxt, mods: &Self::Module, kind: AllocatorKind);\n+    fn codegen_allocator(&self, tcx: TyCtxt, mods: &mut Self::Module, kind: AllocatorKind);\n     fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}