{"sha": "0d8ace823b33489284cc60aaab3945d764ab3394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOGFjZTgyM2IzMzQ4OTI4NGNjNjBhYWFiMzk0NWQ3NjRhYjMzOTQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-29T19:19:22Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-29T19:19:22Z"}, "message": "Removed useless cmp::{min, max} reexports from the integer modules", "tree": {"sha": "3d4bae10d8c7bbd0cbe726db25c542675c546d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4bae10d8c7bbd0cbe726db25c542675c546d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8ace823b33489284cc60aaab3945d764ab3394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8ace823b33489284cc60aaab3945d764ab3394", "html_url": "https://github.com/rust-lang/rust/commit/0d8ace823b33489284cc60aaab3945d764ab3394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8ace823b33489284cc60aaab3945d764ab3394/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f9eb3b1ef30ea07ae16f9445a8ab0d97269917", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f9eb3b1ef30ea07ae16f9445a8ab0d97269917", "html_url": "https://github.com/rust-lang/rust/commit/90f9eb3b1ef30ea07ae16f9445a8ab0d97269917"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "2a0840a0ef8ad380b5747144b8605b43b88adc80", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0d8ace823b33489284cc60aaab3945d764ab3394", "patch": "@@ -10,32 +10,31 @@\n \n \n use back::{link};\n-use std::libc::c_uint;\n-use lib::llvm::{ValueRef, CallConv, StructRetAttribute};\n use lib::llvm::llvm;\n+use lib::llvm::{ValueRef, CallConv, StructRetAttribute};\n use lib;\n-use middle::trans::machine;\n-use middle::trans::base;\n use middle::trans::base::push_ctxt;\n-use middle::trans::cabi;\n+use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::builder::noname;\n+use middle::trans::cabi;\n use middle::trans::common::*;\n+use middle::trans::machine;\n+use middle::trans::type_::Type;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n-use middle::ty;\n use middle::ty::FnSig;\n-\n-use std::uint;\n+use middle::ty;\n+use std::cmp;\n+use std::libc::c_uint;\n use std::vec;\n+use syntax::abi::{Cdecl, Aapcs, C, AbiSet, Win64};\n+use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System};\n use syntax::codemap::Span;\n+use syntax::parse::token::special_idents;\n use syntax::{ast};\n use syntax::{attr, ast_map};\n-use syntax::parse::token::special_idents;\n-use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System,\n-                  Cdecl, Aapcs, C, AbiSet, Win64};\n use util::ppaux::{Repr, UserString};\n-use middle::trans::type_::Type;\n \n ///////////////////////////////////////////////////////////////////////////\n // Type definitions\n@@ -332,7 +331,7 @@ pub fn trans_native_call(bcx: @mut Block,\n             let llrust_size = machine::llsize_of_store(ccx, llrust_ret_ty);\n             let llforeign_align = machine::llalign_of_min(ccx, llforeign_ret_ty);\n             let llrust_align = machine::llalign_of_min(ccx, llrust_ret_ty);\n-            let llalign = uint::min(llforeign_align, llrust_align);\n+            let llalign = cmp::min(llforeign_align, llrust_align);\n             debug!(\"llrust_size={:?}\", llrust_size);\n             base::call_memcpy(bcx, llretptr_i8, llscratch_i8,\n                               C_uint(ccx, llrust_size), llalign as u32);"}, {"sha": "c74a9bc90517655dc46e002d0a16f6f72d360c1b", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=0d8ace823b33489284cc60aaab3945d764ab3394", "patch": "@@ -901,7 +901,7 @@ impl<'self> Formatter<'self> {\n                 // case where the maximum length will matter.\n                 let char_len = s.char_len();\n                 if char_len >= max {\n-                    let nchars = ::uint::min(max, char_len);\n+                    let nchars = ::cmp::min(max, char_len);\n                     self.buf.write(s.slice_chars(0, nchars).as_bytes());\n                     return\n                 }"}, {"sha": "07893087628c1f1bd04428dad12f431bba6e8b89", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=0d8ace823b33489284cc60aaab3945d764ab3394", "patch": "@@ -25,8 +25,6 @@ use num::{CheckedDiv, Zero, One, strconv};\n use prelude::*;\n use str;\n \n-pub use cmp::{min, max};\n-\n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n "}, {"sha": "31f1b75e02e82f2151f07636c209e38bfa3d2246", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=0d8ace823b33489284cc60aaab3945d764ab3394", "patch": "@@ -26,8 +26,6 @@ use num::{CheckedDiv, Zero, One, strconv};\n use prelude::*;\n use str;\n \n-pub use cmp::{min, max};\n-\n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n "}, {"sha": "3f169b511df9a665a26b89c47494483d0c377bf3", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8ace823b33489284cc60aaab3945d764ab3394/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=0d8ace823b33489284cc60aaab3945d764ab3394", "patch": "@@ -17,7 +17,6 @@ use io::stdio::StdWriter;\n use io::buffered::LineBufferedWriter;\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n-use u32;\n use vec::ImmutableVector;\n #[cfg(test)] use cast::transmute;\n \n@@ -46,7 +45,7 @@ fn parse_log_level(level: &str) -> Option<u32> {\n             let position = log_level_names.iter().position(|&name| name == level);\n             match position {\n                 Some(position) => {\n-                    log_level = Some(u32::min(MAX_LOG_LEVEL, (position + 1) as u32))\n+                    log_level = Some(::cmp::min(MAX_LOG_LEVEL, (position + 1) as u32))\n                 },\n                 _ => {\n                     log_level = None;"}]}