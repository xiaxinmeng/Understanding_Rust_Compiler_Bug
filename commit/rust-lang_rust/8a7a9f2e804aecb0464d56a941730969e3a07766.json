{"sha": "8a7a9f2e804aecb0464d56a941730969e3a07766", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhN2E5ZjJlODA0YWVjYjA0NjRkNTZhOTQxNzMwOTY5ZTNhMDc3NjY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:36Z"}, "message": "Rollup merge of #66534 - immunant:multiple_global_decls, r=eddyb\n\nAllow global references via ForeignItem and Item for the same symbol name during LLVM codegen\n\nCombining CGUs can result in code that references a static variable through both\nan Item and a ForeignItem with the same name. We don't care that the global was\nalready created by a ForeignItem reference when we see the Item reference, as\nlong as the LLVM types of the ForeignItem and Item match.\n\nFixes #66464", "tree": {"sha": "52177197933a3034225de789f0e55bc4205c9786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52177197933a3034225de789f0e55bc4205c9786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7a9f2e804aecb0464d56a941730969e3a07766", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqECRBK7hj4Ov3rIwAAdHIIAGu2pI4mnoVp8V1FlF/6kkiy\nyL6Y3vJus/BtOuf27twl/P9P4+Vq0HBu1jwUdYgnTWHCA0vitcmdN0zQ6K6yykEh\npS2VgCYkdYJ0vLkRahWJf9bSS2DINtj6ooDY1sf7mW3pZ/fHUo9ER4Jcp/kX1rL/\nikrrL5CjYvNsXiDoDxfsAi7t1n5bNIx4WLAYIKZpifH206LzVjrxvYZHi8Zxhjll\n1L9vQOKLr+MwyFYq376H/SStVx0MfdEV8IQJixceTp2Wt3s73YS8eTyYVq73/VC7\nqXyxeOHv2XGsU+sNoGgaNZhYl9f0/adnqSYvYsrZb21oRNhhNmkVTkE9MBp1jv4=\n=261k\n-----END PGP SIGNATURE-----\n", "payload": "tree 52177197933a3034225de789f0e55bc4205c9786\nparent 5139b538367eb094d48fd150cd2d719a2885b56c\nparent 32168a3df7f88112f7a6c0d4595815dd952880fd\nauthor Tyler Mandry <tmandry@gmail.com> 1574890116 -0600\ncommitter GitHub <noreply@github.com> 1574890116 -0600\n\nRollup merge of #66534 - immunant:multiple_global_decls, r=eddyb\n\nAllow global references via ForeignItem and Item for the same symbol name during LLVM codegen\n\nCombining CGUs can result in code that references a static variable through both\nan Item and a ForeignItem with the same name. We don't care that the global was\nalready created by a ForeignItem reference when we see the Item reference, as\nlong as the LLVM types of the ForeignItem and Item match.\n\nFixes #66464\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7a9f2e804aecb0464d56a941730969e3a07766", "html_url": "https://github.com/rust-lang/rust/commit/8a7a9f2e804aecb0464d56a941730969e3a07766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7a9f2e804aecb0464d56a941730969e3a07766/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5139b538367eb094d48fd150cd2d719a2885b56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5139b538367eb094d48fd150cd2d719a2885b56c", "html_url": "https://github.com/rust-lang/rust/commit/5139b538367eb094d48fd150cd2d719a2885b56c"}, {"sha": "32168a3df7f88112f7a6c0d4595815dd952880fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/32168a3df7f88112f7a6c0d4595815dd952880fd", "html_url": "https://github.com/rust-lang/rust/commit/32168a3df7f88112f7a6c0d4595815dd952880fd"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "541b3d9476b3372657588df035fdf14025e00506", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a7a9f2e804aecb0464d56a941730969e3a07766/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7a9f2e804aecb0464d56a941730969e3a07766/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=8a7a9f2e804aecb0464d56a941730969e3a07766", "patch": "@@ -233,11 +233,13 @@ impl CodegenCx<'ll, 'tcx> {\n                     ref attrs, span, kind: hir::ItemKind::Static(..), ..\n                 }) => {\n                     let sym_str = sym.as_str();\n-                    if self.get_declared_value(&sym_str).is_some() {\n-                        span_bug!(span, \"Conflicting symbol names for static?\");\n+                    if let Some(g) = self.get_declared_value(&sym_str) {\n+                        if self.val_ty(g) != self.type_ptr_to(llty) {\n+                            span_bug!(span, \"Conflicting types for static\");\n+                        }\n                     }\n \n-                    let g = self.define_global(&sym_str, llty).unwrap();\n+                    let g = self.declare_global(&sym_str, llty);\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}]}