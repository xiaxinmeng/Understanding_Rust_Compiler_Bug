{"sha": "6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTQ3OWNkMDU4YWE1NGE5ZjE2MTA4NWM3ZmY5YWMxZjEyZDhkZjM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-07T16:21:39Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Finally cretae the mod completion module", "tree": {"sha": "1fc72b28fba9df437edb514ec6c7c31af1d7406a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc72b28fba9df437edb514ec6c7c31af1d7406a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "html_url": "https://github.com/rust-lang/rust/commit/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33179a0ae1ba9a908cc34a4cf87599ed779b9886", "url": "https://api.github.com/repos/rust-lang/rust/commits/33179a0ae1ba9a908cc34a4cf87599ed779b9886", "html_url": "https://github.com/rust-lang/rust/commit/33179a0ae1ba9a908cc34a4cf87599ed779b9886"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "321007d3397fb2e3fad2fbf82983487759021e2f", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "patch": "@@ -199,7 +199,7 @@ fn possible_sudmobule_names(module_files: &FileSet, module_file: FileId) -> Vec<\n         })\n         .filter_map(|file_name_and_extension| {\n             match file_name_and_extension {\n-                // TODO kb wrong resolution for nested non-file modules (mod tests {mod <|>)\n+                // TODO kb wrong resolution for nested non-file modules (mod tests { mod <|> })\n                 // TODO kb in src/bin when a module is included into another,\n                 // the included file gets \"moved\" into a directory below and now cannot add any other modules\n                 (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) | (\"main\", Some(\"rs\")) => None,"}, {"sha": "daea2aa9585b187d8b3c5b97b4d11b7db06ae583", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "patch": "@@ -19,6 +19,7 @@ mod complete_unqualified_path;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n mod complete_trait_impl;\n+mod complete_mod;\n \n use ide_db::RootDatabase;\n \n@@ -124,6 +125,7 @@ pub(crate) fn completions(\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n+    complete_mod::complete_mod(&mut acc, &ctx);\n \n     Some(acc)\n }"}, {"sha": "4c1e79603400e5a4e343fd307f589eaac18ded0b", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "patch": "@@ -0,0 +1,39 @@\n+//! Completes mod declarations.\n+\n+use base_db::FileLoader;\n+use hir::ModuleSource;\n+\n+use super::{completion_context::CompletionContext, completion_item::Completions};\n+\n+/// Complete mod declaration, i.e. `mod <|> ;`\n+pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) {\n+    let module_names_for_import = ctx\n+        .sema\n+        // TODO kb this is wrong, since we need not the file module\n+        .to_module_def(ctx.position.file_id)\n+        .and_then(|current_module| {\n+            dbg!(current_module.name(ctx.db));\n+            dbg!(current_module.definition_source(ctx.db));\n+            dbg!(current_module.declaration_source(ctx.db));\n+            let mut zz = Vec::new();\n+            let mut vv = Some(current_module);\n+            while let Some(ModuleSource::Module(_)) =\n+                vv.map(|vv| vv.definition_source(ctx.db).value)\n+            {\n+                zz.push(current_module.name(ctx.db));\n+                vv = current_module.parent(ctx.db);\n+            }\n+            dbg!(zz);\n+            let definition_source = current_module.definition_source(ctx.db);\n+            // TODO kb filter out declarations in possible_sudmobule_names\n+            // let declaration_source = current_module.declaration_source(ctx.db);\n+            let module_definition_source_file = definition_source.file_id.original_file(ctx.db);\n+            let mod_declaration_candidates =\n+                ctx.db.possible_sudmobule_names(module_definition_source_file);\n+            dbg!(mod_declaration_candidates);\n+            // TODO kb exlude existing children from the candidates\n+            let existing_children = current_module.children(ctx.db).collect::<Vec<_>>();\n+            None::<Vec<String>>\n+        })\n+        .unwrap_or_default();\n+}"}, {"sha": "31886942a60495419736ad9ed6c03775f54c6ff7", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba479cd058aa54a9f161085c7ff9ac1f12d8df3/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6ba479cd058aa54a9f161085c7ff9ac1f12d8df3", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use base_db::{FileLoader, SourceDatabase};\n-use hir::{Semantics, SemanticsScope, Type};\n+use hir::{ModuleSource, Semantics, SemanticsScope, Type};\n use ide_db::RootDatabase;\n use syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n@@ -112,22 +112,6 @@ impl<'a> CompletionContext<'a> {\n         };\n         let fake_ident_token =\n             file_with_fake_ident.syntax().token_at_offset(position.offset).right_biased().unwrap();\n-        {\n-            let module_names_for_import = sema\n-                .to_module_def(position.file_id)\n-                .and_then(|current_module| {\n-                    let definition_source = current_module.definition_source(db);\n-                    let module_definition_source_file = definition_source.file_id.original_file(db);\n-                    let mod_declaration_candidates =\n-                        db.possible_sudmobule_names(module_definition_source_file);\n-                    dbg!(mod_declaration_candidates);\n-                    // TODO kb exlude existing children from the candidates\n-                    let existing_children = current_module.children(db).collect::<Vec<_>>();\n-                    None::<Vec<String>>\n-                })\n-                .unwrap_or_default();\n-        };\n-\n         let krate = sema.to_module_def(position.file_id).map(|m| m.krate());\n         let original_token =\n             original_file.syntax().token_at_offset(position.offset).left_biased()?;"}]}