{"sha": "3a3934244c53cfe3024431cec934b2e2901d50d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzkzNDI0NGM1M2NmZTMwMjQ0MzFjZWM5MzRiMmUyOTAxZDUwZDA=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-08T23:45:14Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-09T13:07:22Z"}, "message": "Some work on std::ascii: Marked unsafe function unsafe, added moving implementations", "tree": {"sha": "d6982996f9bf6dbba425fd38fa3e8fdd1ec3c65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6982996f9bf6dbba425fd38fa3e8fdd1ec3c65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a3934244c53cfe3024431cec934b2e2901d50d0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3934244c53cfe3024431cec934b2e2901d50d0", "html_url": "https://github.com/rust-lang/rust/commit/3a3934244c53cfe3024431cec934b2e2901d50d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a3934244c53cfe3024431cec934b2e2901d50d0/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd49f6dce11033496a87d08d66114a86b2d85d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd49f6dce11033496a87d08d66114a86b2d85d59", "html_url": "https://github.com/rust-lang/rust/commit/fd49f6dce11033496a87d08d66114a86b2d85d59"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "ec2d7566177564e86894e67988693767ea242626", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 77, "deletions": 20, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/3a3934244c53cfe3024431cec934b2e2901d50d0/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3934244c53cfe3024431cec934b2e2901d50d0/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=3a3934244c53cfe3024431cec934b2e2901d50d0", "patch": "@@ -16,9 +16,8 @@ use str::StrSlice;\n use str::OwnedStr;\n use container::Container;\n use cast;\n-use ptr;\n use iter::Iterator;\n-use vec::{CopyableVector, ImmutableVector};\n+use vec::{CopyableVector, ImmutableVector, MutableVector};\n use to_bytes::IterBytes;\n use option::{Some, None};\n \n@@ -61,7 +60,7 @@ impl Ascii {\n impl ToStr for Ascii {\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        // self.chr is allways a valid utf8 byte, no need for the check\n+        // self.chr is always a valid utf8 byte, no need for the check\n         unsafe { str::raw::from_byte(self.chr) }\n     }\n }\n@@ -253,16 +252,29 @@ impl ToBytesConsume for ~[Ascii] {\n     }\n }\n \n-/// Extension methods for ASCII-subset only operations on strings\n-pub trait StrAsciiExt {\n+/// Extension methods for ASCII-subset only operations on owned strings\n+pub trait OwnedStrAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_upper(&self) -> ~str;\n+    fn into_ascii_upper(self) -> ~str;\n \n     /// Convert the string to ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n+    fn into_ascii_lower(self) -> ~str;\n+}\n+\n+/// Extension methods for ASCII-subset only operations on string slices\n+pub trait StrAsciiExt {\n+    /// Makes a copy of the string in ASCII upper case:\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    fn to_ascii_upper(&self) -> ~str;\n+\n+    /// Makes a copy of the string in ASCII lower case:\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n     fn to_ascii_lower(&self) -> ~str;\n \n     /// Check that two strings are an ASCII case-insensitive match.\n@@ -274,12 +286,12 @@ pub trait StrAsciiExt {\n impl<'self> StrAsciiExt for &'self str {\n     #[inline]\n     fn to_ascii_upper(&self) -> ~str {\n-        map_bytes(*self, ASCII_UPPER_MAP)\n+        unsafe { str_copy_map_bytes(*self, ASCII_UPPER_MAP) }\n     }\n \n     #[inline]\n     fn to_ascii_lower(&self) -> ~str {\n-        map_bytes(*self, ASCII_LOWER_MAP)\n+        unsafe { str_copy_map_bytes(*self, ASCII_LOWER_MAP) }\n     }\n \n     #[inline]\n@@ -289,20 +301,34 @@ impl<'self> StrAsciiExt for &'self str {\n     }\n }\n \n+impl OwnedStrAsciiExt for ~str {\n+    #[inline]\n+    fn into_ascii_upper(self) -> ~str {\n+        unsafe { str_map_bytes(self, ASCII_UPPER_MAP) }\n+    }\n+\n+    #[inline]\n+    fn into_ascii_lower(self) -> ~str {\n+        unsafe { str_map_bytes(self, ASCII_LOWER_MAP) }\n+    }\n+}\n+\n #[inline]\n-fn map_bytes(string: &str, map: &'static [u8]) -> ~str {\n-    let len = string.len();\n-    let mut result = str::with_capacity(len);\n-    unsafe {\n-        do result.as_mut_buf |mut buf, _| {\n-            for c in string.as_bytes().iter() {\n-                *buf = map[*c];\n-                buf = ptr::mut_offset(buf, 1)\n-            }\n-        }\n-        str::raw::set_len(&mut result, len);\n+unsafe fn str_map_bytes(string: ~str, map: &'static [u8]) -> ~str {\n+    let mut bytes = string.into_bytes();\n+\n+    for b in bytes.mut_iter() {\n+        *b = map[*b];\n     }\n-    result\n+\n+    str::raw::from_utf8_owned(bytes)\n+}\n+\n+#[inline]\n+unsafe fn str_copy_map_bytes(string: &str, map: &'static [u8]) -> ~str {\n+    let bytes = string.byte_iter().map(|b| map[b]).to_owned_vec();\n+\n+    str::raw::from_utf8_owned(bytes)\n }\n \n static ASCII_LOWER_MAP: &'static [u8] = &[\n@@ -494,6 +520,37 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_into_ascii_upper() {\n+        assert_eq!((~\"url()URL()uRl()\u00fcrl\").into_ascii_upper(), ~\"URL()URL()URL()\u00fcRL\");\n+        assert_eq!((~\"h\u0131\u212a\u00df\").into_ascii_upper(), ~\"H\u0131\u212a\u00df\");\n+\n+        let mut i = 0;\n+        while i <= 500 {\n+            let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n+                        else { i };\n+            assert_eq!(from_char(from_u32(i).unwrap()).into_ascii_upper(),\n+                       from_char(from_u32(upper).unwrap()))\n+            i += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_into_ascii_lower() {\n+        assert_eq!((~\"url()URL()uRl()\u00dcrl\").into_ascii_lower(), ~\"url()url()url()\u00dcrl\");\n+        // Dotted capital I, Kelvin sign, Sharp S.\n+        assert_eq!((~\"H\u0130\u212a\u00df\").into_ascii_lower(), ~\"h\u0130\u212a\u00df\");\n+\n+        let mut i = 0;\n+        while i <= 500 {\n+            let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n+                        else { i };\n+            assert_eq!(from_char(from_u32(i).unwrap()).into_ascii_lower(),\n+                       from_char(from_u32(lower).unwrap()))\n+            i += 1;\n+        }\n+    }\n+\n     #[test]\n     fn test_eq_ignore_ascii_case() {\n         assert!(\"url()URL()uRl()\u00dcrl\".eq_ignore_ascii_case(\"url()url()url()\u00dcrl\"));"}]}