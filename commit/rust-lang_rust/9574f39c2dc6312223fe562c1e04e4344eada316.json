{"sha": "9574f39c2dc6312223fe562c1e04e4344eada316", "node_id": "C_kwDOAAsO6NoAKDk1NzRmMzljMmRjNjMxMjIyM2ZlNTYyYzFlMDRlNDM0NGVhZGEzMTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T20:49:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T20:49:11Z"}, "message": "Use param's real type in try_eval_lit_or_param", "tree": {"sha": "815944ff0acab660839656ecc8a04f2b2327977e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815944ff0acab660839656ecc8a04f2b2327977e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9574f39c2dc6312223fe562c1e04e4344eada316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9574f39c2dc6312223fe562c1e04e4344eada316", "html_url": "https://github.com/rust-lang/rust/commit/9574f39c2dc6312223fe562c1e04e4344eada316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9574f39c2dc6312223fe562c1e04e4344eada316/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "42101f6b93152a446030f803285b5c29f101f38d", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -135,6 +135,9 @@ impl<'tcx> Const<'tcx> {\n                 _,\n                 &hir::Path { res: Res::Def(DefKind::ConstParam, def_id), .. },\n             )) => {\n+                // Use the type from the param's definition, since we can resolve it,\n+                // not the expected parameter type from WithOptConstParam.\n+                let param_ty = tcx.type_of(def_id).subst_identity();\n                 match tcx.named_bound_var(expr.hir_id) {\n                     Some(rbv::ResolvedArg::EarlyBound(_)) => {\n                         // Find the name and index of the const parameter by indexing the generics of\n@@ -143,14 +146,14 @@ impl<'tcx> Const<'tcx> {\n                         let generics = tcx.generics_of(item_def_id);\n                         let index = generics.param_def_id_to_index[&def_id];\n                         let name = tcx.item_name(def_id);\n-                        Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n+                        Some(tcx.mk_const(ty::ParamConst::new(index, name), param_ty))\n                     }\n                     Some(rbv::ResolvedArg::LateBound(debruijn, index, _)) => Some(tcx.mk_const(\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n-                        ty,\n+                        param_ty,\n                     )),\n                     Some(rbv::ResolvedArg::Error(guar)) => {\n-                        Some(tcx.const_error_with_guaranteed(ty, guar))\n+                        Some(tcx.const_error_with_guaranteed(param_ty, guar))\n                     }\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }"}, {"sha": "fcfb60b26030f4d5696d8bce23aa16d543577d3e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -99,10 +99,10 @@ pub fn translate_substs<'tcx>(\n             }\n \n             fulfill_implication(infcx, param_env, source_trait_ref, target_impl).unwrap_or_else(\n-                |_| {\n+                |()| {\n                     bug!(\n-                        \"When translating substitutions for specialization, the expected \\\n-                         specialization failed to hold\"\n+                        \"When translating substitutions from {source_impl:?} to {target_impl:?}, \\\n+                        the expected specialization failed to hold\"\n                     )\n                 },\n             )"}, {"sha": "daa13277be0a08a32d3237ad781733a36a10f197", "filename": "tests/ui/const-generics/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -1,5 +1,6 @@\n fn foo<const N: usize>() -> [u8; N] {\n     bar::<N>() //~ ERROR mismatched types\n+    //~^ ERROR the constant `N` is not of type `u8`\n }\n \n fn bar<const N: u8>() -> [u8; N] {}"}, {"sha": "6d8955e411ec39eaf29df0ca33d8c0b8355baf82", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -1,23 +1,35 @@\n+error: the constant `N` is not of type `u8`\n+  --> $DIR/type_mismatch.rs:2:5\n+   |\n+LL |     bar::<N>()\n+   |     ^^^^^^^^\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/type_mismatch.rs:6:8\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |        ^^^^^^^^^^^ required by this bound in `bar`\n+\n error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:2:11\n    |\n LL |     bar::<N>()\n    |           ^ expected `u8`, found `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:26\n+  --> $DIR/type_mismatch.rs:6:26\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n    |    ---                   ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:31\n+  --> $DIR/type_mismatch.rs:6:31\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n    |                               ^ expected `usize`, found `u8`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "917abaed15e06e741caa2ec38b389eda67cfa18c", "filename": "tests/ui/const-generics/type_not_in_scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -6,6 +6,5 @@ impl X {\n }\n fn getn<const N: cfg_attr>() -> [u8; N] {}\n //~^ ERROR expected type, found built-in attribute `cfg_attr`\n-//~| ERROR mismatched types\n \n fn main() {}"}, {"sha": "5eb81ca0522412278bad70464974644eab16782b", "filename": "tests/ui/const-generics/type_not_in_scope.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -10,15 +10,7 @@ error[E0573]: expected type, found built-in attribute `cfg_attr`\n LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n    |                  ^^^^^^^^ not a type\n \n-error[E0308]: mismatched types\n-  --> $DIR/type_not_in_scope.rs:7:33\n-   |\n-LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n-   |    ----                         ^^^^^^^ expected `[u8; N]`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0412, E0573.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0412, E0573.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "582b480aa25be35832fb29bc8f1a0c43efc5dfbd", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_specialization)]\n+\n+// An impl that has an erroneous const substitution should not specialize one\n+// that is well-formed.\n+\n+struct S<const L: usize>;\n+\n+impl<const N: i32> Copy for S<N> {}\n+impl<const M: usize> Copy for S<M> {}\n+//~^ ERROR conflicting implementations of trait `Copy` for type `S<_>`\n+\n+fn main() {}"}, {"sha": "a3906a9a22fecee28315ba2a9aa6c11855764fff", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `Copy` for type `S<_>`\n+  --> $DIR/bad-const-wf-doesnt-specialize.rs:9:1\n+   |\n+LL | impl<const N: i32> Copy for S<N> {}\n+   | -------------------------------- first implementation here\n+LL | impl<const M: usize> Copy for S<M> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `S<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "2b966609108bf97bea60e3ed87d551c150641cf8", "filename": "tests/ui/transmutability/issue-101739-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -6,7 +6,7 @@ mod assert {\n     pub fn is_transmutable<Src, Context, const ASSUME_ALIGNMENT: bool>()\n     where\n         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>, //~ ERROR cannot find type `Dst` in this scope\n-        //~^ ERROR mismatched types\n+        //~^ the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n     {\n     }\n }"}, {"sha": "f0fa93722b89bf48960026be3df02a186bcdf4f6", "filename": "tests/ui/transmutability/issue-101739-1.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9574f39c2dc6312223fe562c1e04e4344eada316/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=9574f39c2dc6312223fe562c1e04e4344eada316", "patch": "@@ -4,13 +4,15 @@ error[E0412]: cannot find type `Dst` in this scope\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n    |         ^^^ not found in this scope\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-101739-1.rs:8:50\n+error: the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n+  --> $DIR/issue-101739-1.rs:8:14\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n-   |                                                  ^^^^^^^^^^^^^^^^ expected `Assume`, found `bool`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: required by a bound in `BikeshedIntrinsicFrom`\n+  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0412.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0412`."}]}