{"sha": "e1da67e69cec2d188ea663097a765d501582837e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZGE2N2U2OWNlYzJkMTg4ZWE2NjMwOTdhNzY1ZDUwMTU4MjgzN2U=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-26T12:26:49Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:27Z"}, "message": "Fix lint findings in librustc_mir", "tree": {"sha": "fac663e20ec7c853221e172d9a5edcf68e77919b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac663e20ec7c853221e172d9a5edcf68e77919b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1da67e69cec2d188ea663097a765d501582837e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L8ACgkQaTCGhp1Q\nZje3oQ//QvYquYMY1blJ94X90/AjoOm7G+MI03ULK8b9770ARkOzcc+eY47hZ8Mg\nET0RJ+9scuwMQ0hc6Q66dMeVPsoEG6pTUz9zzRGx0CojUZAYp2/F5uMNP5FvBrBJ\n9knltf2a2fP6m7JiWKzeHMlPIykkjpZTAaQGGL7SKFjDXcTEe+VpKYGtlb0qdCqE\nn9+zjqV8mABPweR7wS0YDYW2Mh/H1RcKLro7X6ffSgigKpKzWqsWwI1qqfhI6ARe\nr9ZhI7M0LZbVx1QdZ4dGN/z5QnGR5wzv6rfl9Pm/ZIf0Vc5Hd1A++xPdL21wD8oz\nMe6a0GVPyPh6QMXPS3QbjktrxK95qszWmyADeVT2KaHBjKEEfPVyxvro1qk8gS95\nDkdhmziw7EATPYogl+GD6hZi6OPmwrgafNP/exw/LtsiETNNj5tEMC9kTMWuEAAA\nawzgKDNJ81bM0rIVr2kuczFkI+/O+soNvw5KnBkWgdN/gV8EbFEMGqpy3LQa1TM7\nmTquCdzJmF8kEhlD2q05KGh68TKBOerHN6+sQT6FJ0RznqoHSew/SLAHVNV5at5K\nfXFN5v8zfu0RLcQCYht2ID/vo8GyhQcWuKwkJ01wZkTdyDoWi/tLkiwcmbK6rSIc\nZP7m43iWRRutoTaUK1QXKjYcdnFoFAejErhQlxysY8t9JKDG2Bo=\n=d9N1\n-----END PGP SIGNATURE-----", "payload": "tree fac663e20ec7c853221e172d9a5edcf68e77919b\nparent 654d045b6fbf6cab587437f8985fbf7d74c5134c\nauthor flip1995 <hello@philkrones.com> 1556281609 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479167 +0200\n\nFix lint findings in librustc_mir\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1da67e69cec2d188ea663097a765d501582837e", "html_url": "https://github.com/rust-lang/rust/commit/e1da67e69cec2d188ea663097a765d501582837e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1da67e69cec2d188ea663097a765d501582837e/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654d045b6fbf6cab587437f8985fbf7d74c5134c", "url": "https://api.github.com/repos/rust-lang/rust/commits/654d045b6fbf6cab587437f8985fbf7d74c5134c", "html_url": "https://github.com/rust-lang/rust/commit/654d045b6fbf6cab587437f8985fbf7d74c5134c"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "a8ebe85e2510ca651ae2663b99911ad4c8b705d3", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     Place, PlaceBase, PlaceProjection, ProjectionElem, Rvalue, Statement, StatementKind,\n     Static, StaticKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::ty::{self, DefIdTree};\n+use rustc::ty::{self, DefIdTree, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc_data_structures::fx::FxHashSet;\n@@ -918,7 +918,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         (place, drop_span): (&Place<'tcx>, Span),\n         kind: Option<WriteKind>,\n-        dropped_ty: ty::Ty<'tcx>,\n+        dropped_ty: Ty<'tcx>,\n     ) {\n         debug!(\n             \"report_borrow_conflicts_with_destructor(\\\n@@ -1483,7 +1483,7 @@ pub(super) struct IncludingDowncast(bool);\n enum StorageDeadOrDrop<'tcx> {\n     LocalStorageDead,\n     BoxedStorageDead,\n-    Destructor(ty::Ty<'tcx>),\n+    Destructor(Ty<'tcx>),\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n@@ -1787,7 +1787,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// End-user visible description of the `field_index`nth field of `ty`\n     fn describe_field_from_ty(\n         &self,\n-        ty: &ty::Ty<'_>,\n+        ty: Ty<'_>,\n         field: Field,\n         variant_index: Option<VariantIdx>\n     ) -> String {\n@@ -2258,18 +2258,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n #[derive(Debug)]\n enum AnnotatedBorrowFnSignature<'tcx> {\n     NamedFunction {\n-        arguments: Vec<(ty::Ty<'tcx>, Span)>,\n-        return_ty: ty::Ty<'tcx>,\n+        arguments: Vec<(Ty<'tcx>, Span)>,\n+        return_ty: Ty<'tcx>,\n         return_span: Span,\n     },\n     AnonymousFunction {\n-        argument_ty: ty::Ty<'tcx>,\n+        argument_ty: Ty<'tcx>,\n         argument_span: Span,\n-        return_ty: ty::Ty<'tcx>,\n+        return_ty: Ty<'tcx>,\n         return_span: Span,\n     },\n     Closure {\n-        argument_ty: ty::Ty<'tcx>,\n+        argument_ty: Ty<'tcx>,\n         argument_span: Span,\n     },\n }\n@@ -2355,7 +2355,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Return the name of the provided `Ty` (that must be a reference) with a synthesized lifetime\n     /// name where required.\n-    fn get_name_for_ty(&self, ty: ty::Ty<'tcx>, counter: usize) -> String {\n+    fn get_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n         let mut s = String::new();\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n \n@@ -2378,7 +2378,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     /// Returns the name of the provided `Ty` (that must be a reference)'s region with a\n     /// synthesized lifetime name where required.\n-    fn get_region_name_for_ty(&self, ty: ty::Ty<'tcx>, counter: usize) -> String {\n+    fn get_region_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n         let mut s = String::new();\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n "}, {"sha": "aa6c152a37ffbb2d625f516470321239fa7e4137", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -1076,7 +1076,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if !is_active(&this.dominators, borrow, context.loc) {\n-                        assert!(allow_two_phase_borrow(&tcx, borrow.kind));\n+                        assert!(allow_two_phase_borrow(tcx, borrow.kind));\n                         return Control::Continue;\n                     }\n \n@@ -1233,7 +1233,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n-                        if allow_two_phase_borrow(&self.infcx.tcx, bk) {\n+                        if allow_two_phase_borrow(self.infcx.tcx, bk) {\n                             (Deep, Reservation(wk))\n                         } else {\n                             (Deep, Write(wk))"}, {"sha": "32088ff9f61eee5c1a094d59ee3d8f8b2d0c57ef", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::{\n     Mutability, Operand, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind,\n };\n use rustc::mir::{Terminator, TerminatorKind};\n-use rustc::ty::{self, Const, DefIdTree, TyS, TyCtxt};\n+use rustc::ty::{self, Const, DefIdTree, Ty, TyS, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n@@ -613,7 +613,7 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n      })\n }\n \n-fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n+fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n \n@@ -626,7 +626,7 @@ fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n /// ```\n fn annotate_struct_field(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     field: &mir::Field,\n ) -> Option<(Span, String)> {\n     // Expect our local to be a reference to a struct of some kind."}, {"sha": "ec2555886ce1fd2a3896bfe6b6bbf5dd7a6d1b82", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, PlaceBase, Rv\n use rustc::mir::{SourceInfo, Statement, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid};\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n@@ -64,7 +64,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     /// We sometimes have `ty` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n-    fn visit_ty(&mut self, ty: ty::Ty<'tcx>, ty_context: TyContext) {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>, ty_context: TyContext) {\n         match ty_context {\n             TyContext::ReturnTy(SourceInfo { span, .. })\n             | TyContext::YieldTy(SourceInfo { span, .. })"}, {"sha": "5008627972aa649e291c6cb732ad2726ea27f943", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -321,7 +321,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n-                        if allow_two_phase_borrow(&self.tcx, bk) {\n+                        if allow_two_phase_borrow(self.tcx, bk) {\n                             (Deep, Reservation(wk))\n                         } else {\n                             (Deep, Write(wk))\n@@ -439,7 +439,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         // Reading from mere reservations of mutable-borrows is OK.\n                         if !is_active(&this.dominators, borrow, context.loc) {\n                             // If the borrow isn't active yet, reads don't invalidate it\n-                            assert!(allow_two_phase_borrow(&this.tcx, borrow.kind));\n+                            assert!(allow_two_phase_borrow(this.tcx, borrow.kind));\n                             return Control::Continue;\n                         }\n "}, {"sha": "ec3c0bf68ad87409c1854b40ddc41cab0ec4b228", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n /// allowed to be split into separate Reservation and\n /// Activation phases.\n pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(\n-    _tcx: &TyCtxt<'a, 'gcx, 'tcx>,\n+    _tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     kind: BorrowKind\n ) -> bool {\n     kind.allows_two_phase_borrow()"}, {"sha": "4b8b3232bfa3da6075cb4b8282bb9371528e248f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n \n         let span = ecx.frame().span;\n         ecx.machine.loop_detector.observe_and_analyze(\n-            &ecx.tcx,\n+            *ecx.tcx,\n             span,\n             &ecx.memory,\n             &ecx.stack[..],\n@@ -513,7 +513,7 @@ pub fn error_to_const_error<'a, 'mir, 'tcx>(\n }\n \n fn validate_and_turn_into_const<'a, 'tcx>(\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     constant: RawConst<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {"}, {"sha": "6d619793160fba312112709aa02b49f52a5ba0d3", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -285,10 +285,10 @@ pub(crate) enum IllegalMoveOriginKind<'tcx> {\n     /// implements `Drop`. Rust maintains invariant that all `Drop`\n     /// ADT's remain fully-initialized so that user-defined destructor\n     /// can safely read from all of the ADT's fields.\n-    InteriorOfTypeWithDestructor { container_ty: ty::Ty<'tcx> },\n+    InteriorOfTypeWithDestructor { container_ty: Ty<'tcx> },\n \n     /// Illegal move due to attempt to move out of a slice or array.\n-    InteriorOfSliceOrArray { ty: ty::Ty<'tcx>, is_index: bool, },\n+    InteriorOfSliceOrArray { ty: Ty<'tcx>, is_index: bool, },\n }\n \n #[derive(Debug)]"}, {"sha": "83bd3666b3d3b3d24d9fe3350879dae133391b17", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'mir, 'tcx> InfiniteLoopDetector<'a, 'mir, 'tcx>\n {\n     pub fn observe_and_analyze<'b>(\n         &mut self,\n-        tcx: &TyCtxt<'b, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'b, 'tcx, 'tcx>,\n         span: Span,\n         memory: &Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>],"}, {"sha": "4eb79cf56fcf2a764f1ba9a4d4ae3f08a7c7a708", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     pub fn read_drop_type_from_vtable(\n         &self,\n         vtable: Pointer<M::PointerTag>,\n-    ) -> EvalResult<'tcx, (ty::Instance<'tcx>, ty::Ty<'tcx>)> {\n+    ) -> EvalResult<'tcx, (ty::Instance<'tcx>, Ty<'tcx>)> {\n         // we don't care about the pointee type, we just want a pointer\n         self.memory.check_align(vtable.into(), self.tcx.data_layout.pointer_align.abi)?;\n         let drop_fn = self.memory"}, {"sha": "ea139e6e9fc582fe7c674ca62ccf124e26be12ce", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n     fn tuple_like_shim<I>(&mut self, dest: Place<'tcx>,\n                           src: Place<'tcx>, tys: I)\n-            where I: Iterator<Item = ty::Ty<'tcx>> {\n+            where I: Iterator<Item = Ty<'tcx>> {\n         let mut previous_field = None;\n         for (i, ity) in tys.enumerate() {\n             let field = Field::new(i);"}, {"sha": "1e0ba9023317133bb2b3e01f4361bcd141df898a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind,\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n-use rustc::ty::{TyCtxt, self, Instance};\n+use rustc::ty::{self, Instance, Ty, TyCtxt};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -80,10 +80,10 @@ struct ConstPropagator<'a, 'mir, 'tcx:'a+'mir> {\n }\n \n impl<'a, 'b, 'tcx> LayoutOf for ConstPropagator<'a, 'b, 'tcx> {\n-    type Ty = ty::Ty<'tcx>;\n+    type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: ty::Ty<'tcx>) -> Self::TyLayout {\n+    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n }\n@@ -476,7 +476,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n-                          ty: ty::Ty<'tcx>) -> Option<u64> {\n+                          ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())\n }\n \n@@ -555,7 +555,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n         if let StatementKind::Assign(ref place, ref rval) = statement.kind {\n-            let place_ty: ty::Ty<'tcx> = place\n+            let place_ty: Ty<'tcx> = place\n                 .ty(&self.mir.local_decls, self.tcx)\n                 .ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {"}, {"sha": "e1d41ba4fc509f151800216059972090e7dd1ae9", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, Predicate, TyCtxt, adjustment::{PointerCast}};\n+use rustc::ty::{self, Predicate, Ty, TyCtxt, adjustment::{PointerCast}};\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n@@ -81,7 +81,7 @@ pub fn is_min_const_fn(\n \n fn check_ty(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     span: Span,\n     fn_def_id: DefId,\n ) -> McfResult {"}, {"sha": "bf3cdf4abf797fbda244b9f3d7f9bd75405e2c06", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -1,5 +1,5 @@\n use rustc::session::config::BorrowckMode;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n@@ -437,7 +437,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_noncopy(\n         self,\n         move_from_span: Span,\n-        ty: ty::Ty<'_>,\n+        ty: Ty<'_>,\n         is_index: Option<bool>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -464,7 +464,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_of_drop(\n         self,\n         move_from_span: Span,\n-        container_ty: ty::Ty<'_>,\n+        container_ty: Ty<'_>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!("}, {"sha": "0e7f473a3e70d2af498488f8531661fdf6cac6bd", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da67e69cec2d188ea663097a765d501582837e/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=e1da67e69cec2d188ea663097a765d501582837e", "patch": "@@ -1,5 +1,5 @@\n use core::unicode::property::Pattern_White_Space;\n-use rustc::ty;\n+use rustc::ty::TyCtxt;\n use syntax_pos::Span;\n \n pub mod borrowck_errors;\n@@ -20,7 +20,7 @@ pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n-    tcx: ty::TyCtxt<'cx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     binding_span: Span,\n ) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();"}]}