{"sha": "9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMmViZjMxZGRiODNlZDNkZDIyYWUxNmE1MTIwZDExNzhhN2QzNzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T08:40:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T08:40:33Z"}, "message": "Rollup merge of #76868 - poliorcetics:intra-doc-std-sync, r=jyn514\n\nFinish moving to intra doc links for std::sync\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc A-intra-doc-links\n\nr? @jyn514", "tree": {"sha": "a2c9dd2799de62fdaf6eee8b59ffc25b05f2cc3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2c9dd2799de62fdaf6eee8b59ffc25b05f2cc3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaGcCCRBK7hj4Ov3rIwAAdHIIAG0HLoLsfA8yWfbd57MkJHQN\n9QwCob6kAsl6HmmeZPTNY7lYhl9m30l/NgtVI+VOf54BWxYYHSEP673F1+FIWVeH\ny4t2baS/ExEnmnLWS2hKIjGk0GKbuXcfLS38df+p6fyq++LsKAwBPttGH1LRRpFS\nmailOiCsKOOeYZio8jgQoWPCMNexPP84MDpdRW8ZnOseN8nkx0u48Y6iMrpoYNKe\nwJw7G+tI6cmldyhozKlHR67tzy2LtKRFxBg4PfHEycchw1bzUx/mZ5fHyKWG14EG\n8oNFbcq8cuFLpWwuUMT4Uqr5TWUS3tJ8a+1FYC4DKauIR3QRGvQNK9ahAzOtt3U=\n=8zeV\n-----END PGP SIGNATURE-----\n", "payload": "tree a2c9dd2799de62fdaf6eee8b59ffc25b05f2cc3f\nparent 50312426067a00233b849044874370e3b750cdf5\nparent aaddcdb0d097de1fee14be16479aeaeea41e8810\nauthor Ralf Jung <post@ralfj.de> 1600677633 +0200\ncommitter GitHub <noreply@github.com> 1600677633 +0200\n\nRollup merge of #76868 - poliorcetics:intra-doc-std-sync, r=jyn514\n\nFinish moving to intra doc links for std::sync\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc A-intra-doc-links\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "html_url": "https://github.com/rust-lang/rust/commit/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50312426067a00233b849044874370e3b750cdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/50312426067a00233b849044874370e3b750cdf5", "html_url": "https://github.com/rust-lang/rust/commit/50312426067a00233b849044874370e3b750cdf5"}, {"sha": "aaddcdb0d097de1fee14be16479aeaeea41e8810", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaddcdb0d097de1fee14be16479aeaeea41e8810", "html_url": "https://github.com/rust-lang/rust/commit/aaddcdb0d097de1fee14be16479aeaeea41e8810"}], "stats": {"total": 90, "additions": 36, "deletions": 54}, "files": [{"sha": "eab26b6c7150ca69feba282d03556a66b8868f54", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "patch": "@@ -43,11 +43,8 @@ struct BarrierState {\n     generation_id: usize,\n }\n \n-/// A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]\n-/// have rendezvoused.\n-///\n-/// [`wait`]: struct.Barrier.html#method.wait\n-/// [`Barrier`]: struct.Barrier.html\n+/// A `BarrierWaitResult` is returned by [`Barrier::wait()`] when all threads\n+/// in the [`Barrier`] have rendezvoused.\n ///\n /// # Examples\n ///\n@@ -70,10 +67,10 @@ impl fmt::Debug for Barrier {\n impl Barrier {\n     /// Creates a new barrier that can block a given number of threads.\n     ///\n-    /// A barrier will block `n`-1 threads which call [`wait`] and then wake up\n-    /// all threads at once when the `n`th thread calls [`wait`].\n+    /// A barrier will block `n`-1 threads which call [`wait()`] and then wake\n+    /// up all threads at once when the `n`th thread calls [`wait()`].\n     ///\n-    /// [`wait`]: #method.wait\n+    /// [`wait()`]: Barrier::wait\n     ///\n     /// # Examples\n     ///\n@@ -97,12 +94,9 @@ impl Barrier {\n     /// be used continuously.\n     ///\n     /// A single (arbitrary) thread will receive a [`BarrierWaitResult`] that\n-    /// returns `true` from [`is_leader`] when returning from this function, and\n-    /// all other threads will receive a result that will return `false` from\n-    /// [`is_leader`].\n-    ///\n-    /// [`BarrierWaitResult`]: struct.BarrierWaitResult.html\n-    /// [`is_leader`]: struct.BarrierWaitResult.html#method.is_leader\n+    /// returns `true` from [`BarrierWaitResult::is_leader()`] when returning\n+    /// from this function, and all other threads will receive a result that\n+    /// will return `false` from [`BarrierWaitResult::is_leader()`].\n     ///\n     /// # Examples\n     ///\n@@ -156,13 +150,12 @@ impl fmt::Debug for BarrierWaitResult {\n }\n \n impl BarrierWaitResult {\n-    /// Returns `true` if this thread from [`wait`] is the \"leader thread\".\n+    /// Returns `true` if this thread is the \"leader thread\" for the call to\n+    /// [`Barrier::wait()`].\n     ///\n     /// Only one thread will have `true` returned from their result, all other\n     /// threads will have `false` returned.\n     ///\n-    /// [`wait`]: struct.Barrier.html#method.wait\n-    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "de5ddf1daf27b5d76e1cc46d075a4658518c1421", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=9e2ebf31ddb83ed3dd22ae16a5120d1178a7d370", "patch": "@@ -95,10 +95,7 @@ use crate::thread::{self, Thread};\n \n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n-/// functionality. This type can only be constructed with the [`Once::new`]\n-/// constructor.\n-///\n-/// [`Once::new`]: struct.Once.html#method.new\n+/// functionality. This type can only be constructed with [`Once::new()`].\n ///\n /// # Examples\n ///\n@@ -126,11 +123,8 @@ unsafe impl Sync for Once {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for Once {}\n \n-/// State yielded to [`call_once_force`]\u2019s closure parameter. The state can be\n-/// used to query the poison status of the [`Once`].\n-///\n-/// [`call_once_force`]: struct.Once.html#method.call_once_force\n-/// [`Once`]: struct.Once.html\n+/// State yielded to [`Once::call_once_force()`]\u2019s closure parameter. The state\n+/// can be used to query the poison status of the [`Once`].\n #[unstable(feature = \"once_poison\", issue = \"33577\")]\n #[derive(Debug)]\n pub struct OnceState {\n@@ -140,8 +134,6 @@ pub struct OnceState {\n \n /// Initialization value for static [`Once`] values.\n ///\n-/// [`Once`]: struct.Once.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -212,7 +204,7 @@ impl Once {\n     /// happens-before relation between the closure and code executing after the\n     /// return).\n     ///\n-    /// If the given closure recursively invokes `call_once` on the same `Once`\n+    /// If the given closure recursively invokes `call_once` on the same [`Once`]\n     /// instance the exact behavior is not specified, allowed outcomes are\n     /// a panic or a deadlock.\n     ///\n@@ -249,7 +241,7 @@ impl Once {\n     ///\n     /// The closure `f` will only be executed once if this is called\n     /// concurrently amongst many threads. If that closure panics, however, then\n-    /// it will *poison* this `Once` instance, causing all future invocations of\n+    /// it will *poison* this [`Once`] instance, causing all future invocations of\n     /// `call_once` to also panic.\n     ///\n     /// This is similar to [poisoning with mutexes][poison].\n@@ -269,21 +261,21 @@ impl Once {\n         self.call_inner(false, &mut |_| f.take().unwrap()());\n     }\n \n-    /// Performs the same function as [`call_once`] except ignores poisoning.\n+    /// Performs the same function as [`call_once()`] except ignores poisoning.\n     ///\n-    /// Unlike [`call_once`], if this `Once` has been poisoned (i.e., a previous\n-    /// call to `call_once` or `call_once_force` caused a panic), calling\n-    /// `call_once_force` will still invoke the closure `f` and will _not_\n-    /// result in an immediate panic. If `f` panics, the `Once` will remain\n-    /// in a poison state. If `f` does _not_ panic, the `Once` will no\n-    /// longer be in a poison state and all future calls to `call_once` or\n-    /// `call_once_force` will be no-ops.\n+    /// Unlike [`call_once()`], if this [`Once`] has been poisoned (i.e., a previous\n+    /// call to [`call_once()`] or [`call_once_force()`] caused a panic), calling\n+    /// [`call_once_force()`] will still invoke the closure `f` and will _not_\n+    /// result in an immediate panic. If `f` panics, the [`Once`] will remain\n+    /// in a poison state. If `f` does _not_ panic, the [`Once`] will no\n+    /// longer be in a poison state and all future calls to [`call_once()`] or\n+    /// [`call_once_force()`] will be no-ops.\n     ///\n     /// The closure `f` is yielded a [`OnceState`] structure which can be used\n-    /// to query the poison status of the `Once`.\n+    /// to query the poison status of the [`Once`].\n     ///\n-    /// [`call_once`]: struct.Once.html#method.call_once\n-    /// [`OnceState`]: struct.OnceState.html\n+    /// [`call_once()`]: Once::call_once\n+    /// [`call_once_force()`]: Once::call_once_force\n     ///\n     /// # Examples\n     ///\n@@ -329,18 +321,20 @@ impl Once {\n         self.call_inner(true, &mut |p| f.take().unwrap()(p));\n     }\n \n-    /// Returns `true` if some `call_once` call has completed\n+    /// Returns `true` if some [`call_once()`] call has completed\n     /// successfully. Specifically, `is_completed` will return false in\n     /// the following situations:\n-    ///   * `call_once` was not called at all,\n-    ///   * `call_once` was called, but has not yet completed,\n-    ///   * the `Once` instance is poisoned\n+    ///   * [`call_once()`] was not called at all,\n+    ///   * [`call_once()`] was called, but has not yet completed,\n+    ///   * the [`Once`] instance is poisoned\n     ///\n-    /// This function returning `false` does not mean that `Once` has not been\n+    /// This function returning `false` does not mean that [`Once`] has not been\n     /// executed. For example, it may have been executed in the time between\n     /// when `is_completed` starts executing and when it returns, in which case\n     /// the `false` return value would be stale (but still permissible).\n     ///\n+    /// [`call_once()`]: Once::call_once\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -519,14 +513,11 @@ impl Drop for WaiterQueue<'_> {\n \n impl OnceState {\n     /// Returns `true` if the associated [`Once`] was poisoned prior to the\n-    /// invocation of the closure passed to [`call_once_force`].\n-    ///\n-    /// [`call_once_force`]: struct.Once.html#method.call_once_force\n-    /// [`Once`]: struct.Once.html\n+    /// invocation of the closure passed to [`Once::call_once_force()`].\n     ///\n     /// # Examples\n     ///\n-    /// A poisoned `Once`:\n+    /// A poisoned [`Once`]:\n     ///\n     /// ```\n     /// #![feature(once_poison)]\n@@ -547,7 +538,7 @@ impl OnceState {\n     /// });\n     /// ```\n     ///\n-    /// An unpoisoned `Once`:\n+    /// An unpoisoned [`Once`]:\n     ///\n     /// ```\n     /// #![feature(once_poison)]\n@@ -565,8 +556,6 @@ impl OnceState {\n     }\n \n     /// Poison the associated [`Once`] without explicitly panicking.\n-    ///\n-    /// [`Once`]: struct.Once.html\n     // NOTE: This is currently only exposed for the `lazy` module\n     pub(crate) fn poison(&self) {\n         self.set_state_on_drop_to.set(POISONED);"}]}