{"sha": "19efa2599c1d661816c17fcb8e52776748ddc72a", "node_id": "C_kwDOAAsO6NoAKDE5ZWZhMjU5OWMxZDY2MTgxNmMxN2ZjYjhlNTI3NzY3NDhkZGM3MmE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-18T22:48:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-18T22:48:17Z"}, "message": "Rollup merge of #103701 - WaffleLapkin:__points-at-implementation__--this-can-be-simplified, r=scottmcm\n\nSimplify some pointer method implementations\n\n- Make `pointer::with_metadata_of` const (+simplify implementation) (cc #75091)\n- Simplify implementation of various pointer methods\n\nr? ```@scottmcm```\n\n----\n\n`from_raw_parts::<T>(this, metadata(self))` was annoying me for a while and I've finally figured out how it should _actually_ be done.", "tree": {"sha": "9ae1325353d70259fdf15d524995b883ca531364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae1325353d70259fdf15d524995b883ca531364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19efa2599c1d661816c17fcb8e52776748ddc72a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeAuxCRBK7hj4Ov3rIwAAcooIAGV3itl+tm/rY9mCxbSfeoPl\nmYnKZ7LH59xTicr1a1CGA1QvgszHNyJ8dNktXj2WgCVJc8wXxWgYRgmnit0m+AtA\nKUE5jLPf3uFLb3ZP2LCzXmk8GuqP5YcYV+WExasA8+jl+6HLTmc/v0b+hgC5WUeU\nrQR+7RLg+RbB6rv6P9m5EMD3N3Sm+mrLxhgS3RC1taGuzrCeSWkqDKCzx5m5Ubld\nDDCB632TWZeCqtftBHTMkc9a607NM555nWESz+VEYHuMVaD3Moy8oQ6W7oJR9VH2\nZZ26IRQx+h/nbzkyTaq9ZwSzAyJ8C8J3eAOQU+rgeaPeXs14dsew9vnRHnOMaRE=\n=kFIy\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ae1325353d70259fdf15d524995b883ca531364\nparent e2301154e3c39f4bf606b6137d9cf5bf29a5f52e\nparent d3b51926f81cd15740d5a06172a2697bee1d6dfc\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668811697 -0500\ncommitter GitHub <noreply@github.com> 1668811697 -0500\n\nRollup merge of #103701 - WaffleLapkin:__points-at-implementation__--this-can-be-simplified, r=scottmcm\n\nSimplify some pointer method implementations\n\n- Make `pointer::with_metadata_of` const (+simplify implementation) (cc #75091)\n- Simplify implementation of various pointer methods\n\nr? ```@scottmcm```\n\n----\n\n`from_raw_parts::<T>(this, metadata(self))` was annoying me for a while and I've finally figured out how it should _actually_ be done.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19efa2599c1d661816c17fcb8e52776748ddc72a", "html_url": "https://github.com/rust-lang/rust/commit/19efa2599c1d661816c17fcb8e52776748ddc72a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19efa2599c1d661816c17fcb8e52776748ddc72a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2301154e3c39f4bf606b6137d9cf5bf29a5f52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2301154e3c39f4bf606b6137d9cf5bf29a5f52e", "html_url": "https://github.com/rust-lang/rust/commit/e2301154e3c39f4bf606b6137d9cf5bf29a5f52e"}, {"sha": "d3b51926f81cd15740d5a06172a2697bee1d6dfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b51926f81cd15740d5a06172a2697bee1d6dfc", "html_url": "https://github.com/rust-lang/rust/commit/d3b51926f81cd15740d5a06172a2697bee1d6dfc"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "7191bbb93447c53e101e8e3bb2348ead8c9b747b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=19efa2599c1d661816c17fcb8e52776748ddc72a", "patch": "@@ -156,6 +156,7 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_alignment_type)]\n #![feature(ptr_metadata)]\n+#![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]"}, {"sha": "bff270b787ece3bf0bb56afc36099ac5de434447", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=19efa2599c1d661816c17fcb8e52776748ddc72a", "patch": "@@ -79,19 +79,14 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, mut val: *const U) -> *const U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *const U\n     where\n         U: ?Sized,\n     {\n-        let target = &mut val as *mut *const U as *mut *const u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *const u8 };\n-        val\n+        from_raw_parts::<U>(self as *const (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type.\n@@ -478,8 +473,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -559,7 +553,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -597,8 +591,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *const T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask);\n-        from_raw_parts::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).with_metadata_of(self)\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n@@ -939,8 +932,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1026,8 +1018,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1107,7 +1098,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1187,7 +1178,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the"}, {"sha": "8f4809ec4baa4a6c51d4b02c92b1531c24b5ef5e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19efa2599c1d661816c17fcb8e52776748ddc72a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=19efa2599c1d661816c17fcb8e52776748ddc72a", "patch": "@@ -78,23 +78,14 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, val: *const U) -> *mut U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *mut U\n     where\n         U: ?Sized,\n     {\n-        // Prepare in the type system that we will replace the pointer value with a mutable\n-        // pointer, taking the mutable provenance from the `self` pointer.\n-        let mut val = val as *mut U;\n-        // Pointer to the pointer value within the value.\n-        let target = &mut val as *mut *mut U as *mut *mut u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *mut u8 };\n-        val\n+        from_raw_parts_mut::<U>(self as *mut (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type.\n@@ -496,8 +487,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -576,10 +566,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts_mut::<T>(\n-            self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n-            metadata(self),\n-        )\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -620,8 +607,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *mut T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask) as *mut ();\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).cast_mut().with_metadata_of(self)\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n@@ -1048,8 +1034,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1135,8 +1120,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1216,7 +1200,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1296,7 +1280,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the"}]}