{"sha": "cececca7c7fdae8730027615c2e89120e40bac66", "node_id": "C_kwDOAAsO6NoAKGNlY2VjY2E3YzdmZGFlODczMDAyNzYxNWMyZTg5MTIwZTQwYmFjNjY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-10-19T00:08:13Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-11-07T22:39:30Z"}, "message": "Get spans for a couple more region types, add some optimizations, and extend test", "tree": {"sha": "0b4d8c301d9513edc0abf176ed44e9882f906e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b4d8c301d9513edc0abf176ed44e9882f906e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cececca7c7fdae8730027615c2e89120e40bac66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cececca7c7fdae8730027615c2e89120e40bac66", "html_url": "https://github.com/rust-lang/rust/commit/cececca7c7fdae8730027615c2e89120e40bac66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cececca7c7fdae8730027615c2e89120e40bac66/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e314d5edb735baef84c314c8c1a53587911887", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e314d5edb735baef84c314c8c1a53587911887", "html_url": "https://github.com/rust-lang/rust/commit/00e314d5edb735baef84c314c8c1a53587911887"}], "stats": {"total": 163, "additions": 126, "deletions": 37}, "files": [{"sha": "7bbfb70f2c3a320021cf1c3b4f104fb75f01c527", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cececca7c7fdae8730027615c2e89120e40bac66/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cececca7c7fdae8730027615c2e89120e40bac66/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=cececca7c7fdae8730027615c2e89120e40bac66", "patch": "@@ -15,9 +15,11 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_infer::infer::RegionVariableOrigin;\n use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n+use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::{self, BoundVariableKind, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use smallvec::{smallvec, SmallVec};\n \n mod drop_ranges;\n \n@@ -226,32 +228,37 @@ pub fn resolve_interior<'a, 'tcx>(\n             // typeck had previously found constraints that would cause them to be related.\n \n             let mut counter = 0;\n+            let mut mk_bound_region = |span| {\n+                let kind = ty::BrAnon(counter, span);\n+                let var = ty::BoundVar::from_u32(counter);\n+                counter += 1;\n+                ty::BoundRegion { var, kind }\n+            };\n             let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n             let ty = fcx.tcx.fold_regions(ty, |region, current_depth| {\n                 let br = match region.kind() {\n                     ty::ReVar(vid) => {\n                         let origin = fcx.region_var_origin(vid);\n                         match origin {\n                             RegionVariableOrigin::EarlyBoundRegion(span, _) => {\n-                                let kind = ty::BrAnon(counter, Some(span));\n-                                let var = ty::BoundVar::from_u32(counter);\n-                                counter += 1;\n-                                ty::BoundRegion { var, kind }\n-                            }\n-                            _ => {\n-                                let kind = ty::BrAnon(counter, None);\n-                                let var = ty::BoundVar::from_u32(counter);\n-                                counter += 1;\n-                                ty::BoundRegion { var, kind }\n+                                mk_bound_region(Some(span))\n                             }\n+                            _ => mk_bound_region(None),\n                         }\n                     }\n-                    _ => {\n-                        let kind = ty::BrAnon(counter, None);\n-                        let var = ty::BoundVar::from_u32(counter);\n-                        counter += 1;\n-                        ty::BoundRegion { var, kind }\n+                    // FIXME: these should use `BrNamed`\n+                    ty::ReEarlyBound(region) => {\n+                        mk_bound_region(Some(fcx.tcx.def_span(region.def_id)))\n                     }\n+                    ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n+                    | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n+                        ty::BoundRegionKind::BrAnon(_, span) => mk_bound_region(span),\n+                        ty::BoundRegionKind::BrNamed(def_id, _) => {\n+                            mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n+                        }\n+                        ty::BoundRegionKind::BrEnv => mk_bound_region(None),\n+                    },\n+                    _ => mk_bound_region(None),\n                 };\n                 let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n                 r\n@@ -265,25 +272,34 @@ pub fn resolve_interior<'a, 'tcx>(\n         })\n         .collect();\n \n-    let mut bound_vars: Vec<BoundVariableKind> = vec![];\n+    let mut bound_vars: SmallVec<[BoundVariableKind; 4]> = smallvec![];\n     let mut counter = 0;\n-    let type_causes = fcx.tcx.fold_regions(type_causes, |region, current_depth| {\n-        let br = match region.kind() {\n-            ty::ReLateBound(_, br) => {\n-                let kind = match br.kind {\n-                    ty::BrAnon(_, span) => ty::BrAnon(counter, span),\n-                    _ => br.kind,\n-                };\n-                let var = ty::BoundVar::from_usize(bound_vars.len());\n-                bound_vars.push(ty::BoundVariableKind::Region(kind));\n-                counter += 1;\n-                ty::BoundRegion { var, kind }\n-            }\n-            _ => bug!(\"All regions should have been replaced by ReLateBound\"),\n-        };\n-        let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n-        r\n-    });\n+    // Optimization: If there is only one captured type, then we don't actually\n+    // need to fold and reindex (since the first type doesn't change).\n+    let type_causes = if captured_tys.len() > 0 {\n+        // Optimization: Use `replace_escaping_bound_vars_uncached` instead of\n+        // `fold_regions`, since we only have late bound regions, and it skips\n+        // types without bound regions.\n+        fcx.tcx.replace_escaping_bound_vars_uncached(\n+            type_causes,\n+            FnMutDelegate {\n+                regions: &mut |br| {\n+                    let kind = match br.kind {\n+                        ty::BrAnon(_, span) => ty::BrAnon(counter, span),\n+                        _ => br.kind,\n+                    };\n+                    let var = ty::BoundVar::from_usize(bound_vars.len());\n+                    bound_vars.push(ty::BoundVariableKind::Region(kind));\n+                    counter += 1;\n+                    fcx.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var, kind }))\n+                },\n+                types: &mut |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n+                consts: &mut |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n+            },\n+        )\n+    } else {\n+        type_causes\n+    };\n \n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));"}, {"sha": "d0813ccd3b401e2f1a4c741ac71008663f4bbbff", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cececca7c7fdae8730027615c2e89120e40bac66/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cececca7c7fdae8730027615c2e89120e40bac66/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=cececca7c7fdae8730027615c2e89120e40bac66", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                         );\n                     }\n                     (Some(sub_span), Some(sup_span), _, _) => {\n-                        err.span_note(sub_span, format!(\"the lifetime defined here, ...\"));\n+                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n                         err.span_note(\n                             sup_span,\n                             format!(\"...must outlive the lifetime defined here\"),"}, {"sha": "fc4e47a3ba18881963003ef6274e597ff4b9256f", "filename": "src/test/ui/generic-associated-types/bugs/issue-100013.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cececca7c7fdae8730027615c2e89120e40bac66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cececca7c7fdae8730027615c2e89120e40bac66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs?ref=cececca7c7fdae8730027615c2e89120e40bac66", "patch": "@@ -11,12 +11,29 @@ pub trait FutureIterator {\n         's: 'cx;\n }\n \n-fn call_2<I: FutureIterator>() -> impl Send {\n+fn call<I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n         //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n         async {}.await; // a yield point\n     }\n }\n \n+fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n+    async { // a generator checked for autotrait impl `Send`\n+        //~^ lifetime bound not satisfied\n+        let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n+        //~^ lifetime may not live long enough\n+        async {}.await; // a yield point\n+    }\n+}\n+\n+fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n+    async { // a generator checked for autotrait impl `Send`\n+        //~^ lifetime bound not satisfied\n+        let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n+        async {}.await; // a yield point\n+    }\n+}\n+\n fn main() {}"}, {"sha": "d9fcf8c48e2f781311daa10abcaccffd8e90941f", "filename": "src/test/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cececca7c7fdae8730027615c2e89120e40bac66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cececca7c7fdae8730027615c2e89120e40bac66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=cececca7c7fdae8730027615c2e89120e40bac66", "patch": "@@ -8,7 +8,7 @@ LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n-note: the lifetime defined here, ...\n+note: the lifetime defined here...\n   --> $DIR/issue-100013.rs:17:38\n    |\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n@@ -19,5 +19,61 @@ note: ...must outlive the lifetime defined here\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n    |                                  ^^\n \n-error: aborting due to previous error\n+error: lifetime bound not satisfied\n+  --> $DIR/issue-100013.rs:23:5\n+   |\n+LL | /     async { // a generator checked for autotrait impl `Send`\n+LL | |\n+LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n+LL | |\n+LL | |         async {}.await; // a yield point\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lifetime defined here...\n+  --> $DIR/issue-100013.rs:22:14\n+   |\n+LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n+   |              ^^\n+note: ...must outlive the lifetime defined here\n+  --> $DIR/issue-100013.rs:22:10\n+   |\n+LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n+   |          ^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-100013.rs:25:17\n+   |\n+LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+...\n+LL |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: lifetime bound not satisfied\n+  --> $DIR/issue-100013.rs:32:5\n+   |\n+LL | /     async { // a generator checked for autotrait impl `Send`\n+LL | |\n+LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n+LL | |         async {}.await; // a yield point\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lifetime defined here...\n+  --> $DIR/issue-100013.rs:31:18\n+   |\n+LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n+   |                  ^^\n+note: ...must outlive the lifetime defined here\n+  --> $DIR/issue-100013.rs:31:10\n+   |\n+LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n+   |          ^^\n+\n+error: aborting due to 4 previous errors\n "}]}