{"sha": "6c272b78dcfd16b36955903cfc6386af71a64583", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjcyYjc4ZGNmZDE2YjM2OTU1OTAzY2ZjNjM4NmFmNzFhNjQ1ODM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-25T20:54:19Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:26Z"}, "message": "Fix lint findings in librustc", "tree": {"sha": "aa6a998cbaec2b99b5e303046e773ada8c2aebdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6a998cbaec2b99b5e303046e773ada8c2aebdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c272b78dcfd16b36955903cfc6386af71a64583", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L4ACgkQaTCGhp1Q\nZjfBnBAAtOAGRZcXxsa+UFqj9BDcFtL171h6k/PXCJodaD6BAdiNbzZnF1dVQeyb\nusHU3nEs3wvKmtpHSPtDnyA9wduekS0iVQ3+RDMiRInO3IrI1Bh7pBn+Dn+YSNfh\n1zWqHgIAJcE67rxPkuBKjFMxGjW/b5+fsH6Vv79PIAe0whdEjvWnHCgBvfJf6wBR\nnrG+YBjelWM5PUb6cH6ykM+/XTvhb4+t4gG7iOKuUruuyG0Os+pSM/s5qI4D8aa3\ne+N4UWufv0OvzvMqFthXBbUQZUYHA4SEPba7IEkvMelFnf/zNJQGI5VaAmGs4Dq2\nGgcyMmc1bH/fL1vOPrv49mdxy/gTIWy7sJyQ+gJGOyZwg25gZnygC8trb8QhlzKb\nnK0lhBsYAahWuHhfdMAq0Riado9tDy09V9FXREXI7quKsN/t2DjHhojCspvgTtCZ\no5M10P+lc6jYcCx+ZQ1/XHN1r5wN/aC70uWNpCfp2/g25Bz2gB+441ZBuesXHCku\nxFrxWtj9wugJjTo/sIgFhhD3Ua+MGI4KzTKzVjFlHc620RnfEDjIscQY6f3ZOByv\nCAPfBzSZ0THytUjrBE8tksRxu06eDxe5b3PC0Kd7lta4gXKLYUHSnzGS6lLvBr6K\niia4I5CvZGTN/1NNOD5uD84micPWNO89WR8lBzydteW+hyVYJgU=\n=rKO2\n-----END PGP SIGNATURE-----", "payload": "tree aa6a998cbaec2b99b5e303046e773ada8c2aebdd\nparent 8af35fe3f0365b4e26461248fa484c8ae366e336\nauthor flip1995 <hello@philkrones.com> 1556225659 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479166 +0200\n\nFix lint findings in librustc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c272b78dcfd16b36955903cfc6386af71a64583", "html_url": "https://github.com/rust-lang/rust/commit/6c272b78dcfd16b36955903cfc6386af71a64583", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c272b78dcfd16b36955903cfc6386af71a64583/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af35fe3f0365b4e26461248fa484c8ae366e336", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af35fe3f0365b4e26461248fa484c8ae366e336", "html_url": "https://github.com/rust-lang/rust/commit/8af35fe3f0365b4e26461248fa484c8ae366e336"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "c20a08fc5aea603c78f534164b16f6b1b1f3ffca", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         name: String,\n         sub: ty::subst::SubstsRef<'tcx>,\n         pos: usize,\n-        other_ty: &Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n     ) {\n         // `value` and `other_value` hold two incomplete type representation for display.\n         // `name` is the path of both types being compared. `sub`\n@@ -768,10 +768,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         path: String,\n         sub: ty::subst::SubstsRef<'tcx>,\n         other_path: String,\n-        other_ty: &Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n     ) -> Option<()> {\n         for (i, ta) in sub.types().enumerate() {\n-            if &ta == other_ty {\n+            if ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n                 return Some(());\n             }\n@@ -839,7 +839,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n-        fn equals<'tcx>(a: &Ty<'tcx>, b: &Ty<'tcx>) -> bool {\n+        fn equals<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n             match (&a.sty, &b.sty) {\n                 (a, b) if *a == *b => true,\n                 (&ty::Int(_), &ty::Infer(ty::InferTy::IntVar(_)))\n@@ -1099,7 +1099,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let span = cause.span(&self.tcx);\n+        let span = cause.span(self.tcx);\n \n         diag.span_label(span, terr.to_string());\n         if let Some((sp, msg)) = secondary_span {\n@@ -1233,7 +1233,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             trace, terr\n         );\n \n-        let span = trace.cause.span(&self.tcx);\n+        let span = trace.cause.span(self.tcx);\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0317(failure_str) => {"}, {"sha": "ca159872ea7fbde2ccb5e2deff0a21429b8fb48f", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -11,7 +11,7 @@ use errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    target_ty: &'a Ty<'tcx>,\n+    target_ty: Ty<'tcx>,\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n@@ -26,7 +26,7 @@ impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n             Some(ty) => {\n                 let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n                 ty.walk().any(|inner_ty| {\n-                    inner_ty == *self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n+                    inner_ty == self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n                         (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => {\n                             self.infcx\n                                 .type_variables\n@@ -68,10 +68,10 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn extract_type_name(\n         &self,\n-        ty: &'a Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n     ) -> String {\n-        if let ty::Infer(ty::TyVar(ty_vid)) = (*ty).sty {\n+        if let ty::Infer(ty::TyVar(ty_vid)) = ty.sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n                 *ty_vars.var_origin(ty_vid) {\n@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,\n-            target_ty: &ty,\n+            target_ty: ty,\n             hir_map: &self.tcx.hir(),\n             found_local_pattern: None,\n             found_arg_pattern: None,"}, {"sha": "60acbe0afe431935ebf430c6d2dd19d1e83d814a", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -193,7 +193,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         );\n \n         let mut err = self.tcx().sess.struct_span_err(\n-            cause.span(&self.tcx()),\n+            cause.span(self.tcx()),\n             &format!(\n                 \"implementation of `{}` is not general enough\",\n                 self.tcx().def_path_str(trait_def_id),"}, {"sha": "753fd04aac38a0eae7030947652592da87e29428", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -267,7 +267,7 @@ where\n     fn relate_projection_ty(\n         &mut self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n-        value_ty: ty::Ty<'tcx>,\n+        value_ty: Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         use crate::infer::type_variable::TypeVariableOrigin;\n         use crate::traits::WhereClause;"}, {"sha": "4eb3a2bd10b44b73e6b5e00d28bb884033380c17", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n                                            StableHasherResult};\n use std::cmp;\n use std::mem;\n-use crate::ty;\n+use crate::ty::{self, TyCtxt};\n use crate::ty::subst::SubstsRef;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n@@ -39,7 +39,7 @@ pub enum ExportedSymbol<'tcx> {\n \n impl<'tcx> ExportedSymbol<'tcx> {\n     pub fn symbol_name(&self,\n-                       tcx: ty::TyCtxt<'_, 'tcx, '_>)\n+                       tcx: TyCtxt<'_, 'tcx, '_>)\n                        -> ty::SymbolName {\n         match *self {\n             ExportedSymbol::NonGeneric(def_id) => {\n@@ -55,7 +55,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n \n     pub fn compare_stable(&self,\n-                          tcx: ty::TyCtxt<'_, 'tcx, '_>,\n+                          tcx: TyCtxt<'_, 'tcx, '_>,\n                           other: &ExportedSymbol<'tcx>)\n                           -> cmp::Ordering {\n         match *self {\n@@ -92,7 +92,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n }\n \n-pub fn metadata_symbol_name(tcx: ty::TyCtxt<'_, '_, '_>) -> String {\n+pub fn metadata_symbol_name(tcx: TyCtxt<'_, '_, '_>) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.original_crate_name(LOCAL_CRATE),\n             tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())"}, {"sha": "e82e90ede8c103daf1c91cca1a5daa669612b3bc", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -18,7 +18,7 @@ pub enum MonoItem<'tcx> {\n }\n \n impl<'tcx> MonoItem<'tcx> {\n-    pub fn size_estimate<'a>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> usize {\n+    pub fn size_estimate<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> usize {\n         match *self {\n             MonoItem::Fn(instance) => {\n                 // Estimate the size of a function based on how many statements\n@@ -144,7 +144,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n \n-    pub fn estimate_size<'a>(&mut self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) {\n+    pub fn estimate_size<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         // Estimate the size of a codegen unit as (approximately) the number of MIR\n         // statements it corresponds to.\n         self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());"}, {"sha": "88ecae02cef36eb4e7b38392177c6942c7d3b0bc", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -198,7 +198,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_ty(&mut self,\n-                        ty: & $($mutability)? Ty<'tcx>,\n+                        ty: $(& $mutability)? Ty<'tcx>,\n                         _: TyContext) {\n                 self.super_ty(ty);\n             }\n@@ -864,7 +864,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_ty(& $($mutability)? ty.inferred_ty, TyContext::UserTy(ty.span));\n             }\n \n-            fn super_ty(&mut self, _ty: & $($mutability)? Ty<'tcx>) {\n+            fn super_ty(&mut self, _ty: $(& $mutability)? Ty<'tcx>) {\n             }\n \n             fn super_region(&mut self, _region: & $($mutability)? ty::Region<'tcx>) {"}, {"sha": "bb3dcdcf72b3932a0a5822b8438a17a043aba349", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -49,11 +49,11 @@ pub struct AutoTraitInfo<'cx> {\n }\n \n pub struct AutoTraitFinder<'a, 'tcx: 'a> {\n-    tcx: &'a TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n-    pub fn new(tcx: &'a TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         AutoTraitFinder { tcx }\n     }\n \n@@ -291,7 +291,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         infcx: &InferCtxt<'b, 'tcx, 'c>,\n         ty_did: DefId,\n         trait_did: DefId,\n-        ty: ty::Ty<'c>,\n+        ty: Ty<'c>,\n         param_env: ty::ParamEnv<'c>,\n         user_env: ty::ParamEnv<'c>,\n         fresh_preds: &mut FxHashSet<ty::Predicate<'c>>,\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         T: Iterator<Item = Obligation<'cx, ty::Predicate<'cx>>>,\n     >(\n         &self,\n-        ty: ty::Ty<'_>,\n+        ty: Ty<'_>,\n         nested: T,\n         computed_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,\n         fresh_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,"}, {"sha": "47d96708ebea3eea9544e0215971cfcdb65804ec", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -1242,7 +1242,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                            found: ty::PolyTraitRef<'tcx>)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n             let sig = if let ty::Tuple(inputs) = inputs.sty {"}, {"sha": "c544340a80f0ab28bfdb1bbd7981ba7368338a03", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -138,7 +138,7 @@ pub struct ObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n-    pub fn span<'a, 'gcx>(&self, tcx: &TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n+    pub fn span<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n         match self.code {\n             ObligationCauseCode::CompareImplMethodObligation { .. } |\n             ObligationCauseCode::MainFunctionType |"}, {"sha": "400a0f526c4ef887e3bdf7c8c7ade4816b4fa13d", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -3,7 +3,7 @@ use smallvec::SmallVec;\n use crate::traits;\n use crate::traits::project::Normalized;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::{self, Lift, TyCtxt};\n+use crate::ty::{self, Lift, Ty, TyCtxt};\n use syntax::symbol::InternedString;\n \n use std::fmt;\n@@ -311,7 +311,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         result\n     }\n \n-    fn visit_ty(&mut self, t: ty::Ty<'tcx>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n         use syntax::symbol::Symbol;\n \n         match t.sty {"}, {"sha": "552fbac5756a8a243d08ff4dcaf7ed7ab7c0255a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -421,7 +421,7 @@ struct BoundVarReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     current_index: ty::DebruijnIndex,\n \n     fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-    fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> ty::Ty<'tcx> + 'a),\n+    fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a),\n }\n \n impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n@@ -431,7 +431,7 @@ impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n         fld_t: &'a mut G\n     ) -> Self\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>\n     {\n         BoundVarReplacer {\n             tcx,\n@@ -533,7 +533,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         mut fld_t: G\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n         use rustc_data_structures::fx::FxHashMap;\n@@ -568,7 +568,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         fld_t: G\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n         self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t)\n@@ -710,7 +710,7 @@ impl TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn fold_ty(&mut self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Bound(debruijn, bound_ty) => {\n                 if self.amount == 0 || debruijn < self.current_index {"}, {"sha": "69532b9b2c4ef7051109e4a930bb492acf3874a0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -212,7 +212,7 @@ impl AssociatedItem {\n         }\n     }\n \n-    pub fn signature<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> String {\n+    pub fn signature<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         match self.kind {\n             ty::AssociatedKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all"}, {"sha": "24ba0744a688a83d09432f3df36b8e37919066a1", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -9,7 +9,7 @@ use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use crate::session::{CrateDisambiguator, Session};\n-use crate::ty;\n+use crate::ty::{self, Ty};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::util::common::{time, time_ext};\n@@ -545,8 +545,8 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n     fn cached_ty_for_shorthand<F>(&mut self,\n                                   shorthand: usize,\n                                   or_insert_with: F)\n-                                  -> Result<ty::Ty<'tcx>, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<ty::Ty<'tcx>, Self::Error>\n+                                  -> Result<Ty<'tcx>, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<Ty<'tcx>, Self::Error>\n     {\n         let tcx = self.tcx();\n \n@@ -751,7 +751,7 @@ struct CacheEncoder<'enc, 'a, 'tcx, E>\n {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     encoder: &'enc mut E,\n-    type_shorthands: FxHashMap<ty::Ty<'tcx>, usize>,\n+    type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n     expn_info_shorthands: FxHashMap<Mark, AbsoluteBytePos>,\n     interpret_allocs: FxHashMap<interpret::AllocId, usize>,\n@@ -881,11 +881,11 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<CrateNum> for CacheEncoder<'enc, 'a,\n     }\n }\n \n-impl<'enc, 'a, 'tcx, E> SpecializedEncoder<ty::Ty<'tcx>> for CacheEncoder<'enc, 'a, 'tcx, E>\n+impl<'enc, 'a, 'tcx, E> SpecializedEncoder<Ty<'tcx>> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n     #[inline]\n-    fn specialized_encode(&mut self, ty: &ty::Ty<'tcx>) -> Result<(), Self::Error> {\n+    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty,\n             |encoder| &mut encoder.type_shorthands)\n     }"}, {"sha": "cc753252758821e34ed6ea7463b4c9538c8171ae", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -64,7 +64,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     /// We sometimes have `ty` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n-    fn visit_ty(&mut self, ty: &ty::Ty<'tcx>, ty_context: TyContext) {\n+    fn visit_ty(&mut self, ty: ty::Ty<'tcx>, ty_context: TyContext) {\n         match ty_context {\n             TyContext::ReturnTy(SourceInfo { span, .. })\n             | TyContext::YieldTy(SourceInfo { span, .. })\n@@ -77,7 +77,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n                 );\n             }\n             TyContext::Location(location) => {\n-                self.add_regular_live_constraint(*ty, location);\n+                self.add_regular_live_constraint(ty, location);\n             }\n         }\n "}, {"sha": "368bcc333996f546b44f944b614bd6b5eea6a0c9", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -228,7 +228,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // functions and statics defined in the local crate.\n     let mut initial_partitioning = place_root_mono_items(tcx, mono_items);\n \n-    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n     debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n \n@@ -247,7 +247,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut post_inlining = place_inlined_mono_items(initial_partitioning,\n                                                             inlining_map);\n \n-    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n     debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n "}, {"sha": "b47cce04012a0854e08e4875c73302437c89993f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -308,7 +308,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             let mut diag = struct_span_err!(tcx.sess,\n-                                            cause.span(&tcx),\n+                                            cause.span(tcx),\n                                             E0053,\n                                             \"method `{}` has an incompatible type for trait\",\n                                             trait_m.ident);\n@@ -448,9 +448,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                 }).map(|(ref impl_arg, ref trait_arg)| {\n                     (impl_arg.span, Some(trait_arg.span))\n                 })\n-                .unwrap_or_else(|| (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id)))\n+                .unwrap_or_else(|| (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)))\n             } else {\n-                (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n             }\n         }\n         TypeError::Sorts(ExpectedFound { .. }) => {\n@@ -483,14 +483,14 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                              {\n                                  (impl_m_output.span(), Some(trait_m_output.span()))\n                              } else {\n-                                 (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                                 (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n                              }\n                          )\n             } else {\n-                (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n             }\n         }\n-        _ => (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id)),\n+        _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n }\n \n@@ -549,7 +549,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"trait method declared without `{}`\", self_descr));\n             } else {\n                 err.note_trait_signature(trait_m.ident.to_string(),\n-                                         trait_m.signature(&tcx));\n+                                         trait_m.signature(tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -569,7 +569,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"`{}` used in trait\", self_descr));\n             } else {\n                 err.note_trait_signature(trait_m.ident.to_string(),\n-                                         trait_m.signature(&tcx));\n+                                         trait_m.signature(tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -726,7 +726,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 potentially_plural_count(trait_number_args, \"parameter\")));\n         } else {\n             err.note_trait_signature(trait_m.ident.to_string(),\n-                                     trait_m.signature(&tcx));\n+                                     trait_m.signature(tcx));\n         }\n         err.span_label(impl_span, format!(\"expected {}, found {}\",\n             potentially_plural_count(trait_number_args, \"parameter\"), impl_number_args));"}, {"sha": "250dd90c78959ec0a96c3f37b7c8b6f4680073f5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -1667,7 +1667,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"`{}` from trait\", trait_item.ident));\n             } else {\n                 err.note_trait_signature(trait_item.ident.to_string(),\n-                                         trait_item.signature(&tcx));\n+                                         trait_item.signature(tcx));\n             }\n         }\n         err.emit();"}, {"sha": "eba7f8d3a8abedb27177c2fdf14be5aefe66f920", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c272b78dcfd16b36955903cfc6386af71a64583/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6c272b78dcfd16b36955903cfc6386af71a64583", "patch": "@@ -14,7 +14,7 @@ pub struct AutoTraitFinder<'a, 'tcx> {\n \n impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     pub fn new(cx: &'a core::DocContext<'tcx>) -> Self {\n-        let f = auto::AutoTraitFinder::new(&cx.tcx);\n+        let f = auto::AutoTraitFinder::new(cx.tcx);\n \n         AutoTraitFinder { cx, f }\n     }"}]}