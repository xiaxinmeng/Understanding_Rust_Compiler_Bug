{"sha": "6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "node_id": "C_kwDOAAsO6NoAKDZlNWE2ZmZiMTRmYzQ3MDUxYjBhMjM0MTBjNjgxYWQ2ZTRhZjA0NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T06:15:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T06:15:54Z"}, "message": "Auto merge of #94471 - matthiaskrgr:rollup-ffz65qt, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #94438 (Check method input expressions once)\n - #94459 (Update cargo)\n - #94470 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cccc99cab98adbc7712ee1d0cb2297828cb33012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cccc99cab98adbc7712ee1d0cb2297828cb33012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "html_url": "https://github.com/rust-lang/rust/commit/6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6343edfa11c80ffed02de7e059178d4c1637ecdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6343edfa11c80ffed02de7e059178d4c1637ecdb", "html_url": "https://github.com/rust-lang/rust/commit/6343edfa11c80ffed02de7e059178d4c1637ecdb"}, {"sha": "6aab9546459c16300e766fc3bfbb83960bf7a218", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aab9546459c16300e766fc3bfbb83960bf7a218", "html_url": "https://github.com/rust-lang/rust/commit/6aab9546459c16300e766fc3bfbb83960bf7a218"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "f0c6e371c38be197f77023de408fbc9422962a69", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -318,7 +318,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.61.0\"\n+version = \"0.62.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\","}, {"sha": "3b644099ecf04a0b43ec16fa36a1f8cd301a065c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -470,7 +470,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let self_ty = self.typeck_results.borrow().node_type(method_expr[0].hir_id);\n+        let self_ty = self.typeck_results.borrow().expr_ty(&method_expr[0]);\n         let self_ty = format!(\"{:?}\", self_ty);\n         let name = method_path.ident.name;\n         let is_as_ref_able = (self_ty.starts_with(\"&std::option::Option\")"}, {"sha": "a8c9c699ceb54acd9e6e7ccebe28f4981194c308", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -1517,7 +1517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             } else {\n                 self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {\n-                    let base_ty = self.typeck_results.borrow().node_type(base_expr.hir_id);\n+                    let base_ty = self.typeck_results.borrow().expr_ty(*base_expr);\n                     let same_adt = match (adt_ty.kind(), base_ty.kind()) {\n                         (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt => true,\n                         _ => false,"}, {"sha": "2c81745836cdb385fae943901d40b08950b3588b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -313,15 +313,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) => {\n                         // A reborrow has no effect before a dereference.\n                     }\n-                    // Catch cases which have Deref(None)\n-                    // having them slip to bug! causes ICE\n-                    // see #94291 for more info\n-                    (&[Adjustment { kind: Adjust::Deref(None), .. }], _) => {\n-                        self.tcx.sess.delay_span_bug(\n-                            DUMMY_SP,\n-                            &format!(\"Can't compose Deref(None) expressions\"),\n-                        )\n-                    }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n                     _ => bug!("}, {"sha": "3dfee99b83599f0e97edbe82f2c45a13b2148107", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -133,7 +133,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expected_arg_count = formal_input_tys.len();\n \n         // expected_count, arg_count, error_code, sugg_unit, sugg_tuple_wrap_args\n-        let mut error: Option<(usize, usize, &str, bool, Option<FnArgsAsTuple<'_>>)> = None;\n+        let mut arg_count_error: Option<(usize, usize, &str, bool, Option<FnArgsAsTuple<'_>>)> =\n+            None;\n \n         // If the arguments should be wrapped in a tuple (ex: closures), unwrap them here\n         let (formal_input_tys, expected_input_tys) = if tuple_arguments == TupleArguments {\n@@ -143,7 +144,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Tuple(arg_types) => {\n                     // Argument length differs\n                     if arg_types.len() != provided_args.len() {\n-                        error = Some((arg_types.len(), provided_args.len(), \"E0057\", false, None));\n+                        arg_count_error =\n+                            Some((arg_types.len(), provided_args.len(), \"E0057\", false, None));\n                     }\n                     let expected_input_tys = match expected_input_tys.get(0) {\n                         Some(&ty) => match ty.kind() {\n@@ -174,7 +176,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 (formal_input_tys.to_vec(), expected_input_tys)\n             } else {\n-                error = Some((expected_arg_count, supplied_arg_count, \"E0060\", false, None));\n+                arg_count_error =\n+                    Some((expected_arg_count, supplied_arg_count, \"E0060\", false, None));\n                 (self.err_args(supplied_arg_count), vec![])\n             }\n         } else {\n@@ -198,7 +201,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let sugg_tuple_wrap_args = self.suggested_tuple_wrap(expected_input_tys, provided_args);\n \n-            error = Some((\n+            arg_count_error = Some((\n                 expected_arg_count,\n                 supplied_arg_count,\n                 \"E0061\",\n@@ -231,6 +234,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is more complicated than just checking type equality, as arguments could be coerced\n         // This version writes those types back so further type checking uses the narrowed types\n         let demand_compatible = |idx, final_arg_types: &mut Vec<Option<(Ty<'tcx>, Ty<'tcx>)>>| {\n+            // Do not check argument compatibility if the number of args do not match\n+            if arg_count_error.is_some() {\n+                return;\n+            }\n+\n             let formal_input_ty: Ty<'tcx> = formal_input_tys[idx];\n             let expected_input_ty: Ty<'tcx> = expected_input_tys[idx];\n             let provided_arg = &provided_args[idx];\n@@ -328,7 +336,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // If there was an error in parameter count, emit that here\n-        if let Some((expected_count, arg_count, err_code, sugg_unit, sugg_tuple_wrap_args)) = error\n+        if let Some((expected_count, arg_count, err_code, sugg_unit, sugg_tuple_wrap_args)) =\n+            arg_count_error\n         {\n             let (span, start_span, args, ctor_of) = match &call_expr.kind {\n                 hir::ExprKind::Call("}, {"sha": "902a6ec81d60b9cd87d328c50e1a3c89f6495382", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -30,5 +30,4 @@ fn main() {\n     //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n-    //~| ERROR mismatched types\n }"}, {"sha": "264d7cbb9b1cb9c2fa7b1765ebf353751479a98e", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -18,12 +18,6 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/overloaded-calls-bad.rs:31:17\n-   |\n-LL |     let ans = s(\"burma\", \"shave\");\n-   |                 ^^^^^^^ expected `isize`, found `&str`\n-\n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n@@ -38,7 +32,7 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0057, E0308.\n For more information about an error, try `rustc --explain E0057`."}, {"sha": "b0f814616f2ecc492f9114042f59380140eb2d87", "filename": "src/test/ui/tuple/wrong_argument_ice-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -0,0 +1,17 @@\n+fn test(t: (i32, i32)) {}\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn qux(&self) -> i32 {\n+        0\n+    }\n+}\n+\n+fn bar() {\n+    let x = Foo;\n+    test(x.qux(), x.qux());\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+}\n+\n+fn main() {}"}, {"sha": "ddafc9763e79a6db7fcac23f37b9201b40def36a", "filename": "src/test/ui/tuple/wrong_argument_ice-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/wrong_argument_ice-2.rs:13:5\n+   |\n+LL |     test(x.qux(), x.qux());\n+   |     ^^^^ -------  ------- supplied 2 arguments\n+   |\n+note: function defined here\n+  --> $DIR/wrong_argument_ice-2.rs:1:4\n+   |\n+LL | fn test(t: (i32, i32)) {}\n+   |    ^^^^ -------------\n+help: use parentheses to construct a tuple\n+   |\n+LL |     test((x.qux(), x.qux()));\n+   |          +                +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "3d6970d50e30e797b8e26b2b9b1bdf92dc381f34", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -1 +1 @@\n-Subproject commit d6cdde584a1f15ea086bae922e20fd27f7165431\n+Subproject commit 3d6970d50e30e797b8e26b2b9b1bdf92dc381f34"}]}