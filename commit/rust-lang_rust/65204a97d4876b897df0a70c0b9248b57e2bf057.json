{"sha": "65204a97d4876b897df0a70c0b9248b57e2bf057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjA0YTk3ZDQ4NzZiODk3ZGYwYTcwYzBiOTI0OGI1N2UyYmYwNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-12T18:54:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-12T18:54:11Z"}, "message": "Auto merge of #55278 - Centril:constification-1, r=alexcrichton\n\nMinor standard library constification\n\nThis PR makes some bits of the standard library into `const fn`s.\nI've tried to be as aggressive as I possibly could in the constification.\nThe list is rather small due to how restrictive `const fn` is at the moment.\n\nr? @oli-obk cc @rust-lang/libs\n\nStable public APIs affected:\n+ [x] `Cell::as_ptr`\n+ [x] `UnsafeCell::get`\n+ [x] `char::is_ascii`\n+ [x] `iter::empty`\n+ [x] `ManuallyDrop::{new, into_inner}`\n+ [x] `RangeInclusive::{start, end}`\n+ [x] `NonNull::as_ptr`\n+ [x] `{[T], str}::as_ptr`\n+ [x] `Duration::{as_secs, subsec_millis, subsec_micros, subsec_nanos}`\n+ [x] `CStr::as_ptr`\n+ [x] `Ipv4Addr::is_unspecified`\n+ [x] `Ipv6Addr::new`\n+ [x] `Ipv6Addr::octets`\n\nUnstable public APIs affected:\n+ [x] `Duration::{as_millis, as_micros, as_nanos, as_float_secs}`\n+ [x] `Wrapping::{count_ones, count_zeros, trailing_zeros, rotate_left, rotate_right, swap_bytes, reverse_bits, from_be, from_le, to_be, to_le, leading_zeros, is_positive, is_negative, leading_zeros}`\n+ [x] `core::convert::identity`\n\n--------------------------\n\n## Removed from list in first pass:\n\nStable public APIs affected:\n+ [ ] `BTree{Map, Set}::{len, is_empty}`\n+ [ ] `VecDeque::is_empty`\n+ [ ] `String::{is_empty, len}`\n+ [ ] `FromUtf8Error::utf8_error`\n+ [ ] `Vec<T>::{is_empty, len}`\n+ [ ] `Layout::size`\n+ [ ] `DecodeUtf16Error::unpaired_surrogate`\n+ [ ] `core::fmt::{fill, width, precision, sign_plus, sign_minus, alternate, sign_aware_zero_pad}`\n+ [ ] `panic::Location::{file, line, column}`\n+ [ ] `{ChunksExact, RChunksExact}::remainder`\n+ [ ] `Utf8Error::valid_up_to`\n+ [ ] `VacantEntry::key`\n+ [ ] `NulError::nul_position`\n+ [ ] `IntoStringError::utf8_error`\n+ [ ] `IntoInnerError::error`\n+ [ ] `io::Chain::get_ref`\n+ [ ] `io::Take::{limit, get_ref}`\n+ [ ] `SocketAddrV6::{flowinfo, scope_id}`\n+ [ ] `PrefixComponent::{kind, as_os_str}`\n+ [ ] `Path::{ancestors, display}`\n+ [ ] `WaitTimeoutResult::timed_out`\n+ [ ] `Receiver::{iter, try_iter}`\n+ [ ] `thread::JoinHandle::thread`\n+ [ ] `SystemTimeError::duration`\n\nUnstable public APIs affected:\n+ [ ] `core::fmt::Arguments::new_v1`\n+ [ ] `core::fmt::Arguments::new_v1_formatted`\n+ [ ] `Pin::{get_ref, into_ref}`\n+ [ ] `Utf8Lossy::chunks`\n+ [ ] `LocalWaker::as_waker`\n+ [ ] `panic::PanicInfo::{internal_constructor, message, location}`\n+ [ ] `panic::Location::{internal_constructor }`\n\n## Removed from list in 2nd pass:\n\nStable public APIs affected:\n+ [ ] `LinkedList::{new, iter, is_empty, len}`\n+ [ ] `mem::forget`\n+ [ ] `Cursor::{new, get_ref, position}`\n+ [ ] `io::{empty, repeat, sink}`\n+ [ ] `PoisonError::new`\n+ [ ] `thread::Builder::new`\n+ [ ] `process::Stdio::{piped, inherit, null}`\n\nUnstable public APIs affected:\n+ [ ] `io::Initializer::{zeroing, should_initialize}`", "tree": {"sha": "7f2e329a44787eecd22ce6343377305706ac2209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f2e329a44787eecd22ce6343377305706ac2209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65204a97d4876b897df0a70c0b9248b57e2bf057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65204a97d4876b897df0a70c0b9248b57e2bf057", "html_url": "https://github.com/rust-lang/rust/commit/65204a97d4876b897df0a70c0b9248b57e2bf057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65204a97d4876b897df0a70c0b9248b57e2bf057/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0195812aeafeecaa8760a4ddceae187472db8fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0195812aeafeecaa8760a4ddceae187472db8fe6", "html_url": "https://github.com/rust-lang/rust/commit/0195812aeafeecaa8760a4ddceae187472db8fe6"}, {"sha": "ac1c6b0378789250a5070772ad18e936949c7a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1c6b0378789250a5070772ad18e936949c7a3c", "html_url": "https://github.com/rust-lang/rust/commit/ac1c6b0378789250a5070772ad18e936949c7a3c"}], "stats": {"total": 203, "additions": 118, "deletions": 85}, "files": [{"sha": "9cf42eff219ba05a87bbce40768967e8e1e45529", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -474,7 +474,7 @@ impl<T: ?Sized> Cell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n+    pub const fn as_ptr(&self) -> *mut T {\n         self.value.get()\n     }\n \n@@ -1508,7 +1508,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get(&self) -> *mut T {\n+    pub const fn get(&self) -> *mut T {\n         &self.value as *const T as *mut T\n     }\n }"}, {"sha": "35181afea3da6ce72b6a5d83722737984f953fb3", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -903,7 +903,7 @@ impl char {\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n-    pub fn is_ascii(&self) -> bool {\n+    pub const fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F\n     }\n "}, {"sha": "dbc28ef7cf6a9ce8f3826bf21a3e9065ad809acd", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -104,7 +104,6 @@\n /// assert_eq!(vec![1, 3], filtered);\n /// ```\n #[unstable(feature = \"convert_id\", issue = \"53500\")]\n-#[rustc_const_unstable(feature = \"const_convert_id\")]\n #[inline]\n pub const fn identity<T>(x: T) -> T { x }\n "}, {"sha": "7fa3a4bcce7bb2357ae1c1e05952c83e89844b24", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -283,7 +283,7 @@ impl<T> Default for Empty<T> {\n /// assert_eq!(None, nope.next());\n /// ```\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-pub fn empty<T>() -> Empty<T> {\n+pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }\n "}, {"sha": "6cf6417974a0dc367267621d7ddf1372dd12a035", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -82,7 +82,6 @@\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n #![feature(const_fn_union)]\n-#![feature(const_manually_drop_new)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]"}, {"sha": "d4b7094d6fb645bb48166d0d45f12d22b0a6eeb8", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -942,7 +942,6 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_manually_drop_new\")]\n     #[inline]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n@@ -961,7 +960,7 @@ impl<T> ManuallyDrop<T> {\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n-    pub fn into_inner(slot: ManuallyDrop<T>) -> T {\n+    pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value\n     }\n "}, {"sha": "4e33fcfd76e61cf210d786833b59e131b5e7a1a4", "filename": "src/libcore/num/flt2dec/estimator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -22,4 +22,3 @@ pub fn estimate_scaling_factor(mant: u64, exp: i16) -> i16 {\n     // therefore this always underestimates (or is exact), but not much.\n     (((nbits + exp as i64) * 1292913986) >> 32) as i16\n }\n-"}, {"sha": "d58015beecb1e7172f38cf54706dfe5d3411cf13", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -658,4 +658,3 @@ pub fn to_exact_fixed_str<'a, T, F>(mut format_exact: F, v: T,\n         }\n     }\n }\n-"}, {"sha": "00134a58d30f1c2e00a5917b4db3a25a0516fbaa", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -387,7 +387,7 @@ assert_eq!(n.count_ones(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn count_ones(self) -> u32 {\n+                pub const fn count_ones(self) -> u32 {\n                     self.0.count_ones()\n                 }\n             }\n@@ -407,7 +407,7 @@ assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn count_zeros(self) -> u32 {\n+                pub const fn count_zeros(self) -> u32 {\n                     self.0.count_zeros()\n                 }\n             }\n@@ -430,7 +430,7 @@ assert_eq!(n.trailing_zeros(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn trailing_zeros(self) -> u32 {\n+                pub const fn trailing_zeros(self) -> u32 {\n                     self.0.trailing_zeros()\n                 }\n             }\n@@ -456,7 +456,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn rotate_left(self, n: u32) -> Self {\n+            pub const fn rotate_left(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_left(n))\n             }\n \n@@ -481,7 +481,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn rotate_right(self, n: u32) -> Self {\n+            pub const fn rotate_right(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_right(n))\n             }\n \n@@ -505,7 +505,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn swap_bytes(self) -> Self {\n+            pub const fn swap_bytes(self) -> Self {\n                 Wrapping(self.0.swap_bytes())\n             }\n \n@@ -532,7 +532,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[inline]\n-            pub fn reverse_bits(self) -> Self {\n+            pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }\n \n@@ -560,7 +560,7 @@ if cfg!(target_endian = \\\"big\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn from_be(x: Self) -> Self {\n+                pub const fn from_be(x: Self) -> Self {\n                     Wrapping(<$t>::from_be(x.0))\n                 }\n             }\n@@ -589,7 +589,7 @@ if cfg!(target_endian = \\\"little\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn from_le(x: Self) -> Self {\n+                pub const fn from_le(x: Self) -> Self {\n                     Wrapping(<$t>::from_le(x.0))\n                 }\n             }\n@@ -618,7 +618,7 @@ if cfg!(target_endian = \\\"big\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn to_be(self) -> Self {\n+                pub const fn to_be(self) -> Self {\n                     Wrapping(self.0.to_be())\n                 }\n             }\n@@ -647,7 +647,7 @@ if cfg!(target_endian = \\\"little\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn to_le(self) -> Self {\n+                pub const fn to_le(self) -> Self {\n                     Wrapping(self.0.to_le())\n                 }\n             }\n@@ -707,7 +707,7 @@ assert_eq!(n.leading_zeros(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn leading_zeros(self) -> u32 {\n+                pub const fn leading_zeros(self) -> u32 {\n                     self.0.leading_zeros()\n                 }\n             }\n@@ -784,7 +784,7 @@ assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn is_positive(self) -> bool {\n+                pub const fn is_positive(self) -> bool {\n                     self.0.is_positive()\n                 }\n             }\n@@ -806,7 +806,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn is_negative(self) -> bool {\n+                pub const fn is_negative(self) -> bool {\n                     self.0.is_negative()\n                 }\n             }\n@@ -836,7 +836,7 @@ assert_eq!(n.leading_zeros(), 2);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn leading_zeros(self) -> u32 {\n+                pub const fn leading_zeros(self) -> u32 {\n                     self.0.leading_zeros()\n                 }\n             }"}, {"sha": "908490e1c839e5eb53d9eee6acf6ea2a414686f5", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -416,7 +416,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn start(&self) -> &Idx {\n+    pub const fn start(&self) -> &Idx {\n         &self.start\n     }\n \n@@ -440,7 +440,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn end(&self) -> &Idx {\n+    pub const fn end(&self) -> &Idx {\n         &self.end\n     }\n "}, {"sha": "a7bfc3f51244720b5990f3bde99239b695250e38", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -2905,7 +2905,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub fn as_ptr(self) -> *mut T {\n+    pub const fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n "}, {"sha": "fece328f51f474d45a7a3ae86c171bbf31341a1f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -385,7 +385,6 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_slice_as_ptr\")]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n     }"}, {"sha": "e710cbffe4d35da71ffd472d2201a002162a5861", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -2277,7 +2277,6 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_str_as_ptr\")]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n     }"}, {"sha": "938e97503deb6d716f88d693f6f68cf0933294ad", "filename": "src/libcore/time.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -209,7 +209,6 @@ impl Duration {\n     ///\n     /// [`subsec_nanos`]: #method.subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 { self.secs }\n \n@@ -229,7 +228,6 @@ impl Duration {\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 { self.nanos / NANOS_PER_MILLI }\n \n@@ -249,7 +247,6 @@ impl Duration {\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 { self.nanos / NANOS_PER_MICRO }\n \n@@ -269,7 +266,6 @@ impl Duration {\n     /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n \n@@ -286,7 +282,7 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n     #[inline]\n-    pub fn as_millis(&self) -> u128 {\n+    pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n     }\n \n@@ -303,7 +299,7 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n     #[inline]\n-    pub fn as_micros(&self) -> u128 {\n+    pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n     }\n \n@@ -320,7 +316,7 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n     #[inline]\n-    pub fn as_nanos(&self) -> u128 {\n+    pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n     }\n \n@@ -478,7 +474,7 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub fn as_float_secs(&self) -> f64 {\n+    pub const fn as_float_secs(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n "}, {"sha": "e525c0574002b2d83e96d9007dcf289ee16b31ca", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -2598,4 +2598,3 @@ pub mod conversions {\n     ];\n \n }\n-"}, {"sha": "66718b95408ca160f90bb3fd6f40506addc8a1be", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -1091,7 +1091,7 @@ impl CStr {\n     /// [`CString`]: struct.CString.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_ptr(&self) -> *const c_char {\n+    pub const fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()\n     }\n "}, {"sha": "2517c45696a2db4875c82fcf8d05b87b3800cf9e", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -424,7 +424,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_unspecified(&self) -> bool {\n+    pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n \n@@ -862,7 +862,6 @@ impl Ipv6Addr {\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_ip\")]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16,\n                      g: u16, h: u16) -> Ipv6Addr {\n         Ipv6Addr {\n@@ -1224,7 +1223,7 @@ impl Ipv6Addr {\n     ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n     /// ```\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n-    pub fn octets(&self) -> [u8; 16] {\n+    pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }\n }"}, {"sha": "c8bed4a2b77e147c29913c9477b1edb6a9339e58", "filename": "src/test/ui/consts/const-eval/duration_conversion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(duration_getters)]\n-\n use std::time::Duration;\n \n fn main() {"}, {"sha": "4136a7b6a724f2416970fd87009541dfc377fe78", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -23,13 +23,16 @@ unsafe impl Sync for Foo {}\n \n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n+fn foo() {}\n+\n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants\n-\n+    //~^ ERROR statements in statics are unstable (see issue #48821)\n     // This error is caused by a separate bug that the feature gate error is reported\n     // even though the feature gate \"const_let\" is active.\n-    //~| statements in statics are unstable (see issue #48821)\n+\n+    foo();\n+    //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants\n };\n \n fn main() {"}, {"sha": "c2bba27e4d1e29992595d93cd3daef068e290857", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -1,17 +1,17 @@\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:27:6\n-   |\n-LL |     *FOO.0.get() = 5;\n-   |      ^^^^^^^^^^^\n-\n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/mod-static-with-const-fn.rs:27:5\n+  --> $DIR/mod-static-with-const-fn.rs:29:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n+error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/mod-static-with-const-fn.rs:34:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+\n error: aborting due to 2 previous errors\n \n Some errors occurred: E0015, E0658."}, {"sha": "cf6c0f2379d1ebd65294fa040e917857b184e2de", "filename": "src/test/ui/consts/std/cell.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -0,0 +1,30 @@\n+use std::cell::*;\n+\n+// not ok, because this would create a silent constant with interior mutability.\n+// the rules could be relaxed in the future\n+static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n+//~^ ERROR cannot borrow a constant which may contain interior mutability\n+\n+static FOO3: Wrap<Cell<u32>> = Wrap(Cell::new(42));\n+// ok\n+static FOO4: Wrap<*mut u32> = Wrap(FOO3.0.as_ptr());\n+\n+// not ok, because the `as_ptr` call takes a reference to a type with interior mutability\n+// which is not allowed in constants\n+const FOO2: *mut u32 = Cell::new(42).as_ptr();\n+//~^ ERROR cannot borrow a constant which may contain interior mutability\n+\n+struct IMSafeTrustMe(UnsafeCell<u32>);\n+unsafe impl Send for IMSafeTrustMe {}\n+unsafe impl Sync for IMSafeTrustMe {}\n+\n+static BAR: IMSafeTrustMe = IMSafeTrustMe(UnsafeCell::new(5));\n+\n+\n+struct Wrap<T>(T);\n+unsafe impl<T> Send for Wrap<T> {}\n+unsafe impl<T> Sync for Wrap<T> {}\n+\n+static BAR_PTR: Wrap<*mut u32> = Wrap(BAR.0.get());\n+\n+fn main() {}"}, {"sha": "f75aadff6d5ea135a4a9f6893fc1b70bd4399add", "filename": "src/test/ui/consts/std/cell.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -0,0 +1,15 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/cell.rs:5:35\n+   |\n+LL | static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n+   |                                   ^^^^^^^^^^^^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/cell.rs:14:24\n+   |\n+LL | const FOO2: *mut u32 = Cell::new(42).as_ptr();\n+   |                        ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0492`."}, {"sha": "fe79059a2e497148f82e4c8a97930f98bdfc17cd", "filename": "src/test/ui/consts/std/char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fchar.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+static X: bool = 'a'.is_ascii();\n+static Y: bool = '\u00e4'.is_ascii();\n+\n+fn main() {\n+    assert!(X);\n+    assert!(!Y);\n+}"}, {"sha": "e9af781eb2b8d40a1ab786332b7d22742298e9fd", "filename": "src/test/ui/consts/std/iter.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fiter.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+const I: std::iter::Empty<u32> = std::iter::empty();\n+\n+fn main() {\n+    for i in I {\n+        panic!(\"magical value creation: {}\", i);\n+    }\n+}"}, {"sha": "ad38105b6aa0eaf1c287ff628c080b4becb6f629", "filename": "src/test/ui/consts/std/slice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fslice.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+\n+struct Wrap<T>(T);\n+unsafe impl<T> Send for Wrap<T> {}\n+unsafe impl<T> Sync for Wrap<T> {}\n+\n+static FOO: Wrap<*const u32> = Wrap([42, 44, 46].as_ptr());\n+static BAR: Wrap<*const u8> = Wrap(\"hello\".as_ptr());\n+\n+fn main() {}"}, {"sha": "545c179dec9fc6d92f9a97f3d454ae026faffb62", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0195812aeafeecaa8760a4ddceae187472db8fe6/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0195812aeafeecaa8760a4ddceae187472db8fe6/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs?ref=0195812aeafeecaa8760a4ddceae187472db8fe6", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test should fail since identity is not stable as a const fn yet.\n-\n-#![feature(convert_id)]\n-\n-fn main() {\n-    const _FOO: u8 = ::std::convert::identity(42u8);\n-}"}, {"sha": "dfd8619d87516b805105841afb9ce571a0c5d74e", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0195812aeafeecaa8760a4ddceae187472db8fe6/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0195812aeafeecaa8760a4ddceae187472db8fe6/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr?ref=0195812aeafeecaa8760a4ddceae187472db8fe6", "patch": "@@ -1,10 +0,0 @@\n-error: `std::convert::identity` is not yet stable as a const fn\n-  --> $DIR/convert-id-const-no-gate.rs:16:22\n-   |\n-LL |     const _FOO: u8 = ::std::convert::identity(42u8);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: in Nightly builds, add `#![feature(const_convert_id)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "2e71aee57c2f18abcf1b5f014b0537cf2310c2cd", "filename": "src/test/ui/rfc-2306/convert-id-const-with-gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65204a97d4876b897df0a70c0b9248b57e2bf057/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs?ref=65204a97d4876b897df0a70c0b9248b57e2bf057", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This test should pass since we've opted into 'identity' as an\n-// unstable const fn.\n+// This test should pass since 'identity' is const fn.\n \n // compile-pass\n \n-#![feature(convert_id, const_convert_id)]\n+#![feature(convert_id)]\n \n fn main() {\n     const _FOO: u8 = ::std::convert::identity(42u8);"}]}