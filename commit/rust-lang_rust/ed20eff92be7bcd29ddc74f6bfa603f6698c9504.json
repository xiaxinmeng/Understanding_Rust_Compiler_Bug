{"sha": "ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMjBlZmY5MmJlN2JjZDI5ZGRjNzRmNmJmYTYwM2Y2Njk4Yzk1MDQ=", "commit": {"author": {"name": "Joe Ellis", "email": "joe.ellis@arm.com", "date": "2020-08-04T10:18:13Z"}, "committer": {"name": "Joe Ellis", "email": "joe.ellis@arm.com", "date": "2020-09-14T09:31:44Z"}, "message": "Implementation of peer credentials for Unix sockets\n\nThe code in `ucred.rs` is based on the work done in PR 13 in the\ntokio-uds repository on GitHub. Link below for reference:\n\n    https://github.com/tokio-rs/tokio-uds/pull/13\n\nCredit to Martin Habov\u0161tiak (GitHub username Kixunil) and contributors\nfor this work!", "tree": {"sha": "90a06f39d0603d7c431c116bddf6aaddfc519f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a06f39d0603d7c431c116bddf6aaddfc519f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "html_url": "https://github.com/rust-lang/rust/commit/ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/comments", "author": {"login": "joechrisellis", "id": 6762885, "node_id": "MDQ6VXNlcjY3NjI4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/6762885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joechrisellis", "html_url": "https://github.com/joechrisellis", "followers_url": "https://api.github.com/users/joechrisellis/followers", "following_url": "https://api.github.com/users/joechrisellis/following{/other_user}", "gists_url": "https://api.github.com/users/joechrisellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/joechrisellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joechrisellis/subscriptions", "organizations_url": "https://api.github.com/users/joechrisellis/orgs", "repos_url": "https://api.github.com/users/joechrisellis/repos", "events_url": "https://api.github.com/users/joechrisellis/events{/privacy}", "received_events_url": "https://api.github.com/users/joechrisellis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joechrisellis", "id": 6762885, "node_id": "MDQ6VXNlcjY3NjI4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/6762885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joechrisellis", "html_url": "https://github.com/joechrisellis", "followers_url": "https://api.github.com/users/joechrisellis/followers", "following_url": "https://api.github.com/users/joechrisellis/following{/other_user}", "gists_url": "https://api.github.com/users/joechrisellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/joechrisellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joechrisellis/subscriptions", "organizations_url": "https://api.github.com/users/joechrisellis/orgs", "repos_url": "https://api.github.com/users/joechrisellis/repos", "events_url": "https://api.github.com/users/joechrisellis/events{/privacy}", "received_events_url": "https://api.github.com/users/joechrisellis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc8b181954e3a4cbce91466e44027600d4c94ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc8b181954e3a4cbce91466e44027600d4c94ef", "html_url": "https://github.com/rust-lang/rust/commit/5bc8b181954e3a4cbce91466e44027600d4c94ef"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "f43546880983ab3c18ad3da2f66d9eadb9c80aad", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "patch": "@@ -37,6 +37,18 @@ pub mod process;\n pub mod raw;\n pub mod thread;\n \n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub mod ucred;\n+\n /// A prelude for conveniently writing platform-specific code.\n ///\n /// Includes all extension traits, and some important type definitions."}, {"sha": "930a67970005b0c3550e25e59032f626db736fab", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "patch": "@@ -30,6 +30,29 @@ use crate::sys::{self, cvt};\n use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+use crate::os::unix::ucred;\n+\n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub use ucred::UCred;\n+\n #[cfg(any(\n     target_os = \"linux\",\n     target_os = \"android\",\n@@ -405,6 +428,24 @@ impl UnixStream {\n         SocketAddr::new(|addr, len| unsafe { libc::getpeername(*self.0.as_inner(), addr, len) })\n     }\n \n+    /// Gets the peer credentials for this Unix domain socket.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::os::unix::net::UnixStream;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let peer_cred = socket.peer_cred().expect(\"Couldn't get peer credentials\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+    pub fn peer_cred(&self) -> io::Result<UCred> {\n+        ucred::peer_cred(self)\n+    }\n+\n     /// Sets the read timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`read`] calls will block"}, {"sha": "dec97ade126b17f53993b7d959cdda79fa378646", "filename": "library/std/src/sys/unix/ext/ucred.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed20eff92be7bcd29ddc74f6bfa603f6698c9504/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs?ref=ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "patch": "@@ -0,0 +1,92 @@\n+//! Unix peer credentials.\n+\n+// NOTE: Code in this file is heavily based on work done in PR 13 from the tokio-uds repository on\n+//       GitHub.\n+//\n+//       For reference, the link is here: https://github.com/tokio-rs/tokio-uds/pull/13\n+//       Credit to Martin Habov\u0161tiak (GitHub username Kixunil) and contributors for this work.\n+\n+use libc::{gid_t, uid_t};\n+\n+/// Credentials for a UNIX process for credentials passing.\n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\n+pub struct UCred {\n+    pub uid: uid_t,\n+    pub gid: gid_t,\n+}\n+\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n+pub use self::impl_linux::peer_cred;\n+\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub use self::impl_bsd::peer_cred;\n+\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub mod impl_linux {\n+    use super::UCred;\n+    use crate::mem::MaybeUninit;\n+    use crate::os::unix::io::AsRawFd;\n+    use crate::os::unix::net::UnixStream;\n+    use crate::{io, mem};\n+\n+    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        use libc::{c_void, ucred};\n+\n+        let ucred_size = mem::size_of::<ucred>();\n+\n+        // Trivial sanity checks.\n+        assert!(mem::size_of::<u32>() <= mem::size_of::<usize>());\n+        assert!(ucred_size <= u32::max_value() as usize);\n+\n+        let mut ucred_size = ucred_size as u32;\n+\n+        unsafe {\n+            let mut ucred: ucred = MaybeUninit::uninit().assume_init();\n+            let ret = libc::getsockopt(\n+                socket.as_raw_fd(),\n+                libc::SOL_SOCKET,\n+                libc::SO_PEERCRED,\n+                &mut ucred as *mut ucred as *mut c_void,\n+                &mut ucred_size,\n+            );\n+\n+            if ret == 0 && ucred_size as usize == mem::size_of::<ucred>() {\n+                Ok(UCred { uid: ucred.uid, gid: ucred.gid })\n+            } else {\n+                Err(io::Error::last_os_error())\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+    target_os = \"freebsd\",\n+    target_os = \"openbsd\"\n+))]\n+pub mod impl_bsd {\n+    use super::UCred;\n+    use crate::io;\n+    use crate::mem::MaybeUninit;\n+    use crate::os::unix::io::AsRawFd;\n+    use crate::os::unix::net::UnixStream;\n+\n+    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        unsafe {\n+            // Create `cred` and attempt to populate it.\n+            let mut cred: UCred = MaybeUninit::uninit().assume_init();\n+            let ret = libc::getpeereid(socket.as_raw_fd(), &mut cred.uid, &mut cred.gid);\n+\n+            if ret == 0 { Ok(cred) } else { Err(io::Error::last_os_error()) }\n+        }\n+    }\n+}"}]}