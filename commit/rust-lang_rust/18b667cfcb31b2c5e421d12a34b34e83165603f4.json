{"sha": "18b667cfcb31b2c5e421d12a34b34e83165603f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YjY2N2NmY2IzMWIyYzVlNDIxZDEyYTM0YjM0ZTgzMTY1NjAzZjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T15:20:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T15:22:23Z"}, "message": "Complete `pub` in fields", "tree": {"sha": "c9a8da95da29f52b35e7f06171a34ecaeb9b8cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a8da95da29f52b35e7f06171a34ecaeb9b8cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b667cfcb31b2c5e421d12a34b34e83165603f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b667cfcb31b2c5e421d12a34b34e83165603f4", "html_url": "https://github.com/rust-lang/rust/commit/18b667cfcb31b2c5e421d12a34b34e83165603f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b667cfcb31b2c5e421d12a34b34e83165603f4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8bc132dc6dee538964fffa0720480beb5b25dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8bc132dc6dee538964fffa0720480beb5b25dd", "html_url": "https://github.com/rust-lang/rust/commit/6b8bc132dc6dee538964fffa0720480beb5b25dd"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "53ba76e0e9fb2be5463a79f6cd87dfee6b809252", "filename": "crates/ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -129,8 +129,9 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"break\", \"break\");\n         }\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.has_impl_parent {\n-        add_keyword(ctx, acc, \"pub\", \"pub \")\n+    if ctx.has_item_list_or_source_file_parent || ctx.has_impl_parent | ctx.has_field_list_parent {\n+        add_keyword(ctx, acc, \"pub(crate)\", \"pub(crate) \");\n+        add_keyword(ctx, acc, \"pub\", \"pub \");\n     }\n \n     if !ctx.is_trivial_path {\n@@ -227,6 +228,7 @@ mod tests {\n                 kw impl\n                 kw mod\n                 kw pub\n+                kw pub(crate)\n                 kw static\n                 kw struct\n                 kw trait\n@@ -364,6 +366,7 @@ fn quux() -> i32 {\n                 kw const\n                 kw fn\n                 kw pub\n+                kw pub(crate)\n                 kw type\n                 kw unsafe\n             \"#]],\n@@ -524,4 +527,20 @@ pub mod future {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn before_field() {\n+        check(\n+            r#\"\n+struct Foo {\n+    <|>\n+    pub f: i32,\n+}\n+\"#,\n+            expect![[r#\"\n+                kw pub\n+                kw pub(crate)\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "4837d2910002e104ea29a8e136e16e6841bcf708", "filename": "crates/ide/src/completion/complete_snippet.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -65,7 +65,6 @@ fn ${1:feature}() {\n     .add_to(acc);\n \n     snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\").add_to(acc);\n-    snippet(ctx, cap, \"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n }\n \n #[cfg(test)]\n@@ -107,7 +106,6 @@ mod tests {\n \"#,\n             expect![[r#\"\n                 sn macro_rules\n-                sn pub(crate)\n                 sn tfn (Test function)\n                 sn tmod (Test module)\n             \"#]],"}, {"sha": "47355d5dcba3ae91d1d99e32bf89576e5f721624", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -16,9 +16,10 @@ use crate::{\n     call_info::ActiveParameter,\n     completion::{\n         patterns::{\n-            has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n-            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n-            has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm, unsafe_is_prev,\n+            has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n+            has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n+            has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev,\n+            is_in_loop_body, is_match_arm, unsafe_is_prev,\n         },\n         CompletionConfig,\n     },\n@@ -84,6 +85,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) in_loop_body: bool,\n     pub(super) has_trait_parent: bool,\n     pub(super) has_impl_parent: bool,\n+    pub(super) has_field_list_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n@@ -157,6 +159,7 @@ impl<'a> CompletionContext<'a> {\n             block_expr_parent: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n+            has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n             if_is_prev: false,\n@@ -230,6 +233,7 @@ impl<'a> CompletionContext<'a> {\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.has_trait_parent = has_trait_parent(syntax_element.clone());\n         self.has_impl_parent = has_impl_parent(syntax_element.clone());\n+        self.has_field_list_parent = has_field_list_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());\n         self.is_match_arm = is_match_arm(syntax_element.clone());"}, {"sha": "c6ae589db0de4d8c608f4a0f3c0d2bfb5985b699", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -34,6 +34,14 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n fn test_has_impl_parent() {\n     check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n }\n+pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element).filter(|it| it.kind() == RECORD_FIELD_LIST).is_some()\n+}\n+#[test]\n+fn test_has_field_list_parent() {\n+    check_pattern_is_applicable(r\"struct Foo { f<|> }\", has_field_list_parent);\n+    check_pattern_is_applicable(r\"struct Foo { f<|> pub f: i32}\", has_field_list_parent);\n+}\n \n pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()"}, {"sha": "9d00eb9b90ab56af5f13404d48db7e53e0c1a6c2", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -18,7 +18,14 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(token_set![\n     T![dyn],\n ]);\n \n-const TYPE_RECOVERY_SET: TokenSet = token_set![R_PAREN, COMMA, L_DOLLAR];\n+const TYPE_RECOVERY_SET: TokenSet = token_set![\n+    T![')'],\n+    T![,],\n+    L_DOLLAR,\n+    // test_err struct_field_recover\n+    // struct S { f pub g: () }\n+    T![pub],\n+];\n \n pub(crate) fn type_(p: &mut Parser) {\n     type_with_bounds_cond(p, true);"}, {"sha": "ba8e50993d75ff826f7a9041bff264919cc7b738", "filename": "crates/syntax/test_data/parser/inline/err/0014_struct_field_recover.rast", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rast?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@0..25\n+  STRUCT@0..24\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..24\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..12\n+        NAME@11..12\n+          IDENT@11..12 \"f\"\n+      WHITESPACE@12..13 \" \"\n+      RECORD_FIELD@13..22\n+        VISIBILITY@13..16\n+          PUB_KW@13..16 \"pub\"\n+        WHITESPACE@16..17 \" \"\n+        NAME@17..18\n+          IDENT@17..18 \"g\"\n+        COLON@18..19 \":\"\n+        WHITESPACE@19..20 \" \"\n+        TUPLE_TYPE@20..22\n+          L_PAREN@20..21 \"(\"\n+          R_PAREN@21..22 \")\"\n+      WHITESPACE@22..23 \" \"\n+      R_CURLY@23..24 \"}\"\n+  WHITESPACE@24..25 \"\\n\"\n+error 12..12: expected COLON\n+error 12..12: expected type\n+error 12..12: expected COMMA"}, {"sha": "da32227adcd7d389bcbc32808cde0e52f6141747", "filename": "crates/syntax/test_data/parser/inline/err/0014_struct_field_recover.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b667cfcb31b2c5e421d12a34b34e83165603f4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_struct_field_recover.rs?ref=18b667cfcb31b2c5e421d12a34b34e83165603f4", "patch": "@@ -0,0 +1 @@\n+struct S { f pub g: () }"}]}