{"sha": "becdba80ea777afb8ebcd482fc657728b1661dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlY2RiYTgwZWE3NzdhZmI4ZWJjZDQ4MmZjNjU3NzI4YjE2NjFkYmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T00:00:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:39Z"}, "message": "Address comments in lowering + parsing.", "tree": {"sha": "aad22e7153e63d351731eaece03096daad706dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad22e7153e63d351731eaece03096daad706dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/becdba80ea777afb8ebcd482fc657728b1661dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/becdba80ea777afb8ebcd482fc657728b1661dbf", "html_url": "https://github.com/rust-lang/rust/commit/becdba80ea777afb8ebcd482fc657728b1661dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/becdba80ea777afb8ebcd482fc657728b1661dbf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397a027aa76cc3a615858d05efe34857fe4fc8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/397a027aa76cc3a615858d05efe34857fe4fc8dc", "html_url": "https://github.com/rust-lang/rust/commit/397a027aa76cc3a615858d05efe34857fe4fc8dc"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "bc2c835e2105049db922a305a76268967eaf673c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/becdba80ea777afb8ebcd482fc657728b1661dbf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becdba80ea777afb8ebcd482fc657728b1661dbf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=becdba80ea777afb8ebcd482fc657728b1661dbf", "patch": "@@ -4185,7 +4185,7 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                let (pats, ddpos) = self.lower_pat_tuple(&*pats, \"tuple struct\");\n+                let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                 hir::PatKind::TupleStruct(qpath, pats, ddpos)\n             }\n             PatKind::Path(ref qself, ref path) => {\n@@ -4224,7 +4224,7 @@ impl<'a> LoweringContext<'a> {\n                 hir::PatKind::Struct(qpath, fs, etc)\n             }\n             PatKind::Tuple(ref pats) => {\n-                let (pats, ddpos) = self.lower_pat_tuple(&*pats, \"tuple\");\n+                let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple\");\n                 hir::PatKind::Tuple(pats, ddpos)\n             }\n             PatKind::Box(ref inner) => hir::PatKind::Box(self.lower_pat(inner)),\n@@ -4245,7 +4245,7 @@ impl<'a> LoweringContext<'a> {\n             PatKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n-        self.pat_bound(p, node)\n+        self.pat_with_node_id_of(p, node)\n     }\n \n     fn lower_pat_tuple(\n@@ -4291,14 +4291,14 @@ impl<'a> LoweringContext<'a> {\n             match pat.node {\n                 PatKind::Rest => {\n                     prev_rest_span = Some(pat.span);\n-                    slice = Some(self.pat_bound_wild(pat));\n+                    slice = Some(self.pat_wild_with_node_id_of(pat));\n                     break;\n                 },\n                 PatKind::Ident(ref bm, ident, Some(ref sub)) if sub.is_rest() => {\n                     prev_rest_span = Some(sub.span);\n-                    let lower_sub = |this: &mut Self| Some(this.pat_bound_wild(sub));\n+                    let lower_sub = |this: &mut Self| Some(this.pat_wild_with_node_id_of(sub));\n                     let node = self.lower_pat_ident(pat, bm, ident, lower_sub);\n-                    slice = Some(self.pat_bound(pat, node));\n+                    slice = Some(self.pat_with_node_id_of(pat, node));\n                     break;\n                 },\n                 _ => {}\n@@ -4314,7 +4314,7 @@ impl<'a> LoweringContext<'a> {\n                 PatKind::Rest => Some(pat.span),\n                 PatKind::Ident(.., Some(ref sub)) if sub.is_rest() => {\n                     // The `HirValidator` is merciless; add a `_` pattern to avoid ICEs.\n-                    after.push(self.pat_bound_wild(pat));\n+                    after.push(self.pat_wild_with_node_id_of(pat));\n                     Some(sub.span)\n                 },\n                 _ => None,\n@@ -4362,12 +4362,12 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn pat_bound_wild(&mut self, p: &Pat) -> P<hir::Pat> {\n-        self.pat_bound(p, hir::PatKind::Wild)\n+    fn pat_wild_with_node_id_of(&mut self, p: &Pat) -> P<hir::Pat> {\n+        self.pat_with_node_id_of(p, hir::PatKind::Wild)\n     }\n \n     /// Construct a `Pat` with the `HirId` of `p.id` lowered.\n-    fn pat_bound(&mut self, p: &Pat, node: hir::PatKind) -> P<hir::Pat> {\n+    fn pat_with_node_id_of(&mut self, p: &Pat, node: hir::PatKind) -> P<hir::Pat> {\n         P(hir::Pat {\n             hir_id: self.lower_node_id(p.id),\n             node,"}, {"sha": "8f8ed4111808da3a5d1424b772e2f9636f74f8ab", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/becdba80ea777afb8ebcd482fc657728b1661dbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becdba80ea777afb8ebcd482fc657728b1661dbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=becdba80ea777afb8ebcd482fc657728b1661dbf", "patch": "@@ -3748,8 +3748,9 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parse a parentesized comma separated sequence of patterns until `delim` is reached.\n-    fn parse_recover_pat_list(&mut self) -> PResult<'a, ()> {\n+    /// Parse and throw away a parentesized comma separated\n+    /// sequence of patterns until `)` is reached.\n+    fn skip_pat_list(&mut self) -> PResult<'a, ()> {\n         while !self.check(&token::CloseDelim(token::Paren)) {\n             self.parse_pat(None)?;\n             if !self.eat(&token::Comma) {\n@@ -3772,7 +3773,7 @@ impl<'a> Parser<'a> {\n             // later.\n             let comma_span = self.token.span;\n             self.bump();\n-            if let Err(mut err) = self.parse_recover_pat_list() {\n+            if let Err(mut err) = self.skip_pat_list() {\n                 // We didn't expect this to work anyway; we just wanted\n                 // to advance to the end of the comma-sequence so we know\n                 // the span to suggest parenthesizing\n@@ -3877,9 +3878,11 @@ impl<'a> Parser<'a> {\n                 pat = PatKind::Ref(subpat, mutbl);\n             }\n             token::OpenDelim(token::Paren) => {\n-                // Parse `(pat, pat, pat, ...)` as tuple pattern.\n+                // Parse a tuple or parenthesis pattern.\n                 let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n \n+                // Here, `(pat,)` is a tuple pattern.\n+                // For backward compatibility, `(..)` is a tuple pattern as well.\n                 pat = if fields.len() == 1 && !(trailing_comma || fields[0].is_rest()) {\n                     PatKind::Paren(fields.into_iter().nth(0).unwrap())\n                 } else {"}]}