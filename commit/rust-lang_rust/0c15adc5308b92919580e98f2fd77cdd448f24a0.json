{"sha": "0c15adc5308b92919580e98f2fd77cdd448f24a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMTVhZGM1MzA4YjkyOTE5NTgwZTk4ZjJmZDc3Y2RkNDQ4ZjI0YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T20:50:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T20:50:56Z"}, "message": "Auto merge of #67742 - mark-i-m:describe-it, r=matthewjasper\n\nGeneralized article_and_description\n\nr? @matthewjasper\n\nThe logic of finding the right word and article to print seems to be repeated elsewhere... this is an experimental method to unify this logic...", "tree": {"sha": "9300cca32fcd55d5c08901e3ff8ccf4cd3cc2ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9300cca32fcd55d5c08901e3ff8ccf4cd3cc2ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c15adc5308b92919580e98f2fd77cdd448f24a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c15adc5308b92919580e98f2fd77cdd448f24a0", "html_url": "https://github.com/rust-lang/rust/commit/0c15adc5308b92919580e98f2fd77cdd448f24a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c15adc5308b92919580e98f2fd77cdd448f24a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc3073c92df034636a823c5382ece2186d22b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3073c92df034636a823c5382ece2186d22b9e", "html_url": "https://github.com/rust-lang/rust/commit/abc3073c92df034636a823c5382ece2186d22b9e"}, {"sha": "9434d6b67fb0817e7db5217e6355cbf4c7e402f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9434d6b67fb0817e7db5217e6355cbf4c7e402f6", "html_url": "https://github.com/rust-lang/rust/commit/9434d6b67fb0817e7db5217e6355cbf4c7e402f6"}], "stats": {"total": 294, "additions": 169, "deletions": 125}, "files": [{"sha": "3a6961660fd696286ed12c724e46584267e0c597", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -308,6 +308,9 @@ rustc_queries! {\n         /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n         query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n \n+        /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n+        query generator_kind(_: DefId) -> Option<hir::GeneratorKind> {}\n+\n         /// Gets a map with the variance of every item; use `item_variance` instead.\n         query crate_variances(_: CrateNum) -> &'tcx ty::CrateVariancesMap<'tcx> {\n             desc { \"computing the variances for items in this crate\" }"}, {"sha": "823cbf0966de977b9d47d65b7682b1f7a21fcd28", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -5,7 +5,7 @@ use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor};\n use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n-use crate::hir::map::DefPathHash;\n+use crate::hir::map::{DefPathData, DefPathHash};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintSource};\n@@ -209,7 +209,7 @@ fn validate_hir_id_for_typeck_tables(\n             ty::tls::with(|tcx| {\n                 bug!(\n                     \"node {} with HirId::owner {:?} cannot be placed in \\\n-                        TypeckTables with local_id_root {:?}\",\n+                     TypeckTables with local_id_root {:?}\",\n                     tcx.hir().node_to_string(hir_id),\n                     DefId::local(hir_id.owner),\n                     local_id_root\n@@ -1512,6 +1512,24 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n+\n+    /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"struct\")`).\n+    pub fn article_and_description(&self, def_id: DefId) -> (&'static str, &'static str) {\n+        match self.def_key(def_id).disambiguated_data.data {\n+            DefPathData::TypeNs(..) | DefPathData::ValueNs(..) | DefPathData::MacroNs(..) => {\n+                let kind = self.def_kind(def_id).unwrap();\n+                (kind.article(), kind.descr(def_id))\n+            }\n+            DefPathData::ClosureExpr => match self.generator_kind(def_id) {\n+                None => (\"a\", \"closure\"),\n+                Some(rustc_hir::GeneratorKind::Async(..)) => (\"an\", \"async closure\"),\n+                Some(rustc_hir::GeneratorKind::Gen) => (\"a\", \"generator\"),\n+            },\n+            DefPathData::LifetimeNs(..) => (\"a\", \"lifetime\"),\n+            DefPathData::Impl => (\"an\", \"implementation\"),\n+            _ => bug!(\"article_and_description called on def_id {:?}\", def_id),\n+        }\n+    }\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {"}, {"sha": "ee68697d260b3a4a5bfcbbdaeee491bc7ba84f54", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -492,7 +492,7 @@ impl MetadataBlob {\n     }\n }\n \n-impl<'tcx> EntryKind<'tcx> {\n+impl EntryKind {\n     fn def_kind(&self) -> Option<DefKind> {\n         Some(match *self {\n             EntryKind::Const(..) => DefKind::Const,\n@@ -606,11 +606,11 @@ impl<'a, 'tcx> CrateMetadata {\n         self.root.proc_macro_data.and_then(|data| data.decode(self).find(|x| *x == id)).is_some()\n     }\n \n-    fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind<'tcx>> {\n+    fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind> {\n         self.root.per_def.kind.get(self, item_id).map(|k| k.decode(self))\n     }\n \n-    fn kind(&self, item_id: DefIndex) -> EntryKind<'tcx> {\n+    fn kind(&self, item_id: DefIndex) -> EntryKind {\n         assert!(!self.is_proc_macro(item_id));\n         self.maybe_kind(item_id).unwrap_or_else(|| {\n             bug!(\n@@ -715,7 +715,7 @@ impl<'a, 'tcx> CrateMetadata {\n     fn get_variant(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        kind: &EntryKind<'_>,\n+        kind: &EntryKind,\n         index: DefIndex,\n         parent_did: DefId,\n     ) -> ty::VariantDef {\n@@ -1382,6 +1382,13 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    fn generator_kind(&self, id: DefIndex) -> Option<hir::GeneratorKind> {\n+        match self.kind(id) {\n+            EntryKind::Generator(data) => Some(data),\n+            _ => None,\n+        }\n+    }\n+\n     fn fn_sig(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n         self.root.per_def.fn_sig.get(self, id).unwrap().decode((self, tcx))\n     }\n@@ -1491,8 +1498,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     );\n                     debug!(\n                         \"CrateMetaData::imported_source_files alloc \\\n-                        source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n-                        translated (start_pos {:?} end_pos {:?})\",\n+                         source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n+                         translated (start_pos {:?} end_pos {:?})\",\n                         local_version.name,\n                         start_pos,\n                         end_pos,"}, {"sha": "e6270e903295cc8202c26b5add5982d540b3811b", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -134,6 +134,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     asyncness => { cdata.asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n+    generator_kind => { cdata.generator_kind(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "ee54f40ece5c8c2cafeb68c5845ce5c88f9dc865", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> EncodeContext<'tcx> {\n                 assert!(\n                     last_min_end <= lazy.position,\n                     \"make sure that the calls to `lazy*` \\\n-                    are in the same order as the metadata fields\",\n+                     are in the same order as the metadata fields\",\n                 );\n                 lazy.position.get() - last_min_end.get()\n             }\n@@ -1248,12 +1248,7 @@ impl EncodeContext<'tcx> {\n         self.encode_deprecation(def_id);\n     }\n \n-    fn encode_info_for_generic_param(\n-        &mut self,\n-        def_id: DefId,\n-        kind: EntryKind<'tcx>,\n-        encode_type: bool,\n-    ) {\n+    fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {\n         record!(self.per_def.kind[def_id] <- kind);\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);\n         record!(self.per_def.span[def_id] <- self.tcx.def_span(def_id));\n@@ -1271,12 +1266,9 @@ impl EncodeContext<'tcx> {\n         let ty = self.tcx.typeck_tables_of(def_id).node_type(hir_id);\n \n         record!(self.per_def.kind[def_id] <- match ty.kind {\n-            ty::Generator(def_id, ..) => {\n-                let layout = self.tcx.generator_layout(def_id);\n-                let data = GeneratorData {\n-                    layout: layout.clone(),\n-                };\n-                EntryKind::Generator(self.lazy(data))\n+            ty::Generator(..) => {\n+                let data = self.tcx.generator_kind(def_id).unwrap();\n+                EntryKind::Generator(data)\n             }\n \n             ty::Closure(..) => EntryKind::Closure,"}, {"sha": "01a3f6c560f1bd1e3c3174a302022a1987827005", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -252,7 +252,7 @@ macro_rules! define_per_def_tables {\n }\n \n define_per_def_tables! {\n-    kind: Table<DefIndex, Lazy!(EntryKind<'tcx>)>,\n+    kind: Table<DefIndex, Lazy<EntryKind>>,\n     visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n     span: Table<DefIndex, Lazy<Span>>,\n     attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n@@ -279,7 +279,7 @@ define_per_def_tables! {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-enum EntryKind<'tcx> {\n+enum EntryKind {\n     Const(mir::ConstQualifs, Lazy<RenderedConst>),\n     ImmStatic,\n     MutStatic,\n@@ -302,7 +302,7 @@ enum EntryKind<'tcx> {\n     Mod(Lazy<ModData>),\n     MacroDef(Lazy<MacroDef>),\n     Closure,\n-    Generator(Lazy!(GeneratorData<'tcx>)),\n+    Generator(hir::GeneratorKind),\n     Trait(Lazy<TraitData>),\n     Impl(Lazy<ImplData>),\n     Method(Lazy<MethodData>),"}, {"sha": "83669a53eb4ac6dc5378ed296edbeb7b61b12d53", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -1257,7 +1257,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             _ => bug!(\n                 \"report_escaping_closure_capture called with unexpected constraint \\\n-                       category: `{:?}`\",\n+                 category: `{:?}`\",\n                 category\n             ),\n         };\n@@ -1275,17 +1275,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n-        let escapes_from = if tcx.is_closure(self.mir_def_id) {\n-            let tables = tcx.typeck_tables_of(self.mir_def_id);\n-            let mir_hir_id = tcx.hir().def_index_to_hir_id(self.mir_def_id.index);\n-            match tables.node_type(mir_hir_id).kind {\n-                ty::Closure(..) => \"closure\",\n-                ty::Generator(..) => \"generator\",\n-                _ => bug!(\"Closure body doesn't have a closure or generator type\"),\n-            }\n-        } else {\n-            \"function\"\n-        };\n+        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id);\n \n         let mut err =\n             borrowck_errors::borrowed_data_escapes_closure(tcx, escape_span, escapes_from);"}, {"sha": "8d991927d5437a3af9f3c6fd77ef1257f1ce36d8", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -427,18 +427,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             errci.outlived_fr,\n         );\n \n-        let escapes_from = match self.regioncx.universal_regions().defining_ty {\n-            DefiningTy::Closure(..) => \"closure\",\n-            DefiningTy::Generator(..) => \"generator\",\n-            DefiningTy::FnDef(..) => \"function\",\n-            DefiningTy::Const(..) => \"const\",\n-        };\n+        let (_, escapes_from) = self\n+            .infcx\n+            .tcx\n+            .article_and_description(self.regioncx.universal_regions().defining_ty.def_id());\n \n         // Revert to the normal error in these cases.\n         // Assignments aren't \"escapes\" in function items.\n         if (fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none())\n-            || (*category == ConstraintCategory::Assignment && escapes_from == \"function\")\n-            || escapes_from == \"const\"\n+            || (*category == ConstraintCategory::Assignment\n+                && self.regioncx.universal_regions().defining_ty.is_fn_def())\n+            || self.regioncx.universal_regions().defining_ty.is_const()\n         {\n             return self.report_general_error(&ErrorConstraintInfo {\n                 fr_is_local: true,\n@@ -504,8 +503,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut diag =\n             self.infcx.tcx.sess.struct_span_err(*span, \"lifetime may not live long enough\");\n \n-        let mir_def_name =\n-            if self.infcx.tcx.is_closure(self.mir_def_id) { \"closure\" } else { \"function\" };\n+        let (_, mir_def_name) = self.infcx.tcx.article_and_description(self.mir_def_id);\n \n         let fr_name = self.give_region_a_name(*fr).unwrap();\n         fr_name.highlight_region_name(&mut diag);"}, {"sha": "af4ea759f4f8b808adb054bf851d6f323fe9a2a3", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -131,6 +131,29 @@ impl<'tcx> DefiningTy<'tcx> {\n             DefiningTy::FnDef(..) | DefiningTy::Const(..) => 0,\n         }\n     }\n+\n+    pub fn is_fn_def(&self) -> bool {\n+        match *self {\n+            DefiningTy::FnDef(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_const(&self) -> bool {\n+        match *self {\n+            DefiningTy::Const(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn def_id(&self) -> DefId {\n+        match *self {\n+            DefiningTy::Closure(def_id, ..)\n+            | DefiningTy::Generator(def_id, ..)\n+            | DefiningTy::FnDef(def_id, ..)\n+            | DefiningTy::Const(def_id, ..) => def_id,\n+        }\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "869a1dcbcc7a6d8ed91ace9bf621b2dd60d0b69d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -76,6 +76,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         impl_polarity,\n         is_foreign_item,\n         static_mutability,\n+        generator_kind,\n         codegen_fn_attrs,\n         collect_mod_item_types,\n         ..*providers\n@@ -1006,7 +1007,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n             .struct_span_err(\n                 item.span,\n                 \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n-             which traits can use parenthetical notation\",\n+                 which traits can use parenthetical notation\",\n             )\n             .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to use it\")\n             .emit();\n@@ -2106,7 +2107,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                         ast_ty.span,\n                         &format!(\n                             \"use of SIMD type `{}` in FFI is highly experimental and \\\n-                            may result in invalid code\",\n+                             may result in invalid code\",\n                             tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n                         ),\n                     )\n@@ -2145,6 +2146,17 @@ fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability>\n     }\n }\n \n+fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Expr(&rustc_hir::Expr {\n+            kind: rustc_hir::ExprKind::Closure(_, _, body_id, _, _),\n+            ..\n+        })) => tcx.hir().body(body_id).generator_kind(),\n+        Some(_) => None,\n+        _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n+    }\n+}\n+\n fn from_target_feature(\n     tcx: TyCtxt<'_>,\n     id: DefId,"}, {"sha": "f72c645bf8dbf1e0bb99886fa50ba26cffcf8776", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -16,13 +16,13 @@ help: to force the closure to take ownership of `self` (and any other referenced\n LL |         foo(move || self.bar()).await;\n    |             ^^^^^^^\n \n-error[E0521]: borrowed data escapes outside of function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ----- `self` is a reference that is only valid in the function body\n+   |                               ----- `self` is a reference that is only valid in the method body\n LL |         foo(|| self.bar()).await;\n-   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the method body here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "696f79ec40f36a5f961903b5f23f7c4182c32ebf", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -9,7 +9,7 @@ LL |       ) -> &dyn Foo\n LL | /     {\n LL | |         foo\n LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   | |_____^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "f76e7a4e44fd73af119bbe34629d54b005748752", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -1,10 +1,10 @@\n-error[E0521]: borrowed data escapes outside of function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-16683.rs:4:9\n    |\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the function body\n+   |          ----- `self` is a reference that is only valid in the method body\n LL |         self.a();\n-   |         ^^^^^^^^ `self` escapes the function body here\n+   |         ^^^^^^^^ `self` escapes the method body here\n \n error: aborting due to previous error\n "}, {"sha": "92e21f4dc1769fa22dcaec0c62285b43ac6451ab", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -1,10 +1,10 @@\n-error[E0521]: borrowed data escapes outside of function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-17758.rs:7:9\n    |\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the function body\n+   |            ----- `self` is a reference that is only valid in the method body\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the function body here\n+   |         ^^^^^^^^^^ `self` escapes the method body here\n \n error: aborting due to previous error\n "}, {"sha": "291edc505cd1e28a5ff307ebdd1222fb5031a69b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            lifetime `'a` defined here\n LL | \n LL |         if x > y { x } else { y }\n-   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |                    ^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "15ee58574ecaa375c1d45421e162b1a5d8e09592", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -7,7 +7,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          lifetime `'a` defined here\n LL | \n LL |     x\n-   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |     ^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "a27a91e38f1e4d37d1b737db7559458ec3c95d73", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            lifetime `'a` defined here\n LL | \n LL |         if true { x } else { self }\n-   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |                              ^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "5f922d8560b2ad0e8aadf4eb38be2d8873d54da9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              |\n    |              let's call the lifetime of this reference `'2`\n LL |     x\n-   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |     ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "91d7597c87feafc58980e3d004c18178f53a9dc7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                |\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self }\n-   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                   ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "ee5a80ae6483f3bdf1a2e7bb1ce5619571c2baf8", "filename": "src/test/ui/nll/outlives-suggestion-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -70,7 +70,7 @@ pub struct Foo2<'a> {\n impl<'a> Foo2<'a> {\n     // should not produce outlives suggestions to name 'self\n     fn get_bar(&self) -> Bar2 {\n-        Bar2::new(&self) //~ERROR borrowed data escapes outside of function\n+        Bar2::new(&self) //~ERROR borrowed data escapes outside of method\n     }\n }\n "}, {"sha": "cf55603cd71f5b54371c24e54c3496b024e384fa", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -93,16 +93,16 @@ LL |         self.x\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-error[E0521]: borrowed data escapes outside of function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n LL |     fn get_bar(&self) -> Bar2 {\n    |                -----\n    |                |\n-   |                `self` declared here, outside of the function body\n-   |                `self` is a reference that is only valid in the function body\n+   |                `self` declared here, outside of the method body\n+   |                `self` is a reference that is only valid in the method body\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^ `self` escapes the method body here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "6afcf24cd3e1ea37eb0ff6d9c9a5f4ad3e2b95e0", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |         |\n    |                          |         let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -11,7 +11,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |          |\n    |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -20,7 +20,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              -                             ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  --              -                             ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |                  |               |\n    |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here"}, {"sha": "a659e4487856cf98b2be3c3e019e3e8e97a0e59e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                    -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |         |\n    |                    |         let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -11,7 +11,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                    -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |          |\n    |                    |          let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -20,7 +20,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |            |\n    |            lifetime `'a` defined here\n "}, {"sha": "57d0929c50a792140442fd3cd45ca2387ac6f064", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:19:9\n@@ -16,7 +16,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:23:9\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:27:9\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:31:9\n@@ -46,7 +46,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:35:9\n@@ -56,7 +56,7 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b51b5a0ba38f2b1232fe151f27c86175c95744ae", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:17:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:21:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:25:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:29:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self.rs:33:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   |\n    |                                   let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "46e828390b0fc8507fb541e4cd032b578a417268", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:19:9\n@@ -16,7 +16,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:23:9\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:27:9\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:31:9\n@@ -46,7 +46,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:35:9\n@@ -56,7 +56,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6c8c030e5fffaf2361e93e913688556d07ca3e58", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:17:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:21:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:25:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:29:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self.rs:33:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "99340800790ecba516781cc31a6b2171271aa437", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:17:9\n@@ -16,7 +16,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:21:9\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:25:9\n@@ -36,7 +36,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:29:9\n@@ -46,7 +46,7 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e3886444db2ad0500f443e22b01aa9c38dcd9eee", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:15:9\n@@ -16,7 +16,7 @@ LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:19:9\n@@ -26,7 +26,7 @@ LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:23:9\n@@ -36,7 +36,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct.rs:27:9\n@@ -46,7 +46,7 @@ LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ecac1ce3378d6a72547ccba0f091f76eb421d92e", "filename": "src/test/ui/self/elision/ref-self.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:27:9\n@@ -16,7 +16,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:31:9\n@@ -26,7 +26,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:35:9\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:39:9\n@@ -46,7 +46,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:43:9\n@@ -56,7 +56,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self.rs:47:9\n@@ -66,7 +66,7 @@ LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                      |\n    |                                      let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "bcbf79bc039fde1c103393f16943cc3a674ce221", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:17:9\n@@ -16,7 +16,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:21:9\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:25:9\n@@ -36,7 +36,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:29:9\n@@ -46,7 +46,7 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           |\n    |                                           let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "39e7631f31e7bd6c7efed1a817e8f560400ca57e", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c15adc5308b92919580e98f2fd77cdd448f24a0/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=0c15adc5308b92919580e98f2fd77cdd448f24a0", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:15:9\n@@ -16,7 +16,7 @@ LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:19:9\n@@ -26,7 +26,7 @@ LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:23:9\n@@ -36,7 +36,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct.rs:27:9\n@@ -46,7 +46,7 @@ LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to 5 previous errors\n "}]}