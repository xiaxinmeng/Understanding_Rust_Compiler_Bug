{"sha": "99eb4ddddd68e9ffa86eb8df264934925e27d737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWI0ZGRkZGQ2OGU5ZmZhODZlYjhkZjI2NDkzNDkyNWUyN2Q3Mzc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-30T00:30:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-30T02:59:58Z"}, "message": "add difference and symmetric_difference to Set", "tree": {"sha": "d3972ad2f93a965f46073b4195c8b4cbb3254058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3972ad2f93a965f46073b4195c8b4cbb3254058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99eb4ddddd68e9ffa86eb8df264934925e27d737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99eb4ddddd68e9ffa86eb8df264934925e27d737", "html_url": "https://github.com/rust-lang/rust/commit/99eb4ddddd68e9ffa86eb8df264934925e27d737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99eb4ddddd68e9ffa86eb8df264934925e27d737/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42cafcee2c740c6d2a85018a947b78338d2afa8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cafcee2c740c6d2a85018a947b78338d2afa8e", "html_url": "https://github.com/rust-lang/rust/commit/42cafcee2c740c6d2a85018a947b78338d2afa8e"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "15685ec6722515f3b4c1a816b8a64c6833137d7b", "filename": "src/libcore/container.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=99eb4ddddd68e9ffa86eb8df264934925e27d737", "patch": "@@ -75,4 +75,10 @@ pub trait Set<T>: Mutable {\n \n     /// Return true if the set is a superset of another\n     pure fn is_superset(&self, other: &self) -> bool;\n+\n+    /// Visit the values representing the difference\n+    pure fn difference(&self, other: &self, f: fn(&T) -> bool);\n+\n+    /// Visit the values representing the symmetric difference\n+    pure fn symmetric_difference(&self, other: &self, f: fn(&T) -> bool);\n }"}, {"sha": "5711c88e8907facd472beed5892bc49c7f719a79", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=99eb4ddddd68e9ffa86eb8df264934925e27d737", "patch": "@@ -469,6 +469,22 @@ pub mod linear {\n         pure fn is_superset(&self, other: &LinearSet<T>) -> bool {\n             other.is_subset(self)\n         }\n+\n+        /// Visit the values representing the difference\n+        pure fn difference(&self, other: &LinearSet<T>, f: fn(&T) -> bool) {\n+            for self.each |v| {\n+                if !other.contains(v) {\n+                    if !f(v) { return; }\n+                }\n+            }\n+        }\n+\n+        /// Visit the values representing the symmetric difference\n+        pure fn symmetric_difference(&self, other: &LinearSet<T>,\n+                                     f: fn(&T) -> bool) {\n+            self.difference(other, f);\n+            other.difference(self, f);\n+        }\n     }\n \n     pub impl <T: Hash IterBytes Eq> LinearSet<T> {\n@@ -681,4 +697,53 @@ mod test_set {\n         assert !b.is_subset(&a);\n         assert b.is_superset(&a);\n     }\n+\n+    #[test]\n+    fn test_difference() {\n+        let mut a = linear::LinearSet::new();\n+        let mut b = linear::LinearSet::new();\n+\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(5);\n+        assert a.insert(9);\n+        assert a.insert(11);\n+\n+        assert b.insert(3);\n+        assert b.insert(9);\n+\n+        let mut i = 0;\n+        let expected = [1, 5, 11];\n+        for a.difference(&b) |x| {\n+            assert vec::contains(expected, x);\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n+\n+    #[test]\n+    fn test_symmetric_difference() {\n+        let mut a = linear::LinearSet::new();\n+        let mut b = linear::LinearSet::new();\n+\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(5);\n+        assert a.insert(9);\n+        assert a.insert(11);\n+\n+        assert b.insert(-2);\n+        assert b.insert(3);\n+        assert b.insert(9);\n+        assert b.insert(14);\n+        assert b.insert(22);\n+\n+        let mut i = 0;\n+        let expected = [-2, 1, 5, 11, 14, 22];\n+        for a.symmetric_difference(&b) |x| {\n+            assert vec::contains(expected, x);\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n }"}, {"sha": "235db26354293a2e8330a1867051c5a242ed930b", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99eb4ddddd68e9ffa86eb8df264934925e27d737/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=99eb4ddddd68e9ffa86eb8df264934925e27d737", "patch": "@@ -29,10 +29,10 @@ use core::prelude::*;\n // range search - O(log n) retrieval of an iterator from some key\n \n // (possibly) implement the overloads Python does for sets:\n-//   * union: |\n //   * intersection: &\n //   * difference: -\n //   * symmetric difference: ^\n+//   * union: |\n // These would be convenient since the methods work like `each`\n \n pub struct TreeMap<K, V> {\n@@ -355,22 +355,6 @@ impl <T: Ord> TreeSet<T>: Set<T> {\n         }\n         true\n     }\n-}\n-\n-impl <T: Ord> TreeSet<T> {\n-    /// Create an empty TreeSet\n-    static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n-\n-    /// Visit all values in reverse order\n-    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n-        self.map.each_key_reverse(f)\n-    }\n-\n-    /// Get a lazy iterator over the values in the set.\n-    /// Requires that it be frozen (immutable).\n-    pure fn iter(&self) -> TreeSetIterator/&self<T> {\n-        TreeSetIterator{iter: self.map.iter()}\n-    }\n \n     /// Visit the values (in-order) representing the difference\n     pure fn difference(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n@@ -448,6 +432,22 @@ impl <T: Ord> TreeSet<T> {\n             }\n         }\n     }\n+}\n+\n+impl <T: Ord> TreeSet<T> {\n+    /// Create an empty TreeSet\n+    static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n+\n+    /// Visit all values in reverse order\n+    pure fn each_reverse(&self, f: fn(&T) -> bool) {\n+        self.map.each_key_reverse(f)\n+    }\n+\n+    /// Get a lazy iterator over the values in the set.\n+    /// Requires that it be frozen (immutable).\n+    pure fn iter(&self) -> TreeSetIterator/&self<T> {\n+        TreeSetIterator{iter: self.map.iter()}\n+    }\n \n     /// Visit the values (in-order) representing the intersection\n     pure fn intersection(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {"}]}