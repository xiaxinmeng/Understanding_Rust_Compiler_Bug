{"sha": "3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "node_id": "C_kwDOAAsO6NoAKDNiMWU1MzVmMzZhYzRjNDdkYzkxZDBlMzM5NGRjYTcyZmI4NmRiMGM", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-02-19T03:21:07Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-05-05T23:11:03Z"}, "message": "Factor out checks in layout check and add helper inherent_size.", "tree": {"sha": "ca5c8b12f19b6d2b85670090f7316028d43bb96c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5c8b12f19b6d2b85670090f7316028d43bb96c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "html_url": "https://github.com/rust-lang/rust/commit/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d81defa1e78921db326835fc9a7e21475868d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d81defa1e78921db326835fc9a7e21475868d1", "html_url": "https://github.com/rust-lang/rust/commit/f2d81defa1e78921db326835fc9a7e21475868d1"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "9c8a59979aa96250596fb316c7defe6f8d9a8b54", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "patch": "@@ -1273,7 +1273,7 @@ impl Abi {\n         matches!(*self, Abi::Scalar(_))\n     }\n \n-    /// Returns the fixed alignment of this ABI, if any\n+    /// Returns the fixed alignment of this ABI, if any is mandated.\n     pub fn inherent_align<C: HasDataLayout>(&self, cx: &C) -> Option<AbiAndPrefAlign> {\n         Some(match *self {\n             Abi::Scalar(s) => s.align(cx),\n@@ -1287,6 +1287,27 @@ impl Abi {\n         })\n     }\n \n+    /// Returns the fixed size of this ABI, if any is mandated.\n+    pub fn inherent_size<C: HasDataLayout>(&self, cx: &C) -> Option<Size> {\n+        Some(match *self {\n+            Abi::Scalar(s) => {\n+                // No padding in scalars.\n+                s.size(cx)\n+            }\n+            Abi::ScalarPair(s1, s2) => {\n+                // May have some padding between the pair.\n+                let field2_offset = s1.size(cx).align_to(s2.align(cx).abi);\n+                (field2_offset + s2.size(cx)).align_to(self.inherent_align(cx)?.abi)\n+            }\n+            Abi::Vector { element, count } => {\n+                // No padding in vectors, except possibly for trailing padding\n+                // to make the size a multiple of align (e.g. for vectors of size 3).\n+                (element.size(cx) * count).align_to(self.inherent_align(cx)?.abi)\n+            }\n+            Abi::Uninhabited | Abi::Aggregate { .. } => return None,\n+        })\n+    }\n+\n     /// Discard valid range information and allow undef\n     pub fn to_union(&self) -> Self {\n         assert!(self.is_sized());"}, {"sha": "c4a4cda68016dccc8599902bd48bd682d5ccb5ca", "filename": "compiler/rustc_ty_utils/src/layout_sanity_check.rs", "status": "modified", "additions": 40, "deletions": 54, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs?ref=3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::ty::{\n };\n use rustc_target::abi::*;\n \n-use std::cmp;\n+use std::assert_matches::assert_matches;\n \n /// Enforce some basic invariants on layouts.\n pub(super) fn sanity_check_layout<'tcx>(\n@@ -68,21 +68,31 @@ pub(super) fn sanity_check_layout<'tcx>(\n     }\n \n     fn check_layout_abi<'tcx>(cx: &LayoutCx<'tcx, TyCtxt<'tcx>>, layout: &TyAndLayout<'tcx>) {\n+        // Verify the ABI mandated alignment and size.\n+        let align = layout.abi.inherent_align(cx).map(|align| align.abi);\n+        let size = layout.abi.inherent_size(cx);\n+        let Some((align, size)) = align.zip(size) else {\n+            assert_matches!(\n+                layout.layout.abi(),\n+                Abi::Uninhabited | Abi::Aggregate { .. },\n+                \"ABI unexpectedly missing alignment and/or size in {layout:#?}\"\n+            );\n+            return\n+        };\n+        assert_eq!(\n+            layout.layout.align().abi,\n+            align,\n+            \"alignment mismatch between ABI and layout in {layout:#?}\"\n+        );\n+        assert_eq!(\n+            layout.layout.size(),\n+            size,\n+            \"size mismatch between ABI and layout in {layout:#?}\"\n+        );\n+\n+        // Verify per-ABI invariants\n         match layout.layout.abi() {\n-            Abi::Scalar(scalar) => {\n-                // No padding in scalars.\n-                let size = scalar.size(cx);\n-                let align = scalar.align(cx).abi;\n-                assert_eq!(\n-                    layout.layout.size(),\n-                    size,\n-                    \"size mismatch between ABI and layout in {layout:#?}\"\n-                );\n-                assert_eq!(\n-                    layout.layout.align().abi,\n-                    align,\n-                    \"alignment mismatch between ABI and layout in {layout:#?}\"\n-                );\n+            Abi::Scalar(_) => {\n                 // Check that this matches the underlying field.\n                 let inner = skip_newtypes(cx, layout);\n                 assert!(\n@@ -135,24 +145,6 @@ pub(super) fn sanity_check_layout<'tcx>(\n                 }\n             }\n             Abi::ScalarPair(scalar1, scalar2) => {\n-                // Sanity-check scalar pairs. Computing the expected size and alignment is a bit of work.\n-                let size1 = scalar1.size(cx);\n-                let align1 = scalar1.align(cx).abi;\n-                let size2 = scalar2.size(cx);\n-                let align2 = scalar2.align(cx).abi;\n-                let align = cmp::max(align1, align2);\n-                let field2_offset = size1.align_to(align2);\n-                let size = (field2_offset + size2).align_to(align);\n-                assert_eq!(\n-                    layout.layout.size(),\n-                    size,\n-                    \"size mismatch between ABI and layout in {layout:#?}\"\n-                );\n-                assert_eq!(\n-                    layout.layout.align().abi,\n-                    align,\n-                    \"alignment mismatch between ABI and layout in {layout:#?}\",\n-                );\n                 // Check that the underlying pair of fields matches.\n                 let inner = skip_newtypes(cx, layout);\n                 assert!(\n@@ -189,8 +181,9 @@ pub(super) fn sanity_check_layout<'tcx>(\n                         \"`ScalarPair` layout for type with less than two non-ZST fields: {inner:#?}\"\n                     )\n                 });\n-                assert!(\n-                    fields.next().is_none(),\n+                assert_matches!(\n+                    fields.next(),\n+                    None,\n                     \"`ScalarPair` layout for type with at least three non-ZST fields: {inner:#?}\"\n                 );\n                 // The fields might be in opposite order.\n@@ -200,6 +193,10 @@ pub(super) fn sanity_check_layout<'tcx>(\n                     (offset2, field2, offset1, field1)\n                 };\n                 // The fields should be at the right offset, and match the `scalar` layout.\n+                let size1 = scalar1.size(cx);\n+                let align1 = scalar1.align(cx).abi;\n+                let size2 = scalar2.size(cx);\n+                let align2 = scalar2.align(cx).abi;\n                 assert_eq!(\n                     offset1,\n                     Size::ZERO,\n@@ -213,10 +210,12 @@ pub(super) fn sanity_check_layout<'tcx>(\n                     field1.align.abi, align1,\n                     \"`ScalarPair` first field with bad align in {inner:#?}\",\n                 );\n-                assert!(\n-                    matches!(field1.abi, Abi::Scalar(_)),\n+                assert_matches!(\n+                    field1.abi,\n+                    Abi::Scalar(_),\n                     \"`ScalarPair` first field with bad ABI in {inner:#?}\",\n                 );\n+                let field2_offset = size1.align_to(align2);\n                 assert_eq!(\n                     offset2, field2_offset,\n                     \"`ScalarPair` second field at bad offset in {inner:#?}\",\n@@ -229,27 +228,14 @@ pub(super) fn sanity_check_layout<'tcx>(\n                     field2.align.abi, align2,\n                     \"`ScalarPair` second field with bad align in {inner:#?}\",\n                 );\n-                assert!(\n-                    matches!(field2.abi, Abi::Scalar(_)),\n+                assert_matches!(\n+                    field2.abi,\n+                    Abi::Scalar(_),\n                     \"`ScalarPair` second field with bad ABI in {inner:#?}\",\n                 );\n             }\n-            Abi::Vector { count, element } => {\n-                // No padding in vectors, except possibly for trailing padding to make the size a multiple of align.\n-                let size = element.size(cx) * count;\n-                let align = cx.data_layout().vector_align(size).abi;\n-                let size = size.align_to(align); // needed e.g. for vectors of size 3\n+            Abi::Vector { element, .. } => {\n                 assert!(align >= element.align(cx).abi); // just sanity-checking `vector_align`.\n-                assert_eq!(\n-                    layout.layout.size(),\n-                    size,\n-                    \"size mismatch between ABI and layout in {layout:#?}\"\n-                );\n-                assert_eq!(\n-                    layout.layout.align().abi,\n-                    align,\n-                    \"alignment mismatch between ABI and layout in {layout:#?}\"\n-                );\n                 // FIXME: Do some kind of check of the inner type, like for Scalar and ScalarPair.\n             }\n             Abi::Uninhabited | Abi::Aggregate { .. } => {} // Nothing to check."}, {"sha": "73a2f6af579a6321d95c50fdfcdbdf0637a84e2e", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1e535f36ac4c47dc91d0e3394dca72fb86db0c/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=3b1e535f36ac4c47dc91d0e3394dca72fb86db0c", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(assert_matches)]\n #![feature(iterator_try_collect)]\n #![feature(let_chains)]\n #![feature(never_type)]"}]}