{"sha": "546d062820555d5597c63288340feed17cea54f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmQwNjI4MjA1NTVkNTU5N2M2MzI4ODM0MGZlZWQxN2NlYTU0Zjk=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2020-12-16T21:06:06Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-02-14T22:39:42Z"}, "message": "Apply suggestions\n\n- Move `assert_failed` to core::panicking`\n- Make `assert_failed` use an enum instead of a string", "tree": {"sha": "18c61f3876477739a80d1fe5d98f9ac5532c9738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c61f3876477739a80d1fe5d98f9ac5532c9738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546d062820555d5597c63288340feed17cea54f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546d062820555d5597c63288340feed17cea54f9", "html_url": "https://github.com/rust-lang/rust/commit/546d062820555d5597c63288340feed17cea54f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546d062820555d5597c63288340feed17cea54f9/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f138e260a00ac16e8532aa406f6738c92e5d27ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f138e260a00ac16e8532aa406f6738c92e5d27ff", "html_url": "https://github.com/rust-lang/rust/commit/f138e260a00ac16e8532aa406f6738c92e5d27ff"}], "stats": {"total": 284, "additions": 163, "deletions": 121}, "files": [{"sha": "fd4a76c1eb548e4365a40fb8bc5c165a100cbdf5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -173,13 +173,6 @@ mod macros;\n \n #[macro_use]\n mod internal_macros;\n-#[doc(hidden)]\n-#[unstable(\n-    feature = \"macros_internals\",\n-    reason = \"macros implementation detail\",\n-    issue = \"none\"\n-)]\n-pub use macros::internals as macros_internals;\n \n #[path = \"num/shells/int_macros.rs\"]\n #[macro_use]"}, {"sha": "c3ad7398aa19e1d0b4e8a83cdfd6deb64bd9b5ae", "filename": "library/core/src/macros/internals.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -1,35 +0,0 @@\n-use crate::{fmt, panic};\n-\n-#[cold]\n-#[doc(hidden)]\n-#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n-#[track_caller]\n-pub fn assert_failed<T, U>(op: &str, left: &T, right: &U, args: Option<fmt::Arguments<'_>>) -> !\n-where\n-    T: fmt::Debug + ?Sized,\n-    U: fmt::Debug + ?Sized,\n-{\n-    #[track_caller]\n-    fn inner(\n-        op: &str,\n-        left: &dyn fmt::Debug,\n-        right: &dyn fmt::Debug,\n-        args: Option<fmt::Arguments<'_>>,\n-    ) -> ! {\n-        match args {\n-            Some(args) => panic!(\n-                r#\"assertion failed: `(left {} right)`\n-  left: `{:?}`,\n- right: `{:?}: {}`\"#,\n-                op, left, right, args\n-            ),\n-            None => panic!(\n-                r#\"assertion failed: `(left {} right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#,\n-                op, left, right,\n-            ),\n-        }\n-    }\n-    inner(op, &left, &right, args)\n-}"}, {"sha": "6eee9948e7c96c6a38ae549dbb15e67c7e8ecce0", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -1,7 +1,3 @@\n-#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n-#[doc(hidden)]\n-pub mod internals;\n-\n #[cfg(bootstrap)]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n@@ -57,16 +53,17 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(macros_internals)]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! assert_eq {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    let kind = $crate::panicking::AssertKind::Eq;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"==\", &*left_val, &*right_val, $crate::option::Option::None);\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n@@ -75,10 +72,11 @@ macro_rules! assert_eq {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    let kind = $crate::panicking::AssertKind::Eq;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"==\", &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }\n@@ -104,16 +102,17 @@ macro_rules! assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n-#[allow_internal_unstable(macros_internals)]\n+#[allow_internal_unstable(core_panic)]\n macro_rules! assert_ne {\n     ($left:expr, $right:expr $(,)?) => ({\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    let kind = $crate::panicking::AssertKind::Ne;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"!=\", &*left_val, &*right_val, $crate::option::Option::None);\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n@@ -122,10 +121,11 @@ macro_rules! assert_ne {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    let kind = $crate::panicking::AssertKind::Ne;\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"!=\", &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n+                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }"}, {"sha": "36ae244944706b65f01f7b7cfa54a92428eb89c0", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -91,3 +91,52 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n     unsafe { panic_impl(&pi) }\n }\n+\n+#[derive(Debug)]\n+pub enum AssertKind {\n+    Eq,\n+    Ne,\n+}\n+\n+/// Internal function for `assert_eq!` and `assert_ne!` macros\n+#[cold]\n+#[track_caller]\n+pub fn assert_failed<T, U>(\n+    kind: AssertKind,\n+    left: &T,\n+    right: &U,\n+    args: Option<fmt::Arguments<'_>>,\n+) -> !\n+where\n+    T: fmt::Debug + ?Sized,\n+    U: fmt::Debug + ?Sized,\n+{\n+    #[track_caller]\n+    fn inner(\n+        kind: AssertKind,\n+        left: &dyn fmt::Debug,\n+        right: &dyn fmt::Debug,\n+        args: Option<fmt::Arguments<'_>>,\n+    ) -> ! {\n+        let op = match kind {\n+            AssertKind::Eq => \"==\",\n+            AssertKind::Ne => \"!=\",\n+        };\n+\n+        match args {\n+            Some(args) => panic!(\n+                r#\"assertion failed: `(left {} right)`\n+  left: `{:?}`,\n+ right: `{:?}: {}`\"#,\n+                op, left, right, args\n+            ),\n+            None => panic!(\n+                r#\"assertion failed: `(left {} right)`\n+  left: `{:?}`,\n+ right: `{:?}`\"#,\n+                op, left, right,\n+            ),\n+        }\n+    }\n+    inner(kind, &left, &right, args)\n+}"}, {"sha": "c630ab70de13bba2847955eeec1553b1c89de5fa", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -11,7 +11,6 @@\n       let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &str;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -23,6 +22,10 @@\n               scope 4 {\n                   debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n               }\n           }\n       }\n@@ -65,19 +68,20 @@\n       }\n   \n       bb1: {\n-          _10 = const \"==\";                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_13) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::macros::internals::assert_failed::<i32, i32>(move _10, move _11, move _12, move _13); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0, 't1> fn(&'r str, &'s i32, &'t0 i32, std::option::Option<std::fmt::Arguments<'t1>>) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb2: {"}, {"sha": "c630ab70de13bba2847955eeec1553b1c89de5fa", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -11,9 +11,9 @@\n       let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _9: i32;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &str;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -22,6 +22,10 @@\n               scope 4 {\n                   debug left_val => _11;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _12;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _10: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _10;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n               }\n           }\n       }\n@@ -64,17 +68,20 @@\n       }\n   \n       bb1: {\n-          _10 = const \"==\";                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_10) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_13) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _11, move _12, move _13); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-          core::macros::internals::assert_failed::<i32, i32>(move _10, move _11, move _12); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s i32, &'t0 i32) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb2: {"}, {"sha": "bd24522271b933dafefba30ecef067140fc43b14", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -19,9 +19,8 @@\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _20: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _21: &str;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _22: &str;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -38,6 +37,10 @@\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n               }\n           }\n       }\n@@ -110,30 +113,36 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const \"==\";                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-          _21 = _22;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::macros::internals::assert_failed::<i32, i32>(move _21, move _23, move _25, move _27); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0, 't1> fn(&'r str, &'s i32, &'t0 i32, std::option::Option<std::fmt::Arguments<'t1>>) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb4: {"}, {"sha": "bd24522271b933dafefba30ecef067140fc43b14", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -19,24 +19,28 @@\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _20: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _21: &str;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _22: &str;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _27: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n               }\n           }\n       }\n@@ -77,14 +81,14 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          _11 = _27;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -109,28 +113,36 @@\n   \n       bb3: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const \"==\";                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-          _21 = _22;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::macros::internals::assert_failed::<i32, i32>(move _21, move _23, move _25); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s i32, &'t0 i32) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: core::panicking::AssertKind\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n       bb4: {"}, {"sha": "2c6d572752796c6d79c2f0d596018c1e07d015a3", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -14,10 +14,13 @@ error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n    |\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   | \n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n+   |\n+LL |     T: fmt::Debug + ?Sized,\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = note: required because of the requirements on the impl of `Debug` for `&for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "2627724f877fabf0bfaee7e0a8559dda75a1d576", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -85,10 +85,10 @@ error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    | \n-  ::: $SRC_DIR/core/src/macros/internals.rs:LL:COL\n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n    |\n LL |     T: fmt::Debug + ?Sized,\n-   |        ---------- required by this bound in `core::macros::internals::assert_failed`\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "20e4b1076812712611fb6e45b7edc70fb6ebbe55", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/546d062820555d5597c63288340feed17cea54f9/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=546d062820555d5597c63288340feed17cea54f9", "patch": "@@ -29,10 +29,10 @@ LL | fn a() -> i32 {\n LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    | \n-  ::: $SRC_DIR/core/src/macros/internals.rs:LL:COL\n+  ::: $SRC_DIR/core/src/panicking.rs:LL:COL\n    |\n LL |     T: fmt::Debug + ?Sized,\n-   |        ---------- required by this bound in `core::macros::internals::assert_failed`\n+   |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n    = help: use parentheses to call the function: `a()`"}]}