{"sha": "39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDczNzY3YTQ4M2QxMGY4YjRiMmFjMmYzMmJjOTU3M2Q5ZGFiYmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T09:25:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Unify `{Trait,Impl}ItemKind::TyAlias` structures.", "tree": {"sha": "2245c770ed979e31ff9ea4bd76094a3eead89898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2245c770ed979e31ff9ea4bd76094a3eead89898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "html_url": "https://github.com/rust-lang/rust/commit/39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c02fd3130284921f7077f78271b5501b402ec469", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02fd3130284921f7077f78271b5501b402ec469", "html_url": "https://github.com/rust-lang/rust/commit/c02fd3130284921f7077f78271b5501b402ec469"}], "stats": {"total": 263, "additions": 209, "deletions": 54}, "files": [{"sha": "54ff1f56eec0d798060ca3ade209ea0d23b678bb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -1253,6 +1253,14 @@ impl<'a> LoweringContext<'a> {\n         ty\n     }\n \n+    fn ty(&mut self, span: Span, kind: hir::TyKind) -> hir::Ty {\n+        hir::Ty { hir_id: self.next_id(), kind, span }\n+    }\n+\n+    fn ty_tup(&mut self, span: Span, tys: HirVec<hir::Ty>) -> hir::Ty {\n+        self.ty(span, hir::TyKind::Tup(tys))\n+    }\n+\n     fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext<'_>) -> hir::Ty {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n@@ -2084,12 +2092,9 @@ impl<'a> LoweringContext<'a> {\n                     .iter()\n                     .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n                     .collect();\n-                let mk_tup = |this: &mut Self, tys, span| {\n-                    hir::Ty { kind: hir::TyKind::Tup(tys), hir_id: this.next_id(), span }\n-                };\n                 (\n                     hir::GenericArgs {\n-                        args: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n+                        args: hir_vec![GenericArg::Type(this.ty_tup(span, inputs))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 hir_id: this.next_id(),\n@@ -2102,7 +2107,7 @@ impl<'a> LoweringContext<'a> {\n                                             ImplTraitContext::disallowed()\n                                         ))\n                                         .unwrap_or_else(||\n-                                            P(mk_tup(this, hir::HirVec::new(), span))\n+                                            P(this.ty_tup(span, hir::HirVec::new()))\n                                         ),\n                                 },\n                                 span: output.as_ref().map_or(span, |ty| ty.span),\n@@ -2474,17 +2479,13 @@ impl<'a> LoweringContext<'a> {\n             })\n         );\n \n-        // Create the `Foo<...>` refernece itself. Note that the `type\n+        // Create the `Foo<...>` reference itself. Note that the `type\n         // Foo = impl Trait` is, internally, created as a child of the\n         // async fn, so the *type parameters* are inherited.  It's\n         // only the lifetime parameters that we must supply.\n         let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args.into());\n-\n-        hir::FunctionRetTy::Return(P(hir::Ty {\n-            kind: opaque_ty_ref,\n-            span: opaque_ty_span,\n-            hir_id: self.next_id(),\n-        }))\n+        let opaque_ty = self.ty(opaque_ty_span, opaque_ty_ref);\n+        hir::FunctionRetTy::Return(P(opaque_ty))\n     }\n \n     /// Transforms `-> T` into `Future<Output = T>`\n@@ -2496,16 +2497,8 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::GenericBound {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n-            FunctionRetTy::Ty(ty) => {\n-                self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(fn_def_id)))\n-            }\n-            FunctionRetTy::Default(ret_ty_span) => {\n-                P(hir::Ty {\n-                    hir_id: self.next_id(),\n-                    kind: hir::TyKind::Tup(hir_vec![]),\n-                    span: *ret_ty_span,\n-                })\n-            }\n+            FunctionRetTy::Ty(ty) => self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(fn_def_id))),\n+            FunctionRetTy::Default(ret_ty_span) => P(self.ty_tup(*ret_ty_span, hir_vec![])),\n         };\n \n         // \"<Output = T>\""}, {"sha": "f77523e63827555594d8eb787365fb642df011fc", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -932,16 +932,21 @@ impl LoweringContext<'_> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::TyAlias(ref ty) => {\n+            ImplItemKind::TyAlias(_, ref ty) => {\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n-                let kind = match ty.kind.opaque_top_hack() {\n+                let kind = match ty {\n                     None => {\n-                        let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                        hir::ImplItemKind::TyAlias(ty)\n+                        hir::ImplItemKind::TyAlias(P(self.ty(i.span, hir::TyKind::Err)))\n                     }\n-                    Some(bs) => {\n-                        let bounds = self.lower_param_bounds(bs, ImplTraitContext::disallowed());\n-                        hir::ImplItemKind::OpaqueTy(bounds)\n+                    Some(ty) => match ty.kind.opaque_top_hack() {\n+                        None => {\n+                            let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                            hir::ImplItemKind::TyAlias(ty)\n+                        }\n+                        Some(bs) => {\n+                            let bs = self.lower_param_bounds(bs, ImplTraitContext::disallowed());\n+                            hir::ImplItemKind::OpaqueTy(bs)\n+                        }\n                     }\n                 };\n                 (generics, kind)\n@@ -972,7 +977,10 @@ impl LoweringContext<'_> {\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match &i.kind {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::TyAlias(ty) => match ty.kind.opaque_top_hack() {\n+                ImplItemKind::TyAlias(_, ty) => match ty\n+                    .as_deref()\n+                    .and_then(|ty| ty.kind.opaque_top_hack())\n+                {\n                     None => hir::AssocItemKind::Type,\n                     Some(_) => hir::AssocItemKind::OpaqueTy,\n                 },"}, {"sha": "302fcba4cf876eaa0ef2eefb3d3dd76c157852e3", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -697,8 +697,7 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n-            let (name, ty, generics) = self.parse_type_alias()?;\n-            (name, ast::ImplItemKind::TyAlias(ty), generics)\n+            self.parse_impl_assoc_ty()?\n         } else if self.is_const_item() {\n             self.parse_impl_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(&vis), at_end)? {\n@@ -766,6 +765,31 @@ impl<'a> Parser<'a> {\n         Ok((ident, ImplItemKind::Const(ty, expr), Generics::default()))\n     }\n \n+    /// Parses the following grammar:\n+    ///\n+    ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n+    fn parse_impl_assoc_ty(&mut self) -> PResult<'a, (Ident, ImplItemKind, Generics)> {\n+        let ident = self.parse_ident()?;\n+        let mut generics = self.parse_generics()?;\n+\n+        // Parse optional colon and param bounds.\n+        let bounds = if self.eat(&token::Colon) {\n+            self.parse_generic_bounds(None)?\n+        } else {\n+            Vec::new()\n+        };\n+        generics.where_clause = self.parse_where_clause()?;\n+\n+        let default = if self.eat(&token::Eq) {\n+            Some(self.parse_ty()?)\n+        } else {\n+            None\n+        };\n+        self.expect_semi()?;\n+\n+        Ok((ident, ImplItemKind::TyAlias(bounds, default), generics))\n+    }\n+\n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n     fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         // Parse optional `auto` prefix.\n@@ -924,7 +948,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses the following grammar:\n     ///\n-    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n+    ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n     fn parse_trait_item_assoc_ty(&mut self) -> PResult<'a, (Ident, TraitItemKind, Generics)> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;"}, {"sha": "f4b28077e9f025648fc83af77eb65d62562dcd11", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -295,6 +295,17 @@ impl<'a> AstValidator<'a> {\n             )\n             .emit();\n     }\n+\n+    fn check_impl_assoc_type_no_bounds(&self, bounds: &[GenericBound]) {\n+        let span = match bounds {\n+            [] => return,\n+            [b0] => b0.span(),\n+            [b0, .., bl] => b0.span().to(bl.span()),\n+        };\n+        self.err_handler()\n+            .struct_span_err(span, \"bounds on associated `type`s in `impl`s have no effect\")\n+            .emit();\n+    }\n }\n \n enum GenericPosition {\n@@ -770,6 +781,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_impl_item_provided(ii.span, body, \"function\", \" { <body> }\");\n                 self.check_fn_decl(&sig.decl);\n             }\n+            ImplItemKind::TyAlias(bounds, body) => {\n+                self.check_impl_item_provided(ii.span, body, \"type\", \" = <type>;\");\n+                self.check_impl_assoc_type_no_bounds(bounds);\n+            }\n             _ => {}\n         }\n         visit::walk_impl_item(self, ii);"}, {"sha": "f01867f32c67b67d3a7b5ca53714f8aa13711e94", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -8,6 +8,7 @@\n \n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(slice_patterns)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "33e24c8cfd4a778ec7e1be8b0efae4d0efe9be26", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -1119,7 +1119,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 visit::walk_impl_item(this, impl_item);\n                                             }\n-                                            ImplItemKind::TyAlias(ref ty) => {\n+                                            ImplItemKind::TyAlias(_, Some(ref ty)) => {\n                                                 // If this is a trait impl, ensure the type\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,\n@@ -1129,6 +1129,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n                                                 this.visit_ty(ty);\n                                             }\n+                                            ImplItemKind::TyAlias(_, None) => {}\n                                             ImplItemKind::Macro(_) =>\n                                                 panic!(\"unexpanded macro in resolve!\"),\n                                         }"}, {"sha": "d63a9df8d9bc48d4e691e1a8c33706906e014b2a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -1127,7 +1127,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::ImplItemKind::TyAlias(ref ty) => {\n+            ast::ImplItemKind::TyAlias(_, None) => {}\n+            ast::ImplItemKind::TyAlias(_, Some(ref ty)) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait."}, {"sha": "89868a9cd294ce8a88b0a43a29aec05adbdaf1a8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -1638,7 +1638,7 @@ pub struct ImplItem<K = ImplItemKind> {\n pub enum ImplItemKind  {\n     Const(P<Ty>, Option<P<Expr>>),\n     Method(FnSig, Option<P<Block>>),\n-    TyAlias(P<Ty>),\n+    TyAlias(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n "}, {"sha": "f786de6401a6e69208aca4f7aa416185b6e27dd5", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -612,8 +612,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        \"C-variadic functions are unstable\");\n                 }\n             }\n-            ast::ImplItemKind::TyAlias(ref ty) => {\n-                self.check_impl_trait(ty);\n+            ast::ImplItemKind::TyAlias(_, ref ty) => {\n+                if let Some(ty) = ty {\n+                    self.check_impl_trait(ty);\n+                }\n                 self.check_gat(&ii.generics, ii.span);\n             }\n             _ => {}"}, {"sha": "bb0462c19cdffbdce38e0e68d08170ca9660c3bd", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -987,7 +987,10 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),\n+        ImplItemKind::TyAlias(bounds, ty) => {\n+            visit_bounds(bounds, visitor);\n+            visit_opt(ty, |ty| visitor.visit_ty(ty));\n+        }\n         ImplItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);"}, {"sha": "03e394b8c7e9c3da71550b60067ba4dc2ba4eda5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -1128,16 +1128,15 @@ impl<'a> State<'a> {\n         self.s.word(\";\")\n     }\n \n-    fn print_associated_type(&mut self,\n-                             ident: ast::Ident,\n-                             bounds: Option<&ast::GenericBounds>,\n-                             ty: Option<&ast::Ty>)\n-                             {\n+    fn print_associated_type(\n+        &mut self,\n+        ident: ast::Ident,\n+        bounds: &ast::GenericBounds,\n+        ty: Option<&ast::Ty>,\n+    ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n-        if let Some(bounds) = bounds {\n-            self.print_type_bounds(\":\", bounds);\n-        }\n+        self.print_type_bounds(\":\", bounds);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -1568,8 +1567,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::TraitItemKind::TyAlias(ref bounds, ref default) => {\n-                self.print_associated_type(ti.ident, Some(bounds),\n-                                           default.as_ref().map(|ty| &**ty));\n+                self.print_associated_type(ti.ident, bounds, default.as_deref());\n             }\n             ast::TraitItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n@@ -1603,8 +1601,8 @@ impl<'a> State<'a> {\n                     self.s.word(\";\");\n                 }\n             }\n-            ast::ImplItemKind::TyAlias(ref ty) => {\n-                self.print_associated_type(ii.ident, None, Some(ty));\n+            ast::ImplItemKind::TyAlias(ref bounds, ref ty) => {\n+                self.print_associated_type(ii.ident, bounds, ty.as_deref());\n             }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);"}, {"sha": "7cc1a769e52bf92b3947286ce47d44949e0c7326", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -627,8 +627,9 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, &impl_item.vis, body),\n                              &sig.decl, impl_item.span, impl_item.id);\n         }\n-        ImplItemKind::TyAlias(ref ty) => {\n-            visitor.visit_ty(ty);\n+        ImplItemKind::TyAlias(ref bounds, ref ty) => {\n+            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_ty, ty);\n         }\n         ImplItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);"}, {"sha": "d51fcf315a69bc75f7ad2c0af8a2816f04d80b2c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -519,7 +519,9 @@ impl<'a> TraitDef<'a> {\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n                 kind: ast::ImplItemKind::TyAlias(\n-                    type_def.to_ty(cx, self.span, type_ident, generics)),\n+                    Vec::new(),\n+                    Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n+                ),\n                 tokens: None,\n             }\n         });"}, {"sha": "74a9c6ab7e8a63c38255ac17ffa35d4f7e20ebba", "filename": "src/test/ui/parser/impl-item-type-no-body-pass.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-pass.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl X {\n+    type Y;\n+    type Z: Ord;\n+    type W: Ord where Self: Eq;\n+    type W where Self: Eq;\n+}"}, {"sha": "71c7d4ba21db62573f5b93d60a7a7a910fee9ded", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -0,0 +1,22 @@\n+#![feature(generic_associated_types)]\n+//~^ WARN the feature `generic_associated_types` is incomplete\n+\n+fn main() {}\n+\n+struct X;\n+\n+impl X {\n+    type Y;\n+    //~^ ERROR associated type in `impl` without body\n+    //~| ERROR associated types are not yet supported in inherent impls\n+    type Z: Ord;\n+    //~^ ERROR associated type in `impl` without body\n+    //~| ERROR bounds on associated `type`s in `impl`s have no effect\n+    //~| ERROR associated types are not yet supported in inherent impls\n+    type W: Ord where Self: Eq;\n+    //~^ ERROR associated type in `impl` without body\n+    //~| ERROR bounds on associated `type`s in `impl`s have no effect\n+    //~| ERROR associated types are not yet supported in inherent impls\n+    type W where Self: Eq;\n+    //~^ ERROR associated type in `impl` without body\n+}"}, {"sha": "6f1439c8f0b293bceb69c6c4a432d2e9d3305a7b", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39073767a483d10f8b4b2ac2f32bc9573d9dabbf/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=39073767a483d10f8b4b2ac2f32bc9573d9dabbf", "patch": "@@ -0,0 +1,73 @@\n+error: associated type in `impl` without body\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n+   |\n+LL |     type Y;\n+   |     ^^^^^^-\n+   |           |\n+   |           help: provide a definition for the type: `= <type>;`\n+\n+error: associated type in `impl` without body\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n+   |\n+LL |     type Z: Ord;\n+   |     ^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the type: `= <type>;`\n+\n+error: bounds on associated `type`s in `impl`s have no effect\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:13\n+   |\n+LL |     type Z: Ord;\n+   |             ^^^\n+\n+error: associated type in `impl` without body\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n+   |\n+LL |     type W: Ord where Self: Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                               |\n+   |                               help: provide a definition for the type: `= <type>;`\n+\n+error: bounds on associated `type`s in `impl`s have no effect\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:13\n+   |\n+LL |     type W: Ord where Self: Eq;\n+   |             ^^^\n+\n+error: associated type in `impl` without body\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n+   |\n+LL |     type W where Self: Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^-\n+   |                          |\n+   |                          help: provide a definition for the type: `= <type>;`\n+\n+warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5\n+   |\n+LL |     type Y;\n+   |     ^^^^^^^\n+\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:5\n+   |\n+LL |     type Z: Ord;\n+   |     ^^^^^^^^^^^^\n+\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:5\n+   |\n+LL |     type W: Ord where Self: Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0202`."}]}