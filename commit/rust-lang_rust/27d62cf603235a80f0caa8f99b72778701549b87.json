{"sha": "27d62cf603235a80f0caa8f99b72778701549b87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDYyY2Y2MDMyMzVhODBmMGNhYThmOTliNzI3Nzg3MDE1NDliODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-17T04:46:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-17T04:46:19Z"}, "message": "Auto merge of #3966 - flip1995:internal_lints, r=oli-obk\n\nEnable rustc internal lints\n\nCloses #3965\n\nI'm not 100% sure if enabling the `-Zunstable-options` flag in the `.cargo/config` file is the right place.", "tree": {"sha": "68fbf411901bc64c877c7578305b6e34b99118d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68fbf411901bc64c877c7578305b6e34b99118d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d62cf603235a80f0caa8f99b72778701549b87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d62cf603235a80f0caa8f99b72778701549b87", "html_url": "https://github.com/rust-lang/rust/commit/27d62cf603235a80f0caa8f99b72778701549b87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d62cf603235a80f0caa8f99b72778701549b87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea25f044ec0c0758e5ca26dfeb596b08236cb20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea25f044ec0c0758e5ca26dfeb596b08236cb20f", "html_url": "https://github.com/rust-lang/rust/commit/ea25f044ec0c0758e5ca26dfeb596b08236cb20f"}, {"sha": "118f7d54c4e1c25b6e590f3b63bbe5ef9482a194", "url": "https://api.github.com/repos/rust-lang/rust/commits/118f7d54c4e1c25b6e590f3b63bbe5ef9482a194", "html_url": "https://github.com/rust-lang/rust/commit/118f7d54c4e1c25b6e590f3b63bbe5ef9482a194"}], "stats": {"total": 136, "additions": 10, "deletions": 126}, "files": [{"sha": "b4bc4418f1e4857ae6b66b6c47e0cc88bc732878", "filename": ".cargo/config", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -1,2 +1,5 @@\n [alias]\n uitest = \"test --test compile-test\"\n+\n+[build]\n+rustflags = [\"-Zunstable-options\"]"}, {"sha": "2bf5ad0447d3370461c6f32a0a5bc8a3177376aa", "filename": "clippy_dev/rust-toolchain", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/clippy_dev%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/clippy_dev%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Frust-toolchain?ref=ea25f044ec0c0758e5ca26dfeb596b08236cb20f", "patch": "@@ -1 +0,0 @@\n-stable"}, {"sha": "392388ffd8a112edf70f2b1efebcd36409ef6ea1", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::default_hash_types)]\n-\n use itertools::Itertools;\n use lazy_static::lazy_static;\n use regex::Regex;"}, {"sha": "824058a08cb33dea40617cd3d21e6004be7b4a71", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n+#![deny(internal)]\n #![feature(crate_visibility_modifier)]\n \n // FIXME: switch to something more ergonomic here, once available.\n@@ -423,7 +424,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box serde_api::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n     reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n-    reg.register_early_lint_pass(box utils::internal_lints::DefaultHashTypes::default());\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n     reg.register_late_lint_pass(box utils::inspector::Pass);\n     reg.register_late_lint_pass(box utils::author::Pass);\n@@ -647,7 +647,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_lint_group(\"clippy::internal\", Some(\"clippy_internal\"), vec![\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        utils::internal_lints::DEFAULT_HASH_TYPES,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n     ]);\n "}, {"sha": "97f69f87497c673cd244e6167e6facdc65b3ccc2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -9,7 +9,7 @@ use if_chain::if_chain;\n use rustc::hir::def::CtorKind;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::ty::{self, Ty, TyKind};\n+use rustc::ty::{self, Ty};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use std::cmp::Ordering;\n@@ -500,7 +500,7 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n         // already covered.\n \n         let mut missing_variants = vec![];\n-        if let TyKind::Adt(def, _) = ty.sty {\n+        if let ty::Adt(def, _) = ty.sty {\n             for variant in &def.variants {\n                 missing_variants.push(variant);\n             }"}, {"sha": "380eefff7d2e998249707374ea45206f40bb51f0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clippy::default_hash_types)]\n+#![allow(default_hash_types)]\n \n use std::borrow::Cow;\n use std::cmp::Ordering;"}, {"sha": "0ebb19376c5cd9c1e1e8bde47debe80d4b90debf", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 62, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d62cf603235a80f0caa8f99b72778701549b87/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=27d62cf603235a80f0caa8f99b72778701549b87", "patch": "@@ -1,6 +1,4 @@\n-use crate::utils::{\n-    match_def_path, match_type, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n-};\n+use crate::utils::{match_def_path, match_type, paths, span_help_and_lint, span_lint, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Def;\n@@ -9,8 +7,7 @@ use rustc::hir::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::Applicability;\n-use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n+use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n \n@@ -56,17 +53,6 @@ declare_clippy_lint! {\n     \"declaring a lint without associating it in a LintPass\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for the presence of the default hash types \"HashMap\" or \"HashSet\"\n-    /// and recommends the FxHash* variants.\n-    ///\n-    /// **Why is this bad?** The FxHash variants have better performance\n-    /// and we don't need any collision prevention in clippy.\n-    pub DEFAULT_HASH_TYPES,\n-    internal,\n-    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for calls to `cx.span_lint*` and suggests to use the `utils::*`\n     /// variant of the function.\n@@ -238,51 +224,6 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     }\n }\n \n-pub struct DefaultHashTypes {\n-    map: FxHashMap<String, String>,\n-}\n-\n-impl DefaultHashTypes {\n-    pub fn default() -> Self {\n-        let mut map = FxHashMap::default();\n-        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n-        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n-        Self { map }\n-    }\n-}\n-\n-impl LintPass for DefaultHashTypes {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEFAULT_HASH_TYPES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DefaultHashType\"\n-    }\n-}\n-\n-impl EarlyLintPass for DefaultHashTypes {\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n-        let ident_string = ident.to_string();\n-        if let Some(replace) = self.map.get(&ident_string) {\n-            let msg = format!(\n-                \"Prefer {} over {}, it has better performance \\\n-                 and we don't need any collision prevention in clippy\",\n-                replace, ident_string\n-            );\n-            span_lint_and_sugg(\n-                cx,\n-                DEFAULT_HASH_TYPES,\n-                ident.span,\n-                &msg,\n-                \"use\",\n-                replace.to_string(),\n-                Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n-            );\n-        }\n-    }\n-}\n-\n #[derive(Clone, Default)]\n pub struct CompilerLintFunctions {\n     map: FxHashMap<String, String>,\n@@ -325,7 +266,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n                     COMPILER_LINT_FUNCTIONS,\n                     path.ident.span,\n                     \"usage of a compiler lint function\",\n-                    &format!(\"Please use the Clippy variant of this function: `{}`\", sugg),\n+                    &format!(\"please use the Clippy variant of this function: `{}`\", sugg),\n                 );\n             }\n         }"}, {"sha": "7d6cb4e1179030c241063054e94fa941ca1a0173", "filename": "tests/ui/fxhash.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=ea25f044ec0c0758e5ca26dfeb596b08236cb20f", "patch": "@@ -1,16 +0,0 @@\n-#![warn(clippy::default_hash_types)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_data_structures;\n-\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use std::collections::{HashMap, HashSet};\n-\n-fn main() {\n-    let _map: HashMap<String, String> = HashMap::default();\n-    let _set: HashSet<String> = HashSet::default();\n-\n-    // test that the lint doesn't also match the Fx variants themselves \ud83d\ude02\n-    let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n-    let _fx_set: FxHashSet<String> = FxHashSet::default();\n-}"}, {"sha": "a2dac67001859e3f6f6fd59adcce170d1f0e6fcc", "filename": "tests/ui/fxhash.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/tests%2Fui%2Ffxhash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea25f044ec0c0758e5ca26dfeb596b08236cb20f/tests%2Fui%2Ffxhash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.stderr?ref=ea25f044ec0c0758e5ca26dfeb596b08236cb20f", "patch": "@@ -1,40 +0,0 @@\n-error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:7:24\n-   |\n-LL | use std::collections::{HashMap, HashSet};\n-   |                        ^^^^^^^ help: use: `FxHashMap`\n-   |\n-   = note: `-D clippy::default-hash-types` implied by `-D warnings`\n-\n-error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:7:33\n-   |\n-LL | use std::collections::{HashMap, HashSet};\n-   |                                 ^^^^^^^ help: use: `FxHashSet`\n-\n-error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:10:15\n-   |\n-LL |     let _map: HashMap<String, String> = HashMap::default();\n-   |               ^^^^^^^ help: use: `FxHashMap`\n-\n-error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:10:41\n-   |\n-LL |     let _map: HashMap<String, String> = HashMap::default();\n-   |                                         ^^^^^^^ help: use: `FxHashMap`\n-\n-error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:11:15\n-   |\n-LL |     let _set: HashSet<String> = HashSet::default();\n-   |               ^^^^^^^ help: use: `FxHashSet`\n-\n-error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:11:33\n-   |\n-LL |     let _set: HashSet<String> = HashSet::default();\n-   |                                 ^^^^^^^ help: use: `FxHashSet`\n-\n-error: aborting due to 6 previous errors\n-"}]}