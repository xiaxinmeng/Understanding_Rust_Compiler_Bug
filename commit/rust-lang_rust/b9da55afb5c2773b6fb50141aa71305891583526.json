{"sha": "b9da55afb5c2773b6fb50141aa71305891583526", "node_id": "C_kwDOAAsO6NoAKGI5ZGE1NWFmYjVjMjc3M2I2ZmI1MDE0MWFhNzEzMDU4OTE1ODM1MjY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-09T22:35:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-09T22:35:55Z"}, "message": "Introduce `Span::is_visible`", "tree": {"sha": "af5bc3c1cbf671fb3c43680cb0242b39c748a05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5bc3c1cbf671fb3c43680cb0242b39c748a05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9da55afb5c2773b6fb50141aa71305891583526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9da55afb5c2773b6fb50141aa71305891583526", "html_url": "https://github.com/rust-lang/rust/commit/b9da55afb5c2773b6fb50141aa71305891583526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9da55afb5c2773b6fb50141aa71305891583526/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10201c9bb8e225095d76e6650dcfe8dadc50327", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10201c9bb8e225095d76e6650dcfe8dadc50327", "html_url": "https://github.com/rust-lang/rust/commit/e10201c9bb8e225095d76e6650dcfe8dadc50327"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "335bfc3302f27c34bd0dada4f2e93840574a55f0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9da55afb5c2773b6fb50141aa71305891583526/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9da55afb5c2773b6fb50141aa71305891583526/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=b9da55afb5c2773b6fb50141aa71305891583526", "patch": "@@ -491,6 +491,10 @@ impl SpanData {\n     pub fn is_dummy(self) -> bool {\n         self.lo.0 == 0 && self.hi.0 == 0\n     }\n+    #[inline]\n+    pub fn is_visible(self, sm: &SourceMap) -> bool {\n+        !self.is_dummy() && sm.is_span_accessible(self.span())\n+    }\n     /// Returns `true` if `self` fully encloses `other`.\n     pub fn contains(self, other: Self) -> bool {\n         self.lo <= other.lo && other.hi <= self.hi\n@@ -556,6 +560,11 @@ impl Span {\n         self.data_untracked().is_dummy()\n     }\n \n+    #[inline]\n+    pub fn is_visible(self, sm: &SourceMap) -> bool {\n+        self.data_untracked().is_visible(sm)\n+    }\n+\n     /// Returns `true` if this span comes from any kind of macro, desugaring or inlining.\n     #[inline]\n     pub fn from_expansion(self) -> bool {"}, {"sha": "443d57aaf3dce8cc63b9606b1786b5be6d963e14", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9da55afb5c2773b6fb50141aa71305891583526/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9da55afb5c2773b6fb50141aa71305891583526/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b9da55afb5c2773b6fb50141aa71305891583526", "patch": "@@ -2413,19 +2413,19 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let mut multispan = MultiSpan::from(span);\n+                let sm = tcx.sess.source_map();\n                 if let Some(ident) = tcx.opt_item_ident(item_def_id) {\n-                    let sm = tcx.sess.source_map();\n                     let same_line =\n                         match (sm.lookup_line(ident.span.hi()), sm.lookup_line(span.lo())) {\n                             (Ok(l), Ok(r)) => l.line == r.line,\n                             _ => true,\n                         };\n-                    if !ident.span.is_dummy() && !ident.span.overlaps(span) && !same_line {\n+                    if ident.span.is_visible(sm) && !ident.span.overlaps(span) && !same_line {\n                         multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n                 let descr = format!(\"required by a bound in `{}`\", item_name);\n-                if !span.is_dummy() {\n+                if span.is_visible(sm) {\n                     let msg = format!(\"required by this bound in `{}`\", item_name);\n                     multispan.push_span_label(span, msg);\n                     err.span_note(multispan, &descr);"}, {"sha": "6c7ea007ee03e4cb6fa00d649597517d10c3c8ad", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9da55afb5c2773b6fb50141aa71305891583526/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9da55afb5c2773b6fb50141aa71305891583526/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=b9da55afb5c2773b6fb50141aa71305891583526", "patch": "@@ -8,8 +8,6 @@ error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n-  |\n-  = note: required by this bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n  --> $DIR/issue-71363.rs:4:6\n@@ -21,8 +19,6 @@ error[E0277]: `MyError` doesn't implement `Debug`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n-  |\n-  = note: required by this bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n 3 | #[derive(Debug)]"}]}