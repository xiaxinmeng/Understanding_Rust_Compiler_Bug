{"sha": "93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTcwZWNiN2ZiZTA1Y2FhNzRkZmIyYmYzYzI5MzE1ZWRjMmIzZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T19:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T19:47:23Z"}, "message": "Auto merge of #38992 - nagisa:i128-minvallit, r=eddyb\n\nFix two const-eval issues related to i128 negation\n\nFirst issue here was the fact that we\u2019d only allow negating integers in i64 range in case the\ninteger was not infered yes. While this is not the direct cause of the issue, its still good to fix\nit.\n\nThe real issue here is the code handling specifically the `min_value` literals. While I128_OVERFLOW\nhas the expected value (0x8000_..._0000), match using this value as a pattern is handled\nincorrectly by the stage1 compiler (it seems to be handled correctly, by the stage2 compiler). So\nwhat we do here is extract this pattern into an explicit `==` until the next snapshot.\n\nFixes #38987", "tree": {"sha": "f9aa4f5b8c775467d717fe39371f36850c3a3b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9aa4f5b8c775467d717fe39371f36850c3a3b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "html_url": "https://github.com/rust-lang/rust/commit/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9dedb528d40a46c47c9970b30cc3e2fdd1e0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9dedb528d40a46c47c9970b30cc3e2fdd1e0bb", "html_url": "https://github.com/rust-lang/rust/commit/2f9dedb528d40a46c47c9970b30cc3e2fdd1e0bb"}, {"sha": "e97f104da64d047c919fc2fccf720efd46f30261", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97f104da64d047c919fc2fccf720efd46f30261", "html_url": "https://github.com/rust-lang/rust/commit/e97f104da64d047c919fc2fccf720efd46f30261"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "c899d2109f51cf54140098dc3456795b1a3e9d2f", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "patch": "@@ -464,33 +464,36 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n         if let hir::ExprLit(ref lit) = inner.node {\n             use syntax::ast::*;\n             use syntax::ast::LitIntType::*;\n-            const I8_OVERFLOW: u128 = i8::max_value() as u128 + 1;\n-            const I16_OVERFLOW: u128 = i16::max_value() as u128 + 1;\n-            const I32_OVERFLOW: u128 = i32::max_value() as u128 + 1;\n-            const I64_OVERFLOW: u128 = i64::max_value() as u128 + 1;\n-            const I128_OVERFLOW: u128 = i128::max_value() as u128 + 1;\n+            const I8_OVERFLOW: u128 = i8::min_value() as u8 as u128;\n+            const I16_OVERFLOW: u128 = i16::min_value() as u16 as u128;\n+            const I32_OVERFLOW: u128 = i32::min_value() as u32 as u128;\n+            const I64_OVERFLOW: u128 = i64::min_value() as u64 as u128;\n+            const I128_OVERFLOW: u128 = i128::min_value() as u128;\n             match (&lit.node, ety.map(|t| &t.sty)) {\n-                (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n+                (&LitKind::Int(I8_OVERFLOW, _), Some(&ty::TyInt(IntTy::I8))) |\n                 (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n                     return Ok(Integral(I8(i8::min_value())))\n                 },\n-                (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n+                (&LitKind::Int(I16_OVERFLOW, _), Some(&ty::TyInt(IntTy::I16))) |\n                 (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n                     return Ok(Integral(I16(i16::min_value())))\n                 },\n-                (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n+                (&LitKind::Int(I32_OVERFLOW, _), Some(&ty::TyInt(IntTy::I32))) |\n                 (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n                     return Ok(Integral(I32(i32::min_value())))\n                 },\n-                (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n+                (&LitKind::Int(I64_OVERFLOW, _), Some(&ty::TyInt(IntTy::I64))) |\n                 (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n                     return Ok(Integral(I64(i64::min_value())))\n                 },\n-                (&LitKind::Int(I128_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I128))) |\n-                (&LitKind::Int(I128_OVERFLOW, Signed(IntTy::I128)), _) => {\n-                    return Ok(Integral(I128(i128::min_value())))\n+                (&LitKind::Int(n, _), Some(&ty::TyInt(IntTy::I128))) |\n+                (&LitKind::Int(n, Signed(IntTy::I128)), _) => {\n+                    // SNAP: replace n in pattern with I128_OVERFLOW and remove this if.\n+                    if n == I128_OVERFLOW {\n+                        return Ok(Integral(I128(i128::min_value())))\n+                    }\n                 },\n-                (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n+                (&LitKind::Int(n, _), Some(&ty::TyInt(IntTy::Is))) |\n                 (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n                     match tcx.sess.target.int_type {\n                         IntTy::I16 => if n == I16_OVERFLOW {"}, {"sha": "53f185b661b4193873588c6ddbdfa77e772de906", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "patch": "@@ -661,7 +661,7 @@ impl ::std::ops::Neg for ConstInt {\n             a@U8(0) | a@U16(0) | a@U32(0) | a@U64(0) | a@U128(0) |\n             a@Usize(Us16(0)) | a@Usize(Us32(0)) | a@Usize(Us64(0)) => Ok(a),\n             U8(_) | U16(_) | U32(_) | U64(_) | U128(_) | Usize(_) => Err(UnsignedNegation),\n-            Infer(a @ 0...ubounds::I64MAX) => Ok(InferSigned(-(a as i128))),\n+            Infer(a @ 0...ubounds::I128MAX) => Ok(InferSigned(-(a as i128))),\n             Infer(_) => Err(Overflow(Op::Neg)),\n             InferSigned(a) => Ok(InferSigned(overflowing!(a.overflowing_neg(), Op::Neg))),\n         }"}, {"sha": "a513476d4a33a3fc2ed51dcabd072a71fe90983d", "filename": "src/test/run-pass/issue-38987.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Ftest%2Frun-pass%2Fissue-38987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6/src%2Ftest%2Frun-pass%2Fissue-38987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38987.rs?ref=93e70ecb7fbe05caa74dfb2bf3c29315edc2b3e6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(i128_type)]\n+\n+fn main() {\n+    let _ = -0x8000_0000_0000_0000_0000_0000_0000_0000i128;\n+}"}]}