{"sha": "54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjkzNWI5Yjk5YThjZjI3NmJjNTU5MDZiOTgxN2Y4Y2Y0NGJmYmI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:20:06Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:20:01Z"}, "message": "Handle const generics elsewhere\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "60d01667a0a1c2eebf30718bc5b7c6e26c13c578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d01667a0a1c2eebf30718bc5b7c6e26c13c578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "html_url": "https://github.com/rust-lang/rust/commit/54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c236c241e66c786f1d585aec62744d4995b6227b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c236c241e66c786f1d585aec62744d4995b6227b", "html_url": "https://github.com/rust-lang/rust/commit/c236c241e66c786f1d585aec62744d4995b6227b"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "d2bec1070f9215e409a5269af8123d3fa86175a6", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -1974,7 +1974,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     object_lifetime_default,\n                                     ..\n                                 } => Some(object_lifetime_default),\n-                                GenericParamDefKind::Lifetime => None,\n+                                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => None,\n                             })\n                             .collect()\n                     })"}, {"sha": "322e384e13e205093ef39b72c75580b1c6becbe0", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -389,7 +389,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for param in generics.params.iter() {\n             let value = match param.kind {\n-                GenericParamDefKind::Type {..} => {\n+                GenericParamDefKind::Type { .. } |\n+                GenericParamDefKind::Const => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => continue,"}, {"sha": "32bb7f186938a7ea7ccafba09f39ee1c34a8407d", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -1010,7 +1010,8 @@ fn vtable_methods<'a, 'tcx>(\n                     InternalSubsts::for_item(tcx, def_id, |param, _|\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type {..} => {\n+                            GenericParamDefKind::Type { .. } |\n+                            GenericParamDefKind::Const => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "e7a5138e6893c5384875dd00dfb263e40a528c06", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -310,7 +310,8 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n \n         // We can't monomorphize things like `fn foo<A>(...)`.\n-        if self.generics_of(method.def_id).own_counts().types != 0 {\n+        let own_counts = self.generics_of(method.def_id).own_counts();\n+        if own_counts.types + own_counts.consts != 0 {\n             return Some(MethodViolationCode::Generic);\n         }\n "}, {"sha": "c86fd0d52b901ce62fe3fb64dea452b8f73cb001", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -280,7 +280,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n             let value = match param.kind {\n-                GenericParamDefKind::Type {..} => {\n+                GenericParamDefKind::Type { .. } |\n+                GenericParamDefKind::Const => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => return None"}, {"sha": "3a31801b3be39f2c0728007f0319d6e89d810317", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -705,6 +705,9 @@ impl<'tcx> Relate<'tcx> for Kind<'tcx> {\n             (UnpackedKind::Type(unpacked), x) => {\n                 bug!(\"impossible case reached: can't relate: {:?} with {:?}\", unpacked, x)\n             }\n+            (UnpackedKind::Const(_), _) => {\n+                unimplemented!() // FIXME(const_generics)\n+            }\n         }\n     }\n }"}, {"sha": "fb0d1e2080b06483c7921722b38ff73a824ebdbb", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -12,6 +12,7 @@ use crate::ty::subst::{Subst, InternalSubsts, SubstsRef, UnpackedKind};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::TyKind::*;\n use crate::ty::layout::{Integer, IntegerExt};\n+use crate::mir::interpret::ConstValue;\n use crate::util::common::ErrorReported;\n use crate::middle::lang_items;\n \n@@ -495,8 +496,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }) => {\n                         !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }\n-                    UnpackedKind::Lifetime(_) | UnpackedKind::Type(_) => {\n-                        // not a type or region param - this should be reported\n+                    UnpackedKind::Const(&ty::LazyConst::Evaluated(ty::Const {\n+                        val: ConstValue::Param(ref pc),\n+                        ..\n+                    })) => {\n+                        !impl_generics.const_param(pc, self).pure_wrt_drop\n+                    }\n+                    UnpackedKind::Lifetime(_) |\n+                    UnpackedKind::Type(_) |\n+                    UnpackedKind::Const(_) => {\n+                        // Not a type, const or region param: this should be reported\n                         // as an error.\n                         false\n                     }\n@@ -587,15 +596,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         Some(ty::Binder::bind(env_ty))\n     }\n \n-    /// Given the `DefId` of some item that has no type parameters, make\n+    /// Given the `DefId` of some item that has no type or const parameters, make\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> SubstsRef<'tcx> {\n         InternalSubsts::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n-                GenericParamDefKind::Type {..} => {\n+                GenericParamDefKind::Type { .. } => {\n                     bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n                 }\n+                GenericParamDefKind::Const { .. } => {\n+                    bug!(\"empty_substs_for_def_id: {:?} has const parameters\", item_def_id)\n+                }\n             }\n         })\n     }"}, {"sha": "a9f05eb60db18f17fa559454e9de97c368fbbfb2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -748,12 +748,15 @@ impl<'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'_, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n+                GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if has_default {\n                         self.visit(self.ev.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Lifetime => {}\n+                GenericParamDefKind::Const => {\n+                    self.visit(self.ev.tcx.type_of(param.def_id));\n+                }\n             }\n         }\n         self\n@@ -1517,12 +1520,15 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n+                GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if has_default {\n                         self.visit(self.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Lifetime => {}\n+                GenericParamDefKind::Const => {\n+                    self.visit(self.tcx.type_of(param.def_id));\n+                }\n             }\n         }\n         self"}, {"sha": "6420f20a3ea2904d02ce0d73636f35539cf189f4", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b935b9b99a8cf276bc55906b9817f8cf44bfbb/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=54b935b9b99a8cf276bc55906b9817f8cf44bfbb", "patch": "@@ -32,11 +32,12 @@ use rustc::traits::{\n     InEnvironment,\n     ChalkCanonicalGoal,\n };\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, InferConst};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Kind, UnpackedKind};\n use rustc_data_structures::sync::Lrc;\n+use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use std::fmt::{self, Debug};\n@@ -287,6 +288,16 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n                     }\n                     _ => false,\n                 },\n+                UnpackedKind::Const(ct) => match ct {\n+                    ty::LazyConst::Evaluated(ty::Const {\n+                        val: ConstValue::Infer(InferConst::Canonical(debruijn, bound_ct)),\n+                        ..\n+                    }) => {\n+                        debug_assert_eq!(*debruijn, ty::INNERMOST);\n+                        cvar == *bound_ct\n+                    }\n+                    _ => false,\n+                }\n             })\n     }\n "}]}