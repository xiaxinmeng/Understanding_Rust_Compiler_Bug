{"sha": "bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmN2NkZTQ0OWI3ZTUwODZiZjJmYWIzZTRmMDg0M2Q3YTFhMzlmZjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:27:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-23T19:43:58Z"}, "message": "Rollup merge of #22538 - nagisa:properise-trans-asserts, r=nikomatsakis", "tree": {"sha": "2afe5943f7d03a61371c6fc564a808d104571a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2afe5943f7d03a61371c6fc564a808d104571a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "html_url": "https://github.com/rust-lang/rust/commit/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a6d67e5e5965c6d149454095261cb48ee22f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a6d67e5e5965c6d149454095261cb48ee22f48", "html_url": "https://github.com/rust-lang/rust/commit/f1a6d67e5e5965c6d149454095261cb48ee22f48"}, {"sha": "9be8ec82cebd62a84af157b51f8d33b062b14656", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be8ec82cebd62a84af157b51f8d33b062b14656", "html_url": "https://github.com/rust-lang/rust/commit/9be8ec82cebd62a84af157b51f8d33b062b14656"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "7e51c041c6e13911fcd281e64af0c24836f5d1c8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "patch": "@@ -301,7 +301,7 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                    self_type.repr(ccx.tcx()));\n             (&function_type.sig, RustCall, Some(llenvironment_type))\n         }\n-        _ => panic!(\"expected closure or fn\")\n+        _ => ccx.sess().bug(\"expected closure or fn\")\n     };\n \n     let sig = ty::erase_late_bound_regions(ccx.tcx(), sig);\n@@ -2410,12 +2410,15 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_id: ast::NodeId,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n-    match node_type.sty {\n-        ty::ty_bare_fn(_, ref f) => {\n-            assert!(f.abi == Rust || f.abi == RustCall);\n+    if let ty::ty_bare_fn(_, ref f) = node_type.sty {\n+        if f.abi != Rust && f.abi != RustCall {\n+            ccx.sess().span_bug(sp, &format!(\"only the `{}` or `{}` calling conventions are valid \\\n+                                              for this function; `{}` was specified\",\n+                                              Rust.name(), RustCall.name(), f.abi.name()));\n         }\n-        _ => panic!(\"expected bare rust fn\")\n-    };\n+    } else {\n+        ccx.sess().span_bug(sp, \"expected bare rust function\")\n+    }\n \n     let llfn = decl_rust_fn(ccx, node_type, &sym[..]);\n     finish_register_fn(ccx, sp, sym, node_id, llfn);\n@@ -2802,7 +2805,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     llfn\n                 }\n \n-                _ => panic!(\"get_item_val: weird result in table\")\n+                _ => ccx.sess().bug(\"get_item_val: weird result in table\")\n             };\n \n             match attr::first_attr_value_str_by_name(&i.attrs,\n@@ -2866,7 +2869,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             let args = match v.node.kind {\n                 ast::TupleVariantKind(ref args) => args,\n                 ast::StructVariantKind(_) => {\n-                    panic!(\"struct variant kind unexpected in get_item_val\")\n+                    ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n                 }\n             };\n             assert!(args.len() != 0);\n@@ -2882,7 +2885,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                 ast::ItemEnum(_, _) => {\n                     register_fn(ccx, (*v).span, sym, id, ty)\n                 }\n-                _ => panic!(\"NodeVariant, shouldn't happen\")\n+                _ => ccx.sess().bug(\"NodeVariant, shouldn't happen\")\n             };\n             set_inline_hint(llfn);\n             llfn\n@@ -2935,9 +2938,17 @@ fn register_method(ccx: &CrateContext, id: ast::NodeId,\n \n     let sym = exported_name(ccx, id, mty, &m.attrs);\n \n-    let llfn = register_fn(ccx, m.span, sym, id, mty);\n-    set_llvm_fn_attrs(ccx, &m.attrs, llfn);\n-    llfn\n+    if let ty::ty_bare_fn(_, ref f) = mty.sty {\n+        let llfn = if f.abi == Rust || f.abi == RustCall {\n+            register_fn(ccx, m.span, sym, id, mty)\n+        } else {\n+            foreign::register_rust_fn_with_foreign_abi(ccx, m.span, sym, id)\n+        };\n+        set_llvm_fn_attrs(ccx, &m.attrs, llfn);\n+        return llfn;\n+    } else {\n+        ccx.sess().span_bug(m.span, \"expected bare rust function\");\n+    }\n }\n \n pub fn crate_ctxt_to_encode_parms<'a, 'tcx>(cx: &'a SharedCrateContext<'tcx>,"}, {"sha": "0cd53184e6c84fd2d5656b5c5c59eee758ce6ad3", "filename": "src/test/run-pass/extern-methods.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=bf7cde449b7e5086bf2fab3e4f0843d7a1a39ff0", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+trait A {\n+    extern \"fastcall\" fn test1(i: i32);\n+    extern fn test2(i: i32);\n+}\n+\n+struct S;\n+impl S {\n+    extern \"stdcall\" fn test3(i: i32) {\n+        assert_eq!(i, 3);\n+    }\n+}\n+\n+impl A for S {\n+    extern \"fastcall\" fn test1(i: i32) {\n+        assert_eq!(i, 1);\n+    }\n+    extern fn test2(i: i32) {\n+        assert_eq!(i, 2);\n+    }\n+}\n+\n+fn main() {\n+    <S as A>::test1(1);\n+    <S as A>::test2(2);\n+    S::test3(3);\n+}"}]}