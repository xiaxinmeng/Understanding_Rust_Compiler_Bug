{"sha": "6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTZkYmJkNjIxNWQ4NmVlOWQ3ZGQwYzE0NWY5YmQ3N2JkNzUyZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T01:16:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T01:16:47Z"}, "message": "Auto merge of #75238 - JohnTitor:rollup-llbk0sq, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #74888 (compiletest: ignore-endian-big, fixes #74829, fixes #74885)\n - #75175 (Make doctests of Ipv4Addr::from(u32) easier to read)\n - #75179 (Remove unused FromInner impl for Ipv4Addr)\n - #75181 (Fix typo in  `librustc_feature/active.rs`)\n - #75183 (Label rustfmt toolstate issues with A-rustfmt)\n - #75188 (Handle fieldless tuple structs in diagnostic code)\n - #75190 (Clean up E0746 explanation)\n - #75210 (Change the type of `AssertModuleSource::available_cgus`.)\n - #75211 (Note about endianness of returned value of {integer}::from_be_bytes and friends)\n - #75217 (Clean up E0747 explanation)\n - #75232 (Fix typo \"TraitObligatiom\" -> \"TraitObligation\")\n - #75236 (Fix typo \"biset\" -> \"bitset\")\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "63b08cd33feb0ed6f11aee99948aa1963551a8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b08cd33feb0ed6f11aee99948aa1963551a8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "html_url": "https://github.com/rust-lang/rust/commit/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f8d0c8f1060bbe74100f29cc6f2da63d697c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f8d0c8f1060bbe74100f29cc6f2da63d697c28", "html_url": "https://github.com/rust-lang/rust/commit/71f8d0c8f1060bbe74100f29cc6f2da63d697c28"}, {"sha": "3c131d67382c2e8c9d2fc6b3bc172f0f12e3d952", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c131d67382c2e8c9d2fc6b3bc172f0f12e3d952", "html_url": "https://github.com/rust-lang/rust/commit/3c131d67382c2e8c9d2fc6b3bc172f0f12e3d952"}], "stats": {"total": 127, "additions": 83, "deletions": 44}, "files": [{"sha": "95eae7e2a73a13202d97980ef3171459b291c663", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -4383,8 +4383,8 @@ assert_eq!(\n         }\n \n         doc_comment! {\n-            concat!(\"Create an integer value from its representation as a byte array in\n-big endian.\n+            concat!(\"Create a native endian integer value from its representation\n+as a byte array in big endian.\n \",\n $from_xe_bytes_doc,\n \"\n@@ -4416,8 +4416,8 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n \n         doc_comment! {\n             concat!(\"\n-Create an integer value from its representation as a byte array in\n-little endian.\n+Create a native endian integer value from its representation\n+as a byte array in little endian.\n \",\n $from_xe_bytes_doc,\n \"\n@@ -4448,8 +4448,8 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n         }\n \n         doc_comment! {\n-            concat!(\"Create an integer value from its memory representation as a byte\n-array in native endianness.\n+            concat!(\"Create a native endian integer value from its memory representation\n+as a byte array in native endianness.\n \n As the target platform's native endianness is used, portable code\n likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as"}, {"sha": "159ab981b237d5a822f42ce646c9d7be625235b0", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -961,11 +961,6 @@ impl AsInner<c::in_addr> for Ipv4Addr {\n         &self.inner\n     }\n }\n-impl FromInner<c::in_addr> for Ipv4Addr {\n-    fn from_inner(addr: c::in_addr) -> Ipv4Addr {\n-        Ipv4Addr { inner: addr }\n-    }\n-}\n \n #[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n impl From<Ipv4Addr> for u32 {\n@@ -976,8 +971,8 @@ impl From<Ipv4Addr> for u32 {\n     /// ```\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// let addr = Ipv4Addr::new(13, 12, 11, 10);\n-    /// assert_eq!(0x0d0c0b0au32, u32::from(addr));\n+    /// let addr = Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe);\n+    /// assert_eq!(0xcafebabe, u32::from(addr));\n     /// ```\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n@@ -994,8 +989,8 @@ impl From<u32> for Ipv4Addr {\n     /// ```\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// let addr = Ipv4Addr::from(0x0d0c0b0au32);\n-    /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n+    /// let addr = Ipv4Addr::from(0xcafebabe);\n+    /// assert_eq!(Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe), addr);\n     /// ```\n     fn from(ip: u32) -> Ipv4Addr {\n         Ipv4Addr::from(ip.to_be_bytes())"}, {"sha": "90755d47f67901188c93af03764be6c1985ab6f7", "filename": "src/librustc_error_codes/error_codes/E0746.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,4 +1,4 @@\n-Return types cannot be `dyn Trait`s as they must be `Sized`.\n+An unboxed trait object was used as a return value.\n \n Erroneous code example:\n \n@@ -13,11 +13,13 @@ impl T for S {\n \n // Having the trait `T` as return type is invalid because\n // unboxed trait objects do not have a statically known size:\n-fn foo() -> dyn T {\n+fn foo() -> dyn T { // error!\n     S(42)\n }\n ```\n \n+Return types cannot be `dyn Trait`s as they must be `Sized`.\n+\n To avoid the error there are a couple of options.\n \n If there is a single type involved, you can use [`impl Trait`]:\n@@ -32,7 +34,7 @@ If there is a single type involved, you can use [`impl Trait`]:\n # }\n // The compiler will select `S(usize)` as the materialized return type of this\n // function, but callers will only know that the return type implements `T`.\n-fn foo() -> impl T {\n+fn foo() -> impl T { // ok!\n     S(42)\n }\n ```\n@@ -57,7 +59,7 @@ impl T for O {\n \n // This now returns a \"trait object\" and callers are only be able to access\n // associated items from `T`.\n-fn foo(x: bool) -> Box<dyn T> {\n+fn foo(x: bool) -> Box<dyn T> { // ok!\n     if x {\n         Box::new(S(42))\n     } else {"}, {"sha": "caf7e0fba07a343aaf1e1238b3fcd10795b87c49", "filename": "src/librustc_error_codes/error_codes/E0747.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,4 +1,4 @@\n-Generic arguments must be provided in the same order as the corresponding\n+Generic arguments were not provided in the same order as the corresponding\n generic parameters are declared.\n \n Erroneous code example:\n@@ -11,7 +11,7 @@ type X = S<(), 'static>; // error: the type argument is provided before the\n ```\n \n The argument order should be changed to match the parameter declaration\n-order, as in the following.\n+order, as in the following:\n \n ```\n struct S<'a, T>(&'a T);"}, {"sha": "7e42f219ce2843c640e4119c1d81bee809e440f6", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -576,7 +576,7 @@ declare_features! (\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (active, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n-    /// Alloc calling `transmute` in const fn\n+    /// Allows calling `transmute` in const fn\n     (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "29d615b04a394cc3227a00379addfb81da52fa47", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -39,8 +39,8 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             .collect_and_partition_mono_items(LOCAL_CRATE)\n             .1\n             .iter()\n-            .map(|cgu| cgu.name())\n-            .collect::<BTreeSet<Symbol>>();\n+            .map(|cgu| cgu.name().to_string())\n+            .collect::<BTreeSet<String>>();\n \n         let ams = AssertModuleSource { tcx, available_cgus };\n \n@@ -52,7 +52,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: BTreeSet<Symbol>,\n+    available_cgus: BTreeSet<String>,\n }\n \n impl AssertModuleSource<'tcx> {\n@@ -121,12 +121,11 @@ impl AssertModuleSource<'tcx> {\n \n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n-        if !self.available_cgus.contains(&cgu_name) {\n+        if !self.available_cgus.contains(&*cgu_name.as_str()) {\n             self.tcx.sess.span_err(\n                 attr.span,\n                 &format!(\n-                    \"no module named `{}` (mangled: {}). \\\n-                          Available modules: {}\",\n+                    \"no module named `{}` (mangled: {}). Available modules: {}\",\n                     user_path,\n                     cgu_name,\n                     self.available_cgus"}, {"sha": "a6b5b0ff3017a5f40b3f1dccb405fdb8778ac74a", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1075,10 +1075,9 @@ impl<'a> Resolver<'a> {\n         ) = binding.kind\n         {\n             let def_id = (&*self).parent(ctor_def_id).expect(\"no parent for a constructor\");\n-            if let Some(fields) = self.field_names.get(&def_id) {\n-                let first_field = fields.first().expect(\"empty field list in the map\");\n-                return Some(fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)));\n-            }\n+            let fields = self.field_names.get(&def_id)?;\n+            let first_field = fields.first()?; // Handle `struct Foo()`\n+            return Some(fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)));\n         }\n         None\n     }"}, {"sha": "dbb64e571781e317ad20522e37c5905de8c7087c", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -440,7 +440,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligation\n         );\n \n-        // `previous_stack` stores a `TraitObligatiom`, while `obligation` is\n+        // `previous_stack` stores a `TraitObligation`, while `obligation` is\n         // a `PredicateObligation`. These are distinct types, so we can't\n         // use any `Option` combinator method that would force them to be\n         // the same."}, {"sha": "9c30e0400312adc9889242428cc402a1394a421f", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,7 +1,7 @@\n+// ignore-endian-big\n extern \"C\" {\n     static X: i32;\n }\n-\n static Y: i32 = 42;\n \n // EMIT_MIR const_promotion_extern_static.BAR.PromoteTemps.diff"}, {"sha": "b0fcb86fcee0f25f6567ca42849cc90844f1929d", "filename": "src/test/mir-opt/const_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n static FOO: &[(Option<i32>, &[&str])] =\n     &[(None, &[]), (None, &[\"foo\", \"bar\"]), (Some(42), &[\"meh\", \"mop\", \"m\u00f6p\"])];\n "}, {"sha": "30afedffb39b3d817b0124701c56f8ede105c5a6", "filename": "src/test/mir-opt/const_allocation2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n // EMIT_MIR const_allocation2.main.ConstProp.after.mir\n fn main() {\n     FOO;"}, {"sha": "ddeb32ab9a583132579c132fcb1238bd97de3504", "filename": "src/test/mir-opt/const_allocation3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n // EMIT_MIR const_allocation3.main.ConstProp.after.mir\n fn main() {\n     FOO;"}, {"sha": "57298605b18737546c5e7ee7ea3800d54a10ee3d", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -1,8 +1,8 @@\n+// ignore-endian-big\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n #![feature(box_syntax)]\n-\n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {\n     let _x: Box<Vec<u32>> = box Vec::new();"}, {"sha": "4601a3d4741f544e4f293ec307dd19240f6ec8cc", "filename": "src/test/ui/privacy/issue-75062-fieldless-tuple-struct.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #75062\n+// Tests that we don't ICE on a privacy error for a fieldless tuple struct.\n+\n+mod foo {\n+    struct Bar();\n+}\n+\n+fn main() {\n+    foo::Bar(); //~ ERROR tuple struct\n+}"}, {"sha": "14a12003e2de8253a4228df7757777482f1b0332", "filename": "src/test/ui/privacy/issue-75062-fieldless-tuple-struct.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-75062-fieldless-tuple-struct.stderr?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -0,0 +1,15 @@\n+error[E0603]: tuple struct `Bar` is private\n+  --> $DIR/issue-75062-fieldless-tuple-struct.rs:9:10\n+   |\n+LL |     foo::Bar();\n+   |          ^^^ private tuple struct\n+   |\n+note: the tuple struct `Bar` is defined here\n+  --> $DIR/issue-75062-fieldless-tuple-struct.rs:5:5\n+   |\n+LL |     struct Bar();\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0603`."}, {"sha": "8c436841b44e8622be2aebda7f457ab458bdeaba", "filename": "src/test/ui/simd/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -2,6 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n+// ignore-endian-big behavior of simd_bitmask is endian-specific\n \n // Test that the simd_bitmask intrinsic produces correct results.\n "}, {"sha": "dc9ec5d2760fe02e2e32d0c6e69556b5f004ec7a", "filename": "src/test/ui/simd/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -2,10 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n-// ignore-mips       behavior of simd_select_bitmask is endian-specific\n-// ignore-mips64     behavior of simd_select_bitmask is endian-specific\n-// ignore-powerpc    behavior of simd_select_bitmask is endian-specific\n-// ignore-powerpc64  behavior of simd_select_bitmask is endian-specific\n+// ignore-endian-big behavior of simd_select_bitmask is endian-specific\n \n // Test that the simd_select intrinsics produces correct results.\n "}, {"sha": "edbb83726333b91f42cceda57dcaeb8303cc1c21", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -827,6 +827,7 @@ impl Config {\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n             (self.target != self.host && name == \"cross-compile\") ||\n+            (name == \"endian-big\" && util::is_big_endian(&self.target)) ||\n             (self.remote_test_client.is_some() && name == \"remote\") ||\n             match self.compare_mode {\n                 Some(CompareMode::Nll) => name == \"compare-mode-nll\","}, {"sha": "ddd7941b11469d973f70c7201c6f2d62a7659b41", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -99,6 +99,20 @@ pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n     &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n+const BIG_ENDIAN: &'static [&'static str] = &[\n+    \"armebv7r\",\n+    \"mips\",\n+    \"mips64\",\n+    \"mipsisa32r6\",\n+    \"mipsisa64r6\",\n+    \"powerpc\",\n+    \"powerpc64\",\n+    \"s390x\",\n+    \"sparc\",\n+    \"sparc64\",\n+    \"sparcv9\",\n+];\n+\n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten\n     // and then we also recognize `wasm32-bare` as the os for the target\n@@ -125,6 +139,12 @@ pub fn get_arch(triple: &str) -> &'static str {\n     panic!(\"Cannot determine Architecture from triple\");\n }\n \n+/// Determine the endianness from `triple`\n+pub fn is_big_endian(triple: &str) -> bool {\n+    let triple_arch = triple.split('-').next().unwrap();\n+    BIG_ENDIAN.contains(&triple_arch)\n+}\n+\n pub fn matches_env(triple: &str, name: &str) -> bool {\n     if let Some(env) = triple.split('-').nth(3) { env.starts_with(name) } else { false }\n }"}, {"sha": "55e2d7cf8278fff95c8793a6b473f557c73af943", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -42,7 +42,7 @@\n LABELS = {\n     'miri': ['A-miri', 'C-bug'],\n     'rls': ['A-rls', 'C-bug'],\n-    'rustfmt': ['C-bug'],\n+    'rustfmt': ['A-rustfmt', 'C-bug'],\n     'book': ['C-bug'],\n     'nomicon': ['C-bug'],\n     'reference': ['C-bug'],"}, {"sha": "d2d1807b3bb22cb27998099fe0e5d39e0b192582", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=6396dbbd6215d86ee9d7dd0c145f9bd77bd752d0", "patch": "@@ -15,7 +15,7 @@\n //! We have two separate encoding schemes: a skiplist-like approach, and a\n //! compressed bitset. The datasets we consider mostly use the skiplist (it's\n //! smaller) but the lowercase and uppercase sets are sufficiently sparse for\n-//! the bitset to be worthwhile -- for those sets the biset is a 2x size win.\n+//! the bitset to be worthwhile -- for those sets the bitset is a 2x size win.\n //! Since the bitset is also faster, this seems an obvious choice. (As a\n //! historical note, the bitset was also the prior implementation, so its\n //! relative complexity had already been paid)."}]}