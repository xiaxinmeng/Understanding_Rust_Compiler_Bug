{"sha": "37ce3321ebcc901d15583b5b0266d945130e123b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Y2UzMzIxZWJjYzkwMWQxNTU4M2I1YjAyNjZkOTQ1MTMwZTEyM2I=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-02T22:32:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-02T22:32:43Z"}, "message": "Rollup merge of #84811 - scottmcm:rustdoc-trait-alias-fix, r=jyn514\n\nRustDoc: Fix bounds linking trait.Foo instead of traitalias.Foo\n\nFixes #84782\n\nThe code was assuming `Trait` when adding bounds to the cache, so add a check on the DefId to see what its kind really is.\n\nr? `@jyn514`\n\nBefore:\n![image](https://user-images.githubusercontent.com/18526288/116775611-6a751e80-aa53-11eb-84d0-ed6b7782be3c.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/18526288/116802227-d19cdc80-ab00-11eb-8133-7b34dd750da2.png)", "tree": {"sha": "22d4ee52b39d4f4bd846e9c056acc26ae5e8728a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d4ee52b39d4f4bd846e9c056acc26ae5e8728a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ce3321ebcc901d15583b5b0266d945130e123b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjyiMCRBK7hj4Ov3rIwAAD7IIACeAPz274zzqPhKeFplPmyih\npZ2bhms2ix6g2qylh4CmqMx+xb5t//rj/r+m3RtsPqMCTUZtwFCn+AKzT9V42TuN\n0l16qoTyObnjEE3s/DwrAOk5/+Hpz0oqgBkcA/uvC6NixqqFcKXzU69jzK4q0wGj\nEMAYMVqjJqRooAguumcDBSApb5UFkZkKOekG0RZBOkZO3w9uSztAGvHLom+148Cy\njT70o3y7pGRudxrt6ajn3RF/pUyuUKsYc7nAdlpos/jZbc7H1b2Bo5EkfzwY4ekM\n5yl0dZE0CWpICZswOlcKtI9cE1BywV078j96BffW5sjqSaP5rwyyo4OAOGwbYMU=\n=02cQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 22d4ee52b39d4f4bd846e9c056acc26ae5e8728a\nparent 0133af504b804ecaa6223bc38730020848db5982\nparent 40ffa942444b84336b0d03f3004d7eb9ca36f8ad\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619994763 +0200\ncommitter GitHub <noreply@github.com> 1619994763 +0200\n\nRollup merge of #84811 - scottmcm:rustdoc-trait-alias-fix, r=jyn514\n\nRustDoc: Fix bounds linking trait.Foo instead of traitalias.Foo\n\nFixes #84782\n\nThe code was assuming `Trait` when adding bounds to the cache, so add a check on the DefId to see what its kind really is.\n\nr? `@jyn514`\n\nBefore:\n![image](https://user-images.githubusercontent.com/18526288/116775611-6a751e80-aa53-11eb-84d0-ed6b7782be3c.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/18526288/116802227-d19cdc80-ab00-11eb-8133-7b34dd750da2.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ce3321ebcc901d15583b5b0266d945130e123b", "html_url": "https://github.com/rust-lang/rust/commit/37ce3321ebcc901d15583b5b0266d945130e123b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ce3321ebcc901d15583b5b0266d945130e123b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0133af504b804ecaa6223bc38730020848db5982", "url": "https://api.github.com/repos/rust-lang/rust/commits/0133af504b804ecaa6223bc38730020848db5982", "html_url": "https://github.com/rust-lang/rust/commit/0133af504b804ecaa6223bc38730020848db5982"}, {"sha": "40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ffa942444b84336b0d03f3004d7eb9ca36f8ad", "html_url": "https://github.com/rust-lang/rust/commit/40ffa942444b84336b0d03f3004d7eb9ca36f8ad"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "f6c13e5f4187ae0afbb48426f103088870149f95", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -188,7 +188,7 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     if did.is_local() {\n         cx.cache.exact_paths.insert(did, fqn);\n     } else {\n-        cx.cache.external_paths.insert(did, (fqn, ItemType::from(kind)));\n+        cx.cache.external_paths.insert(did, (fqn, kind));\n     }\n }\n "}, {"sha": "33df9ea3f3e0cb11cdf819f4d96fbdd03609b027", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -17,11 +17,11 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n-use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -158,7 +158,15 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        inline::record_extern_fqn(cx, trait_ref.def_id, ItemType::Trait);\n+        let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n+        if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n+            span_bug!(\n+                cx.tcx.def_span(trait_ref.def_id),\n+                \"`TraitRef` had unexpected kind {:?}\",\n+                kind\n+            );\n+        }\n+        inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n         let path = external_path(\n             cx,\n             cx.tcx.item_name(trait_ref.def_id),"}, {"sha": "b6b76a96e7f9647ec1b36faaed916f7727a2e05b", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -327,6 +327,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::EnumItem(..)\n             | clean::TypedefItem(..)\n             | clean::TraitItem(..)\n+            | clean::TraitAliasItem(..)\n             | clean::FunctionItem(..)\n             | clean::ModuleItem(..)\n             | clean::ForeignFunctionItem(..)\n@@ -337,26 +338,43 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::ForeignTypeItem\n             | clean::MacroItem(..)\n             | clean::ProcMacroItem(..)\n-            | clean::VariantItem(..)\n-                if !self.cache.stripped_mod =>\n-            {\n-                // Re-exported items mean that the same id can show up twice\n-                // in the rustdoc ast that we're looking at. We know,\n-                // however, that a re-exported item doesn't show up in the\n-                // `public_items` map, so we can skip inserting into the\n-                // paths map if there was already an entry present and we're\n-                // not a public item.\n-                if !self.cache.paths.contains_key(&item.def_id)\n-                    || self.cache.access_levels.is_public(item.def_id)\n-                {\n-                    self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+            | clean::VariantItem(..) => {\n+                if !self.cache.stripped_mod {\n+                    // Re-exported items mean that the same id can show up twice\n+                    // in the rustdoc ast that we're looking at. We know,\n+                    // however, that a re-exported item doesn't show up in the\n+                    // `public_items` map, so we can skip inserting into the\n+                    // paths map if there was already an entry present and we're\n+                    // not a public item.\n+                    if !self.cache.paths.contains_key(&item.def_id)\n+                        || self.cache.access_levels.is_public(item.def_id)\n+                    {\n+                        self.cache\n+                            .paths\n+                            .insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+                    }\n                 }\n             }\n             clean::PrimitiveItem(..) => {\n                 self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n             }\n \n-            _ => {}\n+            clean::ExternCrateItem { .. }\n+            | clean::ImportItem(..)\n+            | clean::OpaqueTyItem(..)\n+            | clean::ImplItem(..)\n+            | clean::TyMethodItem(..)\n+            | clean::MethodItem(..)\n+            | clean::StructFieldItem(..)\n+            | clean::AssocConstItem(..)\n+            | clean::AssocTypeItem(..)\n+            | clean::StrippedItem(..)\n+            | clean::KeywordItem(..) => {\n+                // FIXME: Do these need handling?\n+                // The person writing this comment doesn't know.\n+                // So would rather leave them to an expert,\n+                // as at least the list is better than `_ => {}`.\n+            }\n         }\n \n         // Maintain the parent stack"}, {"sha": "6df06c87a09d5ea09c4cf5452e4a659b787615bd", "filename": "src/test/rustdoc/auxiliary/trait-alias-mention.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -0,0 +1,3 @@\n+#![feature(trait_alias)]\n+\n+pub trait SomeAlias = std::fmt::Debug + std::marker::Copy;"}, {"sha": "6da0dc68785c58dd11ade1e357e17e640c94eff1", "filename": "src/test/rustdoc/trait-alias-mention.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:trait-alias-mention.rs\n+// build-aux-docs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate trait_alias_mention;\n+\n+// @has foo/fn.mention_alias_in_bounds.html '//a[@href=\"../trait_alias_mention/traitalias.SomeAlias.html\"]' 'SomeAlias'\n+pub fn mention_alias_in_bounds<T: trait_alias_mention::SomeAlias>() {\n+}"}, {"sha": "6cd4a1a0afa085e89f210d1c46138fda15f1194a", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ce3321ebcc901d15583b5b0266d945130e123b/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=37ce3321ebcc901d15583b5b0266d945130e123b", "patch": "@@ -19,3 +19,5 @@ pub trait CopyAlias = Copy;\n pub trait Alias2 = Copy + Debug;\n // @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n+// @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n+pub fn bar<T>() where T: Alias2 {}"}]}