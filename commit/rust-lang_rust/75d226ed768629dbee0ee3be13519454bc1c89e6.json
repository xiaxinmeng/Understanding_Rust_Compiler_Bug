{"sha": "75d226ed768629dbee0ee3be13519454bc1c89e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDIyNmVkNzY4NjI5ZGJlZTBlZTNiZTEzNTE5NDU0YmMxYzg5ZTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-22T09:37:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-22T09:37:50Z"}, "message": "Rollup merge of #56002 - Axary:master, r=estebank\n\nfix #55972: Erroneous self arguments on bare functions emit subpar compilation error\n\n#55972\n\nr? @estebank", "tree": {"sha": "a5217439bc5a89d9bcbc898e1ef5c96c736cee36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5217439bc5a89d9bcbc898e1ef5c96c736cee36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d226ed768629dbee0ee3be13519454bc1c89e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb9njuCRBK7hj4Ov3rIwAAdHIIAA2J5se6RICljv/9a8cS5zLP\n1FM7IL3sBjm6geNW4kORDeqOhHwpgyf9U4DYeFERrjHs7QyzpyQUq29azyq4XG0w\nI1tigAkojeKcVaUmw62DBWue8Z/LPmir8y4GcRVgI0Sj8HL5dN25+jfB3SDlVzHN\nT2ur9gS6QzYOh3MNMQ3HXmVlQyrvYun1ACLt8hgumAWcBzntfROat1fdqVjk8DzR\nC2id0Xo6tf/X/w26UKo/SM9m0CdiTuFrJKO3pFoFu+wh66LlkPLRnPdQ2UckCf19\nD3cm4XFup3v7et+7Y271oLe2Htvu+kYSC9wWI73Rvlz6A0c80faNmOfPyVvtkCU=\n=/J9N\n-----END PGP SIGNATURE-----\n", "payload": "tree a5217439bc5a89d9bcbc898e1ef5c96c736cee36\nparent 636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9\nparent 88d60941da317d8e9deee34d2ed5e8dbb54f928c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1542879470 +0100\ncommitter GitHub <noreply@github.com> 1542879470 +0100\n\nRollup merge of #56002 - Axary:master, r=estebank\n\nfix #55972: Erroneous self arguments on bare functions emit subpar compilation error\n\n#55972\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d226ed768629dbee0ee3be13519454bc1c89e6", "html_url": "https://github.com/rust-lang/rust/commit/75d226ed768629dbee0ee3be13519454bc1c89e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d226ed768629dbee0ee3be13519454bc1c89e6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "html_url": "https://github.com/rust-lang/rust/commit/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9"}, {"sha": "88d60941da317d8e9deee34d2ed5e8dbb54f928c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d60941da317d8e9deee34d2ed5e8dbb54f928c", "html_url": "https://github.com/rust-lang/rust/commit/88d60941da317d8e9deee34d2ed5e8dbb54f928c"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "e2f09affd4fea5cd823b6a9d3552aee36b1a06f9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -1824,6 +1824,14 @@ impl<'a> Parser<'a> {\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n+        if let Ok(Some(_)) = self.parse_self_arg() {\n+            let mut err = self.struct_span_err(self.prev_span,\n+                \"unexpected `self` argument in function\");\n+            err.span_label(self.prev_span,\n+                \"`self` is only valid as the first argument of an associated function\");\n+            return Err(err);\n+        }\n+\n         let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n@@ -5385,11 +5393,12 @@ impl<'a> Parser<'a> {\n \n     fn parse_fn_args(&mut self, named_args: bool, allow_variadic: bool)\n                      -> PResult<'a, (Vec<Arg> , bool)> {\n+        self.expect(&token::OpenDelim(token::Paren))?;\n+\n         let sp = self.span;\n         let mut variadic = false;\n         let args: Vec<Option<Arg>> =\n-            self.parse_unspanned_seq(\n-                &token::OpenDelim(token::Paren),\n+            self.parse_seq_to_before_end(\n                 &token::CloseDelim(token::Paren),\n                 SeqSep::trailing_allowed(token::Comma),\n                 |p| {\n@@ -5436,6 +5445,8 @@ impl<'a> Parser<'a> {\n                 }\n             )?;\n \n+        self.eat(&token::CloseDelim(token::Paren));\n+\n         let args: Vec<_> = args.into_iter().filter_map(|x| x).collect();\n \n         if variadic && args.is_empty() {"}, {"sha": "741ba5f41ce16b9caf72e7b40a58bf226f86f64d", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,5 @@\n+fn a(&self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n+\n+fn main() { }"}, {"sha": "6a878b619d813651d91fa60bb63c34c1481ce960", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/bare-fn-start.rs:1:7\n+   |\n+LL | fn a(&self) { }\n+   |       ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}, {"sha": "704fa996ca631a73fe1b3333ce1eae9406cbac02", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,5 @@\n+fn b(foo: u32, &mut self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n+\n+fn main() { }"}, {"sha": "b13f746a4ec584a5bc3e2b62bc0de418247a8bbb", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/bare-fn.rs:1:21\n+   |\n+LL | fn b(foo: u32, &mut self) { }\n+   |                     ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}, {"sha": "31e867bc7641f4f263374b28e4814a5a39c6b4ef", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,11 @@\n+struct Foo {}\n+\n+impl Foo {\n+    fn c(foo: u32, self) {}\n+    //~^ ERROR unexpected `self` argument in function\n+    //~| NOTE `self` is only valid as the first argument of an associated function\n+\n+    fn good(&mut self, foo: u32) {}\n+}\n+\n+fn main() { }"}, {"sha": "b3c2cc5b5ebe0874e1f222f695c4b3f0733f5c89", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d226ed768629dbee0ee3be13519454bc1c89e6/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=75d226ed768629dbee0ee3be13519454bc1c89e6", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected `self` argument in function\n+  --> $DIR/trait-fn.rs:4:20\n+   |\n+LL |     fn c(foo: u32, self) {}\n+   |                    ^^^^ `self` is only valid as the first argument of an associated function\n+\n+error: aborting due to previous error\n+"}]}