{"sha": "65d0bfbca569b91eec6199b4629bc53db417efed", "node_id": "C_kwDOAAsO6NoAKDY1ZDBiZmJjYTU2OWI5MWVlYzYxOTliNDYyOWJjNTNkYjQxN2VmZWQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T23:50:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-08T23:02:50Z"}, "message": "Cut down large comment about zero-variant enums.\n\nWhen deriving functions for zero-variant enums, we just generated a\nfunction body that calls `std::instrincs::unreachable`. There is a large\ncomment with some not-very-useful historical discussion about\nalternatives, including some discussion of feature-gating zero-variant\nenums, which is clearly irrelevant today.\n\nThis commit cuts the comment down greatly.", "tree": {"sha": "d4b8230e59b54b9c82fdce09eb66f92ab615ed56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b8230e59b54b9c82fdce09eb66f92ab615ed56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d0bfbca569b91eec6199b4629bc53db417efed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d0bfbca569b91eec6199b4629bc53db417efed", "html_url": "https://github.com/rust-lang/rust/commit/65d0bfbca569b91eec6199b4629bc53db417efed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d0bfbca569b91eec6199b4629bc53db417efed/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1dfcab679a1c8248b16e34902a578c2f7bf5e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1dfcab679a1c8248b16e34902a578c2f7bf5e2", "html_url": "https://github.com/rust-lang/rust/commit/7f1dfcab679a1c8248b16e34902a578c2f7bf5e2"}], "stats": {"total": 52, "additions": 3, "deletions": 49}, "files": [{"sha": "70a97c32b4869f746b70a1e58c657a5048ed18e7", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/65d0bfbca569b91eec6199b4629bc53db417efed/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d0bfbca569b91eec6199b4629bc53db417efed/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=65d0bfbca569b91eec6199b4629bc53db417efed", "patch": "@@ -1378,55 +1378,9 @@ impl<'a> MethodDef<'a> {\n             let arm_expr = cx.expr_if(span, discriminant_test, all_match, Some(arm_expr));\n             BlockOrExpr(index_let_stmts, Some(arm_expr))\n         } else if variants.is_empty() {\n-            // As an additional wrinkle, For a zero-variant enum A,\n-            // currently the compiler\n-            // will accept `fn (a: &Self) { match   *a   { } }`\n-            // but rejects `fn (a: &Self) { match (&*a,) { } }`\n-            // as well as  `fn (a: &Self) { match ( *a,) { } }`\n-            //\n-            // This means that the strategy of building up a tuple of\n-            // all Self arguments fails when Self is a zero variant\n-            // enum: rustc rejects the expanded program, even though\n-            // the actual code tends to be impossible to execute (at\n-            // least safely), according to the type system.\n-            //\n-            // The most expedient fix for this is to just let the\n-            // code fall through to the catch-all.  But even this is\n-            // error-prone, since the catch-all as defined above would\n-            // generate code like this:\n-            //\n-            //     _ => { let __self0 = match *self { };\n-            //            let __self1 = match *__arg_0 { };\n-            //            <catch-all-expr> }\n-            //\n-            // Which is yields bindings for variables which type\n-            // inference cannot resolve to unique types.\n-            //\n-            // One option to the above might be to add explicit type\n-            // annotations.  But the *only* reason to go down that path\n-            // would be to try to make the expanded output consistent\n-            // with the case when the number of enum variants >= 1.\n-            //\n-            // That just isn't worth it.  In fact, trying to generate\n-            // sensible code for *any* deriving on a zero-variant enum\n-            // does not make sense.  But at the same time, for now, we\n-            // do not want to cause a compile failure just because the\n-            // user happened to attach a deriving to their\n-            // zero-variant enum.\n-            //\n-            // Instead, just generate a failing expression for the\n-            // zero variant case, skipping matches and also skipping\n-            // delegating back to the end user code entirely.\n-            //\n-            // (See also #4499 and #12609; note that some of the\n-            // discussions there influence what choice we make here;\n-            // e.g., if we feature-gate `match x { ... }` when x refers\n-            // to an uninhabited type (e.g., a zero-variant enum or a\n-            // type holding such an enum), but do not feature-gate\n-            // zero-variant enums themselves, then attempting to\n-            // derive Debug on such a type could here generate code\n-            // that needs the feature gate enabled.)\n-\n+            // There is no sensible code to be generated for *any* deriving on\n+            // a zero-variant enum. So we just generate a failing expression\n+            // for the zero variant case.\n             BlockOrExpr(vec![], Some(deriving::call_unreachable(cx, span)))\n         } else {\n             // Final wrinkle: the selflike_args are expressions that deref"}]}