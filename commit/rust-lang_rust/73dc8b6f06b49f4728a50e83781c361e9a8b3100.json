{"sha": "73dc8b6f06b49f4728a50e83781c361e9a8b3100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZGM4YjZmMDZiNDlmNDcyOGE1MGU4Mzc4MWMzNjFlOWE4YjMxMDA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-01T23:39:01Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-15T18:16:27Z"}, "message": "Another attempt to add multiple edits", "tree": {"sha": "677cb7280fc39b27761bd4afd2e6294aec9d739c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677cb7280fc39b27761bd4afd2e6294aec9d739c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73dc8b6f06b49f4728a50e83781c361e9a8b3100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73dc8b6f06b49f4728a50e83781c361e9a8b3100", "html_url": "https://github.com/rust-lang/rust/commit/73dc8b6f06b49f4728a50e83781c361e9a8b3100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73dc8b6f06b49f4728a50e83781c361e9a8b3100/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01422cc31d1917aaef4b1f402eda05abfff1e75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01422cc31d1917aaef4b1f402eda05abfff1e75f", "html_url": "https://github.com/rust-lang/rust/commit/01422cc31d1917aaef4b1f402eda05abfff1e75f"}], "stats": {"total": 125, "additions": 97, "deletions": 28}, "files": [{"sha": "879216a3669a7ecc8d228c7dfeb66df31b5ceb8c", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -14,7 +14,7 @@ use crate::{AssistAction, AssistId, AssistLabel};\n #[derive(Clone, Debug)]\n pub(crate) enum Assist {\n     Unresolved { label: AssistLabel },\n-    Resolved { label: AssistLabel, action: AssistAction },\n+    Resolved { label: AssistLabel, action: AssistAction, alternative_actions: Vec<AssistAction> },\n }\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n@@ -81,18 +81,43 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         self,\n         id: AssistId,\n         label: impl Into<String>,\n-        f: impl FnOnce(&mut AssistBuilder),\n+        f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n         let label = AssistLabel { label: label.into(), id };\n         assert!(label.label.chars().nth(0).unwrap().is_uppercase());\n \n         let assist = if self.should_compute_edit {\n             let action = {\n-                let mut edit = AssistBuilder::default();\n+                let mut edit = ActionBuilder::default();\n                 f(&mut edit);\n                 edit.build()\n             };\n-            Assist::Resolved { label, action }\n+            Assist::Resolved { label, action, alternative_actions: Vec::default() }\n+        } else {\n+            Assist::Unresolved { label }\n+        };\n+\n+        Some(assist)\n+    }\n+\n+    #[allow(dead_code)] // will be used for auto import assist with multiple actions\n+    pub(crate) fn add_assist_group(\n+        self,\n+        id: AssistId,\n+        label: impl Into<String>,\n+        f: impl FnOnce() -> (ActionBuilder, Vec<ActionBuilder>),\n+    ) -> Option<Assist> {\n+        let label = AssistLabel { label: label.into(), id };\n+        let assist = if self.should_compute_edit {\n+            let (action, alternative_actions) = f();\n+            Assist::Resolved {\n+                label,\n+                action: action.build(),\n+                alternative_actions: alternative_actions\n+                    .into_iter()\n+                    .map(ActionBuilder::build)\n+                    .collect(),\n+            }\n         } else {\n             Assist::Unresolved { label }\n         };\n@@ -128,13 +153,20 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n }\n \n #[derive(Default)]\n-pub(crate) struct AssistBuilder {\n+pub(crate) struct ActionBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextUnit>,\n     target: Option<TextRange>,\n+    label: Option<String>,\n }\n \n-impl AssistBuilder {\n+impl ActionBuilder {\n+    #[allow(dead_code)]\n+    /// Adds a custom label to the action, if it needs to be different from the assist label\n+    pub fn label(&mut self, label: impl Into<String>) {\n+        self.label = Some(label.into())\n+    }\n+\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n@@ -193,6 +225,7 @@ impl AssistBuilder {\n             edit: self.edit.finish(),\n             cursor_position: self.cursor_position,\n             target: self.target,\n+            label: self.label,\n         }\n     }\n }"}, {"sha": "45e0f983fecb3d44fca64a2f11f22749e4e7da4a", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::assist_ctx::AssistBuilder;\n+use crate::assist_ctx::ActionBuilder;\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: inline_local_variable\n@@ -94,7 +94,7 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n     ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n         \"Inline variable\",\n-        move |edit: &mut AssistBuilder| {\n+        move |edit: &mut ActionBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n                 if should_wrap {"}, {"sha": "21bee228dadca58fdc2d52b97342b7374d263494", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -15,16 +15,16 @@ fn check(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = TestDB::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let (_assist_id, action) = crate::assists(&db, frange)\n+    let (_assist_id, action, _) = crate::assists(&db, frange)\n         .into_iter()\n-        .find(|(id, _)| id.id.0 == assist_id)\n+        .find(|(id, _, _)| id.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n                 crate::assists(&db, frange)\n                     .into_iter()\n-                    .map(|(id, _)| id.id.0)\n+                    .map(|(id, _, _)| id.id.0)\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )"}, {"sha": "95a530821ec6e3d73d1dbf5492ee86caefd38c98", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -35,6 +35,7 @@ pub struct AssistLabel {\n \n #[derive(Debug, Clone)]\n pub struct AssistAction {\n+    pub label: Option<String>,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n     pub target: Option<TextRange>,\n@@ -64,7 +65,7 @@ where\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists<H>(db: &H, range: FileRange) -> Vec<(AssistLabel, AssistAction)>\n+pub fn assists<H>(db: &H, range: FileRange) -> Vec<(AssistLabel, AssistAction, Vec<AssistAction>)>\n where\n     H: HirDatabase + 'static,\n {\n@@ -75,7 +76,9 @@ where\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n-                Assist::Resolved { label, action } => (label, action),\n+                Assist::Resolved { label, action, alternative_actions } => {\n+                    (label, action, alternative_actions)\n+                }\n                 Assist::Unresolved { .. } => unreachable!(),\n             })\n             .collect::<Vec<_>>();"}, {"sha": "db6e4e8b704e50634ea1969398fbaa6f87dbe887", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -2,27 +2,46 @@\n \n use ra_db::{FilePosition, FileRange};\n \n-use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n+use crate::{db::RootDatabase, FileId, SourceChange, SourceFileEdit};\n \n pub use ra_assists::AssistId;\n+use ra_assists::{AssistAction, AssistLabel};\n \n #[derive(Debug)]\n pub struct Assist {\n     pub id: AssistId,\n     pub change: SourceChange,\n+    pub label: String,\n+    pub alternative_changes: Vec<SourceChange>,\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n     ra_assists::assists(db, frange)\n         .into_iter()\n-        .map(|(label, action)| {\n+        .map(|(assist_label, action, alternative_actions)| {\n             let file_id = frange.file_id;\n-            let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-            let id = label.id;\n-            let change = SourceChange::source_file_edit(label.label, file_edit).with_cursor_opt(\n-                action.cursor_position.map(|offset| FilePosition { offset, file_id }),\n-            );\n-            Assist { id, change }\n+            Assist {\n+                id: assist_label.id,\n+                label: assist_label.label.clone(),\n+                change: action_to_edit(action, file_id, &assist_label),\n+                alternative_changes: alternative_actions\n+                    .into_iter()\n+                    .map(|action| action_to_edit(action, file_id, &assist_label))\n+                    .collect(),\n+            }\n         })\n         .collect()\n }\n+\n+fn action_to_edit(\n+    action: AssistAction,\n+    file_id: FileId,\n+    assist_label: &AssistLabel,\n+) -> SourceChange {\n+    let file_edit = SourceFileEdit { file_id, edit: action.edit };\n+    SourceChange::source_file_edit(\n+        action.label.unwrap_or_else(|| assist_label.label.clone()),\n+        file_edit,\n+    )\n+    .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))\n+}"}, {"sha": "ec3c0a557ae74c6487733d3e906d129df016f619", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -644,7 +644,6 @@ pub fn handle_code_action(\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = params.range.conv_with(&line_index);\n \n-    let assists = world.analysis().assists(FileRange { file_id, range })?.into_iter();\n     let diagnostics = world.analysis().diagnostics(file_id)?;\n     let mut res = CodeActionResponse::default();\n \n@@ -697,14 +696,19 @@ pub fn handle_code_action(\n         res.push(action.into());\n     }\n \n-    for assist in assists {\n-        let title = assist.change.label.clone();\n+    for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n+        let title = assist.label.clone();\n         let edit = assist.change.try_conv_with(&world)?;\n+        let alternative_edits = assist\n+            .alternative_changes\n+            .into_iter()\n+            .map(|change| change.try_conv_with(&world))\n+            .collect::<Result<Vec<_>>>()?;\n \n         let command = Command {\n             title,\n             command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![to_value(edit).unwrap()]),\n+            arguments: Some(vec![to_value(edit).unwrap(), to_value(alternative_edits).unwrap()]),\n         };\n         let action = CodeAction {\n             title: command.title.clone(),"}, {"sha": "0ff708b1fed7b6c0305898c165a04d3f15642d46", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -34,8 +34,8 @@ function showReferences(ctx: Ctx): Cmd {\n }\n \n function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: sourceChange.SourceChange) => {\n-        sourceChange.applySourceChange(ctx, change);\n+    return async (change: sourceChange.SourceChange, alternativeChanges: sourceChange.SourceChange[] | undefined) => {\n+        sourceChange.applySourceChange(ctx, change, alternativeChanges);\n     };\n }\n "}, {"sha": "b19d325d5da39d25bd8214b746b375d7aeff0dcd", "filename": "editors/code/src/source_change.ts", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73dc8b6f06b49f4728a50e83781c361e9a8b3100/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/73dc8b6f06b49f4728a50e83781c361e9a8b3100/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=73dc8b6f06b49f4728a50e83781c361e9a8b3100", "patch": "@@ -9,7 +9,7 @@ export interface SourceChange {\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n-export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n+async function applySelectedSourceChange(ctx: Ctx, change: SourceChange) {\n     const client = ctx.client;\n     if (!client) return;\n \n@@ -55,3 +55,13 @@ export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n         );\n     }\n }\n+\n+export async function applySourceChange(ctx: Ctx, change: SourceChange, alternativeChanges: SourceChange[] | undefined) {\n+    if (alternativeChanges !== undefined && alternativeChanges.length > 0) {\n+        const selectedChange = await vscode.window.showQuickPick([change, ...alternativeChanges]);\n+        if (!selectedChange) return;\n+        await applySelectedSourceChange(ctx, selectedChange);\n+    } else {\n+        await applySelectedSourceChange(ctx, change);\n+    }\n+}"}]}