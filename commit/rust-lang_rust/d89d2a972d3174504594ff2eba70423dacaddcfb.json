{"sha": "d89d2a972d3174504594ff2eba70423dacaddcfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OWQyYTk3MmQzMTc0NTA0NTk0ZmYyZWJhNzA0MjNkYWNhZGRjZmI=", "commit": {"author": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-26T10:44:00Z"}, "committer": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-26T10:50:27Z"}, "message": "Added more min_const_generics revisions to tests", "tree": {"sha": "8245cf1456caa1a916d7f041fa1493742a9111c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8245cf1456caa1a916d7f041fa1493742a9111c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89d2a972d3174504594ff2eba70423dacaddcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89d2a972d3174504594ff2eba70423dacaddcfb", "html_url": "https://github.com/rust-lang/rust/commit/d89d2a972d3174504594ff2eba70423dacaddcfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89d2a972d3174504594ff2eba70423dacaddcfb/comments", "author": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39cc45cf251be63f3066c6002d409274aa9d2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39cc45cf251be63f3066c6002d409274aa9d2a4", "html_url": "https://github.com/rust-lang/rust/commit/d39cc45cf251be63f3066c6002d409274aa9d2a4"}], "stats": {"total": 381, "additions": 224, "deletions": 157}, "files": [{"sha": "a20c7264acfdda5460eb50b281231ed12a88c834", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,9 @@\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "e6d9fb7a246836c763aa8ae4d87b77406cd86578", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,18 @@\n+error: `&'static (dyn A + 'static)` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "ae77b74bbd8ba5a9a4c2cc0bc5337a5f5a6ceda5", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,12 +1,16 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait A {}\n struct B;\n impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n-    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[full]~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden as the type of a const generic parameter\n+    //[min]~| ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n     unimplemented!()\n }\n "}, {"sha": "32054e43716cb39cff3e499a04e8e55b7d429fb7", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63322-forbid-dyn.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:8:18\n-   |\n-LL | fn test<const T: &'static dyn A>() {\n-   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "a97ec9308f814f86230bfb8ebf3e681f07c01189", "filename": "src/test/ui/const-generics/issues/issue-64494.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:14:53\n+  --> $DIR/issue-64494.rs:16:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                                     ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:16:53\n+  --> $DIR/issue-64494.rs:19:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                                     ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-64494.stderr"}, {"sha": "69fe0974a791a166040d65a526d756fad617d37c", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,28 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-64494.rs:16:38\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n+   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-64494.rs:19:38\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n+   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/issue-64494.rs:19:1\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n+   | ------------------------------------ first implementation here\n+...\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "3b598a415223ac7bf9a3af5adac1d183753aec68", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {\n     const VAL: usize;\n@@ -12,8 +14,11 @@ struct Is<const T: bool>;\n impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "1ca709d09755bc7bc71a0cf82acb1ab3999279cc", "filename": "src/test/ui/const-generics/issues/issue-64519.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const D: usize> {\n     state: Option<[u8; D]>,"}, {"sha": "a1520912e4e2bb2930f3c8ec401722043e33616b", "filename": "src/test/ui/const-generics/issues/issue-66205.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-66205.rs:8:12\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |            ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "86709c389b623d04c0064cfbdd758c910838802f", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-66205.rs:8:14\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |              ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "e115eff356a7f51d2e5302893e39e09057fac01b", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,10 +1,13 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code, unconditional_recursion)]\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n }\n \n fn main() {}"}, {"sha": "1e9c0f2f3d9eb175e34479b6936157180decaf88", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66205.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-66205.rs:6:12\n-   |\n-LL |     fact::<{ N - 1 }>();\n-   |            ^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "3e048593c9b2ca8dc156199c0849b9112b13027b", "filename": "src/test/ui/const-generics/issues/issue-66906.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Tuple;\n "}, {"sha": "8e8b552f90eb5604e56264ae8f6b0d6f73664c8c", "filename": "src/test/ui/const-generics/issues/issue-66906.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66906.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "09d88ef89a308f86998e130d2c9ed42c0641ce91", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "9cc797d6d8a017b704cf77c2830ec0f68e19b7fd", "filename": "src/test/ui/const-generics/issues/issue-67185-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67185-1.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3b27d4d68c5d440bd8954de299fc1c99d503b261", "filename": "src/test/ui/const-generics/issues/issue-68596.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct S(u8);\n "}, {"sha": "81c8f4392c735e9288633ea15796f998485f4959", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,11 @@\n+error: `[usize; 0]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-68615-adt.rs:7:23\n+   |\n+LL | struct Const<const V: [usize; 0]> {}\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d616f3ab95a822581724dbae5dc78ab573ef2a38", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,8 +1,11 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 0]> {}\n+//[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter\n type MyConst = Const<{ [] }>;\n \n fn main() {"}, {"sha": "8f55a92fce9af58abfb5dbd297ff12f06374c315", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,11 @@\n+error: `[usize; 0]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-68615-array.rs:7:21\n+   |\n+LL | struct Foo<const V: [usize; 0] > {}\n+   |                     ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "24c9a59a1855f04d9ba1d415a5ecc7585cd2bcf3", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,8 +1,11 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const V: [usize; 0] > {}\n+//[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter\n \n type MyFoo = Foo<{ [] }>;\n "}, {"sha": "3690bac3eb342fc1bf2fa732d1422ca70275b052", "filename": "src/test/ui/const-generics/issues/issue-68977.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-68977.rs:35:44\n+   |\n+LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n+   |                                            ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "5b2137b244cb26a4234095ee04ed6a598a890567", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68977.rs:29:17\n+   |\n+LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+   |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n+   |\n+   = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68977.rs:29:28\n+   |\n+LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+   |                            ^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `FRAC_BITS`\n+   |\n+   = help: it is currently only allowed to use either `FRAC_BITS` or `{ FRAC_BITS }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e634efec3e7198b4d2c1070c447f28f6cd358c", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct PhantomU8<const X: u8>;\n \n@@ -25,11 +27,13 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+    //[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~| ERROR generic parameters must not be used inside of non trivial constant values\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where\n     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n {\n     storage: <FxpStorageHelper<INT_BITS, FRAC_BITS> as FxpStorage>::SInt,\n }"}, {"sha": "e1190d9026da9d70fee5fe87b5b276667b4d936e", "filename": "src/test/ui/const-generics/issues/issue-68977.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68977.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-68977.rs:31:44\n-   |\n-LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n-   |                                            ^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "04175089dc069510d4189d5921b4ce145074ffeb", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const L: usize = 4;\n "}, {"sha": "8ad4b25ae5bc0c23095d919c59a093d1ae245aed", "filename": "src/test/ui/const-generics/issues/issue-70125-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70125-1.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "ceefc2dcb32cfae181b2f75023e78e73d7d24a32", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn main() {\n     <()>::foo();"}, {"sha": "c1f9634810e4897ab298a6440378d5d29029447a", "filename": "src/test/ui/const-generics/issues/issue-70125-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70125-2.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "04c76a4dcaff763bf260db466b384dbf6c17650d", "filename": "src/test/ui/const-generics/issues/issue-70167.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Trait<const N: usize>: From<<Self as Trait<N>>::Item> {\n   type Item;"}, {"sha": "5d647e933c4c56daf25021c687d5fba91d16d9c8", "filename": "src/test/ui/const-generics/issues/issue-70167.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39cc45cf251be63f3066c6002d409274aa9d2a4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr?ref=d39cc45cf251be63f3066c6002d409274aa9d2a4", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70167.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e9f312d934ab098bc378e3fb990d1a7075d6e42e", "filename": "src/test/ui/const-generics/issues/issue-71169.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71169.rs:4:43\n+  --> $DIR/issue-71169.rs:6:43\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-71169.rs:8:14\n+  --> $DIR/issue-71169.rs:12:14\n    |\n LL |     foo::<4, DATA>();\n    |              ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-71169.stderr"}, {"sha": "79d63443351ff6045f0a65feb0f1e6818cc2769b", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -0,0 +1,18 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71169.rs:6:43\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                           ^^^ the type must not depend on the parameter `LEN`\n+\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-71169.rs:6:38\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "26cd9f0e31c54d3296a1b0563fa0dccde14cbd2d", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89d2a972d3174504594ff2eba70423dacaddcfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=d89d2a972d3174504594ff2eba70423dacaddcfb", "patch": "@@ -1,10 +1,14 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n-//~^ ERROR the type of const parameters must not\n+//[full]~^ ERROR the type of const parameters must not\n+//[min]~^^ ERROR the type of const parameters must not\n+//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n fn main() {\n     const DATA: [u8; 4] = *b\"ABCD\";\n     foo::<4, DATA>();\n-    //~^ ERROR constant expression depends on\n+    //[full]~^ ERROR constant expression depends on\n }"}]}