{"sha": "06bf73a646e6604d16b927f191364177eacaf50d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YmY3M2E2NDZlNjYwNGQxNmI5MjdmMTkxMzY0MTc3ZWFjYWY1MGQ=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T07:20:28Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-18T18:46:03Z"}, "message": "librustc: Emit tuple struct constructor at callsite instead of via a call to a function.", "tree": {"sha": "c338cf793dc878929b86da2e690228773a1cce70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c338cf793dc878929b86da2e690228773a1cce70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06bf73a646e6604d16b927f191364177eacaf50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06bf73a646e6604d16b927f191364177eacaf50d", "html_url": "https://github.com/rust-lang/rust/commit/06bf73a646e6604d16b927f191364177eacaf50d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06bf73a646e6604d16b927f191364177eacaf50d/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb404dd4fbe30907ed53e9f9915e37d644382a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb404dd4fbe30907ed53e9f9915e37d644382a12", "html_url": "https://github.com/rust-lang/rust/commit/cb404dd4fbe30907ed53e9f9915e37d644382a12"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "ec4b8d0e40bdbf01d421b2125ae94a66ebf65093", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06bf73a646e6604d16b927f191364177eacaf50d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bf73a646e6604d16b927f191364177eacaf50d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=06bf73a646e6604d16b927f191364177eacaf50d", "patch": "@@ -1704,11 +1704,11 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n         llfndecl);\n }\n \n-pub fn trans_enum_variant_constructor<'a>(mut bcx: &'a Block<'a>,\n-                                          ctor_ty: ty::t,\n-                                          disr: ty::Disr,\n-                                          args: callee::CallArgs,\n-                                          dest: expr::Dest) -> Result<'a> {\n+pub fn trans_named_tuple_constructor<'a>(mut bcx: &'a Block<'a>,\n+                                         ctor_ty: ty::t,\n+                                         disr: ty::Disr,\n+                                         args: callee::CallArgs,\n+                                         dest: expr::Dest) -> Result<'a> {\n \n     let ccx = bcx.fcx.ccx;\n     let tcx = &ccx.tcx;"}, {"sha": "ac3f357791596259ebabd491ae6592d1e1e7390a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/06bf73a646e6604d16b927f191364177eacaf50d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bf73a646e6604d16b927f191364177eacaf50d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=06bf73a646e6604d16b927f191364177eacaf50d", "patch": "@@ -54,6 +54,7 @@ use util::ppaux::Repr;\n \n use std::gc::Gc;\n use syntax::ast;\n+use syntax::ast_map;\n use synabi = syntax::abi;\n \n pub struct MethodData {\n@@ -66,7 +67,7 @@ pub enum CalleeData {\n \n     // Constructor for enum variant/tuple-like-struct\n     // i.e. Some, Ok\n-    TupleVariantConstructor(subst::Substs, ty::Disr),\n+    NamedTupleConstructor(subst::Substs, ty::Disr),\n \n     // Represents a (possibly monomorphized) top-level fn item or method\n     // item. Note that this is just the fn-ptr and is not a Rust closure\n@@ -138,6 +139,23 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n         debug!(\"trans_def(def={}, ref_expr={})\", def.repr(bcx.tcx()), ref_expr.repr(bcx.tcx()));\n         let expr_ty = node_id_type(bcx, ref_expr.id);\n         match def {\n+            def::DefFn(did, _) if {\n+                let def_id = if did.krate != ast::LOCAL_CRATE {\n+                    inline::maybe_instantiate_inline(bcx.ccx(), did)\n+                } else {\n+                    did\n+                };\n+                match bcx.tcx().map.find(def_id.node) {\n+                    Some(ast_map::NodeStructCtor(_)) => true,\n+                    _ => false\n+                }\n+            } => {\n+                let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n+                Callee {\n+                    bcx: bcx,\n+                    data: NamedTupleConstructor(substs, 0)\n+                }\n+            }\n             def::DefFn(did, _) if match ty::get(expr_ty).sty {\n                 ty::ty_bare_fn(ref f) => f.abi == synabi::RustIntrinsic,\n                 _ => false\n@@ -170,11 +188,15 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n \n                 Callee {\n                     bcx: bcx,\n-                    data: TupleVariantConstructor(substs, vinfo.disr_val)\n+                    data: NamedTupleConstructor(substs, vinfo.disr_val)\n                 }\n             }\n-            def::DefStruct(def_id) => {\n-                fn_callee(bcx, trans_fn_ref(bcx, def_id, ExprId(ref_expr.id)))\n+            def::DefStruct(_) => {\n+                let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n+                Callee {\n+                    bcx: bcx,\n+                    data: NamedTupleConstructor(substs, 0)\n+                }\n             }\n             def::DefStatic(..) |\n             def::DefArg(..) |\n@@ -719,13 +741,13 @@ pub fn trans_call_inner<'a>(\n                                                    arg_cleanup_scope, args,\n                                                    dest.unwrap(), substs);\n         }\n-        TupleVariantConstructor(substs, disr) => {\n+        NamedTupleConstructor(substs, disr) => {\n             assert!(dest.is_some());\n             fcx.pop_custom_cleanup_scope(arg_cleanup_scope);\n \n             let ctor_ty = callee_ty.subst(bcx.tcx(), &substs);\n-            return base::trans_enum_variant_constructor(bcx, ctor_ty, disr,\n-                                                        args, dest.unwrap());\n+            return base::trans_named_tuple_constructor(bcx, ctor_ty, disr,\n+                                                       args, dest.unwrap());\n         }\n     };\n "}]}