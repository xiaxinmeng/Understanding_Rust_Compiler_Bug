{"sha": "0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "node_id": "C_kwDOAAsO6NoAKDA5MTVkNTVkODcxZTE2YjJmY2IyZmNmMjc1OWNkMmI2NDliMDE0ZTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-25T22:51:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:30:27Z"}, "message": "Wrap more into into closure_typeinfo query.", "tree": {"sha": "d81b1b79442829da56f5b7e190e0df99500d04c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81b1b79442829da56f5b7e190e0df99500d04c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "html_url": "https://github.com/rust-lang/rust/commit/0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dcc74eee5584639c182aecdfe80a7f5369c5b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dcc74eee5584639c182aecdfe80a7f5369c5b69", "html_url": "https://github.com/rust-lang/rust/commit/7dcc74eee5584639c182aecdfe80a7f5369c5b69"}], "stats": {"total": 105, "additions": 49, "deletions": 56}, "files": [{"sha": "cb97699d7d2ec49ffe2078da991fa6c6da481b0c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -236,10 +236,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n             let needs_note = match ty.kind() {\n                 ty::Closure(id, _) => {\n-                    let tables = self.infcx.tcx.typeck(id.expect_local());\n-                    let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(id.expect_local());\n-\n-                    tables.closure_kind_origins().get(hir_id).is_none()\n+                    self.infcx.tcx.closure_kind_origin(id.expect_local()).is_none()\n                 }\n                 _ => true,\n             };\n@@ -1670,27 +1667,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` would have to be valid for `{}`...\", name, region_name),\n             );\n \n-            let fn_hir_id = self.mir_hir_id();\n             err.span_label(\n                 drop_span,\n                 format!(\n                     \"...but `{}` will be dropped here, when the {} returns\",\n                     name,\n                     self.infcx\n                         .tcx\n-                        .hir()\n-                        .opt_name(fn_hir_id)\n+                        .opt_item_name(self.mir_def_id().to_def_id())\n                         .map(|name| format!(\"function `{}`\", name))\n                         .unwrap_or_else(|| {\n-                            match &self\n-                                .infcx\n-                                .tcx\n-                                .typeck(self.mir_def_id())\n-                                .node_type(fn_hir_id)\n-                                .kind()\n-                            {\n-                                ty::Closure(..) => \"enclosing closure\",\n-                                ty::Generator(..) => \"enclosing generator\",\n+                            match &self.infcx.tcx.def_kind(self.mir_def_id()) {\n+                                DefKind::Closure => \"enclosing closure\",\n+                                DefKind::Generator => \"enclosing generator\",\n                                 kind => bug!(\"expected closure or generator, found {:?}\", kind),\n                             }\n                             .to_string()"}, {"sha": "a99fd594a07a77441386e4246f48d3cf1579a95d", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -115,11 +115,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n                     if let ty::Closure(did, _) = self.body.local_decls[closure].ty.kind() {\n                         let did = did.expect_local();\n-                        let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(did);\n-\n-                        if let Some((span, hir_place)) =\n-                            self.infcx.tcx.typeck(did).closure_kind_origins().get(hir_id)\n-                        {\n+                        if let Some((span, hir_place)) = self.infcx.tcx.closure_kind_origin(did) {\n                             diag.span_note(\n                                 *span,\n                                 &format!(\n@@ -139,11 +135,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let Some(target) = target {\n             if let ty::Closure(did, _) = self.body.local_decls[target].ty.kind() {\n                 let did = did.expect_local();\n-                let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(did);\n-\n-                if let Some((span, hir_place)) =\n-                    self.infcx.tcx.typeck(did).closure_kind_origins().get(hir_id)\n-                {\n+                if let Some((span, hir_place)) = self.infcx.tcx.closure_kind_origin(did) {\n                     diag.span_note(\n                         *span,\n                         &format!(\n@@ -373,14 +365,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     //\n                     // We know the field exists so it's safe to call operator[] and `unwrap` here.\n                     let def_id = def_id.expect_local();\n-                    let var_id = self\n-                        .infcx\n-                        .tcx\n-                        .typeck(def_id)\n-                        .closure_min_captures_flattened(def_id)\n-                        .nth(field.index())\n-                        .unwrap()\n-                        .get_root_variable();\n+                    let var_id =\n+                        self.infcx.tcx.closure_captures(def_id)[field.index()].get_root_variable();\n \n                     Some(self.infcx.tcx.hir().name(var_id).to_string())\n                 }\n@@ -987,7 +973,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = expr {\n             for (captured_place, place) in\n-                self.infcx.tcx.typeck(def_id).closure_min_captures_flattened(def_id).zip(places)\n+                self.infcx.tcx.closure_captures(def_id).iter().zip(places)\n             {\n                 match place {\n                     Operand::Copy(place) | Operand::Move(place)"}, {"sha": "f970d1615a4eb0e7870749a8d2218238de0fb4c2", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -901,10 +901,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n     ) {\n         let tables = tcx.typeck(closure_local_def_id);\n-        let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_local_def_id);\n-        if let Some((span, closure_kind_origin)) =\n-            &tables.closure_kind_origins().get(closure_hir_id)\n-        {\n+        if let Some((span, closure_kind_origin)) = tcx.closure_kind_origin(closure_local_def_id) {\n             let reason = if let PlaceBase::Upvar(upvar_id) = closure_kind_origin.base {\n                 let upvar = ty::place_to_string_for_capture(tcx, closure_kind_origin);\n                 let root_hir_id = upvar_id.var_path.hir_id;"}, {"sha": "717020ea5b89428bd196a56c6db01ac5f90af738", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -26,11 +26,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if !self.tcx().is_closure(mir_def_id.to_def_id()) {\n             return;\n         }\n-        let Some(user_provided_poly_sig) =\n-            self.tcx().typeck(mir_def_id).user_provided_sigs.get(&mir_def_id)\n-        else {\n-            return;\n-        };\n+        let user_provided_poly_sig = self.tcx().closure_user_provided_sig(mir_def_id);\n \n         // Instantiate the canonicalized variables from user-provided signature\n         // (e.g., the `_` in the code above) with fresh variables."}, {"sha": "62e44b6298baa16522755d5eaa0fe9900cf62c1a", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -116,6 +116,7 @@ macro_rules! arena_types {\n             [] bit_set_u32: rustc_index::bit_set::BitSet<u32>,\n             [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n             [decode] doc_link_resolutions: rustc_hir::def::DocLinkResMap,\n+            [] closure_kind_origin: (rustc_span::Span, rustc_middle::hir::place::Place<'tcx>),\n         ]);\n     )\n }"}, {"sha": "2bb8a8b5b734d9321834df27f3fe142be88a8855", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -475,7 +475,7 @@ rustc_queries! {\n         }\n     }\n \n-    query closure_captures(key: LocalDefId) -> &'tcx [&'tcx ty::CapturedPlace<'tcx>] {\n+    query closure_typeinfo(key: LocalDefId) -> ty::ClosureTypeInfo<'tcx> {\n         desc {\n             |tcx| \"finding symbols for captures of closure `{}`\",\n             tcx.def_path_str(key.to_def_id())"}, {"sha": "dc2bd54b7fe484687eb6e23d9d4038d63a8d21fa", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -6,7 +6,6 @@ use crate::{mir, ty};\n use std::fmt::Write;\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n-use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self as hir, LangItem};\n use rustc_span::symbol::Ident;\n@@ -234,14 +233,39 @@ impl<'tcx> CapturedPlace<'tcx> {\n     }\n }\n \n-fn closure_captures<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: LocalDefId,\n-) -> &'tcx [&'tcx ty::CapturedPlace<'tcx>] {\n-    let (DefKind::Closure | DefKind::Generator) = tcx.def_kind(def) else { return &[] };\n+#[derive(Copy, Clone, Debug, HashStable)]\n+pub struct ClosureTypeInfo<'tcx> {\n+    user_provided_sig: ty::CanonicalPolyFnSig<'tcx>,\n+    captures: &'tcx [&'tcx ty::CapturedPlace<'tcx>],\n+    kind_origin: Option<&'tcx (Span, HirPlace<'tcx>)>,\n+}\n+\n+fn closure_typeinfo<'tcx>(tcx: TyCtxt<'tcx>, def: LocalDefId) -> ClosureTypeInfo<'tcx> {\n+    debug_assert!(tcx.is_closure(def.to_def_id()));\n     let typeck_results = tcx.typeck(def);\n+    let user_provided_sig = typeck_results.user_provided_sigs[&def];\n     let captures = typeck_results.closure_min_captures_flattened(def);\n-    tcx.arena.alloc_from_iter(captures)\n+    let captures = tcx.arena.alloc_from_iter(captures);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def);\n+    let kind_origin = typeck_results.closure_kind_origins().get(hir_id);\n+    ClosureTypeInfo { user_provided_sig, captures, kind_origin }\n+}\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn closure_kind_origin(self, def_id: LocalDefId) -> Option<&'tcx (Span, HirPlace<'tcx>)> {\n+        self.closure_typeinfo(def_id).kind_origin\n+    }\n+\n+    pub fn closure_user_provided_sig(self, def_id: LocalDefId) -> ty::CanonicalPolyFnSig<'tcx> {\n+        self.closure_typeinfo(def_id).user_provided_sig\n+    }\n+\n+    pub fn closure_captures(self, def_id: LocalDefId) -> &'tcx [&'tcx ty::CapturedPlace<'tcx>] {\n+        if !self.is_closure(def_id.to_def_id()) {\n+            return &[];\n+        };\n+        self.closure_typeinfo(def_id).captures\n+    }\n }\n \n /// Return true if the `proj_possible_ancestor` represents an ancestor path\n@@ -434,5 +458,5 @@ impl BorrowKind {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { closure_captures, ..*providers }\n+    *providers = ty::query::Providers { closure_typeinfo, ..*providers }\n }"}, {"sha": "d8411042af08634ced1a118f1917d176e0fce0cc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -73,7 +73,7 @@ pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n pub use self::closure::{\n     is_ancestor_or_same_capture, place_to_string_for_capture, BorrowKind, CaptureInfo,\n-    CapturedPlace, ClosureKind, MinCaptureInformationMap, MinCaptureList,\n+    CapturedPlace, ClosureKind, ClosureTypeInfo, MinCaptureInformationMap, MinCaptureList,\n     RootVariableMinCaptureList, UpvarCapture, UpvarCaptureMap, UpvarId, UpvarListMap, UpvarPath,\n     CAPTURE_STRUCT_LOCAL,\n };"}, {"sha": "586958247fcdca9303873bb0df2f4cd08a02d92d", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0915d55d871e16b2fcb2fcf2759cd2b649b014e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "patch": "@@ -569,7 +569,7 @@ impl<'a, V> LocalTableInContext<'a, V> {\n         self.data.contains_key(&id.local_id)\n     }\n \n-    pub fn get(&self, id: hir::HirId) -> Option<&V> {\n+    pub fn get(&self, id: hir::HirId) -> Option<&'a V> {\n         validate_hir_id_for_typeck_results(self.hir_owner, id);\n         self.data.get(&id.local_id)\n     }"}]}