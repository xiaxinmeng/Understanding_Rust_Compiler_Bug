{"sha": "21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZTdiOTM2ZDNhNjY5YjYyZTljYjhjNmIyY2YyYzJlYjBhNTk4NmM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-13T20:04:52Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:27Z"}, "message": "Use names in Lint structs in an ASCII-case-insensitive way\n\nIn preparation for the next commit.", "tree": {"sha": "6dbd437657063c626dce7f1044c43f7d257ae11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbd437657063c626dce7f1044c43f7d257ae11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "html_url": "https://github.com/rust-lang/rust/commit/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609552e19516299b061687d52094d0b755b213d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/609552e19516299b061687d52094d0b755b213d3", "html_url": "https://github.com/rust-lang/rust/commit/609552e19516299b061687d52094d0b755b213d3"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "018477c48c783fccf91c2222e5f9fcb2e599cdaf", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "patch": "@@ -146,6 +146,7 @@ Available lint options:\n         let mut lints: Vec<_> = lints.move_iter().map(|(x, _)| x).collect();\n         lints.sort_by(|x: &&Lint, y: &&Lint| {\n             match x.default_level.cmp(&y.default_level) {\n+                // The sort doesn't case-fold but it's doubtful we care.\n                 Equal => x.name.cmp(&y.name),\n                 r => r,\n             }\n@@ -172,7 +173,7 @@ Available lint options:\n \n     let print_lints = |lints: Vec<&Lint>| {\n         for lint in lints.move_iter() {\n-            let name = lint.name.replace(\"_\", \"-\");\n+            let name = lint.name_lower().replace(\"_\", \"-\");\n             println!(\"    {}  {:7.7s}  {}\",\n                 padded(name.as_slice()), lint.default_level.as_str(), lint.desc);\n         }"}, {"sha": "0b843e84561496232a54048d28332cdc116ee3b6", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "patch": "@@ -61,7 +61,7 @@ pub struct LintStore {\n     passes: Option<Vec<LintPassObject>>,\n \n     /// Lints indexed by name.\n-    by_name: HashMap<&'static str, LintId>,\n+    by_name: HashMap<String, LintId>,\n \n     /// Current levels of each lint, and where they were set.\n     levels: HashMap<LintId, LevelSource>,\n@@ -102,8 +102,8 @@ impl LintStore {\n             self.lints.push((lint, from_plugin));\n \n             let id = LintId::of(lint);\n-            if !self.by_name.insert(lint.name, id) {\n-                let msg = format!(\"duplicate specification of lint {}\", lint.name);\n+            if !self.by_name.insert(lint.name_lower(), id) {\n+                let msg = format!(\"duplicate specification of lint {}\", lint.name_lower());\n                 match (sess, from_plugin) {\n                     // We load builtin lints first, so a duplicate is a compiler bug.\n                     // Use early_error when handling -W help with no crate.\n@@ -205,18 +205,19 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n     let (mut level, source) = lvlsrc;\n     if level == Allow { return }\n \n+    let name = lint.name_lower();\n     let mut note = None;\n     let msg = match source {\n         Default => {\n             format!(\"{}, #[{}({})] on by default\", msg,\n-                level.as_str(), lint.name)\n+                level.as_str(), name)\n         },\n         CommandLine => {\n             format!(\"{} [-{} {}]\", msg,\n                 match level {\n                     Warn => 'W', Deny => 'D', Forbid => 'F',\n                     Allow => fail!()\n-                }, lint.name.replace(\"_\", \"-\"))\n+                }, name.replace(\"_\", \"-\"))\n         },\n         Node(src) => {\n             note = Some(src);\n@@ -355,7 +356,7 @@ impl<'a> Context<'a> {\n             for meta in metas.iter() {\n                 match meta.node {\n                     ast::MetaWord(ref lint_name) => {\n-                        match self.lints.by_name.find_equiv(lint_name) {\n+                        match self.lints.by_name.find_equiv(&lint_name.get()) {\n                             Some(lint_id) => out.push((*lint_id, level, meta.span)),\n \n                             None => self.span_lint(builtin::unrecognized_lint,"}, {"sha": "598c5dd3002f7974c62700db925ecc4df1fb25b3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=21e7b936d3a669b62e9cb8c6b2cf2c2eb0a5986c", "patch": "@@ -31,6 +31,7 @@\n \n use middle::privacy::ExportedItems;\n use std::hash;\n+use std::ascii::StrAsciiExt;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n use syntax::ast;\n@@ -41,10 +42,14 @@ pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate};\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///\n-    /// Written with underscores, e.g. \"unused_imports\".\n-    /// This identifies the lint in attributes and in\n-    /// command-line arguments. On the command line,\n-    /// underscores become dashes.\n+    /// This identifies the lint in attributes and in command-line arguments.\n+    /// In those contexts it is always lowercase, but this field is compared\n+    /// in a way which is case-insensitive for ASCII characters. This allows\n+    /// `declare_lint!()` invocations to follow the convention of upper-case\n+    /// statics without repeating the name.\n+    ///\n+    /// The name is written with underscores, e.g. \"unused_imports\".\n+    /// On the command line, underscores become dashes.\n     pub name: &'static str,\n \n     /// Default level for the lint.\n@@ -56,6 +61,13 @@ pub struct Lint {\n     pub desc: &'static str,\n }\n \n+impl Lint {\n+    /// Get the lint's name, with ASCII letters converted to lowercase.\n+    pub fn name_lower(&self) -> String {\n+        self.name.to_ascii_lower()\n+    }\n+}\n+\n /// Build a `Lint` initializer.\n #[macro_export]\n macro_rules! lint_initializer (\n@@ -186,8 +198,8 @@ impl LintId {\n     }\n \n     /// Get the name of the lint.\n-    pub fn as_str(&self) -> &'static str {\n-        self.lint.name\n+    pub fn as_str(&self) -> String {\n+        self.lint.name_lower()\n     }\n }\n "}]}