{"sha": "e340375ef8eb551bae29f36bf562aab1162939db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDAzNzVlZjhlYjU1MWJhZTI5ZjM2YmY1NjJhYWIxMTYyOTM5ZGI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-02T02:04:55Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:58:17Z"}, "message": "Don't double-annotate the same Span", "tree": {"sha": "9d14e69b985472969ead92a3f3a29c676e939f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d14e69b985472969ead92a3f3a29c676e939f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e340375ef8eb551bae29f36bf562aab1162939db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e340375ef8eb551bae29f36bf562aab1162939db", "html_url": "https://github.com/rust-lang/rust/commit/e340375ef8eb551bae29f36bf562aab1162939db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e340375ef8eb551bae29f36bf562aab1162939db/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed7c30e4f794bc285aeca36dd9e2cc02cef2754", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed7c30e4f794bc285aeca36dd9e2cc02cef2754", "html_url": "https://github.com/rust-lang/rust/commit/aed7c30e4f794bc285aeca36dd9e2cc02cef2754"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "aa0add21db9567cc84814a8f112a6f1907b35445", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e340375ef8eb551bae29f36bf562aab1162939db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e340375ef8eb551bae29f36bf562aab1162939db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e340375ef8eb551bae29f36bf562aab1162939db", "patch": "@@ -1389,7 +1389,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"await occurs here\".to_string(),\n             );\n \n-            push_target_span(&mut span);\n+            if target_span != await_span {\n+                push_target_span(&mut span);\n+            }\n \n             err.span_note(\n                 span,"}, {"sha": "604cc51921e0e055ba6eafd0cd5454ae15dfc3b1", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e340375ef8eb551bae29f36bf562aab1162939db/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e340375ef8eb551bae29f36bf562aab1162939db/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=e340375ef8eb551bae29f36bf562aab1162939db", "patch": "@@ -35,6 +35,15 @@ fn test1() {\n     //~^ ERROR future cannot be sent between threads\n }\n \n+fn test1_no_let() {\n+    let send_fut = async {\n+        let _ = make_non_send_future1().await;\n+        ready(0).await;\n+    };\n+    require_send(send_fut);\n+    //~^ ERROR future cannot be sent between threads\n+}\n+\n async fn ready2<T>(t: T) -> T { t }\n fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n     ready2(Arc::new(RefCell::new(0)))"}, {"sha": "c0659bf944b8159daeb9c42aa351ef0774c055e6", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e340375ef8eb551bae29f36bf562aab1162939db/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e340375ef8eb551bae29f36bf562aab1162939db/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=e340375ef8eb551bae29f36bf562aab1162939db", "patch": "@@ -16,8 +16,24 @@ LL |         let non_send_fut = make_non_send_future1();\n LL |         let _ = non_send_fut.await;\n    |                 ^^^^^^^^^^^^ await occurs here\n \n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:43:5\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |    ------------         ---- required by this bound in `require_send`\n+...\n+LL |     require_send(send_fut);\n+   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n+note: future is not `Send` as this value is used in an await\n+  --> $DIR/issue-68112.rs:40:17\n+   |\n+LL |         let _ = make_non_send_future1().await;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here\n+\n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:49:5\n+  --> $DIR/issue-68112.rs:58:5\n    |\n LL | fn require_send(_: impl Send) {}\n    |    ------------         ---- required by this bound in `require_send`\n@@ -27,16 +43,16 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::cell::RefCell<i32>>`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:38:31: 38:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:38:31: 38:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 t:std::sync::Arc<std::cell::RefCell<i32>> {}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `{std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:44:26: 48:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:44:26: 48:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:53:26: 57:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:53:26: 57:6 {std::future::ResumeTy, impl std::future::Future, (), i32, Ready<i32>}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}