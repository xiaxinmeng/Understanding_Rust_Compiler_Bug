{"sha": "b7413511dc85ec01ef4b91785f86614589ac6103", "node_id": "C_kwDOAAsO6NoAKGI3NDEzNTExZGM4NWVjMDFlZjRiOTE3ODVmODY2MTQ1ODlhYzYxMDM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-12T10:05:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:18:32Z"}, "message": "Generalize the Assume intrinsic statement to a general Intrinsic statement", "tree": {"sha": "f5b9a7296dc06290a91fe1b582a7aa7a53660708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b9a7296dc06290a91fe1b582a7aa7a53660708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7413511dc85ec01ef4b91785f86614589ac6103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7413511dc85ec01ef4b91785f86614589ac6103", "html_url": "https://github.com/rust-lang/rust/commit/b7413511dc85ec01ef4b91785f86614589ac6103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7413511dc85ec01ef4b91785f86614589ac6103/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f076451202409bca6262d7b5bf9a4fee3d18fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f076451202409bca6262d7b5bf9a4fee3d18fb9", "html_url": "https://github.com/rust-lang/rust/commit/3f076451202409bca6262d7b5bf9a4fee3d18fb9"}], "stats": {"total": 309, "additions": 166, "deletions": 143}, "files": [{"sha": "9f7a4d49989ab6b3aeddac712161c6168a120de3", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -391,8 +391,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n-            | mir::StatementKind::CopyNonOverlapping(..)\n-            | mir::StatementKind::Assume(..)\n+            | mir::StatementKind::Intrinsic(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "3157f861d93bec9fc047fd81d750d218d2248f7b", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{BasicBlock, Body, Location, Place, Rvalue};\n+use rustc_middle::mir::{self, BasicBlock, Body, Location, NonDivergingIntrinsic, Place, Rvalue};\n use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n@@ -63,11 +63,14 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n+                self.consume_operand(location, op);\n+            }\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,\n                 ref count,\n-            }) => {\n+            })) => {\n                 self.consume_operand(location, src);\n                 self.consume_operand(location, dst);\n                 self.consume_operand(location, count);\n@@ -76,8 +79,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::AscribeUserType(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            // Takes a `bool` argument, and has no return value, thus being irrelevant for borrowck\n-            | StatementKind::Assume(..)\n             // Does not actually affect borrowck\n             | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {"}, {"sha": "3b2bcd7e6d3aa2a4c2f0c1c9cef276107839c34b", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -26,8 +26,8 @@ use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::{\n-    traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n-    PlaceRef, VarDebugInfoContents,\n+    traversal, Body, ClearCrossCrate, Local, Location, Mutability, NonDivergingIntrinsic, Operand,\n+    Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n@@ -591,10 +591,10 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ..\n-            }) => {\n-                span_bug!(\n+            StatementKind::Intrinsic(box ref kind) => match kind {\n+                // Takes a `bool` argument, and has no return value, thus being irrelevant for borrowck\n+                NonDivergingIntrinsic::Assume(..) => {},\n+                NonDivergingIntrinsic::CopyNonOverlapping(..) => span_bug!(\n                     span,\n                     \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n                 )\n@@ -603,8 +603,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             StatementKind::AscribeUserType(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            // Takes a `bool` argument, and has no return value, thus being irrelevant for borrowck\n-            | StatementKind::Assume(..)\n             // Does not actually affect borrowck\n             | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {"}, {"sha": "2ba9b2be90181a49a7c691cf7ed71c62b4fe97db", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -1302,14 +1302,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ..\n-            }) => span_bug!(\n-                stmt.source_info.span,\n-                \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n-            ),\n+            StatementKind::Intrinsic(box ref kind) => match kind {\n+                NonDivergingIntrinsic::Assume(..) => {}\n+                NonDivergingIntrinsic::CopyNonOverlapping(..) => span_bug!(\n+                    stmt.source_info.span,\n+                    \"Unexpected NonDivergingIntrinsic::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n+                ),\n+            },\n             StatementKind::FakeRead(..)\n-            | StatementKind::Assume(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }"}, {"sha": "2aa11ac2eeaa653d1c0b2243afbf31e62effc467", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -791,25 +791,34 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }\n-        // We ignore `assume` intrinsics, they are only useful for optimizations\n-        | StatementKind::Assume(..)\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n-        StatementKind::CopyNonOverlapping(inner) => {\n-            let dst = codegen_operand(fx, &inner.dst);\n-            let pointee = dst\n-                .layout()\n-                .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n-                .expect(\"Expected pointer\");\n-            let dst = dst.load_scalar(fx);\n-            let src = codegen_operand(fx, &inner.src).load_scalar(fx);\n-            let count = codegen_operand(fx, &inner.count).load_scalar(fx);\n-            let elem_size: u64 = pointee.size.bytes();\n-            let bytes =\n-                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n-            fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n-        }\n+        StatementKind::Intrinsic(ref intrinsic) => match &**intrinsic {\n+            // We ignore `assume` intrinsics, they are only useful for optimizations\n+            NonDivergingIntrinsic::Assume(_) => {}\n+            NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                src,\n+                dst,\n+                count,\n+            }) => {\n+                let dst = codegen_operand(fx, dst);\n+                let pointee = dst\n+                    .layout()\n+                    .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let dst = dst.load_scalar(fx);\n+                let src = codegen_operand(fx, src).load_scalar(fx);\n+                let count = codegen_operand(fx, count).load_scalar(fx);\n+                let elem_size: u64 = pointee.size.bytes();\n+                let bytes = if elem_size != 1 {\n+                    fx.bcx.ins().imul_imm(count, elem_size as i64)\n+                } else {\n+                    count\n+                };\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n+            }\n+        },\n     }\n }\n "}, {"sha": "0305341da784e28dba54a1bdbb2892c1a937a994", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -536,11 +536,12 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::CopyNonOverlapping(_) => {\n-                            return None;\n-                        } // conservative handling\n+                        StatementKind::Intrinsic(ref intrinsic) => match **intrinsic {\n+                            NonDivergingIntrinsic::CopyNonOverlapping(..) => return None,\n+                            NonDivergingIntrinsic::Assume(..) => {}\n+                        },\n+                        // conservative handling\n                         StatementKind::Assign(_)\n-                        | StatementKind::Assume(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }\n                         | StatementKind::Deinit(_)"}, {"sha": "1db0fb3a6f1b0381da9eb2a1ca06eb6e3689af75", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir;\n+use rustc_middle::mir::NonDivergingIntrinsic;\n \n use super::FunctionCx;\n use super::LocalRef;\n@@ -73,11 +74,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_coverage(&mut bx, coverage.clone(), statement.source_info.scope);\n                 bx\n             }\n-            mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n+            mir::StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(ref op)) => {\n+                let op_val = self.codegen_operand(&mut bx, op);\n+                bx.assume(op_val.immediate());\n+                bx\n+            }\n+            mir::StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+                mir::CopyNonOverlapping { ref count, ref src, ref dst },\n+            )) => {\n                 let dst_val = self.codegen_operand(&mut bx, dst);\n                 let src_val = self.codegen_operand(&mut bx, src);\n                 let count = self.codegen_operand(&mut bx, count).immediate();\n@@ -93,11 +97,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx.memcpy(dst, align, src, align, bytes, crate::MemFlags::empty());\n                 bx\n             }\n-            mir::StatementKind::Assume(box ref op) => {\n-                let op_val = self.codegen_operand(&mut bx, op);\n-                bx.assume(op_val.immediate());\n-                bx\n-            }\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "3cf38258b7588fd4f509728ad862eb32e891b07f", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -2,8 +2,8 @@\n //!\n //! The main entry point is the `step` method.\n \n-use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n+use rustc_middle::mir::{self, NonDivergingIntrinsic};\n use rustc_middle::ty::layout::LayoutOf;\n \n use super::{InterpCx, Machine};\n@@ -114,22 +114,23 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::retag(self, *kind, &dest)?;\n             }\n \n-            // Call CopyNonOverlapping\n-            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { src, dst, count }) => {\n-                let src = self.eval_operand(src, None)?;\n-                let dst = self.eval_operand(dst, None)?;\n-                let count = self.eval_operand(count, None)?;\n-                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n-            }\n-\n-            // Call Assume\n-            Assume(box op) => {\n+            Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n                 let op = self.eval_operand(op, None)?;\n                 let cond = self.read_scalar(&op)?.to_bool()?;\n                 if !cond {\n                     throw_ub_format!(\"`assume` called with `false`\");\n                 }\n             }\n+            Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                ref count,\n+                ref src,\n+                ref dst,\n+            })) => {\n+                let src = self.eval_operand(src, None)?;\n+                let dst = self.eval_operand(dst, None)?;\n+                let count = self.eval_operand(count, None)?;\n+                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n+            }\n \n             // Statements we do not track.\n             AscribeUserType(..) => {}"}, {"sha": "3fa40dc305952ae2694937246c13e8360ff69716", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -678,8 +678,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "783ab350faac3842d51627525c5f827d6945a00c", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -7,9 +7,10 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, Local, Location,\n-    MirPass, MirPhase, Operand, Place, PlaceElem, PlaceRef, ProjectionElem, RuntimePhase, Rvalue,\n-    SourceScope, Statement, StatementKind, Terminator, TerminatorKind, UnOp, START_BLOCK,\n+    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping,\n+    Local, Location, MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef,\n+    ProjectionElem, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::Subst;\n@@ -636,7 +637,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::Assume(box ref op) => {\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n                 let ty = op.ty(&self.body.local_decls, self.tcx);\n                 if !ty.is_bool() {\n                     self.fail(\n@@ -645,11 +646,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+                CopyNonOverlapping { src, dst, count },\n+            )) => {\n                 let src_ty = src.ty(&self.body.local_decls, self.tcx);\n                 let op_src_ty = if let Some(src_deref) = src_ty.builtin_deref(true) {\n                     src_deref.ty"}, {"sha": "091cc84af3ce6013cd163412f14929a03c1d8c36", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -1370,14 +1370,7 @@ impl Debug for Statement<'_> {\n                 write!(fmt, \"Coverage::{:?} for {:?}\", kind, rgn)\n             }\n             Coverage(box ref coverage) => write!(fmt, \"Coverage::{:?}\", coverage.kind),\n-            CopyNonOverlapping(box crate::mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n-                write!(fmt, \"copy_nonoverlapping(src={:?}, dst={:?}, count={:?})\", src, dst, count)\n-            }\n-            Assume(box ref cond) => write!(fmt, \"assume({:?})\", cond),\n+            Intrinsic(box ref intrinsic) => write!(fmt, \"{intrinsic}\"),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "4e06d91012c0dfc9c0f0eb50d1792357df25a2ef", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -249,8 +249,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Retag(..) => \"Retag\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n-        CopyNonOverlapping(..) => \"CopyNonOverlapping\",\n-        Assume(..) => \"Assume\",\n+        Intrinsic(..) => \"Intrinsic\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "62306159e8806937619db59d216935d1a0969e3a", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -327,6 +327,34 @@ pub enum StatementKind<'tcx> {\n     /// executed.\n     Coverage(Box<Coverage>),\n \n+    /// Denotes a call to an intrinsic that does not require an unwind path. This avoids\n+    /// adding a new block and a terminator for simple intrinsics.\n+    Intrinsic(Box<NonDivergingIntrinsic<'tcx>>),\n+\n+    /// No-op. Useful for deleting instructions without affecting statement indices.\n+    Nop,\n+}\n+\n+#[derive(\n+    Clone,\n+    TyEncodable,\n+    TyDecodable,\n+    Debug,\n+    PartialEq,\n+    Hash,\n+    HashStable,\n+    TypeFoldable,\n+    TypeVisitable\n+)]\n+pub enum NonDivergingIntrinsic<'tcx> {\n+    /// Denotes a call to the intrinsic function `assume`.\n+    ///\n+    /// The operand must be a boolean. Optimizers may use the value of the boolean to backtrack its\n+    /// computation to infer information about other variables. So if the boolean came from a\n+    /// `x < y` operation, subsequent operations on `x` and `y` could elide various bound checks.\n+    /// If the argument is `false`, this operation is equivalent to `TerminatorKind::Unreachable`.\n+    Assume(Operand<'tcx>),\n+\n     /// Denotes a call to the intrinsic function `copy_nonoverlapping`.\n     ///\n     /// First, all three operands are evaluated. `src` and `dest` must each be a reference, pointer,\n@@ -340,18 +368,18 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// **Needs clarification**: Is this typed or not, ie is there a typed load and store involved?\n     /// I vaguely remember Ralf saying somewhere that he thought it should not be.\n-    CopyNonOverlapping(Box<CopyNonOverlapping<'tcx>>),\n-\n-    /// Denotes a call to the intrinsic function `assume`.\n-    ///\n-    /// The operand must be a boolean. Optimizers may use the value of the boolean to backtrack its\n-    /// computation to infer information about other variables. So if the boolean came from a\n-    /// `x < y` operation, subsequent operations on `x` and `y` could elide various bound checks.\n-    /// If the argument is `false`, this operation is equivalent to `TerminatorKind::Unreachable`.\n-    Assume(Box<Operand<'tcx>>),\n+    CopyNonOverlapping(CopyNonOverlapping<'tcx>),\n+}\n \n-    /// No-op. Useful for deleting instructions without affecting statement indices.\n-    Nop,\n+impl std::fmt::Display for NonDivergingIntrinsic<'_> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            Self::Assume(op) => write!(f, \"assume({op:?})\"),\n+            Self::CopyNonOverlapping(CopyNonOverlapping { src, dst, count }) => {\n+                write!(f, \"copy_nonoverlapping(dst = {dst:?}, src = {src:?}, count = {count:?})\")\n+            }\n+        }\n+    }\n }\n \n /// Describes what kind of retag is to be performed."}, {"sha": "708ea4398c852102f8c7c1d3ce12cddf4364ccd3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -425,17 +425,15 @@ macro_rules! make_mir_visitor {\n                             location\n                         )\n                     }\n-                    StatementKind::CopyNonOverlapping(box crate::mir::CopyNonOverlapping{\n-                        src,\n-                        dst,\n-                        count,\n-                    }) => {\n-                      self.visit_operand(src, location);\n-                      self.visit_operand(dst, location);\n-                      self.visit_operand(count, location)\n-                    }\n-                    StatementKind::Assume(box ref $($mutability)? val) => {\n-                        self.visit_operand(val, location)\n+                    StatementKind::Intrinsic(box ref $($mutability)? intrinsic) => {\n+                        match intrinsic {\n+                            NonDivergingIntrinsic::Assume(op) => self.visit_operand(op, location),\n+                            NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping { src, dst, count }) => {\n+                                self.visit_operand(src, location);\n+                                self.visit_operand(dst, location);\n+                                self.visit_operand(count, location);\n+                            }\n+                        }\n                     }\n                     StatementKind::Nop => {}\n                 }"}, {"sha": "3e08a8799ef9aadacd88614c862367ee9c3d34c8", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -270,8 +270,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => None,\n         };\n         if let Some(destination) = destination {"}, {"sha": "18760b6c6fa543328b69ec269cc9c3c4a265afd2", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -142,8 +142,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | StatementKind::FakeRead(..)\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::StorageLive(..) => {}\n         }\n     }"}, {"sha": "f46fd118bde5d165106bfcb047dd7d2d5f494232", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -330,8 +330,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "beff19a3ab2e1d908f8a09a4848c8ddeb5065c33", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -106,9 +106,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             }\n \n             // Move to above list once mir construction uses it.\n-            StatementKind::Assume(..) => unreachable!(),\n-\n-            StatementKind::CopyNonOverlapping(..) => unreachable!(),\n+            StatementKind::Intrinsic(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "9f842c929dc2478034f6962b05a8c4b63ac05419", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -825,8 +825,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n \n         // Retain spans from all other statements\n         StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n-        | StatementKind::CopyNonOverlapping(..)\n-        | StatementKind::Assume(..)\n+        | StatementKind::Intrinsic(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::Deinit(..)"}, {"sha": "3f3870cc7bad2f0d0a866518a7cab212bc195586", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -52,8 +52,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::StorageLive(_)\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::Coverage(_)\n-                | StatementKind::CopyNonOverlapping(_)\n-                | StatementKind::Assume(_)\n+                | StatementKind::Intrinsic(_)\n                 | StatementKind::Nop => (),\n \n                 StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "9bc47613e4c67885075bc43cf62725b3428644b7", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -537,8 +537,7 @@ impl<'a> Conflicts<'a> {\n             | StatementKind::FakeRead(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "705cf776fb29ef6be0c283d4beeaafe20042430d", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -1452,8 +1452,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "9892580e63dcb4f1655ce08c463e1e47d32c79b3", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -46,12 +46,14 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n-                            kind: StatementKind::CopyNonOverlapping(Box::new(\n-                                rustc_middle::mir::CopyNonOverlapping {\n-                                    src: args.next().unwrap(),\n-                                    dst: args.next().unwrap(),\n-                                    count: args.next().unwrap(),\n-                                },\n+                            kind: StatementKind::Intrinsic(Box::new(\n+                                NonDivergingIntrinsic::CopyNonOverlapping(\n+                                    rustc_middle::mir::CopyNonOverlapping {\n+                                        src: args.next().unwrap(),\n+                                        dst: args.next().unwrap(),\n+                                        count: args.next().unwrap(),\n+                                    },\n+                                ),\n                             )),\n                         });\n                         assert_eq!(\n@@ -67,9 +69,15 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n-                            kind: StatementKind::Assume(Box::new(args.next().unwrap())),\n+                            kind: StatementKind::Intrinsic(Box::new(\n+                                NonDivergingIntrinsic::Assume(args.next().unwrap()),\n+                            )),\n                         });\n-                        assert_eq!(args.next(), None, \"Extra argument for assume intrinsic\");\n+                        assert_eq!(\n+                            args.next(),\n+                            None,\n+                            \"Extra argument for copy_non_overlapping intrinsic\"\n+                        );\n                         drop(args);\n                         terminator.kind = TerminatorKind::Goto { target };\n                     }"}, {"sha": "f1bbf2ea7e8ea3aaf7b40307ba110dcd7346b4a3", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -51,8 +51,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::Deinit(..)\n-                | StatementKind::CopyNonOverlapping(..)\n-                | StatementKind::Assume(..)\n+                | StatementKind::Intrinsic(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "2f116aaa95849bd075b94179109e2bc1a210d1d9", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -249,8 +249,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::CopyNonOverlapping(_)\n-            | StatementKind::Assume(_)\n+            | StatementKind::Intrinsic(_)\n             | StatementKind::Nop => {}\n         }\n     }\n@@ -318,8 +317,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n-            | StatementKind::CopyNonOverlapping(_)\n-            | StatementKind::Assume(_)\n+            | StatementKind::Intrinsic(_)\n             | StatementKind::Nop => {}\n \n             // If the discriminant is set, it is always set"}, {"sha": "57d372fda5697f508c9a799d06f8cac051f18af9", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -499,8 +499,7 @@ impl UsedLocals {\n impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n-            StatementKind::CopyNonOverlapping(..)\n-            | StatementKind::Assume(..)\n+            StatementKind::Intrinsic(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "74e22ebb7ffce1ee5eeceda095e175700d77cb88", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -51,7 +51,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:90:9: 90:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n-+         copy_nonoverlapping(src=move _4, dst=move _8, count=const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n++         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n +         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n       }\n   "}, {"sha": "b22a9c817460db7761586f8899b839affd5be31d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7413511dc85ec01ef4b91785f86614589ac6103/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7413511dc85ec01ef4b91785f86614589ac6103/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=b7413511dc85ec01ef4b91785f86614589ac6103", "patch": "@@ -7,7 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     Body, CastKind, NullOp, Operand, Place, ProjectionElem, Rvalue, Statement, StatementKind, Terminator,\n-    TerminatorKind,\n+    TerminatorKind, NonDivergingIntrinsic\n };\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n@@ -211,15 +211,19 @@ fn check_statement<'tcx>(\n         StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n             check_place(tcx, **place, span, body)\n         },\n-        StatementKind::Assume(box op) => {\n+\n+        StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n             check_operand(tcx, op, span, body)\n         },\n \n-        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n+        StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+            rustc_middle::mir::CopyNonOverlapping { dst, src, count },\n+        )) => {\n             check_operand(tcx, dst, span, body)?;\n             check_operand(tcx, src, span, body)?;\n             check_operand(tcx, count, span, body)\n         },\n+\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}]}