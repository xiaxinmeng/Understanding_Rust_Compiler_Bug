{"sha": "fd0428f622feee209e6014b802f5717d48d9e978", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMDQyOGY2MjJmZWVlMjA5ZTYwMTRiODAyZjU3MTdkNDhkOWU5Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T12:27:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T12:27:35Z"}, "message": "Auto merge of #5032 - JohnTitor:add-sugg-some-result, r=flip1995\n\nAdd suggestions for `if_let_some_result`\n\nFixes #4991\n\nThis approach may be fragile though...\n\nchangelog: Add suggestions for `if_let_some_result`", "tree": {"sha": "94aa364e2de459d9e2eb817e97a7540db2783928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94aa364e2de459d9e2eb817e97a7540db2783928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0428f622feee209e6014b802f5717d48d9e978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0428f622feee209e6014b802f5717d48d9e978", "html_url": "https://github.com/rust-lang/rust/commit/fd0428f622feee209e6014b802f5717d48d9e978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0428f622feee209e6014b802f5717d48d9e978/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f728bcd43187bbebceab3ff9424ecbb89524441c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f728bcd43187bbebceab3ff9424ecbb89524441c", "html_url": "https://github.com/rust-lang/rust/commit/f728bcd43187bbebceab3ff9424ecbb89524441c"}, {"sha": "c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "html_url": "https://github.com/rust-lang/rust/commit/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01"}], "stats": {"total": 178, "additions": 124, "deletions": 54}, "files": [{"sha": "a9826d58633989018f90e79be14f8be2e9d5a21e", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "renamed", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n+use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -39,20 +40,32 @@ declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n-            if let ExprKind::Match(ref op, ref body, ref source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { .. } = *source; //test if it is an If Let\n-            if let ExprKind::MethodCall(_, _, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n+            if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n+            if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n+            if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n+            let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n+            if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type;\n \n             then {\n-                let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n-                let some_expr_string = snippet(cx, y[0].span, \"\");\n-                if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type {\n-                    span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n+                let mut applicability = Applicability::MachineApplicable;\n+                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, op.span.until(ok_span), \"\", &mut applicability);\n+                let sugg = format!(\n+                    \"if let Ok({}) = {}\",\n+                    some_expr_string,\n+                    trimmed_ok.trim().trim_end_matches('.'),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    IF_LET_SOME_RESULT,\n+                    expr.span.with_hi(op.span.hi()),\n                     \"Matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string));\n-                }\n+                    &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    sugg,\n+                    applicability,\n+                );\n             }\n         }\n     }", "previous_filename": "clippy_lints/src/ok_if_let.rs"}, {"sha": "497146772a513f5f72afba62e3966ea31e7cc8b9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -210,6 +210,7 @@ pub mod functions;\n pub mod get_last_with_len;\n pub mod identity_conversion;\n pub mod identity_op;\n+pub mod if_let_some_result;\n pub mod if_not_else;\n pub mod implicit_return;\n pub mod indexing_slicing;\n@@ -263,7 +264,6 @@ pub mod new_without_default;\n pub mod no_effect;\n pub mod non_copy_const;\n pub mod non_expressive_names;\n-pub mod ok_if_let;\n pub mod open_options;\n pub mod overflow_check_conditional;\n pub mod panic_unimplemented;\n@@ -545,6 +545,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &get_last_with_len::GET_LAST_WITH_LEN,\n         &identity_conversion::IDENTITY_CONVERSION,\n         &identity_op::IDENTITY_OP,\n+        &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n         &implicit_return::IMPLICIT_RETURN,\n         &indexing_slicing::INDEXING_SLICING,\n@@ -703,7 +704,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n         &non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         &non_expressive_names::SIMILAR_NAMES,\n-        &ok_if_let::IF_LET_SOME_RESULT,\n         &open_options::NONSENSICAL_OPEN_OPTIONS,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         &panic_unimplemented::PANIC,\n@@ -904,7 +904,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n     store.register_late_pass(|| box missing_doc::MissingDoc::new());\n     store.register_late_pass(|| box missing_inline::MissingInline);\n-    store.register_late_pass(|| box ok_if_let::OkIfLet);\n+    store.register_late_pass(|| box if_let_some_result::OkIfLet);\n     store.register_late_pass(|| box redundant_pattern_matching::RedundantPatternMatching);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n@@ -1153,6 +1153,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&get_last_with_len::GET_LAST_WITH_LEN),\n         LintId::of(&identity_conversion::IDENTITY_CONVERSION),\n         LintId::of(&identity_op::IDENTITY_OP),\n+        LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(&infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&infinite_iter::INFINITE_ITER),\n@@ -1265,7 +1266,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(&ok_if_let::IF_LET_SOME_RESULT),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n@@ -1367,6 +1367,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n+        LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n@@ -1413,7 +1414,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(&ok_if_let::IF_LET_SOME_RESULT),\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&ptr::CMP_NULL),\n         LintId::of(&ptr::PTR_ARG),"}, {"sha": "c6339daf2ebeb16507c936707cbd74cbd14606db", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -705,7 +705,7 @@ pub const ALL_LINTS: [Lint; 347] = [\n         group: \"style\",\n         desc: \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\",\n         deprecation: None,\n-        module: \"ok_if_let\",\n+        module: \"if_let_some_result\",\n     },\n     Lint {\n         name: \"if_not_else\","}, {"sha": "80505fd997f42628919c4ceed0959b31411c2ebc", "filename": "tests/ui/if_let_some_result.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.fixed?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::if_let_some_result)]\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Ok(y) = x   .   parse()       {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let _ = str_to_int(\"1\");\n+    let _ = str_to_int_ok(\"2\");\n+    let _ = strange_some_no_else(\"3\");\n+}"}, {"sha": "ecac13574456ca8cae735b742108eb9f1671d087", "filename": "tests/ui/if_let_some_result.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.rs?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::if_let_some_result)]\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Some(y) = x.parse().ok() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Some(y) = x   .   parse()   .   ok   ()    {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let _ = str_to_int(\"1\");\n+    let _ = str_to_int_ok(\"2\");\n+    let _ = strange_some_no_else(\"3\");\n+}"}, {"sha": "334ccb0101678c6c05cbb0c7418c75c8a17489b2", "filename": "tests/ui/if_let_some_result.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd0428f622feee209e6014b802f5717d48d9e978/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=fd0428f622feee209e6014b802f5717d48d9e978", "patch": "@@ -0,0 +1,25 @@\n+error: Matching on `Some` with `ok()` is redundant\n+  --> $DIR/if_let_some_result.rs:6:5\n+   |\n+LL |     if let Some(y) = x.parse().ok() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n+help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+   |\n+LL |     if let Ok(y) = x.parse() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Matching on `Some` with `ok()` is redundant\n+  --> $DIR/if_let_some_result.rs:24:9\n+   |\n+LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+   |\n+LL |         if let Ok(y) = x   .   parse()       {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "61db311305276156b91cdfcf64277129205538b5", "filename": "tests/ui/ok_if_let.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f728bcd43187bbebceab3ff9424ecbb89524441c/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f728bcd43187bbebceab3ff9424ecbb89524441c/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=f728bcd43187bbebceab3ff9424ecbb89524441c", "patch": "@@ -1,23 +0,0 @@\n-#![warn(clippy::if_let_some_result)]\n-\n-fn str_to_int(x: &str) -> i32 {\n-    if let Some(y) = x.parse().ok() {\n-        y\n-    } else {\n-        0\n-    }\n-}\n-\n-fn str_to_int_ok(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() {\n-        y\n-    } else {\n-        0\n-    }\n-}\n-\n-fn main() {\n-    let y = str_to_int(\"1\");\n-    let z = str_to_int_ok(\"2\");\n-    println!(\"{}{}\", y, z);\n-}"}, {"sha": "e3e6c5c46343c6126a8bfe591102b0c4c765cb55", "filename": "tests/ui/ok_if_let.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f728bcd43187bbebceab3ff9424ecbb89524441c/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f728bcd43187bbebceab3ff9424ecbb89524441c/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=f728bcd43187bbebceab3ff9424ecbb89524441c", "patch": "@@ -1,15 +0,0 @@\n-error: Matching on `Some` with `ok()` is redundant\n-  --> $DIR/ok_if_let.rs:4:5\n-   |\n-LL | /     if let Some(y) = x.parse().ok() {\n-LL | |         y\n-LL | |     } else {\n-LL | |         0\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n-   = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n-\n-error: aborting due to previous error\n-"}]}