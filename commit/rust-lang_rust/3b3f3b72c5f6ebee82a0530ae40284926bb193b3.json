{"sha": "3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "node_id": "C_kwDOAAsO6NoAKDNiM2YzYjcyYzVmNmViZWU4MmEwNTMwYWU0MDI4NDkyNmJiMTkzYjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T11:37:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T11:37:06Z"}, "message": "Auto merge of #100989 - lcnr:implied-bounds-uwu, r=spastorino\n\nno unnormalized types for implied bounds outside borrowck\n\nfixes #100910 - introduced in https://github.com/rust-lang/rust/pull/100676 - by only considering normalized types for wf.\n\nr? types", "tree": {"sha": "3cc3a2e0432b755cfd283f58ba91fed07af21827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc3a2e0432b755cfd283f58ba91fed07af21827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "html_url": "https://github.com/rust-lang/rust/commit/3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "html_url": "https://github.com/rust-lang/rust/commit/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0"}, {"sha": "ef7bda3b62b7d6821acb4603e2c72b7120b02059", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7bda3b62b7d6821acb4603e2c72b7120b02059", "html_url": "https://github.com/rust-lang/rust/commit/ef7bda3b62b7d6821acb4603e2c72b7120b02059"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "72533a42d8078dce6949d9d67850eccab50576fa", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "patch": "@@ -124,7 +124,18 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let cause = ObligationCause::misc(span, hir_id);\n         for ty in assumed_wf_types {\n-            implied_bounds.insert(ty);\n+            // FIXME(@lcnr): rustc currently does not check wf for types\n+            // pre-normalization, meaning that implied bounds are sometimes\n+            // incorrect. See #100910 for more details.\n+            //\n+            // Not adding the unnormalized types here mostly fixes that, except\n+            // that there are projections which are still ambiguous in the item definition\n+            // but do normalize successfully when using the item, see #98543.\n+            //\n+            // Anyways, I will hopefully soon change implied bounds to make all of this\n+            // sound and then uncomment this line again.\n+\n+            // implied_bounds.insert(ty);\n             let normalized = self.normalize(cause.clone(), param_env, ty);\n             implied_bounds.insert(normalized);\n         }"}, {"sha": "d84539f8ab525e6ae54294d5d7d5fe07459ccfc4", "filename": "src/test/ui/implied-bounds/impl-header-unnormalized-types.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.rs?ref=3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "patch": "@@ -0,0 +1,28 @@\n+struct Foo<T>(T);\n+\n+trait GoodBye {\n+    type Forget;\n+}\n+impl<T> GoodBye for T {\n+    type Forget = ();\n+}\n+\n+trait NeedsWf<'a, 'b> {\n+    type Assoc;\n+}\n+\n+impl<'a, 'b> NeedsWf<'a, 'b> for Foo<<&'a &'b () as GoodBye>::Forget> {\n+    type Assoc = &'a &'b ();\n+    //~^ ERROR in type `&'a &'b ()`, reference has a longer lifetime than the data it references\n+}\n+\n+fn needs_wf<'a, 'b, T: NeedsWf<'a, 'b>>() {}\n+\n+fn foo<'a: 'a, 'b: 'b>(_: &'b String) {\n+    needs_wf::<'a, 'b, Foo<()>>();\n+}\n+\n+fn main() {\n+    let x = String::from(\"hello\");\n+    foo::<'static, '_>(&x);\n+}"}, {"sha": "88abd5f54c2a612d01c69765ce676ee949711f52", "filename": "src/test/ui/implied-bounds/impl-header-unnormalized-types.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b3f3b72c5f6ebee82a0530ae40284926bb193b3/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-header-unnormalized-types.stderr?ref=3b3f3b72c5f6ebee82a0530ae40284926bb193b3", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a &'b ()`, reference has a longer lifetime than the data it references\n+  --> $DIR/impl-header-unnormalized-types.rs:15:18\n+   |\n+LL |     type Assoc = &'a &'b ();\n+   |                  ^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'a` as defined here\n+  --> $DIR/impl-header-unnormalized-types.rs:14:6\n+   |\n+LL | impl<'a, 'b> NeedsWf<'a, 'b> for Foo<<&'a &'b () as GoodBye>::Forget> {\n+   |      ^^\n+note: but the referenced data is only valid for the lifetime `'b` as defined here\n+  --> $DIR/impl-header-unnormalized-types.rs:14:10\n+   |\n+LL | impl<'a, 'b> NeedsWf<'a, 'b> for Foo<<&'a &'b () as GoodBye>::Forget> {\n+   |          ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}]}