{"sha": "a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjkyOWRiYjZiOGU4NmNjZWRmOTZhMjA3YTYyNTNjMGFmMWQ2Yzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-11T18:59:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-11T19:00:56Z"}, "message": "librustc: Make sure region bounds on closures outlive calls to them.\n\nThis can break code like:\n\n    fn call_rec(f: |uint| -> uint) -> uint {\n        (|x| f(x))(call_rec(f))\n    }\n\nChange this code to use a temporary instead of violating the borrow\nrules:\n\n    fn call_rec(f: |uint| -> uint) -> uint {\n        let tmp = call_rec(|x| f(x)); f(tmp)\n    }\n\nCloses #17144.\n\n[breaking-change]", "tree": {"sha": "3cbdbb65cfff89c08732d95a32da59ddc60f682d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cbdbb65cfff89c08732d95a32da59ddc60f682d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "html_url": "https://github.com/rust-lang/rust/commit/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b0d667c30e0918714ac178edaed883c6a8132a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b0d667c30e0918714ac178edaed883c6a8132a", "html_url": "https://github.com/rust-lang/rust/commit/c8b0d667c30e0918714ac178edaed883c6a8132a"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "6ddb10cc8ca6fb136cc37b48d1917df1ece22091", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "patch": "@@ -1064,6 +1064,10 @@ fn constrain_callee(rcx: &mut Rcx,\n             };\n             rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n                             call_region, region);\n+\n+            let region = closure_ty.bounds.region_bound;\n+            rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n+                            call_region, region);\n         }\n         _ => {\n             // this should not happen, but it does if the program is"}, {"sha": "13ab7acaf48353b99391e48826941e33afe59d4d", "filename": "src/test/compile-fail/region-bound-on-closure-outlives-call.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs?ref=a9b929dbb6b8e86ccedf96a207a6253c0af1d6c9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn call_rec(f: |uint| -> uint) -> uint {\n+    (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+}\n+\n+fn main() {}\n+"}]}