{"sha": "cdb2c3c36819870e155f4711e67e8b417356c8a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjJjM2MzNjgxOTg3MGUxNTVmNDcxMWU2N2U4YjQxNzM1NmM4YTQ=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-03-22T02:32:35Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-03-22T02:32:35Z"}, "message": "use static strs", "tree": {"sha": "ab0d8a6780b29b5a7bc71b9a4a6b553febb7d9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0d8a6780b29b5a7bc71b9a4a6b553febb7d9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb2c3c36819870e155f4711e67e8b417356c8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb2c3c36819870e155f4711e67e8b417356c8a4", "html_url": "https://github.com/rust-lang/rust/commit/cdb2c3c36819870e155f4711e67e8b417356c8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb2c3c36819870e155f4711e67e8b417356c8a4/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1661a0a99ba09ff0b2cce8ad99c4f18150165b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/1661a0a99ba09ff0b2cce8ad99c4f18150165b80", "html_url": "https://github.com/rust-lang/rust/commit/1661a0a99ba09ff0b2cce8ad99c4f18150165b80"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "24529db48aa2bb6449970fd1904cf50bfe75a423", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cdb2c3c36819870e155f4711e67e8b417356c8a4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb2c3c36819870e155f4711e67e8b417356c8a4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cdb2c3c36819870e155f4711e67e8b417356c8a4", "patch": "@@ -349,7 +349,8 @@ impl MissingDoc {\n         id: Option<hir::HirId>,\n         attrs: &[ast::Attribute],\n         sp: Span,\n-        desc: &str,\n+        article: &'static str,\n+        desc: &'static str,\n     ) {\n         // If we're building a test harness, then warning about\n         // documentation is probably not really relevant right now.\n@@ -374,7 +375,7 @@ impl MissingDoc {\n         let has_doc = attrs.iter().any(|a| has_doc(a));\n         if !has_doc {\n             cx.struct_span_lint(MISSING_DOCS, cx.tcx.sess.source_map().def_span(sp), |lint| {\n-                lint.build(&format!(\"missing documentation for {}\", desc)).emit()\n+                lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit()\n             });\n         }\n     }\n@@ -398,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"crate\");\n+        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"a\", \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(a));\n@@ -455,13 +456,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n         let (article, desc) = cx.tcx.article_and_description(def_id);\n \n-        self.check_missing_docs_attrs(\n-            cx,\n-            Some(it.hir_id),\n-            &it.attrs,\n-            it.span,\n-            &format!(\"{} {}\", article, desc),\n-        );\n+        self.check_missing_docs_attrs(cx, Some(it.hir_id), &it.attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem<'_>) {\n@@ -477,7 +472,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             Some(trait_item.hir_id),\n             &trait_item.attrs,\n             trait_item.span,\n-            &format!(\"{} {}\", article, desc),\n+            article,\n+            desc,\n         );\n     }\n \n@@ -494,18 +490,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             Some(impl_item.hir_id),\n             &impl_item.attrs,\n             impl_item.span,\n-            &format!(\"{} {}\", article, desc),\n+            article,\n+            desc,\n         );\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, sf: &hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(cx, Some(sf.hir_id), &sf.attrs, sf.span, \"a struct field\")\n+            self.check_missing_docs_attrs(\n+                cx,\n+                Some(sf.hir_id),\n+                &sf.attrs,\n+                sf.span,\n+                \"a\",\n+                \"struct field\",\n+            )\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, Some(v.id), &v.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, Some(v.id), &v.attrs, v.span, \"a\", \"variant\");\n     }\n }\n "}]}