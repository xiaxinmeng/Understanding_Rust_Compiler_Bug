{"sha": "7e5f99ab58afc53f208f31db2e1d664efe679ce2", "node_id": "C_kwDOAAsO6NoAKDdlNWY5OWFiNThhZmM1M2YyMDhmMzFkYjJlMWQ2NjRlZmU2NzljZTI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-20T23:08:18Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-01T15:47:33Z"}, "message": "Fix manual_assert for `#![no_std]` and Rust 2021", "tree": {"sha": "4beefa25552d7e6ef219e3d3e5beb7aebc60dab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4beefa25552d7e6ef219e3d3e5beb7aebc60dab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5f99ab58afc53f208f31db2e1d664efe679ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5f99ab58afc53f208f31db2e1d664efe679ce2", "html_url": "https://github.com/rust-lang/rust/commit/7e5f99ab58afc53f208f31db2e1d664efe679ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5f99ab58afc53f208f31db2e1d664efe679ce2/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cd9bf5af33250988deeb1e5b0575d55bab3d01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd9bf5af33250988deeb1e5b0575d55bab3d01b", "html_url": "https://github.com/rust-lang/rust/commit/7cd9bf5af33250988deeb1e5b0575d55bab3d01b"}], "stats": {"total": 273, "additions": 230, "deletions": 43}, "files": [{"sha": "e55aa3f1850fe06a8a6f17b920e6fdcae763267c", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -54,23 +54,24 @@ impl LateLintPass<'_> for ManualAssert {\n             if !cx.tcx.sess.source_map().is_multiline(cond.span);\n \n             then {\n-                let span = if let Some(panic_expn) = PanicExpn::parse(semi) {\n+                let call = if_chain! {\n+                    if let ExprKind::Block(block, _) = semi.kind;\n+                    if let Some(init) = block.expr;\n+                    then {\n+                        init\n+                    } else {\n+                        semi\n+                    }\n+                };\n+                let span = if let Some(panic_expn) = PanicExpn::parse(call) {\n                     match *panic_expn.format_args.value_args {\n                         [] => panic_expn.format_args.format_string_span,\n                         [.., last] => panic_expn.format_args.format_string_span.to(last.span),\n                     }\n+                } else if let ExprKind::Call(_, [format_args]) = call.kind {\n+                    format_args.span\n                 } else {\n-                    if_chain! {\n-                        if let ExprKind::Block(block, _) = semi.kind;\n-                        if let Some(init) = block.expr;\n-                        if let ExprKind::Call(_, [format_args]) = init.kind;\n-\n-                        then {\n-                            format_args.span\n-                        } else {\n-                            return\n-                        }\n-                    }\n+                    return\n                 };\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);"}, {"sha": "eb311983b29276ebf0b21b35ed9e0dcc46750af3", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -967,8 +967,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                     }\n                     if_chain! {\n                         if matching_wild;\n-                        if let ExprKind::Block(block, _) = arm.body.kind;\n-                        if is_panic_block(block);\n+                        if is_panic_call(arm.body);\n                         then {\n                             // `Err(_)` or `Err(_e)` arm with `panic!` found\n                             span_lint_and_note(cx,\n@@ -1171,14 +1170,19 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n }\n \n // If the block contains only a `panic!` macro (as expression or statement)\n-fn is_panic_block(block: &Block<'_>) -> bool {\n-    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n-        (&Some(exp), 0, _) => is_expn_of(exp.span, \"panic\").is_some() && is_expn_of(exp.span, \"unreachable\").is_none(),\n-        (&None, 1, Some(stmt)) => {\n-            is_expn_of(stmt.span, \"panic\").is_some() && is_expn_of(stmt.span, \"unreachable\").is_none()\n-        },\n-        _ => false,\n-    }\n+fn is_panic_call(expr: &Expr<'_>) -> bool {\n+    // Unwrap any wrapping blocks\n+    let span = if let ExprKind::Block(block, _) = expr.kind {\n+        match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+            (&Some(exp), 0, _) => exp.span,\n+            (&None, 1, Some(stmt)) => stmt.span,\n+            _ => return false,\n+        }\n+    } else {\n+        expr.span\n+    };\n+\n+    is_expn_of(span, \"panic\").is_some() && is_expn_of(span, \"unreachable\").is_none()\n }\n \n fn check_match_ref_pats<'a, 'b, I>(cx: &LateContext<'_>, ex: &Expr<'_>, pats: I, expr: &Expr<'_>)"}, {"sha": "c1a763def3d15dda98c8f5fa7e4d24ed73529344", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -718,9 +718,7 @@ impl PanicExpn<'tcx> {\n     /// Parses an expanded `panic!` invocation\n     pub fn parse(expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         if_chain! {\n-            if let ExprKind::Block(block, _) = expr.kind;\n-            if let Some(init) = block.expr;\n-            if let ExprKind::Call(_, [format_args]) = init.kind;\n+            if let ExprKind::Call(_, [format_args]) = expr.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:21:5\n+  --> $DIR/manual_assert.rs:22:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,47 +9,47 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:25:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:41:5\n+  --> $DIR/manual_assert.rs:42:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:45:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:48:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");", "previous_filename": "tests/ui/manual_assert.stderr"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -0,0 +1,60 @@\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:22:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qaqaq{:?}\", a);\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   |\n+   = note: `-D clippy::manual-assert` implied by `-D warnings`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:25:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qwqwq\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:42:5\n+   |\n+LL | /     if b.is_empty() {\n+LL | |         panic!(\"panic1\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:45:5\n+   |\n+LL | /     if b.is_empty() && a.is_empty() {\n+LL | |         panic!(\"panic2\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:48:5\n+   |\n+LL | /     if a.is_empty() && !b.is_empty() {\n+LL | |         panic!(\"panic3\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:51:5\n+   |\n+LL | /     if b.is_empty() || a.is_empty() {\n+LL | |         panic!(\"panic4\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:54:5\n+   |\n+LL | /     if a.is_empty() || !b.is_empty() {\n+LL | |         panic!(\"panic5\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -1,6 +1,7 @@\n-// edition:2018\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-//FIXME: This does not correctly match in edition 2021, see #7843\n #![warn(clippy::manual_assert)]\n \n fn main() {"}, {"sha": "8713426fc8886b9223e7631a6241162c7fc8ce88", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -1,6 +1,7 @@\n-// edition:2018\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-//FIXME: This does not correctly match in edition 2021, see #7843\n #![warn(clippy::manual_assert)]\n \n fn main() {"}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2018.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -1,5 +1,5 @@\n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:13:9\n+  --> $DIR/match_wild_err_arm.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -8,23 +8,23 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:19:9\n+  --> $DIR/match_wild_err_arm.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:25:9\n+  --> $DIR/match_wild_err_arm.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:33:9\n+  --> $DIR/match_wild_err_arm.rs:34:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^", "previous_filename": "tests/ui/match_wild_err_arm.stderr"}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2021.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -0,0 +1,35 @@\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:14:9\n+   |\n+LL |         Err(_) => panic!(\"err\"),\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:20:9\n+   |\n+LL |         Err(_) => panic!(),\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:26:9\n+   |\n+LL |         Err(_) => {\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_e)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:34:9\n+   |\n+LL |         Err(_e) => panic!(),\n+   |         ^^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0a86144b95d5bcc59b148e298783caa02d017217", "filename": "tests/ui/match_wild_err_arm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5f99ab58afc53f208f31db2e1d664efe679ce2/tests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.rs?ref=7e5f99ab58afc53f208f31db2e1d664efe679ce2", "patch": "@@ -1,12 +1,13 @@\n-//edition:2015\n-//FIXME: The lint only triggers once on edition 2021, so I'm leaving this at 2015 for now.\n-\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n #![feature(exclusive_range_pattern)]\n #![allow(clippy::match_same_arms)]\n #![warn(clippy::match_wild_err_arm)]\n \n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n+\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),"}]}