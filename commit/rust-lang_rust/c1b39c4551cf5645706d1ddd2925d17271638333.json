{"sha": "c1b39c4551cf5645706d1ddd2925d17271638333", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjM5YzQ1NTFjZjU2NDU3MDZkMWRkZDI5MjVkMTcyNzE2MzgzMzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-04T13:06:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-04T13:06:59Z"}, "message": "Merge pull request #2713 from alexreg/nightly-fix\n\nFixed build for latest rust master", "tree": {"sha": "2704052525f749a0a4f011140c5128ffab29b11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2704052525f749a0a4f011140c5128ffab29b11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b39c4551cf5645706d1ddd2925d17271638333", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa7FrzCRBK7hj4Ov3rIwAAdHIIACU0w0sRUSYUhIz3rQgpm8Qy\nsxEUhQxjiWf0Xu9nkCuhF/OsorcpjIuYJZMDt2RUBl5upzMGngpHCpJ8OsUVV4li\nqqkv0Ht+q267cDV/dmnbtYDMEr4uaZ6tfLR4Gqyp+cJEF72Vac/zqgU6H5i9e/sd\n1//Xw0gFFExJTU1ml9M1gEXx5jMckbHqH4YviLEHx9hBPHEl1YszB28PLPv9/eUf\n4fyKt2JC0Ow4RRIiOQMhjjNt+HHyvlT6FlAm7AWmw5RcgWQCpoQznBBfeo/ytCkL\njWAkOY4sXBJ06dyWOJxXhU6B1xTh/HBe9f+TEkCtstnhLE91cFhTbu/fnLSKNpU=\n=4g2Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 2704052525f749a0a4f011140c5128ffab29b11e\nparent 77de1000d7ecb2419bf3402905c926bbcd588aba\nparent 9ce6fb34ca249388def66d183a844d3dabaefc94\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1525439219 +0200\ncommitter GitHub <noreply@github.com> 1525439219 +0200\n\nMerge pull request #2713 from alexreg/nightly-fix\n\nFixed build for latest rust master"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b39c4551cf5645706d1ddd2925d17271638333", "html_url": "https://github.com/rust-lang/rust/commit/c1b39c4551cf5645706d1ddd2925d17271638333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b39c4551cf5645706d1ddd2925d17271638333/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77de1000d7ecb2419bf3402905c926bbcd588aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/77de1000d7ecb2419bf3402905c926bbcd588aba", "html_url": "https://github.com/rust-lang/rust/commit/77de1000d7ecb2419bf3402905c926bbcd588aba"}, {"sha": "9ce6fb34ca249388def66d183a844d3dabaefc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce6fb34ca249388def66d183a844d3dabaefc94", "html_url": "https://github.com/rust-lang/rust/commit/9ce6fb34ca249388def66d183a844d3dabaefc94"}], "stats": {"total": 176, "additions": 82, "deletions": 94}, "files": [{"sha": "bc345347dc6a79b4ed6d21fed39048fd75427711", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -125,14 +125,14 @@ impl LintPass for AttrPass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let Some(ref items) = attr.meta_item_list() {\n-            if items.is_empty() || attr.name().map_or(true, |n| n != \"deprecated\") {\n+            if items.is_empty() || attr.name() != \"deprecated\" {\n                 return;\n             }\n             for item in items {\n                 if_chain! {\n                     if let NestedMetaItemKind::MetaItem(ref mi) = item.node;\n                     if let MetaItemKind::NameValue(ref lit) = mi.node;\n-                    if mi.ident.name == \"since\";\n+                    if mi.name() == \"since\";\n                     then {\n                         check_semver(cx, item.span, lit);\n                     }\n@@ -149,40 +149,38 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n             ItemExternCrate(_) | ItemUse(_, _) => {\n                 for attr in &item.attrs {\n                     if let Some(ref lint_list) = attr.meta_item_list() {\n-                        if let Some(name) = attr.name() {\n-                            match &*name.as_str() {\n-                                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // whitelist `unused_imports` and `deprecated`\n-                                    for lint in lint_list {\n-                                        if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n-                                            if let ItemUse(_, _) = item.node {\n-                                                return;\n-                                            }\n+                        match &*attr.name().as_str() {\n+                            \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n+                                // whitelist `unused_imports` and `deprecated`\n+                                for lint in lint_list {\n+                                    if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n+                                        if let ItemUse(_, _) = item.node {\n+                                            return;\n                                         }\n                                     }\n-                                    let line_span = last_line_of_span(cx, attr.span);\n+                                }\n+                                let line_span = last_line_of_span(cx, attr.span);\n \n-                                    if let Some(mut sugg) = snippet_opt(cx, line_span) {\n-                                        if sugg.contains(\"#[\") {\n-                                            span_lint_and_then(\n-                                                cx,\n-                                                USELESS_ATTRIBUTE,\n-                                                line_span,\n-                                                \"useless lint attribute\",\n-                                                |db| {\n-                                                    sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                    db.span_suggestion(\n-                                                        line_span,\n-                                                        \"if you just forgot a `!`, use\",\n-                                                        sugg,\n-                                                    );\n-                                                },\n-                                            );\n-                                        }\n+                                if let Some(mut sugg) = snippet_opt(cx, line_span) {\n+                                    if sugg.contains(\"#[\") {\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            USELESS_ATTRIBUTE,\n+                                            line_span,\n+                                            \"useless lint attribute\",\n+                                            |db| {\n+                                                sugg = sugg.replacen(\"#[\", \"#![\", 1);\n+                                                db.span_suggestion(\n+                                                    line_span,\n+                                                    \"if you just forgot a `!`, use\",\n+                                                    sugg,\n+                                                );\n+                                            },\n+                                        );\n                                     }\n-                                },\n-                                _ => {},\n-                            }\n+                                }\n+                            },\n+                            _ => {},\n                         }\n                     }\n                 }\n@@ -294,7 +292,7 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n         }\n \n         if let Some(ref values) = attr.meta_item_list() {\n-            if values.len() != 1 || attr.name().map_or(true, |n| n != \"inline\") {\n+            if values.len() != 1 || attr.name() != \"inline\" {\n                 continue;\n             }\n             if is_word(&values[0], \"always\") {\n@@ -328,7 +326,7 @@ fn check_semver(cx: &LateContext, span: Span, lit: &Lit) {\n \n fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n     if let NestedMetaItemKind::MetaItem(ref mi) = nmi.node {\n-        mi.is_word() && mi.ident.name == expected\n+        mi.is_word() && mi.name() == expected\n     } else {\n         false\n     }"}, {"sha": "7d3e812c9c59c00dd80a20232a087bb9cc4b07ac", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -150,11 +150,9 @@ pub fn check_attrs<'a>(cx: &EarlyContext, valid_idents: &[String], attrs: &'a [a\n                 spans.extend_from_slice(&current_spans);\n                 doc.push_str(&current);\n             }\n-        } else if let Some(name) = attr.name() {\n+        } else if attr.name() == \"doc\" {\n             // ignore mix of sugared and non-sugared doc\n-            if name == \"doc\" {\n-                return;\n-            }\n+            return;\n         }\n     }\n "}, {"sha": "34196a1728f2090c91c2a7071d95b3a09f29cc35", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n fn check_attrs(cx: &LateContext, name: &Name, attrs: &[Attribute]) {\n     for attr in attrs {\n-        if attr.name().map_or(true, |n| n != \"inline\") {\n+        if attr.name() != \"inline\" {\n             continue;\n         }\n "}, {"sha": "821093735dfefadda8742fa667279517cd31a7dc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -42,7 +42,6 @@ extern crate regex_syntax;\n \n extern crate quine_mc_cluskey;\n \n-extern crate rustc_const_math;\n extern crate rustc_errors;\n extern crate rustc_plugin;\n "}, {"sha": "fb8814d6d873680777a3807867e2f58245aeb9c4", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n+use rustc_errors::{Applicability};\n use syntax::codemap::Span;\n use utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use utils::paths;\n@@ -210,25 +211,31 @@ fn lint_map_unit_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_ar\n                                  snippet(cx, fn_arg.span, \"_\"));\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            db.span_approximate_suggestion(stmt.span, \"try this\", suggestion);\n+            db.span_suggestion_with_applicability(stmt.span,\n+                                                  \"try this\",\n+                                                  suggestion,\n+                                                  Applicability::Unspecified);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n             if let Some(reduced_expr_span) = reduce_unit_expression(cx, closure_expr) {\n                 let suggestion = format!(\"if let {0}({1}) = {2} {{ {3} }}\",\n-                                        variant,\n-                                        snippet(cx, binding.pat.span, \"_\"),\n-                                        snippet(cx, var_arg.span, \"_\"),\n-                                        snippet(cx, reduced_expr_span, \"_\"));\n+                                         variant,\n+                                         snippet(cx, binding.pat.span, \"_\"),\n+                                         snippet(cx, var_arg.span, \"_\"),\n+                                         snippet(cx, reduced_expr_span, \"_\"));\n                 db.span_suggestion(stmt.span, \"try this\", suggestion);\n             } else {\n                 let suggestion = format!(\"if let {0}({1}) = {2} {{ ... }}\",\n-                                        variant,\n-                                        snippet(cx, binding.pat.span, \"_\"),\n-                                        snippet(cx, var_arg.span, \"_\"));\n-                db.span_approximate_suggestion(stmt.span, \"try this\", suggestion);\n+                                         variant,\n+                                         snippet(cx, binding.pat.span, \"_\"),\n+                                         snippet(cx, var_arg.span, \"_\"));\n+                db.span_suggestion_with_applicability(stmt.span,\n+                                                      \"try this\",\n+                                                      suggestion,\n+                                                      Applicability::Unspecified);\n             }\n         });\n     }"}, {"sha": "d9a6463641e346e52b805667c55dedf4ae7377b9", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -84,7 +84,7 @@ impl MissingDoc {\n \n         let has_doc = attrs\n             .iter()\n-            .any(|a| a.is_value_str() && a.name().map_or(false, |n| n == \"doc\"));\n+            .any(|a| a.is_value_str() && a.name() == \"doc\");\n         if !has_doc {\n             cx.span_lint(\n                 MISSING_DOCS_IN_PRIVATE_ITEMS,"}, {"sha": "dc78f428ef97c92f43d2c153a9b8bfb2b9503ff1", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -77,13 +77,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     return;\n                 }\n                 for a in attrs {\n-                    if_chain! {\n-                        if a.meta_item_list().is_some();\n-                        if let Some(name) = a.name();\n-                        if name == \"proc_macro_derive\";\n-                        then {\n-                            return;\n-                        }\n+                    if a.meta_item_list().is_some() && a.name() == \"proc_macro_derive\" {\n+                        return;\n                     }\n                 }\n             },"}, {"sha": "ae77dd7b4a879667db5dfc96750b676e7d2f0b42", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -149,5 +149,5 @@ impl EarlyLintPass for ReturnPass {\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n-    attr.meta_item_list().is_some() && attr.name().map_or(false, |n| n == \"cfg\")\n+    attr.meta_item_list().is_some() && attr.name() == \"cfg\"\n }"}, {"sha": "fccb47817e0c8bebd2a8afbe0f8e91a1d585cb18", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -463,7 +463,7 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| {\n         attr.check_name(\"clippy\") && attr.meta_item_list().map_or(false, |list| {\n             list.len() == 1 && match list[0].node {\n-                ast::NestedMetaItemKind::MetaItem(ref it) => it.ident.name == \"author\",\n+                ast::NestedMetaItemKind::MetaItem(ref it) => it.name() == \"author\",\n                 ast::NestedMetaItemKind::Literal(_) => false,\n             }\n         })"}, {"sha": "58e71705011a29dc36222de48ea50579c0d86c53", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -13,7 +13,7 @@ pub fn file_from_args(\n     args: &[codemap::Spanned<ast::NestedMetaItemKind>],\n ) -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n     for arg in args.iter().filter_map(|a| a.meta_item()) {\n-        if arg.ident.name == \"conf_file\" {\n+        if arg.name() == \"conf_file\" {\n             return match arg.node {\n                 ast::MetaItemKind::Word | ast::MetaItemKind::List(_) => {\n                     Err((\"`conf_file` must be a named value\", arg.span))"}, {"sha": "011d2f7b8a25e32b5a849cd777bfa818ad5cdbb8", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -69,6 +69,19 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n                 None\n             }\n         },\n+        hir::ExprCall(ref path, ref args) => if let hir::ExprPath(ref path) = path.node {\n+            if match_qpath(path, &paths::RANGE_INCLUSIVE_STD_NEW) || match_qpath(path, &paths::RANGE_INCLUSIVE_NEW) {\n+                Some(Range {\n+                    start: Some(&args[0]),\n+                    end: Some(&args[1]),\n+                    limits: ast::RangeLimits::Closed,\n+                })\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        },\n         hir::ExprStruct(ref path, ref fields, None) => if match_qpath(path, &paths::RANGE_FROM_STD)\n             || match_qpath(path, &paths::RANGE_FROM)\n         {\n@@ -77,12 +90,6 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n                 end: None,\n                 limits: ast::RangeLimits::HalfOpen,\n             })\n-        } else if match_qpath(path, &paths::RANGE_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_INCLUSIVE) {\n-            Some(Range {\n-                start: Some(get_field(\"start\", fields)?),\n-                end: Some(get_field(\"end\", fields)?),\n-                limits: ast::RangeLimits::Closed,\n-            })\n         } else if match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE) {\n             Some(Range {\n                 start: Some(get_field(\"start\", fields)?),"}, {"sha": "9234926d534cd9358f791b0efd426e728790b15f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::{LateContext, Level, Lint, LintContext};\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, layout::{self, IntegerExt}};\n-use rustc_errors;\n+use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n use std::borrow::Cow;\n use std::env;\n use std::mem;\n@@ -643,12 +643,12 @@ pub fn multispan_sugg<I>(db: &mut DiagnosticBuilder, help_msg: String, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    let sugg = rustc_errors::CodeSuggestion {\n+    let sugg = CodeSuggestion {\n         substitutions: vec![\n-            rustc_errors::Substitution {\n+            Substitution {\n                 parts: sugg.into_iter()\n                     .map(|(span, snippet)| {\n-                        rustc_errors::SubstitutionPart {\n+                        SubstitutionPart {\n                             snippet,\n                             span,\n                         }\n@@ -658,7 +658,7 @@ where\n         ],\n         msg: help_msg,\n         show_code_when_inline: true,\n-        approximate: false,\n+        applicability: Applicability::Unspecified,\n     };\n     db.suggestions.push(sugg);\n }\n@@ -741,7 +741,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n             continue;\n         }\n         if let Some(ref value) = attr.value_str() {\n-            if attr.name().map_or(false, |n| n == name) {\n+            if attr.name() == name {\n                 if let Ok(value) = FromStr::from_str(&value.as_str()) {\n                     attr::mark_used(attr);\n                     f(value)"}, {"sha": "a1cb6670bc5e2d27055a291a63feb17e8ff23619", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -66,7 +66,9 @@ pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];\n pub const RANGE_FULL_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFull\"];\n pub const RANGE_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_INCLUSIVE_NEW: [&str; 4] = [\"core\", \"ops\", \"RangeInclusive\", \"new\"];\n pub const RANGE_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_INCLUSIVE_STD_NEW: [&str; 4] = [\"std\", \"ops\", \"RangeInclusive\", \"new\"];\n pub const RANGE_STD: [&str; 3] = [\"std\", \"ops\", \"Range\"];\n pub const RANGE_TO: [&str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];"}, {"sha": "7ff0425ebb9c2bf3ef4cbd69276cfaf037b5ef38", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -108,12 +108,6 @@ error: statement with no effect\n 76 |     5..6;\n    |     ^^^^^\n \n-error: statement with no effect\n-  --> $DIR/no_effect.rs:77:5\n-   |\n-77 |     5..=6;\n-   |     ^^^^^^\n-\n error: statement with no effect\n   --> $DIR/no_effect.rs:78:5\n    |\n@@ -278,5 +272,5 @@ error: statement can be reduced\n 116 |     FooString { s: String::from(\"blah\"), };\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n \n-error: aborting due to 46 previous errors\n+error: aborting due to 45 previous errors\n "}, {"sha": "095ac7c0cc15b325b375925eff1b4927b78c513f", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -1,6 +1,6 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n-#![feature(inclusive_range, inclusive_range_fields)]\n+#![feature(inclusive_range, inclusive_range_fields, inclusive_range_methods)]\n \n #[macro_use]\n extern crate derive_new;\n@@ -53,6 +53,6 @@ fn main() {\n     let _ = RangeFrom { start: start };\n     let _ = RangeTo { end: end };\n     let _ = Range { start: start, end: end };\n-    let _ = RangeInclusive { start: start, end: end };\n+    let _ = RangeInclusive::new(start, end);\n     let _ = RangeToInclusive { end: end };\n }"}, {"sha": "d757f1871a781c4026b24485163b0cd050ef837f", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b39c4551cf5645706d1ddd2925d17271638333/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=c1b39c4551cf5645706d1ddd2925d17271638333", "patch": "@@ -36,23 +36,11 @@ error: redundant field names in struct initialization\n 55 |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:56:30\n-   |\n-56 |     let _ = RangeInclusive { start: start, end: end };\n-   |                              ^^^^^^^^^^^^ help: replace it with: `start`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:56:44\n-   |\n-56 |     let _ = RangeInclusive { start: start, end: end };\n-   |                                            ^^^^^^^^ help: replace it with: `end`\n-\n error: redundant field names in struct initialization\n   --> $DIR/redundant_field_names.rs:57:32\n    |\n 57 |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n "}]}