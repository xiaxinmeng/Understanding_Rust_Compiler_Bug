{"sha": "d445ced166b57f304b19d9e2bcd45336a96a8705", "node_id": "C_kwDOAAsO6NoAKGQ0NDVjZWQxNjZiNTdmMzA0YjE5ZDllMmJjZDQ1MzM2YTk2YTg3MDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T13:17:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T13:17:02Z"}, "message": "Auto merge of #9879 - Alexendoo:allow, r=Manishearth\n\nFix `#[allow]` for `module_name_repetitions` & `single_component_path_imports`\n\nFixes #7511\nFixes #8768\nFixes #9401\n\n`single_component_path_imports` needed some changes to the lint itself, it now buffers the found single component paths to emit in the equivalent `check_item`\n\nchangelog: Fix `#[allow(clippy::module_name_repetitions)]` and `#[allow(clippy::single_component_path_imports)]`", "tree": {"sha": "37d8cfe97baf6e5066e05e3e5c4e632775ccf31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d8cfe97baf6e5066e05e3e5c4e632775ccf31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d445ced166b57f304b19d9e2bcd45336a96a8705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d445ced166b57f304b19d9e2bcd45336a96a8705", "html_url": "https://github.com/rust-lang/rust/commit/d445ced166b57f304b19d9e2bcd45336a96a8705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d445ced166b57f304b19d9e2bcd45336a96a8705/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60186f35d5f6d77101b21e7c574531d2f366561", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60186f35d5f6d77101b21e7c574531d2f366561", "html_url": "https://github.com/rust-lang/rust/commit/f60186f35d5f6d77101b21e7c574531d2f366561"}, {"sha": "4d8af99365d73725b4d46bfc4cd993d6c3af63c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8af99365d73725b4d46bfc4cd993d6c3af63c5", "html_url": "https://github.com/rust-lang/rust/commit/4d8af99365d73725b4d46bfc4cd993d6c3af63c5"}], "stats": {"total": 300, "additions": 180, "deletions": 120}, "files": [{"sha": "ecf8e83375dbf718173a941298d87613a6c646fb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -378,7 +378,9 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                                         | \"enum_glob_use\"\n                                                         | \"redundant_pub_crate\"\n                                                         | \"macro_use_imports\"\n-                                                        | \"unsafe_removed_from_name\",\n+                                                        | \"unsafe_removed_from_name\"\n+                                                        | \"module_name_repetitions\"\n+                                                        | \"single_component_path_imports\"\n                                                 )\n                                             })\n                                         {"}, {"sha": "3ab5031696d53c365f282a5d552ea1c7a59a5ec8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -792,7 +792,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n     store.register_early_pass(|| Box::new(as_conversions::AsConversions));\n     store.register_late_pass(|_| Box::new(let_underscore::LetUnderscore));\n-    store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n+    store.register_early_pass(|| Box::<single_component_path_imports::SingleComponentPathImports>::default());\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_late_pass(move |_| {"}, {"sha": "2036e85db7e8ca73f5f73e80cbfa570498016131", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 127, "deletions": 92, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n declare_clippy_lint! {\n@@ -33,51 +34,32 @@ declare_clippy_lint! {\n     \"imports with single component path are redundant\"\n }\n \n-declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n+#[derive(Default)]\n+pub struct SingleComponentPathImports {\n+    /// Buffer found usages to emit when visiting that item so that `#[allow]` works as expected\n+    found: NodeMap<Vec<SingleUse>>,\n+}\n+\n+struct SingleUse {\n+    name: Symbol,\n+    span: Span,\n+    item_id: NodeId,\n+    can_suggest: bool,\n+}\n+\n+impl_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n \n impl EarlyLintPass for SingleComponentPathImports {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n         if cx.sess().opts.edition < Edition::Edition2018 {\n             return;\n         }\n-        check_mod(cx, &krate.items);\n-    }\n-}\n \n-fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n-    // keep track of imports reused with `self` keyword,\n-    // such as `self::crypto_hash` in the example below\n-    // ```rust,ignore\n-    // use self::crypto_hash::{Algorithm, Hasher};\n-    // ```\n-    let mut imports_reused_with_self = Vec::new();\n-\n-    // keep track of single use statements\n-    // such as `crypto_hash` in the example below\n-    // ```rust,ignore\n-    // use crypto_hash;\n-    // ```\n-    let mut single_use_usages = Vec::new();\n-\n-    // keep track of macros defined in the module as we don't want it to trigger on this (#7106)\n-    // ```rust,ignore\n-    // macro_rules! foo { () => {} };\n-    // pub(crate) use foo;\n-    // ```\n-    let mut macros = Vec::new();\n-\n-    for item in items {\n-        track_uses(\n-            cx,\n-            item,\n-            &mut imports_reused_with_self,\n-            &mut single_use_usages,\n-            &mut macros,\n-        );\n+        self.check_mod(cx, &krate.items);\n     }\n \n-    for (name, span, can_suggest) in single_use_usages {\n-        if !imports_reused_with_self.contains(&name) {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        for SingleUse { span, can_suggest, .. } in self.found.remove(&item.id).into_iter().flatten() {\n             if can_suggest {\n                 span_lint_and_sugg(\n                     cx,\n@@ -102,74 +84,127 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n     }\n }\n \n-fn track_uses(\n-    cx: &EarlyContext<'_>,\n-    item: &Item,\n-    imports_reused_with_self: &mut Vec<Symbol>,\n-    single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n-    macros: &mut Vec<Symbol>,\n-) {\n-    if item.span.from_expansion() || item.vis.kind.is_pub() {\n-        return;\n-    }\n+impl SingleComponentPathImports {\n+    fn check_mod(&mut self, cx: &EarlyContext<'_>, items: &[P<Item>]) {\n+        // keep track of imports reused with `self` keyword, such as `self::crypto_hash` in the example\n+        // below. Removing the `use crypto_hash;` would make this a compile error\n+        // ```\n+        // use crypto_hash;\n+        //\n+        // use self::crypto_hash::{Algorithm, Hasher};\n+        // ```\n+        let mut imports_reused_with_self = Vec::new();\n \n-    match &item.kind {\n-        ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n-            check_mod(cx, items);\n-        },\n-        ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n-            macros.push(item.ident.name);\n-        },\n-        ItemKind::Use(use_tree) => {\n-            let segments = &use_tree.prefix.segments;\n-\n-            // keep track of `use some_module;` usages\n-            if segments.len() == 1 {\n-                if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n-                    let name = segments[0].ident.name;\n-                    if !macros.contains(&name) {\n-                        single_use_usages.push((name, item.span, true));\n-                    }\n-                }\n-                return;\n+        // keep track of single use statements such as `crypto_hash` in the example below\n+        // ```\n+        // use crypto_hash;\n+        // ```\n+        let mut single_use_usages = Vec::new();\n+\n+        // keep track of macros defined in the module as we don't want it to trigger on this (#7106)\n+        // ```\n+        // macro_rules! foo { () => {} };\n+        // pub(crate) use foo;\n+        // ```\n+        let mut macros = Vec::new();\n+\n+        for item in items {\n+            self.track_uses(\n+                cx,\n+                item,\n+                &mut imports_reused_with_self,\n+                &mut single_use_usages,\n+                &mut macros,\n+            );\n+        }\n+\n+        for usage in single_use_usages {\n+            if !imports_reused_with_self.contains(&usage.name) {\n+                self.found.entry(usage.item_id).or_default().push(usage);\n             }\n+        }\n+    }\n \n-            if segments.is_empty() {\n-                // keep track of `use {some_module, some_other_module};` usages\n-                if let UseTreeKind::Nested(trees) = &use_tree.kind {\n-                    for tree in trees {\n-                        let segments = &tree.0.prefix.segments;\n-                        if segments.len() == 1 {\n-                            if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n-                                let name = segments[0].ident.name;\n-                                if !macros.contains(&name) {\n-                                    single_use_usages.push((name, tree.0.span, false));\n-                                }\n-                            }\n+    fn track_uses(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        item: &Item,\n+        imports_reused_with_self: &mut Vec<Symbol>,\n+        single_use_usages: &mut Vec<SingleUse>,\n+        macros: &mut Vec<Symbol>,\n+    ) {\n+        if item.span.from_expansion() || item.vis.kind.is_pub() {\n+            return;\n+        }\n+\n+        match &item.kind {\n+            ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n+                self.check_mod(cx, items);\n+            },\n+            ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n+                macros.push(item.ident.name);\n+            },\n+            ItemKind::Use(use_tree) => {\n+                let segments = &use_tree.prefix.segments;\n+\n+                // keep track of `use some_module;` usages\n+                if segments.len() == 1 {\n+                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                        let name = segments[0].ident.name;\n+                        if !macros.contains(&name) {\n+                            single_use_usages.push(SingleUse {\n+                                name,\n+                                span: item.span,\n+                                item_id: item.id,\n+                                can_suggest: true,\n+                            });\n                         }\n                     }\n+                    return;\n                 }\n-            } else {\n-                // keep track of `use self::some_module` usages\n-                if segments[0].ident.name == kw::SelfLower {\n-                    // simple case such as `use self::module::SomeStruct`\n-                    if segments.len() > 1 {\n-                        imports_reused_with_self.push(segments[1].ident.name);\n-                        return;\n-                    }\n \n-                    // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                if segments.is_empty() {\n+                    // keep track of `use {some_module, some_other_module};` usages\n                     if let UseTreeKind::Nested(trees) = &use_tree.kind {\n                         for tree in trees {\n                             let segments = &tree.0.prefix.segments;\n-                            if !segments.is_empty() {\n-                                imports_reused_with_self.push(segments[0].ident.name);\n+                            if segments.len() == 1 {\n+                                if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                    let name = segments[0].ident.name;\n+                                    if !macros.contains(&name) {\n+                                        single_use_usages.push(SingleUse {\n+                                            name,\n+                                            span: tree.0.span,\n+                                            item_id: item.id,\n+                                            can_suggest: false,\n+                                        });\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // keep track of `use self::some_module` usages\n+                    if segments[0].ident.name == kw::SelfLower {\n+                        // simple case such as `use self::module::SomeStruct`\n+                        if segments.len() > 1 {\n+                            imports_reused_with_self.push(segments[1].ident.name);\n+                            return;\n+                        }\n+\n+                        // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                        if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                            for tree in trees {\n+                                let segments = &tree.0.prefix.segments;\n+                                if !segments.is_empty() {\n+                                    imports_reused_with_self.push(segments[0].ident.name);\n+                                }\n                             }\n                         }\n                     }\n                 }\n-            }\n-        },\n-        _ => {},\n+            },\n+            _ => {},\n+        }\n     }\n }"}, {"sha": "71dcc25d6e5b8bd0c3a31cc138074cdb8f96befd", "filename": "tests/ui/single_component_path_imports.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fsingle_component_path_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fsingle_component_path_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.stderr?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,16 +1,16 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:23:5\n+  --> $DIR/single_component_path_imports.rs:5:1\n    |\n-LL |     use regex;\n-   |     ^^^^^^^^^^ help: remove it entirely\n+LL | use regex;\n+   | ^^^^^^^^^^ help: remove it entirely\n    |\n    = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:5:1\n+  --> $DIR/single_component_path_imports.rs:23:5\n    |\n-LL | use regex;\n-   | ^^^^^^^^^^ help: remove it entirely\n+LL |     use regex;\n+   |     ^^^^^^^^^^ help: remove it entirely\n \n error: aborting due to 2 previous errors\n "}, {"sha": "330f285202d0c6a4a4747610dd68baf820b9e518", "filename": "tests/ui/single_component_path_imports_nested_first.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,11 +1,18 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:4:1\n+   |\n+LL | use regex;\n+   | ^^^^^^^^^^ help: remove it entirely\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+\n error: this import is redundant\n   --> $DIR/single_component_path_imports_nested_first.rs:13:10\n    |\n LL |     use {regex, serde};\n    |          ^^^^^\n    |\n    = help: remove this import\n-   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n   --> $DIR/single_component_path_imports_nested_first.rs:13:17\n@@ -15,11 +22,5 @@ LL |     use {regex, serde};\n    |\n    = help: remove this import\n \n-error: this import is redundant\n-  --> $DIR/single_component_path_imports_nested_first.rs:4:1\n-   |\n-LL | use regex;\n-   | ^^^^^^^^^^ help: remove it entirely\n-\n error: aborting due to 3 previous errors\n "}, {"sha": "871e4fb5c3a9fad8fd815758892f08ffd01423d8", "filename": "tests/ui/useless_attribute.fixed", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.fixed?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n+#![allow(unused)]\n #![warn(clippy::useless_attribute)]\n #![warn(unreachable_pub)]\n #![feature(rustc_private)]\n@@ -16,6 +17,13 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate proc_macro_derive;\n \n+fn test_indented_attr() {\n+    #![allow(clippy::almost_swapped)]\n+    use std::collections::HashSet;\n+\n+    let _ = HashSet::<u32>::default();\n+}\n+\n // don't lint on unused_import for `use` items\n #[allow(unused_imports)]\n use std::collections;\n@@ -63,13 +71,16 @@ mod c {\n     pub(crate) struct S;\n }\n \n-fn test_indented_attr() {\n-    #![allow(clippy::almost_swapped)]\n-    use std::collections::HashSet;\n-\n-    let _ = HashSet::<u32>::default();\n+// https://github.com/rust-lang/rust-clippy/issues/7511\n+pub mod split {\n+    #[allow(clippy::module_name_repetitions)]\n+    pub use regex::SplitN;\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/8768\n+#[allow(clippy::single_component_path_imports)]\n+use regex;\n+\n fn main() {\n     test_indented_attr();\n }"}, {"sha": "cb50736ba395a8aed5e295e98d653339a7408920", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:proc_macro_derive.rs\n \n+#![allow(unused)]\n #![warn(clippy::useless_attribute)]\n #![warn(unreachable_pub)]\n #![feature(rustc_private)]\n@@ -16,6 +17,13 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate proc_macro_derive;\n \n+fn test_indented_attr() {\n+    #[allow(clippy::almost_swapped)]\n+    use std::collections::HashSet;\n+\n+    let _ = HashSet::<u32>::default();\n+}\n+\n // don't lint on unused_import for `use` items\n #[allow(unused_imports)]\n use std::collections;\n@@ -63,13 +71,16 @@ mod c {\n     pub(crate) struct S;\n }\n \n-fn test_indented_attr() {\n-    #[allow(clippy::almost_swapped)]\n-    use std::collections::HashSet;\n-\n-    let _ = HashSet::<u32>::default();\n+// https://github.com/rust-lang/rust-clippy/issues/7511\n+pub mod split {\n+    #[allow(clippy::module_name_repetitions)]\n+    pub use regex::SplitN;\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/8768\n+#[allow(clippy::single_component_path_imports)]\n+use regex;\n+\n fn main() {\n     test_indented_attr();\n }"}, {"sha": "a7ea0df22945a192556c7ddc77cd2a56b1c2b60a", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d445ced166b57f304b19d9e2bcd45336a96a8705/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=d445ced166b57f304b19d9e2bcd45336a96a8705", "patch": "@@ -1,19 +1,19 @@\n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:8:1\n+  --> $DIR/useless_attribute.rs:9:1\n    |\n LL | #[allow(dead_code)]\n    | ^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(dead_code)]`\n    |\n    = note: `-D clippy::useless-attribute` implied by `-D warnings`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:9:1\n+  --> $DIR/useless_attribute.rs:10:1\n    |\n LL | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:67:5\n+  --> $DIR/useless_attribute.rs:21:5\n    |\n LL |     #[allow(clippy::almost_swapped)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(clippy::almost_swapped)]`"}]}