{"sha": "aebd0d733940d62566c66a923c7b9f7078209e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmQwZDczMzk0MGQ2MjU2NmM2NmE5MjNjN2I5ZjcwNzgyMDllOTg=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-01-27T18:08:53Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-01-28T13:19:44Z"}, "message": "Add capacity to BufReader with same unstable gate", "tree": {"sha": "2c2510386d451f53a598a303710992ba1a869996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2510386d451f53a598a303710992ba1a869996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebd0d733940d62566c66a923c7b9f7078209e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebd0d733940d62566c66a923c7b9f7078209e98", "html_url": "https://github.com/rust-lang/rust/commit/aebd0d733940d62566c66a923c7b9f7078209e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebd0d733940d62566c66a923c7b9f7078209e98/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ae565ed4f1b2a7cc754d4cf0af520b5e6841b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ae565ed4f1b2a7cc754d4cf0af520b5e6841b9", "html_url": "https://github.com/rust-lang/rust/commit/47ae565ed4f1b2a7cc754d4cf0af520b5e6841b9"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "6739d4498a6bee522aa8bdb85646cefe88368227", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aebd0d733940d62566c66a923c7b9f7078209e98/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebd0d733940d62566c66a923c7b9f7078209e98/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=aebd0d733940d62566c66a923c7b9f7078209e98", "patch": "@@ -179,6 +179,30 @@ impl<R> BufReader<R> {\n         &self.buf[self.pos..self.cap]\n     }\n \n+    /// Returns the number of bytes the internal buffer can hold at once.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(buffered_io_capacity)]\n+    /// use std::io::{BufReader, BufRead};\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::open(\"log.txt\")?;\n+    ///     let mut reader = BufReader::new(f);\n+    ///\n+    ///     let capacity = reader.capacity();\n+    ///     let buffer = reader.fill_buf()?;\n+    ///     assert!(buffer.len() <= capacity);\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n+    pub fn capacity(&self) -> usize {\n+        self.buf.len()\n+    }\n+\n     /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost. Therefore,\n@@ -581,6 +605,7 @@ impl<W: Write> BufWriter<W> {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// #![feature(buffered_io_capacity)]\n     /// use std::io::BufWriter;\n     /// use std::net::TcpStream;\n     ///\n@@ -591,6 +616,7 @@ impl<W: Write> BufWriter<W> {\n     /// // Calculate how many bytes can be written without flushing\n     /// let without_flush = capacity - buf_writer.buffer().len();\n     /// ```\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n     pub fn capacity(&self) -> usize {\n         self.buf.capacity()\n     }"}]}