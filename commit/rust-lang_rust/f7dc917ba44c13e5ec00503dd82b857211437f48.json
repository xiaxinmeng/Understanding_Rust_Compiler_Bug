{"sha": "f7dc917ba44c13e5ec00503dd82b857211437f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZGM5MTdiYTQ0YzEzZTVlYzAwNTAzZGQ4MmI4NTcyMTE0MzdmNDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-11T05:26:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-11-11T20:23:37Z"}, "message": "Add -Zinput-stats\n\nEmits loc, and node count - before and after expansion.\n\nE.g.,\n\n```\nrustc: x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore\nLines of code:             32060\nPre-expansion node count:  120205\nPost-expansion node count: 482749\n```", "tree": {"sha": "4bc5443e5f6fa40d48822b3b66bd4e4e7d93ff03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc5443e5f6fa40d48822b3b66bd4e4e7d93ff03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7dc917ba44c13e5ec00503dd82b857211437f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7dc917ba44c13e5ec00503dd82b857211437f48", "html_url": "https://github.com/rust-lang/rust/commit/f7dc917ba44c13e5ec00503dd82b857211437f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7dc917ba44c13e5ec00503dd82b857211437f48/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f5c04c07f2e888c43cb577810659a7c1d87a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f5c04c07f2e888c43cb577810659a7c1d87a00", "html_url": "https://github.com/rust-lang/rust/commit/f1f5c04c07f2e888c43cb577810659a7c1d87a00"}], "stats": {"total": 244, "additions": 218, "deletions": 26}, "files": [{"sha": "808a63982c263ad10bc74e926763c78c06ed4e08", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f7dc917ba44c13e5ec00503dd82b857211437f48", "patch": "@@ -510,7 +510,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n          2 = full debug info with variable and type information\"),\n     opt_level: Option<usize> = (None, parse_opt_uint,\n-        \"Optimize with possible levels 0-3\"),\n+        \"optimize with possible levels 0-3\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n }\n@@ -527,6 +527,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"count where LLVM instrs originate\"),\n     time_llvm_passes: bool = (false, parse_bool,\n         \"measure time of each LLVM pass\"),\n+    input_stats: bool = (false, parse_bool,\n+        \"gather statistics about the input\"),\n     trans_stats: bool = (false, parse_bool,\n         \"gather trans statistics\"),\n     asm_comments: bool = (false, parse_bool,\n@@ -544,56 +546,56 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     meta_stats: bool = (false, parse_bool,\n         \"gather metadata statistics\"),\n     print_link_args: bool = (false, parse_bool,\n-        \"Print the arguments passed to the linker\"),\n+        \"print the arguments passed to the linker\"),\n     gc: bool = (false, parse_bool,\n-        \"Garbage collect shared data (experimental)\"),\n+        \"garbage collect shared data (experimental)\"),\n     print_llvm_passes: bool = (false, parse_bool,\n-        \"Prints the llvm optimization passes being run\"),\n+        \"prints the llvm optimization passes being run\"),\n     ast_json: bool = (false, parse_bool,\n-        \"Print the AST as JSON and halt\"),\n+        \"print the AST as JSON and halt\"),\n     ast_json_noexpand: bool = (false, parse_bool,\n-        \"Print the pre-expansion AST as JSON and halt\"),\n+        \"print the pre-expansion AST as JSON and halt\"),\n     ls: bool = (false, parse_bool,\n-        \"List the symbols defined by a library crate\"),\n+        \"list the symbols defined by a library crate\"),\n     save_analysis: bool = (false, parse_bool,\n-        \"Write syntax and type analysis information in addition to normal output\"),\n+        \"write syntax and type analysis information in addition to normal output\"),\n     print_move_fragments: bool = (false, parse_bool,\n-        \"Print out move-fragment data for every fn\"),\n+        \"print out move-fragment data for every fn\"),\n     flowgraph_print_loans: bool = (false, parse_bool,\n-        \"Include loan analysis data in --unpretty flowgraph output\"),\n+        \"include loan analysis data in --unpretty flowgraph output\"),\n     flowgraph_print_moves: bool = (false, parse_bool,\n-        \"Include move analysis data in --unpretty flowgraph output\"),\n+        \"include move analysis data in --unpretty flowgraph output\"),\n     flowgraph_print_assigns: bool = (false, parse_bool,\n-        \"Include assignment analysis data in --unpretty flowgraph output\"),\n+        \"include assignment analysis data in --unpretty flowgraph output\"),\n     flowgraph_print_all: bool = (false, parse_bool,\n-        \"Include all dataflow analysis data in --unpretty flowgraph output\"),\n+        \"include all dataflow analysis data in --unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool,\n-         \"Prints region inference graph. \\\n+         \"prints region inference graph. \\\n           Use with RUST_REGION_GRAPH=help for more info\"),\n     parse_only: bool = (false, parse_bool,\n-          \"Parse only; do not compile, assemble, or link\"),\n+          \"parse only; do not compile, assemble, or link\"),\n     no_trans: bool = (false, parse_bool,\n-          \"Run all passes except translation; no output\"),\n+          \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool,\n-          \"Treat all errors that occur as bugs\"),\n+          \"treat all errors that occur as bugs\"),\n     no_analysis: bool = (false, parse_bool,\n-          \"Parse and expand the source, but run no analysis\"),\n+          \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list,\n         \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool,\n-          \"Adds unstable command line options to rustc interface\"),\n+          \"adds unstable command line options to rustc interface\"),\n     print_enum_sizes: bool = (false, parse_bool,\n-          \"Print the size of enums and their variants\"),\n+          \"print the size of enums and their variants\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool,\n-          \"Force overflow checks on or off\"),\n+          \"force overflow checks on or off\"),\n     force_dropflag_checks: Option<bool> = (None, parse_opt_bool,\n-          \"Force drop flag checks on or off\"),\n+          \"force drop flag checks on or off\"),\n     trace_macros: bool = (false, parse_bool,\n-          \"For every macro invocation, print its name and arguments\"),\n+          \"for every macro invocation, print its name and arguments\"),\n     enable_nonzeroing_move_hints: bool = (false, parse_bool,\n-          \"Force nonzeroing move optimization on\"),\n+          \"force nonzeroing move optimization on\"),\n     keep_mtwt_tables: bool = (false, parse_bool,\n-          \"Don't clear the resolution tables after analysis\"),\n+          \"don't clear the resolution tables after analysis\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "def8d3bc4044e62d00b7ec94a8c8cbd541982eda", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f7dc917ba44c13e5ec00503dd82b857211437f48", "patch": "@@ -52,6 +52,8 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::fold::Folder;\n use syntax::parse;\n use syntax::parse::token;\n+use syntax::util::node_count::NodeCounter;\n+use syntax::visit;\n use syntax;\n \n pub fn compile_input(sess: Session,\n@@ -398,13 +400,24 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n+    if sess.opts.debugging_opts.input_stats {\n+        println!(\"Lines of code:             {}\", sess.codemap().count_lines());\n+        println!(\"Pre-expansion node count:  {}\", count_nodes(&krate));\n+    }\n+\n     if let Some(ref s) = sess.opts.show_span {\n         syntax::show_span::run(sess.diagnostic(), s, &krate);\n     }\n \n     krate\n }\n \n+fn count_nodes(krate: &ast::Crate) -> usize {\n+    let mut counter = NodeCounter::new();\n+    visit::walk_crate(&mut counter, krate);\n+    counter.count\n+}\n+\n // For continuing compilation after a parsed crate has been\n // modified\n \n@@ -606,6 +619,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         sess.abort_if_errors();\n     });\n \n+    if sess.opts.debugging_opts.input_stats {\n+        println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n+    }\n+\n     Some(krate)\n }\n "}, {"sha": "db011265c7379fa7e5d74b8b32b03638db9a3303", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f7dc917ba44c13e5ec00503dd82b857211437f48", "patch": "@@ -559,6 +559,10 @@ impl FileMap {\n     pub fn is_imported(&self) -> bool {\n         self.src.is_none()\n     }\n+\n+    fn count_lines(&self) -> usize {\n+        self.lines.borrow().len()\n+    }\n }\n \n /// An abstraction over the fs operations used by the Parser.\n@@ -1021,6 +1025,10 @@ impl CodeMap {\n         debug!(\"span_allows_unstable? {}\", allows_unstable);\n         allows_unstable\n     }\n+\n+    pub fn count_lines(&self) -> usize {\n+        self.files.borrow().iter().fold(0, |a, f| a + f.count_lines())\n+    }\n }\n \n // _____________________________________________________________________________"}, {"sha": "524ac655d884467ea775d4178ac182a4968397f6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f7dc917ba44c13e5ec00503dd82b857211437f48", "patch": "@@ -62,10 +62,11 @@ macro_rules! panictry {\n \n pub mod util {\n     pub mod interner;\n+    pub mod node_count;\n+    pub mod parser;\n     #[cfg(test)]\n     pub mod parser_testing;\n     pub mod small_vector;\n-    pub mod parser;\n }\n \n pub mod diagnostics {"}, {"sha": "e692ec4452cdd4ed4cb448e80f3b75502fbf7ab3", "filename": "src/libsyntax/util/node_count.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7dc917ba44c13e5ec00503dd82b857211437f48/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=f7dc917ba44c13e5ec00503dd82b857211437f48", "patch": "@@ -0,0 +1,164 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Simply gives a rought count of the number of nodes in an AST.\n+\n+use visit::*;\n+use ast::*;\n+use codemap::Span;\n+\n+pub struct NodeCounter {\n+    pub count: usize,\n+}\n+\n+impl NodeCounter {\n+    pub fn new() -> NodeCounter {\n+        NodeCounter {\n+            count: 0,\n+        }\n+    }\n+}\n+\n+impl<'v> Visitor<'v> for NodeCounter {\n+    fn visit_ident(&mut self, span: Span, ident: Ident) {\n+        self.count += 1;\n+        walk_ident(self, span, ident);\n+    }\n+    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) {\n+        self.count += 1;\n+        walk_mod(self, m)\n+    }\n+    fn visit_foreign_item(&mut self, i: &'v ForeignItem) {\n+        self.count += 1;\n+        walk_foreign_item(self, i)\n+    }\n+    fn visit_item(&mut self, i: &'v Item) {\n+        self.count += 1;\n+        walk_item(self, i)\n+    }\n+    fn visit_local(&mut self, l: &'v Local) {\n+        self.count += 1;\n+        walk_local(self, l)\n+    }\n+    fn visit_block(&mut self, b: &'v Block) {\n+        self.count += 1;\n+        walk_block(self, b)\n+    }\n+    fn visit_stmt(&mut self, s: &'v Stmt) {\n+        self.count += 1;\n+        walk_stmt(self, s)\n+    }\n+    fn visit_arm(&mut self, a: &'v Arm) {\n+        self.count += 1;\n+        walk_arm(self, a)\n+    }\n+    fn visit_pat(&mut self, p: &'v Pat) {\n+        self.count += 1;\n+        walk_pat(self, p)\n+    }\n+    fn visit_decl(&mut self, d: &'v Decl) {\n+        self.count += 1;\n+        walk_decl(self, d)\n+    }\n+    fn visit_expr(&mut self, ex: &'v Expr) {\n+        self.count += 1;\n+        walk_expr(self, ex)\n+    }\n+    fn visit_ty(&mut self, t: &'v Ty) {\n+        self.count += 1;\n+        walk_ty(self, t)\n+    }\n+    fn visit_generics(&mut self, g: &'v Generics) {\n+        self.count += 1;\n+        walk_generics(self, g)\n+    }\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n+        self.count += 1;\n+        walk_fn(self, fk, fd, b, s)\n+    }\n+    fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n+        self.count += 1;\n+        walk_trait_item(self, ti)\n+    }\n+    fn visit_impl_item(&mut self, ii: &'v ImplItem) {\n+        self.count += 1;\n+        walk_impl_item(self, ii)\n+    }\n+    fn visit_trait_ref(&mut self, t: &'v TraitRef) {\n+        self.count += 1;\n+        walk_trait_ref(self, t)\n+    }\n+    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n+        self.count += 1;\n+        walk_ty_param_bound(self, bounds)\n+    }\n+    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n+        self.count += 1;\n+        walk_poly_trait_ref(self, t, m)\n+    }\n+    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,\n+                        _: &'v Generics, _: NodeId, _: Span) {\n+        self.count += 1;\n+        walk_struct_def(self, s)\n+    }\n+    fn visit_struct_field(&mut self, s: &'v StructField) {\n+        self.count += 1;\n+        walk_struct_field(self, s)\n+    }\n+    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,\n+                      generics: &'v Generics, item_id: NodeId, _: Span) {\n+        self.count += 1;\n+        walk_enum_def(self, enum_definition, generics, item_id)\n+    }\n+    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) {\n+        self.count += 1;\n+        walk_variant(self, v, g, item_id)\n+    }\n+    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n+        self.count += 1;\n+        walk_lifetime(self, lifetime)\n+    }\n+    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) {\n+        self.count += 1;\n+        walk_lifetime_def(self, lifetime)\n+    }\n+    fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) {\n+        self.count += 1;\n+        walk_explicit_self(self, es)\n+    }\n+    fn visit_mac(&mut self, _mac: &'v Mac) {\n+        self.count += 1;\n+        walk_mac(self, _mac)\n+    }\n+    fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n+        self.count += 1;\n+        walk_path(self, path)\n+    }\n+    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n+        self.count += 1;\n+        walk_path_list_item(self, prefix, item)\n+    }\n+    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) {\n+        self.count += 1;\n+        walk_path_parameters(self, path_span, path_parameters)\n+    }\n+    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) {\n+        self.count += 1;\n+        walk_assoc_type_binding(self, type_binding)\n+    }\n+    fn visit_attribute(&mut self, _attr: &'v Attribute) {\n+        self.count += 1;\n+    }\n+    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n+        self.count += 1;\n+        walk_macro_def(self, macro_def)\n+    }\n+\n+}"}]}