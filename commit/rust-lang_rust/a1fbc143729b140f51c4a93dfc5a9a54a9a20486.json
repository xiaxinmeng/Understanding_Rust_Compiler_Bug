{"sha": "a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "node_id": "C_kwDOAAsO6NoAKGExZmJjMTQzNzI5YjE0MGY1MWM0YTkzZGZjNWE5YTU0YTlhMjA0ODY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-05T19:06:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-05T19:11:31Z"}, "message": "Point at GAT where clause when unsatisfied", "tree": {"sha": "eded30f78d276349a1c5a963efda449eca0b98da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eded30f78d276349a1c5a963efda449eca0b98da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "html_url": "https://github.com/rust-lang/rust/commit/a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1449560e31f7f801d81268a3dad783181656dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1449560e31f7f801d81268a3dad783181656dff", "html_url": "https://github.com/rust-lang/rust/commit/d1449560e31f7f801d81268a3dad783181656dff"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "71f6eae45aa542963bd3a64d7a5e2c9821df3d2d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "patch": "@@ -2321,11 +2321,10 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n     nested: &mut Vec<PredicateObligation<'tcx>>,\n ) {\n     let tcx = selcx.tcx();\n-    for predicate in tcx\n+    let own = tcx\n         .predicates_of(obligation.predicate.item_def_id)\n-        .instantiate_own(tcx, obligation.predicate.substs)\n-        .predicates\n-    {\n+        .instantiate_own(tcx, obligation.predicate.substs);\n+    for (predicate, span) in std::iter::zip(own.predicates, own.spans) {\n         let normalized = normalize_with_depth_to(\n             selcx,\n             obligation.param_env,\n@@ -2334,9 +2333,30 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n             predicate,\n             nested,\n         );\n+\n+        let nested_cause = if matches!(\n+            obligation.cause.code(),\n+            super::CompareImplItemObligation { .. }\n+                | super::CheckAssociatedTypeBounds { .. }\n+                | super::AscribeUserTypeProvePredicate(..)\n+        ) {\n+            obligation.cause.clone()\n+        } else if span.is_dummy() {\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                super::ItemObligation(obligation.predicate.item_def_id),\n+            )\n+        } else {\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                super::BindingObligation(obligation.predicate.item_def_id, span),\n+            )\n+        };\n         nested.push(Obligation::with_depth(\n             tcx,\n-            obligation.cause.clone(),\n+            nested_cause,\n             obligation.recursion_depth + 1,\n             obligation.param_env,\n             normalized,"}, {"sha": "3699f7296f5d0ac08e5b129ccd716aa4b93d7d6e", "filename": "src/test/ui/generic-associated-types/own-bound-span.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.rs?ref=a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "patch": "@@ -0,0 +1,17 @@\n+struct S;\n+\n+trait D {\n+    type P<T: Copy>;\n+    //~^ NOTE required by this bound in `D::P`\n+    //~| NOTE required by a bound in `D::P`\n+}\n+\n+impl D for S {\n+    type P<T: Copy> = ();\n+}\n+\n+fn main() {\n+    let _: <S as D>::P<String>;\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied\n+    //~| NOTE the trait `Copy` is not implemented for `String`\n+}"}, {"sha": "8ab8ea623b2c93d674d096da4b55fe3f19c923c5", "filename": "src/test/ui/generic-associated-types/own-bound-span.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fown-bound-span.stderr?ref=a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/own-bound-span.rs:14:12\n+   |\n+LL |     let _: <S as D>::P<String>;\n+   |            ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by a bound in `D::P`\n+  --> $DIR/own-bound-span.rs:4:15\n+   |\n+LL |     type P<T: Copy>;\n+   |               ^^^^ required by this bound in `D::P`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f05b0cd65381b5bd399262e3d025f444ac506f12", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-GAT.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1fbc143729b140f51c4a93dfc5a9a54a9a20486/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr?ref=a1fbc143729b140f51c4a93dfc5a9a54a9a20486", "patch": "@@ -3,10 +3,10 @@ error[E0311]: the parameter type `Self` may not live long enough\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/object-safety-supertrait-mentions-GAT.rs:9:39\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:6:15\n    |\n-LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n-   |                                       ^^^^^^^^^^^\n+LL |         Self: 'a;\n+   |               ^^\n \n error: associated item referring to unboxed trait object for its own trait\n   --> $DIR/object-safety-supertrait-mentions-GAT.rs:10:20"}]}