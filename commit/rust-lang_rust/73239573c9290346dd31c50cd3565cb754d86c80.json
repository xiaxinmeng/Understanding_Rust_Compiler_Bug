{"sha": "73239573c9290346dd31c50cd3565cb754d86c80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjM5NTczYzkyOTAzNDZkZDMxYzUwY2QzNTY1Y2I3NTRkODZjODA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-07T22:17:43Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-07T23:26:20Z"}, "message": "Implement non-deterministc mode\n\nPart of #653\n\nThis allows us to properly implement getrandom(),\nwhich unlocks the default HashMap type (e.g. HashMap<K, V>)\nwith RandomState)\n\nThis commit adds a new '-Zmiri-seed=<seed>' option. When present,\nthis option takes a 64-bit hex value, which is used as the seed\nto an internal PRNG. This PRNG is used to implement the 'getrandom()'\nsyscall.\n\nWhen '-Zmiri-seed' is not passed, 'getrandom()' will be disabled.", "tree": {"sha": "e2d7b10d7588b5203996d3e4e7ff29c2b9b23ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d7b10d7588b5203996d3e4e7ff29c2b9b23ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73239573c9290346dd31c50cd3565cb754d86c80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyqhx4ACgkQtAh+UQ6Y\nsWSwbw/8DFZ8mLv+mVFhXJ6qcIVzGvsd2nxWm72Wr280+yQ06GGsmkCCHtwfglSu\nXdG8A7nhI/ZnUgRY0pxWzyMMq5AveQw0UFpTtMXK7g8np6BRQHb1h7xDnko0anOI\nTdDoIHIzB2Y8E/dclc6XXe2snGVVJsYxVbUUR3gogUF7LyReSfl1w4aWvnecjouk\nehsk+CzL2+NG4ig1wZQm6ky+uk88/qEu+k+5OyFD0P87+DabYaaOEtHaBnj45Ibz\ny54E5Vl6YDhzPIYDsqmS0p7SSy+NHL+9BRzqDh5tXP6U4Zw0HNznR27r/Px9dtlD\nMq75Im+5V9f5db2ei+n3Nmla276zumKHEExoXs62hOfyDTF9qSvDVnPApxU/2NeM\nIAsyVsTZwX/n0BO5AY4zNDIlGTgcZ5G78BIC0o0h0Vt4ohlMvpYoGRgtAP1f8XGB\nF779pjtLh+xWeXwlJlzLCqEDizNyHackLJBC/uWzepIMTukEJXP+JG0JTMa087B/\n7XLNWISmM9vntd5t3juom+Xb5+NHc5tDkdqBlSjIU5KMRscSx3FjhOGxWBW0wy4X\nYvcB3T++8GIfhxXaAnFihZjT+lmt3GCZmA+pYhkT882ex8e2MYTcVRMKsmMW6FHF\nVIIkOkUbYepjs6P1SPWV4idIa3PuaKM9HCLzcNyLfbXGZ3Q3kZM=\n=USil\n-----END PGP SIGNATURE-----", "payload": "tree e2d7b10d7588b5203996d3e4e7ff29c2b9b23ceb\nparent 68711458b6bc28e7a5e4236a4027355476d23a19\nauthor Aaron Hill <aa1ronham@gmail.com> 1554675463 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1554679580 -0400\n\nImplement non-deterministc mode\n\nPart of #653\n\nThis allows us to properly implement getrandom(),\nwhich unlocks the default HashMap type (e.g. HashMap<K, V>)\nwith RandomState)\n\nThis commit adds a new '-Zmiri-seed=<seed>' option. When present,\nthis option takes a 64-bit hex value, which is used as the seed\nto an internal PRNG. This PRNG is used to implement the 'getrandom()'\nsyscall.\n\nWhen '-Zmiri-seed' is not passed, 'getrandom()' will be disabled.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73239573c9290346dd31c50cd3565cb754d86c80", "html_url": "https://github.com/rust-lang/rust/commit/73239573c9290346dd31c50cd3565cb754d86c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73239573c9290346dd31c50cd3565cb754d86c80/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68711458b6bc28e7a5e4236a4027355476d23a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/68711458b6bc28e7a5e4236a4027355476d23a19", "html_url": "https://github.com/rust-lang/rust/commit/68711458b6bc28e7a5e4236a4027355476d23a19"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "6c77315bea48b238cfe1512b8a405bc672f1f682", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -44,6 +44,8 @@ shell-escape = \"0.1.4\"\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n+hex = \"0.3.2\"\n+rand = \"0.6.5\"\n \n [build-dependencies]\n vergen = \"3\""}, {"sha": "ce2ad1a2715db8527cf8201635a4526ce8a9cd69", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -48,7 +48,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n                             if i.attrs.iter().any(|attr| attr.check_name(\"test\")) {\n-                                let config = MiriConfig { validate: true, args: vec![] };\n+                                let config = MiriConfig { validate: true, args: vec![], seed: None };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -61,7 +61,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 }\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-                let config = MiriConfig { validate: true, args: vec![] };\n+                let config = MiriConfig { validate: true, args: vec![], seed: None };\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "7f15d00e2c8abd5ab71b2080c5432d6e7665dc41", "filename": "src/bin/miri.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -126,6 +126,7 @@ fn main() {\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n+    let mut seed: Option<u64> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -146,7 +147,22 @@ fn main() {\n                     after_dashdash = true;\n                 }\n                 _ => {\n-                    rustc_args.push(arg);\n+                    let split: Vec<String> = arg.split(\"-Zmiri-seed=\").map(|s| s.to_owned()).collect();\n+                    if split.len() == 2 {\n+                        if seed.is_some() {\n+                            panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n+                        }\n+                        let seed_raw = hex::decode(&split[1]).unwrap();\n+                        if seed_raw.len() > 8 {\n+                            panic!(format!(\"-Zmiri-seed must be at most 8 bytes, was {}\", seed_raw.len()));\n+                        }\n+\n+                        let mut bytes = [0; 8];\n+                        bytes[..seed_raw.len()].copy_from_slice(&hex::decode(&split[1]).unwrap());\n+                        seed = Some(u64::from_be_bytes(bytes));\n+                    } else {\n+                        rustc_args.push(arg);\n+                    }\n                 }\n             }\n         }\n@@ -163,7 +179,7 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"miri arguments: {:?}\", miri_args);\n-    let miri_config = miri::MiriConfig { validate, args: miri_args };\n+    let miri_config = miri::MiriConfig { validate, args: miri_args, seed };\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n     }).and_then(|result| result);"}, {"sha": "ba610e8b230c25fa36bcb38d82767b30622710d0", "filename": "src/fn_call.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -4,6 +4,8 @@ use rustc::hir::def_id::DefId;\n use rustc::mir;\n use syntax::attr;\n \n+use rand::RngCore;\n+\n use crate::*;\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n@@ -216,9 +218,32 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // is called if a `HashMap` is created the regular way.\n                 match this.read_scalar(args[0])?.to_usize(this)? {\n                     318 | 511 => {\n-                        return err!(Unimplemented(\n-                            \"miri does not support random number generators\".to_owned(),\n-                        ))\n+                        match this.machine.rng.as_ref() {\n+                            Some(rng) => {\n+                                let ptr = this.read_scalar(args[1])?.to_ptr()?;\n+                                let len = this.read_scalar(args[2])?.to_usize(this)?;\n+\n+                                // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n+                                // neither of which have any effect on our current PRNG\n+                                let _flags = this.read_scalar(args[3])?.to_i32()?;\n+\n+                                let mut data = vec![0; len as usize];\n+                                rng.borrow_mut().fill_bytes(&mut data);\n+\n+                                this.memory_mut().get_mut(ptr.alloc_id)?\n+                                    .write_bytes(tcx, ptr, &data)?;\n+\n+                                this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n+\n+                            },\n+                            None => {\n+                                return err!(Unimplemented(\n+                                    \"miri does not support random number generators in deterministic mode!\n+                                    Use '-Zmiri-seed=<seed>' to enable random number generation\".to_owned(),\n+                                ))\n+                            }\n+                        }\n+\n                     }\n                     id => {\n                         return err!(Unimplemented("}, {"sha": "9b4b69b6d707270883bf52f69f70a7857b709c82", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -23,6 +23,10 @@ mod stacked_borrows;\n \n use std::collections::HashMap;\n use std::borrow::Cow;\n+use std::cell::RefCell;\n+\n+use rand::rngs::StdRng;\n+use rand::SeedableRng;\n \n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{LayoutOf, Size, Align};\n@@ -60,6 +64,9 @@ pub fn miri_default_args() -> &'static [&'static str] {\n pub struct MiriConfig {\n     pub validate: bool,\n     pub args: Vec<String>,\n+\n+    // The seed to use when non-determinism is required (e.g. getrandom())\n+    pub seed: Option<u64>\n }\n \n // Used by priroda.\n@@ -71,7 +78,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let mut ecx = InterpretCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(config.validate),\n+        Evaluator::new(config.validate, config.seed),\n     );\n \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n@@ -326,10 +333,14 @@ pub struct Evaluator<'tcx> {\n \n     /// Stacked Borrows state.\n     pub(crate) stacked_borrows: stacked_borrows::State,\n+\n+    /// The random number generator to use if Miri\n+    /// is running in non-deterministic mode\n+    pub(crate) rng: Option<RefCell<StdRng>>\n }\n \n impl<'tcx> Evaluator<'tcx> {\n-    fn new(validate: bool) -> Self {\n+    fn new(validate: bool, seed: Option<u64>) -> Self {\n         Evaluator {\n             env_vars: HashMap::default(),\n             argc: None,\n@@ -339,6 +350,7 @@ impl<'tcx> Evaluator<'tcx> {\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),\n+            rng: seed.map(|s| RefCell::new(StdRng::seed_from_u64(s)))\n         }\n     }\n }"}, {"sha": "85148a724ebc6ef7d77cf1a17c2e322fc221b272", "filename": "tests/compile-fail/getrandom.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/tests%2Fcompile-fail%2Fgetrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/tests%2Fcompile-fail%2Fgetrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgetrandom.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+fn main() {\n+    let mut buf = [0u8; 5];\n+    unsafe {\n+        libc::syscall(libc::SYS_getrandom, &mut buf as &mut [u8] as *mut [u8] as *mut u8 as *mut libc::c_void, 5, 0);\n+        //~^ ERROR constant evaluation error: miri does not support random number generators in deterministic mode!\n+    }\n+}"}, {"sha": "a663c9659524cea676193fcf881bfb1d7ef9cf97", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73239573c9290346dd31c50cd3565cb754d86c80/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73239573c9290346dd31c50cd3565cb754d86c80/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=73239573c9290346dd31c50cd3565cb754d86c80", "patch": "@@ -1,8 +1,9 @@\n+// compile-flags: -Zmiri-seed=0000000000000000\n+\n use std::collections::{self, HashMap};\n-use std::hash::BuildHasherDefault;\n+use std::hash::{BuildHasherDefault, BuildHasher};\n \n-fn main() {\n-    let mut map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = Default::default();\n+fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n     map.insert(0, 0);\n     assert_eq!(map.values().fold(0, |x, y| x+y), 0);\n \n@@ -22,4 +23,13 @@ fn main() {\n     assert_eq!(map.values().fold(0, |x, y| x+y), num*(num-1)/2);\n \n     // TODO: Test Entry API, Iterators, ...\n+\n+}\n+\n+fn main() {\n+    let map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = Default::default();\n+    let map_normal: HashMap<i32, i32> = HashMap::new();\n+\n+    test_map(map);\n+    test_map(map_normal);\n }"}]}