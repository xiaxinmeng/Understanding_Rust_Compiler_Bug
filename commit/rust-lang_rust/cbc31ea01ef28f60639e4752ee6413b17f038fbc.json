{"sha": "cbc31ea01ef28f60639e4752ee6413b17f038fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzMxZWEwMWVmMjhmNjA2MzllNDc1MmVlNjQxM2IxN2YwMzhmYmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-09T04:55:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-09T04:56:08Z"}, "message": "Add detection for cyclic imports.", "tree": {"sha": "ae38975b8aa21dd1dddd49ab771c439d1c6eab0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae38975b8aa21dd1dddd49ab771c439d1c6eab0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc31ea01ef28f60639e4752ee6413b17f038fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc31ea01ef28f60639e4752ee6413b17f038fbc", "html_url": "https://github.com/rust-lang/rust/commit/cbc31ea01ef28f60639e4752ee6413b17f038fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc31ea01ef28f60639e4752ee6413b17f038fbc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063f388534f84c12b46f2dc0dd632bcc86a805f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/063f388534f84c12b46f2dc0dd632bcc86a805f5", "html_url": "https://github.com/rust-lang/rust/commit/063f388534f84c12b46f2dc0dd632bcc86a805f5"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "3ec492c8d02d11e085adcf3cc13c2b34677c094b", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=cbc31ea01ef28f60639e4752ee6413b17f038fbc", "patch": "@@ -320,7 +320,7 @@ let process_crate\n   in\n   let root_scope = [ SCOPE_crate crate ] in\n   let auth_effect name eff =\n-    match lookup_by_name cx root_scope name with\n+    match lookup_by_name cx [] root_scope name with\n         None -> ()\n       | Some (_, id) ->\n           if referent_is_item cx id"}, {"sha": "77fdbb3b2dcf1cb83375e72e1223cbcd9d4c91d4", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=cbc31ea01ef28f60639e4752ee6413b17f038fbc", "patch": "@@ -233,7 +233,7 @@ let lookup_type_node_by_name\n   iflog cx (fun _ ->\n               log cx \"lookup_simple_type_by_name %a\"\n                 Ast.sprintf_name name);\n-  match lookup_by_name cx scopes name with\n+  match lookup_by_name cx [] scopes name with\n       None -> err None \"unknown name: %a\" Ast.sprintf_name name\n     | Some (_, id) ->\n         match htab_search cx.ctxt_all_defns id with\n@@ -390,7 +390,7 @@ and lookup_type_by_name\n   iflog cx (fun _ ->\n               log cx \"+++ lookup_type_by_name %a\"\n                 Ast.sprintf_name name);\n-  match lookup_by_name cx scopes name with\n+  match lookup_by_name cx [] scopes name with\n       None -> err None \"unknown name: %a\" Ast.sprintf_name name\n     | Some (scopes', id) ->\n         let ty, params =\n@@ -746,7 +746,7 @@ let lval_base_resolving_visitor\n           | _ -> false\n       in\n         if lval_is_name lv && lval_is_item cx lv\n-        then ignore (lookup_by_name cx (!scopes) (lval_to_name lv))\n+        then ignore (lookup_by_name cx [] (!scopes) (lval_to_name lv))\n     in\n \n       lookup_lval lv;"}, {"sha": "61eb148527b4c3fdb789e81359046694af656e37", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=cbc31ea01ef28f60639e4752ee6413b17f038fbc", "patch": "@@ -1539,8 +1539,11 @@ let get_name_base_ident\n         bug () \"get_name_base_ident on BASE_temp\"\n ;;\n \n+type loop_check = (node_id * Ast.ident) list;;\n+\n let rec project_ident_from_items\n     (cx:ctxt)\n+    (lchk:loop_check)\n     (scopes:scope list)\n     ((view:Ast.mod_view),(items:Ast.mod_items))\n     (ident:Ast.ident)\n@@ -1555,14 +1558,15 @@ let rec project_ident_from_items\n       | None ->\n           match htab_search view.Ast.view_imports ident with\n               None -> None\n-            | Some name -> lookup_by_name cx scopes name\n+            | Some name -> lookup_by_name cx lchk scopes name\n \n and found cx scopes id =\n   Hashtbl.replace cx.ctxt_node_referenced id ();\n   Some (scopes, id)\n \n and project_name_comp_from_resolved\n     (cx:ctxt)\n+    (lchk:loop_check)\n     (mod_res:resolved)\n     (ext:Ast.name_component)\n     : resolved =\n@@ -1574,28 +1578,36 @@ and project_name_comp_from_resolved\n         let ident = get_name_comp_ident ext in\n         let md = get_mod_item cx id in\n           Hashtbl.replace cx.ctxt_node_referenced id ();\n-          project_ident_from_items cx scopes md ident false\n+          project_ident_from_items cx lchk scopes md ident false\n \n and lookup_by_name\n     (cx:ctxt)\n+    (lchk:loop_check)\n     (scopes:scope list)\n     (name:Ast.name)\n     : resolved =\n   assert (Ast.sane_name name);\n   match name with\n       Ast.NAME_base nb ->\n         let ident = get_name_base_ident nb in\n-          lookup_by_ident cx scopes ident\n+          lookup_by_ident cx lchk scopes ident\n     | Ast.NAME_ext (name, ext) ->\n-        let base_res = lookup_by_name cx scopes name in\n-          project_name_comp_from_resolved cx base_res ext\n+        let base_res = lookup_by_name cx lchk scopes name in\n+          project_name_comp_from_resolved cx lchk base_res ext\n \n and lookup_by_ident\n     (cx:ctxt)\n+    (lchk:loop_check)\n     (scopes:scope list)\n     (ident:Ast.ident)\n     : resolved =\n \n+  let passing id =\n+    if List.mem (id, ident) lchk\n+    then err (Some id) \"cyclic import for ident %s\" ident\n+    else (id, ident)::lchk\n+  in\n+\n   let check_slots scopes islots =\n     arr_search islots\n       (fun _ (sloti,ident') ->\n@@ -1639,7 +1651,7 @@ and lookup_by_ident\n \n       | SCOPE_crate crate ->\n           project_ident_from_items\n-            cx scopes crate.node.Ast.crate_items ident true\n+            cx (passing crate.id) scopes crate.node.Ast.crate_items ident true\n \n       | SCOPE_obj_fn fn ->\n           would_capture (check_slots scopes fn.node.Ast.fn_input_slots)\n@@ -1659,7 +1671,8 @@ and lookup_by_ident\n                     end\n \n                 | Ast.MOD_ITEM_mod md ->\n-                    project_ident_from_items cx scopes md ident true\n+                    project_ident_from_items cx (passing item.id)\n+                      scopes md ident true\n \n                 | _ -> None\n             in\n@@ -1727,7 +1740,7 @@ let lookup\n     : ((scope list * node_id) option) =\n   match key with\n       Ast.KEY_temp temp -> lookup_by_temp cx scopes temp\n-    | Ast.KEY_ident ident -> lookup_by_ident cx scopes ident\n+    | Ast.KEY_ident ident -> lookup_by_ident cx [] scopes ident\n ;;\n \n "}, {"sha": "3a13561ae3a1bd50d6701ec77d3ba9aef6ec4219", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31ea01ef28f60639e4752ee6413b17f038fbc/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=cbc31ea01ef28f60639e4752ee6413b17f038fbc", "patch": "@@ -28,7 +28,7 @@ let determine_constr_key\n     : constr_key =\n \n   let cid =\n-    match lookup_by_name cx scopes c.Ast.constr_name with\n+    match lookup_by_name cx [] scopes c.Ast.constr_name with\n         Some (_, cid) ->\n           if referent_is_item cx cid\n           then\n@@ -62,7 +62,7 @@ let determine_constr_key\n               | Ast.CARG_ext (pth, _) -> node_base_of pth\n               | Ast.CARG_base (Ast.BASE_named nb) ->\n                   begin\n-                    match lookup_by_name cx scopes (Ast.NAME_base nb) with\n+                    match lookup_by_name cx [] scopes (Ast.NAME_base nb) with\n                         None -> bug () \"constraint-arg not found\"\n                       | Some (_, aid) ->\n                           if referent_is_slot cx aid"}]}