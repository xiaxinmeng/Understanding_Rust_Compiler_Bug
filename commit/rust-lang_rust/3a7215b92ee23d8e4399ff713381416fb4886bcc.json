{"sha": "3a7215b92ee23d8e4399ff713381416fb4886bcc", "node_id": "C_kwDOAAsO6NoAKDNhNzIxNWI5MmVlMjNkOGU0Mzk5ZmY3MTMzODE0MTZmYjQ4ODZiY2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T13:52:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T13:52:49Z"}, "message": "Auto merge of #13732 - rami3l:fix/gen-partial-eq, r=jonas-schievink\n\nfix: add fallback case in generated `PartialEq` impl\n\nPartially fixes #13727.\n\nWhen generating `PartialEq` implementations for enums, the original code can already generate the following fallback case:\n\n```rs\n_ => std::mem::discriminant(self) == std::mem::discriminant(other),\n```\n\nHowever, it has been suppressed in the following example for no good reason:\n\n```rs\nenum Either<T, U> {\n    Left(T),\n    Right(U),\n}\n\nimpl<T, U> PartialEq for Either<T, U> {\n    fn eq(&self, other: &Self) -> bool {\n        match (self, other) {\n            (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n            (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n            // _ => std::mem::discriminant(self) == std::mem::discriminant(other),\n            // ^ this completes the match arms!\n        }\n    }\n}\n```\n\nThis PR has removed that suppression logic.\n\n~~Of course, the PR could have suppressed the fallback case generation for single-variant enums instead, but I believe that this case is quite rare and should be caught by `#[warn(unreachable_patterns)]` anyway.~~\n\nAfter this fix, when the enum has >1 variants, the following fallback arm will be generated :\n\n* `_ => false,` if we've already gone through every case where the variants of `self` and `other` match;\n* The original one (as stated above) in other cases.\n\n---\n\nNote: The code example is still wrong after the fix due to incorrect trait bounds.", "tree": {"sha": "9054aa9af8d20e58f1dba39bd1310089e7a90939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9054aa9af8d20e58f1dba39bd1310089e7a90939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a7215b92ee23d8e4399ff713381416fb4886bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7215b92ee23d8e4399ff713381416fb4886bcc", "html_url": "https://github.com/rust-lang/rust/commit/3a7215b92ee23d8e4399ff713381416fb4886bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a7215b92ee23d8e4399ff713381416fb4886bcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c70fe69bafa60827a087a8dc48fbf2f56261d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c70fe69bafa60827a087a8dc48fbf2f56261d2", "html_url": "https://github.com/rust-lang/rust/commit/16c70fe69bafa60827a087a8dc48fbf2f56261d2"}, {"sha": "57fb18e3bdc44e0ec390ec48b501f85bb78218e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/57fb18e3bdc44e0ec390ec48b501f85bb78218e8", "html_url": "https://github.com/rust-lang/rust/commit/57fb18e3bdc44e0ec390ec48b501f85bb78218e8"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "2854701c088e58c5e258d564d2bc2fa59fcda6b8", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3a7215b92ee23d8e4399ff713381416fb4886bcc/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7215b92ee23d8e4399ff713381416fb4886bcc/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=3a7215b92ee23d8e4399ff713381416fb4886bcc", "patch": "@@ -907,7 +907,34 @@ impl PartialEq for Foo {\n     }\n \n     #[test]\n-    fn add_custom_impl_partial_eq_tuple_enum() {\n+    fn add_custom_impl_partial_eq_single_variant_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar(String),\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(String),\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Bar(l0), Self::Bar(r0)) => l0 == r0,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_partial_tuple_enum() {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n@@ -936,6 +963,37 @@ impl PartialEq for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Foo {\n+    Bar(String),\n+    Baz(i32),\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(String),\n+    Baz(i32),\n+}\n+\n+impl PartialEq for Foo {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Bar(l0), Self::Bar(r0)) => l0 == r0,\n+            (Self::Baz(l0), Self::Baz(r0)) => l0 == r0,\n+            _ => false,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_enum() {\n         check_assist("}, {"sha": "f32e5ce97d2a02d664f1b80db9a6e6afe867372b", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a7215b92ee23d8e4399ff713381416fb4886bcc/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7215b92ee23d8e4399ff713381416fb4886bcc/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=3a7215b92ee23d8e4399ff713381416fb4886bcc", "patch": "@@ -516,10 +516,18 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n             let expr = match arms.len() {\n                 0 => eq_check,\n-                _ => {\n-                    if n_cases > arms.len() {\n+                arms_len => {\n+                    // Generate the fallback arm when this enum has >1 variants.\n+                    // The fallback arm will be `_ => false,` if we've already gone through every case where the variants of self and other match,\n+                    // and `_ => std::mem::discriminant(self) == std::mem::discriminant(other),` otherwise.\n+                    if n_cases > 1 {\n                         let lhs = make::wildcard_pat().into();\n-                        arms.push(make::match_arm(Some(lhs), None, eq_check));\n+                        let rhs = if arms_len == n_cases {\n+                            make::expr_literal(\"false\").into()\n+                        } else {\n+                            eq_check\n+                        };\n+                        arms.push(make::match_arm(Some(lhs), None, rhs));\n                     }\n \n                     let match_target = make::expr_tuple(vec![lhs_name, rhs_name]);"}]}