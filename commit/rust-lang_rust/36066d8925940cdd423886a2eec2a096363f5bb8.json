{"sha": "36066d8925940cdd423886a2eec2a096363f5bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDY2ZDg5MjU5NDBjZGQ0MjM4ODZhMmVlYzJhMDk2MzYzZjViYjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-20T11:49:03Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-24T07:06:43Z"}, "message": "UI tests extract the regular output from the 'rendered' field in json", "tree": {"sha": "ad8bf6a96e066abbd128f99d8480b7095279deaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8bf6a96e066abbd128f99d8480b7095279deaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36066d8925940cdd423886a2eec2a096363f5bb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloXxQMACgkQpp+NIls6\n19lajw/+OCnitXXpeEtUkdBhaAkDtY1kS1S/qE7pNjmWQDbDpR36mt4vFdey5tFD\n8fCj5N6cj/kMivKvdhYMjZ6vYR8h2gszvY92POphdp+MFTMGNOeW8DqnR2iqa+Ol\nOnNxFll5YKoMWg6zEz2Q6pvDu/9nR+q+vVm5u/DssSj3Bxnz2Rouca5L7S44Q9A9\ndHdDcwNa4b1ek8Lu5R7wXc01gjVr1uQT1kI6dLISbah/mDs56jTLvOs5w7GaZDEf\nvq55xyvEOXb6ZwIz0ddbnmrPKXYt1iZQgyOtrxiWfribgVBt2yGijbeg3g1CpHH3\n7z1kMueyU1TKYtQguB+lo8HJOrQqr7k/o7s8WGK6ouyGhRHqZY/w4y/r1s+zEoRQ\nqt+UZfn3qmELPUv/QCCVPdJmLH9AArU3IehYHph3UHrRLl7LVyEm+d0fbU4qaIKS\nDcK2mbkBBtgDfhoh4MKwNpCHVEbecfjvDvAa4VnTd16+HDpWr5alVw8JcRjcTq6d\nxokF/v3M6OfVgGOUo2KMWBkn8s4xM4JoWHAd4bO3FB5fe92Q58dSkfooJLChcSVW\nS1t6DbV1kqNJSJzyvbH2PWn35trjw6/pqufLepN7zbmPQofB4H5kAGRJ8g19/nuQ\nxuGf1WttckYWPnTMIhjpufhDgl/ISilrPSrjjGK1ohz9wkai4L0=\n=E6H8\n-----END PGP SIGNATURE-----", "payload": "tree ad8bf6a96e066abbd128f99d8480b7095279deaf\nparent f7361a887005ea351a3ceabba8548fdec6ee27ff\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511178543 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511507203 +0100\n\nUI tests extract the regular output from the 'rendered' field in json\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36066d8925940cdd423886a2eec2a096363f5bb8", "html_url": "https://github.com/rust-lang/rust/commit/36066d8925940cdd423886a2eec2a096363f5bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36066d8925940cdd423886a2eec2a096363f5bb8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7361a887005ea351a3ceabba8548fdec6ee27ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7361a887005ea351a3ceabba8548fdec6ee27ff", "html_url": "https://github.com/rust-lang/rust/commit/f7361a887005ea351a3ceabba8548fdec6ee27ff"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "99d7dc78166491209b1733aa6c068c983f9432ff", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36066d8925940cdd423886a2eec2a096363f5bb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36066d8925940cdd423886a2eec2a096363f5bb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=36066d8925940cdd423886a2eec2a096363f5bb8", "patch": "@@ -57,6 +57,25 @@ struct DiagnosticCode {\n     explanation: Option<String>,\n }\n \n+pub fn extract_rendered(output: &str, proc_res: &ProcRes) -> String {\n+    output.lines()\n+        .filter_map(|line| if line.starts_with('{') {\n+            match json::decode::<Diagnostic>(line) {\n+                Ok(diagnostic) => diagnostic.rendered,\n+                Err(error) => {\n+                    proc_res.fatal(Some(&format!(\"failed to decode compiler output as json: \\\n+                                                `{}`\\noutput: {}\\nline: {}\",\n+                                                error,\n+                                                line,\n+                                                output)));\n+                }\n+            }\n+        } else {\n+            None\n+        })\n+        .collect()\n+}\n+\n pub fn parse_output(file_name: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n     output.lines()\n         .flat_map(|line| parse_line(file_name, line, output, proc_res))"}, {"sha": "bb7c3616f2aa503a766b9c157f289f8dee83ad28", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/36066d8925940cdd423886a2eec2a096363f5bb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36066d8925940cdd423886a2eec2a096363f5bb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=36066d8925940cdd423886a2eec2a096363f5bb8", "patch": "@@ -1403,6 +1403,11 @@ actual:\\n\\\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n             }\n+            Ui => {\n+                if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n+                    rustc.args(&[\"--error-format\", \"json\"]);\n+                }\n+            }\n             MirOpt => {\n                 rustc.args(&[\n                     \"-Zdump-mir=all\",\n@@ -1427,7 +1432,6 @@ actual:\\n\\\n             Codegen |\n             Rustdoc |\n             RunMake |\n-            Ui |\n             CodegenUnits => {\n                 // do not use JSON output\n             }\n@@ -2211,7 +2215,12 @@ actual:\\n\\\n     }\n \n     fn run_ui_test(&self) {\n-        let proc_res = self.compile_test();\n+        // if the user specified a format in the ui test\n+        // print the output to the stderr file, otherwise extract\n+        // the rendered error messages from json and print them\n+        let explicit = self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\"));\n+\n+        let mut proc_res = self.compile_test();\n \n         let expected_stderr_path = self.expected_output_path(\"stderr\");\n         let expected_stderr = self.load_expected_output(&expected_stderr_path);\n@@ -2220,14 +2229,24 @@ actual:\\n\\\n         let expected_stdout = self.load_expected_output(&expected_stdout_path);\n \n         let normalized_stdout =\n-            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n+            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout, explicit);\n+\n+        let stderr = if explicit {\n+            proc_res.stderr.clone()\n+        } else {\n+            json::extract_rendered(&proc_res.stderr, &proc_res)\n+        };\n+\n         let normalized_stderr =\n-            self.normalize_output(&proc_res.stderr, &self.props.normalize_stderr);\n+            self.normalize_output(&stderr, &self.props.normalize_stderr, explicit);\n \n         let mut errors = 0;\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n         errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n \n+        // rewrite the output to the human readable one (shown in case of errors)\n+        proc_res.stderr = normalized_stderr;\n+\n         if errors > 0 {\n             println!(\"To update references, run this command from build directory:\");\n             let relative_path_to_file =\n@@ -2421,11 +2440,13 @@ actual:\\n\\\n         mir_dump_dir\n     }\n \n-    fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n+    fn normalize_output(\n+        &self,\n+        output: &str,\n+        custom_rules: &[(String, String)],\n+        json: bool,\n+    ) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n-        let cflags = self.props.compile_flags.join(\" \");\n-        let json = cflags.contains(\"--error-format json\") ||\n-                   cflags.contains(\"--error-format pretty-json\");\n         let parent_dir_str = if json {\n             parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n         } else {"}]}