{"sha": "4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzk1M2JiZGQ1ODg5Mjg0NGExYmQyYjdmNGEyMzM2YThhY2VhNWU=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-04T18:26:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T15:49:28Z"}, "message": "Parse `auto trait` inside fns.\n\nAlso refactored parsing auto traits.", "tree": {"sha": "bf871e2973f81a8d7672992d015a560cbb627d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf871e2973f81a8d7672992d015a560cbb627d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "html_url": "https://github.com/rust-lang/rust/commit/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ccd3ac178c05169e04fb33530f7923f77d680af", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccd3ac178c05169e04fb33530f7923f77d680af", "html_url": "https://github.com/rust-lang/rust/commit/9ccd3ac178c05169e04fb33530f7923f77d680af"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "884e7d1f6ad7d45fe3958435621aabbb9d80402a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "patch": "@@ -4084,14 +4084,14 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n-    fn eat_auto_trait(&mut self) -> bool {\n-        if self.token.is_keyword(keywords::Auto)\n-            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n-        {\n-            self.eat_keyword(keywords::Auto) && self.eat_keyword(keywords::Trait)\n-        } else {\n-            false\n-        }\n+    fn is_auto_trait_item(&mut self) -> bool {\n+        // auto trait\n+        (self.token.is_keyword(keywords::Auto)\n+            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n+        || // unsafe auto trait\n+        (self.token.is_keyword(keywords::Unsafe) &&\n+         self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) &&\n+         self.look_ahead(2, |t| t.is_keyword(keywords::Trait)))\n     }\n \n     fn is_defaultness(&self) -> bool {\n@@ -4194,7 +4194,8 @@ impl<'a> Parser<'a> {\n                 node: StmtKind::Item(macro_def),\n                 span: lo.to(self.prev_span),\n             }\n-        // Starts like a simple path, but not a union item or item with `crate` visibility.\n+        // Starts like a simple path, being careful to avoid contextual keywords\n+        // such as a union items, item with `crate` visibility or auto trait items.\n         // Our goal here is to parse an arbitrary path `a::b::c` but not something that starts\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n@@ -4204,7 +4205,8 @@ impl<'a> Parser<'a> {\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n-                  !self.is_extern_non_path() {\n+                  !self.is_extern_non_path() &&\n+                  !self.is_auto_trait_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -6368,7 +6370,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_auto_trait();\n+                self.eat_keyword(keywords::Auto);\n+                self.eat_keyword(keywords::Trait);\n                 IsAuto::Yes\n             };\n             let (ident, item_, extra_attrs) =\n@@ -6482,7 +6485,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_auto_trait();\n+                self.eat_keyword(keywords::Auto);\n+                self.eat_keyword(keywords::Trait);\n                 IsAuto::Yes\n             };\n             // TRAIT ITEM"}, {"sha": "2a18b402bc64d4c70575ce67caf6707ed0af0178", "filename": "src/test/run-pass/auto-traits.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "patch": "@@ -11,7 +11,6 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Auto {}\n-\n unsafe auto trait AutoUnsafe {}\n \n impl !Auto for bool {}\n@@ -26,6 +25,10 @@ fn take_auto<T: Auto>(_: T) {}\n fn take_auto_unsafe<T: AutoUnsafe>(_: T) {}\n \n fn main() {\n+    // Parse inside functions.\n+    auto trait AutoInner {}\n+    unsafe auto trait AutoUnsafeInner {}\n+\n     take_auto(0);\n     take_auto(AutoBool(true));\n     take_auto_unsafe(0);"}]}