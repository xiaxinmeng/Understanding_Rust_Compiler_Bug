{"sha": "3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTc0M2JjOWMyNjliNWVkNGM5Yjc0YmY4ZWQ4YzU4NjhjMTI5MTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T04:05:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T19:14:34Z"}, "message": "Remove various istr conversions. Issue #855", "tree": {"sha": "93e1ceaa9417e50fd9611a0d69be5d83923c7117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e1ceaa9417e50fd9611a0d69be5d83923c7117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "html_url": "https://github.com/rust-lang/rust/commit/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebe61cdda1349ed1a79d39bb41f8d812d38a216", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebe61cdda1349ed1a79d39bb41f8d812d38a216", "html_url": "https://github.com/rust-lang/rust/commit/5ebe61cdda1349ed1a79d39bb41f8d812d38a216"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "622f4bb52828bada8569f7b72dc284e8882c3092", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -120,8 +120,8 @@ fn annotate_freevars(def_map: &resolve::def_map,\n fn get_freevars(tcx: &ty::ctxt, fid: ast::node_id) -> freevar_info {\n     alt tcx.freevars.find(fid) {\n       none. {\n-        fail \"get_freevars: \" + istr::to_estr(int::str(fid))\n-            + \" has no freevars\";\n+        fail ~\"get_freevars: \" + int::str(fid)\n+            + ~\" has no freevars\";\n       }\n       some(d) { ret d; }\n     }"}, {"sha": "7a5039e44cecfce4128f1de8856231422b8a6609", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -62,7 +62,7 @@ fn node_ids_in_fn(f: &_fn, tps: &[ty_param], sp: &span, i: &fn_ident,\n \n fn init_vecs(ccx: &crate_ctxt, node_ids: &[node_id], len: uint) {\n     for i: node_id in node_ids {\n-        log istr::to_estr(int::str(i) + ~\" |-> \" + uint::str(len));\n+        log int::str(i) + ~\" |-> \" + uint::str(len);\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "f12e93bb772752b49bbbaefd3a546ab7ed08f9b6", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -331,8 +331,8 @@ fn get_ts_ann(ccx: &crate_ctxt, i: node_id) -> option::t<ts_ann> {\n fn node_id_to_ts_ann(ccx: &crate_ctxt, id: node_id) -> ts_ann {\n     alt get_ts_ann(ccx, id) {\n       none. {\n-        log_err \"node_id_to_ts_ann: no ts_ann for node_id \"\n-            + istr::to_estr(int::str(id));\n+        log_err ~\"node_id_to_ts_ann: no ts_ann for node_id \"\n+            + int::str(id);\n         fail;\n       }\n       some(t) { ret t; }\n@@ -534,8 +534,8 @@ fn constraints_expr(cx: &ty::ctxt, e: @expr) -> [@ty::constr] {\n fn node_id_to_def_strict(cx: &ty::ctxt, id: node_id) -> def {\n     alt cx.def_map.find(id) {\n       none. {\n-        log_err \"node_id_to_def: node_id \"\n-            + istr::to_estr(int::str(id)) + \" has no def\";\n+        log_err ~\"node_id_to_def: node_id \"\n+            + int::str(id) + ~\" has no def\";\n         fail;\n       }\n       some(d) { ret d; }"}, {"sha": "dbdb3b15c16cd0ba4ecfb3c1a5857eecbd09dfdb", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -147,9 +147,9 @@ fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &[ty_param], f_sp: &span,\n          i_diverge: ninit(diverges_id, diverges_name),\n          used_vars: v};\n     ccx.fm.insert(id, rslt);\n-    log istr::to_estr(name + ~\" has \"\n+    log name + ~\" has \"\n                       + std::uint::str(num_constraints(rslt))\n-                      + ~\" constraints\");\n+                      + ~\" constraints\";\n }\n \n "}, {"sha": "4fcb1db8816cc7bbf2ac7f63d5a1233ed0b6b879", "filename": "src/comp/syntax/ext/ifmt.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Fsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fifmt.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -263,8 +263,7 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n     fn log_conv(c: conv) {\n         alt c.param {\n           some(p) {\n-            log \"param: \"\n-                + istr::to_estr(std::int::to_str(p, 10u));\n+            log ~\"param: \" + std::int::to_str(p, 10u);\n           }\n           _ { log \"param: none\"; }\n         }\n@@ -278,21 +277,21 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n             }\n         }\n         alt c.width {\n-          count_is(i) { log \"width: count is \"\n-              + istr::to_estr(std::int::to_str(i, 10u)); }\n+          count_is(i) { log ~\"width: count is \"\n+              + std::int::to_str(i, 10u); }\n           count_is_param(i) {\n-            log \"width: count is param \"\n-                + istr::to_estr(std::int::to_str(i, 10u));\n+            log ~\"width: count is param \"\n+                + std::int::to_str(i, 10u);\n           }\n           count_is_next_param. { log \"width: count is next param\"; }\n           count_implied. { log \"width: count is implied\"; }\n         }\n         alt c.precision {\n-          count_is(i) { log \"prec: count is \"\n-              + istr::to_estr(std::int::to_str(i, 10u)); }\n+          count_is(i) { log ~\"prec: count is \"\n+              + std::int::to_str(i, 10u); }\n           count_is_param(i) {\n-            log \"prec: count is param \"\n-                + istr::to_estr(std::int::to_str(i, 10u));\n+            log ~\"prec: count is param \"\n+                + std::int::to_str(i, 10u);\n           }\n           count_is_next_param. { log \"prec: count is next param\"; }\n           count_implied. { log \"prec: count is implied\"; }"}, {"sha": "4ec69b61245f38cb5e37c925c544d281251858d2", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -46,8 +46,8 @@ fn get_id_ident(cx: &ctxt, id: ast::def_id) -> istr {\n     if id.crate != ast::local_crate {\n         alt cx.ext_map.find(id) {\n           some(j) { istr::connect(j, ~\"::\") }\n-          _ { fail (\"get_id_ident: can't find item in ext_map, id.crate = \"\n-                    + istr::to_estr(int::str(id.crate))) }\n+          _ { fail (~\"get_id_ident: can't find item in ext_map, id.crate = \"\n+                    + int::str(id.crate)) }\n         }\n     } else {\n         alt cx.items.find(id.node) {"}, {"sha": "d48fc67b43b8cb775d54ea5f29ad0ef086676129", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -67,8 +67,7 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     alt maybe_get_doc(d, tg) {\n       some(d) { ret d; }\n       none. {\n-        log_err \"failed to find block with tag \"\n-            + istr::to_estr(uint::to_str(tg, 10u));\n+        log_err ~\"failed to find block with tag \" + uint::to_str(tg, 10u);\n         fail;\n       }\n     }"}, {"sha": "0938532fce289d7c757c0c580e298d41f2eceaf7", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -30,11 +30,12 @@ fn show(b: bottle) {\n                 \"1 bottle of beer on the wall.\";\n       }\n       multiple(n) {\n-        let nb: str = istr::to_estr(int::to_str(n, 10u));\n-        let mb: str = istr::to_estr(int::to_str(n - 1, 10u));\n-        log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n-        log \"Take one down and pass it around, \" + mb +\n-                \" bottles of beer on the wall.\";\n+        let nb: istr = int::to_str(n, 10u);\n+        let mb: istr = int::to_str(n - 1, 10u);\n+        log nb + ~\" bottles of beer on the wall, \" + nb +\n+            ~\" bottles of beer,\";\n+        log ~\"Take one down and pass it around, \" + mb +\n+                ~\" bottles of beer on the wall.\";\n       }\n     }\n }"}, {"sha": "6e84bcd58a3dcff2b78b6ab5acbaf1acca692663", "filename": "src/test/bench/99bob-tail.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fbench%2F99bob-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fbench%2F99bob-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-tail.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -9,11 +9,12 @@ import std::istr;\n \n fn main() {\n     fn multiple(n: int) {\n-        let nb: str = istr::to_estr(int::to_str(n, 10u));\n-        let mb: str = istr::to_estr(int::to_str(n - 1, 10u));\n-        log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n-        log \"Take one down and pass it around, \" + mb +\n-                \" bottles of beer on the wall.\";\n+        let nb: istr = int::to_str(n, 10u);\n+        let mb: istr = int::to_str(n - 1, 10u);\n+        log nb + ~\" bottles of beer on the wall, \" + nb +\n+            ~\" bottles of beer,\";\n+        log ~\"Take one down and pass it around, \" + mb +\n+            ~\" bottles of beer on the wall.\";\n         log \"\";\n         if n > 3 { be multiple(n - 1); } else { be dual(); }\n     }"}, {"sha": "94704043a6d2d0a8d5c5faf5147c2b317c500813", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=3fe743bc9c269b5ed4c9b74bf8ed8c5868c12918", "patch": "@@ -49,7 +49,7 @@ fn parse_config(args: &[istr]) -> config {\n         alt getopts::getopts(args_, opts) {\n           getopts::success(m) { m }\n           getopts::failure(f) {\n-            fail istr::to_estr(getopts::fail_str(f))\n+            fail getopts::fail_str(f)\n           }\n         };\n "}]}