{"sha": "a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTAxYzYyZDViNjI1OWQ1NWI2Njg4YzhiMDU5YWMyOGU1ZGQwM2U=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-05T14:19:23Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-06T21:54:41Z"}, "message": "librustdoc has been updated\n\nFixes run build error\n\nFix test failure\n\nFix tests' errors", "tree": {"sha": "0e882d736a598b1856706a088d074ec8f5529ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e882d736a598b1856706a088d074ec8f5529ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "html_url": "https://github.com/rust-lang/rust/commit/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e20035e339da2feb9f0a07cc8e49bd3b4d2b8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e20035e339da2feb9f0a07cc8e49bd3b4d2b8b6", "html_url": "https://github.com/rust-lang/rust/commit/9e20035e339da2feb9f0a07cc8e49bd3b4d2b8b6"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "e707e83c3897b7fda962898ab2d1f6592938b830", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -410,12 +410,12 @@ pub enum Attribute {\n impl Clean<Attribute> for ast::MetaItem {\n     fn clean(&self, cx: &DocContext) -> Attribute {\n         match self.node {\n-            ast::MetaWord(ref s) => Word(s.get().to_string()),\n+            ast::MetaWord(ref s) => Word(s.to_string()),\n             ast::MetaList(ref s, ref l) => {\n-                List(s.get().to_string(), l.clean(cx))\n+                List(s.to_string(), l.clean(cx))\n             }\n             ast::MetaNameValue(ref s, ref v) => {\n-                NameValue(s.get().to_string(), lit_to_string(v))\n+                NameValue(s.to_string(), lit_to_string(v))\n             }\n         }\n     }\n@@ -700,19 +700,19 @@ impl Lifetime {\n \n impl Clean<Lifetime> for ast::Lifetime {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n-        Lifetime(token::get_name(self.name).get().to_string())\n+        Lifetime(token::get_name(self.name).to_string())\n     }\n }\n \n impl Clean<Lifetime> for ast::LifetimeDef {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n-        Lifetime(token::get_name(self.lifetime.name).get().to_string())\n+        Lifetime(token::get_name(self.lifetime.name).to_string())\n     }\n }\n \n impl Clean<Lifetime> for ty::RegionParameterDef {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n-        Lifetime(token::get_name(self.name).get().to_string())\n+        Lifetime(token::get_name(self.name).to_string())\n     }\n }\n \n@@ -721,7 +721,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n         match *self {\n             ty::ReStatic => Some(Lifetime::statik()),\n             ty::ReLateBound(_, ty::BrNamed(_, name)) =>\n-                Some(Lifetime(token::get_name(name).get().to_string())),\n+                Some(Lifetime(token::get_name(name).to_string())),\n             ty::ReEarlyBound(_, _, _, name) => Some(Lifetime(name.clean(cx))),\n \n             ty::ReLateBound(..) |\n@@ -1953,20 +1953,20 @@ fn path_to_string(p: &ast::Path) -> String {\n         } else {\n             first = false;\n         }\n-        s.push_str(i.get());\n+        s.push_str(&i);\n     }\n     s\n }\n \n impl Clean<String> for ast::Ident {\n     fn clean(&self, _: &DocContext) -> String {\n-        token::get_ident(*self).get().to_string()\n+        token::get_ident(*self).to_string()\n     }\n }\n \n impl Clean<String> for ast::Name {\n     fn clean(&self, _: &DocContext) -> String {\n-        token::get_name(*self).get().to_string()\n+        token::get_name(*self).to_string()\n     }\n }\n \n@@ -2158,7 +2158,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         // forcefully don't inline if this is not public or if the\n         // #[doc(no_inline)] attribute is present.\n         let denied = self.vis != ast::Public || self.attrs.iter().any(|a| {\n-            a.name().get() == \"doc\" && match a.meta_item_list() {\n+            &a.name()[] == \"doc\" && match a.meta_item_list() {\n                 Some(l) => attr::contains_name(l, \"no_inline\"),\n                 None => false,\n             }\n@@ -2311,7 +2311,7 @@ impl ToSource for syntax::codemap::Span {\n \n fn lit_to_string(lit: &ast::Lit) -> String {\n     match lit.node {\n-        ast::LitStr(ref st, _) => st.get().to_string(),\n+        ast::LitStr(ref st, _) => st.to_string(),\n         ast::LitBinary(ref data) => format!(\"{:?}\", data),\n         ast::LitByte(b) => {\n             let mut res = String::from_str(\"b'\");\n@@ -2323,8 +2323,8 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n         },\n         ast::LitChar(c) => format!(\"'{}'\", c),\n         ast::LitInt(i, _t) => i.to_string(),\n-        ast::LitFloat(ref f, _t) => f.get().to_string(),\n-        ast::LitFloatUnsuffixed(ref f) => f.get().to_string(),\n+        ast::LitFloat(ref f, _t) => f.to_string(),\n+        ast::LitFloatUnsuffixed(ref f) => f.to_string(),\n         ast::LitBool(b) => b.to_string(),\n     }\n }\n@@ -2336,7 +2336,7 @@ fn name_from_pat(p: &ast::Pat) -> String {\n     match p.node {\n         PatWild(PatWildSingle) => \"_\".to_string(),\n         PatWild(PatWildMulti) => \"..\".to_string(),\n-        PatIdent(_, ref p, _) => token::get_ident(p.node).get().to_string(),\n+        PatIdent(_, ref p, _) => token::get_ident(p.node).to_string(),\n         PatEnum(ref p, _) => path_to_string(p),\n         PatStruct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", path_to_string(name),\n@@ -2486,11 +2486,11 @@ impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext) -> Stability {\n         Stability {\n             level: self.level,\n-            feature: self.feature.get().to_string(),\n+            feature: self.feature.to_string(),\n             since: self.since.as_ref().map_or(\"\".to_string(),\n-                                              |interned| interned.get().to_string()),\n+                                              |interned| interned.to_string()),\n             reason: self.reason.as_ref().map_or(\"\".to_string(),\n-                                                |interned| interned.get().to_string()),\n+                                                |interned| interned.to_string()),\n         }\n     }\n }"}, {"sha": "6acd15379461cfbafcc91f9f2fb9cb56b7c16822", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -142,7 +142,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n \n             // keywords are also included in the identifier set\n             token::Ident(ident, _is_mod_sep) => {\n-                match token::get_ident(ident).get() {\n+                match &token::get_ident(ident)[] {\n                     \"ref\" | \"mut\" => \"kw-2\",\n \n                     \"self\" => \"self\","}, {"sha": "ac1a02854124afda82d3183550ebd9e7c63a6933", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             ast::ItemExternCrate(ref p) => {\n                 let path = match *p {\n                     None => None,\n-                    Some((ref x, _)) => Some(x.get().to_string()),\n+                    Some((ref x, _)) => Some(x.to_string()),\n                 };\n                 om.extern_crates.push(ExternCrate {\n                     name: name,\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let please_inline = item.attrs.iter().any(|item| {\n                         match item.meta_item_list() {\n                             Some(list) => {\n-                                list.iter().any(|i| i.name().get() == \"inline\")\n+                                list.iter().any(|i| &i.name()[] == \"inline\")\n                             }\n                             None => false,\n                         }"}, {"sha": "33712dae900b8fd311df68bd68c2a6743e821965", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -1862,7 +1862,7 @@ mod test {\n                         .collect();\n                     println!(\"varref #{}: {:?}, resolves to {}\",idx, varref_idents, varref_name);\n                     let string = token::get_ident(final_varref_ident);\n-                    println!(\"varref's first segment's string: \\\"{}\\\"\", string.get());\n+                    println!(\"varref's first segment's string: \\\"{}\\\"\", &string[]);\n                     println!(\"binding #{}: {}, resolves to {}\",\n                              binding_idx, bindings[binding_idx], binding_name);\n                     mtwt::with_sctable(|x| mtwt::display_sctable(x));\n@@ -1915,7 +1915,7 @@ foo_module!();\n         let cxbinds: Vec<&ast::Ident> =\n             bindings.iter().filter(|b| {\n                 let ident = token::get_ident(**b);\n-                let string = ident.get();\n+                let string = &ident[];\n                 \"xx\" == string\n             }).collect();\n         let cxbinds: &[&ast::Ident] = &cxbinds[];\n@@ -1929,7 +1929,7 @@ foo_module!();\n         // the xx binding should bind all of the xx varrefs:\n         for (idx,v) in varrefs.iter().filter(|p| {\n             p.segments.len() == 1\n-            && \"xx\" == token::get_ident(p.segments[0].identifier).get()\n+            && \"xx\" == &token::get_ident(p.segments[0].identifier)[]\n         }).enumerate() {\n             if mtwt::resolve(v.segments[0].identifier) != resolved_binding {\n                 println!(\"uh oh, xx binding didn't match xx varref:\");"}, {"sha": "56ab36355a9edd540f687fad504471aa78eeb0c3", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -1201,19 +1201,19 @@ mod test {\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name.clone(), source, Vec::new(), &sess).unwrap();\n         let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n-        assert_eq!(doc.get(), \"/// doc comment\");\n+        assert_eq!(&doc[], \"/// doc comment\");\n \n         let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name.clone(), source, Vec::new(), &sess).unwrap();\n-        let docs = item.attrs.iter().filter(|a| a.name().get() == \"doc\")\n-                    .map(|a| a.value_str().unwrap().get().to_string()).collect::<Vec<_>>();\n+        let docs = item.attrs.iter().filter(|a| &a.name()[] == \"doc\")\n+                    .map(|a| a.value_str().unwrap().to_string()).collect::<Vec<_>>();\n         let b: &[_] = &[\"/// doc comment\".to_string(), \"/// line 2\".to_string()];\n         assert_eq!(&docs[], b);\n \n         let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name, source, Vec::new(), &sess).unwrap();\n         let doc = first_attr_value_str_by_name(&item.attrs, \"doc\").unwrap();\n-        assert_eq!(doc.get(), \"/** doc comment\\n *  with CRLF */\");\n+        assert_eq!(&doc[], \"/** doc comment\\n *  with CRLF */\");\n     }\n \n     #[test]"}, {"sha": "36b3091852bce5c4e52f5a7e4588d791f6ca3f3b", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -37,9 +37,9 @@ impl LintPass for Pass {\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         let name = token::get_ident(it.ident);\n-        if name.get() == \"lintme\" {\n+        if &name[] == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n-        } else if name.get() == \"pleaselintme\" {\n+        } else if &name[] == \"pleaselintme\" {\n             cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\");\n         }\n     }"}, {"sha": "9020bb7b0fb2ebd6fb0637c2ce76813f87d57bdf", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -35,7 +35,7 @@ impl LintPass for Pass {\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         let name = token::get_ident(it.ident);\n-        if name.get() == \"lintme\" {\n+        if &name[] == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }\n     }"}, {"sha": "30a3183c808560d99b06a4a1e041e844f61bfdf4", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e01c62d5b6259d55b6688c8b059ac28e5dd03e/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=a2e01c62d5b6259d55b6688c8b059ac28e5dd03e", "patch": "@@ -1,3 +1,5 @@\n+// no-prefer-dynamic\n+\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}