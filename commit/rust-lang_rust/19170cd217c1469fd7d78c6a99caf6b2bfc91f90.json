{"sha": "19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTcwY2QyMTdjMTQ2OWZkN2Q3OGM2YTk5Y2FmNmIyYmZjOTFmOTA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-15T11:00:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-19T15:03:21Z"}, "message": "Fix cache hit stats", "tree": {"sha": "b1a920ed9c5154cad9e883a73a751e8b8c824c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a920ed9c5154cad9e883a73a751e8b8c824c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "html_url": "https://github.com/rust-lang/rust/commit/19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19170cd217c1469fd7d78c6a99caf6b2bfc91f90/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52872ca1cbefd48c3639dcf7d3b32fa0d460a1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/52872ca1cbefd48c3639dcf7d3b32fa0d460a1df", "html_url": "https://github.com/rust-lang/rust/commit/52872ca1cbefd48c3639dcf7d3b32fa0d460a1df"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "781ed03f224181f49ffae911d4ece855a94b6720", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19170cd217c1469fd7d78c6a99caf6b2bfc91f90/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19170cd217c1469fd7d78c6a99caf6b2bfc91f90/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "patch": "@@ -24,6 +24,8 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n use std::ptr;\n+#[cfg(debug_assertions)]\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub(crate) struct QueryStateShard<'tcx, D: QueryAccessors<'tcx> + ?Sized> {\n     pub(super) cache: <<D as QueryAccessors<'tcx>>::Cache as QueryCache<D::Key, D::Value>>::Sharded,\n@@ -51,7 +53,7 @@ pub(crate) struct QueryState<'tcx, D: QueryAccessors<'tcx> + ?Sized> {\n     pub(super) cache: D::Cache,\n     pub(super) shards: Sharded<QueryStateShard<'tcx, D>>,\n     #[cfg(debug_assertions)]\n-    pub(super) cache_hits: usize,\n+    pub(super) cache_hits: AtomicUsize,\n }\n \n impl<'tcx, Q: QueryAccessors<'tcx>> QueryState<'tcx, Q> {\n@@ -100,7 +102,7 @@ impl<'tcx, M: QueryAccessors<'tcx>> Default for QueryState<'tcx, M> {\n             cache: M::Cache::default(),\n             shards: Default::default(),\n             #[cfg(debug_assertions)]\n-            cache_hits: 0,\n+            cache_hits: AtomicUsize::new(0),\n         }\n     }\n }\n@@ -439,6 +441,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if unlikely!(self.prof.enabled()) {\n                     self.prof.query_cache_hit(index.into());\n                 }\n+                #[cfg(debug_assertions)]\n+                {\n+                    state.cache_hits.fetch_add(1, Ordering::Relaxed);\n+                }\n                 on_hit(value, index)\n             },\n             on_miss,"}, {"sha": "d257320d4eaf652242660491b94603750217d6ed", "filename": "src/librustc/ty/query/stats.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19170cd217c1469fd7d78c6a99caf6b2bfc91f90/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19170cd217c1469fd7d78c6a99caf6b2bfc91f90/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs?ref=19170cd217c1469fd7d78c6a99caf6b2bfc91f90", "patch": "@@ -6,6 +6,8 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n \n use std::any::type_name;\n use std::mem;\n+#[cfg(debug_assertions)]\n+use std::sync::atomic::Ordering;\n \n trait KeyStats {\n     fn key_stats(&self, stats: &mut QueryStats);\n@@ -42,7 +44,7 @@ fn stats<'tcx, Q: QueryAccessors<'tcx>>(\n     let mut stats = QueryStats {\n         name,\n         #[cfg(debug_assertions)]\n-        cache_hits: map.cache_hits,\n+        cache_hits: map.cache_hits.load(Ordering::Relaxed),\n         #[cfg(not(debug_assertions))]\n         cache_hits: 0,\n         key_size: mem::size_of::<Q::Key>(),\n@@ -108,8 +110,10 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         queries.iter().filter(|q| q.local_def_id_keys.is_some()).collect();\n     def_id_density.sort_by_key(|q| q.local_def_id_keys.unwrap());\n     println!(\"\\nLocal DefId density:\");\n+    let total = tcx.hir().definitions().def_index_count() as f64;\n     for q in def_id_density.iter().rev() {\n-        println!(\"   {} - {}\", q.name, q.local_def_id_keys.unwrap());\n+        let local = q.local_def_id_keys.unwrap();\n+        println!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);\n     }\n }\n "}]}