{"sha": "6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTRjZDRiMmNkODY0ZmJkNmYyZjhkMDM2OTAzZjg4YjZlYTc5YjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:01:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-01T17:08:24Z"}, "message": "std: Move a plattform-specific constant to sys::stdio", "tree": {"sha": "72941b7a0515fc878ffc9f63d48e25c6dcb80089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72941b7a0515fc878ffc9f63d48e25c6dcb80089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "html_url": "https://github.com/rust-lang/rust/commit/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2600dbf9a02a19acc92db5d980986cad2ea38d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2600dbf9a02a19acc92db5d980986cad2ea38d", "html_url": "https://github.com/rust-lang/rust/commit/8b2600dbf9a02a19acc92db5d980986cad2ea38d"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "193f396c0d4ab3a3d6a0fb0bbab3401effba48a9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -289,7 +289,7 @@ mod lazy;\n mod util;\n mod stdio;\n \n-const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n+const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n // A few methods below (read_to_string, read_line) will append data into a\n // `String` buffer, but we need to be pretty careful when doing this. The"}, {"sha": "1777b79ea1b59b422ed23c5f35e3ac0db1c7d241", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -214,15 +214,7 @@ pub fn stdin() -> Stdin {\n             _ => Maybe::Fake\n         };\n \n-        // The default buffer capacity is 64k, but apparently windows\n-        // doesn't like 64k reads on stdin. See #13304 for details, but the\n-        // idea is that on windows we use a slightly smaller buffer that's\n-        // been seen to be acceptable.\n-        Arc::new(Mutex::new(if cfg!(windows) {\n-            BufReader::with_capacity(8 * 1024, stdin)\n-        } else {\n-            BufReader::new(stdin)\n-        }))\n+        Arc::new(Mutex::new(BufReader::with_capacity(stdio::STDIN_BUF_SIZE, stdin)))\n     }\n }\n "}, {"sha": "23daeeb5187b7f75551ed3ea4612cdf194c715a4", "filename": "src/libstd/sys/common/io.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -12,6 +12,8 @@ use io::ErrorKind;\n use io::Read;\n use slice::from_raw_parts_mut;\n \n+pub const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n+\n // Provides read_to_end functionality over an uninitialized buffer.\n // This function is unsafe because it calls the underlying\n // read function with a slice into uninitialized memory. The default"}, {"sha": "273341b1918d1c0e6c42200b0b97b238fd9ff3d1", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -67,3 +67,4 @@ impl io::Write for Stderr {\n }\n \n pub const EBADF_ERR: i32 = ::libc::EBADF as i32;\n+pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;"}, {"sha": "72788776dedd6ebdf4f60143e9774334c6860cc1", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -207,3 +207,8 @@ fn invalid_encoding() -> io::Error {\n }\n \n pub const EBADF_ERR: i32 = ::sys::c::ERROR_INVALID_HANDLE as i32;\n+// The default buffer capacity is 64k, but apparently windows\n+// doesn't like 64k reads on stdin. See #13304 for details, but the\n+// idea is that on windows we use a slightly smaller buffer that's\n+// been seen to be acceptable.\n+pub const STDIN_BUF_SIZE: usize = 8 * 1024;"}, {"sha": "6ce5f7ee7fe274672cc3f10d24e5ceac579418ed", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=6d54cd4b2cd864fbd6f2f8d036903f88b6ea79b4", "patch": "@@ -66,7 +66,6 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/libstd/lib.rs\", // This could probably be done within the sys directory\n     \"src/libstd/rtdeps.rs\", // Until rustbuild replaces make\n     \"src/libstd/path.rs\",\n-    \"src/libstd/io/stdio.rs\",\n     \"src/libstd/num/f32.rs\",\n     \"src/libstd/num/f64.rs\",\n     \"src/libstd/sys/common/mod.rs\","}]}