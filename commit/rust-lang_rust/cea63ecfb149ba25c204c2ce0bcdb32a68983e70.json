{"sha": "cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYTYzZWNmYjE0OWJhMjVjMjA0YzJjZTBiY2RiMzJhNjg5ODNlNzA=", "commit": {"author": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2014-05-19T13:39:16Z"}, "committer": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2014-05-19T13:41:06Z"}, "message": "Minor doc fixes in various places", "tree": {"sha": "b1f94ed74698d1aa6ded5bf51ecc725e1c35270e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f94ed74698d1aa6ded5bf51ecc725e1c35270e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "html_url": "https://github.com/rust-lang/rust/commit/cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/comments", "author": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37", "html_url": "https://github.com/rust-lang/rust/commit/5d2edddc304a7cd8c95ba8b0beb06f0b4ebaca37"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "c312f2c1fe511f461aeaf4b935837046fe8f5a32", "filename": "src/doc/rust.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "patch": "@@ -2943,7 +2943,7 @@ See [Break expressions](#break-expressions) and [Continue expressions](#continue\n break_expr : \"break\" [ lifetime ];\n ~~~~\n \n-A `break` expression has an optional `label`.\n+A `break` expression has an optional _label_.\n If the label is absent, then executing a `break` expression immediately terminates the innermost loop enclosing it.\n It is only permitted in the body of a loop.\n If the label is present, then `break foo` terminates the loop with label `foo`,\n@@ -2956,7 +2956,7 @@ but must enclose it.\n continue_expr : \"continue\" [ lifetime ];\n ~~~~\n \n-A `continue` expression has an optional `label`.\n+A `continue` expression has an optional _label_.\n If the label is absent,\n then executing a `continue` expression immediately terminates the current iteration of the innermost loop enclosing it,\n returning control to the loop *head*.\n@@ -3115,7 +3115,7 @@ let x: List<int> = Cons(10, box Cons(11, box Nil));\n \n match x {\n     Cons(a, box Cons(b, _)) => {\n-        process_pair(a,b);\n+        process_pair(a, b);\n     }\n     Cons(10, _) => {\n         process_ten();\n@@ -3329,8 +3329,8 @@ order specified by the tuple type.\n An example of a tuple type and its use:\n \n ~~~~\n-type Pair<'a> = (int,&'a str);\n-let p: Pair<'static> = (10,\"hello\");\n+type Pair<'a> = (int, &'a str);\n+let p: Pair<'static> = (10, \"hello\");\n let (a, b) = p;\n assert!(b != \"world\");\n ~~~~"}, {"sha": "4e3688a060d2138febd799b2afbaa0d01899b1ef", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "patch": "@@ -2602,7 +2602,7 @@ fn main() {\n ~~~\n \n The full list of derivable traits is `Eq`, `TotalEq`, `Ord`,\n-`TotalOrd`, `Encodable` `Decodable`, `Clone`,\n+`TotalOrd`, `Encodable`, `Decodable`, `Clone`,\n `Hash`, `Rand`, `Default`, `Zero`, `FromPrimitive` and `Show`.\n \n # Crates and the module system"}, {"sha": "2a44d1417198b2f28bd933fd81da1b88d4db80a8", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "patch": "@@ -15,11 +15,14 @@\n //! Implementations of the following traits:\n //!\n //! * `Not`\n+//! * `BitAnd`\n+//! * `BitOr`\n+//! * `BitXor`\n //! * `Ord`\n //! * `TotalOrd`\n //! * `Eq`\n+//! * `TotalEq`\n //! * `Default`\n-//! * `Zero`\n //!\n //! A `to_bit` conversion function.\n "}, {"sha": "03eca8b12b825c4631a406153f7d569078f7e5da", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "patch": "@@ -11,7 +11,7 @@\n //! Numeric traits and functions for generic mathematics\n //!\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n-//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`.\n+//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64}`.\n \n #![allow(missing_doc)]\n \n@@ -97,7 +97,7 @@ pub trait One: Mul<Self, Self> {\n pub trait Signed: Num + Neg<Self> {\n     /// Computes the absolute value.\n     ///\n-    /// For float, f32, and f64, `NaN` will be returned if the number is `NaN`.\n+    /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.\n     fn abs(&self) -> Self;\n \n     /// The positive difference of two numbers.\n@@ -108,15 +108,17 @@ pub trait Signed: Num + Neg<Self> {\n \n     /// Returns the sign of the number.\n     ///\n-    /// For `float`, `f32`, `f64`:\n-    ///   * `1.0` if the number is positive, `+0.0` or `INFINITY`\n-    ///   * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-    ///   * `NaN` if the number is `NaN`\n+    /// For `f32` and `f64`:\n+    ///\n+    /// * `1.0` if the number is positive, `+0.0` or `INFINITY`\n+    /// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n+    /// * `NaN` if the number is `NaN`\n     ///\n     /// For `int`:\n-    ///   * `0` if the number is zero\n-    ///   * `1` if the number is positive\n-    ///   * `-1` if the number is negative\n+    ///\n+    /// * `0` if the number is zero\n+    /// * `1` if the number is positive\n+    /// * `-1` if the number is negative\n     fn signum(&self) -> Self;\n \n     /// Returns true if the number is positive and false if the number is zero or negative.\n@@ -128,7 +130,7 @@ pub trait Signed: Num + Neg<Self> {\n \n /// Computes the absolute value.\n ///\n-/// For float, f32, and f64, `NaN` will be returned if the number is `NaN`\n+/// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`\n #[inline(always)]\n pub fn abs<T: Signed>(value: T) -> T {\n     value.abs()\n@@ -145,15 +147,17 @@ pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n \n /// Returns the sign of the number.\n ///\n-/// For float, f32, f64:\n-/// - `1.0` if the number is positive, `+0.0` or `INFINITY`\n-/// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-/// - `NAN` if the number is `NAN`\n+/// For `f32` and `f64`:\n+///\n+/// * `1.0` if the number is positive, `+0.0` or `INFINITY`\n+/// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n+/// * `NaN` if the number is `NaN`\n ///\n /// For int:\n-/// - `0` if the number is zero\n-/// - `1` if the number is positive\n-/// - `-1` if the number is negative\n+///\n+/// * `0` if the number is zero\n+/// * `1` if the number is positive\n+/// * `-1` if the number is negative\n #[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n \n /// A trait for values which cannot be negative"}, {"sha": "40167718236ef6798c7bebd0d0f76f93a63ed023", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea63ecfb149ba25c204c2ce0bcdb32a68983e70/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=cea63ecfb149ba25c204c2ce0bcdb32a68983e70", "patch": "@@ -11,7 +11,7 @@\n //! Numeric traits and functions for generic mathematics\n //!\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n-//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`.\n+//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64}`.\n \n #![allow(missing_doc)]\n "}]}