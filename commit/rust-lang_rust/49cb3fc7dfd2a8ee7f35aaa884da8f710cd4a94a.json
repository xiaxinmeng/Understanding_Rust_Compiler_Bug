{"sha": "49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Y2IzZmM3ZGZkMmE4ZWU3ZjM1YWFhODg0ZGE4ZjcxMGNkNGE5NGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-02T00:49:36Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-02T00:49:57Z"}, "message": "Remove remaining references to option::t outside option itself", "tree": {"sha": "c42edd27f47c8a78cc212391c093992d3bde7f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c42edd27f47c8a78cc212391c093992d3bde7f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "html_url": "https://github.com/rust-lang/rust/commit/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb92d41775e633fbc177b1dd163a799260835a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb92d41775e633fbc177b1dd163a799260835a8", "html_url": "https://github.com/rust-lang/rust/commit/4eb92d41775e633fbc177b1dd163a799260835a8"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "21028655626c55c617ea4aaec3f1d4aeee16feb0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "patch": "@@ -103,7 +103,7 @@ pure fn to_digit(c: char) -> u8 unsafe {\n   brief = \"Convert a char to the corresponding digit. Returns none when \\\n            character is not a valid hexadecimal digit.\"\n )]\n-pure fn maybe_digit(c: char) -> option::t<u8> {\n+pure fn maybe_digit(c: char) -> option<u8> {\n     alt c {\n       '0' to '9' { option::some(c as u8 - ('0' as u8)) }\n       'a' to 'z' { option::some(c as u8 + 10u8 - ('a' as u8)) }"}, {"sha": "3f58548684c5806c0706652bf5c121ac652f65e0", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "patch": "@@ -69,7 +69,7 @@ mod ct {\n \n     // A formatted conversion from an expression to a string\n     type conv =\n-        {param: option::t<int>,\n+        {param: option<int>,\n          flags: [flag],\n          width: count,\n          precision: count,\n@@ -115,7 +115,7 @@ mod ct {\n         ret pieces;\n     }\n     fn peek_num(s: str, i: uint, lim: uint) ->\n-       option::t<{num: uint, next: uint}> {\n+       option<{num: uint, next: uint}> {\n         if i >= lim { ret none; }\n         let c = s[i];\n         if !('0' as u8 <= c && c <= '9' as u8) { ret option::none; }\n@@ -145,7 +145,7 @@ mod ct {\n              next: ty.next};\n     }\n     fn parse_parameter(s: str, i: uint, lim: uint) ->\n-       {param: option::t<int>, next: uint} {\n+       {param: option<int>, next: uint} {\n         if i >= lim { ret {param: none, next: i}; }\n         let num = peek_num(s, i, lim);\n         ret alt num {"}, {"sha": "3b422c994e886128e29367c8c17cabf53d9ebbeb", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "patch": "@@ -122,7 +122,7 @@ fn spawn(+f: fn~()) -> task {\n }\n \n fn spawn_inner(-f: fn~(),\n-            notify: option::t<comm::chan<task_notification>>) -> task unsafe {\n+            notify: option<comm::chan<task_notification>>) -> task unsafe {\n     let closure: *rust_closure = unsafe::reinterpret_cast(ptr::addr_of(f));\n     #debug(\"spawn: closure={%x,%x}\", (*closure).fnptr, (*closure).envptr);\n     let id = rustrt::new_task();"}, {"sha": "bb88ad3c5617240912a72ad61c2af33943a543ce", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=49cb3fc7dfd2a8ee7f35aaa884da8f710cd4a94a", "patch": "@@ -230,7 +230,7 @@ Returns:\n An option containing the last element of `v` if `v` is not empty, or\n none if `v` is empty.\n */\n-pure fn last<T: copy>(v: [const T]) -> option::t<T> {\n+pure fn last<T: copy>(v: [const T]) -> option<T> {\n     if len(v) == 0u { ret none; }\n     ret some(v[len(v) - 1u]);\n }\n@@ -445,7 +445,7 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n */\n-fn filter_map<T: copy, U: copy>(v: [const T], f: fn(T) -> option::t<U>)\n+fn filter_map<T: copy, U: copy>(v: [const T], f: fn(T) -> option<U>)\n     -> [U] {\n     let result = [];\n     for elem: T in v {\n@@ -599,7 +599,7 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n-fn find<T: copy>(v: [T], f: fn(T) -> bool) -> option::t<T> {\n+fn find<T: copy>(v: [T], f: fn(T) -> bool) -> option<T> {\n     for elt: T in v { if f(elt) { ret some(elt); } }\n     ret none;\n }\n@@ -614,7 +614,7 @@ Returns:\n option::some(uint) - The first index containing a matching value\n option::none - No elements matched\n */\n-fn position<T>(x: T, v: [T]) -> option::t<uint> {\n+fn position<T>(x: T, v: [T]) -> option<uint> {\n     let i: uint = 0u;\n     while i < len(v) { if x == v[i] { ret some::<uint>(i); } i += 1u; }\n     ret none;\n@@ -625,7 +625,7 @@ Function: position_pred\n \n Find the first index for which the value matches some predicate\n */\n-fn position_pred<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n+fn position_pred<T>(v: [T], f: fn(T) -> bool) -> option<uint> {\n     let i: uint = 0u;\n     while i < len(v) { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n     ret none;\n@@ -1010,7 +1010,7 @@ mod tests {\n \n     pure fn is_equal(&&x: uint, &&y:uint) -> bool { ret x == y; }\n \n-    fn square_if_odd(&&n: uint) -> option::t<uint> {\n+    fn square_if_odd(&&n: uint) -> option<uint> {\n         ret if n % 2u == 1u { some(n * n) } else { none };\n     }\n \n@@ -1267,7 +1267,7 @@ mod tests {\n         assert (w[1] == 9u);\n         assert (w[2] == 25u);\n \n-        fn halve(&&i: int) -> option::t<int> {\n+        fn halve(&&i: int) -> option<int> {\n             if i % 2 == 0 {\n                 ret option::some::<int>(i / 2);\n             } else { ret option::none::<int>; }"}]}