{"sha": "d7741d1610e4dbcc058341273e15265b7aaa4797", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzQxZDE2MTBlNGRiY2MwNTgzNDEyNzNlMTUyNjViN2FhYTQ3OTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-05T10:09:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-05T10:09:06Z"}, "message": "Allow `#anchor` linking of config options", "tree": {"sha": "67aae720151946755e3e7e74375af754202b6215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67aae720151946755e3e7e74375af754202b6215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7741d1610e4dbcc058341273e15265b7aaa4797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7741d1610e4dbcc058341273e15265b7aaa4797", "html_url": "https://github.com/rust-lang/rust/commit/d7741d1610e4dbcc058341273e15265b7aaa4797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7741d1610e4dbcc058341273e15265b7aaa4797/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0708bfeb7270923be5a2059ad5b99de183e667ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0708bfeb7270923be5a2059ad5b99de183e667ba", "html_url": "https://github.com/rust-lang/rust/commit/0708bfeb7270923be5a2059ad5b99de183e667ba"}], "stats": {"total": 111, "additions": 55, "deletions": 56}, "files": [{"sha": "a5b1d90b1dc5e1ded204c525e787a2e969a9f836", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7741d1610e4dbcc058341273e15265b7aaa4797/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7741d1610e4dbcc058341273e15265b7aaa4797/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d7741d1610e4dbcc058341273e15265b7aaa4797", "patch": "@@ -777,9 +777,8 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n     fields\n         .iter()\n         .map(|(field, _ty, doc, default)| {\n-            let name = field.replace(\"_\", \".\");\n-            let name = format!(\"rust-analyzer.{} (default: `{}`)\", name, default);\n-            format!(\"{}::\\n{}\\n\", name, doc.join(\" \"))\n+            let name = format!(\"rust-analyzer.{}\", field.replace(\"_\", \".\"));\n+            format!(\"[[{}]]{} (default: `{}`)::\\n{}\\n\", name, name, default, doc.join(\" \"))\n         })\n         .collect::<String>()\n }"}, {"sha": "e109f2b01667035a3a3c1e2f77433e58ae8febca", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d7741d1610e4dbcc058341273e15265b7aaa4797/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/d7741d1610e4dbcc058341273e15265b7aaa4797/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=d7741d1610e4dbcc058341273e15265b7aaa4797", "patch": "@@ -1,106 +1,106 @@\n-rust-analyzer.assist.importMergeBehaviour (default: `\"full\"`)::\n+[[rust-analyzer.assist.importMergeBehaviour]]rust-analyzer.assist.importMergeBehaviour (default: `\"full\"`)::\n  The strategy to use when inserting new imports or merging imports.\n-rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n+[[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n  The path structure for newly inserted paths to use.\n-rust-analyzer.callInfo.full (default: `true`)::\n+[[rust-analyzer.callInfo.full]]rust-analyzer.callInfo.full (default: `true`)::\n  Show function name and docs in parameter hints.\n-rust-analyzer.cargo.autoreload (default: `true`)::\n+[[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::\n  Automatically refresh project info via `cargo metadata` on  `Cargo.toml` changes.\n-rust-analyzer.cargo.allFeatures (default: `false`)::\n+[[rust-analyzer.cargo.allFeatures]]rust-analyzer.cargo.allFeatures (default: `false`)::\n  Activate all available features.\n-rust-analyzer.cargo.features (default: `[]`)::\n+[[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n  List of features to activate.\n-rust-analyzer.cargo.loadOutDirsFromCheck (default: `false`)::\n+[[rust-analyzer.cargo.loadOutDirsFromCheck]]rust-analyzer.cargo.loadOutDirsFromCheck (default: `false`)::\n  Run `cargo check` on startup to get the correct value for package  OUT_DIRs.\n-rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n+[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n  Do not activate the `default` feature.\n-rust-analyzer.cargo.target (default: `null`)::\n+[[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n  Compilation target (target triple).\n-rust-analyzer.cargo.noSysroot (default: `false`)::\n+[[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n  Internal config for debugging, disables loading of sysroot crates.\n-rust-analyzer.checkOnSave.enable (default: `true`)::\n+[[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n  Run specified `cargo check` command for diagnostics on save.\n-rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n+[[rust-analyzer.checkOnSave.allFeatures]]rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n  Check with all features (will be passed as `--all-features`).  Defaults to `#rust-analyzer.cargo.allFeatures#`.\n-rust-analyzer.checkOnSave.allTargets (default: `true`)::\n+[[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n  Check all targets and tests (will be passed as `--all-targets`).\n-rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n+[[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n  Cargo command to use for `cargo check`.\n-rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n+[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n  Do not activate the `default` feature.\n-rust-analyzer.checkOnSave.target (default: `null`)::\n+[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n  Check for a specific target. Defaults to  `#rust-analyzer.cargo.target#`.\n-rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n+[[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n  Extra arguments for `cargo check`.\n-rust-analyzer.checkOnSave.features (default: `null`)::\n+[[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n  List of features to activate. Defaults to  `#rust-analyzer.cargo.features#`.\n-rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n+[[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n  Advanced option, fully override the command rust-analyzer uses for  checking. The command should include `--message-format=json` or  similar option.\n-rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n+[[rust-analyzer.completion.addCallArgumentSnippets]]rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n  Whether to add argument snippets when completing functions.\n-rust-analyzer.completion.addCallParenthesis (default: `true`)::\n+[[rust-analyzer.completion.addCallParenthesis]]rust-analyzer.completion.addCallParenthesis (default: `true`)::\n  Whether to add parenthesis when completing functions.\n-rust-analyzer.completion.postfix.enable (default: `true`)::\n+[[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n  Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n-rust-analyzer.completion.autoimport.enable (default: `true`)::\n+[[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n  Toggles the additional completions that automatically add imports when completed.  Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n-rust-analyzer.diagnostics.enable (default: `true`)::\n+[[rust-analyzer.diagnostics.enable]]rust-analyzer.diagnostics.enable (default: `true`)::\n  Whether to show native rust-analyzer diagnostics.\n-rust-analyzer.diagnostics.enableExperimental (default: `true`)::\n+[[rust-analyzer.diagnostics.enableExperimental]]rust-analyzer.diagnostics.enableExperimental (default: `true`)::\n  Whether to show experimental rust-analyzer diagnostics that might  have more false positives than usual.\n-rust-analyzer.diagnostics.disabled (default: `[]`)::\n+[[rust-analyzer.diagnostics.disabled]]rust-analyzer.diagnostics.disabled (default: `[]`)::\n  List of rust-analyzer diagnostics to disable.\n-rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n+[[rust-analyzer.diagnostics.warningsAsHint]]rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n  List of warnings that should be displayed with info severity.\\n\\nThe  warnings will be indicated by a blue squiggly underline in code and  a blue icon in the `Problems Panel`.\n-rust-analyzer.diagnostics.warningsAsInfo (default: `[]`)::\n+[[rust-analyzer.diagnostics.warningsAsInfo]]rust-analyzer.diagnostics.warningsAsInfo (default: `[]`)::\n  List of warnings that should be displayed with hint severity.\\n\\nThe  warnings will be indicated by faded text or three dots in code and  will not show up in the `Problems Panel`.\n-rust-analyzer.files.watcher (default: `\"client\"`)::\n+[[rust-analyzer.files.watcher]]rust-analyzer.files.watcher (default: `\"client\"`)::\n  Controls file watching implementation.\n-rust-analyzer.hoverActions.debug (default: `true`)::\n+[[rust-analyzer.hoverActions.debug]]rust-analyzer.hoverActions.debug (default: `true`)::\n  Whether to show `Debug` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n-rust-analyzer.hoverActions.enable (default: `true`)::\n+[[rust-analyzer.hoverActions.enable]]rust-analyzer.hoverActions.enable (default: `true`)::\n  Whether to show HoverActions in Rust files.\n-rust-analyzer.hoverActions.gotoTypeDef (default: `true`)::\n+[[rust-analyzer.hoverActions.gotoTypeDef]]rust-analyzer.hoverActions.gotoTypeDef (default: `true`)::\n  Whether to show `Go to Type Definition` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n-rust-analyzer.hoverActions.implementations (default: `true`)::\n+[[rust-analyzer.hoverActions.implementations]]rust-analyzer.hoverActions.implementations (default: `true`)::\n  Whether to show `Implementations` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n-rust-analyzer.hoverActions.run (default: `true`)::\n+[[rust-analyzer.hoverActions.run]]rust-analyzer.hoverActions.run (default: `true`)::\n  Whether to show `Run` action. Only applies when  `#rust-analyzer.hoverActions.enable#` is set.\n-rust-analyzer.hoverActions.linksInHover (default: `true`)::\n+[[rust-analyzer.hoverActions.linksInHover]]rust-analyzer.hoverActions.linksInHover (default: `true`)::\n  Use markdown syntax for links in hover.\n-rust-analyzer.inlayHints.chainingHints (default: `true`)::\n+[[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n  Whether to show inlay type hints for method chains.\n-rust-analyzer.inlayHints.maxLength (default: `null`)::\n+[[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `null`)::\n  Maximum length for inlay hints. Default is unlimited.\n-rust-analyzer.inlayHints.parameterHints (default: `true`)::\n+[[rust-analyzer.inlayHints.parameterHints]]rust-analyzer.inlayHints.parameterHints (default: `true`)::\n  Whether to show function parameter name inlay hints at the call  site.\n-rust-analyzer.inlayHints.typeHints (default: `true`)::\n+[[rust-analyzer.inlayHints.typeHints]]rust-analyzer.inlayHints.typeHints (default: `true`)::\n  Whether to show inlay type hints for variables.\n-rust-analyzer.lens.debug (default: `true`)::\n+[[rust-analyzer.lens.debug]]rust-analyzer.lens.debug (default: `true`)::\n  Whether to show `Debug` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n-rust-analyzer.lens.enable (default: `true`)::\n+[[rust-analyzer.lens.enable]]rust-analyzer.lens.enable (default: `true`)::\n  Whether to show CodeLens in Rust files.\n-rust-analyzer.lens.implementations (default: `true`)::\n+[[rust-analyzer.lens.implementations]]rust-analyzer.lens.implementations (default: `true`)::\n  Whether to show `Implementations` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n-rust-analyzer.lens.run (default: `true`)::\n+[[rust-analyzer.lens.run]]rust-analyzer.lens.run (default: `true`)::\n  Whether to show `Run` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n-rust-analyzer.lens.methodReferences (default: `false`)::\n+[[rust-analyzer.lens.methodReferences]]rust-analyzer.lens.methodReferences (default: `false`)::\n  Whether to show `Method References` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n-rust-analyzer.linkedProjects (default: `[]`)::\n+[[rust-analyzer.linkedProjects]]rust-analyzer.linkedProjects (default: `[]`)::\n  Disable project auto-discovery in favor of explicitly specified set  of projects.\\n\\nElements must be paths pointing to `Cargo.toml`,  `rust-project.json`, or JSON objects in `rust-project.json` format.\n-rust-analyzer.lruCapacity (default: `null`)::\n+[[rust-analyzer.lruCapacity]]rust-analyzer.lruCapacity (default: `null`)::\n  Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\n-rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n+[[rust-analyzer.notifications.cargoTomlNotFound]]rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n  Whether to show `can't find Cargo.toml` error message.\n-rust-analyzer.procMacro.enable (default: `false`)::\n+[[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `false`)::\n  Enable Proc macro support, `#rust-analyzer.cargo.loadOutDirsFromCheck#` must be  enabled.\n-rust-analyzer.runnables.overrideCargo (default: `null`)::\n+[[rust-analyzer.runnables.overrideCargo]]rust-analyzer.runnables.overrideCargo (default: `null`)::\n  Command to be executed instead of 'cargo' for runnables.\n-rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n+[[rust-analyzer.runnables.cargoExtraArgs]]rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n  Additional arguments to be passed to cargo for runnables such as  tests or binaries.\\nFor example, it may be `--release`.\n-rust-analyzer.rustcSource (default: `null`)::\n+[[rust-analyzer.rustcSource]]rust-analyzer.rustcSource (default: `null`)::\n  Path to the rust compiler sources, for usage in rustc_private projects.\n-rust-analyzer.rustfmt.extraArgs (default: `[]`)::\n+[[rust-analyzer.rustfmt.extraArgs]]rust-analyzer.rustfmt.extraArgs (default: `[]`)::\n  Additional arguments to `rustfmt`.\n-rust-analyzer.rustfmt.overrideCommand (default: `null`)::\n+[[rust-analyzer.rustfmt.overrideCommand]]rust-analyzer.rustfmt.overrideCommand (default: `null`)::\n  Advanced option, fully override the command rust-analyzer uses for  formatting."}]}