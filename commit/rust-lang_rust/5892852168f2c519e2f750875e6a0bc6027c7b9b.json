{"sha": "5892852168f2c519e2f750875e6a0bc6027c7b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTI4NTIxNjhmMmM1MTllMmY3NTA4NzVlNmEwYmM2MDI3YzdiOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T01:12:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T01:12:38Z"}, "message": "Auto merge of #30585 - Ms2ger:ExplicitSelfCategory, r=brson", "tree": {"sha": "610cd9c43436c63d8d84f9d218657aa827a2468b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610cd9c43436c63d8d84f9d218657aa827a2468b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5892852168f2c519e2f750875e6a0bc6027c7b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5892852168f2c519e2f750875e6a0bc6027c7b9b", "html_url": "https://github.com/rust-lang/rust/commit/5892852168f2c519e2f750875e6a0bc6027c7b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5892852168f2c519e2f750875e6a0bc6027c7b9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2370d461a648035b54aae492e7df66256f0f18c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2370d461a648035b54aae492e7df66256f0f18c6", "html_url": "https://github.com/rust-lang/rust/commit/2370d461a648035b54aae492e7df66256f0f18c6"}, {"sha": "b2c370370e066ca622b05629ed6fd2806b7ba653", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c370370e066ca622b05629ed6fd2806b7ba653", "html_url": "https://github.com/rust-lang/rust/commit/b2c370370e066ca622b05629ed6fd2806b7ba653"}], "stats": {"total": 119, "additions": 59, "deletions": 60}, "files": [{"sha": "c8e34165b90212e9e924a8a38e5b423f809f5d52", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -254,13 +254,13 @@ fn virtual_call_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // autorefs) to `&self`. For now, we only accept `self`, `&self`\n     // and `Box<Self>`.\n     match method.explicit_self {\n-        ty::StaticExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::Static => {\n             return Some(MethodViolationCode::StaticMethod);\n         }\n \n-        ty::ByValueExplicitSelfCategory |\n-        ty::ByReferenceExplicitSelfCategory(..) |\n-        ty::ByBoxExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::ByValue |\n+        ty::ExplicitSelfCategory::ByReference(..) |\n+        ty::ExplicitSelfCategory::ByBox => {\n         }\n     }\n "}, {"sha": "5daa9bcd0d1ae0a89d49961d4f8fea668f9c4d67", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -12,7 +12,6 @@ pub use self::ImplOrTraitItemId::*;\n pub use self::ClosureKind::*;\n pub use self::Variance::*;\n pub use self::DtorKind::*;\n-pub use self::ExplicitSelfCategory::*;\n pub use self::ImplOrTraitItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::ImplOrTraitItem::*;\n@@ -2733,10 +2732,10 @@ impl<'tcx> ctxt<'tcx> {\n /// The category of explicit self.\n #[derive(Clone, Copy, Eq, PartialEq, Debug)]\n pub enum ExplicitSelfCategory {\n-    StaticExplicitSelfCategory,\n-    ByValueExplicitSelfCategory,\n-    ByReferenceExplicitSelfCategory(Region, hir::Mutability),\n-    ByBoxExplicitSelfCategory,\n+    Static,\n+    ByValue,\n+    ByReference(Region, hir::Mutability),\n+    ByBox,\n }\n \n /// A free variable referred to in a function."}, {"sha": "11d3068f065b7fb2578f35e38440116f6765decf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -919,13 +919,13 @@ impl fmt::Display for ty::InferTy {\n impl fmt::Display for ty::ExplicitSelfCategory {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(match *self {\n-            ty::StaticExplicitSelfCategory => \"static\",\n-            ty::ByValueExplicitSelfCategory => \"self\",\n-            ty::ByReferenceExplicitSelfCategory(_, hir::MutMutable) => {\n+            ty::ExplicitSelfCategory::Static => \"static\",\n+            ty::ExplicitSelfCategory::ByValue => \"self\",\n+            ty::ExplicitSelfCategory::ByReference(_, hir::MutMutable) => {\n                 \"&mut self\"\n             }\n-            ty::ByReferenceExplicitSelfCategory(_, hir::MutImmutable) => \"&self\",\n-            ty::ByBoxExplicitSelfCategory => \"Box<self>\",\n+            ty::ExplicitSelfCategory::ByReference(_, hir::MutImmutable) => \"&self\",\n+            ty::ExplicitSelfCategory::ByBox => \"Box<self>\",\n         })\n     }\n }"}, {"sha": "29fe9bc759ddece4164284ffe37daea4c7e9519b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -884,12 +884,12 @@ fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory {\n \n     let explicit_self_kind = string.as_bytes()[0];\n     match explicit_self_kind as char {\n-        's' => ty::StaticExplicitSelfCategory,\n-        'v' => ty::ByValueExplicitSelfCategory,\n-        '~' => ty::ByBoxExplicitSelfCategory,\n+        's' => ty::ExplicitSelfCategory::Static,\n+        'v' => ty::ExplicitSelfCategory::ByValue,\n+        '~' => ty::ExplicitSelfCategory::ByBox,\n         // FIXME(#4846) expl. region\n         '&' => {\n-            ty::ByReferenceExplicitSelfCategory(\n+            ty::ExplicitSelfCategory::ByReference(\n                 ty::ReEmpty,\n                 get_mutability(string.as_bytes()[1]))\n         }\n@@ -923,7 +923,7 @@ pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool {\n     let doc = cdata.lookup_item(id);\n     match item_sort(doc) {\n         Some('r') | Some('p') => {\n-            get_explicit_self(doc) == ty::StaticExplicitSelfCategory\n+            get_explicit_self(doc) == ty::ExplicitSelfCategory::Static\n         }\n         _ => false\n     }"}, {"sha": "f1c5d47df8889789f64535efc03960c156d6d980", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -498,16 +498,16 @@ fn encode_explicit_self(rbml_w: &mut Encoder,\n \n     // Encode the base self type.\n     match *explicit_self {\n-        ty::StaticExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::Static => {\n             rbml_w.wr_tagged_bytes(tag, &['s' as u8]);\n         }\n-        ty::ByValueExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::ByValue => {\n             rbml_w.wr_tagged_bytes(tag, &['v' as u8]);\n         }\n-        ty::ByBoxExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::ByBox => {\n             rbml_w.wr_tagged_bytes(tag, &['~' as u8]);\n         }\n-        ty::ByReferenceExplicitSelfCategory(_, m) => {\n+        ty::ExplicitSelfCategory::ByReference(_, m) => {\n             // FIXME(#4846) encode custom lifetime\n             let ch = encode_mutability(m);\n             rbml_w.wr_tagged_bytes(tag, &['&' as u8, ch]);\n@@ -675,7 +675,7 @@ fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_visibility(rbml_w, method_ty.vis);\n     encode_explicit_self(rbml_w, &method_ty.explicit_self);\n     match method_ty.explicit_self {\n-        ty::StaticExplicitSelfCategory => {\n+        ty::ExplicitSelfCategory::Static => {\n             encode_family(rbml_w, STATIC_METHOD_FAMILY);\n         }\n         _ => encode_family(rbml_w, METHOD_FAMILY)\n@@ -1340,7 +1340,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                 path.clone().chain(Some(elem)));\n \n                     match method_ty.explicit_self {\n-                        ty::StaticExplicitSelfCategory => {\n+                        ty::ExplicitSelfCategory::Static => {\n                             encode_family(rbml_w,\n                                           STATIC_METHOD_FAMILY);\n                         }\n@@ -1353,7 +1353,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                                     ecx.local_id(method_def_id));\n \n                     is_nonstatic_method = method_ty.explicit_self !=\n-                        ty::StaticExplicitSelfCategory;\n+                        ty::ExplicitSelfCategory::Static;\n                 }\n                 ty::TypeTraitItem(associated_type) => {\n                     encode_name(rbml_w, associated_type.name);"}, {"sha": "c34013a7bbbb1b56d8955e44954e748ec32ba02d", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -682,7 +682,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             def::DefMethod(did) => {\n                 let ti = self.tcx.impl_or_trait_item(did);\n                 if let ty::MethodTraitItem(m) = ti {\n-                    if m.explicit_self == ty::StaticExplicitSelfCategory {\n+                    if m.explicit_self == ty::ExplicitSelfCategory::Static {\n                         self.write_sub_path_trait_truncated(path);\n                     }\n                 }"}, {"sha": "607daa823744405471502480d70a12b32675e1e4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -1819,7 +1819,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n     // reference) in the arguments, then any anonymous regions in the output\n     // have that lifetime.\n     let implied_output_region = match explicit_self_category {\n-        Some(ty::ByReferenceExplicitSelfCategory(region, _)) => Ok(region),\n+        Some(ty::ExplicitSelfCategory::ByReference(region, _)) => Ok(region),\n         _ => find_implied_output_region(this.tcx(), &arg_tys, arg_pats)\n     };\n \n@@ -1850,9 +1850,9 @@ fn determine_self_type<'a, 'tcx>(this: &AstConv<'tcx>,\n {\n     let self_ty = self_info.untransformed_self_ty;\n     return match self_info.explicit_self.node {\n-        hir::SelfStatic => (None, Some(ty::StaticExplicitSelfCategory)),\n+        hir::SelfStatic => (None, Some(ty::ExplicitSelfCategory::Static)),\n         hir::SelfValue(_) => {\n-            (Some(self_ty), Some(ty::ByValueExplicitSelfCategory))\n+            (Some(self_ty), Some(ty::ExplicitSelfCategory::ByValue))\n         }\n         hir::SelfRegion(ref lifetime, mutability, _) => {\n             let region =\n@@ -1866,7 +1866,7 @@ fn determine_self_type<'a, 'tcx>(this: &AstConv<'tcx>,\n                     ty: self_ty,\n                     mutbl: mutability\n                 })),\n-             Some(ty::ByReferenceExplicitSelfCategory(region, mutability)))\n+             Some(ty::ExplicitSelfCategory::ByReference(region, mutability)))\n         }\n         hir::SelfExplicit(ref ast_type, _) => {\n             let explicit_type = ast_ty_to_ty(this, rscope, &**ast_type);\n@@ -1882,12 +1882,12 @@ fn determine_self_type<'a, 'tcx>(this: &AstConv<'tcx>,\n             // ```\n             // impl Foo for &T {\n             //     // Legal declarations:\n-            //     fn method1(self: &&T); // ByReferenceExplicitSelfCategory\n-            //     fn method2(self: &T); // ByValueExplicitSelfCategory\n-            //     fn method3(self: Box<&T>); // ByBoxExplicitSelfCategory\n+            //     fn method1(self: &&T); // ExplicitSelfCategory::ByReference\n+            //     fn method2(self: &T); // ExplicitSelfCategory::ByValue\n+            //     fn method3(self: Box<&T>); // ExplicitSelfCategory::ByBox\n             //\n             //     // Invalid cases will be caught later by `check_method_self_type`:\n-            //     fn method_err1(self: &mut T); // ByReferenceExplicitSelfCategory\n+            //     fn method_err1(self: &mut T); // ExplicitSelfCategory::ByReference\n             // }\n             // ```\n             //\n@@ -1898,7 +1898,7 @@ fn determine_self_type<'a, 'tcx>(this: &AstConv<'tcx>,\n             // call it by-ref, by-box as appropriate. For method1, for\n             // example, the impl type has one modifier, but the method\n             // type has two, so we end up with\n-            // ByReferenceExplicitSelfCategory.\n+            // ExplicitSelfCategory::ByReference.\n \n             let impl_modifiers = count_modifiers(self_info.untransformed_self_ty);\n             let method_modifiers = count_modifiers(explicit_type);\n@@ -1912,12 +1912,12 @@ fn determine_self_type<'a, 'tcx>(this: &AstConv<'tcx>,\n                    method_modifiers);\n \n             let category = if impl_modifiers >= method_modifiers {\n-                ty::ByValueExplicitSelfCategory\n+                ty::ExplicitSelfCategory::ByValue\n             } else {\n                 match explicit_type.sty {\n-                    ty::TyRef(r, mt) => ty::ByReferenceExplicitSelfCategory(*r, mt.mutbl),\n-                    ty::TyBox(_) => ty::ByBoxExplicitSelfCategory,\n-                    _ => ty::ByValueExplicitSelfCategory,\n+                    ty::TyRef(r, mt) => ty::ExplicitSelfCategory::ByReference(*r, mt.mutbl),\n+                    ty::TyBox(_) => ty::ExplicitSelfCategory::ByBox,\n+                    _ => ty::ExplicitSelfCategory::ByValue,\n                 }\n             };\n "}, {"sha": "554424a36b19af688259725a2efaf3ad87e5642a", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -55,17 +55,17 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // inscrutable, particularly for cases where one method has no\n     // self.\n     match (&trait_m.explicit_self, &impl_m.explicit_self) {\n-        (&ty::StaticExplicitSelfCategory,\n-         &ty::StaticExplicitSelfCategory) => {}\n-        (&ty::StaticExplicitSelfCategory, _) => {\n+        (&ty::ExplicitSelfCategory::Static,\n+         &ty::ExplicitSelfCategory::Static) => {}\n+        (&ty::ExplicitSelfCategory::Static, _) => {\n             span_err!(tcx.sess, impl_m_span, E0185,\n                 \"method `{}` has a `{}` declaration in the impl, \\\n                         but not in the trait\",\n                         trait_m.name,\n                         impl_m.explicit_self);\n             return;\n         }\n-        (_, &ty::StaticExplicitSelfCategory) => {\n+        (_, &ty::ExplicitSelfCategory::Static) => {\n             span_err!(tcx.sess, impl_m_span, E0186,\n                 \"method `{}` has a `{}` declaration in the trait, \\\n                         but not in the impl\","}, {"sha": "a961268c6c49bd8244e5072f6828c1c3a72a063c", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -274,13 +274,13 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                    method_ty.explicit_self);\n \n             match method_ty.explicit_self {\n-                ty::ByValueExplicitSelfCategory => {\n+                ty::ExplicitSelfCategory::ByValue => {\n                     // Trait method is fn(self), no transformation needed.\n                     assert!(!unsize);\n                     fcx.write_autoderef_adjustment(self_expr.id, autoderefs);\n                 }\n \n-                ty::ByReferenceExplicitSelfCategory(..) => {\n+                ty::ExplicitSelfCategory::ByReference(..) => {\n                     // Trait method is fn(&self) or fn(&mut self), need an\n                     // autoref. Pull the region etc out of the type of first argument.\n                     match transformed_self_ty.sty {"}, {"sha": "3bf24aba62467d21652501118268abe9d2695818", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -1144,10 +1144,10 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         match *item {\n             ty::ImplOrTraitItem::MethodTraitItem(ref method) =>\n                 match method.explicit_self {\n-                    ty::StaticExplicitSelfCategory => self.mode == Mode::Path,\n-                    ty::ByValueExplicitSelfCategory |\n-                    ty::ByReferenceExplicitSelfCategory(..) |\n-                    ty::ByBoxExplicitSelfCategory => true,\n+                    ty::ExplicitSelfCategory::Static => self.mode == Mode::Path,\n+                    ty::ExplicitSelfCategory::ByValue |\n+                    ty::ExplicitSelfCategory::ByReference(..) |\n+                    ty::ExplicitSelfCategory::ByBox => true,\n                 },\n             ty::ImplOrTraitItem::ConstTraitItem(..) => self.mode == Mode::Path,\n             _ => false,"}, {"sha": "4f3f716c20d61c76a67572db3972e51d6889d372", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -399,15 +399,15 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                method.name, method.explicit_self, self_ty, sig);\n \n         let rcvr_ty = match method.explicit_self {\n-            ty::StaticExplicitSelfCategory => return,\n-            ty::ByValueExplicitSelfCategory => self_ty,\n-            ty::ByReferenceExplicitSelfCategory(region, mutability) => {\n+            ty::ExplicitSelfCategory::Static => return,\n+            ty::ExplicitSelfCategory::ByValue => self_ty,\n+            ty::ExplicitSelfCategory::ByReference(region, mutability) => {\n                 fcx.tcx().mk_ref(fcx.tcx().mk_region(region), ty::TypeAndMut {\n                     ty: self_ty,\n                     mutbl: mutability\n                 })\n             }\n-            ty::ByBoxExplicitSelfCategory => fcx.tcx().mk_box(self_ty)\n+            ty::ExplicitSelfCategory::ByBox => fcx.tcx().mk_box(self_ty)\n         };\n         let rcvr_ty = fcx.instantiate_type_scheme(span, free_substs, &rcvr_ty);\n         let rcvr_ty = fcx.tcx().liberate_late_bound_regions(free_id_outlive,"}, {"sha": "d2a5fd457d2fba4cdc9183f06796ad1d05ee037b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892852168f2c519e2f750875e6a0bc6027c7b9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5892852168f2c519e2f750875e6a0bc6027c7b9b", "patch": "@@ -1306,27 +1306,27 @@ impl Clean<Item> for hir::ImplItem {\n impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let (self_, sig) = match self.explicit_self {\n-            ty::StaticExplicitSelfCategory => (hir::SelfStatic.clean(cx),\n-                                               self.fty.sig.clone()),\n+            ty::ExplicitSelfCategory::Static => (hir::SelfStatic.clean(cx),\n+                                                 self.fty.sig.clone()),\n             s => {\n                 let sig = ty::Binder(ty::FnSig {\n                     inputs: self.fty.sig.0.inputs[1..].to_vec(),\n                     ..self.fty.sig.0.clone()\n                 });\n                 let s = match s {\n-                    ty::ByValueExplicitSelfCategory => SelfValue,\n-                    ty::ByReferenceExplicitSelfCategory(..) => {\n+                    ty::ExplicitSelfCategory::ByValue => SelfValue,\n+                    ty::ExplicitSelfCategory::ByReference(..) => {\n                         match self.fty.sig.0.inputs[0].sty {\n                             ty::TyRef(r, mt) => {\n                                 SelfBorrowed(r.clean(cx), mt.mutbl.clean(cx))\n                             }\n                             _ => unreachable!(),\n                         }\n                     }\n-                    ty::ByBoxExplicitSelfCategory => {\n+                    ty::ExplicitSelfCategory::ByBox => {\n                         SelfExplicit(self.fty.sig.0.inputs[0].clean(cx))\n                     }\n-                    ty::StaticExplicitSelfCategory => unreachable!(),\n+                    ty::ExplicitSelfCategory::Static => unreachable!(),\n                 };\n                 (s, sig)\n             }"}]}