{"sha": "633d46d0245bf7f60b341c8df8da230c0b689396", "node_id": "C_kwDOAAsO6NoAKDYzM2Q0NmQwMjQ1YmY3ZjYwYjM0MWM4ZGY4ZGEyMzBjMGI2ODkzOTY", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-22T14:44:43Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-22T14:44:43Z"}, "message": "std: reimplement SGX thread joining to use `Parker`", "tree": {"sha": "d06e886243b49d87a6c8eecd161c1a65bc761565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d06e886243b49d87a6c8eecd161c1a65bc761565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633d46d0245bf7f60b341c8df8da230c0b689396", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmKzKtsACgkQcE4BSbAZ\nSzxYaQ/+O6lkubNKGrXWPX/QEfjtCHMMuJbPTQwJSZkSIDGIe/M1PQDBuTzSE8EI\nJClfBBwWc9vKF2aDPlwpoqn8WaCojbG/IZMIYQSNjtiI9cBx9RaeLWXCCb1TQcKT\npqzmG1d7sDROXrazn7uSOoXInBZDH3yjhIAjLyPplG2Bz9Pazc13540dnpowUQDC\nREpbiHbrEeXqwGlD22QZih06TsuAjYaK0AMdLErtweWcJKJX2Csk2DCxQxIGH0yO\noBfoVQG4Se9naZEUqPgCaRHh+CQyC8B/4cm1cnByDM4tmDoDfTFXr7kOWgcBHcgH\nzeD5x8VdXPtvXCyV1y9HTKez4+A7/9maCkMcJjzougk+SDVTZo6YsMV3rsttmRi4\nXPa3vCM3cuK2EtB1BY2sO8UMGVKTVhzx6cduVvET/APNUgnRrGLYcjnHuWBKCUFJ\noc4LUar4vECO9sg61lm/bGHf8GDNMAnpIytbFULk17oDAsh+RiDgejrZ2smVXRw6\n6+8lo/+a9fNHw9cWZnYXdSY67tKWFrHQ5T5XwmIDFB6pmtOWz63Uaz1WCkeIVUh1\n4BuE1jeIqrBBHU071oOH9RXYixaWQJOiTQlMVoYGL6ZfQTGqNWfFokc9+340wqIZ\nlpVt9OVJ+cf0cwaiiP7+o4Exv2evstOxt3rPxar4xJIEVCRKNQc=\n=EFD4\n-----END PGP SIGNATURE-----", "payload": "tree d06e886243b49d87a6c8eecd161c1a65bc761565\nparent 9678cece6de806693fc585225c0d6a4a5adaacd3\nauthor joboet <jonasboettiger@icloud.com> 1655909083 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1655909083 +0200\n\nstd: reimplement SGX thread joining to use `Parker`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633d46d0245bf7f60b341c8df8da230c0b689396", "html_url": "https://github.com/rust-lang/rust/commit/633d46d0245bf7f60b341c8df8da230c0b689396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633d46d0245bf7f60b341c8df8da230c0b689396/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9678cece6de806693fc585225c0d6a4a5adaacd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9678cece6de806693fc585225c0d6a4a5adaacd3", "html_url": "https://github.com/rust-lang/rust/commit/9678cece6de806693fc585225c0d6a4a5adaacd3"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "579f758c6cc339fe10f5eb65192851c5e48bf15c", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/633d46d0245bf7f60b341c8df8da230c0b689396/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633d46d0245bf7f60b341c8df8da230c0b689396/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=633d46d0245bf7f60b341c8df8da230c0b689396", "patch": "@@ -65,39 +65,36 @@ mod task_queue {\n /// execution. The signal is sent once all TLS destructors have finished at\n /// which point no new thread locals should be created.\n pub mod wait_notify {\n-    use super::super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n+    use super::super::thread_parker::Parker;\n+    use crate::pin::Pin;\n     use crate::sync::Arc;\n \n-    pub struct Notifier(Arc<SpinMutex<WaitVariable<bool>>>);\n+    pub struct Notifier(Arc<Parker>);\n \n     impl Notifier {\n         /// Notify the waiter. The waiter is either notified right away (if\n         /// currently blocked in `Waiter::wait()`) or later when it calls the\n         /// `Waiter::wait()` method.\n         pub fn notify(self) {\n-            let mut guard = self.0.lock();\n-            *guard.lock_var_mut() = true;\n-            let _ = WaitQueue::notify_one(guard);\n+            Pin::new(&*self.0).unpark()\n         }\n     }\n \n-    pub struct Waiter(Arc<SpinMutex<WaitVariable<bool>>>);\n+    pub struct Waiter(Arc<Parker>);\n \n     impl Waiter {\n         /// Wait for a notification. If `Notifier::notify()` has already been\n         /// called, this will return immediately, otherwise the current thread\n         /// is blocked until notified.\n         pub fn wait(self) {\n-            let guard = self.0.lock();\n-            if *guard.lock_var() {\n-                return;\n-            }\n-            WaitQueue::wait(guard, || {});\n+            // This is not actually `unsafe`, but it uses the `Parker` API,\n+            // which needs `unsafe` on some platforms.\n+            unsafe { Pin::new(&*self.0).park() }\n         }\n     }\n \n     pub fn new() -> (Notifier, Waiter) {\n-        let inner = Arc::new(SpinMutex::new(WaitVariable::new(false)));\n+        let inner = Arc::new(Parker::new_internal());\n         (Notifier(inner.clone()), Waiter(inner))\n     }\n }"}]}