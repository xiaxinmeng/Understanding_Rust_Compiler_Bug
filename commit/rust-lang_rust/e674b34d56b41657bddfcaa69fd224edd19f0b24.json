{"sha": "e674b34d56b41657bddfcaa69fd224edd19f0b24", "node_id": "C_kwDOAAsO6NoAKGU2NzRiMzRkNTZiNDE2NTdiZGRmY2FhNjlmZDIyNGVkZDE5ZjBiMjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T04:24:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T04:24:21Z"}, "message": "Rollup merge of #104959 - compiler-errors:revert-104269, r=lcnr\n\nRevert #104269 (to avoid spurious hang/test failure in CI)\n\nCauses hangs/memory overflows in the test suite apparently :cry:\n\nReopens #104225\nFixes #104957\nr? ``@lcnr``", "tree": {"sha": "39666cd0685703790f5147260f0a57b886f016af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39666cd0685703790f5147260f0a57b886f016af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e674b34d56b41657bddfcaa69fd224edd19f0b24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhYl1CRBK7hj4Ov3rIwAAr9kIAKeDvbRx90qFV2LAV5uh636j\nNZPPURD4tIt+gAthHa3Uu3not3ZcHiOul87Nlvc3MHfps0N7S2B99GCopnr88siD\nk/4of4z9BV/Zle7GU3neRCbCJN9ItmRmYktgRFiwddQJvrQewZNnLK08/E23zqI+\nRlv6tHQs/7y6jx87popjJk/k4DD7k9w9wgKcXGTlCzpXdF4lZ3eHsaH3YNZXD1tW\nqkbJXilhPobJJppd6DOMekP4zaFsHQRXFndiEcXLBbBUyLbBeI1gWU3KYPsWqKlw\nEbJlTyKPA0Lv14UdH5stAHpj4CTYYAcU9oM5UXfcvt7Nw72+WTBsfusMi7PtF6g=\n=V1aq\n-----END PGP SIGNATURE-----\n", "payload": "tree 39666cd0685703790f5147260f0a57b886f016af\nparent c81605ca91387cfd6717fcbd02367ce2e433fb78\nparent 4149923ff0a948161e85544c2f68dfd828ddb382\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669695861 +0100\ncommitter GitHub <noreply@github.com> 1669695861 +0100\n\nRollup merge of #104959 - compiler-errors:revert-104269, r=lcnr\n\nRevert #104269 (to avoid spurious hang/test failure in CI)\n\nCauses hangs/memory overflows in the test suite apparently :cry:\n\nReopens #104225\nFixes #104957\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e674b34d56b41657bddfcaa69fd224edd19f0b24", "html_url": "https://github.com/rust-lang/rust/commit/e674b34d56b41657bddfcaa69fd224edd19f0b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e674b34d56b41657bddfcaa69fd224edd19f0b24/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81605ca91387cfd6717fcbd02367ce2e433fb78", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81605ca91387cfd6717fcbd02367ce2e433fb78", "html_url": "https://github.com/rust-lang/rust/commit/c81605ca91387cfd6717fcbd02367ce2e433fb78"}, {"sha": "4149923ff0a948161e85544c2f68dfd828ddb382", "url": "https://api.github.com/repos/rust-lang/rust/commits/4149923ff0a948161e85544c2f68dfd828ddb382", "html_url": "https://github.com/rust-lang/rust/commit/4149923ff0a948161e85544c2f68dfd828ddb382"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "b364609d986ed42b6259519ad233071e8959c927", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674b34d56b41657bddfcaa69fd224edd19f0b24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674b34d56b41657bddfcaa69fd224edd19f0b24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e674b34d56b41657bddfcaa69fd224edd19f0b24", "patch": "@@ -2544,10 +2544,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);\n \n-            // We don't use `InferCtxt::predicate_may_hold` because that\n-            // will re-run predicates that overflow locally, which ends up\n-            // taking a really long time to compute.\n-            self.evaluate_obligation(&obligation).map_or(false, |eval| eval.may_apply())\n+            self.predicate_may_hold(&obligation)\n         })\n     }\n "}, {"sha": "09f30f976de914182519d7de9e5dffac3f1894bc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674b34d56b41657bddfcaa69fd224edd19f0b24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674b34d56b41657bddfcaa69fd224edd19f0b24/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e674b34d56b41657bddfcaa69fd224edd19f0b24", "patch": "@@ -1336,8 +1336,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.param_env,\n                     trait_pred_and_suggested_ty,\n                 );\n-                let suggested_ty_would_satisfy_obligation =\n-                    self.predicate_must_hold_modulo_regions(&new_obligation);\n+                let suggested_ty_would_satisfy_obligation = self\n+                    .evaluate_obligation_no_overflow(&new_obligation)\n+                    .must_apply_modulo_regions();\n                 if suggested_ty_would_satisfy_obligation {\n                     let sp = self\n                         .tcx"}, {"sha": "5f01645da5242c5fd26b4ba510fe93bdb60fcf63", "filename": "src/test/ui/traits/predicate_can_apply-hang.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1,6 +0,0 @@\n-fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n-    //~^ ERROR can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n-    x\n-}\n-\n-fn main() {}"}, {"sha": "49fe63b412ac91b3ec165282a82e421abe8c30cb", "filename": "src/test/ui/traits/predicate_can_apply-hang.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1,21 +0,0 @@\n-error[E0277]: can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n-  --> $DIR/predicate_can_apply-hang.rs:1:38\n-   |\n-LL | fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n-   |                                      ^^^^^^^^^^^^^^^^^ no implementation for `Vec<[[[B; 1]; 1]; 1]> == B`\n-LL |\n-LL |     x\n-   |     - return type was inferred to be `Vec<[[[B; 1]; 1]; 1]>` here\n-   |\n-   = help: the trait `PartialEq<B>` is not implemented for `Vec<[[[B; 1]; 1]; 1]>`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n-             <Vec<T, A> as PartialEq<&[U; N]>>\n-             <Vec<T, A> as PartialEq<&[U]>>\n-             <Vec<T, A> as PartialEq<&mut [U]>>\n-             <Vec<T, A> as PartialEq<[U; N]>>\n-             <Vec<T, A> as PartialEq<[U]>>\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "a8330c9b65c312d232b09b08a2a6c0c5f29073fd", "filename": "src/test/ui/typeck/hang-in-overflow.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1,19 +0,0 @@\n-// normalize-stderr-test \"the requirement `.*`\" -> \"the requirement `...`\"\n-// normalize-stderr-test \"required for `.*` to implement `.*`\" -> \"required for `...` to implement `...`\"\n-// normalize-stderr-test: \".*the full type name has been written to.*\\n\" -> \"\"\n-\n-// Currently this fatally aborts instead of hanging.\n-// Make sure at least that this doesn't turn into a hang.\n-\n-fn f() {\n-    foo::<_>();\n-    //~^ ERROR overflow evaluating the requirement\n-}\n-\n-fn foo<B>()\n-where\n-    Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n-{\n-}\n-\n-fn main() {}"}, {"sha": "7a7b85b19b4eee4acec356b30f56f7025dd6ba4c", "filename": "src/test/ui/typeck/hang-in-overflow.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81605ca91387cfd6717fcbd02367ce2e433fb78/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr?ref=c81605ca91387cfd6717fcbd02367ce2e433fb78", "patch": "@@ -1,22 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `...`\n-  --> $DIR/hang-in-overflow.rs:9:5\n-   |\n-LL |     foo::<_>();\n-   |     ^^^^^^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hang_in_overflow`)\n-   = note: required for `...` to implement `...`\n-   = note: 127 redundant requirements hidden\n-   = note: required for `...` to implement `...`\n-note: required by a bound in `foo`\n-  --> $DIR/hang-in-overflow.rs:15:28\n-   |\n-LL | fn foo<B>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n-   |                            ^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}]}