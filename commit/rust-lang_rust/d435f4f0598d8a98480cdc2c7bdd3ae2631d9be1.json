{"sha": "d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MzVmNGYwNTk4ZDhhOTg0ODBjZGMyYzdiZGQzYWUyNjMxZDliZTE=", "commit": {"author": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-12-31T19:09:18Z"}, "committer": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-12-31T20:29:39Z"}, "message": "Fix issue #11216 - Replace std::hashmap::{each_key, each_value} with iterators.", "tree": {"sha": "905609c924c31fb7dc2430524f1a6f74abac2da5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905609c924c31fb7dc2430524f1a6f74abac2da5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "html_url": "https://github.com/rust-lang/rust/commit/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250ca0eb85ca7bf4497cdf68ecbaa5f90dc7439d", "url": "https://api.github.com/repos/rust-lang/rust/commits/250ca0eb85ca7bf4497cdf68ecbaa5f90dc7439d", "html_url": "https://github.com/rust-lang/rust/commit/250ca0eb85ca7bf4497cdf68ecbaa5f90dc7439d"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "50459cd176b990ca9689932cc5eab149ff3a9bcd", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "patch": "@@ -426,10 +426,9 @@ impl CoherenceChecker {\n \n     pub fn check_implementation_coherence(&self) {\n         let trait_impls = self.crate_context.tcx.trait_impls.borrow();\n-        trait_impls.get().each_key(|&trait_id| {\n+        for &trait_id in trait_impls.get().keys() {\n             self.check_implementation_coherence_of(trait_id);\n-            true\n-        });\n+        }\n     }\n \n     pub fn check_implementation_coherence_of(&self, trait_def_id: DefId) {"}, {"sha": "5c3b18caa069f102020f500093487776eddeb474", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=d435f4f0598d8a98480cdc2c7bdd3ae2631d9be1", "patch": "@@ -57,6 +57,7 @@ use clone::Clone;\n use cmp::{Eq, Equiv};\n use default::Default;\n use hash::Hash;\n+use iter;\n use iter::{Iterator, FromIterator, Extendable};\n use iter::{FilterMap, Chain, Repeat, Zip};\n use num;\n@@ -525,14 +526,16 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         }\n     }\n \n-    /// Visit all keys\n-    pub fn each_key(&self, blk: |k: &K| -> bool) -> bool {\n-        self.iter().advance(|(k, _)| blk(k))\n+    /// An iterator visiting all keys in arbitrary order.\n+    /// Iterator element type is &'a K.\n+    pub fn keys<'a>(&'a self) -> HashMapKeyIterator<'a, K, V> {\n+        self.iter().map(|(k, _v)| k)\n     }\n \n-    /// Visit all values\n-    pub fn each_value<'a>(&'a self, blk: |v: &'a V| -> bool) -> bool {\n-        self.iter().advance(|(_, v)| blk(v))\n+    /// An iterator visiting all values in arbitrary order.\n+    /// Iterator element type is &'a V.\n+    pub fn values<'a>(&'a self) -> HashMapValueIterator<'a, K, V> {\n+        self.iter().map(|(_k, v)| v)\n     }\n \n     /// An iterator visiting all key-value pairs in arbitrary order.\n@@ -609,6 +612,14 @@ pub struct HashMapMoveIterator<K, V> {\n     priv iter: vec::MoveIterator<Option<Bucket<K, V>>>,\n }\n \n+/// HashMap keys iterator\n+pub type HashMapKeyIterator<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a K, HashMapIterator<'a, K, V>>;\n+\n+/// HashMap values iterator\n+pub type HashMapValueIterator<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a V, HashMapIterator<'a, K, V>>;\n+\n /// HashSet iterator\n #[deriving(Clone)]\n pub struct HashSetIterator<'a, K> {\n@@ -1015,6 +1026,28 @@ mod test_map {\n         assert_eq!(observed, 0xFFFF_FFFF);\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let vec = ~[(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<HashMap<int, char>>();\n+        let keys = map.keys().map(|&k| k).collect::<~[int]>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let vec = ~[(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<HashMap<int, char>>();\n+        let values = map.values().map(|&v| v).collect::<~[char]>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_find() {\n         let mut m = HashMap::new();"}]}