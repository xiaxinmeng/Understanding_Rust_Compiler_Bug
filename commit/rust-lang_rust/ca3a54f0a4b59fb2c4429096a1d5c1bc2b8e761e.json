{"sha": "ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhM2E1NGYwYTRiNTlmYjJjNDQyOTA5NmExZDVjMWJjMmI4ZTc2MWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-13T11:34:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-13T11:34:43Z"}, "message": "Merge #6852\n\n6852: Ignore lifetime params in substitutions r=matklad a=Veykril\n\n[`hir_ty::utils::Generics`](https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/utils.rs#L153) currently only assumes type parameters but not lifetime parameters and therefor creates incorrect index and length calculations, this PR just makes the use sites ignore LifetimeGenerics for now.\r\n\r\nThis fixes the panic at least locally for me for `analysis-stats`. Funnily enough this panic prevented me from using reference search for the `args` field to fix this problem.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c9c4847ae019de3cc61ecb5a908c99d8a41d3d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c4847ae019de3cc61ecb5a908c99d8a41d3d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf1fxUCRBK7hj4Ov3rIwAAdHIIABiCJBrOqNb2OsBQr3XlG2zP\nmTORghooOh4xCtSFHpq/7OrpjKiDiFYCFO50n5EpmMkOBeNJFjHMdDedT76Hm5xB\nWFN/g1Z8SmR+FuhEBEJhcwsrGYbyXnNPNP8utfZEgJxbIe4HuEggE1jaI6EMbaz3\nCJyCRhxy0zn6Xu1vKGG23oQLoVEPdlmIVOa03RI5BXTZWY1KgtyOkRFdinhQ3Hx8\nXL1wT619MC0pSIqECG/2Al6PuQOf36qYi7E0sD9ameUrJZqLnSz1HZY/LTfwlzDi\nUA20Ep4WP/VE5i7ROAa0RLia/8Lqwh/jBS9b1iLDZUlKHgtxrlUavMmRmJFfquQ=\n=DUuM\n-----END PGP SIGNATURE-----\n", "payload": "tree c9c4847ae019de3cc61ecb5a908c99d8a41d3d17\nparent a15d19619e097b14b670064a4edc054a4251f479\nparent ae8a8020857080ea527cc1d0e57a592d6e587a64\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607859283 +0000\ncommitter GitHub <noreply@github.com> 1607859283 +0000\n\nMerge #6852\n\n6852: Ignore lifetime params in substitutions r=matklad a=Veykril\n\n[`hir_ty::utils::Generics`](https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/utils.rs#L153) currently only assumes type parameters but not lifetime parameters and therefor creates incorrect index and length calculations, this PR just makes the use sites ignore LifetimeGenerics for now.\r\n\r\nThis fixes the panic at least locally for me for `analysis-stats`. Funnily enough this panic prevented me from using reference search for the `args` field to fix this problem.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "html_url": "https://github.com/rust-lang/rust/commit/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15d19619e097b14b670064a4edc054a4251f479", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15d19619e097b14b670064a4edc054a4251f479", "html_url": "https://github.com/rust-lang/rust/commit/a15d19619e097b14b670064a4edc054a4251f479"}, {"sha": "ae8a8020857080ea527cc1d0e57a592d6e587a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a8020857080ea527cc1d0e57a592d6e587a64", "html_url": "https://github.com/rust-lang/rust/commit/ae8a8020857080ea527cc1d0e57a592d6e587a64"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "b08167281d96dc95bad99fac2d59b7ee86afbf87", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "patch": "@@ -246,7 +246,10 @@ struct GenericParamsStorage {\n \n impl GenericParamsStorage {\n     fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n-        if params.types.is_empty() && params.where_predicates.is_empty() {\n+        if params.types.is_empty()\n+            && params.lifetimes.is_empty()\n+            && params.where_predicates.is_empty()\n+        {\n             return GenericParamsId::EMPTY;\n         }\n "}, {"sha": "2cdce2cefcee0dbc65c82a07085069f39dd9fb87", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "patch": "@@ -856,7 +856,12 @@ impl<'a> InferenceContext<'a> {\n         // handle provided type arguments\n         if let Some(generic_args) = generic_args {\n             // if args are provided, it should be all of them, but we can't rely on that\n-            for arg in generic_args.args.iter().take(type_params) {\n+            for arg in generic_args\n+                .args\n+                .iter()\n+                .filter(|arg| matches!(arg, GenericArg::Type(_)))\n+                .take(type_params)\n+            {\n                 match arg {\n                     GenericArg::Type(type_ref) => {\n                         let ty = self.make_ty(type_ref);"}, {"sha": "8392cb770658652db6bc1238157af30d86091de8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=ca3a54f0a4b59fb2c4429096a1d5c1bc2b8e761e", "patch": "@@ -565,7 +565,13 @@ fn substs_from_path_segment(\n             if generic_args.has_self_type { self_params + type_params } else { type_params };\n         let skip = if generic_args.has_self_type && self_params == 0 { 1 } else { 0 };\n         // if args are provided, it should be all of them, but we can't rely on that\n-        for arg in generic_args.args.iter().skip(skip).take(expected_num) {\n+        for arg in generic_args\n+            .args\n+            .iter()\n+            .filter(|arg| matches!(arg, GenericArg::Type(_)))\n+            .skip(skip)\n+            .take(expected_num)\n+        {\n             match arg {\n                 GenericArg::Type(type_ref) => {\n                     had_explicit_type_args = true;"}]}