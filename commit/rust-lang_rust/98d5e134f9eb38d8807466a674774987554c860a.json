{"sha": "98d5e134f9eb38d8807466a674774987554c860a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDVlMTM0ZjllYjM4ZDg4MDc0NjZhNjc0Nzc0OTg3NTU0Yzg2MGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-15T21:23:00Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:02:40Z"}, "message": "Tests illustrating the bug fixes for #27282 and #24535.", "tree": {"sha": "88500601092bfc21c8ed17c9788d334ce7bc5a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88500601092bfc21c8ed17c9788d334ce7bc5a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d5e134f9eb38d8807466a674774987554c860a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d5e134f9eb38d8807466a674774987554c860a", "html_url": "https://github.com/rust-lang/rust/commit/98d5e134f9eb38d8807466a674774987554c860a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d5e134f9eb38d8807466a674774987554c860a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eebd36c93de007f10ede2458431f25fa80bb98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eebd36c93de007f10ede2458431f25fa80bb98f", "html_url": "https://github.com/rust-lang/rust/commit/5eebd36c93de007f10ede2458431f25fa80bb98f"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "ac415e31f2b64e6d6877434bea1a66bc3650f498", "filename": "src/test/run-pass/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Frun-pass%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Frun-pass%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test illustrates that under NLL, we can remove our overly\n+// conservative approach for disallowing mutations of match inputs.\n+\n+// See further discussion on rust-lang/rust#24535 and\n+// rust-lang/rfcs#1006.\n+\n+// compile-flags: -Z disable-ast-check-for-mutation-in-guard\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    rust_issue_24535();\n+    rfcs_issue_1006_1();\n+    rfcs_issue_1006_2();\n+}\n+\n+fn rust_issue_24535() {\n+    fn compare(a: &u8, b: &mut u8) -> bool {\n+        a == b\n+    }\n+\n+    let a = 3u8;\n+\n+    match a {\n+        0 => panic!(\"nope\"),\n+        3 if compare(&a, &mut 3) => (),\n+        _ => panic!(\"nope\"),\n+    }\n+}\n+\n+fn rfcs_issue_1006_1() {\n+    let v = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n+    match Some(&v) {\n+        Some(iv) if iv.iter().any(|x| &x[..]==\"2\") => true,\n+        _ => panic!(\"nope\"),\n+    };\n+}\n+\n+fn rfcs_issue_1006_2() {\n+    #[inline(always)]\n+    fn check<'a, I: Iterator<Item=&'a i32>>(mut i: I) -> bool {\n+        i.any(|&x| x == 2)\n+    }\n+\n+    let slice = [1, 2, 3];\n+\n+    match 42 {\n+        _ if slice.iter().any(|&x| x == 2) => { true },\n+        _ => { panic!(\"nope\"); }\n+    };\n+\n+    // (This match is just illustrating how easy it was to circumvent\n+    // the checking performed for the previous `match`.)\n+    match 42 {\n+        _ if check(slice.iter()) => { true },\n+        _ => { panic!(\"nope\"); }\n+    };\n+}"}, {"sha": "b3be36e41e657408d9e02b083bb701a4d16b2960", "filename": "src/test/ui/issue-27282-move-match-input-into-guard.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.rs?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 27282: Example 2: This sidesteps the AST checks disallowing\n+// mutable borrows in match guards by hiding the mutable borrow in a\n+// guard behind a move (of the mutably borrowed match input) within a\n+// closure.\n+//\n+// This example is not rejected by AST borrowck (and then reliably\n+// reaches the panic code when executed, despite the compiler warning\n+// about that match arm being unreachable.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let b = &mut true;\n+    match b {\n+        &mut false => {},\n+        _ if { (|| { let bar = b; *bar = false; })();\n+                     //~^ ERROR cannot move out of `b` because it is borrowed [E0505]\n+                     false } => { },\n+        &mut true => { println!(\"You might think we should get here\"); },\n+        //~^ ERROR use of moved value: `*b` [E0382]\n+        _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n+    }\n+}"}, {"sha": "f89388f1738ead329beae9b062c429d1035c4fd0", "filename": "src/test/ui/issue-27282-move-match-input-into-guard.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,32 @@\n+error[E0505]: cannot move out of `b` because it is borrowed\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:26:16\n+   |\n+LL |        match b {\n+   |   _____-\n+   |  |_____|\n+   | ||\n+LL | ||         &mut false => {},\n+LL | ||         _ if { (|| { let bar = b; *bar = false; })();\n+   | ||                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ move out of `b` occurs here\n+LL | ||                      //~^ ERROR cannot move out of `b` because it is borrowed [E0505]\n+...  ||\n+LL | ||         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n+LL | ||     }\n+   | ||     -\n+   | ||_____|\n+   | |______borrow of `b` occurs here\n+   |        borrow later used here\n+\n+error[E0382]: use of moved value: `*b`\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:29:14\n+   |\n+LL |         _ if { (|| { let bar = b; *bar = false; })();\n+   |                ----------------------------------- value moved here\n+...\n+LL |         &mut true => { println!(\"You might think we should get here\"); },\n+   |              ^^^^ value used here after move\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0382, E0505.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "5b4c746a1b611e1725b5cf113d2a6031a20c328b", "filename": "src/test/ui/issue-27282-move-ref-mut-into-guard.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.rs?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 27282: Example 1: This sidesteps the AST checks disallowing\n+// mutable borrows in match guards by hiding the mutable borrow in a\n+// guard behind a move (of the ref mut pattern id) within a closure.\n+//\n+// This example is not rejected by AST borrowck (and then reliably\n+// segfaults when executed).\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if { (|| { let bar = foo; bar.take() })(); false } => {},\n+        //~^ ERROR cannot move out of borrowed content [E0507]\n+        Some(s) => std::process::exit(*s),\n+    }\n+}"}, {"sha": "f6ffa90069cc4c3519f7e078864d5a84b867dcad", "filename": "src/test/ui/issue-27282-move-ref-mut-into-guard.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:24:18\n+   |\n+LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "5d445c63ef49298c43cc5164bd163ee010d3660d", "filename": "src/test/ui/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 27282: This is a variation on issue-27282-move-ref-mut-into-guard.rs\n+//\n+// It reborrows instead of moving the `ref mut` pattern borrow. This\n+// means that our conservative check for mutation in guards will\n+// reject it. But I want to make sure that we continue to reject it\n+// (under NLL) even when that conservaive check goes away.\n+\n+// compile-flags: -Z disable-ast-check-for-mutation-in-guard\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let mut b = &mut true;\n+    match b {\n+        &mut false => {},\n+        ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n+                             //~^ ERROR cannot borrow immutable item `*r` as mutable\n+                             false } => { &mut *r; },\n+        &mut true => { println!(\"You might think we should get here\"); },\n+        _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n+    }\n+}"}, {"sha": "d767fdde9f217a52385cf3e84605483bca7057ec", "filename": "src/test/ui/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d5e134f9eb38d8807466a674774987554c860a/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=98d5e134f9eb38d8807466a674774987554c860a", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow immutable item `*r` as mutable\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:26:24\n+   |\n+LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}