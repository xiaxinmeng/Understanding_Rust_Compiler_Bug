{"sha": "88d1109600660d1acb471e85631e1ea349843fd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDExMDk2MDA2NjBkMWFjYjQ3MWU4NTYzMWUxZWEzNDk4NDNmZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-11T03:03:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-11T03:03:42Z"}, "message": "Auto merge of #68115 - Centril:rollup-e2fszdv, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67666 (make use of pointer::is_null)\n - #67806 (Extract `rustc_ast_passes`, move gating, & refactor linting)\n - #68043 (Add some missing timers)\n - #68074 (Add `llvm-skip-rebuild` flag to `x.py`)\n - #68079 (Clarify suggestion for E0013)\n - #68084 (Do not ICE on unicode next point)\n - #68102 (Inline some conversion methods around OsStr)\n - #68106 (Fix issue with using `self` module via indirection)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f661e1f13a4af426e1884d557299cf0f40319da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f661e1f13a4af426e1884d557299cf0f40319da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d1109600660d1acb471e85631e1ea349843fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d1109600660d1acb471e85631e1ea349843fd9", "html_url": "https://github.com/rust-lang/rust/commit/88d1109600660d1acb471e85631e1ea349843fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d1109600660d1acb471e85631e1ea349843fd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6217972644588a3be4fecb85b195f17b0220047", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6217972644588a3be4fecb85b195f17b0220047", "html_url": "https://github.com/rust-lang/rust/commit/e6217972644588a3be4fecb85b195f17b0220047"}, {"sha": "04a340f61f937b24262b517770afd08db783ac69", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a340f61f937b24262b517770afd08db783ac69", "html_url": "https://github.com/rust-lang/rust/commit/04a340f61f937b24262b517770afd08db783ac69"}], "stats": {"total": 1766, "additions": 983, "deletions": 783}, "files": [{"sha": "54ad60e71506b04e00648ce1251de3066881c4ef", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -3363,6 +3363,21 @@ dependencies = [\n  \"syntax\",\n ]\n \n+[[package]]\n+name = \"rustc_ast_passes\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_parse\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_builtin_macros\"\n version = \"0.0.0\"\n@@ -3375,6 +3390,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3528,11 +3544,13 @@ name = \"rustc_expand\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n+ \"rustc_ast_passes\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -3602,6 +3620,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc-rayon\",\n  \"rustc_ast_lowering\",\n+ \"rustc_ast_passes\",\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n@@ -3619,6 +3638,7 @@ dependencies = [\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n  \"rustc_resolve\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_traits\",\n@@ -3735,6 +3755,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n@@ -3753,7 +3774,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n- \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"syntax\",\n@@ -3833,6 +3854,7 @@ dependencies = [\n  \"log\",\n  \"num_cpus\",\n  \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\","}, {"sha": "110c8b844d54c6d68357b3161e753fda23c7d2a1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -493,9 +493,13 @@ impl Config {\n             config.mandir = install.mandir.clone().map(PathBuf::from);\n         }\n \n+        // We want the llvm-skip-rebuild flag to take precedence over the\n+        // skip-rebuild config.toml option so we store it separately\n+        // so that we can infer the right value\n+        let mut llvm_skip_rebuild = flags.llvm_skip_rebuild;\n+\n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n-        let mut llvm_skip_rebuild = None;\n         let mut llvm_assertions = None;\n         let mut debug = None;\n         let mut debug_assertions = None;\n@@ -517,7 +521,7 @@ impl Config {\n             }\n             set(&mut config.ninja, llvm.ninja);\n             llvm_assertions = llvm.assertions;\n-            llvm_skip_rebuild = llvm.skip_rebuild;\n+            llvm_skip_rebuild = llvm_skip_rebuild.or(llvm.skip_rebuild);\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_thin_lto, llvm.thin_lto);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);"}, {"sha": "1fbdd50a51133d4636c7b1bf5069c887a32dfcb0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -38,6 +38,8 @@ pub struct Flags {\n     //\n     // true => deny, false => warn\n     pub deny_warnings: Option<bool>,\n+\n+    pub llvm_skip_rebuild: Option<bool>,\n }\n \n pub enum Subcommand {\n@@ -150,6 +152,14 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"VALUE\",\n         );\n         opts.optopt(\"\", \"error-format\", \"rustc error format\", \"FORMAT\");\n+        opts.optopt(\n+            \"\",\n+            \"llvm-skip-rebuild\",\n+            \"whether rebuilding llvm should be skipped \\\n+             a VALUE of TRUE indicates that llvm will not be rebuilt \\\n+             VALUE overrides the skip-rebuild option in config.toml.\",\n+            \"VALUE\",\n+        );\n \n         // fn usage()\n         let usage =\n@@ -487,6 +497,9 @@ Arguments:\n                 .map(|p| p.into())\n                 .collect::<Vec<_>>(),\n             deny_warnings: parse_deny_warnings(&matches),\n+            llvm_skip_rebuild: matches.opt_str(\"llvm-skip-rebuild\").map(|s| s.to_lowercase()).map(\n+                |s| s.parse::<bool>().expect(\"`llvm-skip-rebuild` should be either true or false\"),\n+            ),\n         }\n     }\n }"}, {"sha": "9d3fe5254f8a9de7b254d930bd133f031097dedb", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -63,7 +63,7 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let sz = mem::size_of_val(&data);\n     let exception = __cxa_allocate_exception(sz);\n-    if exception == ptr::null_mut() {\n+    if exception.is_null() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n     ptr::write(exception as *mut _, data);"}, {"sha": "3f18f4dbd1fe76a8986066f0e8216ba8ee34bb62", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 125, "deletions": 15, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -17,20 +17,21 @@\n use self::TargetLint::*;\n \n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::lint::{EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use crate::middle::privacy::AccessLevels;\n+use crate::middle::stability;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_error_codes::*;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -64,17 +65,6 @@ pub struct LintStore {\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n }\n \n-/// Lints that are buffered up early on in the `Session` before the\n-/// `LintLevels` is calculated\n-#[derive(PartialEq, Debug)]\n-pub struct BufferedEarlyLint {\n-    pub lint_id: LintId,\n-    pub ast_id: ast::NodeId,\n-    pub span: MultiSpan,\n-    pub msg: String,\n-    pub diagnostic: BuiltinLintDiagnostics,\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -477,6 +467,48 @@ impl LintPassObject for EarlyLintPassObject {}\n \n impl LintPassObject for LateLintPassObject {}\n \n+pub fn add_elided_lifetime_in_path_suggestion(\n+    sess: &Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        suggestion,\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n pub trait LintContext: Sized {\n     type PassObject: LintPassObject;\n \n@@ -495,7 +527,85 @@ pub trait LintContext: Sized {\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         let mut db = self.lookup(lint, span, msg);\n-        diagnostic.run(self.sess(), &mut db);\n+\n+        let sess = self.sess();\n+        match diagnostic {\n+            BuiltinLintDiagnostics::Normal => (),\n+            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(s) if is_global => {\n+                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n+                    }\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(ref s) => {\n+                        // FIXME(Manishearth) ideally the emitting code\n+                        // can tell us whether or not this is global\n+                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n+\n+                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n+                    }\n+                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `crate`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n+                db.span_label(\n+                    span,\n+                    \"names from parent modules are not accessible without an explicit import\",\n+                );\n+            }\n+            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n+                db.span_note(span_def, \"the macro is defined here\");\n+            }\n+            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                n,\n+                path_span,\n+                incl_angl_brckt,\n+                insertion_span,\n+                anon_lts,\n+            ) => {\n+                add_elided_lifetime_in_path_suggestion(\n+                    sess,\n+                    &mut db,\n+                    n,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_span,\n+                    anon_lts,\n+                );\n+            }\n+            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n+                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n+            }\n+            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+                if !replaces.is_empty() {\n+                    db.tool_only_multipart_suggestion(\n+                        &message,\n+                        replaces,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+                for (span, is_imported) in spans {\n+                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                    db.span_label(\n+                        span,\n+                        format!(\"the item `{}` is already {} here\", ident, introduced),\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n+                stability::deprecation_suggestion(&mut db, suggestion, span)\n+            }\n+        }\n+\n         db.emit();\n     }\n "}, {"sha": "30679226b9b71f2430281e77784c211598ec0bb2", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,13 +1,11 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::lint::{\n-    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n-};\n+use crate::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n-use rustc_session::declare_tool_lint;\n+use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};\n "}, {"sha": "e586ad1836c737926ad53c17fcb2422589709e10", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -13,8 +13,8 @@ use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate;\n use syntax::print::pprust;\n+use syntax::sess::feature_err;\n \n use rustc_error_codes::*;\n \n@@ -223,7 +223,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n-                                    feature_gate::feature_err(\n+                                    feature_err(\n                                         &self.sess.parse_sess,\n                                         sym::lint_reasons,\n                                         item.span,"}, {"sha": "4afeb14494850bd2742a253f08094239deb863ce", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 96, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -21,12 +21,11 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use rustc_data_structures::sync;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n@@ -35,48 +34,13 @@ use rustc_span::Span;\n use syntax::ast;\n \n pub use crate::lint::context::{\n-    BufferedEarlyLint, CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore,\n+    add_elided_lifetime_in_path_suggestion, CheckLintNameResult, EarlyContext, LateContext,\n+    LintContext, LintStore,\n };\n \n-pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n-\n-/// Declares a static `LintArray` and return it as an expression.\n-#[macro_export]\n-macro_rules! lint_array {\n-    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n-    ($( $lint:expr ),*) => {{\n-        vec![$($lint),*]\n-    }}\n-}\n-\n-pub type LintArray = Vec<&'static Lint>;\n-\n-pub trait LintPass {\n-    fn name(&self) -> &'static str;\n-}\n-\n-/// Implements `LintPass for $name` with the given list of `Lint` statics.\n-#[macro_export]\n-macro_rules! impl_lint_pass {\n-    ($name:ident => [$($lint:expr),* $(,)?]) => {\n-        impl LintPass for $name {\n-            fn name(&self) -> &'static str { stringify!($name) }\n-        }\n-        impl $name {\n-            pub fn get_lints() -> LintArray { $crate::lint_array!($($lint),*) }\n-        }\n-    };\n-}\n-\n-/// Declares a type named `$name` which implements `LintPass`.\n-/// To the right of `=>` a comma separated list of `Lint` statics is given.\n-#[macro_export]\n-macro_rules! declare_lint_pass {\n-    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n-        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n-        $crate::impl_lint_pass!($name => [$($lint),*]);\n-    };\n-}\n+pub use rustc_session::lint::builtin;\n+pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Level, Lint, LintId};\n+pub use rustc_session::lint::{LintArray, LintPass};\n \n #[macro_export]\n macro_rules! late_lint_methods {\n@@ -168,6 +132,8 @@ macro_rules! declare_late_lint_pass {\n \n late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n \n+impl LateLintPass<'_, '_> for HardwiredLints {}\n+\n #[macro_export]\n macro_rules! expand_combined_late_lint_pass_method {\n     ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n@@ -366,66 +332,12 @@ pub enum LintSource {\n \n pub type LevelSource = (Level, LintSource);\n \n-pub mod builtin;\n mod context;\n pub mod internal;\n mod levels;\n \n pub use self::levels::{LintLevelMap, LintLevelSets, LintLevelsBuilder};\n \n-#[derive(Default)]\n-pub struct LintBuffer {\n-    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n-}\n-\n-impl LintBuffer {\n-    pub fn add_lint(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: MultiSpan,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        let early_lint = BufferedEarlyLint {\n-            lint_id: LintId::of(lint),\n-            ast_id: id,\n-            span: sp,\n-            msg: msg.to_string(),\n-            diagnostic,\n-        };\n-        let arr = self.map.entry(id).or_default();\n-        if !arr.contains(&early_lint) {\n-            arr.push(early_lint);\n-        }\n-    }\n-\n-    pub fn take(&mut self, id: ast::NodeId) -> Vec<BufferedEarlyLint> {\n-        self.map.remove(&id).unwrap_or_default()\n-    }\n-\n-    pub fn buffer_lint<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n-    }\n-\n-    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n-    }\n-}\n-\n pub fn struct_lint_level<'a>(\n     sess: &'a Session,\n     lint: &'static Lint,"}, {"sha": "17e84c24881c1da8ea0ee9f8658bf4d28039ab46", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -3,7 +3,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n@@ -14,11 +13,12 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n-use syntax::feature_gate::feature_err_issue;\n+use syntax::sess::feature_err_issue;\n \n use std::num::NonZeroU32;\n \n@@ -195,7 +195,7 @@ pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String\n }\n \n pub fn early_report_deprecation(\n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,"}, {"sha": "58b8e8a089ad31137380c1584b39b01c875b3174", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -37,7 +37,6 @@ use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::lint::builtin;\n use rustc::{bug, span_bug};\n use rustc_data_structures::captures::Captures;\n@@ -52,6 +51,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::NodeMap;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n@@ -198,7 +198,7 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n+    fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n }\n@@ -268,7 +268,7 @@ pub fn lower_crate<'a, 'hir>(\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let _prof_timer = sess.prof.generic_activity(\"hir_lowering\");\n+    let _prof_timer = sess.prof.verbose_generic_activity(\"hir_lowering\");\n \n     LoweringContext {\n         crate_root: sess.parse_sess.injected_crate_name.try_get().copied(),\n@@ -2617,7 +2617,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 id,\n                 span,\n                 \"trait objects without an explicit `dyn` are deprecated\",\n-                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+                BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n             )\n         }\n     }"}, {"sha": "65347d379bd6a19e97d19a67c8a07d4e6c879b0c", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,14 +1,15 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n+use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n use syntax::ast::{self, *};\n \n@@ -304,7 +305,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        crate::lint::builtin::add_elided_lifetime_in_path_suggestion(\n+                        rustc::lint::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,\n@@ -321,7 +322,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             CRATE_NODE_ID,\n                             path_span,\n                             \"hidden lifetime parameters in types are deprecated\",\n-                            builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n                                 expected_lifetimes,\n                                 path_span,\n                                 incl_angl_brckt,"}, {"sha": "dced4a0d15b0c6f313602759fdd7b66b1ff2e6d7", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,20 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_ast_passes\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_ast_passes\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n+rustc_span = { path = \"../librustc_span\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "c915b7ba21692873630451ea71d230e3aafa4d72", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -6,11 +6,12 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use rustc::lint;\n-use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n+use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n+use rustc_session::lint::LintBuffer;\n+use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -65,7 +66,7 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n@@ -906,7 +907,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n \n-                Some(Constness::Const) => bug!(\"Parser should reject bare `const` on bounds\"),\n+                Some(Constness::Const) => panic!(\"Parser should reject bare `const` on bounds\"),\n                 None => {}\n             }\n         }\n@@ -992,7 +993,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n                     if mut_ident {\n                         self.lint_buffer.buffer_lint(\n-                            lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            PATTERNS_IN_FNS_WITHOUT_BODY,\n                             ti.id,\n                             span,\n                             \"patterns aren't allowed in methods without bodies\",\n@@ -1021,7 +1022,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {\n+pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) -> bool {\n     let mut validator = AstValidator {\n         session,\n         has_proc_macro_decls: false,", "previous_filename": "src/librustc_passes/ast_validation.rs"}, {"sha": "1e396d6fe8e47ed1ffe8f697a97f9b4f62978ace", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "renamed", "additions": 9, "deletions": 242, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,22 +1,15 @@\n-use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use crate::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n-use crate::attr;\n-use crate::sess::ParseSess;\n-use crate::visit::{self, FnKind, Visitor};\n-\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n-use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n-use rustc_feature::{find_feature_issue, GateIssue};\n+use rustc_errors::{struct_span_err, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_feature::{Feature, Features, State as FeatureState, UnstableFeatures};\n-use rustc_feature::{\n-    ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n-};\n-use rustc_span::edition::{Edition, ALL_EDITIONS};\n+use rustc_feature::{Features, GateIssue, UnstableFeatures};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use syntax::attr;\n+use syntax::sess::{feature_err, leveled_feature_err, GateStrength, ParseSess};\n+use syntax::visit::{self, FnKind, Visitor};\n \n use log::debug;\n \n@@ -53,70 +46,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq)]\n-pub enum GateStrength {\n-    /// A hard error. (Most feature gates should use this.)\n-    Hard,\n-    /// Only a warning. (Use this only as backwards-compatibility demands.)\n-    Soft,\n-}\n-\n-pub fn feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n-}\n-\n-pub fn feature_err_issue<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-) -> DiagnosticBuilder<'a> {\n-    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n-}\n-\n-fn leveled_feature_err<'a>(\n-    sess: &'a ParseSess,\n-    feature: Symbol,\n-    span: impl Into<MultiSpan>,\n-    issue: GateIssue,\n-    explain: &str,\n-    level: GateStrength,\n-) -> DiagnosticBuilder<'a> {\n-    let diag = &sess.span_diagnostic;\n-\n-    let mut err = match level {\n-        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n-        GateStrength::Soft => diag.struct_span_warn(span, explain),\n-    };\n-\n-    if let Some(n) = find_feature_issue(feature, issue) {\n-        err.note(&format!(\n-            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n-            n,\n-        ));\n-    }\n-\n-    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n-    if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n-    }\n-\n-    // If we're on stable and only emitting a \"soft\" warning, add a note to\n-    // clarify that the feature isn't \"on\" (rather than being on but\n-    // warning-worthy).\n-    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n-        err.help(\"a nightly build of the compiler is required to enable this feature\");\n-    }\n-\n-    err\n-}\n-\n struct PostExpansionVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     features: &'a Features,\n@@ -724,168 +653,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n }\n \n-pub fn get_features(\n-    span_handler: &Handler,\n-    krate_attrs: &[ast::Attribute],\n-    crate_edition: Edition,\n-    allow_features: &Option<Vec<String>>,\n-) -> Features {\n-    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n-        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n-        err.span_label(span, \"feature has been removed\");\n-        if let Some(reason) = reason {\n-            err.note(reason);\n-        }\n-        err.emit();\n-    }\n-\n-    let mut features = Features::default();\n-    let mut edition_enabled_features = FxHashMap::default();\n-\n-    for &edition in ALL_EDITIONS {\n-        if edition <= crate_edition {\n-            // The `crate_edition` implies its respective umbrella feature-gate\n-            // (i.e., `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).\n-            edition_enabled_features.insert(edition.feature_name(), edition);\n-        }\n-    }\n-\n-    for feature in active_features_up_to(crate_edition) {\n-        feature.set(&mut features, DUMMY_SP);\n-        edition_enabled_features.insert(feature.name, crate_edition);\n-    }\n-\n-    // Process the edition umbrella feature-gates first, to ensure\n-    // `edition_enabled_features` is completed before it's queried.\n-    for attr in krate_attrs {\n-        if !attr.check_name(sym::feature) {\n-            continue;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            Some(list) => list,\n-            None => continue,\n-        };\n-\n-        for mi in list {\n-            if !mi.is_word() {\n-                continue;\n-            }\n-\n-            let name = mi.name_or_empty();\n-\n-            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n-            if let Some(edition) = edition {\n-                if edition <= crate_edition {\n-                    continue;\n-                }\n-\n-                for feature in active_features_up_to(edition) {\n-                    // FIXME(Manishearth) there is currently no way to set\n-                    // lib features by edition\n-                    feature.set(&mut features, DUMMY_SP);\n-                    edition_enabled_features.insert(feature.name, edition);\n-                }\n-            }\n-        }\n-    }\n-\n-    for attr in krate_attrs {\n-        if !attr.check_name(sym::feature) {\n-            continue;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            Some(list) => list,\n-            None => continue,\n-        };\n-\n-        let bad_input = |span| {\n-            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n-        };\n-\n-        for mi in list {\n-            let name = match mi.ident() {\n-                Some(ident) if mi.is_word() => ident.name,\n-                Some(ident) => {\n-                    bad_input(mi.span())\n-                        .span_suggestion(\n-                            mi.span(),\n-                            \"expected just one word\",\n-                            format!(\"{}\", ident.name),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n-                    continue;\n-                }\n-                None => {\n-                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n-                    continue;\n-                }\n-            };\n-\n-            if let Some(edition) = edition_enabled_features.get(&name) {\n-                let msg =\n-                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n-                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n-                continue;\n-            }\n-\n-            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {\n-                // Handled in the separate loop above.\n-                continue;\n-            }\n-\n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n-            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n-                if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =\n-                    state\n-                {\n-                    feature_removed(span_handler, mi.span(), *reason);\n-                    continue;\n-                }\n-            }\n-\n-            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n-                let since = Some(Symbol::intern(since));\n-                features.declared_lang_features.push((name, mi.span(), since));\n-                continue;\n-            }\n-\n-            if let Some(allowed) = allow_features.as_ref() {\n-                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n-                    struct_span_err!(\n-                        span_handler,\n-                        mi.span(),\n-                        E0725,\n-                        \"the feature `{}` is not in the list of allowed features\",\n-                        name\n-                    )\n-                    .emit();\n-                    continue;\n-                }\n-            }\n-\n-            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n-                f.set(&mut features, mi.span());\n-                features.declared_lang_features.push((name, mi.span(), None));\n-                continue;\n-            }\n-\n-            features.declared_lib_features.push((name, mi.span()));\n-        }\n-    }\n-\n-    features\n-}\n-\n-fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {\n-    ACTIVE_FEATURES.iter().filter(move |feature| {\n-        if let Some(feature_edition) = feature.edition { feature_edition <= edition } else { false }\n-    })\n-}\n-\n pub fn check_crate(\n     krate: &ast::Crate,\n     parse_sess: &ParseSess,", "previous_filename": "src/libsyntax/feature_gate/check.rs"}, {"sha": "eadbc485296e8705f41c4522ed6b88f42a4604fe", "filename": "src/librustc_ast_passes/lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,9 @@\n+//! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n+//! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n+//! by `rustc_ast_lowering`.\n+\n+#![feature(slice_patterns)]\n+\n+pub mod ast_validation;\n+pub mod feature_gate;\n+pub mod show_span;"}, {"sha": "4596e8ff53dde7233d6558af4a27bba5b1f4f0b2", "filename": "src/librustc_ast_passes/show_span.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_ast_passes%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fshow_span.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -5,9 +5,9 @@\n \n use std::str::FromStr;\n \n-use crate::ast;\n-use crate::visit;\n-use crate::visit::Visitor;\n+use syntax::ast;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n enum Mode {\n     Expression,", "previous_filename": "src/libsyntax/show_span.rs"}, {"sha": "f291eaf93580bf526ecf1bb8594518ab584df985", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -17,6 +17,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n rustc_expand = { path = \"../librustc_expand\" }"}, {"sha": "a992b6e2662d2ec34537dce0b3e4e82425702cc5", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -106,7 +106,7 @@ fn parse_assert<'a>(\n     let custom_message =\n         if let token::Literal(token::Lit { kind: token::Str, .. }) = parser.token.kind {\n             let mut err = cx.struct_span_warn(parser.token.span, \"unexpected string literal\");\n-            let comma_span = cx.source_map().next_point(parser.prev_span);\n+            let comma_span = parser.prev_span.shrink_to_hi();\n             err.span_suggestion_short(\n                 comma_span,\n                 \"try adding a comma\","}, {"sha": "dc85a92d272c48bb21d047cbdb4f873b8e5b3150", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,15 +1,15 @@\n use rustc_expand::base::{self, *};\n use rustc_expand::panictry;\n use rustc_parse::{self, new_sub_parser_from_file, parser::Parser, DirectoryOwnership};\n+use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n+use rustc_span::{self, Pos, Span};\n use syntax::ast;\n-use syntax::early_buffered_lints::INCOMPLETE_INCLUDE;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n \n-use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "53ee5996432ceb4aec7cf7b0d0732a7fae9f0337", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -53,6 +53,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     crate_name: &str,\n     target_cpu: &str,\n ) {\n+    let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n@@ -71,9 +72,11 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             );\n         }\n \n-        for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n-            check_file_is_writeable(obj, sess);\n-        }\n+        sess.time(\"link_binary_check_files_are_writeable\", || {\n+            for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n+                check_file_is_writeable(obj, sess);\n+            }\n+        });\n \n         let tmpdir = TempFileBuilder::new()\n             .prefix(\"rustc\")\n@@ -84,6 +87,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n             match crate_type {\n                 config::CrateType::Rlib => {\n+                    let _timer = sess.timer(\"link_rlib\");\n                     link_rlib::<B>(\n                         sess,\n                         codegen_results,\n@@ -118,29 +122,34 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n-    if !sess.opts.cg.save_temps {\n-        if sess.opts.output_types.should_codegen() && !preserve_objects_for_their_debuginfo(sess) {\n-            for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n-                remove(sess, obj);\n+    sess.time(\"link_binary_remove_temps\", || {\n+        if !sess.opts.cg.save_temps {\n+            if sess.opts.output_types.should_codegen()\n+                && !preserve_objects_for_their_debuginfo(sess)\n+            {\n+                for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n+                    remove(sess, obj);\n+                }\n             }\n-        }\n-        for obj in codegen_results.modules.iter().filter_map(|m| m.bytecode_compressed.as_ref()) {\n-            remove(sess, obj);\n-        }\n-        if let Some(ref metadata_module) = codegen_results.metadata_module {\n-            if let Some(ref obj) = metadata_module.object {\n+            for obj in codegen_results.modules.iter().filter_map(|m| m.bytecode_compressed.as_ref())\n+            {\n                 remove(sess, obj);\n             }\n-        }\n-        if let Some(ref allocator_module) = codegen_results.allocator_module {\n-            if let Some(ref obj) = allocator_module.object {\n-                remove(sess, obj);\n+            if let Some(ref metadata_module) = codegen_results.metadata_module {\n+                if let Some(ref obj) = metadata_module.object {\n+                    remove(sess, obj);\n+                }\n             }\n-            if let Some(ref bc) = allocator_module.bytecode_compressed {\n-                remove(sess, bc);\n+            if let Some(ref allocator_module) = codegen_results.allocator_module {\n+                if let Some(ref obj) = allocator_module.object {\n+                    remove(sess, obj);\n+                }\n+                if let Some(ref bc) = allocator_module.bytecode_compressed {\n+                    remove(sess, bc);\n+                }\n             }\n         }\n-    }\n+    });\n }\n \n // The third parameter is for env vars, used on windows to set up the"}, {"sha": "4d09e23ee7f7a498e51c06240e6f4c6b02c49d4d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -479,6 +479,8 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n         return work_products;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_copy_cgu_workproducts\");\n+\n     for module in compiled_modules.modules.iter().filter(|m| m.kind == ModuleKind::Regular) {\n         let mut files = vec![];\n \n@@ -1714,8 +1716,11 @@ pub struct OngoingCodegen<B: ExtraBackendMethods> {\n \n impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n     pub fn join(self, sess: &Session) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n+        let _timer = sess.timer(\"finish_ongoing_codegen\");\n+\n         self.shared_emitter_main.check(sess, true);\n-        let compiled_modules = match self.future.join() {\n+        let future = self.future;\n+        let compiled_modules = sess.time(\"join_worker_thread\", || match future.join() {\n             Ok(Ok(compiled_modules)) => compiled_modules,\n             Ok(Err(())) => {\n                 sess.abort_if_errors();\n@@ -1724,7 +1729,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             Err(_) => {\n                 bug!(\"panic during codegen/LLVM phase\");\n             }\n-        };\n+        });\n \n         sess.cgu_reuse_tracker.check_expected_reuse(sess.diagnostic());\n "}, {"sha": "8deb43d50f93874641512387261eeaf2ddbde0b1", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -495,6 +495,12 @@ impl<'a> TimingGuard<'a> {\n     pub fn none() -> TimingGuard<'a> {\n         TimingGuard(None)\n     }\n+\n+    #[inline(always)]\n+    pub fn run<R>(self, f: impl FnOnce() -> R) -> R {\n+        let _timer = self;\n+        f()\n+    }\n }\n \n #[must_use]"}, {"sha": "3d31f240a34e04132312456f3f0fdd5d9e09d290", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -389,6 +389,7 @@ pub fn run_compiler(\n                 })?;\n             } else {\n                 // Drop AST after creating GlobalCtxt to free memory\n+                let _timer = sess.prof.generic_activity(\"drop_ast\");\n                 mem::drop(queries.expansion()?.take());\n             }\n \n@@ -413,6 +414,7 @@ pub fn run_compiler(\n         })?;\n \n         if let Some(linker) = linker {\n+            let _timer = sess.timer(\"link\");\n             linker.link()?\n         }\n "}, {"sha": "e24e8719133a987574b2d9def7200801d42a9b93", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -182,7 +182,7 @@ impl CodeSuggestion {\n \n                 // Find the bounding span.\n                 let lo = substitution.parts.iter().map(|part| part.span.lo()).min().unwrap();\n-                let hi = substitution.parts.iter().map(|part| part.span.hi()).min().unwrap();\n+                let hi = substitution.parts.iter().map(|part| part.span.hi()).max().unwrap();\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 let lines = cm.span_to_lines(bounding_span).unwrap();\n                 assert!(!lines.lines.is_empty());"}, {"sha": "d04dd079be75dda338d6e3de0a247604c1bb1364", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -14,10 +14,12 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n+rustc_ast_passes = { path = \"../librustc_ast_passes\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "3254d0c913da3a2c9305688e3511a6d73531626d", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -18,11 +18,10 @@ use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n use syntax::attr::{self, is_builtin_attr, HasAttrs};\n-use syntax::feature_gate::{self, feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{feature_err, ParseSess};\n use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;\n@@ -1062,7 +1061,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n-            feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n+            rustc_ast_passes::feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n             validate_attr::check_meta(self.cx.parse_sess, attr);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded"}, {"sha": "47865b2fb9fc36338c1dea2fdfbf4cb37392ae01", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -106,14 +106,14 @@\n //! bound.\n use crate::mbe::{KleeneToken, TokenTree};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym};\n+use rustc_span::{symbol::Ident, MultiSpan, Span};\n use syntax::ast::NodeId;\n-use syntax::early_buffered_lints::META_VARIABLE_MISUSE;\n-use syntax::sess::ParseSess;\n use syntax::token::{DelimToken, Token, TokenKind};\n \n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::{symbol::Ident, MultiSpan, Span};\n use smallvec::SmallVec;\n \n /// Stack represented as linked list."}, {"sha": "246f66084b813b1d6c7660bf3bc09929d62a3fdd", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -696,7 +696,7 @@ pub(super) fn parse(\n                         if parser.token.span.is_dummy() {\n                             parser.token.span\n                         } else {\n-                            sess.source_map().next_point(parser.token.span)\n+                            parser.token.span.shrink_to_hi()\n                         },\n                     ),\n                     \"missing tokens in macro arguments\","}, {"sha": "ba20006d73cccf0f4866140bc8dd52379bf0a5de", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -190,6 +190,8 @@ pub fn prepare_session_directory(\n         return;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_prepare_session_directory\");\n+\n     debug!(\"prepare_session_directory\");\n \n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n@@ -306,6 +308,8 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n         return;\n     }\n \n+    let _timer = sess.timer(\"incr_comp_finalize_session_directory\");\n+\n     let incr_comp_session_dir: PathBuf = sess.incr_comp_session_dir().clone();\n \n     if sess.has_errors_or_delayed_span_bugs() {"}, {"sha": "6c57f79e1a7fb911e03edc5ce52a1ce7a249a2e4", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -102,6 +102,8 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n         return MaybeAsync::Sync(LoadResult::Ok { data: Default::default() });\n     }\n \n+    let _timer = sess.prof.generic_activity(\"incr_comp_prepare_load_dep_graph\");\n+\n     // Calling `sess.incr_comp_session_dir()` will panic if `sess.opts.incremental.is_none()`.\n     // Fortunately, we just checked that this isn't the case.\n     let path = dep_graph_path_from(&sess.incr_comp_session_dir());"}, {"sha": "eb0551c606548ebea590bf28d2a0652510faec9d", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -17,10 +17,12 @@ syntax = { path = \"../libsyntax\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n+rustc_ast_passes = { path = \"../librustc_ast_passes\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_traits = { path = \"../librustc_traits\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "d00875f6fee88f50f03d119205e8bdda4233a53f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -177,11 +177,17 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n         override_queries: config.override_queries,\n     };\n \n-    let _sess_abort_error = OnDrop(|| {\n-        compiler.sess.diagnostic().print_error_count(registry);\n-    });\n+    let r = {\n+        let _sess_abort_error = OnDrop(|| {\n+            compiler.sess.diagnostic().print_error_count(registry);\n+        });\n \n-    f(&compiler)\n+        f(&compiler)\n+    };\n+\n+    let prof = compiler.sess.prof.clone();\n+    prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n+    r\n }\n \n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {"}, {"sha": "9119466cbc048fb9684be1893a8325d8761f9234", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -29,15 +29,14 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental;\n use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n-use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n+use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_traits;\n use rustc_typeck as typeck;\n-use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::mut_visit::MutVisitor;\n use syntax::util::node_count::NodeCounter;\n use syntax::{self, ast, visit};\n@@ -71,7 +70,7 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     }\n \n     if let Some(ref s) = sess.opts.debugging_opts.show_span {\n-        syntax::show_span::run(sess.diagnostic(), s, &krate);\n+        rustc_ast_passes::show_span::run(sess.diagnostic(), s, &krate);\n     }\n \n     if sess.opts.debugging_opts.hir_stats {\n@@ -345,7 +344,7 @@ fn configure_and_expand_inner<'a>(\n     }\n \n     let has_proc_macro_decls = sess.time(\"AST_validation\", || {\n-        ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer())\n+        rustc_ast_passes::ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer())\n     });\n \n     let crate_types = sess.crate_types.borrow();\n@@ -400,7 +399,7 @@ fn configure_and_expand_inner<'a>(\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     sess.time(\"complete_gated_feature_checking\", || {\n-        syntax::feature_gate::check_crate(\n+        rustc_ast_passes::feature_gate::check_crate(\n             &krate,\n             &sess.parse_sess,\n             &sess.features_untracked(),\n@@ -411,8 +410,8 @@ fn configure_and_expand_inner<'a>(\n     // Add all buffered lints from the `ParseSess` to the `Session`.\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-        for BufferedEarlyLint { id, span, msg, lint_id } in buffered_lints.drain(..) {\n-            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n+        for early_lint in buffered_lints.drain(..) {\n+            resolver.lint_buffer().add_early_lint(early_lint);\n         }\n     });\n \n@@ -611,6 +610,8 @@ pub fn prepare_outputs(\n     boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n     crate_name: &str,\n ) -> Result<OutputFilenames> {\n+    let _timer = sess.timer(\"prepare_outputs\");\n+\n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n     let outputs = util::build_output_filenames(\n         &compiler.input,\n@@ -734,20 +735,22 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n-    let gcx = global_ctxt.init_locking(|| {\n-        TyCtxt::create_global_ctxt(\n-            sess,\n-            lint_store,\n-            local_providers,\n-            extern_providers,\n-            &all_arenas,\n-            arena,\n-            resolver_outputs,\n-            hir_map,\n-            query_result_on_disk_cache,\n-            &crate_name,\n-            &outputs,\n-        )\n+    let gcx = sess.time(\"setup_global_ctxt\", || {\n+        global_ctxt.init_locking(|| {\n+            TyCtxt::create_global_ctxt(\n+                sess,\n+                lint_store,\n+                local_providers,\n+                extern_providers,\n+                &all_arenas,\n+                arena,\n+                resolver_outputs,\n+                hir_map,\n+                query_result_on_disk_cache,\n+                &crate_name,\n+                &outputs,\n+            )\n+        })\n     });\n \n     // Do some initialization of the DepGraph that can only be done with the tcx available."}, {"sha": "7de1c36ce4b2e838fc8d1bd9d376f9bc38a340b2", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -176,6 +176,7 @@ impl<'tcx> Queries<'tcx> {\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, lint_store) = self.register_plugins()?.take();\n+            let _timer = self.session().timer(\"configure_and_expand\");\n             passes::configure_and_expand(\n                 self.session().clone(),\n                 lint_store.clone(),\n@@ -256,6 +257,7 @@ impl<'tcx> Queries<'tcx> {\n             let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?.peek();\n             let (ref hir_forest, ref resolver_outputs) = &*hir;\n+            let _timer = self.session().timer(\"create_global_ctxt\");\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n@@ -312,14 +314,19 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        self.codegen_backend\n+        let r = self\n+            .codegen_backend\n             .join_codegen_and_link(\n                 self.ongoing_codegen,\n                 &self.sess,\n                 &self.dep_graph,\n                 &self.prepare_outputs,\n             )\n-            .map_err(|_| ErrorReported)\n+            .map_err(|_| ErrorReported);\n+        let prof = self.sess.prof.clone();\n+        let dep_graph = self.dep_graph;\n+        prof.generic_activity(\"drop_dep_graph\").run(move || drop(dep_graph));\n+        r\n     }\n }\n \n@@ -328,6 +335,7 @@ impl Compiler {\n     where\n         F: for<'tcx> FnOnce(&'tcx Queries<'tcx>) -> T,\n     {\n+        let mut _timer = None;\n         let queries = Queries::new(&self);\n         let ret = f(&queries);\n \n@@ -337,6 +345,8 @@ impl Compiler {\n             }\n         }\n \n+        _timer = Some(self.session().timer(\"free_global_ctxt\"));\n+\n         ret\n     }\n "}, {"sha": "2fafd3af7a5ff2d406b1d0386fd95debe2c30110", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,8 +1,5 @@\n use log::info;\n use rustc::lint;\n-use rustc::session::config::{ErrorOutputType, Input, OutputFilenames};\n-use rustc::session::CrateDisambiguator;\n-use rustc::session::{self, config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc::ty;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -14,6 +11,11 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n+use rustc_session as session;\n+use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::CrateDisambiguator;\n+use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap};\n use rustc_span::symbol::{sym, Symbol};\n@@ -420,7 +422,7 @@ pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguat\n     CrateDisambiguator::from(hasher.finish::<Fingerprint>())\n }\n \n-pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut lint::LintBuffer) {\n+pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut LintBuffer) {\n     // Unconditionally collect crate types from attributes to make them used\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n@@ -442,7 +444,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n                             ast::CRATE_NODE_ID,\n                             span,\n                             \"invalid `crate_type` value\",\n-                            lint::builtin::BuiltinLintDiagnostics::UnknownCrateTypes(\n+                            BuiltinLintDiagnostics::UnknownCrateTypes(\n                                 span,\n                                 \"did you mean\".to_string(),\n                                 format!(\"\\\"{}\\\"\", candidate),"}, {"sha": "19d1052d1b243101a8c7162e8d7fb33aa340b847", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,5 +1,4 @@\n-use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{FutureIncompatibleInfo, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc_errors::Applicability;"}, {"sha": "befeb84e57c9c8a49ee6afe4bcf39f7f9309edc7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -21,13 +21,8 @@\n //! If you define a new `LateLintPass`, you will also need to add it to the\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n-use std::fmt::Write;\n-\n-use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n-use lint::{LateContext, LintArray, LintContext};\n use rustc::hir::map::Map;\n-use rustc::lint;\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{self, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -39,6 +34,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_hir::{HirIdSet, Node};\n+use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -52,6 +48,7 @@ use syntax::visit::FnKind;\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use log::debug;\n+use std::fmt::Write;\n \n // hardwired lints from librustc\n pub use lint::builtin::*;"}, {"sha": "9a901719851589d7bade9d0e796d34e1650f608e", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -16,15 +16,15 @@\n \n use rustc::lint::{EarlyContext, LintStore};\n use rustc::lint::{EarlyLintPass, EarlyLintPassObject};\n-use rustc::lint::{LintBuffer, LintContext, LintPass};\n-use rustc::session::Session;\n-\n+use rustc::lint::{LintContext, LintPass};\n+use rustc_session::lint::LintBuffer;\n+use rustc_session::Session;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n use syntax::visit as ast_visit;\n \n use log::debug;\n+use std::slice;\n \n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "d8e0274cf43b9a2a4374f772ac2dd2bb54197ae2", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -16,20 +16,20 @@\n \n use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n-use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n+use rustc_session::lint::LintPass;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n+use syntax::walk_list;\n \n use log::debug;\n-use syntax::walk_list;\n+use std::slice;\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "e708ded603b25145b5199ca52fd8fbebb521119c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -38,11 +38,12 @@ use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE, MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n-use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::{LintArray, LintPass};\n \n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "522aeb6b1442007cac0285beecbe93126ae1c9cc", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use syntax::ast;\n \n declare_lint! {"}, {"sha": "f75bb9ba32c3d954b12de1845f128508bf163e7f", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,6 +1,4 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "dc18f15fe40cb95072f52326133bad2b2b4721e5", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_errors::Applicability;\n use syntax::ast::{ExprKind, Stmt, StmtKind};\n "}, {"sha": "ab6841c0c09bcf26d946d6dc6c2bf0d984eb1dee", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,16 +1,14 @@\n #![allow(non_snake_case)]\n \n-use crate::hir::def_id::DefId;\n-use lint::{LateContext, LintArray, LintContext};\n-use lint::{LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{LateContext, LateLintPass, LintContext};\n use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;"}, {"sha": "da8a23f041e58a945074bc5860b10c9ed6abf4fd", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,7 +1,5 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "9426d5e26f5e545bdce78adecafdf0d8e67156f8", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,4 +1,5 @@\n use rustc::middle::cstore::{self, NativeLibrary};\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n@@ -10,7 +11,6 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n-use syntax::feature_gate::feature_err;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector { tcx, libs: Vec::new() };"}, {"sha": "0e9d16cfa56a8170f009f6b024174c984c617bec", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -6,6 +6,7 @@ use super::{PatCtxt, PatKind, PatternError};\n \n use rustc::hir::map::Map;\n use rustc::lint;\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -19,7 +20,6 @@ use rustc_hir::{HirId, Pat};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::Mutability;\n-use syntax::feature_gate::feature_err;\n \n use std::slice;\n "}, {"sha": "edb4eb4d7c34454617c03482c8a2fb2fa9f2f53a", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,12 +1,12 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use rustc::session::config::nightly_options;\n+use rustc::session::parse::feature_err;\n use rustc::ty::TyCtxt;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n-use syntax::feature_gate::feature_err;\n \n use super::{ConstKind, Item};\n \n@@ -350,16 +350,18 @@ impl NonConstOp for StaticAccess {\n             item.tcx.sess,\n             span,\n             E0013,\n-            \"{}s cannot refer to statics, use \\\n-                                        a constant instead\",\n+            \"{}s cannot refer to statics\",\n             item.const_kind()\n         );\n+        err.help(\n+            \"consider extracting the value of the `static` to a `const`, and referring to that\",\n+        );\n         if item.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n-                \"Static and const variables can refer to other const variables. \\\n-                    But a const variable cannot refer to a static variable.\",\n+                \"`static` and `const` variables can refer to other `const` variables. \\\n+                    A `const` variable, however, cannot refer to a `static` variable.\",\n             );\n-            err.help(\"To fix this, the value can be extracted as a const and then used.\");\n+            err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n         }\n         err.emit();\n     }"}, {"sha": "aa159c55ff2846ed68784580de6b32b46334bcf2", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -18,6 +18,7 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n syntax = { path = \"../libsyntax\" }\n unicode-normalization = \"0.1.11\""}, {"sha": "8467acc759c2b5cd25e93d1c047df0349d3b2121", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 177, "deletions": 7, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -9,18 +9,22 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::{parse_in, validate_attr};\n-use rustc_errors::Applicability;\n-use rustc_feature::Features;\n-use rustc_span::edition::Edition;\n-use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_error_codes::*;\n+use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n+use rustc_feature::{Feature, Features, State as FeatureState};\n+use rustc_feature::{\n+    ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n+};\n+use rustc_span::edition::{Edition, ALL_EDITIONS};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n use syntax::attr;\n use syntax::attr::HasAttrs;\n-use syntax::feature_gate::{feature_err, get_features};\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{feature_err, ParseSess};\n use syntax::util::map_in_place::MapInPlace;\n \n use smallvec::SmallVec;\n@@ -31,6 +35,172 @@ pub struct StripUnconfigured<'a> {\n     pub features: Option<&'a Features>,\n }\n \n+fn get_features(\n+    span_handler: &Handler,\n+    krate_attrs: &[ast::Attribute],\n+    crate_edition: Edition,\n+    allow_features: &Option<Vec<String>>,\n+) -> Features {\n+    fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n+        let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n+        err.span_label(span, \"feature has been removed\");\n+        if let Some(reason) = reason {\n+            err.note(reason);\n+        }\n+        err.emit();\n+    }\n+\n+    fn active_features_up_to(edition: Edition) -> impl Iterator<Item = &'static Feature> {\n+        ACTIVE_FEATURES.iter().filter(move |feature| {\n+            if let Some(feature_edition) = feature.edition {\n+                feature_edition <= edition\n+            } else {\n+                false\n+            }\n+        })\n+    }\n+\n+    let mut features = Features::default();\n+    let mut edition_enabled_features = FxHashMap::default();\n+\n+    for &edition in ALL_EDITIONS {\n+        if edition <= crate_edition {\n+            // The `crate_edition` implies its respective umbrella feature-gate\n+            // (i.e., `#![feature(rust_20XX_preview)]` isn't needed on edition 20XX).\n+            edition_enabled_features.insert(edition.feature_name(), edition);\n+        }\n+    }\n+\n+    for feature in active_features_up_to(crate_edition) {\n+        feature.set(&mut features, DUMMY_SP);\n+        edition_enabled_features.insert(feature.name, crate_edition);\n+    }\n+\n+    // Process the edition umbrella feature-gates first, to ensure\n+    // `edition_enabled_features` is completed before it's queried.\n+    for attr in krate_attrs {\n+        if !attr.check_name(sym::feature) {\n+            continue;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n+            None => continue,\n+        };\n+\n+        for mi in list {\n+            if !mi.is_word() {\n+                continue;\n+            }\n+\n+            let name = mi.name_or_empty();\n+\n+            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n+            if let Some(edition) = edition {\n+                if edition <= crate_edition {\n+                    continue;\n+                }\n+\n+                for feature in active_features_up_to(edition) {\n+                    // FIXME(Manishearth) there is currently no way to set\n+                    // lib features by edition\n+                    feature.set(&mut features, DUMMY_SP);\n+                    edition_enabled_features.insert(feature.name, edition);\n+                }\n+            }\n+        }\n+    }\n+\n+    for attr in krate_attrs {\n+        if !attr.check_name(sym::feature) {\n+            continue;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n+            None => continue,\n+        };\n+\n+        let bad_input = |span| {\n+            struct_span_err!(span_handler, span, E0556, \"malformed `feature` attribute input\")\n+        };\n+\n+        for mi in list {\n+            let name = match mi.ident() {\n+                Some(ident) if mi.is_word() => ident.name,\n+                Some(ident) => {\n+                    bad_input(mi.span())\n+                        .span_suggestion(\n+                            mi.span(),\n+                            \"expected just one word\",\n+                            format!(\"{}\", ident.name),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                    continue;\n+                }\n+                None => {\n+                    bad_input(mi.span()).span_label(mi.span(), \"expected just one word\").emit();\n+                    continue;\n+                }\n+            };\n+\n+            if let Some(edition) = edition_enabled_features.get(&name) {\n+                let msg =\n+                    &format!(\"the feature `{}` is included in the Rust {} edition\", name, edition);\n+                span_handler.struct_span_warn_with_code(mi.span(), msg, error_code!(E0705)).emit();\n+                continue;\n+            }\n+\n+            if ALL_EDITIONS.iter().any(|e| name == e.feature_name()) {\n+                // Handled in the separate loop above.\n+                continue;\n+            }\n+\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n+                if let FeatureState::Removed { reason } | FeatureState::Stabilized { reason } =\n+                    state\n+                {\n+                    feature_removed(span_handler, mi.span(), *reason);\n+                    continue;\n+                }\n+            }\n+\n+            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n+                let since = Some(Symbol::intern(since));\n+                features.declared_lang_features.push((name, mi.span(), since));\n+                continue;\n+            }\n+\n+            if let Some(allowed) = allow_features.as_ref() {\n+                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n+                    struct_span_err!(\n+                        span_handler,\n+                        mi.span(),\n+                        E0725,\n+                        \"the feature `{}` is not in the list of allowed features\",\n+                        name\n+                    )\n+                    .emit();\n+                    continue;\n+                }\n+            }\n+\n+            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n+                f.set(&mut features, mi.span());\n+                features.declared_lang_features.push((name, mi.span(), None));\n+                continue;\n+            }\n+\n+            features.declared_lib_features.push((name, mi.span()));\n+        }\n+    }\n+\n+    features\n+}\n+\n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n pub fn features(\n     mut krate: ast::Crate,"}, {"sha": "a5056c1665e30a10928eaccc8e464ecb54eeb5dd", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -259,10 +259,7 @@ impl<'a> Parser<'a> {\n             };\n             (\n                 format!(\"expected one of {}, found {}\", expect, actual),\n-                (\n-                    self.sess.source_map().next_point(self.prev_span),\n-                    format!(\"expected one of {}\", short_expect),\n-                ),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected one of {}\", short_expect)),\n             )\n         } else if expected.is_empty() {\n             (\n@@ -272,7 +269,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (\n                 format!(\"expected {}, found {}\", expect, actual),\n-                (self.sess.source_map().next_point(self.prev_span), format!(\"expected {}\", expect)),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected {}\", expect)),\n             )\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n@@ -803,7 +800,7 @@ impl<'a> Parser<'a> {\n             _ if self.prev_span == DUMMY_SP => (self.token.span, self.token.span),\n             // EOF, don't want to point at the following char, but rather the last token.\n             (token::Eof, None) => (self.prev_span, self.token.span),\n-            _ => (self.sess.source_map().next_point(self.prev_span), self.token.span),\n+            _ => (self.prev_span.shrink_to_hi(), self.token.span),\n         };\n         let msg = format!(\n             \"expected `{}`, found {}\",\n@@ -1126,7 +1123,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(sp, \"unclosed delimiter\");\n                 }\n                 err.span_suggestion_short(\n-                    self.sess.source_map().next_point(self.prev_span),\n+                    self.prev_span.shrink_to_hi(),\n                     &format!(\"{} may belong here\", delim.to_string()),\n                     delim.to_string(),\n                     Applicability::MaybeIncorrect,"}, {"sha": "b0c78ad7e4bcc1155914ac85420a56c0a08cd294", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1645,7 +1645,7 @@ impl<'a> Parser<'a> {\n                             //   |      |\n                             //   |      parsed until here as `\"y\" & X`\n                             err.span_suggestion_short(\n-                                cm.next_point(arm_start_span),\n+                                arm_start_span.shrink_to_hi(),\n                                 \"missing a comma here to end this `match` arm\",\n                                 \",\".to_owned(),\n                                 Applicability::MachineApplicable,"}, {"sha": "d4756dff49a9d8cd6ac4ebb5f1b4486b0d29ea85", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1510,7 +1510,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             _ => {\n-                let sp = self.sess.source_map().next_point(self.prev_span);\n+                let sp = self.prev_span.shrink_to_hi();\n                 let mut err = self.struct_span_err(\n                     sp,\n                     &format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n@@ -1649,7 +1649,7 @@ impl<'a> Parser<'a> {\n             // it's safe to peel off one character only when it has the close delim\n             self.prev_span.with_lo(self.prev_span.hi() - BytePos(1))\n         } else {\n-            self.sess.source_map().next_point(self.prev_span)\n+            self.prev_span.shrink_to_hi()\n         };\n \n         self.struct_span_err(\n@@ -1665,7 +1665,7 @@ impl<'a> Parser<'a> {\n             Applicability::MaybeIncorrect,\n         )\n         .span_suggestion(\n-            self.sess.source_map().next_point(self.prev_span),\n+            self.prev_span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "a1035d320b31c426e33c4e0df663014992052d9e", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -765,7 +765,7 @@ impl<'a> Parser<'a> {\n                             break;\n                         }\n                         Err(mut expect_err) => {\n-                            let sp = self.sess.source_map().next_point(self.prev_span);\n+                            let sp = self.prev_span.shrink_to_hi();\n                             let token_str = pprust::token_kind_to_string(t);\n \n                             // Attempt to keep parsing if it was a similar separator."}, {"sha": "84562fbb46ff2bbfd133982060405d97a0b2f4f7", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -4,10 +4,10 @@ use crate::parse_in;\n \n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n+use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Symbol};\n use syntax::ast::{self, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n-use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n-use syntax::sess::ParseSess;\n use syntax::tokenstream::DelimSpan;\n \n pub fn check_meta(sess: &ParseSess, attr: &Attribute) {"}, {"sha": "639d8639c4bb28281dde9d59de9f2072aebf6be1", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -16,7 +16,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n-rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "39ba2fbc63b4392dace79cacf1f9dc047e43a4cd", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -9,6 +9,7 @@\n \n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n+use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n@@ -18,7 +19,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n-use syntax::feature_gate::feature_err;\n \n use std::fmt;\n "}, {"sha": "65eb07b989d83ab871380cb6048a096c1aa056ad", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -17,7 +17,6 @@ extern crate log;\n \n use rustc::ty::query::Providers;\n \n-pub mod ast_validation;\n mod check_const;\n pub mod dead;\n mod diagnostic_items;"}, {"sha": "af37d218d68f08b1ecf4f0327fa68cfd161113c1", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -5,6 +5,7 @@ use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::query::Providers;\n@@ -20,7 +21,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::Attribute;\n use syntax::attr::{self, Stability};\n-use syntax::feature_gate::feature_err;\n \n use std::cmp::Ordering;\n use std::mem::replace;"}, {"sha": "70d4841ec244b15b91fabb6e6c9ffa8eb76058ea", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -652,6 +652,9 @@ impl EmbargoVisitor<'tcx> {\n             if let Some(item) = module\n                 .res\n                 .and_then(|res| res.mod_def_id())\n+                // If the module is `self`, i.e. the current crate,\n+                // there will be no corresponding item.\n+                .filter(|def_id| def_id.index != CRATE_DEF_INDEX || def_id.krate != LOCAL_CRATE)\n                 .and_then(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n                 .map(|module_hir_id| self.tcx.hir().expect_item(module_hir_id))\n             {"}, {"sha": "4a6df92d82260fda278de716af1ce5f44fb14bfc", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -29,6 +29,7 @@ use crate::Resolver;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n@@ -317,7 +318,7 @@ impl Resolver<'_> {\n                 unused.use_tree_id,\n                 ms,\n                 &msg,\n-                lint::builtin::BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n+                BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n             );\n         }\n     }"}, {"sha": "8fe17e89444cd0aa11e1607805a40fa64fa54e90", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -12,16 +12,16 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc::hir::exports::Export;\n-use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n-use rustc::session::DiagnosticMessageId;\n use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};"}, {"sha": "8e4630cf7d69641cac65ad7031e8307037b9123b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -24,7 +24,6 @@ use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n-use rustc::session::Session;\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n@@ -39,7 +38,9 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::{NodeMap, NodeSet};\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -960,7 +961,7 @@ pub struct Resolver<'a> {\n     /// when visiting the correspondent variants.\n     variant_vis: DefIdMap<ty::Visibility>,\n \n-    lint_buffer: lint::LintBuffer,\n+    lint_buffer: LintBuffer,\n \n     next_node_id: NodeId,\n }\n@@ -1082,7 +1083,7 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n         &mut self.definitions\n     }\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1241,7 +1242,7 @@ impl<'a> Resolver<'a> {\n                 .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                 .collect(),\n             variant_vis: Default::default(),\n-            lint_buffer: lint::LintBuffer::default(),\n+            lint_buffer: LintBuffer::default(),\n             next_node_id: NodeId::from_u32(1),\n         }\n     }\n@@ -1256,7 +1257,7 @@ impl<'a> Resolver<'a> {\n         self.next_node_id\n     }\n \n-    pub fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    pub fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1713,10 +1714,10 @@ impl<'a> Resolver<'a> {\n                     if let Some(node_id) = poisoned {\n                         self.lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-                            node_id, ident.span,\n+                            node_id,\n+                            ident.span,\n                             &format!(\"cannot find {} `{}` in this scope\", ns.descr(), ident),\n-                            lint::builtin::BuiltinLintDiagnostics::\n-                                ProcMacroDeriveResolutionFallback(ident.span),\n+                            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(ident.span),\n                         );\n                     }\n                     return Some(LexicalScopeBinding::Item(binding));\n@@ -2267,7 +2268,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let diag = lint::builtin::BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n+        let diag = BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n         self.lint_buffer.buffer_lint_with_diagnostic(\n             lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             diag_id,\n@@ -2562,9 +2563,10 @@ impl<'a> Resolver<'a> {\n                        cannot be referred to by absolute paths\";\n             self.lint_buffer.buffer_lint_with_diagnostic(\n                 lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-                CRATE_NODE_ID, span_use, msg,\n-                lint::builtin::BuiltinLintDiagnostics::\n-                    MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n+                CRATE_NODE_ID,\n+                span_use,\n+                msg,\n+                BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n             );\n         }\n "}, {"sha": "85b5d8ef1cb5d4bcb1a54499e9530cff07f5d463", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -7,6 +7,7 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc::middle::stability;\n+use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::{lint, span_bug, ty};\n use rustc_data_structures::fx::FxHashSet;\n@@ -23,7 +24,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr::{self, StabilityLevel};\n-use syntax::feature_gate::feature_err;\n use syntax::print::pprust;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "377ea141ed57c6678162534a7e0515ebeb0600f0", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n log = \"0.4\"\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "2ba3932c7d97e31eefc441cb3aff7be962e76a65", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,8 +1,10 @@\n pub use self::Level::*;\n-use crate::node_id::NodeId;\n+use crate::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n-use rustc_span::{sym, MultiSpan, Symbol};\n+use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+\n+pub mod builtin;\n \n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n@@ -174,7 +176,25 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n-/// Stores buffered lint info which can later be passed to `librustc`.\n+// This could be a closure, but then implementing derive trait\n+// becomes hacky (and it gets allocated).\n+#[derive(PartialEq)]\n+pub enum BuiltinLintDiagnostics {\n+    Normal,\n+    BareTraitObject(Span, /* is_global */ bool),\n+    AbsPathWithModule(Span),\n+    ProcMacroDeriveResolutionFallback(Span),\n+    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n+    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n+    UnknownCrateTypes(Span, String, String),\n+    UnusedImports(String, Vec<(Span, String)>),\n+    RedundantImport(Vec<(Span, bool)>, Ident),\n+    DeprecatedMacro(Option<Symbol>, Span),\n+}\n+\n+/// Lints that are buffered up early on in the `Session` before the\n+/// `LintLevels` is calculated. These are later passed to `librustc`.\n+#[derive(PartialEq)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n     pub span: MultiSpan,\n@@ -183,10 +203,65 @@ pub struct BufferedEarlyLint {\n     pub msg: String,\n \n     /// The `NodeId` of the AST node that generated the lint.\n-    pub id: NodeId,\n+    pub node_id: NodeId,\n \n     /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-    pub lint_id: &'static Lint,\n+    pub lint_id: LintId,\n+\n+    /// Customization of the `DiagnosticBuilder<'_>` for the lint.\n+    pub diagnostic: BuiltinLintDiagnostics,\n+}\n+\n+#[derive(Default)]\n+pub struct LintBuffer {\n+    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n+}\n+\n+impl LintBuffer {\n+    pub fn add_early_lint(&mut self, early_lint: BufferedEarlyLint) {\n+        let arr = self.map.entry(early_lint.node_id).or_default();\n+        if !arr.contains(&early_lint) {\n+            arr.push(early_lint);\n+        }\n+    }\n+\n+    pub fn add_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        node_id: NodeId,\n+        span: MultiSpan,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        let lint_id = LintId::of(lint);\n+        let msg = msg.to_string();\n+        self.add_early_lint(BufferedEarlyLint { lint_id, node_id, span, msg, diagnostic });\n+    }\n+\n+    pub fn take(&mut self, id: NodeId) -> Vec<BufferedEarlyLint> {\n+        self.map.remove(&id).unwrap_or_default()\n+    }\n+\n+    pub fn buffer_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n+    }\n }\n \n /// Declares a static item of type `&'static Lint`.\n@@ -253,3 +328,41 @@ macro_rules! declare_tool_lint {\n         };\n     );\n }\n+\n+/// Declares a static `LintArray` and return it as an expression.\n+#[macro_export]\n+macro_rules! lint_array {\n+    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n+    ($( $lint:expr ),*) => {{\n+        vec![$($lint),*]\n+    }}\n+}\n+\n+pub type LintArray = Vec<&'static Lint>;\n+\n+pub trait LintPass {\n+    fn name(&self) -> &'static str;\n+}\n+\n+/// Implements `LintPass for $name` with the given list of `Lint` statics.\n+#[macro_export]\n+macro_rules! impl_lint_pass {\n+    ($name:ident => [$($lint:expr),* $(,)?]) => {\n+        impl $crate::lint::LintPass for $name {\n+            fn name(&self) -> &'static str { stringify!($name) }\n+        }\n+        impl $name {\n+            pub fn get_lints() -> $crate::lint::LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+    };\n+}\n+\n+/// Declares a type named `$name` which implements `LintPass`.\n+/// To the right of `=>` a comma separated list of `Lint` statics is given.\n+#[macro_export]\n+macro_rules! declare_lint_pass {\n+    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n+        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n+        $crate::impl_lint_pass!($name => [$($lint),*]);\n+    };\n+}"}, {"sha": "3e8503ef661f05dc97f443c7bbabaf32a69261e8", "filename": "src/librustc_session/lint/builtin.rs", "status": "renamed", "additions": 24, "deletions": 151, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -4,16 +4,31 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::lint::{FutureIncompatibleInfo, LateLintPass, LintArray, LintPass};\n-use crate::middle::stability;\n-use crate::session::Session;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc_session::declare_lint;\n+use crate::lint::FutureIncompatibleInfo;\n+use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n-use syntax::ast;\n-use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n+\n+declare_lint! {\n+    pub ILL_FORMED_ATTRIBUTE_INPUT,\n+    Deny,\n+    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+        edition: None,\n+    };\n+}\n+\n+declare_lint! {\n+    pub META_VARIABLE_MISUSE,\n+    Allow,\n+    \"possible meta-variable misuse at macro definition\"\n+}\n+\n+declare_lint! {\n+    pub INCOMPLETE_INCLUDE,\n+    Deny,\n+    \"trailing content in included file\"\n+}\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -513,145 +528,3 @@ declare_lint_pass! {\n         SOFT_UNSTABLE,\n     ]\n }\n-\n-// this could be a closure, but then implementing derive traits\n-// becomes hacky (and it gets allocated)\n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n-pub enum BuiltinLintDiagnostics {\n-    Normal,\n-    BareTraitObject(Span, /* is_global */ bool),\n-    AbsPathWithModule(Span),\n-    ProcMacroDeriveResolutionFallback(Span),\n-    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n-    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n-    UnknownCrateTypes(Span, String, String),\n-    UnusedImports(String, Vec<(Span, String)>),\n-    RedundantImport(Vec<(Span, bool)>, ast::Ident),\n-    DeprecatedMacro(Option<Symbol>, Span),\n-}\n-\n-pub fn add_elided_lifetime_in_path_suggestion(\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-    n: usize,\n-    path_span: Span,\n-    incl_angl_brckt: bool,\n-    insertion_span: Span,\n-    anon_lts: String,\n-) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    db.span_suggestion(\n-        replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n-        suggestion,\n-        Applicability::MachineApplicable,\n-    );\n-}\n-\n-impl BuiltinLintDiagnostics {\n-    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder<'_>) {\n-        match self {\n-            BuiltinLintDiagnostics::Normal => (),\n-            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) if is_global => {\n-                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                    }\n-                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) => {\n-                        // FIXME(Manishearth) ideally the emitting code\n-                        // can tell us whether or not this is global\n-                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n-\n-                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n-                    }\n-                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `crate`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n-                db.span_label(\n-                    span,\n-                    \"names from parent modules are not \\\n-                                     accessible without an explicit import\",\n-                );\n-            }\n-            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n-                db.span_note(span_def, \"the macro is defined here\");\n-            }\n-            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-                n,\n-                path_span,\n-                incl_angl_brckt,\n-                insertion_span,\n-                anon_lts,\n-            ) => {\n-                add_elided_lifetime_in_path_suggestion(\n-                    sess,\n-                    db,\n-                    n,\n-                    path_span,\n-                    incl_angl_brckt,\n-                    insertion_span,\n-                    anon_lts,\n-                );\n-            }\n-            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n-                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n-            }\n-            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n-                if !replaces.is_empty() {\n-                    db.tool_only_multipart_suggestion(\n-                        &message,\n-                        replaces,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n-                for (span, is_imported) in spans {\n-                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n-                    db.span_label(\n-                        span,\n-                        format!(\"the item `{}` is already {} here\", ident, introduced),\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n-                stability::deprecation_suggestion(db, suggestion, span)\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}", "previous_filename": "src/librustc/lint/builtin.rs"}, {"sha": "946e77d35595e101ee35d03844c75e9becbef0e7", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,15 +1,15 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::lint::BufferedEarlyLint;\n+use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use crate::node_id::NodeId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n-use rustc_errors::{\n-    emitter::SilentEmitter, Applicability, ColorConfig, DiagnosticBuilder, Handler,\n-};\n-use rustc_feature::UnstableFeatures;\n+use rustc_error_codes::E0658;\n+use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n+use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -62,6 +62,81 @@ impl GatedSpans {\n     }\n }\n \n+/// The strenght of a feature gate.\n+/// Either it is a `Hard` error, or only a `Soft` warning.\n+#[derive(Debug, Copy, Clone, PartialEq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n+/// Construct a diagnostic for a language feature error due to the given `span`.\n+/// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n+pub fn feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n+}\n+\n+/// Construct a diagnostic for a feature gate error.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n+pub fn feature_err_issue<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+/// Construct a diagnostic for a feature gate error / warning.\n+///\n+/// You should typically just use `feature_err` instead.\n+pub fn leveled_feature_err<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: impl Into<MultiSpan>,\n+    issue: GateIssue,\n+    explain: &str,\n+    level: GateStrength,\n+) -> DiagnosticBuilder<'a> {\n+    let diag = &sess.span_diagnostic;\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err_with_code(span, explain, error_code!(E0658)),\n+        GateStrength::Soft => diag.struct_span_warn(span, explain),\n+    };\n+\n+    if let Some(n) = find_feature_issue(feature, issue) {\n+        err.note(&format!(\n+            \"for more information, see https://github.com/rust-lang/rust/issues/{}\",\n+            n,\n+        ));\n+    }\n+\n+    // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n+    if sess.unstable_features.is_nightly_build() {\n+        err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n+    }\n+\n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n+    err\n+}\n+\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,\n@@ -123,17 +198,18 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: &'static crate::lint::Lint,\n+        lint: &'static Lint,\n         span: impl Into<MultiSpan>,\n-        id: NodeId,\n+        node_id: NodeId,\n         msg: &str,\n     ) {\n         self.buffered_lints.with_lock(|buffered_lints| {\n             buffered_lints.push(BufferedEarlyLint {\n                 span: span.into(),\n-                id,\n+                node_id,\n                 msg: msg.into(),\n-                lint_id,\n+                lint_id: LintId::of(lint),\n+                diagnostic: BuiltinLintDiagnostics::Normal,\n             });\n         });\n     }"}, {"sha": "fb5fcf4a8303badacd9ae0bdc69ec90b8607e7bb", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -710,7 +710,7 @@ impl SourceMap {\n     pub fn next_point(&self, sp: Span) -> Span {\n         let start_of_next_point = sp.hi().0;\n \n-        let width = self.find_width_of_character_at_span(sp, true);\n+        let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);\n         // If the width is 1, then the next span should point to the same `lo` and `hi`. However,\n         // in the case of a multibyte character, where the width != 1, the next span should\n         // span multiple bytes to include the whole character."}, {"sha": "c15bcd81443d66c2b2fb5387b068e5c81c6c69d5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -10,6 +10,7 @@ use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n+use rustc::session::parse::feature_err;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n use rustc::traits::error_reporting::report_object_safety_error;\n@@ -30,7 +31,6 @@ use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;"}, {"sha": "58f407b89027851a9211630cfe4ae4d6cc2794b5", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -240,7 +240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ) = (parent_node, callee_node)\n         {\n             let start = sp.shrink_to_lo();\n-            let end = self.tcx.sess.source_map().next_point(callee_span);\n+            let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\\n                 closure with parenthesis\",\n@@ -317,9 +317,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let call_is_multiline =\n                                 self.tcx.sess.source_map().is_multiline(call_expr.span);\n                             if call_is_multiline {\n-                                let span = self.tcx.sess.source_map().next_point(callee.span);\n                                 err.span_suggestion(\n-                                    span,\n+                                    callee.span.shrink_to_hi(),\n                                     \"try adding a semicolon\",\n                                     \";\".to_owned(),\n                                     Applicability::MaybeIncorrect,"}, {"sha": "1afb703ca1506818d6b938f1fb1a13ad1fc9135c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -53,6 +53,7 @@\n use crate::check::{FnCtxt, Needs};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n+use rustc::session::parse::feature_err;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -62,6 +63,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -70,9 +72,6 @@ use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n-use syntax::feature_gate;\n-\n-use rustc_error_codes::*;\n \n struct Coerce<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -627,7 +626,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n \n         if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {\n-            feature_gate::feature_err(\n+            feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::unsized_tuple_coercion,\n                 self.cause.span,"}, {"sha": "92a7e18a8600f557dbf5195689e6baf92906a50d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -99,6 +99,7 @@ use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::infer::{self, InferCtxt, InferOk, InferResult};\n use rustc::middle::region;\n use rustc::mir::interpret::ConstValue;\n+use rustc::session::parse::feature_err;\n use rustc::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::adjustment::{\n@@ -130,7 +131,6 @@ use rustc_span::{self, BytePos, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::feature_err;\n use syntax::util::parser::ExprPrecedence;\n \n use rustc_error_codes::*;\n@@ -4952,9 +4952,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..) => {\n-                    let sp = self.tcx.sess.source_map().next_point(cause_span);\n                     err.span_suggestion(\n-                        sp,\n+                        cause_span.shrink_to_hi(),\n                         \"try adding a semicolon\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,"}, {"sha": "a496a6e12ce1a0f7d5c4ce0c54c47068fc434410", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -3,6 +3,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n+use rustc::session::parse::feature_err;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n@@ -13,7 +14,6 @@ use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n-use syntax::feature_gate;\n \n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n@@ -821,7 +821,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n             if receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n                 // Report error; would have worked with `arbitrary_self_types`.\n-                feature_gate::feature_err(\n+                feature_err(\n                     &fcx.tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,"}, {"sha": "ad750d5ab8341691f82a909fae80a76b2de6edef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -23,6 +23,7 @@ use crate::middle::weak_lang_items;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n+use rustc::session::parse::feature_err;\n use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::GenericArgKind;\n@@ -45,7 +46,6 @@ use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n-use syntax::feature_gate;\n \n use rustc_error_codes::*;\n \n@@ -1537,7 +1537,7 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         _ => None,\n                     };\n                     if let Some(unsupported_type) = err {\n-                        feature_gate::feature_err(\n+                        feature_err(\n                             &tcx.sess.parse_sess,\n                             sym::const_compare_raw_pointers,\n                             hir_ty.span,\n@@ -2633,7 +2633,7 @@ fn from_target_feature(\n                 None => true,\n             };\n             if !allowed && id.is_local() {\n-                feature_gate::feature_err(\n+                feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),"}, {"sha": "b480581e21ba90c093664699ae88974dd8dd9bef", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -250,6 +250,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n+    #[inline]\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         struct StringError(String);\n \n@@ -317,6 +318,7 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n+    #[inline]\n     fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }"}, {"sha": "77da97219b14762d56684d724b2e5349ff876814", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -615,6 +615,7 @@ impl OsStr {\n     /// assert!(!os_str.is_empty());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n     }\n@@ -965,6 +966,7 @@ impl AsRef<OsStr> for OsStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for OsString {\n+    #[inline]\n     fn as_ref(&self) -> &OsStr {\n         self\n     }"}, {"sha": "a703cb748e06b4e111d7f649e9444809c7dec470", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1475,6 +1475,7 @@ impl From<OsString> for PathBuf {\n     /// Converts a `OsString` into a `PathBuf`\n     ///\n     /// This conversion does not allocate or copy memory.\n+    #[inline]\n     fn from(s: OsString) -> PathBuf {\n         PathBuf { inner: s }\n     }\n@@ -1535,7 +1536,7 @@ impl fmt::Debug for PathBuf {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for PathBuf {\n     type Target = Path;\n-\n+    #[inline]\n     fn deref(&self) -> &Path {\n         Path::new(&self.inner)\n     }\n@@ -2655,6 +2656,7 @@ impl AsRef<Path> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<Path> for str {\n+    #[inline]\n     fn as_ref(&self) -> &Path {\n         Path::new(self)\n     }\n@@ -2669,6 +2671,7 @@ impl AsRef<Path> for String {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<Path> for PathBuf {\n+    #[inline]\n     fn as_ref(&self) -> &Path {\n         self\n     }"}, {"sha": "78eabf8f81e984e149bd551efed65503381eed02", "filename": "src/libstd/sys/hermit/os.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::marker::PhantomData;\n use crate::memchr;\n use crate::path::{self, PathBuf};\n-use crate::ptr;\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n@@ -77,13 +76,17 @@ pub fn init_environment(env: *const *const i8) {\n     unsafe {\n         ENV = Some(Mutex::new(HashMap::new()));\n \n+        if env.is_null() {\n+            return;\n+        }\n+\n         let mut guard = ENV.as_ref().unwrap().lock().unwrap();\n         let mut environ = env;\n-        while environ != ptr::null() && *environ != ptr::null() {\n+        while !(*environ).is_null() {\n             if let Some((key, value)) = parse(CStr::from_ptr(*environ).to_bytes()) {\n                 guard.insert(key, value);\n             }\n-            environ = environ.offset(1);\n+            environ = environ.add(1);\n         }\n     }\n "}, {"sha": "c6f8adb21623a0f26581ed14e20d7988d3b32b9e", "filename": "src/libstd/sys/hermit/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -18,14 +18,14 @@ static KEYS_LOCK: Mutex = Mutex::new();\n static mut LOCALS: *mut BTreeMap<Key, *mut u8> = ptr::null_mut();\n \n unsafe fn keys() -> &'static mut BTreeMap<Key, Option<Dtor>> {\n-    if KEYS == ptr::null_mut() {\n+    if KEYS.is_null() {\n         KEYS = Box::into_raw(Box::new(BTreeMap::new()));\n     }\n     &mut *KEYS\n }\n \n unsafe fn locals() -> &'static mut BTreeMap<Key, *mut u8> {\n-    if LOCALS == ptr::null_mut() {\n+    if LOCALS.is_null() {\n         LOCALS = Box::into_raw(Box::new(BTreeMap::new()));\n     }\n     &mut *LOCALS"}, {"sha": "2b0485c4f03635041b91de0f320d5681496a046a", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -70,7 +70,7 @@ impl<'a> Drop for ActiveTls<'a> {\n             any_non_null_dtor = false;\n             for (value, dtor) in TLS_KEY_IN_USE.iter().filter_map(&value_with_destructor) {\n                 let value = value.replace(ptr::null_mut());\n-                if value != ptr::null_mut() {\n+                if !value.is_null() {\n                     any_non_null_dtor = true;\n                     unsafe { dtor(value) }\n                 }"}, {"sha": "91f7d1524ccef79f9c0d451ef5ccfab86e0a70a0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -480,11 +480,13 @@ pub fn env() -> Env {\n         let _guard = env_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n-        while environ != ptr::null() && *environ != ptr::null() {\n-            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n-                result.push(key_value);\n+        if !environ.is_null() {\n+            while !(*environ).is_null() {\n+                if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                    result.push(key_value);\n+                }\n+                environ = environ.add(1);\n             }\n-            environ = environ.offset(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "1fadf71613561fb6b45498f8e22b63dd48272092", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -7,7 +7,6 @@ use crate::marker::PhantomData;\n use crate::mem;\n use crate::memchr;\n use crate::path::{self, Path, PathBuf};\n-use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n@@ -226,15 +225,15 @@ pub fn env() -> Env {\n     unsafe {\n         let _guard = env_lock();\n         let mut environ = *environ();\n-        if environ == ptr::null() {\n+        if environ.is_null() {\n             panic!(\"os::env() failure getting env string from OS: {}\", io::Error::last_os_error());\n         }\n         let mut result = Vec::new();\n-        while *environ != ptr::null() {\n+        while !(*environ).is_null() {\n             if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n                 result.push(key_value);\n             }\n-            environ = environ.offset(1);\n+            environ = environ.add(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "8052c0aa8a8d9bc59756c3920bc3559720779b5d", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::marker::PhantomData;\n use crate::os::wasi::prelude::*;\n use crate::path::{self, PathBuf};\n-use crate::ptr;\n use crate::str;\n use crate::sys::memchr;\n use crate::sys::{unsupported, Void};\n@@ -107,11 +106,13 @@ pub fn env() -> Env {\n         let _guard = env_lock();\n         let mut environ = libc::environ;\n         let mut result = Vec::new();\n-        while environ != ptr::null_mut() && *environ != ptr::null_mut() {\n-            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n-                result.push(key_value);\n+        if !environ.is_null() {\n+            while !(*environ).is_null() {\n+                if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                    result.push(key_value);\n+                }\n+                environ = environ.add(1);\n             }\n-            environ = environ.offset(1);\n         }\n         return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n     }"}, {"sha": "cc4ae4059069385ea4dd0e0e93801d75abc24a48", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -43,7 +43,7 @@ pub fn error_string(mut errnum: i32) -> String {\n             ];\n             module = c::GetModuleHandleW(NTDLL_DLL.as_ptr());\n \n-            if module != ptr::null_mut() {\n+            if !module.is_null() {\n                 errnum ^= c::FACILITY_NT_BIT as i32;\n                 flags = c::FORMAT_MESSAGE_FROM_HMODULE;\n             }"}, {"sha": "e965ea79aa03946a54b1a45672e763187e76c224", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -104,6 +104,7 @@ impl Buf {\n         self.inner.shrink_to(min_capacity)\n     }\n \n+    #[inline]\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "70f4f47621a348ce36acbef9d39d83b42db36d6c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -2,9 +2,8 @@\n \n use super::{mark_used, MetaItemKind};\n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::feature_err;\n use crate::print::pprust;\n-use crate::sess::ParseSess;\n+use crate::sess::{feature_err, ParseSess};\n \n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};"}, {"sha": "7724107888ad0c3d593258fd0aacd42ee2fa75ab", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -1,30 +0,0 @@\n-//! Allows the buffering of lints for later.\n-//!\n-//! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n-//! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n-\n-use rustc_session::declare_lint;\n-pub use rustc_session::lint::BufferedEarlyLint;\n-use rustc_session::lint::FutureIncompatibleInfo;\n-\n-declare_lint! {\n-    pub ILL_FORMED_ATTRIBUTE_INPUT,\n-    Deny,\n-    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-        edition: None,\n-    };\n-}\n-\n-declare_lint! {\n-    pub META_VARIABLE_MISUSE,\n-    Allow,\n-    \"possible meta-variable misuse at macro definition\"\n-}\n-\n-declare_lint! {\n-    pub INCOMPLETE_INCLUDE,\n-    Deny,\n-    \"trailing content in included file\"\n-}"}, {"sha": "a96fee0cf8f16f5e386fdd89bd54d84db84fab18", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -75,13 +75,8 @@ pub mod ast;\n pub mod attr;\n pub mod entry;\n pub mod expand;\n-pub mod feature_gate {\n-    mod check;\n-    pub use check::{check_attribute, check_crate, feature_err, feature_err_issue, get_features};\n-}\n pub mod mut_visit;\n pub mod ptr;\n-pub mod show_span;\n pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n@@ -93,8 +88,6 @@ pub mod print {\n     pub mod pprust;\n }\n \n-pub mod early_buffered_lints;\n-\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n /// Requirements for a `StableHashingContext` to be used in this crate."}, {"sha": "8d9cbe45fc69686fc47814f0fd97e9280d91dd46", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -6,9 +6,8 @@\n extern crate rustc;\n extern crate rustc_session;\n \n-use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint_pass, impl_lint_pass};\n-use rustc_session::declare_lint;\n+use rustc_session::lint::{LintArray, LintPass};\n+use rustc_session::{declare_lint, declare_lint_pass, impl_lint_pass};\n \n declare_lint! {\n     pub TEST_LINT,"}, {"sha": "39ac0019aac239063452504f5476a7a6f7485775", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,5 +1,5 @@\n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:21:6\n+  --> $DIR/lint_pass_impl_without_macro.rs:20:6\n    |\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:31:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:30:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^"}, {"sha": "df793d7dd7ec947a4833a7e8d1dd4eb44f60b36c", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -4,17 +4,21 @@ error[E0015]: calls in constant functions are limited to constant functions, tup\n LL |     random()\n    |     ^^^^^^^^\n \n-error[E0013]: constant functions cannot refer to statics, use a constant instead\n+error[E0013]: constant functions cannot refer to statics\n   --> $DIR/const-fn-not-safe-for-const.rs:20:5\n    |\n LL |     Y\n    |     ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0013]: constant functions cannot refer to statics, use a constant instead\n+error[E0013]: constant functions cannot refer to statics\n   --> $DIR/const-fn-not-safe-for-const.rs:25:6\n    |\n LL |     &Y\n    |      ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e45d8b6c740e0cf909ee28051d982cb8cc070fc9", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -7,17 +7,21 @@ LL | const C1: &'static mut [usize] = &mut [];\n    = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-const-bad-values.rs:5:46\n    |\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                              ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-const-bad-values.rs:5:46\n    |\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                              ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0658]: references in constants may only refer to immutable values\n   --> $DIR/issue-17718-const-bad-values.rs:5:41"}, {"sha": "e3c3b369ffb320418a9df9558aa176d1ee1ae0eb", "filename": "src/test/ui/issues/issue-17718-references.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-17718-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-references.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,20 +1,26 @@\n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-references.rs:9:29\n    |\n LL | const T2: &'static usize = &S;\n    |                             ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-references.rs:14:19\n    |\n LL | const T6: usize = S;\n    |                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-17718-references.rs:19:33\n    |\n LL | const T10: Struct = Struct { a: S };\n    |                                 ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f712a2eedb7e9cdb095ad83c20fb752ee11ba689", "filename": "src/test/ui/issues/issue-18118-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,7 +1,6 @@\n pub fn main() {\n     const z: &'static isize = {\n         static p: isize = 3;\n-        &p\n-        //~^ ERROR constants cannot refer to statics, use a constant instead\n+        &p //~ ERROR constants cannot refer to statics\n     };\n }"}, {"sha": "4fc3ca78f961c4e086df6ec297d38f5f22883c55", "filename": "src/test/ui/issues/issue-18118-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118-2.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,8 +1,10 @@\n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-18118-2.rs:4:10\n    |\n LL |         &p\n    |          ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error: aborting due to previous error\n "}, {"sha": "502825e9766e3d90af04bd09c311cdfccecbdc26", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -1,8 +1,10 @@\n-error[E0013]: constants cannot refer to statics, use a constant instead\n+error[E0013]: constants cannot refer to statics\n   --> $DIR/issue-52060.rs:4:26\n    |\n LL | static B: [u32; 1] = [0; A.len()];\n    |                          ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-52060.rs:4:26"}, {"sha": "3c49a5a975209eedc7b31ec2496bf72abefce925", "filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,6 @@\n+pub struct Foo {\n+    pub bar: Vec<i32>\u00f6\n+    //~^ ERROR expected `,`, or `}`, found `\u00f6`\n+} //~ ERROR expected `:`, found `}`\n+\n+fn main() {}"}, {"sha": "ef365a616437be09a73f32738943e6afc847ee13", "filename": "src/test/ui/issues/issue-68000-unicode-ident-after-missing-comma.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68000-unicode-ident-after-missing-comma.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,17 @@\n+error: expected `,`, or `}`, found `\u00f6`\n+  --> $DIR/issue-68000-unicode-ident-after-missing-comma.rs:2:22\n+   |\n+LL |     pub bar: Vec<i32>\u00f6\n+   |                      ^ help: try adding a comma: `,`\n+\n+error: expected `:`, found `}`\n+  --> $DIR/issue-68000-unicode-ident-after-missing-comma.rs:4:1\n+   |\n+LL |     pub bar: Vec<i32>\u00f6\n+   |                       - expected `:`\n+LL |\n+LL | }\n+   | ^ unexpected token\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "00f90cc73b344489e10765116834215a7212ce71", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! x {\n+    ($($c:tt)*) => {\n+        $($c)\u00f6* {} //~ ERROR missing condition for `if` expression\n+    };             //~| ERROR mismatched types\n+}\n+\n+fn main() {\n+    x!(if);\n+}"}, {"sha": "8d1a03ac207e18390a5f2559097969286108eb9f", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,18 @@\n+error: missing condition for `if` expression\n+  --> $DIR/issue-68091-unicode-ident-after-if.rs:3:14\n+   |\n+LL |         $($c)\u00f6* {}\n+   |              ^ expected if condition here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68091-unicode-ident-after-if.rs:3:17\n+   |\n+LL |         $($c)\u00f6* {}\n+   |                 ^^ expected `bool`, found `()`\n+...\n+LL |     x!(if);\n+   |     ------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1a90b4724d49d259ce76fd049f0b2b19190e7837", "filename": "src/test/ui/issues/issue-68092-unicode-ident-after-incomplete-expr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! x {\n+    ($($c:tt)*) => {\n+        $($c)\u00f6* //~ ERROR macro expansion ends with an incomplete expression: expected expression\n+    };\n+}\n+\n+fn main() {\n+    x!(!);\n+}"}, {"sha": "0b9c364f1f1fbb907e173aff1f91b4e402c44e27", "filename": "src/test/ui/issues/issue-68092-unicode-ident-after-incomplete-expr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68092-unicode-ident-after-incomplete-expr.stderr?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,8 @@\n+error: macro expansion ends with an incomplete expression: expected expression\n+  --> $DIR/issue-68092-unicode-ident-after-incomplete-expr.rs:3:14\n+   |\n+LL |         $($c)\u00f6*\n+   |              ^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "e775678fc605360e8d06f7ad3b983692884d8632", "filename": "src/test/ui/issues/issue-68103.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d1109600660d1acb471e85631e1ea349843fd9/src%2Ftest%2Fui%2Fissues%2Fissue-68103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68103.rs?ref=88d1109600660d1acb471e85631e1ea349843fd9", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+\n+pub extern crate self as name;\n+pub use name::name as bug;\n+\n+fn main() {}"}]}