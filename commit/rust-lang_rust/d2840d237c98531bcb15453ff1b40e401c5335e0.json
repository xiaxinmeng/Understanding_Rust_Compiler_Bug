{"sha": "d2840d237c98531bcb15453ff1b40e401c5335e0", "node_id": "C_kwDOAAsO6NoAKGQyODQwZDIzN2M5ODUzMWJjYjE1NDUzZmYxYjQwZTQwMWM1MzM1ZTA", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-07T22:21:37Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-08T16:00:23Z"}, "message": "add mapping from DefKind to Target and remove more ItemLikeVisitor impls\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "6c9551906ceb3557f4b41e2d3511194e063e2ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9551906ceb3557f4b41e2d3511194e063e2ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2840d237c98531bcb15453ff1b40e401c5335e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2840d237c98531bcb15453ff1b40e401c5335e0", "html_url": "https://github.com/rust-lang/rust/commit/d2840d237c98531bcb15453ff1b40e401c5335e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2840d237c98531bcb15453ff1b40e401c5335e0/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df10715463d27830b155edb571cb80ebb479e4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/df10715463d27830b155edb571cb80ebb479e4d2", "html_url": "https://github.com/rust-lang/rust/commit/df10715463d27830b155edb571cb80ebb479e4d2"}], "stats": {"total": 122, "additions": 60, "deletions": 62}, "files": [{"sha": "682e1167f03cc230e3a56b864723bf238f565cce", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=d2840d237c98531bcb15453ff1b40e401c5335e0", "patch": "@@ -7,6 +7,7 @@\n use crate::hir;\n use crate::{Item, ItemKind, TraitItem, TraitItemKind};\n \n+use crate::def::DefKind;\n use std::fmt::{self, Display};\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -130,6 +131,29 @@ impl Target {\n         }\n     }\n \n+    pub fn from_def_kind(def_kind: DefKind) -> Target {\n+        match def_kind {\n+            DefKind::ExternCrate => Target::ExternCrate,\n+            DefKind::Use => Target::Use,\n+            DefKind::Static(..) => Target::Static,\n+            DefKind::Const => Target::Const,\n+            DefKind::Fn => Target::Fn,\n+            DefKind::Macro(..) => Target::MacroDef,\n+            DefKind::Mod => Target::Mod,\n+            DefKind::ForeignMod => Target::ForeignMod,\n+            DefKind::GlobalAsm => Target::GlobalAsm,\n+            DefKind::TyAlias => Target::TyAlias,\n+            DefKind::OpaqueTy => Target::OpaqueTy,\n+            DefKind::Enum => Target::Enum,\n+            DefKind::Struct => Target::Struct,\n+            DefKind::Union => Target::Union,\n+            DefKind::Trait => Target::Trait,\n+            DefKind::TraitAlias => Target::TraitAlias,\n+            DefKind::Impl => Target::Impl,\n+            _ => panic!(\"impossible case reached\"),\n+        }\n+    }\n+\n     pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,"}, {"sha": "18d9bdf8e1792d7b86d6442bbc9e72fc07b6e954", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=d2840d237c98531bcb15453ff1b40e401c5335e0", "patch": "@@ -12,8 +12,8 @@ use crate::weak_lang_items;\n \n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, GenericRequirement, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n use rustc_middle::ty::TyCtxt;\n@@ -27,28 +27,6 @@ struct LanguageItemCollector<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        self.check_for_lang(Target::from_item(item), item.hir_id());\n-\n-        if let hir::ItemKind::Enum(def, ..) = &item.kind {\n-            for variant in def.variants {\n-                self.check_for_lang(Target::Variant, variant.id);\n-            }\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        self.check_for_lang(Target::from_trait_item(trait_item), trait_item.hir_id())\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        self.check_for_lang(target_from_impl_item(self.tcx, impl_item), impl_item.hir_id())\n-    }\n-\n-    fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n-}\n-\n impl<'tcx> LanguageItemCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LanguageItemCollector<'tcx> {\n         LanguageItemCollector { tcx, items: LanguageItems::new() }\n@@ -262,18 +240,28 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     let crate_items = tcx.hir_crate_items(());\n \n     for id in crate_items.items() {\n-        let item = tcx.hir().item(id);\n-        collector.visit_item(item);\n+        collector.check_for_lang(Target::from_def_kind(tcx.hir().def_kind(id.def_id)), id.hir_id());\n+\n+        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Enum) {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::Enum(def, ..) = &item.kind {\n+                for variant in def.variants {\n+                    collector.check_for_lang(Target::Variant, variant.id);\n+                }\n+            }\n+        }\n     }\n \n+    // FIXME: avoid calling trait_item() when possible\n     for id in crate_items.trait_items() {\n         let item = tcx.hir().trait_item(id);\n-        collector.visit_trait_item(item);\n+        collector.check_for_lang(Target::from_trait_item(item), item.hir_id())\n     }\n \n+    // FIXME: avoid calling impl_item() when possible\n     for id in crate_items.impl_items() {\n         let item = tcx.hir().impl_item(id);\n-        collector.visit_impl_item(item);\n+        collector.check_for_lang(target_from_impl_item(tcx, item), item.hir_id())\n     }\n \n     // Extract out the found lang items."}, {"sha": "363895d1cb3f7bd597128f39c43dd1a3f30beba0", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2840d237c98531bcb15453ff1b40e401c5335e0/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=d2840d237c98531bcb15453ff1b40e401c5335e0", "patch": "@@ -2,20 +2,11 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n-use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::lang_items::{self, LangItem};\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n use rustc_middle::middle::lang_items::required;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n-use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n-\n-struct Context<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    items: &'a mut lang_items::LanguageItems,\n-}\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n@@ -30,10 +21,28 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n         items.missing.push(LangItem::EhCatchTypeinfo);\n     }\n \n-    {\n-        let mut cx = Context { tcx, items };\n-        tcx.hir().visit_all_item_likes(&mut cx.as_deep_visitor());\n+    let crate_items = tcx.hir_crate_items(());\n+    for id in crate_items.foreign_items() {\n+        let attrs = tcx.hir().attrs(id.hir_id());\n+        let span = tcx.hir().span(id.hir_id());\n+        if let Some((lang_item, _)) = lang_items::extract(attrs) {\n+            if let Some(&item) = WEAK_ITEMS_REFS.get(&lang_item) {\n+                if items.require(item).is_err() {\n+                    items.missing.push(item);\n+                }\n+            } else {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    span,\n+                    E0264,\n+                    \"unknown external lang item: `{}`\",\n+                    lang_item\n+                )\n+                .emit();\n+            }\n+        }\n     }\n+\n     verify(tcx, items);\n }\n \n@@ -80,26 +89,3 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n         }\n     }\n }\n-\n-impl<'a, 'tcx> Context<'a, 'tcx> {\n-    fn register(&mut self, name: Symbol, span: Span) {\n-        if let Some(&item) = WEAK_ITEMS_REFS.get(&name) {\n-            if self.items.require(item).is_err() {\n-                self.items.missing.push(item);\n-            }\n-        } else {\n-            struct_span_err!(self.tcx.sess, span, E0264, \"unknown external lang item: `{}`\", name)\n-                .emit();\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n-        let attrs = self.tcx.hir().attrs(i.hir_id());\n-        if let Some((lang_item, _)) = lang_items::extract(attrs) {\n-            self.register(lang_item, i.span);\n-        }\n-        intravisit::walk_foreign_item(self, i)\n-    }\n-}"}]}