{"sha": "10cd28900f79e013edbea5b4d9d956249e85439a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwY2QyODkwMGY3OWUwMTNlZGJlYTViNGQ5ZDk1NjI0OWU4NTQzOWE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T11:37:20Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T11:37:20Z"}, "message": "Fix dogfood error", "tree": {"sha": "e2b40ef1eba741c6c725b4f8fa9a0969b357e0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b40ef1eba741c6c725b4f8fa9a0969b357e0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cd28900f79e013edbea5b4d9d956249e85439a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAly4YXAACgkQAcg2tkD/\n37F3Xg//foOTxvnObYaiMuJiJHx+2a/Q3AwE6xuPB07dnolEi7Ab+RNgAXBz56Zn\nCNFc2rDqdA0IhAGJU4t2qPUuQTRzOQetC9AgAnQc3u5lV7ub61eKiotxudw0kNOI\nmEn2XX3UvMNbWrPVf76RK7d4zkmb9+nmM9o3xKzLkN0wvO5iOgenpZJtiV5I+hGS\nytldLiOSi0V2cYqUwfVExFTwWmIuwIh9vWG9Rj/asA276FnWo3zk6TSNrf9JxUy0\nZHK+FGyvAssFbyyo998UKUdv6O2SHPSb9vKrXiJp7rYVLSZ/H+mQEnoOsS7p8DyR\ncKfgawggS38P9bqEuf03kXT/Pf2fEXjhmjNbF21Le6yLwZ64Fp9BwgMidBSOulo/\nb6bEFknmVUVVCgBd/QEn857xYLo/wJU1wTQ0FYir4ULvpSBXOlIaa5YwMKdeyxWC\nblBqj8uf81tVXQGnaB3IvKWxQ2UGpbfzIYZ56WEhXnwoa5HZMQqsdR5ArLgo095L\naFqKKVU/FAotl8TG1+ecFTmPhyeQ2S+PWTQsaCao6hFdxk7MCEHj4ak6pIvhizsD\nA33zBxvNfdIViqsr/gwAuP0WMPlZcyteB1iS1sq+V+aweH8Urfi2uA7583qnHbhx\n7cgKy3VQnyooJW0eO0Kn9TvI7LorsKbl///7KAeLnxEQYm/9SLo=\n=CwvN\n-----END PGP SIGNATURE-----", "payload": "tree e2b40ef1eba741c6c725b4f8fa9a0969b357e0c1\nparent 88359a136f517f8c828b8b2cdcf18421b0e5abe7\nauthor flip1995 <hello@philkrones.com> 1555587440 +0200\ncommitter flip1995 <hello@philkrones.com> 1555587440 +0200\n\nFix dogfood error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cd28900f79e013edbea5b4d9d956249e85439a", "html_url": "https://github.com/rust-lang/rust/commit/10cd28900f79e013edbea5b4d9d956249e85439a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cd28900f79e013edbea5b4d9d956249e85439a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88359a136f517f8c828b8b2cdcf18421b0e5abe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/88359a136f517f8c828b8b2cdcf18421b0e5abe7", "html_url": "https://github.com/rust-lang/rust/commit/88359a136f517f8c828b8b2cdcf18421b0e5abe7"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "36ed835e2581536f194a3a27ba8a0d99f56f1b9c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10cd28900f79e013edbea5b4d9d956249e85439a/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cd28900f79e013edbea5b4d9d956249e85439a/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=10cd28900f79e013edbea5b4d9d956249e85439a", "patch": "@@ -2,6 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n use crate::utils::{in_macro, is_direct_expn_of, span_help_and_lint};\n@@ -33,14 +34,16 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         let mut is_debug_assert = false;\n+        let debug_assert_not_in_macro = |span: Span| {\n+            is_debug_assert = true;\n+            // Check that `debug_assert!` itself is not inside a macro\n+            !in_macro(span)\n+        };\n         if_chain! {\n             if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n             if !in_macro(assert_span)\n-                || is_direct_expn_of(assert_span, \"debug_assert\").map_or(false, |span| {\n-                    is_debug_assert = true;\n-                    // Check that `debug_assert!` itself is not inside a macro\n-                    !in_macro(span)\n-                });\n+                || is_direct_expn_of(assert_span, \"debug_assert\")\n+                    .map_or(false, debug_assert_not_in_macro);\n             if let ExprKind::Unary(_, ref lit) = e.node;\n             if let Some(bool_const) = constant(cx, cx.tables, lit);\n             then {"}]}