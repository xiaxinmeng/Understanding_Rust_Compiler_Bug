{"sha": "4026053e99b6554bd7d996839e04dfeb9d40aa4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMjYwNTNlOTliNjU1NGJkN2Q5OTY4MzllMDRkZmViOWQ0MGFhNGQ=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-10T18:28:43Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-10T19:32:51Z"}, "message": "Do a better job of reporting source location for files (i.e. filemap)\nthat are really a substr of another file.", "tree": {"sha": "54d88693533a7a7ed6715a8ded9a3bd26f99d542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d88693533a7a7ed6715a8ded9a3bd26f99d542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4026053e99b6554bd7d996839e04dfeb9d40aa4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4026053e99b6554bd7d996839e04dfeb9d40aa4d", "html_url": "https://github.com/rust-lang/rust/commit/4026053e99b6554bd7d996839e04dfeb9d40aa4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4026053e99b6554bd7d996839e04dfeb9d40aa4d/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c362a6093b389e3a5f77e2ca91b05c57032498", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c362a6093b389e3a5f77e2ca91b05c57032498", "html_url": "https://github.com/rust-lang/rust/commit/a7c362a6093b389e3a5f77e2ca91b05c57032498"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "6bc5f91a16a091d81db7475513e0a815b75e4584", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=4026053e99b6554bd7d996839e04dfeb9d40aa4d", "patch": "@@ -175,6 +175,7 @@ fn emit(cmsp: option<(codemap::codemap, span)>,\n         msg: str, lvl: level) {\n     alt cmsp {\n       some((cm, sp)) {\n+        let sp = codemap::adjust_span(cm,sp);\n         let ss = codemap::span_to_str(sp, cm);\n         let lines = codemap::span_to_lines(sp, cm);\n         print_diagnostic(ss, lvl, msg);"}, {"sha": "3f848cc893ce7c079797c16dfe7c62650013552b", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=4026053e99b6554bd7d996839e04dfeb9d40aa4d", "patch": "@@ -46,6 +46,8 @@ fn get_substr_info(cm: codemap, sp: span)\n     let pos = lookup_char_pos(cm, sp.lo);\n     let name = #fmt(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n     ret (name, fss_internal(sp));\n+    //ret (name, fss_external({filename: pos.file.name,\n+    //                         line: pos.line, col: pos.col}));\n }\n \n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n@@ -92,26 +94,66 @@ fn lookup_byte_pos(map: codemap, pos: uint) -> loc {\n     ret lookup_pos(map, pos, lookup);\n }\n \n+fn lookup_char_pos_adj(map: codemap, pos: uint)\n+    -> {filename: str, line: uint, col: uint, file: option<filemap>}\n+{\n+    let loc = lookup_char_pos(map, pos);\n+    alt (loc.file.substr) {\n+      fss_none {\n+        {filename: loc.file.name, line: loc.line, col: loc.col,\n+         file: some(loc.file)}\n+      }\n+      fss_internal(sp) {\n+        lookup_char_pos_adj(map, sp.lo + (pos - loc.file.start_pos.ch))\n+      }\n+      fss_external(eloc) {\n+        {filename: eloc.filename,\n+         line: eloc.line + loc.line - 1u,\n+         col: if loc.line == 1u {eloc.col + loc.col} else {loc.col},\n+         file: none}\n+      }\n+    }\n+}\n+\n+fn adjust_span(map: codemap, sp: span) -> span {\n+    fn lookup(pos: file_pos) -> uint { ret pos.ch; }\n+    let line = lookup_line(map, sp.lo, lookup);\n+    alt (line.fm.substr) {\n+      fss_none {sp}\n+      fss_internal(s) {\n+        adjust_span(map, {lo: s.lo + (sp.lo - line.fm.start_pos.ch),\n+                          hi: s.lo + (sp.hi - line.fm.start_pos.ch),\n+                          expn_info: sp.expn_info})}\n+      fss_external(_) {sp}\n+    }\n+}\n+\n enum expn_info_ {\n     expanded_from({call_site: span,\n                    callie: {name: str, span: option<span>}})\n }\n type expn_info = option<@expn_info_>;\n type span = {lo: uint, hi: uint, expn_info: expn_info};\n \n-fn span_to_str(sp: span, cm: codemap) -> str {\n+fn span_to_str_no_adj(sp: span, cm: codemap) -> str {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     ret #fmt(\"%s:%u:%u: %u:%u\", lo.file.name,\n              lo.line, lo.col, hi.line, hi.col)\n }\n \n+fn span_to_str(sp: span, cm: codemap) -> str {\n+    let lo = lookup_char_pos_adj(cm, sp.lo);\n+    let hi = lookup_char_pos_adj(cm, sp.hi);\n+    ret #fmt(\"%s:%u:%u: %u:%u\", lo.filename,\n+             lo.line, lo.col, hi.line, hi.col)\n+}\n+\n type file_lines = {file: filemap, lines: [uint]};\n \n fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n-    // FIXME: Check for filemap?\n     let lines = [];\n     uint::range(lo.line - 1u, hi.line as uint) {|i| lines += [i]; };\n     ret @{file: lo.file, lines: lines};"}, {"sha": "243e90c35df3e06236da547cc23672643162effd", "filename": "src/test/compile-fail/qquote.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Ftest%2Fcompile-fail%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4026053e99b6554bd7d996839e04dfeb9d40aa4d/src%2Ftest%2Fcompile-fail%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote.rs?ref=4026053e99b6554bd7d996839e04dfeb9d40aa4d", "patch": "@@ -0,0 +1,51 @@\n+// xfail-pretty\n+\n+use std;\n+use rustc;\n+\n+import rustc::*;\n+import std::io::*;\n+\n+import rustc::driver::diagnostic;\n+import rustc::syntax::ast;\n+import rustc::syntax::codemap;\n+import rustc::syntax::parse::parser;\n+import rustc::syntax::print::*;\n+\n+fn new_parse_sess() -> parser::parse_sess {\n+  fail;\n+}\n+\n+iface fake_ext_ctxt {\n+    fn session() -> fake_session;\n+}\n+\n+type fake_options = {cfg: ast::crate_cfg};\n+\n+type fake_session = {opts: @fake_options,\n+                     parse_sess: parser::parse_sess};\n+\n+impl of fake_ext_ctxt for fake_session {\n+    fn session() -> fake_session {self}\n+}\n+\n+fn mk_ctxt() -> fake_ext_ctxt {\n+    let opts : fake_options = {cfg: []};\n+    {opts: @opts, parse_sess: new_parse_sess()} as fake_ext_ctxt\n+}\n+\n+\n+fn main() {\n+    let ext_cx = mk_ctxt();\n+\n+    let abc = #ast{23};\n+    check_pp(abc,  pprust::print_expr, \"23\");\n+\n+    let expr3 = #ast{2 - $(abcd) + 7}; //! ERROR unresolved name: abcd\n+    check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n+}\n+\n+fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n+    fail;\n+}\n+"}]}