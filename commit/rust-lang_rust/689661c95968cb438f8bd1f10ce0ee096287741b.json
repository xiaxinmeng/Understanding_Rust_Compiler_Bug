{"sha": "689661c95968cb438f8bd1f10ce0ee096287741b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTY2MWM5NTk2OGNiNDM4ZjhiZDFmMTBjZTBlZTA5NjI4Nzc0MWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T11:00:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T11:00:09Z"}, "message": "Scale back to only two traits", "tree": {"sha": "a974bfe4160a0cb0d49146b239d68cdb99a6566d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a974bfe4160a0cb0d49146b239d68cdb99a6566d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689661c95968cb438f8bd1f10ce0ee096287741b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689661c95968cb438f8bd1f10ce0ee096287741b", "html_url": "https://github.com/rust-lang/rust/commit/689661c95968cb438f8bd1f10ce0ee096287741b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689661c95968cb438f8bd1f10ce0ee096287741b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60f4d7bd8c0ecb9f23557464e824140a2be8f41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f4d7bd8c0ecb9f23557464e824140a2be8f41a", "html_url": "https://github.com/rust-lang/rust/commit/60f4d7bd8c0ecb9f23557464e824140a2be8f41a"}], "stats": {"total": 2248, "additions": 2020, "deletions": 228}, "files": [{"sha": "8a02f1a32c5132ac1ed357fdbde4d3aa7146c88e", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, AstElement, AstNode},\n+    ast::{self, AstNode},\n     SyntaxKind::{\n         BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n         WHITESPACE,\n@@ -124,7 +124,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n             }\n         }\n \n-        if ast::Stmt::cast_element(node.clone().into()).is_some() {\n+        if ast::Stmt::cast(node.clone().into()).is_some() {\n             return Some((node, false));\n         }\n "}, {"sha": "b02de5d67d01ccf7d7d213c1176bfe3556d6db22", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -492,7 +492,6 @@ impl ExprCollector<'_> {\n                 ast::Stmt::ExprStmt(stmt) => {\n                     Some(Statement::Expr(self.collect_expr_opt(stmt.expr())))\n                 }\n-                ast::Stmt::ModuleItem(_) => None,\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));"}, {"sha": "e1ebd5b92823dee6545fef7b8c0155e399744cbb", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -64,6 +64,22 @@ pub trait AstToken {\n     }\n }\n \n+mod support {\n+    use super::{AstChildren, AstNode, AstToken, SyntaxNode};\n+\n+    pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n+        parent.children().find_map(N::cast)\n+    }\n+\n+    pub(super) fn children<N: AstNode>(parent: &SyntaxNode) -> AstChildren<N> {\n+        AstChildren::new(parent)\n+    }\n+\n+    pub(super) fn token<T: AstToken>(parent: &SyntaxNode) -> Option<T> {\n+        parent.children_with_tokens().filter_map(|it| it.into_token()).find_map(T::cast)\n+    }\n+}\n+\n /// An iterator over `SyntaxNode` children of a particular AST type.\n #[derive(Debug, Clone)]\n pub struct AstChildren<N> {"}, {"sha": "33fe60762a34aa8b91eed4611801a5a6116e6f90", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -5,8 +5,7 @@ use itertools::Itertools;\n \n use crate::{\n     ast::{\n-        self, child_opt, child_token_opt, children, AstElement, AstNode, AstToken, AttrInput,\n-        NameOwner, SyntaxNode,\n+        self, child_opt, children, support, AstNode, AstToken, AttrInput, NameOwner, SyntaxNode,\n     },\n     SmolStr, SyntaxElement,\n     SyntaxKind::*,\n@@ -437,7 +436,7 @@ impl ast::TypeBound {\n                 .skip_while(|it| it.kind() != T![const])\n                 .find_map(ast::Question::cast)\n         } else {\n-            child_token_opt(self)\n+            support::token(&self.syntax)\n         }\n     }\n }\n@@ -509,26 +508,26 @@ impl ast::RangePat {\n     pub fn start(&self) -> Option<ast::Pat> {\n         self.syntax()\n             .children_with_tokens()\n-            .take_while(|it| !ast::RangeSeparator::can_cast_element(it.kind()))\n+            .take_while(|it| !ast::RangeSeparator::can_cast(it.kind()))\n             .filter_map(|it| it.into_node())\n             .find_map(ast::Pat::cast)\n     }\n \n     pub fn end(&self) -> Option<ast::Pat> {\n         self.syntax()\n             .children_with_tokens()\n-            .skip_while(|it| !ast::RangeSeparator::can_cast_element(it.kind()))\n+            .skip_while(|it| !ast::RangeSeparator::can_cast(it.kind()))\n             .filter_map(|it| it.into_node())\n             .find_map(ast::Pat::cast)\n     }\n }\n \n impl ast::TokenTree {\n     pub fn left_delimiter(&self) -> Option<ast::LeftDelimiter> {\n-        self.syntax().first_child_or_token().and_then(ast::LeftDelimiter::cast_element)\n+        self.syntax().first_child_or_token()?.into_token().and_then(ast::LeftDelimiter::cast)\n     }\n \n     pub fn right_delimiter(&self) -> Option<ast::RightDelimiter> {\n-        self.syntax().last_child_or_token().and_then(ast::RightDelimiter::cast_element)\n+        self.syntax().last_child_or_token()?.into_token().and_then(ast::RightDelimiter::cast)\n     }\n }"}, {"sha": "bd92e9c8748b994a77dbb7f1eb7043929eb330ec", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1921, "deletions": 172, "changes": 2093, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b"}, {"sha": "870e838048ab548ddba224b8d56f46edddd4c4df", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -4,9 +4,9 @@\n \n use itertools::Itertools;\n \n-use crate::ast::{\n-    self, child_elements, child_opt, child_token_opt, child_tokens, children, AstChildElements,\n-    AstChildTokens, AstChildren, AstNode, AstToken,\n+use crate::{\n+    ast::{self, child_opt, children, support, AstChildren, AstNode, AstToken},\n+    syntax_node::SyntaxElementChildren,\n };\n \n pub trait TypeAscriptionOwner: AstNode {\n@@ -71,7 +71,7 @@ pub trait TypeBoundsOwner: AstNode {\n     }\n \n     fn colon(&self) -> Option<ast::Colon> {\n-        child_token_opt(self)\n+        support::token(self.syntax())\n     }\n }\n \n@@ -82,14 +82,11 @@ pub trait AttrsOwner: AstNode {\n     fn has_atom_attr(&self, atom: &str) -> bool {\n         self.attrs().filter_map(|x| x.as_simple_atom()).any(|x| x == atom)\n     }\n-    fn attr_or_comments(&self) -> AstChildElements<ast::AttrOrComment> {\n-        child_elements(self)\n-    }\n }\n \n pub trait DocCommentsOwner: AstNode {\n-    fn doc_comments(&self) -> AstChildTokens<ast::Comment> {\n-        child_tokens(self)\n+    fn doc_comments(&self) -> CommentIter {\n+        CommentIter { iter: self.syntax().children_with_tokens() }\n     }\n \n     /// Returns the textual content of a doc comment block as a single string.\n@@ -134,3 +131,14 @@ pub trait DocCommentsOwner: AstNode {\n         }\n     }\n }\n+\n+pub struct CommentIter {\n+    iter: SyntaxElementChildren,\n+}\n+\n+impl Iterator for CommentIter {\n+    type Item = ast::Comment;\n+    fn next(&mut self) -> Option<ast::Comment> {\n+        self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n+    }\n+}"}, {"sha": "5fed777ace58266a3a50a6f2278d2c074691fc08", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -549,7 +549,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct Block: AttrsOwner, ModuleItemOwner {\n             LCurly,\n             statements: [Stmt],\n-            statements_or_semi: [StmtOrSemi],\n             Expr,\n             RCurly,\n         }\n@@ -749,12 +748,10 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n \n         enum AttrInput { Literal, TokenTree }\n         enum Stmt {\n-            ModuleItem,\n             LetStmt,\n             ExprStmt,\n             // macro calls are parsed as expression statements */\n         }\n-        enum StmtOrSemi {Stmt, Semi}\n \n         enum LeftDelimiter { LParen, LBrack, LCurly }\n         enum RightDelimiter { RParen, RBrack, RCurly }\n@@ -825,10 +822,5 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RecordFieldDefList,\n             TupleFieldDefList,\n         }\n-\n-        enum AttrOrComment {\n-            Attr,\n-            Comment\n-        }\n     },\n };"}, {"sha": "6dae93aa22064c8af8fdd2ccf42f9645493933ae", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/689661c95968cb438f8bd1f10ce0ee096287741b/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689661c95968cb438f8bd1f10ce0ee096287741b/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=689661c95968cb438f8bd1f10ce0ee096287741b", "patch": "@@ -146,14 +146,23 @@ fn generate_ast(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n                 FieldSrc::Many(_) => {\n                     quote! {\n                         pub fn #method_name(&self) -> AstChildren<#ty> {\n-                            AstChildren::new(&self.syntax)\n+                            support::children(&self.syntax)\n                         }\n                     }\n                 }\n                 FieldSrc::Optional(_) | FieldSrc::Shorthand => {\n-                    quote! {\n-                        pub fn #method_name(&self) -> Option<#ty> {\n-                            AstChildren::new(&self.syntax).next()\n+                    let is_token = element_kinds_map[&ty.to_string()].has_tokens;\n+                    if is_token {\n+                        quote! {\n+                            pub fn #method_name(&self) -> Option<#ty> {\n+                                support::token(&self.syntax)\n+                            }\n+                        }\n+                    } else {\n+                        quote! {\n+                            pub fn #method_name(&self) -> Option<#ty> {\n+                                support::child(&self.syntax)\n+                            }\n                         }\n                     }\n                 }\n@@ -205,6 +214,48 @@ fn generate_ast(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n             quote!(impl ast::#trait_name for #name {})\n         });\n \n+        let element_kinds = &element_kinds_map[&en.name.to_string()];\n+        assert!(\n+            element_kinds.has_nodes ^ element_kinds.has_tokens,\n+            \"{}: {:#?}\",\n+            name,\n+            element_kinds\n+        );\n+        let specific_ast_trait = {\n+            let (ast_trait, syntax_type) = if element_kinds.has_tokens {\n+                (quote!(AstToken), quote!(SyntaxToken))\n+            } else {\n+                (quote!(AstNode), quote!(SyntaxNode))\n+            };\n+\n+            quote! {\n+                impl #ast_trait for #name {\n+                    fn can_cast(kind: SyntaxKind) -> bool {\n+                        match kind {\n+                            #(#kinds)|* => true,\n+                            _ => false,\n+                        }\n+                    }\n+                    fn cast(syntax: #syntax_type) -> Option<Self> {\n+                        let res = match syntax.kind() {\n+                            #(\n+                            #kinds => #name::#variants(#variants { syntax }),\n+                            )*\n+                            _ => return None,\n+                        };\n+                        Some(res)\n+                    }\n+                    fn syntax(&self) -> &#syntax_type {\n+                        match self {\n+                            #(\n+                            #name::#variants(it) => &it.syntax,\n+                            )*\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+\n         quote! {\n             #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n             pub enum #name {\n@@ -225,30 +276,8 @@ fn generate_ast(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n                 }\n             }\n \n-            impl AstNode for #name {\n-                fn can_cast(kind: SyntaxKind) -> bool {\n-                    match kind {\n-                        #(#kinds)|* => true,\n-                        _ => false,\n-                    }\n-                }\n-                fn cast(syntax: SyntaxNode) -> Option<Self> {\n-                    let res = match syntax.kind() {\n-                        #(\n-                        #kinds => #name::#variants(#variants { syntax }),\n-                        )*\n-                        _ => return None,\n-                    };\n-                    Some(res)\n-                }\n-                fn syntax(&self) -> &SyntaxNode {\n-                    match self {\n-                        #(\n-                        #name::#variants(it) => &it.syntax,\n-                        )*\n-                    }\n-                }\n-            }\n+            #specific_ast_trait\n+\n             #(#traits)*\n         }\n     });\n@@ -268,7 +297,7 @@ fn generate_ast(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         #[allow(unused_imports)]\n         use crate::{\n             SyntaxNode, SyntaxToken, SyntaxElement, NodeOrToken, SyntaxKind::{self, *},\n-            ast::{self, AstNode, AstToken, AstChildren},\n+            ast::{self, AstNode, AstToken, AstChildren, support},\n         };\n \n         #(#tokens)*"}]}