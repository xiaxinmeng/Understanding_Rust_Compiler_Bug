{"sha": "ce1c85317f80b96b5fdc65fa2e76d4150f26abfa", "node_id": "C_kwDOAAsO6NoAKGNlMWM4NTMxN2Y4MGI5NmI1ZmRjNjVmYTJlNzZkNDE1MGYyNmFiZmE", "commit": {"author": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-05-26T09:59:44Z"}, "committer": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-05-26T11:24:29Z"}, "message": "Check param is not referenced in function\n\nThis checks the type param is referenced neither in the function body\nnor as a return type.\n\n* add tests", "tree": {"sha": "96af9faec23bfef72b0e12d5b0b7906edc1b7907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96af9faec23bfef72b0e12d5b0b7906edc1b7907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa", "html_url": "https://github.com/rust-lang/rust/commit/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa/comments", "author": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95f59668e65d53a985897af1c7ae4c2b449016ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f59668e65d53a985897af1c7ae4c2b449016ba", "html_url": "https://github.com/rust-lang/rust/commit/95f59668e65d53a985897af1c7ae4c2b449016ba"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "4e7011b5ca385db97b0fe6a4462e3eacde1afcbe", "filename": "crates/ide-assists/src/handlers/replace_named_generic_with_impl.rs", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1c85317f80b96b5fdc65fa2e76d4150f26abfa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs?ref=ce1c85317f80b96b5fdc65fa2e76d4150f26abfa", "patch": "@@ -1,3 +1,10 @@\n+use hir::{Semantics, TypeParam};\n+use ide_db::{\n+    base_db::{FileId, FileRange},\n+    defs::Definition,\n+    search::SearchScope,\n+    RootDatabase,\n+};\n use syntax::{\n     ast::{self, make::impl_trait_type, HasGenericParams, HasName, HasTypeBounds},\n     ted, AstNode,\n@@ -22,13 +29,12 @@ pub(crate) fn replace_named_generic_with_impl(\n ) -> Option<()> {\n     // finds `<P: AsRef<Path>>`\n     let type_param = ctx.find_node_at_offset::<ast::TypeParam>()?;\n+    // returns `P`\n+    let type_param_name = type_param.name()?;\n \n     // The list of type bounds / traits: `AsRef<Path>`\n     let type_bound_list = type_param.type_bound_list()?;\n \n-    // returns `P`\n-    let type_param_name = type_param.name()?;\n-\n     let fn_ = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n     let params = fn_\n         .param_list()?\n@@ -53,6 +59,11 @@ pub(crate) fn replace_named_generic_with_impl(\n         return None;\n     }\n \n+    let type_param_hir_def = ctx.sema.to_def(&type_param)?;\n+    if is_referenced_outside(ctx.db(), type_param_hir_def, &fn_, ctx.file_id()) {\n+        return None;\n+    }\n+\n     let target = type_param.syntax().text_range();\n \n     acc.add(\n@@ -88,11 +99,36 @@ pub(crate) fn replace_named_generic_with_impl(\n     )\n }\n \n+fn is_referenced_outside(\n+    db: &RootDatabase,\n+    type_param: TypeParam,\n+    fn_: &ast::Fn,\n+    file_id: FileId,\n+) -> bool {\n+    let semantics = Semantics::new(db);\n+    let type_param_def = Definition::GenericParam(hir::GenericParam::TypeParam(type_param));\n+\n+    // limit search scope to function body & return type\n+    let search_ranges = vec![\n+        fn_.body().map(|body| body.syntax().text_range()),\n+        fn_.ret_type().map(|ret_type| ret_type.syntax().text_range()),\n+    ];\n+\n+    search_ranges.into_iter().filter_map(|search_range| search_range).any(|search_range| {\n+        let file_range = FileRange { file_id, range: search_range };\n+        !type_param_def\n+            .usages(&semantics)\n+            .in_scope(SearchScope::file_range(file_range))\n+            .all()\n+            .is_empty()\n+    })\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n \n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn replace_generic_moves_into_function() {\n@@ -122,12 +158,22 @@ mod tests {\n     }\n \n     #[test]\n-    fn replace_generic_with_multiple_generic_names() {\n+    fn replace_generic_with_multiple_generic_params() {\n         check_assist(\n             replace_named_generic_with_impl,\n             r#\"fn new<P: AsRef<Path>, T$0: ToString>(t: T, p: P) -> Self {}\"#,\n             r#\"fn new<P: AsRef<Path>>(t: impl ToString, p: P) -> Self {}\"#,\n         );\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<T$0: ToString, P: AsRef<Path>>(t: T, p: P) -> Self {}\"#,\n+            r#\"fn new<P: AsRef<Path>>(t: impl ToString, p: P) -> Self {}\"#,\n+        );\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<A: Send, B$0: ToString, C: Debug>(a: A, b: B, c: C) -> Self {}\"#,\n+            r#\"fn new<A: Send, C: Debug>(a: A, b: impl ToString, c: C) -> Self {}\"#,\n+        );\n     }\n \n     #[test]\n@@ -138,4 +184,35 @@ mod tests {\n             r#\"fn new(p: impl Send + Sync) -> Self {}\"#,\n         );\n     }\n+\n+    #[test]\n+    fn replace_generic_not_applicable_if_param_used_as_return_type() {\n+        check_assist_not_applicable(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: Send + Sync>(p: P) -> P {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_not_applicable_if_param_used_in_fn_body() {\n+        check_assist_not_applicable(\n+            replace_named_generic_with_impl,\n+            r#\"fn new<P$0: ToString>(p: P) { let x: &dyn P = &O; }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_generic_ignores_another_function_with_same_param_type() {\n+        check_assist(\n+            replace_named_generic_with_impl,\n+            r#\"\n+            fn new<P$0: Send + Sync>(p: P) {}\n+            fn hello<P: Debug>(p: P) { println!(\"{:?}\", p); }\n+            \"#,\n+            r#\"\n+            fn new(p: impl Send + Sync) {}\n+            fn hello<P: Debug>(p: P) { println!(\"{:?}\", p); }\n+            \"#,\n+        );\n+    }\n }"}]}