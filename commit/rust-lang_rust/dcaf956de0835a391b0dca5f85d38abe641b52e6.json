{"sha": "dcaf956de0835a391b0dca5f85d38abe641b52e6", "node_id": "C_kwDOAAsO6NoAKGRjYWY5NTZkZTA4MzVhMzkxYjBkY2E1Zjg1ZDM4YWJlNjQxYjUyZTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T22:11:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T15:38:52Z"}, "message": "AsLocalKey trait", "tree": {"sha": "4beaa37cc9f9873a016b1c801689b82b5970e5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4beaa37cc9f9873a016b1c801689b82b5970e5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcaf956de0835a391b0dca5f85d38abe641b52e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaf956de0835a391b0dca5f85d38abe641b52e6", "html_url": "https://github.com/rust-lang/rust/commit/dcaf956de0835a391b0dca5f85d38abe641b52e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcaf956de0835a391b0dca5f85d38abe641b52e6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e6506764bf315dee81b403c724d31677b7694f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6506764bf315dee81b403c724d31677b7694f5", "html_url": "https://github.com/rust-lang/rust/commit/7e6506764bf315dee81b403c724d31677b7694f5"}], "stats": {"total": 361, "additions": 48, "deletions": 313}, "files": [{"sha": "f161f61d53e784db8c4964c60835c3acca25d5a3", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 43, "deletions": 304, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=dcaf956de0835a391b0dca5f85d38abe641b52e6", "patch": "@@ -26,12 +26,6 @@ pub trait Key: Sized {\n     //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n     type CacheSelector;\n \n-    type LocalKey;\n-\n-    /// Given an instance of this key, what crate is it referring to?\n-    /// This is used to find the provider.\n-    fn as_local_key(&self) -> Option<Self::LocalKey>;\n-\n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n@@ -47,14 +41,16 @@ pub trait Key: Sized {\n     }\n }\n \n+pub trait AsLocalKey: Key {\n+    type LocalKey;\n+\n+    /// Given an instance of this key, what crate is it referring to?\n+    /// This is used to find the provider.\n+    fn as_local_key(&self) -> Option<Self::LocalKey>;\n+}\n+\n impl Key for () {\n     type CacheSelector = SingleCacheSelector;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -63,26 +59,23 @@ impl Key for () {\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        self.def_id().is_local().then(|| *self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n \n-impl<'tcx> Key for ty::Instance<'tcx> {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+impl<'tcx> AsLocalKey for ty::InstanceDef<'tcx> {\n     type LocalKey = Self;\n \n     #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n         self.def_id().is_local().then(|| *self)\n     }\n+}\n+\n+impl<'tcx> Key for ty::Instance<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n@@ -91,12 +84,6 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.instance.default_span(tcx)\n@@ -105,12 +92,6 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n \n impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -119,12 +100,6 @@ impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -133,26 +108,23 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n \n impl Key for CrateNum {\n     type CacheSelector = VecCacheSelector<Self>;\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n+impl AsLocalKey for CrateNum {\n     type LocalKey = ();\n \n     #[inline(always)]\n     fn as_local_key(&self) -> Option<Self::LocalKey> {\n         (*self == LOCAL_CRATE).then_some(())\n     }\n-\n-    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n-        DUMMY_SP\n-    }\n }\n \n impl Key for OwnerId {\n     type CacheSelector = VecCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n@@ -165,12 +137,6 @@ impl Key for OwnerId {\n \n impl Key for LocalDefId {\n     type CacheSelector = VecCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n@@ -183,12 +149,6 @@ impl Key for LocalDefId {\n \n impl Key for DefId {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = LocalDefId;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.as_local()\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(*self)\n@@ -200,14 +160,17 @@ impl Key for DefId {\n     }\n }\n \n-impl Key for ty::WithOptConstParam<LocalDefId> {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n+impl AsLocalKey for DefId {\n+    type LocalKey = LocalDefId;\n \n     #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.as_local()\n     }\n+}\n+\n+impl Key for ty::WithOptConstParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.did.default_span(tcx)\n@@ -216,12 +179,6 @@ impl Key for ty::WithOptConstParam<LocalDefId> {\n \n impl Key for SimplifiedType {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -230,12 +187,6 @@ impl Key for SimplifiedType {\n \n impl Key for (DefId, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, DefId);\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1))\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n@@ -244,12 +195,6 @@ impl Key for (DefId, DefId) {\n \n impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -258,12 +203,6 @@ impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n \n impl Key for (DefId, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, LocalDefId);\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1))\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n@@ -272,12 +211,6 @@ impl Key for (DefId, LocalDefId) {\n \n impl Key for (LocalDefId, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -286,12 +219,6 @@ impl Key for (LocalDefId, DefId) {\n \n impl Key for (LocalDefId, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -300,11 +227,6 @@ impl Key for (LocalDefId, LocalDefId) {\n \n impl Key for (DefId, Option<Ident>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, Option<Ident>);\n-\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1))\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0)\n@@ -318,11 +240,6 @@ impl Key for (DefId, Option<Ident>) {\n \n impl Key for (LocalDefId, LocalDefId, Ident) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n@@ -331,40 +248,40 @@ impl Key for (LocalDefId, LocalDefId, Ident) {\n \n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = DefId;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        (self.0 == LOCAL_CRATE).then_some(self.1)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n-impl Key for (CrateNum, SimplifiedType) {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = SimplifiedType;\n+impl AsLocalKey for (CrateNum, DefId) {\n+    type LocalKey = DefId;\n \n     #[inline(always)]\n     fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        (self.0 == LOCAL_CRATE).then_some(self.1)\n+        (self.0 == LOCAL_CRATE).then(|| self.1)\n     }\n+}\n+\n+impl Key for (CrateNum, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n-impl Key for (DefId, SimplifiedType) {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, SimplifiedType);\n+impl AsLocalKey for (CrateNum, SimplifiedType) {\n+    type LocalKey = SimplifiedType;\n \n     #[inline(always)]\n     fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1))\n+        (self.0 == LOCAL_CRATE).then(|| self.1)\n     }\n+}\n+\n+impl Key for (DefId, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -373,12 +290,6 @@ impl Key for (DefId, SimplifiedType) {\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -387,12 +298,6 @@ impl<'tcx> Key for SubstsRef<'tcx> {\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = (LocalDefId, SubstsRef<'tcx>);\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        Some((self.0.as_local()?, self.1))\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -401,12 +306,6 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n \n impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.0.def.is_local().then_some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         (self.0).def.did.default_span(tcx)\n@@ -415,12 +314,6 @@ impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -429,12 +322,6 @@ impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.1.def_id().is_local().then_some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.1.def_id())\n@@ -443,12 +330,6 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n \n impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -457,12 +338,6 @@ impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -471,12 +346,6 @@ impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.def_id().is_local().then_some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n@@ -485,12 +354,6 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n \n impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.def_id().is_local().then_some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n@@ -499,12 +362,6 @@ impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n \n impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.0.def_id().is_local().then_some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0.def_id())\n@@ -513,12 +370,6 @@ impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n \n impl<'tcx> Key for GenericArg<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -527,12 +378,6 @@ impl<'tcx> Key for GenericArg<'tcx> {\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -541,12 +386,6 @@ impl<'tcx> Key for mir::ConstantKind<'tcx> {\n \n impl<'tcx> Key for ty::Const<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -555,12 +394,6 @@ impl<'tcx> Key for ty::Const<'tcx> {\n \n impl<'tcx> Key for Ty<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -576,12 +409,6 @@ impl<'tcx> Key for Ty<'tcx> {\n \n impl<'tcx> Key for TyAndLayout<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -590,12 +417,6 @@ impl<'tcx> Key for TyAndLayout<'tcx> {\n \n impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -604,12 +425,6 @@ impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -618,12 +433,6 @@ impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -632,11 +441,6 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = ty::ParamEnvAnd<'tcx, T::LocalKey>;\n-\n-    fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        self.value.as_local_key().map(|value| ty::ParamEnvAnd { param_env: self.param_env, value })\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.value.default_span(tcx)\n@@ -645,12 +449,6 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n \n impl Key for Symbol {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -659,12 +457,6 @@ impl Key for Symbol {\n \n impl Key for Option<Symbol> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -675,12 +467,6 @@ impl Key for Option<Symbol> {\n /// are not tied to any crate in particular.\n impl<'tcx, T: Clone> Key for Canonical<'tcx, T> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(self.clone())\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -689,12 +475,6 @@ impl<'tcx, T: Clone> Key for Canonical<'tcx, T> {\n \n impl Key for (Symbol, u32, u32) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -703,12 +483,6 @@ impl Key for (Symbol, u32, u32) {\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -717,12 +491,6 @@ impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n \n impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -731,12 +499,6 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n \n impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -745,12 +507,6 @@ impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n \n impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n@@ -759,12 +515,6 @@ impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n \n impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n@@ -773,12 +523,6 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n \n impl Key for HirId {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n-\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.hir().span(*self)\n@@ -792,13 +536,8 @@ impl Key for HirId {\n \n impl<'tcx> Key for (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n-    type LocalKey = Self;\n \n     // Just forward to `Ty<'tcx>`\n-    #[inline(always)]\n-    fn as_local_key(&self) -> Option<Self> {\n-        Some(*self)\n-    }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP"}, {"sha": "f5cbfd6623e3355bcf49064f102a23012491d539", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=dcaf956de0835a391b0dca5f85d38abe641b52e6", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, print::describe_as_module, TyCtxt};\n use rustc_span::def_id::LOCAL_CRATE;\n \n mod keys;\n-pub use keys::Key;\n+pub use keys::{AsLocalKey, Key};\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n@@ -796,7 +796,6 @@ rustc_queries! {\n     query associated_type_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n         desc { |tcx| \"creates the associated item corresponding to the opaque type `{}`\", tcx.def_path_str(opaque_ty_def_id.to_def_id()) }\n         cache_on_disk_if { true }\n-        separate_provide_extern\n     }\n \n     /// Given an `impl_id`, return the trait it implements."}, {"sha": "2771d713c4201ae57fdfdc023961d65e5e8a0ff9", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=dcaf956de0835a391b0dca5f85d38abe641b52e6", "patch": "@@ -17,7 +17,7 @@ use crate::mir::interpret::{\n };\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n-use crate::query::Key;\n+use crate::query::{AsLocalKey, Key};\n use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -233,7 +233,7 @@ macro_rules! define_callbacks {\n         pub mod query_keys_local {\n             use super::*;\n \n-            $(pub type $name<'tcx> = <$($K)* as Key>::LocalKey;)*\n+            $(pub type $name<'tcx> = <$($K)* as AsLocalKey>::LocalKey;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_values {\n@@ -416,17 +416,14 @@ macro_rules! define_callbacks {\n \n         impl Default for Providers {\n             fn default() -> Self {\n-                use crate::query::Key;\n-\n                 Providers {\n                     $($name: |_, key| bug!(\n-                        \"`tcx.{}({:?})` is not supported for {} crate;\\n\\\n+                        \"`tcx.{}({:?})` is not supported for this key;\\n\\\n                         hint: Queries can be either made to the local crate, or the external crate. \\\n                         This error means you tried to use it for one that's not supported.\\n\\\n                         If that's not the case, {} was likely never assigned to a provider function.\\n\",\n                         stringify!($name),\n                         key,\n-                        if key.as_local_key().is_some() { \"local\" } else { \"external\" },\n                         stringify!($name),\n                     ),)*\n                 }"}, {"sha": "4cd9423706104807b3be3a7dc607ce41460509c2", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaf956de0835a391b0dca5f85d38abe641b52e6/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=dcaf956de0835a391b0dca5f85d38abe641b52e6", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_middle;\n use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct};\n-use rustc_middle::query::Key;\n+use rustc_middle::query::AsLocalKey;\n use rustc_middle::ty::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n };"}]}