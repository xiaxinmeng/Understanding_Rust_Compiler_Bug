{"sha": "b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZTBjNjBkNmRlZTM4MzIzNThiZTFiNGI4MzAzZmU2YWRlNmJlNGM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T01:42:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T01:42:12Z"}, "message": "Add ty_obj to ast and parser.", "tree": {"sha": "0a28b1b0489af217b9ad5e33eb1fc3025658972a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a28b1b0489af217b9ad5e33eb1fc3025658972a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "html_url": "https://github.com/rust-lang/rust/commit/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cddeed6515a86337212f2e1be3515a89e86106f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cddeed6515a86337212f2e1be3515a89e86106f", "html_url": "https://github.com/rust-lang/rust/commit/4cddeed6515a86337212f2e1be3515a89e86106f"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "88b7fc78345fb582443dd1bcb66ddee455a856e1", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "patch": "@@ -171,6 +171,8 @@ tag lit_ {\n \n type ty_field = rec(ident ident, @ty ty);\n type ty_arg = rec(mode mode, @ty ty);\n+// TODO: effect\n+type ty_method = rec(ident ident, vec[ty_arg] inputs, @ty output);\n type ty = spanned[ty_];\n tag ty_ {\n     ty_nil;\n@@ -185,6 +187,7 @@ tag ty_ {\n     ty_tup(vec[@ty]);\n     ty_rec(vec[ty_field]);\n     ty_fn(vec[ty_arg], @ty);        // TODO: effect\n+    ty_obj(vec[ty_method]);\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n }"}, {"sha": "3eacb5f99ee19c53249590440256900c171b98a2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "patch": "@@ -102,7 +102,7 @@ impure fn parse_ident(parser p) -> ast.ident {\n     }\n }\n \n-impure fn parse_ty_fn(parser p) -> ast.ty_ {\n+impure fn parse_ty_fn(parser p, ast.span lo) -> ast.ty_ {\n     impure fn parse_fn_input_ty(parser p) -> rec(ast.mode mode, @ast.ty ty) {\n         auto mode;\n         if (p.peek() == token.BINOP(token.AND)) {\n@@ -124,8 +124,6 @@ impure fn parse_ty_fn(parser p) -> ast.ty_ {\n \n     auto lo = p.get_span();\n \n-    expect(p, token.FN);\n-\n     auto f = parse_fn_input_ty; // FIXME: trans_const_lval bug\n     auto inputs = parse_seq[rec(ast.mode mode, @ast.ty ty)](token.LPAREN,\n         token.RPAREN, some(token.COMMA), f, p);\n@@ -141,6 +139,31 @@ impure fn parse_ty_fn(parser p) -> ast.ty_ {\n     ret ast.ty_fn(inputs.node, output);\n }\n \n+impure fn parse_ty_obj(parser p, &mutable ast.span hi) -> ast.ty_ {\n+    expect(p, token.OBJ);\n+    impure fn parse_method_sig(parser p) -> ast.ty_method {\n+        auto flo = p.get_span();\n+        expect(p, token.FN);\n+        auto ident = parse_ident(p);\n+        auto f = parse_ty_fn(p, flo);\n+        expect(p, token.SEMI);\n+        alt (f) {\n+            case (ast.ty_fn(?inputs, ?output)) {\n+                ret rec(ident=ident, inputs=inputs, output=output);\n+            }\n+        }\n+        fail;\n+    }\n+    auto f = parse_method_sig;\n+    auto meths =\n+        parse_seq[ast.ty_method](token.LBRACE,\n+                                 token.RBRACE,\n+                                 none[token.token],\n+                                 f, p);\n+    hi = meths.span;\n+    ret ast.ty_obj(meths.node);\n+}\n+\n impure fn parse_ty_field(parser p) -> ast.ty_field {\n     auto ty = parse_ty(p);\n     auto id = parse_ident(p);\n@@ -196,7 +219,7 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             auto elems = parse_seq[@ast.ty] (token.LPAREN,\n                                              token.RPAREN,\n                                              some(token.COMMA), f, p);\n-            hi = p.get_span();\n+            hi = elems.span;\n             t = ast.ty_tup(elems.node);\n         }\n \n@@ -208,26 +231,32 @@ impure fn parse_ty(parser p) -> @ast.ty {\n                                         token.RPAREN,\n                                         some(token.COMMA),\n                                         f, p);\n-            hi = p.get_span();\n+            hi = elems.span;\n             t = ast.ty_rec(elems.node);\n         }\n \n         case (token.MUTABLE) {\n             p.bump();\n             auto t0 = parse_ty(p);\n-            hi = p.get_span();\n+            hi = t0.span;\n             t = ast.ty_mutable(t0);\n         }\n \n         case (token.FN) {\n-            t = parse_ty_fn(p);\n+            auto flo = p.get_span();\n+            p.bump();\n+            t = parse_ty_fn(p, flo);\n             alt (t) {\n                 case (ast.ty_fn(_, ?out)) {\n                     hi = out.span;\n                 }\n             }\n         }\n \n+        case (token.OBJ) {\n+            t = parse_ty_obj(p, hi);\n+        }\n+\n         case (token.IDENT(_)) {\n             let ast.path pth = vec();\n             let bool more = true;"}]}