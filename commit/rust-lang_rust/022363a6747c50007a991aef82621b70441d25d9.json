{"sha": "022363a6747c50007a991aef82621b70441d25d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjM2M2E2NzQ3YzUwMDA3YTk5MWFlZjgyNjIxYjcwNDQxZDI1ZDk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T12:28:46Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T12:28:46Z"}, "message": "Auto-bind generic functions when their value is taken in non-call context\n\ntrans::trans_lval will now autobind if the given expression was the\nname of a generic functions. Those callees (trans_call and trans_bind)\nthat are interested in the generics information call trans_lval_gen\nnow.", "tree": {"sha": "957d635798b0d98345b1d929e55b88e478e4c6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957d635798b0d98345b1d929e55b88e478e4c6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022363a6747c50007a991aef82621b70441d25d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022363a6747c50007a991aef82621b70441d25d9", "html_url": "https://github.com/rust-lang/rust/commit/022363a6747c50007a991aef82621b70441d25d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022363a6747c50007a991aef82621b70441d25d9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faec0d77995cc54944959e807d20b1fdf9bbac59", "url": "https://api.github.com/repos/rust-lang/rust/commits/faec0d77995cc54944959e807d20b1fdf9bbac59", "html_url": "https://github.com/rust-lang/rust/commit/faec0d77995cc54944959e807d20b1fdf9bbac59"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "02ff9e77cb41835991b0ca9fd29591c3e7edcf4b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/022363a6747c50007a991aef82621b70441d25d9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022363a6747c50007a991aef82621b70441d25d9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=022363a6747c50007a991aef82621b70441d25d9", "patch": "@@ -5201,7 +5201,7 @@ fn trans_index(&@block_ctxt cx, &span sp, &@ast::expr base, &@ast::expr idx,\n // The additional bool returned indicates whether it's mem (that is\n // represented as an alloca or heap, hence needs a 'load' to be used as an\n // immediate).\n-fn trans_lval(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n+fn trans_lval_gen(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n     alt (e.node) {\n         case (ast::expr_path(?p)) { ret trans_path(cx, p, e.id); }\n         case (ast::expr_field(?base, ?ident)) {\n@@ -5263,6 +5263,23 @@ fn trans_lval(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n     }\n }\n \n+fn trans_lval(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n+    auto lv = trans_lval_gen(cx, e);\n+    alt (lv.generic) {\n+        case (some(?gi)) {\n+            auto t = ty::expr_ty(cx.fcx.lcx.ccx.tcx, e);\n+            auto n_args =\n+                std::ivec::len(ty::ty_fn_args(cx.fcx.lcx.ccx.tcx, t));\n+            auto args = std::ivec::init_elt(none[@ast::expr], n_args);\n+            auto bound = trans_bind_1(lv.res.bcx, e, lv, args, e.id);\n+            ret lval_val(bound.bcx, bound.val);\n+        }\n+        case (none) {\n+            ret lv;\n+        }\n+    }\n+}\n+\n fn int_cast(&@block_ctxt bcx, TypeRef lldsttype, TypeRef llsrctype,\n             ValueRef llsrc, bool signed) -> ValueRef {\n     if (llvm::LLVMGetIntTypeWidth(lldsttype) >\n@@ -5489,7 +5506,12 @@ fn trans_bind_thunk(&@local_ctxt cx, &span sp, &ty::t incoming_fty,\n \n fn trans_bind(&@block_ctxt cx, &@ast::expr f,\n               &(option::t[@ast::expr])[] args, ast::node_id id) -> result {\n-    auto f_res = trans_lval(cx, f);\n+    auto f_res = trans_lval_gen(cx, f);\n+    ret trans_bind_1(cx, f, f_res, args, id);\n+}\n+\n+fn trans_bind_1(&@block_ctxt cx, &@ast::expr f, &lval_result f_res,\n+                &(option::t[@ast::expr])[] args, ast::node_id id) -> result {\n     if (f_res.is_mem) {\n         cx.fcx.lcx.ccx.sess.unimpl(\"re-binding existing function\");\n     } else {\n@@ -5839,7 +5861,7 @@ fn trans_call(&@block_ctxt cx, &@ast::expr f, &option::t[ValueRef] lliterbody,\n     // expression because of the hack that allows us to process self-calls\n     // with trans_call.\n \n-    auto f_res = trans_lval(cx, f);\n+    auto f_res = trans_lval_gen(cx, f);\n     let ty::t fn_ty;\n     alt (f_res.method_ty) {\n         case (some(?meth)) {\n@@ -6361,7 +6383,9 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output) ->\n \n     auto t = ty::expr_ty(cx.fcx.lcx.ccx.tcx, e);\n     auto sub = trans_lval(cx, e);\n-    ret rslt(sub.res.bcx, load_if_immediate(sub.res.bcx, sub.res.val, t));\n+    auto v = sub.res.val;\n+    if (sub.is_mem) { v = load_if_immediate(sub.res.bcx, v, t); }\n+    ret rslt(sub.res.bcx, v);\n }\n \n fn with_out_method(fn(&out_method) -> result  work, @block_ctxt cx,"}, {"sha": "98cda76a0c19de95074394152b5fd29eb3085143", "filename": "src/test/run-pass/autobind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/022363a6747c50007a991aef82621b70441d25d9/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022363a6747c50007a991aef82621b70441d25d9/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=022363a6747c50007a991aef82621b70441d25d9", "patch": "@@ -0,0 +1,13 @@\n+fn f[T](&T[] x) -> T {\n+    ret x.(0);\n+}\n+\n+fn g(fn(&int[]) -> int act) -> int {\n+    ret act(~[1, 2, 3]);\n+}\n+\n+fn main() {\n+    assert g(f) == 1;\n+    let fn(&str[]) -> str f1 = f;\n+    assert f1(~[\"x\", \"y\", \"z\"]) == \"x\";\n+}"}]}