{"sha": "59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "node_id": "C_kwDOAAsO6NoAKDU5ZjlhOTE4ZWRkY2Y5ZDEzMWY1NWMyZWY5NmQ5ZTgyYTU3MDZjZjA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:40:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:57:31Z"}, "message": "handle get_alloc_extra the same throughout Stacked Borrows", "tree": {"sha": "ea3e2016596c6c27f2e9123cd59a6e81fe82ab97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea3e2016596c6c27f2e9123cd59a6e81fe82ab97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "html_url": "https://github.com/rust-lang/rust/commit/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167e5dcad39cd12596ace6fce1ef06218e559542", "url": "https://api.github.com/repos/rust-lang/rust/commits/167e5dcad39cd12596ace6fce1ef06218e559542", "html_url": "https://github.com/rust-lang/rust/commit/167e5dcad39cd12596ace6fce1ef06218e559542"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "442c201e8ece64349ba081cfdb119f9b9ffbf3c7", "filename": "src/intptrcast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "patch": "@@ -94,16 +94,21 @@ impl<'mir, 'tcx> GlobalStateInner {\n         None\n     }\n \n-    pub fn expose_ptr(ecx: &mut MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId, sb: SbTag) {\n+    pub fn expose_ptr(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        alloc_id: AllocId,\n+        sb: SbTag,\n+    ) -> InterpResult<'tcx> {\n         let global_state = ecx.machine.intptrcast.get_mut();\n         // In strict mode, we don't need this, so we can save some cycles by not tracking it.\n         if global_state.provenance_mode != ProvenanceMode::Strict {\n             trace!(\"Exposing allocation id {alloc_id:?}\");\n             global_state.exposed.insert(alloc_id);\n             if ecx.machine.stacked_borrows.is_some() {\n-                ecx.expose_tag(alloc_id, sb);\n+                ecx.expose_tag(alloc_id, sb)?;\n             }\n         }\n+        Ok(())\n     }\n \n     pub fn ptr_from_addr_transmute("}, {"sha": "1ac60e2ad84be1f40f2f5dd9c902100faa12add4", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "patch": "@@ -754,15 +754,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ptr: Pointer<Self::Provenance>,\n     ) -> InterpResult<'tcx> {\n         match ptr.provenance {\n-            Provenance::Concrete { alloc_id, sb } => {\n-                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb);\n-            }\n+            Provenance::Concrete { alloc_id, sb } =>\n+                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb),\n             Provenance::Wildcard => {\n                 // No need to do anything for wildcard pointers as\n                 // their provenances have already been previously exposed.\n+                Ok(())\n             }\n         }\n-        Ok(())\n     }\n \n     /// Convert a pointer with provenance into an allocation-offset pair,"}, {"sha": "38a73929a0362151e6dc551739c558d730bd9498", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "patch": "@@ -777,20 +777,31 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 return Ok(())\n             };\n \n-            let extra = this.get_alloc_extra(alloc_id)?;\n-            let mut stacked_borrows = extra\n-                .stacked_borrows\n-                .as_ref()\n-                .expect(\"we should have Stacked Borrows data\")\n-                .borrow_mut();\n-            stacked_borrows.history.log_creation(\n-                Some(orig_tag),\n-                new_tag,\n-                alloc_range(base_offset, size),\n-                current_span,\n-            );\n-            if protect {\n-                stacked_borrows.history.log_protector(orig_tag, new_tag, current_span);\n+            let (_size, _align, kind) = this.get_alloc_info(alloc_id);\n+            match kind {\n+                AllocKind::LiveData => {\n+                    // This should have alloc_extra data, but `get_alloc_extra` can still fail\n+                    // if converting this alloc_id from a global to a local one\n+                    // uncovers a non-supported `extern static`.\n+                    let extra = this.get_alloc_extra(alloc_id)?;\n+                    let mut stacked_borrows = extra\n+                        .stacked_borrows\n+                        .as_ref()\n+                        .expect(\"we should have Stacked Borrows data\")\n+                        .borrow_mut();\n+                    stacked_borrows.history.log_creation(\n+                        Some(orig_tag),\n+                        new_tag,\n+                        alloc_range(base_offset, size),\n+                        current_span,\n+                    );\n+                    if protect {\n+                        stacked_borrows.history.log_protector(orig_tag, new_tag, current_span);\n+                    }\n+                }\n+                AllocKind::Function | AllocKind::Dead => {\n+                    // No stacked borrows on these allocations.\n+                }\n             }\n             Ok(())\n         };\n@@ -1116,7 +1127,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Mark the given tag as exposed. It was found on a pointer with the given AllocId.\n-    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) {\n+    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n@@ -1125,14 +1136,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (_size, _align, kind) = this.get_alloc_info(alloc_id);\n         match kind {\n             AllocKind::LiveData => {\n-                // This should have alloc_extra data.\n-                let alloc_extra = this.get_alloc_extra(alloc_id).unwrap();\n+                // This should have alloc_extra data, but `get_alloc_extra` can still fail\n+                // if converting this alloc_id from a global to a local one\n+                // uncovers a non-supported `extern static`.\n+                let alloc_extra = this.get_alloc_extra(alloc_id)?;\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n                 alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n             }\n             AllocKind::Function | AllocKind::Dead => {\n                 // No stacked borrows on these allocations.\n             }\n         }\n+        Ok(())\n     }\n }"}]}