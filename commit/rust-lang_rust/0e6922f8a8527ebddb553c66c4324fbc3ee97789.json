{"sha": "0e6922f8a8527ebddb553c66c4324fbc3ee97789", "node_id": "C_kwDOAAsO6NoAKDBlNjkyMmY4YTg1MjdlYmRkYjU1M2M2NmM0MzI0ZmJjM2VlOTc3ODk", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-28T19:39:41Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-28T19:39:41Z"}, "message": "Implicitly depend on `test`", "tree": {"sha": "85ec605764aaa0bf46dbf17b6c2bf51f09c0515c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ec605764aaa0bf46dbf17b6c2bf51f09c0515c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6922f8a8527ebddb553c66c4324fbc3ee97789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6922f8a8527ebddb553c66c4324fbc3ee97789", "html_url": "https://github.com/rust-lang/rust/commit/0e6922f8a8527ebddb553c66c4324fbc3ee97789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6922f8a8527ebddb553c66c4324fbc3ee97789/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b76b29512d21636c28edbd44b55f0da8477f76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b76b29512d21636c28edbd44b55f0da8477f76c", "html_url": "https://github.com/rust-lang/rust/commit/0b76b29512d21636c28edbd44b55f0da8477f76c"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "153cbc1c84b8912f6d3a48ce4714b5899b60bae2", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=0e6922f8a8527ebddb553c66c4324fbc3ee97789", "patch": "@@ -4,7 +4,7 @@\n //! but we can't process `.rlib` and need source code instead. The source code\n //! is typically installed with `rustup component add rust-src` command.\n \n-use std::{convert::TryFrom, env, fs, ops, path::PathBuf, process::Command};\n+use std::{convert::TryFrom, env, fs, iter, ops, path::PathBuf, process::Command};\n \n use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n@@ -39,10 +39,15 @@ impl Sysroot {\n         &self.root\n     }\n \n-    pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate)> + '_ {\n+    pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate, bool)> + '_ {\n         // core is added as a dependency before std in order to\n         // mimic rustcs dependency order\n-        [\"core\", \"alloc\", \"std\"].iter().filter_map(move |&it| Some((it, self.by_name(it)?)))\n+        [\"core\", \"alloc\", \"std\"]\n+            .iter()\n+            .copied()\n+            .zip(iter::repeat(true))\n+            .chain(iter::once((\"test\", false)))\n+            .filter_map(move |(name, prelude)| Some((name, self.by_name(name)?, prelude)))\n     }\n \n     pub fn proc_macro(&self) -> Option<SysrootCrate> {"}, {"sha": "647d30605db4bd2be48a2beffe4022616766c3e8", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=0e6922f8a8527ebddb553c66c4324fbc3ee97789", "patch": "@@ -1690,6 +1690,15 @@ fn rust_project_hello_world_project_model() {\n                                 ),\n                                 prelude: true,\n                             },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    9,\n+                                ),\n+                                name: CrateName(\n+                                    \"test\",\n+                                ),\n+                                prelude: false,\n+                            },\n                         ],\n                         proc_macro: [],\n                     },"}, {"sha": "714e2dd301da023087ae4d3ccfcaff0b31d4c022", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6922f8a8527ebddb553c66c4324fbc3ee97789/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=0e6922f8a8527ebddb553c66c4324fbc3ee97789", "patch": "@@ -470,9 +470,7 @@ fn project_json_to_crate_graph(\n     for (from, krate) in project.crates() {\n         if let Some(&from) = crates.get(&from) {\n             if let Some((public_deps, libproc_macro)) = &sysroot_deps {\n-                for (name, to) in public_deps.iter() {\n-                    add_dep(&mut crate_graph, from, name.clone(), *to)\n-                }\n+                public_deps.add(from, &mut crate_graph);\n                 if krate.is_proc_macro {\n                     if let Some(proc_macro) = libproc_macro {\n                         add_dep(\n@@ -509,7 +507,7 @@ fn cargo_to_crate_graph(\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, libproc_macro) = match sysroot {\n         Some(sysroot) => sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load),\n-        None => (Vec::new(), None),\n+        None => (SysrootPublicDeps::default(), None),\n     };\n \n     let mut cfg_options = CfgOptions::default();\n@@ -590,9 +588,7 @@ fn cargo_to_crate_graph(\n                     add_dep(&mut crate_graph, *from, name, to);\n                 }\n             }\n-            for (name, krate) in public_deps.iter() {\n-                add_dep(&mut crate_graph, *from, name.clone(), *krate);\n-            }\n+            public_deps.add(*from, &mut crate_graph);\n         }\n     }\n \n@@ -674,9 +670,7 @@ fn detached_files_to_crate_graph(\n             Vec::new(),\n         );\n \n-        for (name, krate) in public_deps.iter() {\n-            add_dep(&mut crate_graph, detached_file_crate, name.clone(), *krate);\n-        }\n+        public_deps.add(detached_file_crate, &mut crate_graph);\n     }\n     crate_graph\n }\n@@ -688,7 +682,7 @@ fn handle_rustc_crates(\n     cfg_options: &CfgOptions,\n     load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n-    public_deps: &[(CrateName, CrateId)],\n+    public_deps: &SysrootPublicDeps,\n     cargo: &CargoWorkspace,\n     pkg_crates: &FxHashMap<la_arena::Idx<crate::PackageData>, Vec<(CrateId, TargetKind)>>,\n ) {\n@@ -728,9 +722,7 @@ fn handle_rustc_crates(\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on core / std / alloc for this crate\n-                    for (name, krate) in public_deps.iter() {\n-                        add_dep(crate_graph, crate_id, name.clone(), *krate);\n-                    }\n+                    public_deps.add(crate_id, crate_graph);\n                     rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                 }\n             }\n@@ -828,12 +820,26 @@ fn add_target_crate_root(\n     )\n }\n \n+#[derive(Default)]\n+struct SysrootPublicDeps {\n+    deps: Vec<(CrateName, CrateId, bool)>,\n+}\n+\n+impl SysrootPublicDeps {\n+    /// Makes `from` depend on the public sysroot crates.\n+    fn add(&self, from: CrateId, crate_graph: &mut CrateGraph) {\n+        for (name, krate, prelude) in &self.deps {\n+            add_dep_with_prelude(crate_graph, from, name.clone(), *krate, *prelude);\n+        }\n+    }\n+}\n+\n fn sysroot_to_crate_graph(\n     crate_graph: &mut CrateGraph,\n     sysroot: &Sysroot,\n     rustc_cfg: Vec<CfgFlag>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-) -> (Vec<(CrateName, CrateId)>, Option<CrateId>) {\n+) -> (SysrootPublicDeps, Option<CrateId>) {\n     let _p = profile::span(\"sysroot_to_crate_graph\");\n     let mut cfg_options = CfgOptions::default();\n     cfg_options.extend(rustc_cfg);\n@@ -867,17 +873,35 @@ fn sysroot_to_crate_graph(\n         }\n     }\n \n-    let public_deps = sysroot\n-        .public_deps()\n-        .map(|(name, idx)| (CrateName::new(name).unwrap(), sysroot_crates[&idx]))\n-        .collect::<Vec<_>>();\n+    let public_deps = SysrootPublicDeps {\n+        deps: sysroot\n+            .public_deps()\n+            .map(|(name, idx, prelude)| {\n+                (CrateName::new(name).unwrap(), sysroot_crates[&idx], prelude)\n+            })\n+            .collect::<Vec<_>>(),\n+    };\n \n     let libproc_macro = sysroot.proc_macro().and_then(|it| sysroot_crates.get(&it).copied());\n     (public_deps, libproc_macro)\n }\n \n fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n-    if let Err(err) = graph.add_dep(from, Dependency::new(name, to)) {\n+    add_dep_inner(graph, from, Dependency::new(name, to))\n+}\n+\n+fn add_dep_with_prelude(\n+    graph: &mut CrateGraph,\n+    from: CrateId,\n+    name: CrateName,\n+    to: CrateId,\n+    prelude: bool,\n+) {\n+    add_dep_inner(graph, from, Dependency::with_prelude(name, to, prelude))\n+}\n+\n+fn add_dep_inner(graph: &mut CrateGraph, from: CrateId, dep: Dependency) {\n+    if let Err(err) = graph.add_dep(from, dep) {\n         tracing::error!(\"{}\", err)\n     }\n }"}]}