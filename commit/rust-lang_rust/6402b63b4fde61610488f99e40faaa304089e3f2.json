{"sha": "6402b63b4fde61610488f99e40faaa304089e3f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDJiNjNiNGZkZTYxNjEwNDg4Zjk5ZTQwZmFhYTMwNDA4OWUzZjI=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-08-11T23:09:52Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-08-11T23:09:52Z"}, "message": "Use the new C API for PassManagerBuilder.", "tree": {"sha": "bebbc3d938154dff12108d783ad53d07a337604b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebbc3d938154dff12108d783ad53d07a337604b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6402b63b4fde61610488f99e40faaa304089e3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6402b63b4fde61610488f99e40faaa304089e3f2", "html_url": "https://github.com/rust-lang/rust/commit/6402b63b4fde61610488f99e40faaa304089e3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6402b63b4fde61610488f99e40faaa304089e3f2/comments", "author": null, "committer": null, "parents": [{"sha": "4cee06397633cede0163d4b520a979cb7a5177de", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cee06397633cede0163d4b520a979cb7a5177de", "html_url": "https://github.com/rust-lang/rust/commit/4cee06397633cede0163d4b520a979cb7a5177de"}], "stats": {"total": 126, "additions": 59, "deletions": 67}, "files": [{"sha": "35f52230bd9fffe8c85ab5978728390bf4850df2", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6402b63b4fde61610488f99e40faaa304089e3f2/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6402b63b4fde61610488f99e40faaa304089e3f2/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=6402b63b4fde61610488f99e40faaa304089e3f2", "patch": "@@ -2,7 +2,7 @@\n # rustc LLVM-extensions (C++) library variables and rules\n ######################################################################\n \n-RUSTLLVM_OBJS_CS := $(addprefix rustllvm/, Passes.cpp RustWrapper.cpp)\n+RUSTLLVM_OBJS_CS := $(addprefix rustllvm/, RustWrapper.cpp)\n \n RUSTLLVM_DEF := rustllvm/rustllvm$(CFG_DEF_SUFFIX)\n "}, {"sha": "fee3063bd7be70c2c7ac988ecf87ba55265bedea", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6402b63b4fde61610488f99e40faaa304089e3f2", "patch": "@@ -117,19 +117,34 @@ mod write {\n         if opts.optimize != 0u {\n             let fpm = mk_pass_manager();\n             llvm::LLVMAddTargetData(td.lltd, fpm.llpm);\n-            llvm::LLVMAddStandardFunctionPasses(fpm.llpm, 2u);\n+\n+            let FPMB = llvm::LLVMPassManagerBuilderCreate();\n+            llvm::LLVMPassManagerBuilderSetOptLevel(FPMB, 2u);\n+            llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(FPMB,\n+                                                                    fpm.llpm);\n+            llvm::LLVMPassManagerBuilderDispose(FPMB);\n+\n             llvm::LLVMRunPassManager(fpm.llpm, llmod);\n             let threshold: uint = 225u;\n             if opts.optimize == 3u { threshold = 275u; }\n-            llvm::LLVMAddStandardModulePasses(pm.llpm,\n-                                              // optimization level\n-                                              opts.optimize,\n-                                              False, // optimize for size\n-                                              True, // unit-at-a-time\n-                                              True, // unroll loops\n-                                              True, // simplify lib calls\n-                                              threshold); // inline threshold\n \n+            let MPMB = llvm::LLVMPassManagerBuilderCreate();\n+            llvm::LLVMPassManagerBuilderSetOptLevel(MPMB, opts.optimize);\n+            llvm::LLVMPassManagerBuilderSetSizeLevel(MPMB, 0);\n+            llvm::LLVMPassManagerBuilderSetDisableUnitAtATime(MPMB, False);\n+            llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(MPMB, False);\n+            llvm::LLVMPassManagerBuilderSetDisableSimplifyLibCalls(MPMB,\n+                                                                   False);\n+\n+            if threshold != 0u {\n+                llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(MPMB,\n+                                                                    threshold);\n+            }\n+\n+            llvm::LLVMPassManagerBuilderPopulateModulePassManager(MPMB,\n+                                                                  pm.llpm);\n+\n+            llvm::LLVMPassManagerBuilderDispose(MPMB);\n         }\n         if opts.verify { llvm::LLVMAddVerifierPass(pm.llpm); }\n         if is_object_or_assembly_or_exe(opts.output_type) {"}, {"sha": "02fe2c6c59dd9f4cb53269efa8c0ac4cce7f5988", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=6402b63b4fde61610488f99e40faaa304089e3f2", "patch": "@@ -141,6 +141,7 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n     type ModuleProviderRef;\n     type MemoryBufferRef;\n     type PassManagerRef;\n+    type PassManagerBuilderRef;\n     type UseRef;\n     type TargetDataRef;\n \n@@ -798,13 +799,29 @@ native \"cdecl\" mod llvm = \"rustllvm\" {\n     fn LLVMAddTypeBasedAliasAnalysisPass(PM: PassManagerRef);\n     fn LLVMAddBasicAliasAnalysisPass(PM: PassManagerRef);\n \n-    fn LLVMAddStandardFunctionPasses(PM: PassManagerRef,\n-                                     OptimizationLevel: uint);\n-    fn LLVMAddStandardModulePasses(PM: PassManagerRef,\n-                                   OptimizationLevel: uint,\n-                                   OptimizeSize: Bool, UnitAtATime: Bool,\n-                                   UnrollLoops: Bool, SimplifyLibCalls: Bool,\n-                                   InliningThreshold: uint);\n+    fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;\n+    fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);\n+    fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,\n+                                         OptimizationLevel: uint);\n+    fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef,\n+                                          Value: Bool);\n+    fn LLVMPassManagerBuilderSetDisableUnitAtATime(PMB: PassManagerBuilderRef,\n+                                                   Value: Bool);\n+    fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: PassManagerBuilderRef,\n+                                                   Value: Bool);\n+    fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(PMB:\n+                                                        PassManagerBuilderRef,\n+                                                        Value: Bool);\n+    fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB:\n+                                                     PassManagerBuilderRef,\n+                                                     threshold: uint);\n+    fn LLVMPassManagerBuilderPopulateModulePassManager(PMB:\n+                                                       PassManagerBuilderRef,\n+                                                       PM: PassManagerRef);\n+\n+    fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB:\n+                                                        PassManagerBuilderRef,\n+                                                         PM: PassManagerRef);\n \n     /** Destroys a memory buffer. */\n     fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);"}, {"sha": "4aaffe89eea9f096ebb1a81bbbbde54f87cbd2b4", "filename": "src/rustllvm/Passes.cpp", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4cee06397633cede0163d4b520a979cb7a5177de/src%2Frustllvm%2FPasses.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cee06397633cede0163d4b520a979cb7a5177de/src%2Frustllvm%2FPasses.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPasses.cpp?ref=4cee06397633cede0163d4b520a979cb7a5177de", "patch": "@@ -1,37 +0,0 @@\n-#include \"llvm/Analysis/Passes.h\"\n-#include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n-#include \"llvm/Transforms/IPO.h\"\n-#include \"llvm/PassManager.h\"\n-#include \"llvm-c/Core.h\"\n-#include <cstdlib>\n-\n-using namespace llvm;\n-\n-extern \"C\" void LLVMAddStandardFunctionPasses(LLVMPassManagerRef PM,\n-    unsigned int OptimizationLevel) {\n-  PassManagerBuilder PMBuilder;\n-  PMBuilder.OptLevel = OptimizationLevel;\n-  FunctionPassManager *FPM = (FunctionPassManager*) unwrap(PM);\n-  PMBuilder.populateFunctionPassManager(*FPM);\n-}\n-\n-extern \"C\" void LLVMAddStandardModulePasses(LLVMPassManagerRef PM,\n-    unsigned int OptimizationLevel, LLVMBool OptimizeSize,\n-    LLVMBool UnitAtATime, LLVMBool UnrollLoops, LLVMBool SimplifyLibCalls,\n-    unsigned int InliningThreshold) {\n-\n-  PassManagerBuilder PMBuilder;\n-  PMBuilder.OptLevel = OptimizationLevel;\n-  PMBuilder.SizeLevel = OptimizeSize;\n-  PMBuilder.DisableUnitAtATime = !UnitAtATime;\n-  PMBuilder.DisableUnrollLoops = !UnrollLoops;\n-\n-  PMBuilder.DisableSimplifyLibCalls = !SimplifyLibCalls;\n-\n-  if (InliningThreshold)\n-    PMBuilder.Inliner = createFunctionInliningPass(InliningThreshold);\n-\n-  PassManager *MPM = (PassManager*) unwrap(PM);\n-  PMBuilder.populateModulePassManager(*MPM);\n-}\n-"}, {"sha": "eadae79e3763fe0a98fb9de0bae0e35a6b474467", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=6402b63b4fde61610488f99e40faaa304089e3f2", "patch": "@@ -45,14 +45,6 @@ extern \"C\" const char *LLVMRustGetLastError(void) {\n }\n \n extern \"C\" void LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef PM);\n-extern \"C\" void LLVMAddStandardModulePasses(LLVMPassManagerRef PM,\n-    unsigned int OptimizationLevel, bool OptimizeSize, bool UnitAtATime,\n-    bool UnrollLoops, bool SimplifyLibCalls,\n-    unsigned int InliningThreshold);\n-\n-int *RustHackToFetchPassesO = (int*)LLVMAddBasicAliasAnalysisPass;\n-int *RustHackToFetchPasses2O = (int*)LLVMAddStandardModulePasses;\n-\n \n extern \"C\" bool LLVMLinkModules(LLVMModuleRef Dest, LLVMModuleRef Src) {\n   static std::string err;"}, {"sha": "25185f3cde5d8dcebde1652430e59d0bbbdf7b73", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/6402b63b4fde61610488f99e40faaa304089e3f2/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=6402b63b4fde61610488f99e40faaa304089e3f2", "patch": "@@ -57,21 +57,17 @@ LLVMAddLoopIdiomPass\n LLVMAddLoopRotatePass\n LLVMAddLoopUnrollPass\n LLVMAddLoopUnswitchPass\n-LLVMAddLowerSetJmpPass\n LLVMAddMemCpyOptPass\n LLVMAddModule\n LLVMAddModuleProvider\n LLVMAddPromoteMemoryToRegisterPass\n LLVMAddPruneEHPass\n-LLVMAddRaiseAllocationsPass\n LLVMAddReassociatePass\n LLVMAddSCCPPass\n LLVMAddScalarReplAggregatesPass\n LLVMAddScalarReplAggregatesPassSSA\n LLVMAddScalarReplAggregatesPassWithThreshold\n LLVMAddSimplifyLibCallsPass\n-LLVMAddStandardFunctionPasses\n-LLVMAddStandardModulePasses\n LLVMAddStripDeadPrototypesPass\n LLVMAddStripSymbolsPass\n LLVMAddTailCallEliminationPass\n@@ -489,7 +485,6 @@ LLVMIsAUIToFPInst\n LLVMIsAUnaryInstruction\n LLVMIsAUndefValue\n LLVMIsAUnreachableInst\n-LLVMIsAUnwindInst\n LLVMIsAUser\n LLVMIsAVAArgInst\n LLVMIsAZExtInst\n@@ -522,6 +517,16 @@ LLVMPPCFP128Type\n LLVMPPCFP128TypeInContext\n LLVMParseBitcode\n LLVMParseBitcodeInContext\n+LLVMPassManagerBuilderCreate\n+LLVMPassManagerBuilderDispose\n+LLVMPassManagerBuilderPopulateModulePassManager\n+LLVMPassManagerBuilderSetDisableSimplifyLibCalls\n+LLVMPassManagerBuilderSetDisableUnitAtATime\n+LLVMPassManagerBuilderPopulateFunctionPassManager\n+LLVMPassManagerBuilderSetDisableUnrollLoops\n+LLVMPassManagerBuilderSetOptLevel\n+LLVMPassManagerBuilderSetSizeLevel\n+LLVMPassManagerBuilderUseInlinerWithThreshold\n LLVMPointerSize\n LLVMPointerType\n LLVMPositionBuilder"}]}