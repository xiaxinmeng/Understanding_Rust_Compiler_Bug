{"sha": "4884d9ec1deec8d4bbbe240dab1107c7cb8dd688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODRkOWVjMWRlZWM4ZDRiYmJlMjQwZGFiMTEwN2M3Y2I4ZGQ2ODg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-18T15:51:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-18T15:51:02Z"}, "message": "Simplify `DefCollector::resolve_macros`", "tree": {"sha": "7792c7c910ee109a441b25f15b425c78ac66a67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7792c7c910ee109a441b25f15b425c78ac66a67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688", "html_url": "https://github.com/rust-lang/rust/commit/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce", "html_url": "https://github.com/rust-lang/rust/commit/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "a68674c10ca6a2076815ba757de8bdce293c70e4", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4884d9ec1deec8d4bbbe240dab1107c7cb8dd688/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4884d9ec1deec8d4bbbe240dab1107c7cb8dd688", "patch": "@@ -806,23 +806,25 @@ impl DefCollector<'_> {\n         let mut resolved = Vec::new();\n         let mut res = ReachedFixedPoint::Yes;\n         macros.retain(|directive| {\n+            let resolver = |path| {\n+                let resolved_res = self.def_map.resolve_path_fp_with_macro(\n+                    self.db,\n+                    ResolveMode::Other,\n+                    directive.module_id,\n+                    &path,\n+                    BuiltinShadowMode::Module,\n+                );\n+                resolved_res.resolved_def.take_macros()\n+            };\n+\n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, fragment } => {\n                     match macro_call_as_call_id(\n                         ast_id,\n                         *fragment,\n                         self.db,\n                         self.def_map.krate,\n-                        |path| {\n-                            let resolved_res = self.def_map.resolve_path_fp_with_macro(\n-                                self.db,\n-                                ResolveMode::Other,\n-                                directive.module_id,\n-                                &path,\n-                                BuiltinShadowMode::Module,\n-                            );\n-                            resolved_res.resolved_def.take_macros()\n-                        },\n+                        &resolver,\n                         &mut |_err| (),\n                     ) {\n                         Ok(Ok(call_id)) => {\n@@ -839,7 +841,7 @@ impl DefCollector<'_> {\n                         *derive_attr,\n                         self.db,\n                         self.def_map.krate,\n-                        |path| self.resolve_derive_macro(directive.module_id, &path),\n+                        &resolver,\n                     ) {\n                         Ok(call_id) => {\n                             resolved.push((directive.module_id, call_id, directive.depth));\n@@ -862,18 +864,6 @@ impl DefCollector<'_> {\n         res\n     }\n \n-    fn resolve_derive_macro(&self, module: LocalModuleId, path: &ModPath) -> Option<MacroDefId> {\n-        let resolved_res = self.def_map.resolve_path_fp_with_macro(\n-            self.db,\n-            ResolveMode::Other,\n-            module,\n-            &path,\n-            BuiltinShadowMode::Module,\n-        );\n-\n-        resolved_res.resolved_def.take_macros()\n-    }\n-\n     fn collect_macro_expansion(\n         &mut self,\n         module_id: LocalModuleId,"}]}