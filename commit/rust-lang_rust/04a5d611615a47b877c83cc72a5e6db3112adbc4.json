{"sha": "04a5d611615a47b877c83cc72a5e6db3112adbc4", "node_id": "C_kwDOAAsO6NoAKDA0YTVkNjExNjE1YTQ3Yjg3N2M4M2NjNzJhNWU2ZGIzMTEyYWRiYzQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-28T00:00:58Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-08T08:18:29Z"}, "message": "Revert \"Mark DoubleEndedIterator as #[const_trait] using rustc_do_not_const_check, implement const Iterator and DoubleEndedIterator for Range.\"\n\nThis reverts commit 8a9d6bf4fd540b2a2882193cbd6232b86e5dcd7e.", "tree": {"sha": "b7009bf962e93ad7e310555b5f7689ed001f75f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7009bf962e93ad7e310555b5f7689ed001f75f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a5d611615a47b877c83cc72a5e6db3112adbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a5d611615a47b877c83cc72a5e6db3112adbc4", "html_url": "https://github.com/rust-lang/rust/commit/04a5d611615a47b877c83cc72a5e6db3112adbc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a5d611615a47b877c83cc72a5e6db3112adbc4/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131211acd2e5519a0ff3e3e8d5f827cddebb1d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a", "html_url": "https://github.com/rust-lang/rust/commit/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a"}], "stats": {"total": 94, "additions": 24, "deletions": 70}, "files": [{"sha": "2273bead416b818e15d9ca93c861fd3837ec3700", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -1,5 +1,4 @@\n use crate::convert::TryFrom;\n-use crate::marker::Destruct;\n use crate::mem;\n use crate::num::NonZeroUsize;\n use crate::ops::{self, Try};\n@@ -524,7 +523,6 @@ macro_rules! range_incl_exact_iter_impl {\n }\n \n /// Specialization implementations for `Range`.\n-#[const_trait]\n trait RangeIteratorImpl {\n     type Item;\n \n@@ -539,7 +537,7 @@ trait RangeIteratorImpl {\n     fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n }\n \n-impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n+impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -625,7 +623,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n }\n \n-impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::Range<T> {\n+impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n     #[inline]\n     fn spec_next(&mut self) -> Option<T> {\n         if self.start < self.end {\n@@ -713,8 +711,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n+impl<A: Step> Iterator for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -824,8 +821,7 @@ range_incl_exact_iter_impl! {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<A> {\n+impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         self.spec_next_back()"}, {"sha": "182d9f758adc471c22faa226d3d02ef76fa46c8f", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -1,4 +1,3 @@\n-use crate::marker::Destruct;\n use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n@@ -39,7 +38,6 @@ use crate::ops::{ControlFlow, Try};\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n-#[const_trait]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///\n@@ -136,10 +134,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         for i in 0..n {\n             if self.next_back().is_none() {\n                 // SAFETY: `i` is always less than `n`.\n@@ -192,7 +187,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n-    #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n         if self.advance_back_by(n).is_err() {\n             return None;\n@@ -232,7 +226,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -304,7 +297,6 @@ pub trait DoubleEndedIterator: Iterator {\n     #[doc(alias = \"foldr\")]\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n@@ -360,7 +352,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         Self: Sized,"}, {"sha": "f3d1e45f4fb6a0f6b3c247752aa7bf5f9c28b3c1", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -1,6 +1,5 @@\n use crate::array;\n use crate::cmp::{self, Ordering};\n-use crate::marker::Destruct;\n use crate::num::NonZeroUsize;\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n@@ -340,10 +339,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    #[rustc_do_not_const_check]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         for i in 0..n {\n             if self.next().is_none() {\n                 // SAFETY: `i` is always less than `n`.\n@@ -394,10 +391,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, n: usize) -> Option<Self::Item>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    #[rustc_do_not_const_check]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.advance_by(n).ok()?;\n         self.next()\n     }"}, {"sha": "d195e24ef46d00fa38476ceedad0e8e9acd74513", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -123,7 +123,6 @@\n #![feature(const_index_range_slice_index)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n-#![feature(const_intoiterator_identity)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]"}, {"sha": "d56687e48c96a0d15a3e56477c52219fedda8253", "filename": "library/core/tests/iter/consts.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131211acd2e5519a0ff3e3e8d5f827cddebb1d8a/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs?ref=131211acd2e5519a0ff3e3e8d5f827cddebb1d8a", "patch": "@@ -1,36 +0,0 @@\n-#[test]\n-fn const_manual_iter() {\n-    struct S(bool);\n-\n-    impl const Iterator for S {\n-        type Item = ();\n-\n-        fn next(&mut self) -> Option<Self::Item> {\n-            if self.0 == false {\n-                self.0 = true;\n-                Some(())\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-    const {\n-        let mut val = S(false);\n-        assert!(val.next().is_some());\n-        assert!(val.next().is_none());\n-        assert!(val.next().is_none());\n-    }\n-}\n-\n-#[test]\n-fn const_range() {\n-    const {\n-        let mut arr = [0; 3];\n-        for i in 0..arr.len() {\n-            arr[i] = i;\n-        }\n-        assert!(arr[0] == 0);\n-        assert!(arr[1] == 1);\n-        assert!(arr[2] == 2);\n-    }\n-}"}, {"sha": "770b6f7601fa2dbf0dc9f84b54ff83ed33c82e4a", "filename": "library/core/tests/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fmod.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -20,8 +20,6 @@ mod range;\n mod sources;\n mod traits;\n \n-mod consts;\n-\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;"}, {"sha": "6cdafa411d0033def017f058826ab096d239e41e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -12,11 +12,8 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n-#![feature(const_for)]\n #![feature(const_hash)]\n #![feature(const_heap)]\n-#![feature(const_intoiterator_identity)]\n-#![feature(const_iter)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]"}, {"sha": "a450dbb82d1bdf4fabf4b5229100a810104badd8", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -228,4 +228,5 @@ fn evens_squared(n: usize) -> _ {\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n //~^ ERROR the trait bound\n+//~| ERROR the trait bound\n //~| ERROR the placeholder"}, {"sha": "bc6c9fd077993a172ee6525d570693a0eb4e0826", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/04a5d611615a47b877c83cc72a5e6db3112adbc4/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04a5d611615a47b877c83cc72a5e6db3112adbc4/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=04a5d611615a47b877c83cc72a5e6db3112adbc4", "patch": "@@ -437,6 +437,19 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:22\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^\n+\n error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n   --> $DIR/typeck_type_placeholder_item.rs:229:45\n    |\n@@ -664,7 +677,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 72 previous errors\n+error: aborting due to 73 previous errors\n \n Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}