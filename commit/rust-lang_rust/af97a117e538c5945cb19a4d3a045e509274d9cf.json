{"sha": "af97a117e538c5945cb19a4d3a045e509274d9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTdhMTE3ZTUzOGM1OTQ1Y2IxOWE0ZDNhMDQ1ZTUwOTI3NGQ5Y2Y=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-14T21:46:06Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-14T21:46:15Z"}, "message": "shim.rs: call `FnPtr`, not `Self`\n\nThe `Call` terminator only works with `FnDef` and `FnPtr` types.\nIt happened to work with `Self` so far because it was always\nsubstituted with the real type before being used.", "tree": {"sha": "53a0e7c48502c81b581870f8909b8ce783a035d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a0e7c48502c81b581870f8909b8ce783a035d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af97a117e538c5945cb19a4d3a045e509274d9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af97a117e538c5945cb19a4d3a045e509274d9cf", "html_url": "https://github.com/rust-lang/rust/commit/af97a117e538c5945cb19a4d3a045e509274d9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af97a117e538c5945cb19a4d3a045e509274d9cf/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58062e1913248a2ad62072f51cc51db00bba66dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/58062e1913248a2ad62072f51cc51db00bba66dc", "html_url": "https://github.com/rust-lang/rust/commit/58062e1913248a2ad62072f51cc51db00bba66dc"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "92d5b957b00058e171c96af545b14bc5fe04ece0", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/af97a117e538c5945cb19a4d3a045e509274d9cf/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af97a117e538c5945cb19a4d3a045e509274d9cf/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=af97a117e538c5945cb19a4d3a045e509274d9cf", "patch": "@@ -56,7 +56,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             let sig = tcx.erase_late_bound_regions(&ty.fn_sig(tcx));\n             let arg_tys = sig.inputs();\n \n-            build_call_shim(tcx, instance, Some(adjustment), CallKind::Indirect, Some(arg_tys))\n+            build_call_shim(tcx, instance, Some(adjustment), CallKind::Indirect(ty), Some(arg_tys))\n         }\n         // We are generating a call back to our def-id, which the\n         // codegen backend knows to turn to an actual call, be it\n@@ -147,9 +147,9 @@ enum Adjustment {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-enum CallKind {\n+enum CallKind<'tcx> {\n     /// Call the `FnPtr` that was passed as the receiver.\n-    Indirect,\n+    Indirect(Ty<'tcx>),\n \n     /// Call a known `FnDef`.\n     Direct(DefId),\n@@ -671,7 +671,7 @@ fn build_call_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n     rcvr_adjustment: Option<Adjustment>,\n-    call_kind: CallKind,\n+    call_kind: CallKind<'tcx>,\n     untuple_args: Option<&[Ty<'tcx>]>,\n ) -> Body<'tcx> {\n     debug!(\n@@ -684,6 +684,29 @@ fn build_call_shim<'tcx>(\n     let sig = tcx.fn_sig(def_id);\n     let mut sig = tcx.erase_late_bound_regions(&sig);\n \n+    if let CallKind::Indirect(fnty) = call_kind {\n+        // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This\n+        // can only be an `FnDef` or `FnPtr`, but currently will be `Self` since the types come from\n+        // the implemented `FnX` trait.\n+\n+        // Apply the opposite adjustment to the MIR input.\n+        let mut inputs_and_output = sig.inputs_and_output.to_vec();\n+\n+        // Initial signature is `fn(&? Self, Args) -> Self::Output` where `Args` is a tuple of the\n+        // fn arguments. `Self` may be passed via (im)mutable reference or by-value.\n+        assert_eq!(inputs_and_output.len(), 3);\n+\n+        // `Self` is always the original fn type `ty`. The MIR call terminator is only defined for\n+        // `FnDef` and `FnPtr` callees, not the `Self` type param.\n+        let self_arg = &mut inputs_and_output[0];\n+        *self_arg = match rcvr_adjustment.unwrap() {\n+            Adjustment::Identity => fnty,\n+            Adjustment::Deref => tcx.mk_imm_ptr(fnty),\n+            Adjustment::RefMut => tcx.mk_mut_ptr(fnty),\n+        };\n+        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+    }\n+\n     // FIXME(eddyb) avoid having this snippet both here and in\n     // `Instance::fn_sig` (introduce `InstanceDef::fn_sig`?).\n     if let ty::InstanceDef::VtableShim(..) = instance {\n@@ -737,7 +760,7 @@ fn build_call_shim<'tcx>(\n \n     let (callee, mut args) = match call_kind {\n         // `FnPtr` call has no receiver. Args are untupled below.\n-        CallKind::Indirect => (rcvr.unwrap(), vec![]),\n+        CallKind::Indirect(_) => (rcvr.unwrap(), vec![]),\n \n         // `FnDef` call with optional receiver.\n         CallKind::Direct(def_id) => {"}]}