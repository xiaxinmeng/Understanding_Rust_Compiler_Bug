{"sha": "880646ca9c6dc21e04efe2f1940369a45b71ff2d", "node_id": "C_kwDOAAsO6NoAKDg4MDY0NmNhOWM2ZGMyMWUwNGVmZTJmMTk0MDM2OWE0NWI3MWZmMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T04:04:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T04:04:04Z"}, "message": "Auto merge of #98872 - JakobDegen:no-invalidate, r=davidtwco\n\nAdd method to mutate MIR body without invalidating CFG caches.\n\nIn addition to adding this method, a handful of passes are updated to use it. There's still quite a few passes that could in principle make use of this as well, but do not at the moment because they use `VisitorMut` or `MirPatch`, which needs additional support for this.\n\nThe method name is slightly unwieldy, but I don't expect anyone to be writing it a lot, and at least it says what it does. If anyone has a suggestion for a better name though, would be happy to rename.\n\nr? rust-lang/mir-opt", "tree": {"sha": "2204b1ade34eadd7d762606d190f7a194aeaa27b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2204b1ade34eadd7d762606d190f7a194aeaa27b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880646ca9c6dc21e04efe2f1940369a45b71ff2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880646ca9c6dc21e04efe2f1940369a45b71ff2d", "html_url": "https://github.com/rust-lang/rust/commit/880646ca9c6dc21e04efe2f1940369a45b71ff2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880646ca9c6dc21e04efe2f1940369a45b71ff2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4008dd8c6d92a0b81528fd138c6130d784e5958e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4008dd8c6d92a0b81528fd138c6130d784e5958e", "html_url": "https://github.com/rust-lang/rust/commit/4008dd8c6d92a0b81528fd138c6130d784e5958e"}, {"sha": "26d153ac67ac4ed9767177617b3e5591590b3aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d153ac67ac4ed9767177617b3e5591590b3aa2", "html_url": "https://github.com/rust-lang/rust/commit/26d153ac67ac4ed9767177617b3e5591590b3aa2"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "11d20b886c97883c71fb8ee96edeae5477295e85", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -357,21 +357,15 @@ impl<'tcx> Body<'tcx> {\n         //\n         // FIXME: Use a finer-grained API for this, so only transformations that alter terminators\n         // invalidate the caches.\n-        self.predecessor_cache.invalidate();\n-        self.switch_source_cache.invalidate();\n-        self.is_cyclic.invalidate();\n-        self.postorder_cache.invalidate();\n+        self.invalidate_cfg_cache();\n         &mut self.basic_blocks\n     }\n \n     #[inline]\n     pub fn basic_blocks_and_local_decls_mut(\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n-        self.predecessor_cache.invalidate();\n-        self.switch_source_cache.invalidate();\n-        self.is_cyclic.invalidate();\n-        self.postorder_cache.invalidate();\n+        self.invalidate_cfg_cache();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n@@ -383,11 +377,43 @@ impl<'tcx> Body<'tcx> {\n         &mut LocalDecls<'tcx>,\n         &mut Vec<VarDebugInfo<'tcx>>,\n     ) {\n+        self.invalidate_cfg_cache();\n+        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n+    }\n+\n+    /// Get mutable access to parts of the Body without invalidating the CFG cache.\n+    ///\n+    /// By calling this method instead of eg [`Body::basic_blocks_mut`], you promise not to change\n+    /// the CFG. This means that\n+    ///\n+    ///  1) The number of basic blocks remains unchanged\n+    ///  2) The set of successors of each terminator remains unchanged.\n+    ///  3) For each `TerminatorKind::SwitchInt`, the `targets` remains the same and the terminator\n+    ///     kind is not changed.\n+    ///\n+    /// If any of these conditions cannot be upheld, you should call [`Body::invalidate_cfg_cache`].\n+    #[inline]\n+    pub fn basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate(\n+        &mut self,\n+    ) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+        &mut Vec<VarDebugInfo<'tcx>>,\n+    ) {\n+        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n+    }\n+\n+    /// Invalidates cached information about the CFG.\n+    ///\n+    /// You will only ever need this if you have also called\n+    /// [`Body::basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate`]. All other methods\n+    /// that allow you to mutate the body also call this method themselves, thereby avoiding any\n+    /// risk of accidentaly cache invalidation.\n+    pub fn invalidate_cfg_cache(&mut self) {\n         self.predecessor_cache.invalidate();\n         self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         self.postorder_cache.invalidate();\n-        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n     }\n \n     /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the"}, {"sha": "c96497abf8f27ffa060ef8848e4df0f0910b929d", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -66,7 +66,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n         return;\n     }\n \n-    let bbs = body.basic_blocks_mut();\n+    let bbs = body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate().0;\n     for Location { block, statement_index } in patch {\n         bbs[block].statements[statement_index].make_nop();\n     }"}, {"sha": "01f490e23bfde73b7bc523c5f28e3823f4f084f5", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -11,7 +11,8 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        let (basic_blocks, local_decls, _) =\n+            body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {\n             bb.expand_statements(|stmt| {"}, {"sha": "813ab4001a7d856045119b85fee66c688c1c57d0", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -26,7 +26,9 @@ pub fn lower_slice_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         return;\n     };\n \n-    let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+    // The one successor remains unchanged, so no need to invalidate\n+    let (basic_blocks, local_decls, _) =\n+        body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate();\n \n     for block in basic_blocks {\n         // lower `<[_]>::len` calls"}, {"sha": "3396a446df2c9de307aa5c64f4c9df5e668ebfa6", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -32,7 +32,9 @@ impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n }\n \n pub fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+    // We don't ever touch terminators, so no need to invalidate the CFG cache\n+    let (basic_blocks, local_decls, _) =\n+        body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate();\n \n     // do a preliminary analysis to see if we ever have locals of type `[T;N]` or `&[T;N]`\n     let mut interesting_locals = BitSet::new_empty(local_decls.len());"}, {"sha": "5bb4f8bb9b3c9c16b5d4edf9f30318b53b32abb6", "filename": "compiler/rustc_mir_transform/src/remove_storage_markers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -17,7 +17,7 @@ impl<'tcx> MirPass<'tcx> for RemoveStorageMarkers {\n         }\n \n         trace!(\"Running RemoveStorageMarkers on {:?}\", body.source);\n-        for data in body.basic_blocks_mut() {\n+        for data in body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate().0 {\n             data.statements.retain(|statement| match statement.kind {\n                 StatementKind::StorageLive(..)\n                 | StatementKind::StorageDead(..)"}, {"sha": "34941c1907df49911a5a963c3a6cee1eb823b393", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880646ca9c6dc21e04efe2f1940369a45b71ff2d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=880646ca9c6dc21e04efe2f1940369a45b71ff2d", "patch": "@@ -18,7 +18,8 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n             return;\n         }\n         let param_env = tcx.param_env(body.source.def_id());\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        let (basic_blocks, local_decls, _) =\n+            body.basic_blocks_local_decls_mut_and_var_debug_info_no_invalidate();\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n                 if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) ="}]}