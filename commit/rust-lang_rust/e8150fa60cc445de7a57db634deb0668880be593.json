{"sha": "e8150fa60cc445de7a57db634deb0668880be593", "node_id": "C_kwDOAAsO6NoAKGU4MTUwZmE2MGNjNDQ1ZGU3YTU3ZGI2MzRkZWIwNjY4ODgwYmU1OTM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-27T09:59:25Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-17T08:54:01Z"}, "message": "mir constants: type traversing bye bye", "tree": {"sha": "0809f7ba926c045947dbe55b32da5973aac23df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0809f7ba926c045947dbe55b32da5973aac23df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8150fa60cc445de7a57db634deb0668880be593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8150fa60cc445de7a57db634deb0668880be593", "html_url": "https://github.com/rust-lang/rust/commit/e8150fa60cc445de7a57db634deb0668880be593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8150fa60cc445de7a57db634deb0668880be593/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1536ab1b383f21b38f8d49230a2aecc51daffa3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536ab1b383f21b38f8d49230a2aecc51daffa3d", "html_url": "https://github.com/rust-lang/rust/commit/1536ab1b383f21b38f8d49230a2aecc51daffa3d"}], "stats": {"total": 258, "additions": 26, "deletions": 232}, "files": [{"sha": "f3023769081f205777cd4a238ae3cf31d24d4755", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -1,8 +1,8 @@\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n+use rustc_middle::mir::Constant;\n use rustc_middle::mir::{Body, Location, Promoted};\n-use rustc_middle::mir::{Constant, ConstantKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n@@ -38,21 +38,6 @@ where\n     })\n }\n \n-// FIXME(valtrees): This function is necessary because `fold_regions`\n-// panics for mir constants in the visitor.\n-//\n-// Once `visit_mir_constant` is removed we can also remove this function\n-// and just use `renumber_regions`.\n-fn renumber_regions_in_mir_constant<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n-    value: ConstantKind<'tcx>,\n-) -> ConstantKind<'tcx> {\n-    infcx.tcx.super_fold_regions(value, |_region, _depth| {\n-        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n-        infcx.next_nll_region_var(origin)\n-    })\n-}\n-\n struct NllVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n@@ -64,13 +49,6 @@ impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n     {\n         renumber_regions(self.infcx, value)\n     }\n-\n-    fn renumber_regions_in_mir_constant(\n-        &mut self,\n-        value: ConstantKind<'tcx>,\n-    ) -> ConstantKind<'tcx> {\n-        renumber_regions_in_mir_constant(self.infcx, value)\n-    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n@@ -103,7 +81,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n         let literal = constant.literal;\n-        constant.literal = self.renumber_regions_in_mir_constant(literal);\n+        constant.literal = self.renumber_regions(literal);\n         debug!(\"constant: {:#?}\", constant);\n     }\n }"}, {"sha": "4db4ff2388d77e6e24efd3447c54571b11290cfa", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -1,6 +1,5 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n-use rustc_middle::mir;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n@@ -48,10 +47,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n             ct.super_fold_with(self)\n         }\n     }\n-\n-    fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n-        constant.super_fold_with(self)\n-    }\n }\n \n /// The opportunistic region resolver opportunistically resolves regions"}, {"sha": "f94c447e8fb9e6265528272a58336eb120c7c5d8", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -7,9 +7,9 @@ use crate::mir::interpret::{\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n@@ -2056,7 +2056,7 @@ pub struct Constant<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n-#[derive(Lift)]\n+#[derive(Lift, TypeFoldable, TypeVisitable)]\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(ty::Const<'tcx>),\n@@ -2448,7 +2448,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n /// An unevaluated (potentially generic) constant used in MIR.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n-#[derive(Hash, HashStable)]\n+#[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub struct UnevaluatedConst<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "4d7d464d7cd90e2bf9e484dca6a2bd4d914bf701", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -3,7 +3,6 @@\n use rustc_ast::InlineAsmTemplatePiece;\n \n use super::*;\n-use crate::mir;\n use crate::ty;\n \n TrivialTypeTraversalAndLiftImpls! {\n@@ -51,43 +50,8 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for mir::UnevaluatedConst<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_mir_unevaluated(self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperFoldable<'tcx> for mir::UnevaluatedConst<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(mir::UnevaluatedConst {\n-            def: self.def,\n-            substs: self.substs.try_fold_with(folder)?,\n-            promoted: self.promoted,\n-        })\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n-    #[inline(always)]\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_mir_const(self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        match self {\n-            ConstantKind::Ty(c) => Ok(ConstantKind::Ty(c.try_fold_with(folder)?)),\n-            ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n-            ConstantKind::Unevaluated(uv, t) => {\n-                Ok(ConstantKind::Unevaluated(uv.try_fold_with(folder)?, t.try_fold_with(folder)?))\n-            }\n-        }\n+impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+        Ok(self)\n     }\n }"}, {"sha": "fd3773f22649061c110847c0b9defa07ac5c952b", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -1,41 +1,15 @@\n //! `TypeVisitable` implementations for MIR types\n \n use super::*;\n-use crate::mir;\n \n impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for mir::UnevaluatedConst<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_mir_unevaluated(*self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperVisitable<'tcx> for mir::UnevaluatedConst<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.substs.visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ConstantKind<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_mir_const(*self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperVisitable<'tcx> for ConstantKind<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            ConstantKind::Ty(c) => c.visit_with(visitor),\n-            ConstantKind::Val(_, t) => t.visit_with(visitor),\n-            ConstantKind::Unevaluated(uv, t) => {\n-                uv.visit_with(visitor)?;\n-                t.visit_with(visitor)\n-            }\n-        }\n+impl<'tcx> TypeVisitable<'tcx> for ConstValue<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n     }\n }"}, {"sha": "ffdac93bcd09abefb3d4754ea79a594784f4f9c2", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -1,4 +1,3 @@\n-use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n@@ -67,8 +66,4 @@ impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n             _ => self.tcx.lifetimes.re_erased,\n         }\n     }\n-\n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n-        c.super_fold_with(self)\n-    }\n }"}, {"sha": "f456999ae3eb2e2968329364c06c007c80312afb", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -42,7 +42,6 @@\n //!     - ty.super_fold_with(folder)\n //! - u.fold_with(folder)\n //! ```\n-use crate::mir;\n use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n@@ -134,20 +133,9 @@ pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n         uv.super_fold_with(self)\n     }\n \n-    fn fold_mir_unevaluated(\n-        &mut self,\n-        uv: mir::UnevaluatedConst<'tcx>,\n-    ) -> mir::UnevaluatedConst<'tcx> {\n-        uv.super_fold_with(self)\n-    }\n-\n     fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n-\n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n-        bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n-    }\n }\n \n /// This trait is implemented for every folding traversal. There is a fold\n@@ -188,26 +176,12 @@ pub trait FallibleTypeFolder<'tcx>: Sized {\n         c.try_super_fold_with(self)\n     }\n \n-    fn try_fold_mir_unevaluated(\n-        &mut self,\n-        c: mir::UnevaluatedConst<'tcx>,\n-    ) -> Result<mir::UnevaluatedConst<'tcx>, Self::Error> {\n-        c.try_super_fold_with(self)\n-    }\n-\n     fn try_fold_predicate(\n         &mut self,\n         p: ty::Predicate<'tcx>,\n     ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n         p.try_super_fold_with(self)\n     }\n-\n-    fn try_fold_mir_const(\n-        &mut self,\n-        c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n-    }\n }\n \n // This blanket implementation of the fallible trait for infallible folders\n@@ -248,23 +222,9 @@ where\n         Ok(self.fold_ty_unevaluated(c))\n     }\n \n-    fn try_fold_mir_unevaluated(\n-        &mut self,\n-        c: mir::UnevaluatedConst<'tcx>,\n-    ) -> Result<mir::UnevaluatedConst<'tcx>, !> {\n-        Ok(self.fold_mir_unevaluated(c))\n-    }\n-\n     fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }\n-\n-    fn try_fold_mir_const(\n-        &mut self,\n-        c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, !> {\n-        Ok(self.fold_mir_const(c))\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "ee13920d52edda90d2f5ba00fbb49115af4ffaa7", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -214,15 +214,6 @@ impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         self.normalize_generic_arg_after_erasing_regions(c.into()).expect_const()\n     }\n-\n-    #[inline]\n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n-        // FIXME: This *probably* needs canonicalization too!\n-        let arg = self.param_env.and(c);\n-        self.tcx\n-            .try_normalize_mir_const_after_erasing_regions(arg)\n-            .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", c))\n-    }\n }\n \n struct TryNormalizeAfterErasingRegionsFolder<'tcx> {\n@@ -267,16 +258,4 @@ impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'t\n             Err(_) => Err(NormalizationError::Const(c)),\n         }\n     }\n-\n-    fn try_fold_mir_const(\n-        &mut self,\n-        c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        // FIXME: This *probably* needs canonicalization too!\n-        let arg = self.param_env.and(c);\n-        match self.tcx.try_normalize_mir_const_after_erasing_regions(arg) {\n-            Ok(c) => Ok(c),\n-            Err(_) => Err(NormalizationError::ConstantKind(c)),\n-        }\n-    }\n }"}, {"sha": "c2a83ca9dbb838224178192c63a98f5e255ce2c5", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -1,6 +1,5 @@\n // Type substitutions.\n \n-use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n@@ -662,11 +661,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             c.super_fold_with(self)\n         }\n     }\n-\n-    #[inline]\n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n-        c.super_fold_with(self)\n-    }\n }\n \n impl<'a, 'tcx> SubstFolder<'a, 'tcx> {"}, {"sha": "5ca00a11ab9f482b17d923281cfd920d55d887a2", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -38,7 +38,6 @@\n //!     - ty.super_visit_with(visitor)\n //! - u.visit_with(visitor)\n //! ```\n-use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_errors::ErrorGuaranteed;\n \n@@ -205,20 +204,9 @@ pub trait TypeVisitor<'tcx>: Sized {\n         uv.super_visit_with(self)\n     }\n \n-    fn visit_mir_unevaluated(\n-        &mut self,\n-        uv: mir::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        uv.super_visit_with(self)\n-    }\n-\n     fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n-\n-    fn visit_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        c.super_visit_with(self)\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -619,19 +607,6 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n-    fn visit_mir_unevaluated(\n-        &mut self,\n-        uv: mir::UnevaluatedConst<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        let flags = FlagComputation::for_unevaluated_const(uv.shrink());\n-        trace!(r.flags=?flags);\n-        if flags.intersects(self.flags) {\n-            ControlFlow::Break(FoundFlags)\n-        } else {\n-            ControlFlow::CONTINUE\n-        }\n-    }\n-\n     #[inline]\n     #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "650076c2213a35f1231e6c1bbb72b01f5ed902df", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -276,9 +276,21 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n             ConstantKind::Ty(c) => {\n                 c.visit_with(self);\n             }\n-            ConstantKind::Val(_, ty) | ConstantKind::Unevaluated(_, ty) => {\n-                Visitor::visit_ty(self, ty, TyContext::Location(location))\n+            ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs: _, promoted }, ty) => {\n+                // Avoid considering `T` unused when constants are of the form:\n+                //   `<Self as Foo<T>>::foo::promoted[p]`\n+                if let Some(p) = promoted {\n+                    if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self {\n+                        // If there is a promoted, don't look at the substs - since it will always contain\n+                        // the generic parameters, instead, traverse the promoted MIR.\n+                        let promoted = self.tcx.promoted_mir(def.did);\n+                        self.visit_body(&promoted[p]);\n+                    }\n+                }\n+\n+                Visitor::visit_ty(self, ty, TyContext::Location(location));\n             }\n+            ConstantKind::Val(_, ty) => Visitor::visit_ty(self, ty, TyContext::Location(location)),\n         }\n     }\n \n@@ -310,30 +322,6 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_mir_const(&mut self, constant: ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !constant.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n-        }\n-\n-        match constant {\n-            ConstantKind::Ty(ct) => ct.visit_with(self),\n-            ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs: _, promoted: Some(p) }, _)\n-                // Avoid considering `T` unused when constants are of the form:\n-                //   `<Self as Foo<T>>::foo::promoted[p]`\n-                if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n-            {\n-                // If there is a promoted, don't look at the substs - since it will always contain\n-                // the generic parameters, instead, traverse the promoted MIR.\n-                let promoted = self.tcx.promoted_mir(def.did);\n-                self.visit_body(&promoted[p]);\n-                ControlFlow::CONTINUE\n-            }\n-            ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => {\n-                constant.super_visit_with(self)\n-            }\n-        }\n-    }\n-\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !ty.has_non_region_param() {"}, {"sha": "aa8094a60dd088149692f95187ed1e7117614d9e", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8150fa60cc445de7a57db634deb0668880be593/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=e8150fa60cc445de7a57db634deb0668880be593", "patch": "@@ -11,7 +11,6 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n-use rustc_middle::mir;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n@@ -347,13 +346,6 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         ))\n     }\n \n-    fn try_fold_mir_const(\n-        &mut self,\n-        constant: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        constant.try_super_fold_with(self)\n-    }\n-\n     #[inline]\n     fn try_fold_predicate(\n         &mut self,"}]}