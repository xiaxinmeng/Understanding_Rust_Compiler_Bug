{"sha": "cb563a93dcb076f2afe97d272591d71486906fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTYzYTkzZGNiMDc2ZjJhZmU5N2QyNzI1OTFkNzE0ODY5MDZmYzI=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-23T19:48:20Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-23T19:59:13Z"}, "message": "adding macro, cleaning up code", "tree": {"sha": "ae6bac518ea38a42a082e46ceb7a4aca7de6f003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6bac518ea38a42a082e46ceb7a4aca7de6f003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb563a93dcb076f2afe97d272591d71486906fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb563a93dcb076f2afe97d272591d71486906fc2", "html_url": "https://github.com/rust-lang/rust/commit/cb563a93dcb076f2afe97d272591d71486906fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb563a93dcb076f2afe97d272591d71486906fc2/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b569094d94ca5bd572cf5b776e203eafe65e80a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b569094d94ca5bd572cf5b776e203eafe65e80a8", "html_url": "https://github.com/rust-lang/rust/commit/b569094d94ca5bd572cf5b776e203eafe65e80a8"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "c80ce3c96f1a98a3d44870719fd5edffcd028f4e", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=cb563a93dcb076f2afe97d272591d71486906fc2", "patch": "@@ -46,22 +46,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n-        let (ty_sup, ty_sub, scope_def_id_sup, scope_def_id_sub, bregion_sup, bregion_sub) =\n-            if let (Some(anon_reg_sup), Some(anon_reg_sub)) =\n-                (self.is_suitable_anonymous_region(sup), self.is_suitable_anonymous_region(sub)) {\n-                let (def_id_sup, br_sup, def_id_sub, br_sub) = (anon_reg_sup.def_id,\n-                                                                anon_reg_sup.boundregion,\n-                                                                anon_reg_sub.def_id,\n-                                                                anon_reg_sub.boundregion);\n-                if let (Some(anonarg_sup), Some(anonarg_sub)) =\n-                    (self.find_anon_type(sup, &br_sup), self.find_anon_type(sub, &br_sub)) {\n-                    (anonarg_sup, anonarg_sub, def_id_sup, def_id_sub, br_sup, br_sub)\n-                } else {\n-                    return false;\n-                }\n-            } else {\n-                return false;\n-            };\n+        let anon_reg_sup = or_false!(self.is_suitable_anonymous_region(sup));\n+\n+        let anon_reg_sub = or_false!(self.is_suitable_anonymous_region(sub));\n+        let scope_def_id_sup = anon_reg_sup.def_id;\n+        let bregion_sup = anon_reg_sup.boundregion;\n+        let scope_def_id_sub = anon_reg_sub.def_id;\n+        let bregion_sub = anon_reg_sub.boundregion;\n+\n+        let ty_sup = or_false!(self.find_anon_type(sup, &bregion_sup));\n+\n+        let ty_sub = or_false!(self.find_anon_type(sub, &bregion_sub));\n \n         let (main_label, label1, label2) = if let (Some(sup_arg), Some(sub_arg)) =\n             (self.find_arg_with_anonymous_region(sup, sup),\n@@ -105,7 +100,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return false;\n         };\n \n-\n         struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n             .span_label(ty_sup.span, main_label)\n             .span_label(ty_sub.span, format!(\"\"))"}, {"sha": "195609992f75765345201d3cee4efd0c6b7e71fe", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cb563a93dcb076f2afe97d272591d71486906fc2", "patch": "@@ -75,8 +75,10 @@ use errors::{DiagnosticBuilder, DiagnosticStyledString};\n mod note;\n \n mod need_type_info;\n-mod util;\n+\n mod named_anon_conflict;\n+#[macro_use]\n+mod util;\n mod anon_anon_conflict;\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "635d0e8eb275f29f8eb41ee3416a99b89bbe6be0", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb563a93dcb076f2afe97d272591d71486906fc2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=cb563a93dcb076f2afe97d272591d71486906fc2", "patch": "@@ -16,6 +16,15 @@ use ty::{self, Region};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n \n+macro_rules! or_false {\n+     ($v:expr) => {\n+          match $v {\n+               Some(v) => v,\n+               None => return false,\n+          }\n+     }\n+}\n+\n // The struct contains the information about the anonymous region\n // we are searching for.\n pub struct AnonymousArgInfo<'tcx> {\n@@ -59,7 +68,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                           -> Option<AnonymousArgInfo> {\n \n         if let ty::ReFree(ref free_region) = *anon_region {\n-\n             let id = free_region.scope;\n             let hir = &self.tcx.hir;\n             if let Some(node_id) = hir.as_local_node_id(id) {"}]}