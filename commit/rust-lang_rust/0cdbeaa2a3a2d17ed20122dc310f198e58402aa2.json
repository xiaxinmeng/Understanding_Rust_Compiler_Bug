{"sha": "0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "node_id": "C_kwDOAAsO6NoAKDBjZGJlYWEyYTNhMmQxN2VkMjAxMjJkYzMxMGYxOThlNTg0MDJhYTI", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-10-05T08:55:57Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-11-06T21:05:15Z"}, "message": "Stabilize `const_raw_ptr_deref` for `*const T`\n\nThis stabilizes dereferencing immutable raw pointers in const contexts.\nIt does not stabilize `*mut T` dereferencing. This is placed behind the\n`const_raw_mut_ptr_deref` feature gate.", "tree": {"sha": "76166b13c1ad83e877b0daf025dd2e7759379cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76166b13c1ad83e877b0daf025dd2e7759379cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYYbuCwAKCRC4DhnkZita\npAlyAP94oXBmHGtARjFIILgIImw/HQgFSCpVHxZGNjPD+cyHfgEAqt+lykRwZ+UC\nmalI4J1dvHRP4HhJ/iX50j1B07e9BQg=\n=WKyt\n-----END PGP SIGNATURE-----", "payload": "tree 76166b13c1ad83e877b0daf025dd2e7759379cba\nparent 5ec7d1dad6dead949a49c76c8ca0425a6e46a223\nauthor Jacob Pratt <jacob@jhpratt.dev> 1633424157 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1636232715 -0400\n\nStabilize `const_raw_ptr_deref` for `*const T`\n\nThis stabilizes dereferencing immutable raw pointers in const contexts.\nIt does not stabilize `*mut T` dereferencing. This is placed behind the\n`const_raw_mut_ptr_deref` feature gate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "html_url": "https://github.com/rust-lang/rust/commit/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "html_url": "https://github.com/rust-lang/rust/commit/5ec7d1dad6dead949a49c76c8ca0425a6e46a223"}], "stats": {"total": 307, "additions": 114, "deletions": 193}, "files": [{"sha": "4420c1758a4c5a4a57d9f8ed66fe124bc96e50af", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -725,7 +725,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n         match elem {\n             ProjectionElem::Deref => {\n                 let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n-                if let ty::RawPtr(_) = base_ty.kind() {\n+                if base_ty.is_unsafe_ptr() {\n                     if proj_base.is_empty() {\n                         let decl = &self.body.local_decls[place_local];\n                         if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n@@ -734,7 +734,13 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                             return;\n                         }\n                     }\n-                    self.check_op(ops::RawPtrDeref);\n+\n+                    // `*const T` is stable, `*mut T` is not\n+                    if !base_ty.is_mutable_ptr() {\n+                        return;\n+                    }\n+\n+                    self.check_op(ops::RawMutPtrDeref);\n                 }\n \n                 if context.is_mutating_use() {"}, {"sha": "6391c88600936f12796e25f4fcc514359a09c291", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -400,18 +400,18 @@ impl NonConstOp for RawPtrComparison {\n }\n \n #[derive(Debug)]\n-pub struct RawPtrDeref;\n-impl NonConstOp for RawPtrDeref {\n+pub struct RawMutPtrDeref;\n+impl NonConstOp for RawMutPtrDeref {\n     fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n-        Status::Unstable(sym::const_raw_ptr_deref)\n+        Status::Unstable(sym::const_mut_refs)\n     }\n \n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n-            sym::const_raw_ptr_deref,\n+            sym::const_mut_refs,\n             span,\n-            &format!(\"dereferencing raw pointers in {}s is unstable\", ccx.const_kind(),),\n+            &format!(\"dereferencing raw mutable pointers in {}s is unstable\", ccx.const_kind(),),\n         )\n     }\n }"}, {"sha": "3bd1272c7cb47dcb8038efd809c02dae492cd1aa", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -299,6 +299,8 @@ declare_features! (\n     (accepted, const_panic, \"1.57.0\", Some(51999), None),\n     /// Lessens the requirements for structs to implement `Unsize`.\n     (accepted, relaxed_struct_unsize, \"1.58.0\", Some(81793), None),\n+    /// Allows dereferencing raw pointers during const eval.\n+    (accepted, const_raw_ptr_deref, \"1.58.0\", Some(51911), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "58f4e229323ac86019740d8985bd8c98c0c46c0d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -408,9 +408,6 @@ declare_features! (\n     /// Allows inferring `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    /// Allows dereferencing raw pointers during const eval.\n-    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n-\n     /// Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n "}, {"sha": "1be842d84b148cf2b1abfa24ba52720335f0c420", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -156,7 +156,7 @@\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n-#![feature(const_raw_ptr_deref)]\n+#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "b201cfeb038f16519b8b6d6d43364f5d16481ea4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -56,7 +56,7 @@\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n-#![feature(const_raw_ptr_deref)]\n+#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]"}, {"sha": "eb8325504792e26f792050f028a7ae95a24e042b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -264,7 +264,8 @@\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n #![feature(const_option)]\n-#![feature(const_raw_ptr_deref)]\n+#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n+#![cfg_attr(not(bootstrap), feature(const_mut_refs))]\n #![feature(const_socketaddr)]\n #![feature(const_trait_impl)]\n #![feature(container_error_extra)]"}, {"sha": "4aca75e3a1793326bbd9d2208dd9c9d6ca547ba9", "filename": "src/test/ui/consts/const-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,7 +1,7 @@\n-// Check that you can't dereference raw pointers in constants.\n+// Check that you can't dereference invalid raw pointers in constants.\n \n fn main() {\n     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-    //~^ ERROR dereferencing raw pointers in statics is unstable\n+    //~^ ERROR could not evaluate static initializer\n     println!(\"{}\", C);\n }"}, {"sha": "316843889c683ae765112752fe4dfa9cc8d89acd", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: dereferencing raw pointers in statics is unstable\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0xdeadbeef is not a valid pointer\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "037c6f9f7e6626dffc461f13cb75d62abcb74332", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -1,19 +0,0 @@\n-// New test for #53818: modifying static memory at compile-time is not allowed.\n-// The test should never compile successfully\n-\n-#![feature(const_raw_ptr_deref, const_mut_refs)]\n-\n-use std::cell::UnsafeCell;\n-\n-struct Foo(UnsafeCell<u32>);\n-\n-unsafe impl Send for Foo {}\n-unsafe impl Sync for Foo {}\n-\n-static FOO: Foo = Foo(UnsafeCell::new(42));\n-\n-static BAR: () = unsafe {\n-    *FOO.0.get() = 5; //~ ERROR\n-};\n-\n-fn main() {}"}, {"sha": "296a6bf542163e9909116dd31fc662d4e5b40172", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -1,9 +0,0 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n-   |\n-LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "ecf97223f6ada690c3ec193866e3d454bf698268", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,8 +1,6 @@\n // New test for #53818: modifying static memory at compile-time is not allowed.\n // The test should never compile successfully\n \n-#![feature(const_raw_ptr_deref)]\n-\n use std::cell::UnsafeCell;\n \n static mut FOO: u32 = 42;"}, {"sha": "4b6784acfcf06829e1eff0d79d5671aaeee2ad79", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/assign-to-static-within-other-static.rs:10:5\n+  --> $DIR/assign-to-static-within-other-static.rs:8:5\n    |\n LL |     FOO = 5;\n    |     ^^^^^^^ modifying a static's initial value from another static's initializer"}, {"sha": "c3f8b9f31ea8df46dbff623db18c6c1b74e902d9", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_raw_ptr_deref)]\n-\n fn main() {}\n \n // fine"}, {"sha": "44fa437806b15b325c12bbbe60698c4e4cb5a87b", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_raw_ptr_ops2.rs:9:26\n+  --> $DIR/const_raw_ptr_ops2.rs:7:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    |                          ^^^^^^^^^^^^^^^^^^^ 0x2a is not a valid pointer\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_raw_ptr_ops2.rs:11:26\n+  --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    |                          ^^^^^^^^^^^^^^^^^^^ 0x2c is not a valid pointer"}, {"sha": "4fcf879218b7ebbd3e230c6b029fc5f3b0df3de5", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_raw_ptr_deref)]\n-\n use std::mem;\n \n // Make sure we error with the right kind of error on a too large slice."}, {"sha": "92d70573d98a15d709219cc71013dd1ade3a9a2d", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/dangling.rs:8:16\n+  --> $DIR/dangling.rs:6:16\n    |\n LL |     let _val = &*slice;\n    |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object"}, {"sha": "1a1d9a6d540d899e6469740c1cbdc70827d90f82", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "74fb65ca1a658fdba44d987d38b55be201d594dc", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,14 +1,14 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/alloc_intrinsic_errors.rs:10:17\n+  --> $DIR/alloc_intrinsic_errors.rs:9:17\n    |\n LL | const FOO: i32 = foo();\n-   |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n+   |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n ...\n LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2\n-   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:10:17\n+   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:9:17\n \n error: aborting due to previous error\n "}, {"sha": "0a8fc7bcaac55509596e8941d9b3188ea3301cc6", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "f746f27000fff32bc0368dbc5c31ba847600997a", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "adaa4716f1532dd5c28fc3dc79ed0e8c2cbb82d7", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error: untyped pointers are not allowed in constant\n-  --> $DIR/alloc_intrinsic_nontransient_fail.rs:7:1\n+  --> $DIR/alloc_intrinsic_nontransient_fail.rs:6:1\n    |\n LL | const FOO: *const i32 = foo();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "92193bb33e299f05ac69131ac58987fbe762b680", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "597703de01e9e9d724bd6868bd0bdc61b911cfe0", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.32bit.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/alloc_intrinsic_uninit.rs:9:1\n+  --> $DIR/alloc_intrinsic_uninit.rs:8:1\n    |\n LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes"}, {"sha": "08fbb67b37172fa20fc78d37367364f357c0db59", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/alloc_intrinsic_uninit.rs:9:1\n+  --> $DIR/alloc_intrinsic_uninit.rs:8:1\n    |\n LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes"}, {"sha": "b53c9ac7a2c772402578ec1c82c37f879255174b", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -2,7 +2,6 @@\n // compile-test\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "77871c394b7947d4a904459c48ffa9344008b812", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n "}, {"sha": "8f4fea96c593dc4197e4e7aeae02935aafa9a798", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error: untyped pointers are not allowed in constant\n-  --> $DIR/alloc_intrinsic_untyped.rs:7:1\n+  --> $DIR/alloc_intrinsic_untyped.rs:6:1\n    |\n LL | const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b6b74e67d20cb0f0dbb7eae6724424587e18585a", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,7 +1,7 @@\n // New test for #53818: modifying static memory at compile-time is not allowed.\n // The test should never compile successfully\n \n-#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n \n use std::cell::UnsafeCell;\n \n@@ -14,7 +14,7 @@ static FOO: Foo = Foo(UnsafeCell::new(42));\n \n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ mutation through a reference\n+    //~^ ERROR could not evaluate static initializer\n };\n \n fn main() {"}, {"sha": "d127d1d455bd43e978a54fa22fdd0717670080d4", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: mutation through a reference is not allowed in statics\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/mod-static-with-const-fn.rs:16:5\n    |\n LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |     ^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "07bca7d64ff69356600427380426f3b5f98e3bd3", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n // Test for the behavior described in <https://github.com/rust-lang/rust/issues/87184>.\n-#![feature(const_mut_refs, const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n \n const PARTIAL_OVERWRITE: () = {\n     let mut p = &42;"}, {"sha": "1800b0a9785b1e0ef127d04ebcda4f0d167b50ac", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_raw_ptr_deref)]\n-\n fn main() {\n     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n     //~^ ERROR temporary value dropped while borrowed"}, {"sha": "8ac60da38634b8f3b0c1d81f840ea6610316458b", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_raw_ptr_ops.rs:4:29\n+  --> $DIR/promoted_raw_ptr_ops.rs:2:29\n    |\n LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_raw_ptr_ops.rs:6:30\n+  --> $DIR/promoted_raw_ptr_ops.rs:4:30\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1);\n    |            --------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_raw_ptr_ops.rs:8:28\n+  --> $DIR/promoted_raw_ptr_ops.rs:6:28\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) });\n    |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -32,7 +32,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_raw_ptr_ops.rs:10:29\n+  --> $DIR/promoted_raw_ptr_ops.rs:8:29\n    |\n LL |     let a: &'static bool = &(main as fn() == main as fn());\n    |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "a7d329f125be4ff3a47c07049ff288c2c0d6b7eb", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n #![feature(const_mut_refs)]\n #![feature(raw_ref_op)]\n-#![feature(const_raw_ptr_deref)]\n \n const NULL: *mut i32 = std::ptr::null_mut();\n const A: *const i32 = &4;"}, {"sha": "3a9ce79f10ef295b562ba60a0653f6c9cab2cfc4", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,11 +1,11 @@\n error[E0764]: mutable references are not allowed in the final value of constants\n-  --> $DIR/mut_ref_in_final.rs:11:21\n+  --> $DIR/mut_ref_in_final.rs:10:21\n    |\n LL | const B: *mut i32 = &mut 4;\n    |                     ^^^^^^\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:17:40\n+  --> $DIR/mut_ref_in_final.rs:16:40\n    |\n LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              ----------^^-\n@@ -15,7 +15,7 @@ LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:20:42\n+  --> $DIR/mut_ref_in_final.rs:19:42\n    |\n LL | const B4: Option<&mut i32> = helper(&mut 42);\n    |                              ------------^^-\n@@ -25,7 +25,7 @@ LL | const B4: Option<&mut i32> = helper(&mut 42);\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:35:65\n+  --> $DIR/mut_ref_in_final.rs:34:65\n    |\n LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  -------------------------------^^--\n@@ -35,7 +35,7 @@ LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:38:67\n+  --> $DIR/mut_ref_in_final.rs:37:67\n    |\n LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    -------------------------------^^--\n@@ -45,7 +45,7 @@ LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:41:71\n+  --> $DIR/mut_ref_in_final.rs:40:71\n    |\n LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                        -------------------------------^^--"}, {"sha": "e0704e24a2e68ff520f2a07136133bd26da14496", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n #![feature(const_mut_refs)]\n #![feature(raw_ref_op)]\n-#![feature(const_raw_ptr_deref)]\n \n // This file checks that our dynamic checks catch things that the static checks miss.\n // We do not have static checks for these, because we do not look into function bodies."}, {"sha": "7d6716787aad5513cd25e51a7f4431a5182afb4f", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,17 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:14:10\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n    |\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n    |          0x2a is not a valid pointer\n-   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:14:10\n+   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n ...\n LL | const A: Option<&mut i32> = helper();\n-   |                             -------- inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:19:29\n+   |                             -------- inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:18:29\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:26:1\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:25:1\n    |\n LL | const B: Option<&mut i32> = helper2();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d76d01a3d5ed82c33b1958a7492faa82080bc62a", "filename": "src/test/ui/consts/const-suggest-feature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,7 +1,7 @@\n const WRITE: () = unsafe {\n     *std::ptr::null_mut() = 0;\n-    //~^ ERROR dereferencing raw pointers in constants is unstable\n-    //~| HELP add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+    //~^ ERROR dereferencing raw mutable pointers in constants is unstable\n+    //~| HELP add `#![feature(const_mut_refs)]` to the crate attributes to enable\n };\n \n fn main() {}"}, {"sha": "3bc1eacf32f96edca29c774cce6438b0ea5622cc", "filename": "src/test/ui/consts/const-suggest-feature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-suggest-feature.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: dereferencing raw pointers in constants is unstable\n+error[E0658]: dereferencing raw mutable pointers in constants is unstable\n   --> $DIR/const-suggest-feature.rs:2:5\n    |\n LL |     *std::ptr::null_mut() = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "34e5bb322befc2e6ca581eaadfece07ca6f7d2b7", "filename": "src/test/ui/consts/int_ptr_for_zst_slices.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fint_ptr_for_zst_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fint_ptr_for_zst_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fint_ptr_for_zst_slices.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n-#![feature(const_raw_ptr_deref)]\n+// check-pass\n \n const FOO: &str = unsafe { &*(1_usize as *const [u8; 0] as *const [u8] as *const str) };\n "}, {"sha": "d221157556085ceea53f1cd8c60d136a1850b71f", "filename": "src/test/ui/consts/min_const_fn/allow_raw_ptr_dereference_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(const_raw_ptr_deref)]\n \n use std::ptr;\n "}, {"sha": "a6e1788bb7f0762dc9c29b72e9e5cd55b02c6255", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,10 +1,10 @@\n const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n-//~^ dereferencing raw pointers in constant functions\n+//~^ dereferencing raw mutable pointers in constant functions\n \n const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n-//~^ dereferencing raw pointers in constant functions\n+//~^ dereferencing raw mutable pointers in constant functions\n \n const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n-//~^ dereferencing raw pointers in constant functions\n+//~^ dereferencing raw mutable pointers in constant functions\n \n fn main() {}"}, {"sha": "820b6433f36c524c050c91df99160cac254281d2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,29 +1,29 @@\n-error[E0658]: dereferencing raw pointers in constant functions is unstable\n+error[E0658]: dereferencing raw mutable pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constant functions is unstable\n+error[E0658]: dereferencing raw mutable pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe_bad.rs:4:70\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    |                                                                      ^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constant functions is unstable\n+error[E0658]: dereferencing raw mutable pointers in constant functions is unstable\n   --> $DIR/min_const_fn_unsafe_bad.rs:7:83\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n    |                                                                                   ^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c48f59fe84890ec964fe12e0aa307f1722ecf152", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -33,11 +33,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |                 ^^^\n-help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static.rs:18:14\n-   |\n-LL |     unsafe { *(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static.rs:22:32\n    |"}, {"sha": "039b466ee078056bb67abcbec952eeca0e66765b", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.32bit.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -35,11 +35,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n-help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:14:14\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static2.rs:21:6\n    |"}, {"sha": "e0e2ec31efbaf7773a5dad210bbd8bb1a86c7d17", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -35,11 +35,6 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n-help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:14:14\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_refers_to_static2.rs:21:6\n    |"}, {"sha": "4c9b1c1571de41bf4f1874ea5a1d8cca732e0b7f", "filename": "src/test/ui/consts/offset_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_raw_ptr_deref)]\n #![feature(const_ptr_offset_from)]\n \n struct Struct {"}, {"sha": "cbc88bc4d9c382999971f5095021a03641ecd160", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_raw_ptr_deref)]\n #![feature(const_ptr_offset_from)]\n #![feature(core_intrinsics)]\n "}, {"sha": "ffd6ad58c301d69e392006cc569bbfac09957102", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/offset_from_ub.rs:18:27\n+  --> $DIR/offset_from_ub.rs:17:27\n    |\n LL |     let offset = unsafe { ptr_offset_from(field_ptr, base_ptr) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ptr_offset_from cannot compute offset of pointers into different allocations.\n@@ -13,25 +13,25 @@ LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  0x2a is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_from_ub.rs:24:14\n+  ::: $DIR/offset_from_ub.rs:23:14\n    |\n LL |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n-   |              ----------------------------------- inside `NOT_PTR` at $DIR/offset_from_ub.rs:24:14\n+   |              ----------------------------------- inside `NOT_PTR` at $DIR/offset_from_ub.rs:23:14\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/offset_from_ub.rs:31:14\n+  --> $DIR/offset_from_ub.rs:30:14\n    |\n LL |     unsafe { ptr_offset_from(field_ptr, base_ptr as *const u16) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: 1_isize cannot be divided by 2_isize without remainder\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/offset_from_ub.rs:37:14\n+  --> $DIR/offset_from_ub.rs:36:14\n    |\n LL |     unsafe { ptr_offset_from(ptr, ptr) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/offset_from_ub.rs:44:14\n+  --> $DIR/offset_from_ub.rs:43:14\n    |\n LL |     unsafe { ptr_offset_from(ptr2, ptr1) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0x10 is not a valid pointer"}, {"sha": "8161c7af968bf70f90df36e3366961965f48700e", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -8,7 +8,6 @@\n     core_intrinsics,\n     const_raw_ptr_comparison,\n     const_ptr_offset,\n-    const_raw_ptr_deref\n )]\n \n const FOO: &usize = &42;"}, {"sha": "cfec25a7194cbbb194fb22670546aca52c8469aa", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -7,19 +7,19 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:60:34\n+  ::: $DIR/ptr_comparisons.rs:59:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:60:34\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:59:34\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ptr_comparisons.rs:63:33\n+  --> $DIR/ptr_comparisons.rs:62:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:67:27\n+  --> $DIR/ptr_comparisons.rs:66:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -31,7 +31,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:72:27\n+  --> $DIR/ptr_comparisons.rs:71:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "a02e386c66c4d3550442cdd9edd6906f9b304999", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n // stderr-per-bitwidth\n-#![feature(const_raw_ptr_deref, never_type)]\n+#![feature(never_type)]\n \n const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n const _: &[!; 0] = unsafe { &*(1_usize as *const [!; 0]) }; // ok"}, {"sha": "3ee50907461cac7a573ada158576c62c6539d0d3", "filename": "src/test/ui/consts/write_to_mut_ref_dest.mut_refs.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.mut_refs.stderr?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: dereferencing raw pointers in constants is unstable\n-  --> $DIR/write_to_mut_ref_dest.rs:11:18\n-   |\n-LL |         unsafe { *b = 5; }\n-   |                  ^^^^^^\n-   |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "484ec4244355edf7f3d53bde410d2c057783d662", "filename": "src/test/ui/consts/write_to_mut_ref_dest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,4 +1,5 @@\n // revisions: stock mut_refs\n+//[mut_refs] check-pass\n \n #![cfg_attr(mut_refs, feature(const_mut_refs))]\n \n@@ -8,7 +9,7 @@ const FOO: &u32 = {\n     let mut a = 42;\n     {\n         let b: *mut u32 = &mut a; //[stock]~ ERROR mutable references are not allowed in constants\n-        unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n+        unsafe { *b = 5; } //[stock]~ ERROR dereferencing raw mutable pointers in constants\n     }\n     &{a}\n };"}, {"sha": "bb10592760632b9610b292bb03303432c248e643", "filename": "src/test/ui/consts/write_to_mut_ref_dest.stock.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite_to_mut_ref_dest.stock.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,20 +1,20 @@\n error[E0658]: mutable references are not allowed in constants\n-  --> $DIR/write_to_mut_ref_dest.rs:10:27\n+  --> $DIR/write_to_mut_ref_dest.rs:11:27\n    |\n LL |         let b: *mut u32 = &mut a;\n    |                           ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constants is unstable\n-  --> $DIR/write_to_mut_ref_dest.rs:11:18\n+error[E0658]: dereferencing raw mutable pointers in constants is unstable\n+  --> $DIR/write_to_mut_ref_dest.rs:12:18\n    |\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "22c5332c9259fe9dbec36648690045cd8253fecc", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(arbitrary_enum_discriminant, const_raw_ptr_deref, test)]\n+#![feature(arbitrary_enum_discriminant, test)]\n \n extern crate test;\n "}, {"sha": "fe20da1a8ea87fa88b4a1e6eb872db31a5c97c03", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,6 +1,6 @@\n-#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n \n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n+const REG_ADDR: *mut u8 = 0x5f3759df as *mut u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n //~^ ERROR evaluation of constant value failed"}, {"sha": "4415b70e75ec354227fbfdbd1c268b7877e54118", "filename": "src/test/ui/error-codes/E0396.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,19 +1,17 @@\n-// gate-test-const_raw_ptr_deref\n-\n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n+const REG_ADDR: *mut u8 = 0x5f3759df as *mut u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n-//~^ ERROR dereferencing raw pointers in constants is unstable\n+//~^ ERROR dereferencing raw mutable pointers in constants is unstable\n \n const unsafe fn unreachable() -> ! {\n     use std::convert::Infallible;\n \n-    const INFALLIBLE: *const Infallible = [].as_ptr();\n+    const INFALLIBLE: *mut Infallible = &[] as *const [Infallible] as *const _ as _;\n     match *INFALLIBLE {}\n-    //~^ ERROR dereferencing raw pointers in constant functions is unstable\n+    //~^ ERROR dereferencing raw mutable pointers in constant functions is unstable\n \n     const BAD: () = unsafe { match *INFALLIBLE {} };\n-    //~^ ERROR dereferencing raw pointers in constants is unstable\n+    //~^ ERROR dereferencing raw mutable pointers in constants is unstable\n }\n \n fn main() {"}, {"sha": "8c87f40674f2afb8c61fb8053f9026e2f8e1cbaf", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,29 +1,29 @@\n-error[E0658]: dereferencing raw pointers in constants is unstable\n-  --> $DIR/E0396.rs:5:28\n+error[E0658]: dereferencing raw mutable pointers in constants is unstable\n+  --> $DIR/E0396.rs:3:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            ^^^^^^^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/E0396.rs:12:11\n+error[E0658]: dereferencing raw mutable pointers in constant functions is unstable\n+  --> $DIR/E0396.rs:10:11\n    |\n LL |     match *INFALLIBLE {}\n    |           ^^^^^^^^^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: dereferencing raw pointers in constants is unstable\n-  --> $DIR/E0396.rs:15:36\n+error[E0658]: dereferencing raw mutable pointers in constants is unstable\n+  --> $DIR/E0396.rs:13:36\n    |\n LL |     const BAD: () = unsafe { match *INFALLIBLE {} };\n    |                                    ^^^^^^^^^^^\n    |\n-   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n-   = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dcb84a80cb034da634e3debfee374513cce5bff8", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-unstable-const-fn.rs:11:5\n+  --> $DIR/unsafe-unstable-const-fn.rs:10:5\n    |\n LL |     *a == b\n    |     ^^ dereference of raw pointer"}, {"sha": "581b15cdfb0cd4796bbdc4582259c28d039d4663", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -3,7 +3,6 @@\n \n #![stable(feature = \"foo\", since = \"1.33.0\")]\n #![feature(staged_api)]\n-#![feature(const_raw_ptr_deref)]\n \n #[stable(feature = \"foo\", since = \"1.33.0\")]\n #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]"}, {"sha": "dcb84a80cb034da634e3debfee374513cce5bff8", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbeaa2a3a2d17ed20122dc310f198e58402aa2/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr?ref=0cdbeaa2a3a2d17ed20122dc310f198e58402aa2", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-unstable-const-fn.rs:11:5\n+  --> $DIR/unsafe-unstable-const-fn.rs:10:5\n    |\n LL |     *a == b\n    |     ^^ dereference of raw pointer"}]}