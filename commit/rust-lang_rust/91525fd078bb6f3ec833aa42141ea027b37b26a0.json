{"sha": "91525fd078bb6f3ec833aa42141ea027b37b26a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTI1ZmQwNzhiYjZmM2VjODMzYWE0MjE0MWVhMDI3YjM3YjI2YTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-05T00:15:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-05T00:15:23Z"}, "message": "Tweak output for invalid negative impl AST errors", "tree": {"sha": "e6942a090e3d2befeb368f68e310f9307c603642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6942a090e3d2befeb368f68e310f9307c603642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91525fd078bb6f3ec833aa42141ea027b37b26a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91525fd078bb6f3ec833aa42141ea027b37b26a0", "html_url": "https://github.com/rust-lang/rust/commit/91525fd078bb6f3ec833aa42141ea027b37b26a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91525fd078bb6f3ec833aa42141ea027b37b26a0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "html_url": "https://github.com/rust-lang/rust/commit/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "e86ec2ebfa499a50077828e7b9366fba3f6b643e", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -2117,14 +2117,14 @@ pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n     /// `impl !Trait for Type`\n-    Negative,\n+    Negative(Span),\n }\n \n impl fmt::Debug for ImplPolarity {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ImplPolarity::Positive => \"positive\".fmt(f),\n-            ImplPolarity::Negative => \"negative\".fmt(f),\n+            ImplPolarity::Negative(_) => \"negative\".fmt(f),\n         }\n     }\n }"}, {"sha": "1070043458a5a4248a1b9aed7f9e4224ea7a5cb8", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -779,7 +779,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 defaultness: _,\n                 constness: _,\n                 generics: _,\n-                of_trait: Some(_),\n+                of_trait: Some(ref t),\n                 ref self_ty,\n                 items: _,\n             } => {\n@@ -794,10 +794,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .help(\"use `auto trait Trait {}` instead\")\n                             .emit();\n                     }\n-                    if let (Unsafe::Yes(span), ImplPolarity::Negative) = (unsafety, polarity) {\n+                    if let (Unsafe::Yes(span), ImplPolarity::Negative(sp)) = (unsafety, polarity) {\n                         struct_span_err!(\n                             this.session,\n-                            item.span,\n+                            sp.to(t.path.span),\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n@@ -816,7 +816,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 constness,\n                 generics: _,\n                 of_trait: None,\n-                self_ty: _,\n+                ref self_ty,\n                 items: _,\n             } => {\n                 self.invalid_visibility(\n@@ -826,28 +826,36 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if let Unsafe::Yes(span) = unsafety {\n                     struct_span_err!(\n                         self.session,\n-                        item.span,\n+                        vec![span, self_ty.span],\n                         E0197,\n                         \"inherent impls cannot be unsafe\"\n                     )\n                     .span_label(span, \"unsafe because of this\")\n+                    .span_label(self_ty.span, \"inherent impl for this type\")\n                     .emit();\n                 }\n-                if polarity == ImplPolarity::Negative {\n-                    self.err_handler().span_err(item.span, \"inherent impls cannot be negative\");\n+                if let ImplPolarity::Negative(span) = polarity {\n+                    self.err_handler().span_err(span, \"inherent impls cannot be negative\");\n                 }\n                 if let Defaultness::Default(def_span) = defaultness {\n-                    let span = self.session.source_map().def_span(item.span);\n                     self.err_handler()\n-                        .struct_span_err(span, \"inherent impls cannot be `default`\")\n+                        .struct_span_err(\n+                            vec![def_span, self_ty.span],\n+                            \"inherent impls cannot be `default`\",\n+                        )\n                         .span_label(def_span, \"`default` because of this\")\n+                        .span_label(self_ty.span, \"inherent impl for this type\")\n                         .note(\"only trait implementations may be annotated with `default`\")\n                         .emit();\n                 }\n                 if let Const::Yes(span) = constness {\n                     self.err_handler()\n-                        .struct_span_err(item.span, \"inherent impls cannot be `const`\")\n+                        .struct_span_err(\n+                            vec![span, self_ty.span],\n+                            \"inherent impls cannot be `const`\",\n+                        )\n                         .span_label(span, \"`const` because of this\")\n+                        .span_label(self_ty.span, \"inherent impl for this type\")\n                         .note(\"only trait implementations may be annotated with `const`\")\n                         .emit();\n                 }"}, {"sha": "3d9001d5d58bb72b288c1aa9a4ef4db3950b3169", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -338,14 +338,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Impl { polarity, defaultness, .. } => {\n-                if polarity == ast::ImplPolarity::Negative {\n+            ast::ItemKind::Impl { polarity, defaultness, ref of_trait, .. } => {\n+                if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n                         optin_builtin_traits,\n-                        i.span,\n+                        span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n-                                        use marker types for now\"\n+                         use marker types for now\"\n                     );\n                 }\n "}, {"sha": "dbfe5d34bc0cb3dc12627ec5f3f7e6c2bb174002", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1175,7 +1175,7 @@ impl<'a> State<'a> {\n                     self.s.space();\n                 }\n \n-                if polarity == ast::ImplPolarity::Negative {\n+                if let ast::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n "}, {"sha": "f03ab41f12d0ae037359e7a8cdefd6e04880abd3", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -652,7 +652,7 @@ impl<'a> State<'a> {\n                     self.word_nbsp(\"const\");\n                 }\n \n-                if let hir::ImplPolarity::Negative = polarity {\n+                if let hir::ImplPolarity::Negative(_) = polarity {\n                     self.s.word(\"!\");\n                 }\n "}, {"sha": "09c512f32546bb61d8b21b00eeed0cf386a7d8be", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -414,7 +414,7 @@ impl<'a> Parser<'a> {\n         // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n         let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n             self.bump(); // `!`\n-            ast::ImplPolarity::Negative\n+            ast::ImplPolarity::Negative(self.prev_token.span)\n         } else {\n             ast::ImplPolarity::Positive\n         };"}, {"sha": "4fa226712b78e3381bfc48980b5beeea2132b400", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -519,7 +519,7 @@ impl Sig for ast::Item {\n                 text.push(' ');\n \n                 let trait_sig = if let Some(ref t) = *of_trait {\n-                    if polarity == ast::ImplPolarity::Negative {\n+                    if let ast::ImplPolarity::Negative(_) = polarity {\n                         text.push('!');\n                     }\n                     let trait_sig = t.path.make(offset + text.len(), id, scx)?;"}, {"sha": "3b25f67aacc63b14772537ba640c708f0f1755df", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -69,11 +69,11 @@ impl UnsafetyChecker<'tcx> {\n                     .emit();\n                 }\n \n-                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative) => {\n+                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n                     // Reported in AST validation\n                     self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n                 }\n-                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative)\n+                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n                 | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n                 | (Unsafety::Normal, None, Unsafety::Normal, _) => {"}, {"sha": "e6c3d5b8b9e9ee7dfcdf0541bd38a7539399d6e9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1548,7 +1548,7 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(hir_id);\n     match &item.kind {\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative, .. } => {\n+        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => {\n             if is_rustc_reservation {\n                 tcx.sess.span_err(item.span, \"reservation impls can't be negative\");\n             }"}, {"sha": "eebd1de277ecf2e7f81b61a1f6110537bdea646e", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,8 +1,8 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/coherence-negative-impls-safe.rs:7:1\n+  --> $DIR/coherence-negative-impls-safe.rs:7:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------      ^^^^^\n    | |\n    | unsafe because of this\n "}, {"sha": "bc3c2857958f96230f5bd1e52d1f43c19ab8a1fe", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -2,7 +2,7 @@ error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/E0197.rs:3:1\n    |\n LL | unsafe impl Foo { }\n-   | ------^^^^^^^^^^^^^\n+   | ^^^^^^      ^^^ inherent impl for this type\n    | |\n    | unsafe because of this\n "}, {"sha": "433047687003709f8c845d608be75e48e9fec7b5", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,8 +1,8 @@\n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/E0198.rs:5:1\n+  --> $DIR/E0198.rs:5:13\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------      ^^^^^\n    | |\n    | unsafe because of this\n "}, {"sha": "490d29ad8a35f33eef20f9ffde326f6b0a3b404b", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -8,10 +8,10 @@ LL | auto trait AutoDummyTrait {}\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:9:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:9:6\n    |\n LL | impl !AutoDummyTrait for DummyStruct {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "0a76c70b97d1e8d6da7b3c6b955a7bbb58eae299", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,18 +1,18 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:1\n+  --> $DIR/inherent-impl.rs:9:6\n    |\n LL | impl const S {}\n-   | ^^^^^-----^^^^^\n+   |      ^^^^^ ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:1\n+  --> $DIR/inherent-impl.rs:12:6\n    |\n LL | impl const T {}\n-   | ^^^^^-----^^^^^\n+   |      ^^^^^ ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |"}, {"sha": "2a96f41a249fa0786c12382e5008e3467b86e6ef", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -2,7 +2,7 @@ error: inherent impls cannot be `default`\n   --> $DIR/validation.rs:7:1\n    |\n LL | default impl S {}\n-   | -------^^^^^^^\n+   | ^^^^^^^      ^ inherent impl for this type\n    | |\n    | `default` because of this\n    |"}, {"sha": "5d4c1b354f700614cb27649b367962a9f5dc471c", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n-  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:1\n+  --> $DIR/syntax-trait-polarity-feature-gate.rs:7:6\n    |\n LL | impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable"}, {"sha": "b7d5b4570aaccad002b171f8772024db6d3ef55d", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,28 +1,28 @@\n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:7:1\n+  --> $DIR/syntax-trait-polarity.rs:7:6\n    |\n LL | impl !TestType {}\n-   | ^^^^^^^^^^^^^^^^^\n+   |      ^\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:12:1\n+  --> $DIR/syntax-trait-polarity.rs:12:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------      ^^^^^\n    | |\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:1\n+  --> $DIR/syntax-trait-polarity.rs:19:9\n    |\n LL | impl<T> !TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:22:1\n+  --> $DIR/syntax-trait-polarity.rs:22:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------         ^^^^^\n    | |\n    | unsafe because of this\n "}, {"sha": "09ad4585ab156875acd4afa39d9e431ff617491a", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91525fd078bb6f3ec833aa42141ea027b37b26a0/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=91525fd078bb6f3ec833aa42141ea027b37b26a0", "patch": "@@ -1,14 +1,10 @@\n error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/trait-safety-inherent-impl.rs:5:1\n    |\n-LL |   unsafe impl SomeStruct {\n-   |   ^-----\n-   |   |\n-   |  _unsafe because of this\n+LL | unsafe impl SomeStruct {\n+   | ^^^^^^      ^^^^^^^^^^ inherent impl for this type\n    | |\n-LL | |     fn foo(self) { }\n-LL | | }\n-   | |_^\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}]}