{"sha": "8b1742ea6a8a560736a7656db1456f69c00c0704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTc0MmVhNmE4YTU2MDczNmE3NjU2ZGIxNDU2ZjY5YzAwYzA3MDQ=", "commit": {"author": {"name": "kyren", "email": "kerriganw@gmail.com", "date": "2019-03-11T02:18:38Z"}, "committer": {"name": "kyren", "email": "kerriganw@gmail.com", "date": "2019-03-11T03:01:30Z"}, "message": "Fix #54822 and associated faulty tests\n\nType checking associated constants can require trait bounds, but an empty\nparameter environment was provided to the trait solver.  Providing an\nappropriate parameter environment seems to fix #54822 and also make one of the\ncases in src/test/ui/nll/trait-associated-constant.rs that should compile\nsuccessfully do so.  It also (slightly) improves the error message in\nsrc/test/ui/associated-const/associated-const-generic-obligations.rs", "tree": {"sha": "da256bd007e0c754aa88bfdbc545e8ef44e2306b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da256bd007e0c754aa88bfdbc545e8ef44e2306b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b1742ea6a8a560736a7656db1456f69c00c0704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1742ea6a8a560736a7656db1456f69c00c0704", "html_url": "https://github.com/rust-lang/rust/commit/8b1742ea6a8a560736a7656db1456f69c00c0704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b1742ea6a8a560736a7656db1456f69c00c0704/comments", "author": {"login": "kyren", "id": 1538607, "node_id": "MDQ6VXNlcjE1Mzg2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1538607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyren", "html_url": "https://github.com/kyren", "followers_url": "https://api.github.com/users/kyren/followers", "following_url": "https://api.github.com/users/kyren/following{/other_user}", "gists_url": "https://api.github.com/users/kyren/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyren/subscriptions", "organizations_url": "https://api.github.com/users/kyren/orgs", "repos_url": "https://api.github.com/users/kyren/repos", "events_url": "https://api.github.com/users/kyren/events{/privacy}", "received_events_url": "https://api.github.com/users/kyren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyren", "id": 1538607, "node_id": "MDQ6VXNlcjE1Mzg2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1538607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyren", "html_url": "https://github.com/kyren", "followers_url": "https://api.github.com/users/kyren/followers", "following_url": "https://api.github.com/users/kyren/following{/other_user}", "gists_url": "https://api.github.com/users/kyren/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyren/subscriptions", "organizations_url": "https://api.github.com/users/kyren/orgs", "repos_url": "https://api.github.com/users/kyren/repos", "events_url": "https://api.github.com/users/kyren/events{/privacy}", "received_events_url": "https://api.github.com/users/kyren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610", "html_url": "https://github.com/rust-lang/rust/commit/9d71ec1358ac063fe6ff1eaed0ba6ed3cedde610"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "f79bf4e999d5492dc158cca4a8ae47f29fa7a441", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -917,7 +917,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = ty::ParamEnv::empty();\n+        let param_env = tcx.param_env(impl_c.def_id);\n         let inh = Inherited::new(infcx, impl_c.def_id);\n         let infcx = &inh.infcx;\n "}, {"sha": "498e315b5c83cf4cef698f15596353ee8612eed8", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.rs?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -12,7 +12,7 @@ trait Bar: Foo {\n \n impl<T: Foo> Bar for T {\n     const FROM: &'static str = \"foo\";\n-    //~^ ERROR the trait bound `T: Foo` is not satisfied [E0277]\n+    //~^ ERROR implemented const `FROM` has an incompatible type for trait [E0326]\n }\n \n fn main() {}"}, {"sha": "eeee26a75671f062f261caad1ad139a4038c98a8", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -1,11 +1,15 @@\n-error[E0277]: the trait bound `T: Foo` is not satisfied\n-  --> $DIR/associated-const-generic-obligations.rs:14:5\n+error[E0326]: implemented const `FROM` has an incompatible type for trait\n+  --> $DIR/associated-const-generic-obligations.rs:14:17\n    |\n+LL |     const FROM: Self::Out;\n+   |                 --------- type in trait\n+...\n LL |     const FROM: &'static str = \"foo\";\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n+   |                 ^^^^^^^^^^^^ expected associated type, found reference\n    |\n-   = help: consider adding a `where T: Foo` bound\n+   = note: expected type `<T as Foo>::Out`\n+              found type `&'static str`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0326`."}, {"sha": "0ce46d312afef865384080ab5011269b954719a9", "filename": "src/test/ui/associated-const/associated-const-trait-bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -0,0 +1,21 @@\n+// compile-pass\n+\n+trait ConstDefault {\n+    const DEFAULT: Self;\n+}\n+\n+trait Foo: Sized {}\n+\n+trait FooExt: Foo {\n+    type T: ConstDefault;\n+}\n+\n+trait Bar<F: FooExt> {\n+    const T: F::T;\n+}\n+\n+impl<F: FooExt> Bar<F> for () {\n+    const T: F::T = <F::T as ConstDefault>::DEFAULT;\n+}\n+\n+fn main() {}"}, {"sha": "2ba65e10ea70f1b217fbd1f58dd19f1db771b49a", "filename": "src/test/ui/nll/trait-associated-constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -26,7 +26,6 @@ struct FailStruct2 { }\n \n impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n     const AC: Option<&'a str> = None;\n-    //~^ ERROR: mismatched types\n }\n \n fn main() {}"}, {"sha": "786ca8e19e4cd2e5af78b9ddaec98fc6a98c050b", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b1742ea6a8a560736a7656db1456f69c00c0704/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=8b1742ea6a8a560736a7656db1456f69c00c0704", "patch": "@@ -17,25 +17,6 @@ note: ...does not necessarily outlive the lifetime 'b as defined on the impl at\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n    |              ^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/trait-associated-constant.rs:28:5\n-   |\n-LL |     const AC: Option<&'a str> = None;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `std::option::Option<&'b str>`\n-              found type `std::option::Option<&'a str>`\n-note: the lifetime 'a as defined on the impl at 27:6...\n-  --> $DIR/trait-associated-constant.rs:27:6\n-   |\n-LL | impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n-   |      ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 27:14\n-  --> $DIR/trait-associated-constant.rs:27:14\n-   |\n-LL | impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n-   |              ^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}]}