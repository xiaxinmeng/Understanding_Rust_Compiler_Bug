{"sha": "b7071f2bc04530c055b2198efb08f2478af32c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MDcxZjJiYzA0NTMwYzA1NWIyMTk4ZWZiMDhmMjQ3OGFmMzJjMTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T07:38:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_dyn_ty", "tree": {"sha": "a2d88aa8c5eb55374a1e88109936c49f1d86ae22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d88aa8c5eb55374a1e88109936c49f1d86ae22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7071f2bc04530c055b2198efb08f2478af32c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7071f2bc04530c055b2198efb08f2478af32c19", "html_url": "https://github.com/rust-lang/rust/commit/b7071f2bc04530c055b2198efb08f2478af32c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7071f2bc04530c055b2198efb08f2478af32c19/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb7b96c84312ebc05f1e27515543c9f9365ba58", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb7b96c84312ebc05f1e27515543c9f9365ba58", "html_url": "https://github.com/rust-lang/rust/commit/edb7b96c84312ebc05f1e27515543c9f9365ba58"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "e88bfc17dd6ebb44af07166ab659e68e2addd664", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7071f2bc04530c055b2198efb08f2478af32c19/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7071f2bc04530c055b2198efb08f2478af32c19/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=b7071f2bc04530c055b2198efb08f2478af32c19", "patch": "@@ -108,20 +108,14 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(kw::Impl) {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n-        } else if self.check_keyword(kw::Dyn) &&\n-                  (self.token.span.rust_2018() ||\n-                   self.look_ahead(1, |t| t.can_begin_bound() &&\n-                                          !can_continue_type_after_non_fn_ident(t))) {\n-            self.bump(); // `dyn`\n-            // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_generic_bounds(None)?;\n-            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n-            TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n-        } else if self.check(&token::Question) ||\n-                  self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus()) {\n+        } else if self.is_explicit_dyn_type() {\n+            self.parse_dyn_ty(&mut impl_dyn_multi)?\n+        } else if self.check(&token::Question)\n+            || self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus())\n+        {\n             // Bound list (trait object type)\n-            TyKind::TraitObject(self.parse_generic_bounds_common(allow_plus, None)?,\n-                                TraitObjectSyntax::None)\n+            let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n+            TyKind::TraitObject(bounds, TraitObjectSyntax::None)\n         } else if self.eat_lt() {\n             // Qualified path\n             let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n@@ -316,6 +310,26 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n     }\n \n+    /// Is a `dyn B0 + ... + Bn` type allowed here?\n+    fn is_explicit_dyn_type(&mut self) -> bool {\n+        self.check_keyword(kw::Dyn)\n+            && (self.token.span.rust_2018()\n+                || self.look_ahead(1, |t| {\n+                    t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n+                }))\n+    }\n+\n+    /// Parses a `dyn B0 + ... + Bn` type.\n+    ///\n+    /// Note that this does *not* parse bare trait objects.\n+    fn parse_dyn_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n+        self.bump(); // `dyn`\n+        // Always parse bounds greedily for better error recovery.\n+        let bounds = self.parse_generic_bounds(None)?;\n+        *impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+        Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn))\n+    }\n+\n     pub(super) fn parse_generic_bounds(&mut self,\n                                   colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n         self.parse_generic_bounds_common(true, colon_span)"}]}