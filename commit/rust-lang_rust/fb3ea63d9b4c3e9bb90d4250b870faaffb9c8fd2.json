{"sha": "fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiM2VhNjNkOWI0YzNlOWJiOTBkNDI1MGI4NzBmYWFmZmI5YzhmZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-13T12:08:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-13T12:08:59Z"}, "message": "Auto merge of #86245 - lqd:const-ub-align, r=RalfJung\n\nFix ICEs on invalid vtable size/alignment const UB errors\n\nThe invalid vtable size/alignment errors from `InterpCx::read_size_and_align_from_vtable` were \"freeform const UB errors\", causing ICEs when reaching validation. This PR turns them into const UB hard errors to catch them during validation and avoid that.\n\nFixes #86193\n\nr? `@RalfJung`\n\n(It seemed cleaner to have 2 variants but they can be merged into one variant with a message payload if you prefer that ?)", "tree": {"sha": "94675917e0edd783192d018e3d0250e537f47d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94675917e0edd783192d018e3d0250e537f47d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "html_url": "https://github.com/rust-lang/rust/commit/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc5d5432aaed21630ead1fa59418245ee2e1047", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc5d5432aaed21630ead1fa59418245ee2e1047", "html_url": "https://github.com/rust-lang/rust/commit/6cc5d5432aaed21630ead1fa59418245ee2e1047"}, {"sha": "e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "html_url": "https://github.com/rust-lang/rust/commit/e29f3e837fb6262040d42d4cde8e2f775dee0fe7"}], "stats": {"total": 187, "additions": 149, "deletions": 38}, "files": [{"sha": "aca39d438c10371075a33db3c266935228adea2f", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -227,7 +227,11 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Invalid metadata in a wide pointer (using `str` to avoid allocations).\n     InvalidMeta(&'static str),\n     /// Invalid drop function in vtable.\n-    InvalidDropFn(FnSig<'tcx>),\n+    InvalidVtableDropFn(FnSig<'tcx>),\n+    /// Invalid size in a vtable: too large.\n+    InvalidVtableSize,\n+    /// Invalid alignment in a vtable: too large, or not a power of 2.\n+    InvalidVtableAlignment(String),\n     /// Reading a C string that does not end within its allocation.\n     UnterminatedCString(Pointer),\n     /// Dereferencing a dangling pointer after it got freed.\n@@ -287,11 +291,15 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n-            InvalidDropFn(sig) => write!(\n+            InvalidVtableDropFn(sig) => write!(\n                 f,\n                 \"invalid drop function signature: got {}, expected exactly one argument which must be a pointer type\",\n                 sig\n             ),\n+            InvalidVtableSize => {\n+                write!(f, \"invalid vtable: size is bigger than largest supported object\")\n+            }\n+            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {}\", msg),\n             UnterminatedCString(p) => write!(\n                 f,\n                 \"reading a null-terminated string starting at {} with no null found before end of allocation\","}, {"sha": "9a59161f08f507f11abf9ff1b1134305f0a929d8", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -137,9 +137,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();\n         if args.len() != 1 {\n-            throw_ub!(InvalidDropFn(fn_sig));\n+            throw_ub!(InvalidVtableDropFn(fn_sig));\n         }\n-        let ty = args[0].builtin_deref(true).ok_or_else(|| err_ub!(InvalidDropFn(fn_sig)))?.ty;\n+        let ty =\n+            args[0].builtin_deref(true).ok_or_else(|| err_ub!(InvalidVtableDropFn(fn_sig)))?.ty;\n         Ok((drop_instance, ty))\n     }\n \n@@ -158,14 +159,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let size = u64::try_from(self.force_bits(size, pointer_size)?).unwrap();\n         let align = vtable.read_ptr_sized(pointer_size * 2)?.check_init()?;\n         let align = u64::try_from(self.force_bits(align, pointer_size)?).unwrap();\n-        let align = Align::from_bytes(align)\n-            .map_err(|e| err_ub_format!(\"invalid vtable: alignment {}\", e))?;\n+        let align = Align::from_bytes(align).map_err(|e| err_ub!(InvalidVtableAlignment(e)))?;\n \n         if size >= self.tcx.data_layout.obj_size_bound() {\n-            throw_ub_format!(\n-                \"invalid vtable: \\\n-                size is bigger than largest supported object\"\n-            );\n+            throw_ub!(InvalidVtableSize);\n         }\n         Ok((Size::from_bytes(size), align))\n     }"}, {"sha": "c9ebffe8d1cf46099e714d80ccee5869cb2b3829", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -349,12 +349,16 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_ub!(InvalidFunctionPointer(..)) |\n                     err_unsup!(ReadBytesAsPointer) =>\n                         { \"invalid drop function pointer in vtable (not pointing to a function)\" },\n-                    err_ub!(InvalidDropFn(..)) =>\n+                    err_ub!(InvalidVtableDropFn(..)) =>\n                         { \"invalid drop function pointer in vtable (function has incompatible signature)\" },\n                 );\n                 try_validation!(\n                     self.ecx.read_size_and_align_from_vtable(vtable),\n                     self.path,\n+                    err_ub!(InvalidVtableSize) =>\n+                        { \"invalid vtable: size is bigger than largest supported object\" },\n+                    err_ub!(InvalidVtableAlignment(msg)) =>\n+                        { \"invalid vtable: alignment {}\", msg },\n                     err_unsup!(ReadPointerAsBytes) => { \"invalid size or align in vtable\" },\n                 );\n                 // FIXME: More checks for the vtable."}, {"sha": "a0b449657da764fff30613caccc04dd5f7732e7f", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.32bit.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -0,0 +1,52 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:19:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:25:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:36:1\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+   | |_____________________________________________________________________________________________^ type validation failed: encountered invalid vtable: alignment `1000` is not a power of 2 at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500allocN\u2500\u257c \u257e\u2500allocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:41:1\n+   |\n+LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+   | |______________________________________________________________________________________________^ type validation failed: encountered invalid vtable: size is bigger than largest supported object at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500allocN\u2500\u257c \u257e\u2500allocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "70ae5e0a8c7e2b8ef894397cd15c2c557444fe77", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.64bit.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -0,0 +1,52 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:19:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:25:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:36:1\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+   | |_____________________________________________________________________________________________^ type validation failed: encountered invalid vtable: alignment `1000` is not a power of 2 at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:41:1\n+   |\n+LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+   | |______________________________________________________________________________________________^ type validation failed: encountered invalid vtable: size is bigger than largest supported object at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7c514e804e01ab1b92f82549d17e32d8a36f0a28", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs?ref=fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "patch": "@@ -3,6 +3,15 @@\n //   triggers an error\n // - a similar test that triggers a previously-untested const UB error: emitted close to the above\n //   error, it checks the correctness of the size\n+//\n+// As is, this code will only hard error when the constants are used, and the errors are emitted via\n+// the `#[allow]`-able `const_err` lint. However, if the transparent wrapper technique to prevent\n+// reborrows is used -- from `ub-wide-ptr.rs` -- these two errors reach validation and would trigger\n+// ICEs as tracked by #86193. So we also use the transparent wrapper to verify proper validation\n+// errors are emitted instead of ICEs.\n+\n+// stderr-per-bitwidth\n+// normalize-stderr-test \"alloc\\d+\" -> \"allocN\"\n \n trait Trait {}\n \n@@ -18,4 +27,20 @@ const INVALID_VTABLE_SIZE: &dyn Trait =\n //~| WARNING this was previously accepted by the compiler\n //~| invalid vtable: size is bigger than largest supported object\n \n+#[repr(transparent)]\n+struct W<T>(T);\n+\n+// The drop fn is checked before size/align are, so get ourselves a \"sufficiently valid\" drop fn\n+fn drop_me(_: *mut usize) {}\n+\n+const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+    unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+//~^^ ERROR it is undefined behavior to use this value\n+//~| invalid vtable: alignment `1000` is not a power of 2\n+\n+const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+    unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+//~^^ ERROR it is undefined behavior to use this value\n+//~| invalid vtable: size is bigger than largest supported object\n+\n fn main() {}"}, {"sha": "c937d039d381e63e1c1bb0b81a927f6cfae445f9", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cc5d5432aaed21630ead1fa59418245ee2e1047/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cc5d5432aaed21630ead1fa59418245ee2e1047/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr?ref=6cc5d5432aaed21630ead1fa59418245ee2e1047", "patch": "@@ -1,27 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:10:14\n-   |\n-LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: alignment `1000` is not a power of 2\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:16:14\n-   |\n-LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: size is bigger than largest supported object\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 2 previous errors\n-"}]}