{"sha": "8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMWY1YTc4M2EzZmZkMGFmYmY1YjFmZGYyMmZmOWNhZjdmZGE5Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-28T15:05:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-28T16:05:21Z"}, "message": "Move source-related traits to a separate module", "tree": {"sha": "38f32326e41d86d8c8a3c598ff4fbe66c557b4bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f32326e41d86d8c8a3c598ff4fbe66c557b4bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "html_url": "https://github.com/rust-lang/rust/commit/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7f6b573e9b6133cc147a529dd2a23119bb4ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f6b573e9b6133cc147a529dd2a23119bb4ae5", "html_url": "https://github.com/rust-lang/rust/commit/2c7f6b573e9b6133cc147a529dd2a23119bb4ae5"}], "stats": {"total": 137, "additions": 77, "deletions": 60}, "files": [{"sha": "2cf2103497ee3d196b82d0a4b583f408d0593dc5", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -1,6 +1,9 @@\n //! FIXME: write short doc here\n \n-use hir_def::{AstItemDef, HasChildSource, HasSource as _, Lookup, VariantId};\n+use hir_def::{\n+    src::{HasChildSource, HasSource as _},\n+    AstItemDef, Lookup, VariantId,\n+};\n use hir_expand::either::Either;\n use ra_syntax::ast;\n "}, {"sha": "9ab829aab259fb8e605a2441612bd4c02a1f166f", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -11,7 +11,7 @@ use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId, HasChildSource,\n+    db::DefDatabase, src::HasChildSource, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId,\n     LocalEnumVariantId, LocalStructFieldId, StructId, UnionId, VariantId,\n };\n "}, {"sha": "bc7ade9212cb31e7b49bc94ce91649974cbfa8c2", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -11,7 +11,8 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase, path::Path, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup,\n+    db::DefDatabase, path::Path, src::HasChildSource, src::HasSource, AdtId, AstItemDef, AttrDefId,\n+    Lookup,\n };\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]"}, {"sha": "69508dd8a5222d045966c9049dbd5950b688c5e5", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -17,7 +17,8 @@ use crate::{\n     expr::{Expr, ExprId, Pat, PatId},\n     nameres::CrateDefMap,\n     path::Path,\n-    DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n+    src::HasSource,\n+    DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n struct Expander {"}, {"sha": "095d7064a0258493fb87b320f931286f37dae07b", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -10,9 +10,10 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     db::DefDatabase,\n+    src::HasSource,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, HasSource,\n-    ImplId, Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId,\n+    Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "ec944373da0e64d777590f05ae2de628722bb4c2", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -8,7 +8,11 @@ use std::sync::Arc;\n use hir_expand::either::Either;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup};\n+use crate::{\n+    db::DefDatabase,\n+    src::{HasChildSource, HasSource},\n+    AdtId, AstItemDef, AttrDefId, Lookup,\n+};\n \n /// Holds documentation\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "5f648ffc3551967c98a50f5d170b55ad469bf220", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -9,8 +9,9 @@ use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::DefDatabase,\n+    src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, ContainerId, GenericDefId, HasSource, Lookup,\n+    AdtId, AstItemDef, ContainerId, GenericDefId, Lookup,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...)."}, {"sha": "cfeacfded92e91233c26559922f63fab711f814a", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 51, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -29,6 +29,8 @@ pub mod resolver;\n mod trace;\n pub mod nameres;\n \n+pub mod src;\n+\n #[cfg(test)]\n mod test_db;\n #[cfg(test)]\n@@ -37,7 +39,7 @@ mod marks;\n use std::hash::{Hash, Hasher};\n \n use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, InFile, MacroDefId};\n-use ra_arena::{impl_arena_id, map::ArenaMap, RawId};\n+use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n \n@@ -514,53 +516,3 @@ impl HasModule for StaticLoc {\n         self.container\n     }\n }\n-\n-pub trait HasSource {\n-    type Value;\n-    fn source(&self, db: &impl db::DefDatabase) -> InFile<Self::Value>;\n-}\n-\n-impl HasSource for FunctionLoc {\n-    type Value = ast::FnDef;\n-\n-    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::FnDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for TypeAliasLoc {\n-    type Value = ast::TypeAliasDef;\n-\n-    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::TypeAliasDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for ConstLoc {\n-    type Value = ast::ConstDef;\n-\n-    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::ConstDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for StaticLoc {\n-    type Value = ast::StaticDef;\n-\n-    fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::StaticDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-pub trait HasChildSource {\n-    type ChildId;\n-    type Value;\n-    fn child_source(\n-        &self,\n-        db: &impl db::DefDatabase,\n-    ) -> InFile<ArenaMap<Self::ChildId, Self::Value>>;\n-}"}, {"sha": "27caa02cc4f0c364dfe82dc3624a09cef13565b5", "filename": "crates/ra_hir_def/src/src.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -0,0 +1,54 @@\n+//! Utilities for mapping between hir IDs and the surface syntax.\n+\n+use hir_expand::InFile;\n+use ra_arena::map::ArenaMap;\n+use ra_syntax::ast;\n+\n+use crate::{db::DefDatabase, ConstLoc, FunctionLoc, StaticLoc, TypeAliasLoc};\n+\n+pub trait HasSource {\n+    type Value;\n+    fn source(&self, db: &impl DefDatabase) -> InFile<Self::Value>;\n+}\n+\n+impl HasSource for FunctionLoc {\n+    type Value = ast::FnDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::FnDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for TypeAliasLoc {\n+    type Value = ast::TypeAliasDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::TypeAliasDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for ConstLoc {\n+    type Value = ast::ConstDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::ConstDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for StaticLoc {\n+    type Value = ast::StaticDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::StaticDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+pub trait HasChildSource {\n+    type ChildId;\n+    type Value;\n+    fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>>;\n+}"}, {"sha": "f6283ab6db45105e6ee327e66d8a77e8c1706393", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=8f1f5a783a3ffd0afbf5b1fdf22ff9caf7fda928", "patch": "@@ -693,7 +693,7 @@ impl Expectation {\n }\n \n mod diagnostics {\n-    use hir_def::{expr::ExprId, FunctionId, HasSource, Lookup};\n+    use hir_def::{expr::ExprId, src::HasSource, FunctionId, Lookup};\n     use hir_expand::diagnostics::DiagnosticSink;\n \n     use crate::{db::HirDatabase, diagnostics::NoSuchField};"}]}