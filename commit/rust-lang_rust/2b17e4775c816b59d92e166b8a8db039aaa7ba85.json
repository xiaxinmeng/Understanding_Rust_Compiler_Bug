{"sha": "2b17e4775c816b59d92e166b8a8db039aaa7ba85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTdlNDc3NWM4MTZiNTlkOTJlMTY2YjhhOGRiMDM5YWFhN2JhODU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-06-24T19:38:14Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:08:34Z"}, "message": "rustc: Eliminate extra failing case in metadata::loader::crate_from_metas\n\nCloses #2406", "tree": {"sha": "857dbbf387f96144bd34127575c2c43091d38eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857dbbf387f96144bd34127575c2c43091d38eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b17e4775c816b59d92e166b8a8db039aaa7ba85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17e4775c816b59d92e166b8a8db039aaa7ba85", "html_url": "https://github.com/rust-lang/rust/commit/2b17e4775c816b59d92e166b8a8db039aaa7ba85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b17e4775c816b59d92e166b8a8db039aaa7ba85/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2234f61038f5a91fce0d7f4765eec55fc4b0c622", "url": "https://api.github.com/repos/rust-lang/rust/commits/2234f61038f5a91fce0d7f4765eec55fc4b0c622", "html_url": "https://github.com/rust-lang/rust/commit/2234f61038f5a91fce0d7f4765eec55fc4b0c622"}], "stats": {"total": 102, "additions": 50, "deletions": 52}, "files": [{"sha": "17aad969e325c4d43101ea772eb72685c3d5c058", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2b17e4775c816b59d92e166b8a8db039aaa7ba85/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b17e4775c816b59d92e166b8a8db039aaa7ba85/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2b17e4775c816b59d92e166b8a8db039aaa7ba85", "patch": "@@ -89,70 +89,68 @@ fn find_library_crate_aux(\n     filesearch: @filesearch::FileSearch\n ) -> Option<(~str, @~[u8])> {\n     let crate_name = crate_name_from_metas(cx.metas);\n-    let prefix: ~str = prefix + crate_name + \"-\";\n-    let suffix: ~str = /*bad*/copy suffix;\n+    let prefix = prefix + crate_name + \"-\";\n \n     let mut matches = ~[];\n-    filesearch::search(filesearch, |path| {\n+    filesearch::search(filesearch, |path| -> Option<()> {\n         debug!(\"inspecting file %s\", path.to_str());\n-        let f: ~str = path.filename().get();\n-        if !(f.starts_with(prefix) && f.ends_with(suffix)) {\n-            debug!(\"skipping %s, doesn't look like %s*%s\", path.to_str(),\n-                   prefix, suffix);\n-            option::None::<()>\n-        } else {\n-            debug!(\"%s is a candidate\", path.to_str());\n-            match get_metadata_section(cx.os, path) {\n-              option::Some(cvec) => {\n-                if !crate_matches(cvec, cx.metas, cx.hash) {\n-                    debug!(\"skipping %s, metadata doesn't match\",\n-                           path.to_str());\n-                    option::None::<()>\n-                } else {\n-                    debug!(\"found %s with matching metadata\", path.to_str());\n-                    matches.push((path.to_str(), cvec));\n-                    option::None::<()>\n+        match path.filename() {\n+            Some(ref f) if f.starts_with(prefix) && f.ends_with(suffix) => {\n+                debug!(\"%s is a candidate\", path.to_str());\n+                match get_metadata_section(cx.os, path) {\n+                    Some(cvec) =>\n+                        if !crate_matches(cvec, cx.metas, cx.hash) {\n+                            debug!(\"skipping %s, metadata doesn't match\",\n+                                   path.to_str());\n+                            None\n+                        } else {\n+                            debug!(\"found %s with matching metadata\", path.to_str());\n+                            matches.push((path.to_str(), cvec));\n+                            None\n+                        },\n+                    _ => {\n+                        debug!(\"could not load metadata for %s\", path.to_str());\n+                        None\n+                    }\n                 }\n-              }\n-              _ => {\n-                debug!(\"could not load metadata for %s\", path.to_str());\n-                option::None::<()>\n-              }\n             }\n-        }\n-    });\n+            _ => {\n+                debug!(\"skipping %s, doesn't look like %s*%s\", path.to_str(),\n+                       prefix, suffix);\n+                None\n+            }\n+        }});\n \n-    if matches.is_empty() {\n-        None\n-    } else if matches.len() == 1u {\n-        Some(/*bad*/copy matches[0])\n-    } else {\n-        cx.diag.span_err(\n-            cx.span, fmt!(\"multiple matching crates for `%s`\", crate_name));\n-        cx.diag.handler().note(\"candidates:\");\n-        for matches.iter().advance |&(ident, data)| {\n-            cx.diag.handler().note(fmt!(\"path: %s\", ident));\n-            let attrs = decoder::get_crate_attributes(data);\n-            note_linkage_attrs(cx.intr, cx.diag, attrs);\n+    match matches.len() {\n+        0 => None,\n+        1 => Some(matches[0]),\n+        _ => {\n+            cx.diag.span_err(\n+                    cx.span, fmt!(\"multiple matching crates for `%s`\", crate_name));\n+                cx.diag.handler().note(\"candidates:\");\n+                for matches.each |&(ident, data)| {\n+                    cx.diag.handler().note(fmt!(\"path: %s\", ident));\n+                    let attrs = decoder::get_crate_attributes(data);\n+                    note_linkage_attrs(cx.intr, cx.diag, attrs);\n+                }\n+                cx.diag.handler().abort_if_errors();\n+                None\n+            }\n         }\n-        cx.diag.handler().abort_if_errors();\n-        None\n-    }\n }\n \n pub fn crate_name_from_metas(metas: &[@ast::meta_item]) -> @str {\n-    let name_items = attr::find_meta_items_by_name(metas, \"name\");\n-    match name_items.last_opt() {\n-        Some(i) => {\n-            match attr::get_meta_item_value_str(*i) {\n-                Some(n) => n,\n-                // FIXME (#2406): Probably want a warning here since the user\n-                // is using the wrong type of meta item.\n-                _ => fail!()\n-            }\n+    for metas.each |m| {\n+        match m.node {\n+            ast::meta_name_value(s, ref l) if s == @\"name\" =>\n+                match l.node {\n+                    ast::lit_str(s) => return s,\n+                    _ => ()\n+                },\n+            _ => ()\n         }\n-        None => fail!(\"expected to find the crate name\")\n     }\n+    fail!(\"expected to find the crate name\")\n }\n \n pub fn note_linkage_attrs(intr: @ident_interner,"}]}