{"sha": "221c28a08858f07cb3bb830834afd071fec840da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMWMyOGEwODg1OGYwN2NiM2JiODMwODM0YWZkMDcxZmVjODQwZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T02:16:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T02:16:13Z"}, "message": "auto merge of #15781 : alexcrichton/rust/issue-15758, r=bblum\n\nSemaphores are not currently designed to handle this case correctly, leading to\r\nvery strange behavior. Semaphores as written are intended to count *resources*\r\nand it's not possible to have a negative number of resources.\r\n\r\nThis alters the behavior and documentation to note that the task will be failed\r\nif the initial count is 0.\r\n\r\nCloses #15758", "tree": {"sha": "8357d28df633d217c1fd1ee72a1630c9277c335e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8357d28df633d217c1fd1ee72a1630c9277c335e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221c28a08858f07cb3bb830834afd071fec840da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221c28a08858f07cb3bb830834afd071fec840da", "html_url": "https://github.com/rust-lang/rust/commit/221c28a08858f07cb3bb830834afd071fec840da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221c28a08858f07cb3bb830834afd071fec840da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "html_url": "https://github.com/rust-lang/rust/commit/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba"}, {"sha": "3419e20f3b0800d40a4e33d47da7051d142e62ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/3419e20f3b0800d40a4e33d47da7051d142e62ce", "html_url": "https://github.com/rust-lang/rust/commit/3419e20f3b0800d40a4e33d47da7051d142e62ce"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "cb047798946bd461ab0a4fe254d7c1bc7bbddc84", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/221c28a08858f07cb3bb830834afd071fec840da/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c28a08858f07cb3bb830834afd071fec840da/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=221c28a08858f07cb3bb830834afd071fec840da", "patch": "@@ -109,6 +109,8 @@ struct SemGuard<'a, Q> {\n \n impl<Q: Send> Sem<Q> {\n     fn new(count: int, q: Q) -> Sem<Q> {\n+        assert!(count >= 0,\n+                \"semaphores cannot be initialized with negative values\");\n         Sem {\n             lock: mutex::Mutex::new(),\n             inner: Unsafe::new(SemInner {\n@@ -364,6 +366,10 @@ pub struct SemaphoreGuard<'a> {\n \n impl Semaphore {\n     /// Create a new semaphore with the specified count.\n+    ///\n+    /// # Failure\n+    ///\n+    /// This function will fail if `count` is negative.\n     pub fn new(count: int) -> Semaphore {\n         Semaphore { sem: Sem::new(count, ()) }\n     }\n@@ -637,6 +643,11 @@ mod tests {\n         let _g = s.access();\n     }\n     #[test]\n+    #[should_fail]\n+    fn test_sem_basic2() {\n+        Semaphore::new(-1);\n+    }\n+    #[test]\n     fn test_sem_as_mutex() {\n         let s = Arc::new(Semaphore::new(1));\n         let s2 = s.clone();"}]}