{"sha": "5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZmJjNTIwMWM3YmY4MmNhZGQ2OWExYTBjZWE0OWNmZTFlNDExNzI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-12T15:40:22Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-12T15:40:22Z"}, "message": "typeck: report placeholder type error w/out span\n\nThis commit fixes a regression introduced in rust-lang/rust#70369 which\nmeant that an error was not being emitted for invalid placeholder types\nwhen there wasn't a span available.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "ad50ed27ff066e959d733fa956734910c042f014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad50ed27ff066e959d733fa956734910c042f014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8LL+oACgkQJZLnbIc4\nH9lu6RAAvfGpjUpMR/j1VgGm5tzH/rJ7VFXvO8za3zeu0PnxTdipAwHiY3PurdhT\nj+oSOn7lBENeJpeBXMO9XTnX2xbR78+M+BiOP5Txliq+fVtIm9KSlrtSU65EGBzE\nAMMRW7QLtyBcGE2+CLDro3ZoPKDylAdHlLM1f1wJk58k6FnNFPLgezVtQTozsZG8\n0q2+D+cy1wrRcwP/GvyM2QtgOWAcpI6TrRr9KO4tM3vawfb6SQ/OQ2AQhlm4GoAR\nTbxx6d2LLXBMwHFJPinrotOV0eiUgjFMqUvHz/557k2c0Y4JDDZT5uCg9SvhNdVH\nvmZAcbf9yPNROHQW0EVf9Az31Q9j8lNIlEdAdwxDFDIr/Nryc6kH/zRIKMPDS6Lq\nbaAmkYPmgUV7lL3Un+r1ReKhQEN+sd14o5/X9HRWGcTdyXQtGqSQk9+YFLbt+6Pj\nKOiOM2c1dAQFcJPca6zLBQ6JM0lQipx/mlv1YaqWx0gvOU4zcQwM5LLkUfBBYUUI\nnQpCATe0DkFdXkb+H2d/vd7b8AmNFT75aG0QX644NlOdALZdRp7wrCrdMegn9sHx\nDuDelwaSdglMErvdVOqbYdwYBCMlEtashbYVAFZSm+QDhV8c2OylSYCDsNuihc3z\np8NPWtMDOTMW5DwcvIUG5luc0Q1Uzl5gY3tGylhKakPhbFIx9ms=\n=GEiz\n-----END PGP SIGNATURE-----", "payload": "tree ad50ed27ff066e959d733fa956734910c042f014\nparent 346aec9b02f3c74f3fce97fd6bda24709d220e49\nauthor David Wood <david@davidtw.co> 1594568422 +0100\ncommitter David Wood <david@davidtw.co> 1594568422 +0100\n\ntypeck: report placeholder type error w/out span\n\nThis commit fixes a regression introduced in rust-lang/rust#70369 which\nmeant that an error was not being emitted for invalid placeholder types\nwhen there wasn't a span available.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "html_url": "https://github.com/rust-lang/rust/commit/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346aec9b02f3c74f3fce97fd6bda24709d220e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/346aec9b02f3c74f3fce97fd6bda24709d220e49", "html_url": "https://github.com/rust-lang/rust/commit/346aec9b02f3c74f3fce97fd6bda24709d220e49"}], "stats": {"total": 166, "additions": 103, "deletions": 63}, "files": [{"sha": "7581940b6ac6912e0b5693af3fe8b771ad98bd88", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -3049,14 +3049,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bare_fn_ty =\n             ty::Binder::bind(tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi));\n \n-        if let (false, Some(ident_span)) = (self.allow_ty_infer(), ident_span) {\n+        if !self.allow_ty_infer() {\n             // We always collect the spans for placeholder types when evaluating `fn`s, but we\n             // only want to emit an error complaining about them if infer types (`_`) are not\n             // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n             // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n             crate::collect::placeholder_type_error(\n                 tcx,\n-                ident_span.shrink_to_hi(),\n+                ident_span.map(|sp| sp.shrink_to_hi()),\n                 &generics.params[..],\n                 visitor.0,\n                 true,"}, {"sha": "625b72091a6cc167307336d2969ae33e4ab24616", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -129,20 +129,23 @@ struct CollectItemTypesVisitor<'tcx> {\n /// all already existing generic type parameters to avoid suggesting a name that is already in use.\n crate fn placeholder_type_error(\n     tcx: TyCtxt<'tcx>,\n-    span: Span,\n+    span: Option<Span>,\n     generics: &[hir::GenericParam<'_>],\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n ) {\n     if placeholder_types.is_empty() {\n         return;\n     }\n-    let type_name = generics.next_type_param_name(None);\n \n+    let type_name = generics.next_type_param_name(None);\n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();\n+\n     if generics.is_empty() {\n-        sugg.push((span, format!(\"<{}>\", type_name)));\n+        if let Some(span) = span {\n+            sugg.push((span, format!(\"<{}>\", type_name)));\n+        }\n     } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n         hir::ParamName::Plain(Ident { name: kw::Underscore, .. }) => true,\n         _ => false,\n@@ -158,6 +161,7 @@ crate fn placeholder_type_error(\n             format!(\", {}\", type_name),\n         ));\n     }\n+\n     let mut err = bad_placeholder_type(tcx, placeholder_types);\n     if suggest {\n         err.multipart_suggestion(\n@@ -186,7 +190,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, generics.span, &generics.params[..], visitor.0, suggest);\n+    placeholder_type_error(tcx, Some(generics.span), &generics.params[..], visitor.0, suggest);\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -722,7 +726,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n             // Account for `const C: _;` and `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, DUMMY_SP, &[], visitor.0, false);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false);\n         }\n \n         hir::TraitItemKind::Type(_, None) => {}\n@@ -745,7 +749,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n             // Account for `type T = _;`\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_impl_item(impl_item);\n-            placeholder_type_error(tcx, DUMMY_SP, &[], visitor.0, false);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false);\n         }\n         hir::ImplItemKind::Const(..) => {}\n     }"}, {"sha": "f68a665b2f38d949507c63253ba0c3a0fca81268", "filename": "src/test/ui/issues/issue-74086.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Fissues%2Fissue-74086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Fissues%2Fissue-74086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74086.rs?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    static BUG: fn(_) -> u8 = |_| 8;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+}"}, {"sha": "4127f48a093f478f7884cad515eba50f04f6c505", "filename": "src/test/ui/issues/issue-74086.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-74086.rs:2:20\n+   |\n+LL |     static BUG: fn(_) -> u8 = |_| 8;\n+   |                    ^\n+   |                    |\n+   |                    not allowed in type signatures\n+   |                    help: use type parameters instead: `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "133c5231031fd65a8d86b67159828b3b539d8362", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -32,6 +32,7 @@ fn test7(x: _) { let _x: usize = x; }\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n@@ -98,6 +99,7 @@ pub fn main() {\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n "}, {"sha": "a1945f2b9cf4e88b314f5d395d555a76f3a1ced4", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 73, "deletions": 55, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5afbc5201c7bf82cadd69a1a0cea49cfe1e41172/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=5afbc5201c7bf82cadd69a1a0cea49cfe1e41172", "patch": "@@ -1,43 +1,43 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:152:18\n+  --> $DIR/typeck_type_placeholder_item.rs:154:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:155:16\n+  --> $DIR/typeck_type_placeholder_item.rs:157:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:165:19\n+  --> $DIR/typeck_type_placeholder_item.rs:167:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:165:22\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:170:19\n+  --> $DIR/typeck_type_placeholder_item.rs:172:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:201:5\n+  --> $DIR/typeck_type_placeholder_item.rs:203:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:165:22\n+  --> $DIR/typeck_type_placeholder_item.rs:167:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -131,6 +131,15 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:33:22\n+   |\n+LL | fn test8(_f: fn() -> _) { }\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: use type parameters instead: `T`\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:33:22\n    |\n@@ -143,7 +152,7 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:46:26\n+  --> $DIR/typeck_type_placeholder_item.rs:47:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n    |                         -^\n@@ -152,7 +161,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         help: replace with the correct return type: `&&usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:51:52\n+  --> $DIR/typeck_type_placeholder_item.rs:52:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      --------------^\n@@ -161,7 +170,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:65:8\n+  --> $DIR/typeck_type_placeholder_item.rs:66:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n@@ -180,13 +189,13 @@ LL |     b: (T, T),\n    |\n \n error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:71:12\n+  --> $DIR/typeck_type_placeholder_item.rs:72:12\n    |\n LL |     static A = 42;\n    |            ^ help: provide a type for the item: `A: i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:73:15\n+  --> $DIR/typeck_type_placeholder_item.rs:74:15\n    |\n LL |     static B: _ = 42;\n    |               ^\n@@ -195,13 +204,13 @@ LL |     static B: _ = 42;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:75:15\n+  --> $DIR/typeck_type_placeholder_item.rs:76:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:78:21\n+  --> $DIR/typeck_type_placeholder_item.rs:79:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -210,7 +219,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:81:23\n+  --> $DIR/typeck_type_placeholder_item.rs:82:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -220,7 +229,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:84:22\n+  --> $DIR/typeck_type_placeholder_item.rs:85:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -229,7 +238,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:87:22\n+  --> $DIR/typeck_type_placeholder_item.rs:88:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -238,13 +247,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:90:22\n+  --> $DIR/typeck_type_placeholder_item.rs:91:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:93:20\n+  --> $DIR/typeck_type_placeholder_item.rs:94:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -255,7 +264,7 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:96:20\n+  --> $DIR/typeck_type_placeholder_item.rs:97:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -266,7 +275,16 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:99:29\n+  --> $DIR/typeck_type_placeholder_item.rs:100:29\n+   |\n+LL |     fn fn_test8(_f: fn() -> _) { }\n+   |                             ^\n+   |                             |\n+   |                             not allowed in type signatures\n+   |                             help: use type parameters instead: `T`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:100:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -277,7 +295,7 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:121:12\n+  --> $DIR/typeck_type_placeholder_item.rs:123:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -296,21 +314,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:126:18\n+  --> $DIR/typeck_type_placeholder_item.rs:128:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:126:28\n+  --> $DIR/typeck_type_placeholder_item.rs:128:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:130:30\n+  --> $DIR/typeck_type_placeholder_item.rs:132:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -320,7 +338,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:133:33\n+  --> $DIR/typeck_type_placeholder_item.rs:135:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n@@ -329,7 +347,7 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:152:21\n+  --> $DIR/typeck_type_placeholder_item.rs:154:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -340,7 +358,7 @@ LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:157:15\n+  --> $DIR/typeck_type_placeholder_item.rs:159:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -353,13 +371,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:160:34\n+  --> $DIR/typeck_type_placeholder_item.rs:162:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:165:25\n+  --> $DIR/typeck_type_placeholder_item.rs:167:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -370,7 +388,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:170:25\n+  --> $DIR/typeck_type_placeholder_item.rs:172:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -381,13 +399,13 @@ LL | struct BadStruct2<U, T>(U, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:174:14\n+  --> $DIR/typeck_type_placeholder_item.rs:176:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:42:27\n+  --> $DIR/typeck_type_placeholder_item.rs:43:27\n    |\n LL |     fn test10(&self, _x : _) { }\n    |                           ^ not allowed in type signatures\n@@ -398,7 +416,7 @@ LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:138:31\n+  --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -409,7 +427,7 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:140:31\n+  --> $DIR/typeck_type_placeholder_item.rs:142:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -422,7 +440,7 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:142:31\n+  --> $DIR/typeck_type_placeholder_item.rs:144:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -433,7 +451,7 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:144:26\n+  --> $DIR/typeck_type_placeholder_item.rs:146:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -444,7 +462,7 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:146:26\n+  --> $DIR/typeck_type_placeholder_item.rs:148:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -457,7 +475,7 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:148:28\n+  --> $DIR/typeck_type_placeholder_item.rs:150:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -468,7 +486,7 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:60:37\n+  --> $DIR/typeck_type_placeholder_item.rs:61:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n@@ -479,7 +497,7 @@ LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:108:34\n+  --> $DIR/typeck_type_placeholder_item.rs:110:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -490,7 +508,7 @@ LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:116:41\n+  --> $DIR/typeck_type_placeholder_item.rs:118:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -501,25 +519,25 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:180:21\n+  --> $DIR/typeck_type_placeholder_item.rs:182:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:188:14\n+  --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:190:14\n+  --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:192:14\n+  --> $DIR/typeck_type_placeholder_item.rs:194:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n@@ -528,7 +546,7 @@ LL |     const D: _ = 42;\n    |              help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:39:24\n+  --> $DIR/typeck_type_placeholder_item.rs:40:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n@@ -537,7 +555,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:57:24\n+  --> $DIR/typeck_type_placeholder_item.rs:58:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n@@ -546,7 +564,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:105:31\n+  --> $DIR/typeck_type_placeholder_item.rs:107:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -555,7 +573,7 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:113:28\n+  --> $DIR/typeck_type_placeholder_item.rs:115:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n@@ -564,33 +582,33 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:197:14\n+  --> $DIR/typeck_type_placeholder_item.rs:199:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:199:14\n+  --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:201:14\n+  --> $DIR/typeck_type_placeholder_item.rs:203:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:204:14\n+  --> $DIR/typeck_type_placeholder_item.rs:206:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 64 previous errors\n+error: aborting due to 66 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}