{"sha": "7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjk1ODdhM2NlNGM2ODlmN2NhYjNhYTUxMTJhYWQ5ZDQyMTMwMWY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T18:08:43Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Return `true` if `check_const` emits an error", "tree": {"sha": "6e560c489f2b3587a3864c2752884463d7ba99c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e560c489f2b3587a3864c2752884463d7ba99c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "html_url": "https://github.com/rust-lang/rust/commit/7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb9587a3ce4c689f7cab3aa5112aad9d421301f/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "html_url": "https://github.com/rust-lang/rust/commit/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "66b81b3d111fcd10c84772e1e8f7a5d03f8c1b10", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fb9587a3ce4c689f7cab3aa5112aad9d421301f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb9587a3ce4c689f7cab3aa5112aad9d421301f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "patch": "@@ -10,31 +10,34 @@ use rustc_span::{Span, Symbol};\n \n use super::ConstCx;\n \n-/// Emits an error if `op` is not allowed in the given const context.\n-pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) {\n+/// Emits an error and returns `true` if `op` is not allowed in the given const context.\n+pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) -> bool {\n     debug!(\"illegal_op: op={:?}\", op);\n \n     let gate = match op.status_in_item(ccx) {\n-        Status::Allowed => return,\n+        Status::Allowed => return false,\n \n         Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => {\n             let unstable_in_stable = ccx.is_const_stable_const_fn()\n                 && !super::allow_internal_unstable(ccx.tcx, ccx.def_id.to_def_id(), gate);\n \n             if unstable_in_stable {\n                 ccx.tcx.sess\n-                    .struct_span_err(span, &format!(\"`#[feature({})]` cannot be depended on in a const-stable function\", gate.as_str()))\n+                    .struct_span_err(\n+                        span,\n+                        &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n+                    )\n                     .span_suggestion(\n                         ccx.body.span,\n                         \"if it is not part of the public API, make this function unstably const\",\n                         concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n                         Applicability::HasPlaceholders,\n                     )\n-                    .help(\"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\")\n+                    .note(\"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\")\n                     .emit();\n             }\n \n-            return;\n+            return unstable_in_stable;\n         }\n \n         Status::Unstable(gate) => Some(gate),\n@@ -43,10 +46,11 @@ pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) {\n \n     if ccx.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n         ccx.tcx.sess.miri_unleashed_feature(span, gate);\n-        return;\n+        return false;\n     }\n \n     op.emit_error(ccx, span);\n+    true\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]"}]}