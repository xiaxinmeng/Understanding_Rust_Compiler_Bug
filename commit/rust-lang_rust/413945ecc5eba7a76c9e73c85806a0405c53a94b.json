{"sha": "413945ecc5eba7a76c9e73c85806a0405c53a94b", "node_id": "C_kwDOAAsO6NoAKDQxMzk0NWVjYzVlYmE3YTc2YzllNzNjODU4MDZhMDQwNWM1M2E5NGI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-02-02T05:53:30Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-02-07T20:57:25Z"}, "message": "Change `ResultShunt` to be generic over `Try`\n\nJust a refactor (and rename) for now, so it's not `Result`-specific.\n\nThis could be used for a future `Iterator::try_collect`, or similar, but anything like that is left for a future PR.", "tree": {"sha": "5daa679082f4178a82640be09eae2cdc54d7af40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5daa679082f4178a82640be09eae2cdc54d7af40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413945ecc5eba7a76c9e73c85806a0405c53a94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413945ecc5eba7a76c9e73c85806a0405c53a94b", "html_url": "https://github.com/rust-lang/rust/commit/413945ecc5eba7a76c9e73c85806a0405c53a94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413945ecc5eba7a76c9e73c85806a0405c53a94b/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52c31840df7ec9c9350baff51a8964b20b5e1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52c31840df7ec9c9350baff51a8964b20b5e1ba", "html_url": "https://github.com/rust-lang/rust/commit/f52c31840df7ec9c9350baff51a8964b20b5e1ba"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "2ae92e89d63b51662d9790e612c4254a051cefc0", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{InPlaceIterable, Iterator};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n \n mod chain;\n mod cloned;\n@@ -128,59 +128,62 @@ pub unsafe trait SourceIter {\n }\n \n /// An iterator adapter that produces output as long as the underlying\n-/// iterator produces `Result::Ok` values.\n+/// iterator produces values where `Try::branch` says to `ControlFlow::Continue`.\n ///\n-/// If an error is encountered, the iterator stops and the error is\n-/// stored.\n-pub(crate) struct ResultShunt<'a, I, E> {\n+/// If a `ControlFlow::Break` is encountered, the iterator stops and the\n+/// residual is stored.\n+pub(crate) struct GenericShunt<'a, I, R> {\n     iter: I,\n-    error: &'a mut Result<(), E>,\n+    residual: &'a mut Option<R>,\n }\n \n-/// Process the given iterator as if it yielded a `T` instead of a\n-/// `Result<T, _>`. Any errors will stop the inner iterator and\n-/// the overall result will be an error.\n-pub(crate) fn process_results<I, T, E, F, U>(iter: I, mut f: F) -> Result<U, E>\n+/// Process the given iterator as if it yielded a the item's `Try::Output`\n+/// type instead. Any `Try::Residual`s encountered will stop the inner iterator\n+/// and be propagated back to the overall result.\n+pub(crate) fn try_process<I, T, R, F, U>(iter: I, mut f: F) -> ChangeOutputType<I::Item, U>\n where\n-    I: Iterator<Item = Result<T, E>>,\n-    for<'a> F: FnMut(ResultShunt<'a, I, E>) -> U,\n+    I: Iterator<Item: Try<Output = T, Residual = R>>,\n+    for<'a> F: FnMut(GenericShunt<'a, I, R>) -> U,\n+    R: Residual<U>,\n {\n-    let mut error = Ok(());\n-    let shunt = ResultShunt { iter, error: &mut error };\n+    let mut residual = None;\n+    let shunt = GenericShunt { iter, residual: &mut residual };\n     let value = f(shunt);\n-    error.map(|()| value)\n+    match residual {\n+        Some(r) => FromResidual::from_residual(r),\n+        None => Try::from_output(value),\n+    }\n }\n \n-impl<I, T, E> Iterator for ResultShunt<'_, I, E>\n+impl<I, R> Iterator for GenericShunt<'_, I, R>\n where\n-    I: Iterator<Item = Result<T, E>>,\n+    I: Iterator<Item: Try<Residual = R>>,\n {\n-    type Item = T;\n+    type Item = <I::Item as Try>::Output;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        self.find(|_| true)\n+        self.try_for_each(ControlFlow::Break).break_value()\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.error.is_err() {\n+        if self.residual.is_some() {\n             (0, Some(0))\n         } else {\n             let (_, upper) = self.iter.size_hint();\n             (0, upper)\n         }\n     }\n \n-    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    fn try_fold<B, F, T>(&mut self, init: B, mut f: F) -> T\n     where\n-        F: FnMut(B, Self::Item) -> R,\n-        R: Try<Output = B>,\n+        F: FnMut(B, Self::Item) -> T,\n+        T: Try<Output = B>,\n     {\n-        let error = &mut *self.error;\n         self.iter\n-            .try_fold(init, |acc, x| match x {\n-                Ok(x) => ControlFlow::from_try(f(acc, x)),\n-                Err(e) => {\n-                    *error = Err(e);\n+            .try_fold(init, |acc, x| match Try::branch(x) {\n+                ControlFlow::Continue(x) => ControlFlow::from_try(f(acc, x)),\n+                ControlFlow::Break(r) => {\n+                    *self.residual = Some(r);\n                     ControlFlow::Break(try { acc })\n                 }\n             })\n@@ -192,17 +195,12 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(fold)).unwrap()\n+        self.try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n     }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<I, E> SourceIter for ResultShunt<'_, I, E>\n+unsafe impl<I, R> SourceIter for GenericShunt<'_, I, R>\n where\n     I: SourceIter,\n {\n@@ -215,11 +213,11 @@ where\n     }\n }\n \n-// SAFETY: ResultShunt::next calls I::find, which has to advance `iter` in order to\n-// return `Some(_)`. Since `iter` has type `I: InPlaceIterable` it's guaranteed that\n-// at least one item will be moved out from the underlying source.\n+// SAFETY: GenericShunt::next calls `I::try_for_each`, which has to advance `iter`\n+// in order to return `Some(_)`. Since `iter` has type `I: InPlaceIterable` it's\n+// guaranteed that at least one item will be moved out from the underlying source.\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<I, T, E> InPlaceIterable for ResultShunt<'_, I, E> where\n-    I: Iterator<Item = Result<T, E>> + InPlaceIterable\n+unsafe impl<I, T, R> InPlaceIterable for GenericShunt<'_, I, R> where\n+    I: Iterator<Item: Try<Output = T, Residual = R>> + InPlaceIterable\n {\n }"}, {"sha": "65f56f64dbfa63ab850ed3b696d857ec4320b154", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -417,7 +417,7 @@ pub use self::adapters::{\n #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n pub use self::adapters::{Intersperse, IntersperseWith};\n \n-pub(crate) use self::adapters::process_results;\n+pub(crate) use self::adapters::try_process;\n \n mod adapters;\n mod range;"}, {"sha": "84d83ee39699fe1841149b00e0c929389a1a7bc3", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -167,7 +167,7 @@ where\n     where\n         I: Iterator<Item = Result<U, E>>,\n     {\n-        iter::process_results(iter, |i| i.sum())\n+        iter::try_process(iter, |i| i.sum())\n     }\n }\n \n@@ -183,7 +183,7 @@ where\n     where\n         I: Iterator<Item = Result<U, E>>,\n     {\n-        iter::process_results(iter, |i| i.product())\n+        iter::try_process(iter, |i| i.product())\n     }\n }\n \n@@ -210,7 +210,7 @@ where\n     where\n         I: Iterator<Item = Option<U>>,\n     {\n-        iter.map(|x| x.ok_or(())).sum::<Result<_, _>>().ok()\n+        iter::try_process(iter, |i| i.sum())\n     }\n }\n \n@@ -226,6 +226,6 @@ where\n     where\n         I: Iterator<Item = Option<U>>,\n     {\n-        iter.map(|x| x.ok_or(())).product::<Result<_, _>>().ok()\n+        iter::try_process(iter, |i| i.product())\n     }\n }"}, {"sha": "eac426ad31164e561dfe286f59bf57a36370c367", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -359,6 +359,14 @@ pub(crate) type ChangeOutputType<T, V> = <<T as Try>::Residual as Residual<V>>::\n #[repr(transparent)]\n pub(crate) struct NeverShortCircuit<T>(pub T);\n \n+impl<T> NeverShortCircuit<T> {\n+    /// Wrap a binary `FnMut` to return its result wrapped in a `NeverShortCircuit`.\n+    #[inline]\n+    pub fn wrap_mut_2<A, B>(mut f: impl FnMut(A, B) -> T) -> impl FnMut(A, B) -> Self {\n+        move |a, b| NeverShortCircuit(f(a, b))\n+    }\n+}\n+\n pub(crate) enum NeverShortCircuitResidual {}\n \n impl<T> Try for NeverShortCircuit<T> {"}, {"sha": "ec04692d3e0c8015916bad6249fe91ee0e76442e", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -500,7 +500,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n+use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n use crate::panicking::{panic, panic_str};\n use crate::pin::Pin;\n use crate::{\n@@ -2233,7 +2233,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this\n         // performance bug is closed.\n \n-        iter.into_iter().map(|x| x.ok_or(())).collect::<Result<_, _>>().ok()\n+        iter::try_process(iter.into_iter(), |i| i.collect())\n     }\n }\n "}, {"sha": "05b4fa035b1aefb5c15faaf8d00a6e8385068911", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413945ecc5eba7a76c9e73c85806a0405c53a94b/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=413945ecc5eba7a76c9e73c85806a0405c53a94b", "patch": "@@ -2016,7 +2016,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this\n         // performance bug is closed.\n \n-        iter::process_results(iter.into_iter(), |i| i.collect())\n+        iter::try_process(iter.into_iter(), |i| i.collect())\n     }\n }\n "}]}