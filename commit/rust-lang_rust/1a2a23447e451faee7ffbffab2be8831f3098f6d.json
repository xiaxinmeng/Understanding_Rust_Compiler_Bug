{"sha": "1a2a23447e451faee7ffbffab2be8831f3098f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMmEyMzQ0N2U0NTFmYWVlN2ZmYmZmYWIyYmU4ODMxZjMwOThmNmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-08T19:24:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-04T23:19:56Z"}, "message": "Stabilize attributes on generic parameters", "tree": {"sha": "e338e0d07dea5b0ca852969f34d16c55fa4978f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e338e0d07dea5b0ca852969f34d16c55fa4978f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2a23447e451faee7ffbffab2be8831f3098f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2a23447e451faee7ffbffab2be8831f3098f6d", "html_url": "https://github.com/rust-lang/rust/commit/1a2a23447e451faee7ffbffab2be8831f3098f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2a23447e451faee7ffbffab2be8831f3098f6d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "html_url": "https://github.com/rust-lang/rust/commit/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be"}], "stats": {"total": 289, "additions": 45, "deletions": 244}, "files": [{"sha": "cbbea6c19c8d6fa5b803160f88cbff9a7249d7e9", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -97,7 +97,7 @@\n #![feature(fmt_internals)]\n #![feature(from_ref)]\n #![feature(fundamental)]\n-#![feature(generic_param_attrs)]\n+#![cfg_attr(stage0, feature(generic_param_attrs))]\n #![cfg_attr(stage0, feature(i128_type))]\n #![feature(iter_rfold)]\n #![feature(lang_items)]"}, {"sha": "7eaf67e6ea66e30b991651b769f13f92d068f4a0", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -27,7 +27,7 @@\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![feature(generic_param_attrs)]\n+#![cfg_attr(stage0, feature(generic_param_attrs))]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]"}, {"sha": "79d7c8e72821047794c2617e280d0e17413b0df0", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -3784,7 +3784,6 @@ that impl must be declared as an `unsafe impl.\n Erroneous code example:\n \n ```compile_fail,E0569\n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n struct Foo<X>(X);"}, {"sha": "3f1fec4c3177d9d8473b32c568474a13c8d938f3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -266,7 +266,7 @@\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n-#![feature(generic_param_attrs)]\n+#![cfg_attr(stage0, feature(generic_param_attrs))]\n #![feature(hashmap_internals)]\n #![feature(heap_api)]\n #![cfg_attr(stage0, feature(i128_type, i128))]"}, {"sha": "1cf62a8bf33f28f6a9020df135b918cbe82f3e4c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -288,9 +288,6 @@ declare_features! (\n     // rustc internal\n     (active, compiler_builtins, \"1.13.0\", None, None),\n \n-    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (active, generic_param_attrs, \"1.11.0\", Some(34761), None),\n-\n     // Allows #[link(..., cfg(..))]\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n@@ -566,6 +563,8 @@ declare_features! (\n     (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n     // allow `'_` placeholder lifetimes\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n+    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n+    (accepted, generic_param_attrs, \"1.26.0\", Some(48848), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1775,21 +1774,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n         visit::walk_vis(self, vis);\n     }\n-\n-    fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n-        let (attrs, explain) = match *param {\n-            ast::GenericParam::Lifetime(ref ld) =>\n-                (&ld.attrs, \"attributes on lifetime bindings are experimental\"),\n-            ast::GenericParam::Type(ref t) =>\n-                (&t.attrs, \"attributes on type parameter bindings are experimental\"),\n-        };\n-\n-        if !attrs.is_empty() {\n-            gate_feature_post!(&self, generic_param_attrs, attrs[0].span, explain);\n-        }\n-\n-        visit::walk_generic_param(self, param)\n-    }\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],"}, {"sha": "ec7885f1f44f97c68bfcd6ac3ad04b757eae9e2b", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -12,8 +12,7 @@\n // `#[oops]` is left dangling (that is, it is unattached, with no\n // formal binding following it).\n \n-#![feature(generic_param_attrs, rustc_attrs)]\n-#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n \n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n "}, {"sha": "efe2d5561a832b5acedfb04da1a94035104faf4d", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -12,8 +12,7 @@\n // `#[oops]` is left dangling (that is, it is unattached, with no\n // formal binding following it).\n \n-#![feature(generic_param_attrs, rustc_attrs)]\n-#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n \n struct RefAny<'a, T>(&'a T);\n "}, {"sha": "337cae1369ee27c1928ac27eaed9bca959cc192b", "filename": "src/test/compile-fail/synthetic-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsynthetic-param.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs, rustc_attrs)]\n+#![feature(rustc_attrs)]\n \n fn func<#[rustc_synthetic] T>(_: T) {}\n "}, {"sha": "e189f2e3b34a304a67cd0b810ff427d4ea8601f5", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -14,7 +14,6 @@\n // A scenario with significant destruction code extents (which have\n // suffix \"dce\" in current `-Z identify_regions` rendering).\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n fn main() {"}, {"sha": "e87b9e3d82a24ae3fba6d98647dbf8b93d4d6ba6", "filename": "src/test/run-pass/attr-on-generic-formals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -17,7 +17,7 @@\n // using `rustc_attrs` feature. There is a separate compile-fail/ test\n // ensuring that the attribute feature-gating works in this context.)\n \n-#![feature(generic_param_attrs, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n struct StLt<#[rustc_lt_struct] 'a>(&'a u32);"}, {"sha": "d89129434411520827d2c7896b199d090b712b67", "filename": "src/test/run-pass/auxiliary/dropck_eyepatch_extern_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // The point of this test is to illustrate that the `#[may_dangle]`"}, {"sha": "a99a7232e9ebc6d51b67d43870358822a0d40810", "filename": "src/test/run-pass/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck-eyepatch-reorder.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // The point of this test is to test uses of `#[may_dangle]` attribute"}, {"sha": "c0c091d78eb16dd688aba30a7f9bcc9bbf7ea786", "filename": "src/test/run-pass/dropck-eyepatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Frun-pass%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck-eyepatch.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // The point of this test is to illustrate that the `#[may_dangle]`"}, {"sha": "08722ca62ac4197eaffec3b378048dfc1e4e1349", "filename": "src/test/ui/dropck/auxiliary/dropck_eyepatch_extern_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fauxiliary%2Fdropck_eyepatch_extern_crate.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // This is a support file for ../dropck-eyepatch-extern-crate.rs"}, {"sha": "cba438b02a922f529bca5448df040ee01130d5c4", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // This test ensures that a use of `#[may_dangle]` is rejected if"}, {"sha": "9d68ff13ef343db88c04d7a449c7bed4631d892d", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,5 +1,5 @@\n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n-  --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:32:1\n+  --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:31:1\n    |\n LL | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n@@ -10,7 +10,7 @@ LL | | }\n    | |_^\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n-  --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:38:1\n+  --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:37:1\n    |\n LL | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute"}, {"sha": "eda8d85f6ec952c4a38f28126b0e3d7d5d7ff52b", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // The point of this test is to test uses of `#[may_dangle]` attribute"}, {"sha": "1a35996a0cadb57917dbfbedc8211a773bf1df6d", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:57:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:56:20\n    |\n LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:59:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:58:20\n    |\n LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:67:29\n+  --> $DIR/dropck-eyepatch-reorder.rs:66:29\n    |\n LL |     pt = Pt(\"pt\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:69:29\n+  --> $DIR/dropck-eyepatch-reorder.rs:68:29\n    |\n LL |     pr = Pr(\"pr\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough"}, {"sha": "af173a2e97916610e34298331856ae9bb8e34440", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_param_attrs)]\n #![feature(dropck_eyepatch)]\n \n // The point of this test is to illustrate that the `#[may_dangle]`"}, {"sha": "4d291642022939b5d5e531b65547202b81742117", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:80:20\n+  --> $DIR/dropck-eyepatch.rs:79:20\n    |\n LL |     dt = Dt(\"dt\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:82:20\n+  --> $DIR/dropck-eyepatch.rs:81:20\n    |\n LL |     dr = Dr(\"dr\", &c);\n    |                    ^ borrowed value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:90:29\n+  --> $DIR/dropck-eyepatch.rs:89:29\n    |\n LL |     pt = Pt(\"pt\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:92:29\n+  --> $DIR/dropck-eyepatch.rs:91:29\n    |\n LL |     pr = Pr(\"pr\", &c_long, &c);\n    |                             ^ borrowed value does not live long enough"}, {"sha": "30fd89f091b47443164f956bb93f54eadef3e7d4", "filename": "src/test/ui/feature-gate-custom_attribute2.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -10,16 +10,9 @@\n \n // This test ensures that attributes on formals in generic parameter\n // lists are included when we are checking for unstable attributes.\n-//\n-// Note that feature(generic_param_attrs) *is* enabled here. We are\n-// checking feature-gating of the attributes themselves, not the\n-// capability to parse such attributes in that context.\n \n // gate-test-custom_attribute\n \n-#![feature(generic_param_attrs)]\n-#![allow(dead_code)]\n-\n struct StLt<#[lt_struct] 'a>(&'a u32);\n //~^ ERROR The attribute `lt_struct` is currently unknown to the compiler\n struct StTy<#[ty_struct] I>(I);"}, {"sha": "1c1f50366d64c8c81d4fa1f9c17411fe43036b1b", "filename": "src/test/ui/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,133 +1,133 @@\n error[E0658]: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:16:13\n    |\n LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n    |             ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:25:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:18:13\n    |\n LL | struct StTy<#[ty_struct] I>(I);\n    |             ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:28:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:21:11\n    |\n LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:30:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:23:11\n    |\n LL | enum EnTy<#[ty_enum] J> { A(J), B }\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:33:12\n+  --> $DIR/feature-gate-custom_attribute2.rs:26:12\n    |\n LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |            ^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:35:12\n+  --> $DIR/feature-gate-custom_attribute2.rs:28:12\n    |\n LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    |            ^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:31:11\n    |\n LL | type TyLt<#[lt_type] 'd> = &'d u32;\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:11\n    |\n LL | type TyTy<#[ty_type] L> = (L, );\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:43:6\n+  --> $DIR/feature-gate-custom_attribute2.rs:36:6\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:45:6\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:6\n    |\n LL | impl<#[ty_inherent] M> StTy<M> { }\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:48:6\n+  --> $DIR/feature-gate-custom_attribute2.rs:41:6\n    |\n LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:52:6\n+  --> $DIR/feature-gate-custom_attribute2.rs:45:6\n    |\n LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:57:9\n+  --> $DIR/feature-gate-custom_attribute2.rs:50:9\n    |\n LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |         ^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:59:9\n+  --> $DIR/feature-gate-custom_attribute2.rs:52:9\n    |\n LL | fn f_ty<#[ty_fn] O>(_: O) { }\n    |         ^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:63:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:56:13\n    |\n LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |             ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:65:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:58:13\n    |\n LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n    |             ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute2.rs:70:19\n+  --> $DIR/feature-gate-custom_attribute2.rs:63:19\n    |\n LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n    |                   ^^^^^^^^^"}, {"sha": "7b449242c326c6ae83cd8539e62aa4d9b45e7cc0", "filename": "src/test/ui/feature-gate-generic_param_attrs.stderr", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr?ref=fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "patch": "@@ -1,139 +0,0 @@\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:22:13\n-   |\n-LL | struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:24:13\n-   |\n-LL | struct StTy<#[rustc_ty_struct] I>(I);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:27:11\n-   |\n-LL | enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:29:11\n-   |\n-LL | enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:32:12\n-   |\n-LL | trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:34:12\n-   |\n-LL | trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:37:11\n-   |\n-LL | type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:39:11\n-   |\n-LL | type TyTy<#[rustc_ty_type] L> = (L, );\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:42:6\n-   |\n-LL | impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n-   |      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:44:6\n-   |\n-LL | impl<#[rustc_ty_inherent] M> StTy<M> { }\n-   |      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:47:6\n-   |\n-LL | impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-   |      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:51:6\n-   |\n-LL | impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n-   |      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:56:9\n-   |\n-LL | fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:58:9\n-   |\n-LL | fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:62:13\n-   |\n-LL |     fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-   |             ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:64:13\n-   |\n-LL |     fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n-   |             ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n-  --> $DIR/feature-gate-generic_param_attrs.rs:69:19\n-   |\n-LL |     where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-   |                   ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n-\n-error: aborting due to 17 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a67ece0448838291e91225b420a6b3c995e2c40b", "filename": "src/test/ui/feature-gate-may-dangle.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -12,8 +12,6 @@\n \n // Check that `may_dangle` is rejected if `dropck_eyepatch` feature gate is absent.\n \n-#![feature(generic_param_attrs)]\n-\n struct Pt<A>(A);\n impl<#[may_dangle] A> Drop for Pt<A> {\n     //~^ ERROR may_dangle has unstable semantics and may be removed in the future"}, {"sha": "aad725dfe65ec974e137a0b71ef9bb9dd19a6e9c", "filename": "src/test/ui/feature-gate-may-dangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n-  --> $DIR/feature-gate-may-dangle.rs:18:6\n+  --> $DIR/feature-gate-may-dangle.rs:16:6\n    |\n LL | impl<#[may_dangle] A> Drop for Pt<A> {\n    |      ^^^^^^^^^^^^^"}, {"sha": "37fabcd7e1e90f3cdf4b0512754e210fcc597eb1", "filename": "src/test/ui/generic-param-attrs.rs", "status": "renamed", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fgeneric-param-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fgeneric-param-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-param-attrs.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -8,69 +8,47 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This test ensures that attributes on formals in generic parameter\n-// lists are rejected if feature(generic_param_attrs) is not enabled.\n+// This test previously ensured that attributes on formals in generic parameter\n+// lists are rejected without a feature gate.\n //\n // (We are prefixing all tested features with `rustc_`, to ensure that\n // the attributes themselves won't be rejected by the compiler when\n // using `rustc_attrs` feature. There is a separate compile-fail/ test\n // ensuring that the attribute feature-gating works in this context.)\n \n+// must-compile-successfully\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n struct StTy<#[rustc_ty_struct] I>(I);\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n-\n enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n-\n trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n-\n type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n type TyTy<#[rustc_ty_type] L> = (L, );\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n \n impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n impl<#[rustc_ty_inherent] M> StTy<M> { }\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n-\n impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n     fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n }\n impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n-    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n     fn foo(&self, _: N) { }\n }\n \n fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n-//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n \n impl<I> StTy<I> {\n     fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n     fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n-    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n }\n \n fn hof_lt<Q>(_: Q)\n     where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n-{\n-}\n+{}\n \n-fn main() {\n-\n-}\n+fn main() {}", "previous_filename": "src/test/ui/feature-gate-generic_param_attrs.rs"}, {"sha": "55c9f5de302052df25abb0c5891170e737a0d94f", "filename": "src/test/ui/nll/drop-may-dangle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -17,7 +17,6 @@\n \n #![allow(warnings)]\n #![feature(dropck_eyepatch)]\n-#![feature(generic_param_attrs)]\n \n fn use_x(_: usize) -> bool { true }\n "}, {"sha": "e5478e39fecca9e3dddf2a394371d48ea55d8237", "filename": "src/test/ui/nll/drop-no-may-dangle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -17,7 +17,6 @@\n \n #![allow(warnings)]\n #![feature(dropck_eyepatch)]\n-#![feature(generic_param_attrs)]\n \n fn use_x(_: usize) -> bool { true }\n "}, {"sha": "a35271bdcfeff81c5b66b4e748f10f4e8e889a22", "filename": "src/test/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a23447e451faee7ffbffab2be8831f3098f6d/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=1a2a23447e451faee7ffbffab2be8831f3098f6d", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `v[..]` because it is borrowed\n-  --> $DIR/drop-no-may-dangle.rs:31:9\n+  --> $DIR/drop-no-may-dangle.rs:30:9\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n    |                                                                 ----- borrow of `v[..]` occurs here\n@@ -11,7 +11,7 @@ LL | }\n    | - borrow later used here, when `p` is dropped\n \n error[E0506]: cannot assign to `v[..]` because it is borrowed\n-  --> $DIR/drop-no-may-dangle.rs:34:5\n+  --> $DIR/drop-no-may-dangle.rs:33:5\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n    |                                                                 ----- borrow of `v[..]` occurs here"}]}