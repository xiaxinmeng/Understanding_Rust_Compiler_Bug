{"sha": "dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjY2JiMzhkMmUyOGJmZWI1M2YzMWMxM2RlM2I4M2U3MmYxYTQ3NmM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-07T22:25:45Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T21:59:20Z"}, "message": "Less lifetines: derive SemanticsScope in place", "tree": {"sha": "cf651b25be3c2dd2618e90738aa4f6600077cc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf651b25be3c2dd2618e90738aa4f6600077cc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "html_url": "https://github.com/rust-lang/rust/commit/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db61d4ea13113cd6c4e0661075ea9b2f739be862", "url": "https://api.github.com/repos/rust-lang/rust/commits/db61d4ea13113cd6c4e0661075ea9b2f739be862", "html_url": "https://github.com/rust-lang/rust/commit/db61d4ea13113cd6c4e0661075ea9b2f739be862"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "945638cc565ad315ffc09df1283bb1ad0ebf7107", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -774,7 +774,7 @@ fn find_root(node: &SyntaxNode) -> SyntaxNode {\n ///\n /// Note that if you are wondering \"what does this specific existing name mean?\",\n /// you'd better use the `resolve_` family of methods.\n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n pub struct SemanticsScope<'a> {\n     pub db: &'a dyn HirDatabase,\n     file_id: HirFileId,"}, {"sha": "5546c3a4e155a8d4df551f0329f3755a56891794", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -112,9 +112,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     Some(())\n }\n \n-pub(super) fn find_importable_node<'a>(\n-    ctx: &'a AssistContext,\n-) -> Option<(ImportAssets<'a>, SyntaxNode)> {\n+pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets, SyntaxNode)> {\n     if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n         ImportAssets::for_exact_path(&path_under_caret, &ctx.sema)\n             .zip(Some(path_under_caret.syntax().clone()))"}, {"sha": "88fe2fe90472ddb857e54d387ffdf8c3ea681037", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -65,23 +65,20 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n-    let found_traits = items_locator::with_for_exact_name(\n-        &ctx.sema,\n-        current_crate,\n-        trait_token.text().to_string(),\n-    )\n-    .into_iter()\n-    .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n-        ModuleDef::Trait(trait_) => Some(trait_),\n-        _ => None,\n-    })\n-    .flat_map(|trait_| {\n-        current_module\n-            .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n-            .as_ref()\n-            .map(mod_path_to_ast)\n-            .zip(Some(trait_))\n-    });\n+    let found_traits =\n+        items_locator::with_exact_name(&ctx.sema, current_crate, trait_token.text().to_string())\n+            .into_iter()\n+            .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n+                ModuleDef::Trait(trait_) => Some(trait_),\n+                _ => None,\n+            })\n+            .flat_map(|trait_| {\n+                current_module\n+                    .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n+                    .as_ref()\n+                    .map(mod_path_to_ast)\n+                    .zip(Some(trait_))\n+            });\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {"}, {"sha": "391a11c91c9e9ea9e157945d0a97769582195403", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -169,23 +169,28 @@ pub(crate) fn position_for_import<'a>(\n     })\n }\n \n-fn import_assets<'a>(ctx: &'a CompletionContext, fuzzy_name: String) -> Option<ImportAssets<'a>> {\n+fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAssets> {\n     let current_module = ctx.scope.module()?;\n     if let Some(dot_receiver) = &ctx.dot_receiver {\n         ImportAssets::for_fuzzy_method_call(\n             current_module,\n             ctx.sema.type_of_expr(dot_receiver)?,\n             fuzzy_name,\n-            ctx.scope.clone(),\n+            dot_receiver.syntax().clone(),\n         )\n     } else {\n         let fuzzy_name_length = fuzzy_name.len();\n+        let approximate_node = match current_module.definition_source(ctx.db).value {\n+            hir::ModuleSource::SourceFile(s) => s.syntax().clone(),\n+            hir::ModuleSource::Module(m) => m.syntax().clone(),\n+            hir::ModuleSource::BlockExpr(b) => b.syntax().clone(),\n+        };\n         let assets_for_path = ImportAssets::for_fuzzy_path(\n             current_module,\n             ctx.path_qual.clone(),\n             fuzzy_name,\n             &ctx.sema,\n-            ctx.scope.clone(),\n+            approximate_node,\n         )?;\n \n         if matches!(assets_for_path.import_candidate(), ImportCandidate::Path(_))"}, {"sha": "a0c8c374d0d57b391e96385b2040f79e567da6d9", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -150,7 +150,7 @@ pub fn resolve_completion_edits(\n     let current_crate = current_module.krate();\n \n     let (import_path, item_to_import) =\n-        items_locator::with_for_exact_name(&ctx.sema, current_crate, imported_name)\n+        items_locator::with_exact_name(&ctx.sema, current_crate, imported_name)\n             .into_iter()\n             .filter_map(|candidate| {\n                 current_module"}, {"sha": "f2866af1368fe94d521e2eb26bb3e8a53664146c", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -1,11 +1,11 @@\n //! Look up accessible paths for items.\n use hir::{\n     AsAssocItem, AssocItem, AssocItemContainer, Crate, ItemInNs, MacroDef, ModPath, Module,\n-    ModuleDef, Name, PathResolution, PrefixKind, ScopeDef, Semantics, SemanticsScope, Type,\n+    ModuleDef, Name, PathResolution, PrefixKind, ScopeDef, Semantics, Type,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{ast, AstNode};\n+use syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{\n     items_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n@@ -62,38 +62,37 @@ impl NameToImport {\n }\n \n #[derive(Debug)]\n-pub struct ImportAssets<'a> {\n+pub struct ImportAssets {\n     import_candidate: ImportCandidate,\n+    candidate_node: SyntaxNode,\n     module_with_candidate: Module,\n-    scope: SemanticsScope<'a>,\n }\n \n-impl<'a> ImportAssets<'a> {\n+impl ImportAssets {\n     pub fn for_method_call(\n         method_call: &ast::MethodCallExpr,\n-        sema: &'a Semantics<RootDatabase>,\n+        sema: &Semantics<RootDatabase>,\n     ) -> Option<Self> {\n-        let scope = sema.scope(method_call.syntax());\n+        let candidate_node = method_call.syntax().clone();\n         Some(Self {\n             import_candidate: ImportCandidate::for_method_call(sema, method_call)?,\n-            module_with_candidate: scope.module()?,\n-            scope,\n+            module_with_candidate: sema.scope(&candidate_node).module()?,\n+            candidate_node,\n         })\n     }\n \n     pub fn for_exact_path(\n         fully_qualified_path: &ast::Path,\n-        sema: &'a Semantics<RootDatabase>,\n+        sema: &Semantics<RootDatabase>,\n     ) -> Option<Self> {\n-        let syntax_under_caret = fully_qualified_path.syntax();\n-        if syntax_under_caret.ancestors().find_map(ast::Use::cast).is_some() {\n+        let candidate_node = fully_qualified_path.syntax().clone();\n+        if candidate_node.ancestors().find_map(ast::Use::cast).is_some() {\n             return None;\n         }\n-        let scope = sema.scope(syntax_under_caret);\n         Some(Self {\n             import_candidate: ImportCandidate::for_regular_path(sema, fully_qualified_path)?,\n-            module_with_candidate: scope.module()?,\n-            scope,\n+            module_with_candidate: sema.scope(&candidate_node).module()?,\n+            candidate_node,\n         })\n     }\n \n@@ -102,28 +101,28 @@ impl<'a> ImportAssets<'a> {\n         qualifier: Option<ast::Path>,\n         fuzzy_name: String,\n         sema: &Semantics<RootDatabase>,\n-        scope: SemanticsScope<'a>,\n+        candidate_node: SyntaxNode,\n     ) -> Option<Self> {\n         Some(Self {\n             import_candidate: ImportCandidate::for_fuzzy_path(qualifier, fuzzy_name, sema)?,\n             module_with_candidate,\n-            scope,\n+            candidate_node,\n         })\n     }\n \n     pub fn for_fuzzy_method_call(\n         module_with_method_call: Module,\n         receiver_ty: Type,\n         fuzzy_method_name: String,\n-        scope: SemanticsScope<'a>,\n+        candidate_node: SyntaxNode,\n     ) -> Option<Self> {\n         Some(Self {\n             import_candidate: ImportCandidate::TraitMethod(TraitImportCandidate {\n                 receiver_ty,\n                 name: NameToImport::Fuzzy(fuzzy_method_name),\n             }),\n             module_with_candidate: module_with_method_call,\n-            scope,\n+            candidate_node,\n         })\n     }\n }\n@@ -156,7 +155,7 @@ impl LocatedImport {\n     }\n }\n \n-impl<'a> ImportAssets<'a> {\n+impl ImportAssets {\n     pub fn import_candidate(&self) -> &ImportCandidate {\n         &self.import_candidate\n     }\n@@ -182,7 +181,7 @@ impl<'a> ImportAssets<'a> {\n         prefixed: Option<PrefixKind>,\n     ) -> Vec<LocatedImport> {\n         let items_with_candidate_name = match self.name_to_import() {\n-            NameToImport::Exact(exact_name) => items_locator::with_for_exact_name(\n+            NameToImport::Exact(exact_name) => items_locator::with_exact_name(\n                 sema,\n                 self.module_with_candidate.krate(),\n                 exact_name.clone(),\n@@ -209,7 +208,7 @@ impl<'a> ImportAssets<'a> {\n             }\n         };\n \n-        let scope_definitions = self.scope_definitions();\n+        let scope_definitions = self.scope_definitions(sema);\n         self.applicable_defs(sema.db, prefixed, items_with_candidate_name)\n             .into_iter()\n             .filter(|import| import.import_path.len() > 1)\n@@ -218,9 +217,9 @@ impl<'a> ImportAssets<'a> {\n             .collect()\n     }\n \n-    fn scope_definitions(&self) -> FxHashSet<ScopeDef> {\n+    fn scope_definitions(&self, sema: &Semantics<RootDatabase>) -> FxHashSet<ScopeDef> {\n         let mut scope_definitions = FxHashSet::default();\n-        self.scope.process_all_names(&mut |_, scope_def| {\n+        sema.scope(&self.candidate_node).process_all_names(&mut |_, scope_def| {\n             scope_definitions.insert(scope_def);\n         });\n         scope_definitions"}, {"sha": "8a7f029353745ce72147231acb7a7147ded3dc4e", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccbb38d2e28bfeb53f31c13de3b83e72f1a476c/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=dccbb38d2e28bfeb53f31c13de3b83e72f1a476c", "patch": "@@ -17,7 +17,7 @@ use rustc_hash::FxHashSet;\n \n pub(crate) const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n \n-pub fn with_for_exact_name(\n+pub fn with_exact_name(\n     sema: &Semantics<'_, RootDatabase>,\n     krate: Crate,\n     exact_name: String,"}]}