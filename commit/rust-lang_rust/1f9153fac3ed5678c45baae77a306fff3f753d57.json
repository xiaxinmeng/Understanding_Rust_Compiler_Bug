{"sha": "1f9153fac3ed5678c45baae77a306fff3f753d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTE1M2ZhYzNlZDU2NzhjNDViYWFlNzdhMzA2ZmZmM2Y3NTNkNTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T00:25:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:20:45Z"}, "message": "validate TyClosure, TyTuple, TyNever", "tree": {"sha": "f6bc877566cda3bd0e3a81501ce4888f111a4b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bc877566cda3bd0e3a81501ce4888f111a4b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9153fac3ed5678c45baae77a306fff3f753d57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/10ACgkQpp+NIls6\n19kudQ//S3J6rSDEWaInIowl8mWUCPL7/wAG5z2bLTPUzZ8R/feBURj0JcrEyyh5\nnpxXM5tpUnvPaInUyT8bCs3FsoI6akbgdRhYHffPpG2sLfitL9b7dJ1kWDtJR9Ln\niXPAHRnOIFzcXE21KUtPY2cAwxk7ojuTt4EUdbOTE3D21T/ilj3PbWCVGsP/BGOP\noBjKJD07Q3jXSr22c5l3eZVKGDz3k8awJC6cJG1NHiigIvdsN60oBYmt1uqzVp90\n/2xf6ednGyc3K+t6O9pDjcsyEwBVt/Po4LORC0eQq4wx1j4TtmNEiFagwAg8uYqt\nexQ0cz+TRj/nTEe0wpECHBEOD9Ocr4Oj4zR6VnxUBUlL5CJGlJQK02f26ZTS9mNm\ndnAzCllmnzPl/oe1f3FnxCnVgrQQNsw7TGj0vuhd0gLeI0/UpHU5IXIDXi2GLtP1\naKFtdn69A/+mrcMtbd77Th2C6t/QBvDoqf8UjMoAkWzNA3jMq/sPWWZ0DAaUS2Uv\npmNJcTz8E3PFYuGpGo0hbKXK8Mk7CXf+yIgbSA43Q44N+DhP0v8ExvFqSrJr9NPu\nKjSqZAKTCg5wQlHo8ogu1+5ubgtP+Zzr0sSO4Y19DCuR3JSSnxRy/AgRVmiwccLf\nOlG3ovciXJSOkXUjoEUMQFhSH4J410v5ODayPxoRHDWzzBA8VBA=\n=vn3P\n-----END PGP SIGNATURE-----", "payload": "tree f6bc877566cda3bd0e3a81501ce4888f111a4b9e\nparent dac51f41ad526c0af1138f46aba19df04c2e0527\nauthor Ralf Jung <post@ralfj.de> 1499991938 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970845 +0200\n\nvalidate TyClosure, TyTuple, TyNever\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9153fac3ed5678c45baae77a306fff3f753d57", "html_url": "https://github.com/rust-lang/rust/commit/1f9153fac3ed5678c45baae77a306fff3f753d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9153fac3ed5678c45baae77a306fff3f753d57/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac51f41ad526c0af1138f46aba19df04c2e0527", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac51f41ad526c0af1138f46aba19df04c2e0527", "html_url": "https://github.com/rust-lang/rust/commit/dac51f41ad526c0af1138f46aba19df04c2e0527"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "f84e4a3b1b21210073d51e24c7285892011f7d8f", "filename": "src/librustc_mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ferror.rs?ref=1f9153fac3ed5678c45baae77a306fff3f753d57", "patch": "@@ -57,6 +57,7 @@ pub enum EvalError<'tcx> {\n         access: AccessKind,\n         lock: LockInfo,\n     },\n+    ValidationFailure(String),\n     InvalidMemoryLockRelease {\n         ptr: MemoryPointer,\n         len: u64,\n@@ -110,6 +111,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"invalid use of NULL pointer\",\n             MemoryLockViolation { .. } =>\n                 \"memory access conflicts with lock\",\n+            ValidationFailure(..) =>\n+                \"type validation failed\",\n             DeallocatedLockedMemory =>\n                 \"deallocated memory while a lock was held\",\n             InvalidMemoryLockRelease { .. } =>\n@@ -221,6 +224,9 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"tried to release memory write lock at {:?}, size {}, which was not acquired by this function\",\n                        ptr, len)\n             }\n+            ValidationFailure(ref err) => {\n+                write!(f, \"type validation failed: {}\", err)\n+            }\n             NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n             FunctionPointerTyMismatch(sig, got) =>\n                 write!(f, \"tried to call a function with sig {} through a function pointer of type {}\", sig, got),"}, {"sha": "3f39d1c25c05bafb5e19b7d5cc69f6461661416a", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=1f9153fac3ed5678c45baae77a306fff3f753d57", "patch": "@@ -539,6 +539,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // TODO: Check if these are valid bool/float/UTF-8, respectively (and in particular, not undef).\n                 Ok(())\n             }\n+            TyNever => {\n+                Err(EvalError::ValidationFailure(format!(\"The empty type is never valid.\")))\n+            }\n             TyRef(region, ty::TypeAndMut { ty: pointee_ty, mutbl }) => {\n                 let val = self.read_lvalue(lvalue)?;\n                 // Sharing restricts our context\n@@ -617,6 +620,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                 }\n             }\n+            TyTuple(ref types, _) => {\n+                for (idx, field_ty) in types.iter().enumerate() {\n+                    let field_lvalue = self.lvalue_field(lvalue, idx, ty, field_ty)?;\n+                    self.validate(field_lvalue, field_ty, vctx)?;\n+                }\n+                Ok(())\n+            }\n+            TyClosure(def_id, ref closure_substs) => {\n+                for (idx, field_ty) in closure_substs.upvar_tys(def_id, self.tcx).enumerate() {\n+                    let field_lvalue = self.lvalue_field(lvalue, idx, ty, field_ty)?;\n+                    self.validate(field_lvalue, field_ty, vctx)?;\n+                }\n+                Ok(())\n+            }\n+            TyParam(_) | TyInfer(_) => bug!(\"I got an incomplete type for validation\"),\n             _ => unimplemented!(\"Unimplemented type encountered when checking validity.\")\n         }\n     }"}, {"sha": "33651e733e6be8162648f6a5173f78254ab6d537", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9153fac3ed5678c45baae77a306fff3f753d57/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=1f9153fac3ed5678c45baae77a306fff3f753d57", "patch": "@@ -132,13 +132,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             // Validity checks.\n-            Validate(ref op, ref lvalues) => {\n+            Validate(op, ref lvalues) => {\n                 for operand in lvalues {\n                     // We need to monomorphize ty *without* erasing lifetimes\n                     let ty = operand.ty.subst(self.tcx, self.substs());\n                     // TODO: do we have to self.tcx.normalize_associated_type(&{ty}) ?  That however seems to erase lifetimes.\n                     let lvalue = self.eval_lvalue(&operand.lval)?;\n-                    self.validate(lvalue, ty, ValidationCtx::new(*op))?;\n+                    self.validate(lvalue, ty, ValidationCtx::new(op))?;\n                 }\n             }\n             EndRegion(ce) => {"}]}