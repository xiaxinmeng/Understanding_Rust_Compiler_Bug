{"sha": "d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "node_id": "C_kwDOAAsO6NoAKGQyNDA0ZDZkY2E1OWQzNGQ1YjlmMGM2NmI0MjViMDgyMjlmMjBmNGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T07:05:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T07:05:45Z"}, "message": "Dont clobber `as ..` rename in import suggestion", "tree": {"sha": "723f17825489931226a86ac4d14c8b0032d5cd91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723f17825489931226a86ac4d14c8b0032d5cd91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "html_url": "https://github.com/rust-lang/rust/commit/d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2536b9389f56386d7f722b403d9730911ee811", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2536b9389f56386d7f722b403d9730911ee811", "html_url": "https://github.com/rust-lang/rust/commit/9e2536b9389f56386d7f722b403d9730911ee811"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "c8b96aae7a6990c0e1674df3d346c2d4c8b266fc", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "patch": "@@ -161,6 +161,7 @@ impl<'a> Resolver<'a> {\n                     found_use,\n                     DiagnosticMode::Normal,\n                     path,\n+                    None,\n                 );\n                 err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n@@ -690,6 +691,7 @@ impl<'a> Resolver<'a> {\n                         FoundUse::Yes,\n                         DiagnosticMode::Pattern,\n                         vec![],\n+                        None,\n                     );\n                 }\n                 err\n@@ -1344,6 +1346,7 @@ impl<'a> Resolver<'a> {\n             FoundUse::Yes,\n             DiagnosticMode::Normal,\n             vec![],\n+            None,\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2325,6 +2328,7 @@ pub(crate) fn import_candidates(\n     use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],\n     mode: DiagnosticMode,\n+    append: Option<&str>,\n ) {\n     show_candidates(\n         session,\n@@ -2336,6 +2340,7 @@ pub(crate) fn import_candidates(\n         FoundUse::Yes,\n         mode,\n         vec![],\n+        append,\n     );\n }\n \n@@ -2353,10 +2358,12 @@ fn show_candidates(\n     found_use: FoundUse,\n     mode: DiagnosticMode,\n     path: Vec<Segment>,\n+    append: Option<&str>,\n ) {\n     if candidates.is_empty() {\n         return;\n     }\n+    let append = append.unwrap_or(\"\");\n \n     let mut accessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n         Vec::new();\n@@ -2417,7 +2424,7 @@ fn show_candidates(\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n+                candidate.0 = format!(\"{add_use}{}{append};\\n{additional_newline}\", &candidate.0);\n             }\n \n             err.span_suggestions("}, {"sha": "d99c1cb6d3cb339cc8cb0452275653a7f758e81e", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "patch": "@@ -547,22 +547,24 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             if let Some(candidates) = &err.candidates {\n                 match &import.kind {\n-                    ImportKind::Single { nested: false, .. } => import_candidates(\n+                    ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n                         self.r.session,\n                         &self.r.untracked.source_span,\n                         &mut diag,\n                         Some(err.span),\n                         &candidates,\n                         DiagnosticMode::Import,\n+                        (source != target).then(|| format!(\" as {target}\")).as_deref(),\n                     ),\n-                    ImportKind::Single { nested: true, .. } => {\n+                    ImportKind::Single { nested: true, source, target, .. } => {\n                         import_candidates(\n                             self.r.session,\n                             &self.r.untracked.source_span,\n                             &mut diag,\n                             None,\n                             &candidates,\n                             DiagnosticMode::Normal,\n+                            (source != target).then(|| format!(\" as {target}\")).as_deref(),\n                         );\n                     }\n                     _ => {}"}, {"sha": "ffe56916f92f018f8e5dfe945c5152a798b4d47f", "filename": "src/test/ui/imports/bad-import-with-rename.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs?ref=d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "patch": "@@ -0,0 +1,16 @@\n+mod A {\n+    pub type B = ();\n+    pub type B2 = ();\n+}\n+\n+mod C {\n+    use crate::D::B as _;\n+    //~^ ERROR unresolved import `crate::D::B`\n+\n+    use crate::D::B2;\n+    //~^ ERROR unresolved import `crate::D::B2`\n+}\n+\n+mod D {}\n+\n+fn main() {}"}, {"sha": "cace2a7a51c8eca5529630fd7788f7415af90c71", "filename": "src/test/ui/imports/bad-import-with-rename.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr?ref=d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "patch": "@@ -0,0 +1,25 @@\n+error[E0432]: unresolved import `crate::D::B`\n+  --> $DIR/bad-import-with-rename.rs:7:9\n+   |\n+LL |     use crate::D::B as _;\n+   |         ^^^^^^^^^^^^^^^^ no `B` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B as _;\n+   |         ~~~~~~~~~~\n+\n+error[E0432]: unresolved import `crate::D::B2`\n+  --> $DIR/bad-import-with-rename.rs:10:9\n+   |\n+LL |     use crate::D::B2;\n+   |         ^^^^^^^^^^^^ no `B2` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B2;\n+   |         ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "17ea648aad6ac8bd4c6f214a1a3299621a30d340", "filename": "src/test/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2404d6dca59d34d5b9f0c66b425b08229f20f4b/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=d2404d6dca59d34d5b9f0c66b425b08229f20f4b", "patch": "@@ -19,8 +19,8 @@ LL | use test as y;\n    |     ~~~~\n help: consider importing this module instead\n    |\n-LL | use test::test;\n-   |     ~~~~~~~~~~~\n+LL | use test::test as y;\n+   |     ~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}]}