{"sha": "5485512b3e5eee0530517a7b68b59337016b58cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ODU1MTJiM2U1ZWVlMDUzMDUxN2E3YjY4YjU5MzM3MDE2YjU4Y2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-11T16:40:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T16:40:56Z"}, "message": "Merge #5318\n\n5318: More tight recursion limit when expanding macros in function bodies r=matklad a=matklad\n\ncc #4944\ncc #5317\n\nThis doesn't fully close #4944 -- looks like we hit SO in syntax\nhighlighting, when we use `Semantics::expand_macro`.\n\nSeems like we need to place expansion limit on the macro itself (store\nit as a part of MacroCallId?)!\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8717f26bc20300c1eaf37baba97bb0f80dd69208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8717f26bc20300c1eaf37baba97bb0f80dd69208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5485512b3e5eee0530517a7b68b59337016b58cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCeuYCRBK7hj4Ov3rIwAAdHIIAHmgRjTlf9Rgu/X9NNAbP3Wj\nSc/aa6V2zYxzOSfkSItyFOXsJYuaf7wRQWhco95E8+978N09Xe/n4WUsPUR3tHDb\nKu5xPdWIQs9RcgHb5s+Q0QLYQ+n1GCdpKlla6IgHIjaJV6ppIZ69l2c5pjVOj/pn\nlF9UNU3uvMYjsURYyurhwKSFE73VImuTezzrZ1Uib5be3j0FEj79Or/pPoUWZfFh\nARwCE4OvqGO8F9YSqbNUvCwniH6OfkECB7PI2RjByJbDH7Uw8QF07WRAWE1y+8D6\ncdL34JayyIXkjJasxheXWJkS4rsOhmq6Z7Fdx+D2XQrT/F3dxzRwJyMfztdKd8E=\n=Nzsh\n-----END PGP SIGNATURE-----\n", "payload": "tree 8717f26bc20300c1eaf37baba97bb0f80dd69208\nparent c884ceb31c2761a9eb7de8754c4be4cc47469dee\nparent a8891ae3ca1f23ef310a91b2e30bac7e08be4aa1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594485656 +0000\ncommitter GitHub <noreply@github.com> 1594485656 +0000\n\nMerge #5318\n\n5318: More tight recursion limit when expanding macros in function bodies r=matklad a=matklad\n\ncc #4944\ncc #5317\n\nThis doesn't fully close #4944 -- looks like we hit SO in syntax\nhighlighting, when we use `Semantics::expand_macro`.\n\nSeems like we need to place expansion limit on the macro itself (store\nit as a part of MacroCallId?)!\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5485512b3e5eee0530517a7b68b59337016b58cc", "html_url": "https://github.com/rust-lang/rust/commit/5485512b3e5eee0530517a7b68b59337016b58cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5485512b3e5eee0530517a7b68b59337016b58cc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c884ceb31c2761a9eb7de8754c4be4cc47469dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c884ceb31c2761a9eb7de8754c4be4cc47469dee", "html_url": "https://github.com/rust-lang/rust/commit/c884ceb31c2761a9eb7de8754c4be4cc47469dee"}, {"sha": "a8891ae3ca1f23ef310a91b2e30bac7e08be4aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8891ae3ca1f23ef310a91b2e30bac7e08be4aa1", "html_url": "https://github.com/rust-lang/rust/commit/a8891ae3ca1f23ef310a91b2e30bac7e08be4aa1"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "8c233a717e3b7719ada6f1aa1d1a72db6df5b475", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5485512b3e5eee0530517a7b68b59337016b58cc/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485512b3e5eee0530517a7b68b59337016b58cc/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=5485512b3e5eee0530517a7b68b59337016b58cc", "patch": "@@ -14,6 +14,7 @@ use ra_db::CrateId;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n+use test_utils::mark;\n \n pub(crate) use lower::LowerCtx;\n \n@@ -42,7 +43,7 @@ pub(crate) struct Expander {\n     current_file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n-    recursive_limit: usize,\n+    recursion_limit: usize,\n }\n \n impl CfgExpander {\n@@ -81,7 +82,7 @@ impl Expander {\n             current_file_id,\n             ast_id_map,\n             module,\n-            recursive_limit: 0,\n+            recursion_limit: 0,\n         }\n     }\n \n@@ -91,7 +92,9 @@ impl Expander {\n         local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> Option<(Mark, T)> {\n-        if self.recursive_limit > 1024 {\n+        self.recursion_limit += 1;\n+        if self.recursion_limit > 32 {\n+            mark::hit!(your_stack_belongs_to_me);\n             return None;\n         }\n \n@@ -118,8 +121,6 @@ impl Expander {\n                     self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n                     self.current_file_id = file_id;\n                     self.ast_id_map = db.ast_id_map(file_id);\n-                    self.recursive_limit += 1;\n-\n                     return Some((mark, expr));\n                 }\n             }\n@@ -134,7 +135,7 @@ impl Expander {\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n-        self.recursive_limit -= 1;\n+        self.recursion_limit -= 1;\n         mark.bomb.defuse();\n     }\n \n@@ -311,3 +312,44 @@ impl BodySourceMap {\n         self.field_map[&(expr, field)].clone()\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n+    use test_utils::mark;\n+\n+    use crate::ModuleDefId;\n+\n+    use super::*;\n+\n+    fn lower(ra_fixture: &str) -> Arc<Body> {\n+        let (db, file_id) = crate::test_db::TestDB::with_single_file(ra_fixture);\n+\n+        let krate = db.crate_graph().iter().next().unwrap();\n+        let def_map = db.crate_def_map(krate);\n+        let module = def_map.modules_for_file(file_id).next().unwrap();\n+        let module = &def_map[module];\n+        let fn_def = match module.scope.declarations().next().unwrap() {\n+            ModuleDefId::FunctionId(it) => it,\n+            _ => panic!(),\n+        };\n+\n+        db.body(fn_def.into())\n+    }\n+\n+    #[test]\n+    fn your_stack_belongs_to_me() {\n+        mark::check!(your_stack_belongs_to_me);\n+        lower(\n+            r\"\n+macro_rules! n_nuple {\n+    ($e:tt) => ();\n+    ($($rest:tt)*) => {{\n+        (n_nuple!($($rest)*)None,)\n+    }};\n+}\n+fn main() { n_nuple!(1,2,3); }\n+\",\n+        );\n+    }\n+}"}]}