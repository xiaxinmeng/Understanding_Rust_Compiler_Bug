{"sha": "5348a89a77a49f6f57c13c0edf7f493fd410159a", "node_id": "C_kwDOAAsO6NoAKDUzNDhhODlhNzdhNDlmNmY1N2MxM2MwZWRmN2Y0OTNmZDQxMDE1OWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T23:20:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T23:20:03Z"}, "message": "Auto merge of #108015 - matthiaskrgr:rollup-qerohjn, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107902 (fix: improve the suggestion on future not awaited)\n - #107913 (Update broken link in cargo style guide)\n - #107942 (Tighter spans for bad inherent `impl` self types)\n - #107948 (Allow shortcuts to directories to be used for ./x.py fmt)\n - #107971 (Clearly document intentional UB in mir-opt tests)\n - #107985 (Added another error to be processed in fallback)\n - #108002 (Update books)\n - #108013 (rustdoc: use a string with one-character codes for search index types)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ed4cb2e46a8cc7e1ae301dc7b76a503dc5b64260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4cb2e46a8cc7e1ae301dc7b76a503dc5b64260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5348a89a77a49f6f57c13c0edf7f493fd410159a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5348a89a77a49f6f57c13c0edf7f493fd410159a", "html_url": "https://github.com/rust-lang/rust/commit/5348a89a77a49f6f57c13c0edf7f493fd410159a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5348a89a77a49f6f57c13c0edf7f493fd410159a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065852def0903296da33a9eaf557f230bcf3a61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/065852def0903296da33a9eaf557f230bcf3a61a", "html_url": "https://github.com/rust-lang/rust/commit/065852def0903296da33a9eaf557f230bcf3a61a"}, {"sha": "f1a349457fe7c064cd63d14c20bc5d9519d20dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a349457fe7c064cd63d14c20bc5d9519d20dc6", "html_url": "https://github.com/rust-lang/rust/commit/f1a349457fe7c064cd63d14c20bc5d9519d20dc6"}], "stats": {"total": 591, "additions": 322, "deletions": 269}, "files": [{"sha": "940a450101ca07dff1a9feb4cf0f237ae9991dc5", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -57,7 +57,7 @@ const ADD_ATTR: &str =\n     \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n \n impl<'tcx> InherentCollect<'tcx> {\n-    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId) {\n+    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId, span: Span) {\n         let impl_def_id = item.owner_id;\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n@@ -76,12 +76,12 @@ impl<'tcx> InherentCollect<'tcx> {\n             if !self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    item.span,\n+                    span,\n                     E0390,\n                     \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                 )\n                 .help(INTO_DEFINING_CRATE)\n-                .span_help(item.span, ADD_ATTR_TO_TY)\n+                .span_help(span, ADD_ATTR_TO_TY)\n                 .emit();\n                 return;\n             }\n@@ -93,12 +93,12 @@ impl<'tcx> InherentCollect<'tcx> {\n                 {\n                     struct_span_err!(\n                         self.tcx.sess,\n-                        item.span,\n+                        span,\n                         E0390,\n                         \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                     )\n                     .help(INTO_DEFINING_CRATE)\n-                    .span_help(impl_item.span, ADD_ATTR)\n+                    .span_help(self.tcx.hir().span(impl_item.id.hir_id()), ADD_ATTR)\n                     .emit();\n                     return;\n                 }\n@@ -112,12 +112,12 @@ impl<'tcx> InherentCollect<'tcx> {\n         } else {\n             struct_span_err!(\n                 self.tcx.sess,\n-                item.span,\n+                span,\n                 E0116,\n                 \"cannot define inherent `impl` for a type outside of the crate \\\n                               where the type is defined\"\n             )\n-            .span_label(item.span, \"impl for type defined outside of crate.\")\n+            .span_label(span, \"impl for type defined outside of crate.\")\n             .note(\"define and implement a trait or new type instead\")\n             .emit();\n         }\n@@ -182,29 +182,30 @@ impl<'tcx> InherentCollect<'tcx> {\n         }\n \n         let item = self.tcx.hir().item(id);\n-        let hir::ItemKind::Impl(hir::Impl { of_trait: None, self_ty: ty, items, .. }) = item.kind else {\n+        let impl_span = self.tcx.hir().span(id.hir_id());\n+        let hir::ItemKind::Impl(hir::Impl { of_trait: None, items, .. }) = item.kind else {\n             return;\n         };\n \n         let self_ty = self.tcx.type_of(item.owner_id);\n         match *self_ty.kind() {\n             ty::Adt(def, _) => {\n-                self.check_def_id(item, self_ty, def.did());\n+                self.check_def_id(item, self_ty, def.did(), impl_span);\n             }\n             ty::Foreign(did) => {\n-                self.check_def_id(item, self_ty, did);\n+                self.check_def_id(item, self_ty, did, impl_span);\n             }\n             ty::Dynamic(data, ..) if data.principal_def_id().is_some() => {\n-                self.check_def_id(item, self_ty, data.principal_def_id().unwrap());\n+                self.check_def_id(item, self_ty, data.principal_def_id().unwrap(), impl_span);\n             }\n             ty::Dynamic(..) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0785,\n                     \"cannot define inherent `impl` for a dyn auto trait\"\n                 )\n-                .span_label(ty.span, \"impl requires at least one non-auto trait\")\n+                .span_label(impl_span, \"impl requires at least one non-auto trait\")\n                 .note(\"define and implement a new trait or type instead\")\n                 .emit();\n             }\n@@ -221,17 +222,17 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Never\n             | ty::FnPtr(_)\n             | ty::Tuple(..) => {\n-                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, ty.span)\n+                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, impl_span)\n             }\n             ty::Alias(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0118,\n                     \"no nominal type found for inherent implementation\"\n                 );\n \n-                err.span_label(ty.span, \"impl requires a nominal type\")\n+                err.span_label(impl_span, \"impl requires a nominal type\")\n                     .note(\"either implement a trait on it or create a newtype to wrap it instead\");\n \n                 err.emit();"}, {"sha": "c56149c11492018f58ee3c543768759c4a7d89f7", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1783,14 +1783,24 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }))\n                     {\n-                        diag.note_expected_found_extra(\n-                            &expected_label,\n-                            expected,\n-                            &found_label,\n-                            found,\n-                            &sort_string(values.expected, exp_p),\n-                            &sort_string(values.found, found_p),\n-                        );\n+                        if let Some(ExpectedFound { found: found_ty, .. }) = exp_found {\n+                            // `Future` is a special opaque type that the compiler\n+                            // will try to hide in some case such as `async fn`, so\n+                            // to make an error more use friendly we will\n+                            // avoid to suggest a mismatch type with a\n+                            // type that the user usually are not usign\n+                            // directly such as `impl Future<Output = u8>`.\n+                            if !self.tcx.ty_is_opaque_future(found_ty) {\n+                                diag.note_expected_found_extra(\n+                                    &expected_label,\n+                                    expected,\n+                                    &found_label,\n+                                    found,\n+                                    &sort_string(values.expected, exp_p),\n+                                    &sort_string(values.found, found_p),\n+                                );\n+                            }\n+                        }\n                     }\n                 }\n                 _ => {\n@@ -2854,6 +2864,7 @@ impl IntoDiagnosticArg for ObligationCauseAsDiagArg<'_> {\n pub enum TyCategory {\n     Closure,\n     Opaque,\n+    OpaqueFuture,\n     Generator(hir::GeneratorKind),\n     Foreign,\n }\n@@ -2863,6 +2874,7 @@ impl TyCategory {\n         match self {\n             Self::Closure => \"closure\",\n             Self::Opaque => \"opaque type\",\n+            Self::OpaqueFuture => \"future\",\n             Self::Generator(gk) => gk.descr(),\n             Self::Foreign => \"foreign type\",\n         }\n@@ -2871,7 +2883,11 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => Some((Self::Opaque, def_id)),\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n+                let kind =\n+                    if tcx.ty_is_opaque_future(ty) { Self::OpaqueFuture } else { Self::Opaque };\n+                Some((kind, def_id))\n+            }\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "7d9a53d1c025ff15e9cfa15f6908880a5ebb6fd0", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -238,31 +238,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if self.same_type_modulo_infer(exp_found.expected, ty) => {\n-                diag.span_suggestion_verbose(\n-                    exp_span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+                self.suggest_await_on_future(diag, exp_span);\n+                diag.span_note(exp_span, \"calling an async function returns a future\");\n             }\n             (Some(ty), _) if self.same_type_modulo_infer(ty, exp_found.found) => match cause.code()\n             {\n                 ObligationCauseCode::Pattern { span: Some(then_span), .. } => {\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::IfExpression(box IfExpressionCause { then_id, .. }) => {\n                     let then_span = self.find_block_span_from_hir_id(*then_id);\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                     ref prior_arms,\n@@ -283,6 +269,15 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_await_on_future(&self, diag: &mut Diagnostic, sp: Span) {\n+        diag.span_suggestion_verbose(\n+            sp.shrink_to_hi(),\n+            \"consider `await`ing on the `Future`\",\n+            \".await\",\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub(super) fn suggest_accessing_field_where_appropriate(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "9c171a69d064f13483c75c5a029a80fd3c61e5f1", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n-            ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n+            ty::Alias(ty::Opaque, ..) => if tcx.ty_is_opaque_future(self) { \"future\".into() } else { \"opaque type\".into() },\n             ty::Error(_) => \"type error\".into(),\n             _ => {\n                 let width = tcx.sess.diagnostic_width();"}, {"sha": "d2c597664fa780812c39ff1073d1a7a40cdad16f", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1266,7 +1266,12 @@ fn metadata(path: &Path, reparse: ReparsePoint) -> io::Result<FileAttr> {\n     // If the fallback fails for any reason we return the original error.\n     match File::open(path, &opts) {\n         Ok(file) => file.file_attr(),\n-        Err(e) if e.raw_os_error() == Some(c::ERROR_SHARING_VIOLATION as _) => {\n+        Err(e)\n+            if [Some(c::ERROR_SHARING_VIOLATION as _), Some(c::ERROR_ACCESS_DENIED as _)]\n+                .contains(&e.raw_os_error()) =>\n+        {\n+            // `ERROR_ACCESS_DENIED` is returned when the user doesn't have permission for the resource.\n+            // One such example is `System Volume Information` as default but can be created as well\n             // `ERROR_SHARING_VIOLATION` will almost never be returned.\n             // Usually if a file is locked you can still read some metadata.\n             // However, there are special system files, such as"}, {"sha": "615794958d087ee0e51ed22ac597adfeb2a22aa9", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -193,10 +193,46 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n     let walker = match paths.get(0) {\n         Some(first) => {\n-            let mut walker = WalkBuilder::new(first);\n+            let find_shortcut_candidates = |p: &PathBuf| {\n+                let mut candidates = Vec::new();\n+                for candidate in WalkBuilder::new(src.clone()).max_depth(Some(3)).build() {\n+                    if let Ok(entry) = candidate {\n+                        if let Some(dir_name) = p.file_name() {\n+                            if entry.path().is_dir() && entry.file_name() == dir_name {\n+                                candidates.push(entry.into_path());\n+                            }\n+                        }\n+                    }\n+                }\n+                candidates\n+            };\n+\n+            // Only try to look for shortcut candidates for single component paths like\n+            // `std` and not for e.g. relative paths like `../library/std`.\n+            let should_look_for_shortcut_dir = |p: &PathBuf| p.components().count() == 1;\n+\n+            let mut walker = if should_look_for_shortcut_dir(first) {\n+                if let [single_candidate] = &find_shortcut_candidates(first)[..] {\n+                    WalkBuilder::new(single_candidate)\n+                } else {\n+                    WalkBuilder::new(first)\n+                }\n+            } else {\n+                WalkBuilder::new(first)\n+            };\n+\n             for path in &paths[1..] {\n-                walker.add(path);\n+                if should_look_for_shortcut_dir(path) {\n+                    if let [single_candidate] = &find_shortcut_candidates(path)[..] {\n+                        walker.add(single_candidate);\n+                    } else {\n+                        walker.add(path);\n+                    }\n+                } else {\n+                    walker.add(path);\n+                }\n             }\n+\n             walker\n         }\n         None => WalkBuilder::new(src.clone()),"}, {"sha": "d94e03a18a2590ed3f1c67b859cb11528d2a2d5c", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit f2a78f64b668f63f581203c6bac509903f7c00ee\n+Subproject commit d94e03a18a2590ed3f1c67b859cb11528d2a2d5c"}, {"sha": "701d1551429da4cb609082c0ac99df569e336710", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit f1a4614aa41cc544b91b79760a709e113f3451d7\n+Subproject commit 701d1551429da4cb609082c0ac99df569e336710"}, {"sha": "79b53665a7c61d171fb8c5ad0b73b371f9ee6ba7", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit bd1829d235296952bf72ca55635e360584b8805e\n+Subproject commit 79b53665a7c61d171fb8c5ad0b73b371f9ee6ba7"}, {"sha": "e5adb99c04817b7fbe08f4ffce5b36702667345f", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit 22882fb3f7b4d69fdc0d1731e8b9cfcb6910537d\n+Subproject commit e5adb99c04817b7fbe08f4ffce5b36702667345f"}, {"sha": "efe23c4fe12e06351b8dc8c3d18312c761455109", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit 134376872e8c387ef369507e0ee9b5a0e3272718\n+Subproject commit efe23c4fe12e06351b8dc8c3d18312c761455109"}, {"sha": "41a96ab971cb45e2a184df20619ad1829765c990", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1 +1 @@\n-Subproject commit e359ee27fc3da3356d71a732128c0a1abe02e53a\n+Subproject commit 41a96ab971cb45e2a184df20619ad1829765c990"}, {"sha": "13b96ca8c5e9d6d8e365c42176b6be7c0147beec", "filename": "src/doc/style-guide/src/cargo.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fcargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fcargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle-guide%2Fsrc%2Fcargo.md?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -17,8 +17,7 @@ followed by the `description` at the end of that section.\n Don't use quotes around any standard key names; use bare keys. Only use quoted\n keys for non-standard keys whose names require them, and avoid introducing such\n key names when possible.  See the [TOML\n-specification](https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.4.0.md#table)\n-for details.\n+specification](https://toml.io/en/v1.0.0#keys) for details.\n \n Put a single space both before and after the `=` between a key and value. Do\n not indent any key names; start all key names at the start of a line."}, {"sha": "aafedc17499a7bb1a1769d2bbe321d1f4fd17f74", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -21,6 +21,7 @@ use crate::clean;\n /// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n /// ordering based on a helper function inside `item_module`, in the same file.\n #[derive(Copy, PartialEq, Eq, Hash, Clone, Debug, PartialOrd, Ord)]\n+#[repr(u8)]\n pub(crate) enum ItemType {\n     Module = 0,\n     ExternCrate = 1,"}, {"sha": "090ea2cb15763ac0446cb8407ef357e7c7258d18", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -236,7 +236,16 @@ pub(crate) fn build_index<'tcx>(\n             crate_data.serialize_field(\"doc\", &self.doc)?;\n             crate_data.serialize_field(\n                 \"t\",\n-                &self.items.iter().map(|item| &item.ty).collect::<Vec<_>>(),\n+                &self\n+                    .items\n+                    .iter()\n+                    .map(|item| {\n+                        let n = item.ty as u8;\n+                        let c = char::try_from(n + b'A').expect(\"item types must fit in ASCII\");\n+                        assert!(c <= 'z', \"item types must fit within ASCII printables\");\n+                        c\n+                    })\n+                    .collect::<String>(),\n             )?;\n             crate_data.serialize_field(\n                 \"n\","}, {"sha": "1e6c94d29ba47dd0e32206573444fc6d599a80e6", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1939,6 +1939,7 @@ function initSearch(rawSearchIndex) {\n          * @type {Array<string>}\n          */\n         const searchWords = [];\n+        const charA = \"A\".charCodeAt(0);\n         let i, word;\n         let currentIndex = 0;\n         let id = 0;\n@@ -1953,7 +1954,7 @@ function initSearch(rawSearchIndex) {\n             /**\n              * The raw search data for a given crate. `n`, `t`, `d`, and `q`, `i`, and `f`\n              * are arrays with the same length. n[i] contains the name of an item.\n-             * t[i] contains the type of that item (as a small integer that represents an\n+             * t[i] contains the type of that item (as a string of characters that represent an\n              * offset in `itemTypes`). d[i] contains the description of that item.\n              *\n              * q[i] contains the full path of the item, or an empty string indicating\n@@ -1980,7 +1981,7 @@ function initSearch(rawSearchIndex) {\n              *   doc: string,\n              *   a: Object,\n              *   n: Array<string>,\n-             *   t: Array<Number>,\n+             *   t: String,\n              *   d: Array<string>,\n              *   q: Array<string>,\n              *   i: Array<Number>,\n@@ -2009,7 +2010,7 @@ function initSearch(rawSearchIndex) {\n             searchIndex.push(crateRow);\n             currentIndex += 1;\n \n-            // an array of (Number) item types\n+            // a String of one character item type codes\n             const itemTypes = crateCorpus.t;\n             // an array of (String) item names\n             const itemNames = crateCorpus.n;\n@@ -2060,7 +2061,7 @@ function initSearch(rawSearchIndex) {\n                 }\n                 const row = {\n                     crate: crate,\n-                    ty: itemTypes[i],\n+                    ty: itemTypes.charCodeAt(i) - charA,\n                     name: itemNames[i],\n                     path: itemPaths[i] ? itemPaths[i] : lastPath,\n                     desc: itemDescs[i],"}, {"sha": "da142e33948effff594ef7bab10d357a605e092f", "filename": "tests/mir-opt/copy-prop/mutate_through_pointer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,3 +1,13 @@\n+// This attempts to mutate `a` via a pointer derived from `addr_of!(a)`. That is UB\n+// according to Miri. However, the decision to make this UB - and to allow\n+// rustc to rely on that fact for the purpose of optimizations - has not been\n+// finalized.\n+//\n+// As such, we include this test to ensure that copy prop does not rely on that\n+// fact. Specifically, if `addr_of!(a)` could not be used to modify a, it would\n+// be correct for CopyProp to replace all occurrences of `a` with `c` - but that\n+// would cause `f(true)` to output `false` instead of `true`.\n+\n #![feature(custom_mir, core_intrinsics)]\n #![allow(unused_assignments)]\n extern crate core;"}, {"sha": "004643e36f1396d06964acbf6c1fde40165cd724", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -32,7 +32,7 @@\n           _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n           _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n                                            // mir::Constant\n-                                           // + span: $DIR/sibling_ptr.rs:8:12: 8:15\n+                                           // + span: $DIR/sibling_ptr.rs:15:12: 15:15\n                                            // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6dfb3a4ed30995b1806f85cb874822fb74e382ab", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,3 +1,10 @@\n+// This attempts to modify `x.1` via a pointer derived from `addr_of_mut!(x.0)`.\n+// According to Miri, that is UB. However, T-opsem has not finalized that\n+// decision and as such we cannot rely on it in optimizations. Consequently,\n+// DataflowConstProp must treat the `addr_of_mut!(x.0)` as potentially being\n+// used to modify `x.1` - if it did not, then it might incorrectly assume that it\n+// can infer the value of `x.1` at the end of this function.\n+\n // unit-test: DataflowConstProp\n \n // EMIT_MIR sibling_ptr.main.DataflowConstProp.diff\n@@ -7,5 +14,5 @@ fn main() {\n         let p = std::ptr::addr_of_mut!(x.0);\n         *p.add(1) = 1;\n     }\n-    let x1 = x.1;  // should not be propagated\n+    let x1 = x.1; // should not be propagated\n }"}, {"sha": "fd691fdd153327d7a12bf5ad4f65d7d673b06d32", "filename": "tests/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -3,42 +3,42 @@\n   \n   fn escaping() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n-      let _1: ();                          // in scope 0 at $DIR/sroa.rs:+2:5: +2:42\n-      let mut _2: *const u32;              // in scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-      let _3: &u32;                        // in scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-      let _4: Escaping;                    // in scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-      let mut _5: u32;                     // in scope 0 at $DIR/sroa.rs:+2:34: +2:37\n+      let _1: ();                          // in scope 0 at $DIR/sroa.rs:+1:5: +1:42\n+      let mut _2: *const u32;              // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+      let _3: &u32;                        // in scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+      let _4: Escaping;                    // in scope 0 at $DIR/sroa.rs:+1:8: +1:39\n+      let mut _5: u32;                     // in scope 0 at $DIR/sroa.rs:+1:34: +1:37\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+2:5: +2:42\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n-          _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n+          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n+          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n+          _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+1:34: +1:37\n                                            // mir::Constant\n-                                           // + span: $DIR/sroa.rs:73:34: 73:35\n+                                           // + span: $DIR/sroa.rs:78:34: 78:35\n                                            // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n-          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+2:38: +2:39\n-          _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n-          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+2:5: +2:42\n+          _4 = Escaping { a: const 1_u32, b: const 2_u32, c: move _5 }; // scope 0 at $DIR/sroa.rs:+1:8: +1:39\n+          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:38: +1:39\n+          _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+1:7: +1:41\n+          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+1:5: +1:42\n                                            // mir::Constant\n-                                           // + span: $DIR/sroa.rs:73:5: 73:6\n+                                           // + span: $DIR/sroa.rs:78:5: 78:6\n                                            // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+2:41: +2:42\n-          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n-          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n-          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+3:2: +3:2\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:41: +1:42\n+          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n+          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n+          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "fff92cf8d9fd6a9b1c1413aa975a83b0d4b00682", "filename": "tests/mir-opt/sroa.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fmir-opt%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -68,8 +68,13 @@ fn f(a: *const u32) {\n     println!(\"{}\", unsafe { *a.add(2) });\n }\n \n+// `f` uses the `&e.a` to access `e.c`. This is UB according to Miri today; however,\n+// T-opsem has not finalized that decision and as such rustc should not rely on\n+// it. If SROA were to rely on it, it would be (almost) correct to turn `e` into\n+// three distinct locals - one for each field - and pass a reference to only one\n+// of them to `f`. However, this would lead to a miscompilation because `b` and `c`\n+// might no longer appear right after `a` in memory.\n pub fn escaping() {\n-    // Verify this struct is not flattened.\n     f(&Escaping { a: 1, b: 2, c: g() }.a);\n }\n "}, {"sha": "1fa4e5db0cbbc9c0a28cbd5eca032a402294302a", "filename": "tests/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n-   |         -------- ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found future\n    |         |\n    |         arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/dont-suggest-missing-await.rs:14:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n note: function defined here\n   --> $DIR/dont-suggest-missing-await.rs:5:4\n    |"}, {"sha": "51ac9d86bfb4732adf573adba5c5ebf3570b6039", "filename": "tests/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -17,12 +17,10 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n LL |     fun(one(), two());\n-   |     ---        ^^^^^ expected opaque type, found a different opaque type\n+   |     ---        ^^^^^ expected future, found a different future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n note: function defined here"}, {"sha": "168ef8e9ee4e7264ff287af0341ec4188e34a830", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n    |\n LL |     async fn foo(&self) -> i32 {\n-   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found opaque type\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n    |\n note: type in trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22"}, {"sha": "cf6e5b4e436f259986108c3bf92e971e33710f04", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -86,7 +86,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n-        //~^ NOTE expected opaque type, found `Tuple`\n+        //~^ NOTE expected future, found `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }"}, {"sha": "44de282988baaed37a6472ee4d1f628f8b1e38ac", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -62,7 +62,7 @@ LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n-   |         ^^^^^^^^ expected opaque type, found `Tuple`\n+   |         ^^^^^^^^ expected future, found `Tuple`\n    |\n    = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`"}, {"sha": "5b7f18a98b53922ca602f986598c052436d706df", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,10 +2,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:23\n    |\n LL |         StructAsync { callback }.await;\n-   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |\n@@ -16,10 +14,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:9\n    |\n LL |         StructAsync { callback }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |\n@@ -30,10 +26,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:33\n    |\n LL |         StructAsync { callback }.await;\n-   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |"}, {"sha": "750b7a886ef9ac149043957c1ca8c949536544ff", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -4,12 +4,10 @@ error[E0308]: mismatched types\n LL |     std::mem::size_of_val(foo());\n    |     --------------------- ^^^^^\n    |     |                     |\n-   |     |                     expected `&_`, found opaque type\n+   |     |                     expected `&_`, found future\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |\n-   = note: expected reference `&_`\n-            found opaque type `impl Future<Output = ()>`\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n "}, {"sha": "d44af5b8dd8327dfb6452aa4421208927341dcc0", "filename": "tests/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n LL |         take_u32(x)\n-   |         -------- ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found future\n    |         |\n    |         arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await-closure.rs:16:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n note: function defined here\n   --> $DIR/suggest-missing-await-closure.rs:6:4\n    |"}, {"sha": "f0ec34a6a55573f60aa64b5750b09730a591f702", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n LL |     take_u32(x)\n-   |     -------- ^ expected `u32`, found opaque type\n+   |     -------- ^ expected `u32`, found future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await.rs:12:14\n+   |\n+LL |     take_u32(x)\n+   |              ^\n note: function defined here\n   --> $DIR/suggest-missing-await.rs:3:4\n    |\n@@ -22,10 +25,13 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n    |\n LL |     dummy()\n-   |     ^^^^^^^ expected `()`, found opaque type\n+   |     ^^^^^^^ expected `()`, found future\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await.rs:22:5\n+   |\n+LL |     dummy()\n+   |     ^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n@@ -45,7 +51,7 @@ LL | |         dummy()\n LL | |\n LL | |     } else {\n LL | |         dummy().await\n-   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |         ^^^^^^^^^^^^^ expected future, found `()`\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n@@ -67,7 +73,7 @@ LL | |         0 => dummy(),\n LL | |         1 => dummy(),\n    | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n-   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |              ^^^^^^^^^^^^^ expected future, found `()`\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n@@ -86,7 +92,7 @@ error[E0308]: mismatched types\n LL |     let _x = match dummy() {\n    |                    ------- this expression has type `impl Future<Output = ()>`\n LL |         () => {}\n-   |         ^^ expected opaque type, found `()`\n+   |         ^^ expected future, found `()`\n    |\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n@@ -102,7 +108,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Ok(_) => {}\n-   |         ^^^^^ expected opaque type, found `Result<_, _>`\n+   |         ^^^^^ expected future, found `Result<_, _>`\n    |\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n@@ -118,7 +124,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Err(_) => {}\n-   |         ^^^^^^ expected opaque type, found `Result<_, _>`\n+   |         ^^^^^^ expected future, found `Result<_, _>`\n    |\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`"}, {"sha": "fb6e9976583b26cae3fa6ddd08faa317caa06a07", "filename": "tests/ui/coherence/issue-85026.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fcoherence%2Fissue-85026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fcoherence%2Fissue-85026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fissue-85026.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,16 +1,16 @@\n error[E0785]: cannot define inherent `impl` for a dyn auto trait\n-  --> $DIR/issue-85026.rs:5:6\n+  --> $DIR/issue-85026.rs:5:1\n    |\n LL | impl dyn AutoTrait {}\n-   |      ^^^^^^^^^^^^^ impl requires at least one non-auto trait\n+   | ^^^^^^^^^^^^^^^^^^ impl requires at least one non-auto trait\n    |\n    = note: define and implement a new trait or type instead\n \n error[E0785]: cannot define inherent `impl` for a dyn auto trait\n-  --> $DIR/issue-85026.rs:8:6\n+  --> $DIR/issue-85026.rs:8:1\n    |\n LL | impl dyn Unpin {}\n-   |      ^^^^^^^^^ impl requires at least one non-auto trait\n+   | ^^^^^^^^^^^^^^ impl requires at least one non-auto trait\n    |\n    = note: define and implement a new trait or type instead\n "}, {"sha": "658a8406608760cccda1a77ac541775ae807e6eb", "filename": "tests/ui/const-generics/wrong-normalization.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,8 +1,8 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/wrong-normalization.rs:16:6\n+  --> $DIR/wrong-normalization.rs:16:1\n    |\n LL | impl <I8<{i8::MIN}> as Identity>::Identity {\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "8a02768676084c4b871b60b29dc929e4ae0a03e9", "filename": "tests/ui/error-codes/E0116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0116.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,7 +2,7 @@ error[E0116]: cannot define inherent `impl` for a type outside of the crate wher\n   --> $DIR/E0116.rs:1:1\n    |\n LL | impl Vec<u8> {}\n-   | ^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n "}, {"sha": "442f8a4f870f22c7ecc69bdab02fc10519c4d0b0", "filename": "tests/ui/error-codes/E0118.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0118.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,8 +1,8 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/E0118.rs:1:9\n+  --> $DIR/E0118.rs:1:1\n    |\n LL | impl<T> T {\n-   |         ^ impl requires a nominal type\n+   | ^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "ec4b5758c5b786f1d2977a55748766cdf12af84d", "filename": "tests/ui/error-codes/E0390.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0390.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,16 +1,16 @@\n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/E0390.rs:5:6\n+  --> $DIR/E0390.rs:5:1\n    |\n LL | impl *mut Foo {}\n-   |      ^^^^^^^^\n+   | ^^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/E0390.rs:7:6\n+  --> $DIR/E0390.rs:7:1\n    |\n LL | impl fn(Foo) {}\n-   |      ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n "}, {"sha": "dfe18e43eeea14df447d3dff5c28b7dab152741d", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102605.rs:13:20\n    |\n LL |     convert_result(foo())\n-   |     -------------- ^^^^^ expected `Result<(), _>`, found opaque type\n+   |     -------------- ^^^^^ expected `Result<(), _>`, found future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:     expected enum `Result<(), _>`\n-           found opaque type `impl Future<Output = Result<(), String>>`\n+note: calling an async function returns a future\n+  --> $DIR/issue-102605.rs:13:20\n+   |\n+LL |     convert_result(foo())\n+   |                    ^^^^^\n note: function defined here\n   --> $DIR/issue-102605.rs:7:4\n    |"}, {"sha": "c86e9eadc87cbe1bdbe3191a7e394f1c9ab1b901", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-99914.rs:9:27\n    |\n LL |     t.and_then(|t| -> _ { bar(t) });\n-   |                           ^^^^^^ expected `Result<_, Error>`, found opaque type\n+   |                           ^^^^^^ expected `Result<_, Error>`, found future\n    |\n-   = note:     expected enum `Result<_, Error>`\n-           found opaque type `impl Future<Output = ()>`\n help: try wrapping the expression in `Ok`\n    |\n LL |     t.and_then(|t| -> _ { Ok(bar(t)) });"}, {"sha": "e3a9caa64602681774d2705bca73baa68f8f3b23", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -303,10 +303,10 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:233:23\n+  --> $DIR/where-allowed.rs:233:1\n    |\n LL | impl <T = impl Debug> T {}\n-   |                       ^ impl requires a nominal type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "f5900afe2dcd1aa70ef820de65ba62e9fc6b198d", "filename": "tests/ui/incoherent-inherent-impls/needs-has-incoherent-impls.stderr", "status": "modified", "additions": 22, "deletions": 56, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,114 +1,80 @@\n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:5:1\n    |\n-LL | / impl extern_crate::StructWithAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructWithAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:7:5\n    |\n LL |     fn foo() {}\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:22:1\n    |\n-LL | / impl extern_crate::EnumWithAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumWithAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:24:5\n    |\n LL |     fn foo() {}\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6dc1680cf89f88e9c78ae55ece7748667baaea4a", "filename": "tests/ui/incoherent-inherent-impls/no-attr-empty-impl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,39 +2,39 @@ error[E0116]: cannot define inherent `impl` for a type outside of the crate wher\n   --> $DIR/no-attr-empty-impl.rs:4:1\n    |\n LL | impl extern_crate::StructWithAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:7:1\n    |\n LL | impl extern_crate::StructNoAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:10:1\n    |\n LL | impl extern_crate::EnumWithAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:13:1\n    |\n LL | impl extern_crate::EnumNoAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/no-attr-empty-impl.rs:16:6\n+  --> $DIR/no-attr-empty-impl.rs:16:1\n    |\n LL | impl f32 {}\n-   |      ^^^\n+   | ^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n "}, {"sha": "21aac58f1f20bf8f798f9d500b2df300129cc4df", "filename": "tests/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkinds-of-primitive-impl.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,32 +1,32 @@\n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:1:6\n+  --> $DIR/kinds-of-primitive-impl.rs:1:1\n    |\n LL | impl u8 {\n-   |      ^^\n+   | ^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:6:6\n+  --> $DIR/kinds-of-primitive-impl.rs:6:1\n    |\n LL | impl str {\n-   |      ^^^\n+   | ^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:12:6\n+  --> $DIR/kinds-of-primitive-impl.rs:12:1\n    |\n LL | impl char {\n-   |      ^^^^\n+   | ^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:21:6\n+  --> $DIR/kinds-of-primitive-impl.rs:21:1\n    |\n LL | impl &MyType {\n-   |      ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n    = note: you could also try moving the reference to uses of `MyType` (such as `self`) within the implementation"}, {"sha": "abc8538e5b330c12bbe9efced869be888ed7237c", "filename": "tests/ui/privacy/private-in-public-ill-formed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,16 +1,16 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/private-in-public-ill-formed.rs:14:10\n+  --> $DIR/private-in-public-ill-formed.rs:14:5\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/private-in-public-ill-formed.rs:31:10\n+  --> $DIR/private-in-public-ill-formed.rs:31:5\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "a4eefb41508fadfabb560ed24a01b08246fd25b6", "filename": "tests/ui/suggestions/if-then-neeing-semi.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -26,8 +26,8 @@ async fn async_extra_semicolon_same() {\n         //~^ HELP consider removing this semicolon\n     } else {\n         async_dummy() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -39,8 +39,8 @@ async fn async_extra_semicolon_different() {\n         //~^ HELP consider removing this semicolon\n     } else {\n         async_dummy2() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -52,8 +52,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n     } else {\n         async_dummy2() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~^ NOTE expected future, found a different future\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "6833e0bab2b8362c75ab6442ffc697c877e7a436", "filename": "tests/ui/suggestions/if-then-neeing-semi.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -9,14 +9,17 @@ LL | |         async_dummy();\n LL | |\n LL | |     } else {\n LL | |         async_dummy()\n-   | |         ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |         ^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/if-then-neeing-semi.rs:28:9\n+   |\n+LL |         async_dummy()\n+   |         ^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         async_dummy().await\n@@ -38,14 +41,17 @@ LL | |         async_dummy();\n LL | |\n LL | |     } else {\n LL | |         async_dummy2()\n-   | |         ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |         ^^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/if-then-neeing-semi.rs:41:9\n+   |\n+LL |         async_dummy2()\n+   |         ^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         async_dummy2().await\n@@ -69,14 +75,12 @@ LL | |         async_dummy()\n LL | |\n LL | |     } else {\n LL | |         async_dummy2()\n-   | |         ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n-...  |\n+   | |         ^^^^^^^^^^^^^^ expected future, found a different future\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:20:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "6d0a0c7b3faa2dc35913433901567978d1fc98c3", "filename": "tests/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -10,12 +10,9 @@ LL | |             cx.answer_str(\"hi\");\n    | |             this is found to be of type `()`\n LL | |         }\n LL | |         _ => cx.answer_str(\"hi\"),\n-   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found future\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = Test>`\n \n error: aborting due to previous error\n "}, {"sha": "11463c453d40722b5ff5fdf019e107cb3d426477", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -24,8 +24,8 @@ async fn async_extra_semicolon_same() {\n             //~^ HELP consider removing this semicolon\n         }\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -37,8 +37,8 @@ async fn async_extra_semicolon_different() {\n             //~^ HELP consider removing this semicolon\n         }\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -48,8 +48,7 @@ async fn async_different_futures() {\n         true => async_dummy(), //~ NOTE this is found to be\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~^ NOTE expected future, found a different future\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "cf3cf45ef402ae3883bba2c5b1575111f30ae214", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -9,14 +9,17 @@ LL | |             async_dummy();\n LL | |\n LL | |         }\n LL | |         false => async_dummy(),\n-   | |                  ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |                  ^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n+   |\n+LL |         false => async_dummy(),\n+   |                  ^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -38,14 +41,17 @@ LL | |             async_dummy();\n LL | |\n LL | |         }\n LL | |         false => async_dummy2(),\n-   | |                  ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |                  ^^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/match-prev-arm-needing-semi.rs:39:18\n+   |\n+LL |         false => async_dummy2(),\n+   |                  ^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -67,14 +73,12 @@ LL | |         true => async_dummy(),\n    | |                 ------------- this is found to be of type `impl Future<Output = ()>`\n LL | |\n LL | |         false => async_dummy2(),\n-   | |                  ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n-...  |\n+   | |                  ^^^^^^^^^^^^^^ expected future, found a different future\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:18:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "5c90d3012abf952981ebacfbb44482e44498c0ed", "filename": "tests/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,22 +2,20 @@ error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n LL |   fn thing_one() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ the expected opaque type\n+   |                     ------------------------------------ the expected future\n ...\n LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ the found opaque type\n+   |                     ------------------------------------ the found future\n ...\n LL | /     if true {\n LL | |         thing_one()\n    | |         ----------- expected because of this\n LL | |     } else {\n LL | |         thing_two()\n-   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   | |         ^^^^^^^^^^^ expected future, found a different future\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-              found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "6fd8a03fd8fed49405e2c80ff4a2735d2fac7443", "filename": "tests/ui/traits/trait-or-new-type-instead.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -1,11 +1,8 @@\n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/trait-or-new-type-instead.rs:1:1\n    |\n-LL | / impl<T> Option<T> {\n-LL | |\n-LL | |     pub fn foo(&self) { }\n-LL | | }\n-   | |_^ impl for type defined outside of crate.\n+LL | impl<T> Option<T> {\n+   | ^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n "}, {"sha": "fa16d321890ccfd6906f1f9334c932b237bd153c", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -2,10 +2,8 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n   --> $DIR/issue-98604.rs:9:5\n    |\n LL |     Box::new(test) as AsyncFnPtr;\n-   |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n    = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n \n error: aborting due to previous error"}, {"sha": "0d72ae118f3aa2d6f05d8f58bd562c95a609d358", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5348a89a77a49f6f57c13c0edf7f493fd410159a/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr?ref=5348a89a77a49f6f57c13c0edf7f493fd410159a", "patch": "@@ -18,10 +18,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n    |\n LL |     hello()\n-   |     ^^^^^^^ expected `()`, found opaque type\n+   |     ^^^^^^^ expected `()`, found future\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n+   |\n+LL |     hello()\n+   |     ^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     hello().await"}]}