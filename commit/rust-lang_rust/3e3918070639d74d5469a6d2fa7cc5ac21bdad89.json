{"sha": "3e3918070639d74d5469a6d2fa7cc5ac21bdad89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzkxODA3MDYzOWQ3NGQ1NDY5YTZkMmZhN2NjNWFjMjFiZGFkODk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-30T09:10:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-30T09:10:49Z"}, "message": "Rollup merge of #47603 - mark-i-m:markim_comments_0000, r=jseyfried\n\nRun rustfmt and add doc comments to libsyntax/ext/tt/quoted.rs\n\nI was already going to try to understand this code to try to implement rust-lang/rfcs#2298. I figured I would put that knowledge into comments and share... This PR contains _no changes_ to the code itself -- just formatting and comments.\n\nI'm not sure what the best way to do this is. I plan to make more such PR for other files, but I figured it would have fewer conflicts if I do it file by file...", "tree": {"sha": "ffb091b31d2e5576c7cb950eacf13db1a936a83a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb091b31d2e5576c7cb950eacf13db1a936a83a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3918070639d74d5469a6d2fa7cc5ac21bdad89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3918070639d74d5469a6d2fa7cc5ac21bdad89", "html_url": "https://github.com/rust-lang/rust/commit/3e3918070639d74d5469a6d2fa7cc5ac21bdad89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3918070639d74d5469a6d2fa7cc5ac21bdad89/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19aac099a50de471f8447e60e84b16dc58eb4c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19aac099a50de471f8447e60e84b16dc58eb4c2b", "html_url": "https://github.com/rust-lang/rust/commit/19aac099a50de471f8447e60e84b16dc58eb4c2b"}, {"sha": "576294237b10fff22bc462398ff7d06fffa05bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/576294237b10fff22bc462398ff7d06fffa05bd0", "html_url": "https://github.com/rust-lang/rust/commit/576294237b10fff22bc462398ff7d06fffa05bd0"}], "stats": {"total": 212, "additions": 173, "deletions": 39}, "files": [{"sha": "c55dfaba8f6b26bec457ea005cc78aa0d465d95b", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 173, "deletions": 39, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/3e3918070639d74d5469a6d2fa7cc5ac21bdad89/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3918070639d74d5469a6d2fa7cc5ac21bdad89/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=3e3918070639d74d5469a6d2fa7cc5ac21bdad89", "patch": "@@ -10,29 +10,34 @@\n \n use ast;\n use ext::tt::macro_parser;\n-use parse::{ParseSess, token};\n+use parse::{token, ParseSess};\n use print::pprust;\n use symbol::keywords;\n-use syntax_pos::{DUMMY_SP, Span, BytePos};\n+use syntax_pos::{BytePos, Span, DUMMY_SP};\n use tokenstream;\n \n use std::rc::Rc;\n \n+/// Contains the sub-token-trees of a \"delimited\" token tree, such as the contents of `(`. Note\n+/// that the delimiter itself might be `NoDelim`.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Delimited {\n     pub delim: token::DelimToken,\n     pub tts: Vec<TokenTree>,\n }\n \n impl Delimited {\n+    /// Return the opening delimiter (possibly `NoDelim`).\n     pub fn open_token(&self) -> token::Token {\n         token::OpenDelim(self.delim)\n     }\n \n+    /// Return the closing delimiter (possibly `NoDelim`).\n     pub fn close_token(&self) -> token::Token {\n         token::CloseDelim(self.delim)\n     }\n \n+    /// Return a `self::TokenTree` with a `Span` corresponding to the opening delimiter.\n     pub fn open_tt(&self, span: Span) -> TokenTree {\n         let open_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -42,6 +47,7 @@ impl Delimited {\n         TokenTree::Token(open_span, self.open_token())\n     }\n \n+    /// Return a `self::TokenTree` with a `Span` corresponding to the closing delimiter.\n     pub fn close_tt(&self, span: Span) -> TokenTree {\n         let close_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -68,12 +74,14 @@ pub struct SequenceRepetition {\n /// for token sequences.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum KleeneOp {\n+    /// Kleene star (`*`) for zero or more repetitions\n     ZeroOrMore,\n+    /// Kleene plus (`+`) for one or more repetitions\n     OneOrMore,\n }\n \n /// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`\n-/// are \"first-class\" token trees.\n+/// are \"first-class\" token trees. Useful for parsing macros.\n #[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum TokenTree {\n     Token(Span, token::Token),\n@@ -83,10 +91,15 @@ pub enum TokenTree {\n     /// E.g. `$var`\n     MetaVar(Span, ast::Ident),\n     /// E.g. `$var:expr`. This is only used in the left hand side of MBE macros.\n-    MetaVarDecl(Span, ast::Ident /* name to bind */, ast::Ident /* kind of nonterminal */),\n+    MetaVarDecl(\n+        Span,\n+        ast::Ident, /* name to bind */\n+        ast::Ident, /* kind of nonterminal */\n+    ),\n }\n \n impl TokenTree {\n+    /// Return the number of tokens in the tree.\n     pub fn len(&self) -> usize {\n         match *self {\n             TokenTree::Delimited(_, ref delimed) => match delimed.delim {\n@@ -98,6 +111,8 @@ impl TokenTree {\n         }\n     }\n \n+    /// Returns true if the given token tree contains no other tokens. This is vacuously true for\n+    /// single tokens or metavar/decls, but may be false for delimited trees or sequences.\n     pub fn is_empty(&self) -> bool {\n         match *self {\n             TokenTree::Delimited(_, ref delimed) => match delimed.delim {\n@@ -109,6 +124,7 @@ impl TokenTree {\n         }\n     }\n \n+    /// Get the `index`-th sub-token-tree. This only makes sense for delimited trees and sequences.\n     pub fn get_tt(&self, index: usize) -> TokenTree {\n         match (self, index) {\n             (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {\n@@ -131,21 +147,48 @@ impl TokenTree {\n     /// Retrieve the `TokenTree`'s span.\n     pub fn span(&self) -> Span {\n         match *self {\n-            TokenTree::Token(sp, _) |\n-            TokenTree::MetaVar(sp, _) |\n-            TokenTree::MetaVarDecl(sp, _, _) |\n-            TokenTree::Delimited(sp, _) |\n-            TokenTree::Sequence(sp, _) => sp,\n+            TokenTree::Token(sp, _)\n+            | TokenTree::MetaVar(sp, _)\n+            | TokenTree::MetaVarDecl(sp, _, _)\n+            | TokenTree::Delimited(sp, _)\n+            | TokenTree::Sequence(sp, _) => sp,\n         }\n     }\n }\n \n-pub fn parse(input: tokenstream::TokenStream, expect_matchers: bool, sess: &ParseSess)\n-             -> Vec<TokenTree> {\n+/// Takes a `tokenstream::TokenStream` and returns a `Vec<self::TokenTree>`. Specifically, this\n+/// takes a generic `TokenStream`, such as is used in the rest of the compiler, and returns a\n+/// collection of `TokenTree` for use in parsing a macro.\n+///\n+/// # Parameters\n+///\n+/// - `input`: a token stream to read from, the contents of which we are parsing.\n+/// - `expect_matchers`: `parse` can be used to parse either the \"patterns\" or the \"body\" of a\n+///   macro. Both take roughly the same form _except_ that in a pattern, metavars are declared with\n+///   their \"matcher\" type. For example `$var:expr` or `$id:ident`. In this example, `expr` and\n+///   `ident` are \"matchers\". They are not present in the body of a macro rule -- just in the\n+///   pattern, so we pass a parameter to indicate whether to expect them or not.\n+/// - `sess`: the parsing session. Any errors will be emitted to this session.\n+///\n+/// # Returns\n+///\n+/// A collection of `self::TokenTree`. There may also be some errors emitted to `sess`.\n+pub fn parse(\n+    input: tokenstream::TokenStream,\n+    expect_matchers: bool,\n+    sess: &ParseSess,\n+) -> Vec<TokenTree> {\n+    // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n+\n+    // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming\n+    // additional trees if need be.\n     let mut trees = input.trees();\n     while let Some(tree) = trees.next() {\n         let tree = parse_tree(tree, &mut trees, expect_matchers, sess);\n+\n+        // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n+        // parse out the matcher (i.e. in `$id:ident` this would parse the `:` and `ident`).\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n                 let span = match trees.next() {\n@@ -154,78 +197,149 @@ pub fn parse(input: tokenstream::TokenStream, expect_matchers: bool, sess: &Pars\n                             Some(kind) => {\n                                 let span = end_sp.with_lo(start_sp.lo());\n                                 result.push(TokenTree::MetaVarDecl(span, ident, kind));\n-                                continue\n+                                continue;\n                             }\n                             _ => end_sp,\n                         },\n-                        tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(span),\n+                        tree => tree.as_ref()\n+                            .map(tokenstream::TokenTree::span)\n+                            .unwrap_or(span),\n                     },\n-                    tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n+                    tree => tree.as_ref()\n+                        .map(tokenstream::TokenTree::span)\n+                        .unwrap_or(start_sp),\n                 };\n                 sess.missing_fragment_specifiers.borrow_mut().insert(span);\n-                result.push(TokenTree::MetaVarDecl(span, ident, keywords::Invalid.ident()));\n+                result.push(TokenTree::MetaVarDecl(\n+                    span,\n+                    ident,\n+                    keywords::Invalid.ident(),\n+                ));\n             }\n+\n+            // Not a metavar or no matchers allowed, so just return the tree\n             _ => result.push(tree),\n         }\n     }\n     result\n }\n \n-fn parse_tree<I>(tree: tokenstream::TokenTree,\n-                 trees: &mut I,\n-                 expect_matchers: bool,\n-                 sess: &ParseSess)\n-                 -> TokenTree\n-    where I: Iterator<Item = tokenstream::TokenTree>,\n+/// Takes a `tokenstream::TokenTree` and returns a `self::TokenTree`. Specifically, this takes a\n+/// generic `TokenTree`, such as is used in the rest of the compiler, and returns a `TokenTree`\n+/// for use in parsing a macro.\n+///\n+/// Converting the given tree may involve reading more tokens.\n+///\n+/// # Parameters\n+///\n+/// - `tree`: the tree we wish to convert.\n+/// - `trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n+///   converting `tree`\n+/// - `expect_matchers`: same as for `parse` (see above).\n+/// - `sess`: the parsing session. Any errors will be emitted to this session.\n+fn parse_tree<I>(\n+    tree: tokenstream::TokenTree,\n+    trees: &mut I,\n+    expect_matchers: bool,\n+    sess: &ParseSess,\n+) -> TokenTree\n+where\n+    I: Iterator<Item = tokenstream::TokenTree>,\n {\n+    // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n+        // `tree` is a `$` token. Look at the next token in `trees`\n         tokenstream::TokenTree::Token(span, token::Dollar) => match trees.next() {\n+            // `tree` is followed by a delimited set of token trees. This indicates the beginning\n+            // of a repetition sequence in the macro (e.g. `$(pat)*`).\n             Some(tokenstream::TokenTree::Delimited(span, delimited)) => {\n+                // Must have `(` not `{` or `[`\n                 if delimited.delim != token::Paren {\n                     let tok = pprust::token_to_string(&token::OpenDelim(delimited.delim));\n                     let msg = format!(\"expected `(`, found `{}`\", tok);\n                     sess.span_diagnostic.span_err(span, &msg);\n                 }\n+                // Parse the contents of the sequence itself\n                 let sequence = parse(delimited.tts.into(), expect_matchers, sess);\n+                // Get the Kleene operator and optional separator\n                 let (separator, op) = parse_sep_and_kleene_op(trees, span, sess);\n+                // Count the number of captured \"names\" (i.e. named metavars)\n                 let name_captures = macro_parser::count_names(&sequence);\n-                TokenTree::Sequence(span, Rc::new(SequenceRepetition {\n-                    tts: sequence,\n-                    separator,\n-                    op,\n-                    num_captures: name_captures,\n-                }))\n+                TokenTree::Sequence(\n+                    span,\n+                    Rc::new(SequenceRepetition {\n+                        tts: sequence,\n+                        separator,\n+                        op,\n+                        num_captures: name_captures,\n+                    }),\n+                )\n             }\n+\n+            // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n+            // metavariable that names the crate of the invokation.\n             Some(tokenstream::TokenTree::Token(ident_span, ref token)) if token.is_ident() => {\n                 let ident = token.ident().unwrap();\n                 let span = ident_span.with_lo(span.lo());\n                 if ident.name == keywords::Crate.name() {\n-                    let ident = ast::Ident { name: keywords::DollarCrate.name(), ..ident };\n+                    let ident = ast::Ident {\n+                        name: keywords::DollarCrate.name(),\n+                        ..ident\n+                    };\n                     TokenTree::Token(span, token::Ident(ident))\n                 } else {\n                     TokenTree::MetaVar(span, ident)\n                 }\n             }\n+\n+            // `tree` is followed by a random token. This is an error.\n             Some(tokenstream::TokenTree::Token(span, tok)) => {\n-                let msg = format!(\"expected identifier, found `{}`\", pprust::token_to_string(&tok));\n+                let msg = format!(\n+                    \"expected identifier, found `{}`\",\n+                    pprust::token_to_string(&tok)\n+                );\n                 sess.span_diagnostic.span_err(span, &msg);\n                 TokenTree::MetaVar(span, keywords::Invalid.ident())\n             }\n+\n+            // There are no more tokens. Just return the `$` we already have.\n             None => TokenTree::Token(span, token::Dollar),\n         },\n+\n+        // `tree` is an arbitrary token. Keep it.\n         tokenstream::TokenTree::Token(span, tok) => TokenTree::Token(span, tok),\n-        tokenstream::TokenTree::Delimited(span, delimited) => {\n-            TokenTree::Delimited(span, Rc::new(Delimited {\n+\n+        // `tree` is the beginning of a delimited set of tokens (e.g. `(` or `{`). We need to\n+        // descend into the delimited set and further parse it.\n+        tokenstream::TokenTree::Delimited(span, delimited) => TokenTree::Delimited(\n+            span,\n+            Rc::new(Delimited {\n                 delim: delimited.delim,\n                 tts: parse(delimited.tts.into(), expect_matchers, sess),\n-            }))\n-        }\n+            }),\n+        ),\n     }\n }\n \n-fn parse_sep_and_kleene_op<I>(input: &mut I, span: Span, sess: &ParseSess)\n-                              -> (Option<token::Token>, KleeneOp)\n-    where I: Iterator<Item = tokenstream::TokenTree>,\n+/// Attempt to parse a single Kleene star, possibly with a separator.\n+///\n+/// For example, in a pattern such as `$(a),*`, `a` is the pattern to be repeated, `,` is the\n+/// separator, and `*` is the Kleene operator. This function is specifically concerned with parsing\n+/// the last two tokens of such a pattern: namely, the optional separator and the Kleene operator\n+/// itself. Note that here we are parsing the _macro_ itself, rather than trying to match some\n+/// stream of tokens in an invocation of a macro.\n+///\n+/// This function will take some input iterator `input` corresponding to `span` and a parsing\n+/// session `sess`. If the next one (or possibly two) tokens in `input` correspond to a Kleene\n+/// operator and separator, then a tuple with `(separator, KleeneOp)` is returned. Otherwise, an\n+/// error with the appropriate span is emitted to `sess` and a dummy value is returned.\n+fn parse_sep_and_kleene_op<I>(\n+    input: &mut I,\n+    span: Span,\n+    sess: &ParseSess,\n+) -> (Option<token::Token>, KleeneOp)\n+where\n+    I: Iterator<Item = tokenstream::TokenTree>,\n {\n     fn kleene_op(token: &token::Token) -> Option<KleeneOp> {\n         match *token {\n@@ -235,20 +349,40 @@ fn parse_sep_and_kleene_op<I>(input: &mut I, span: Span, sess: &ParseSess)\n         }\n     }\n \n+    // We attempt to look at the next two token trees in `input`. I will call the first #1 and the\n+    // second #2. If #1 and #2 don't match a valid KleeneOp with/without separator, that is an\n+    // error, and we should emit an error on the most specific span possible.\n     let span = match input.next() {\n+        // #1 is a token\n         Some(tokenstream::TokenTree::Token(span, tok)) => match kleene_op(&tok) {\n+            // #1 is a KleeneOp with no separator\n             Some(op) => return (None, op),\n+\n+            // #1 is not a KleeneOp, but may be a separator... need to look at #2\n             None => match input.next() {\n+                // #2 is a token\n                 Some(tokenstream::TokenTree::Token(span, tok2)) => match kleene_op(&tok2) {\n+                    // #2 is a KleeneOp, so #1 must be a separator\n                     Some(op) => return (Some(tok), op),\n+\n+                    // #2 is not a KleeneOp... error\n                     None => span,\n                 },\n-                tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(span),\n-            }\n+\n+                // #2 is not a token at all... error\n+                tree => tree.as_ref()\n+                    .map(tokenstream::TokenTree::span)\n+                    .unwrap_or(span),\n+            },\n         },\n-        tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(span),\n+\n+        // #1 is not a token at all... error\n+        tree => tree.as_ref()\n+            .map(tokenstream::TokenTree::span)\n+            .unwrap_or(span),\n     };\n \n+    // Error...\n     sess.span_diagnostic.span_err(span, \"expected `*` or `+`\");\n     (None, KleeneOp::ZeroOrMore)\n }"}]}