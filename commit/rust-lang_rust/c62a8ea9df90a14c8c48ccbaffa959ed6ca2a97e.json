{"sha": "c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "node_id": "C_kwDOAAsO6NoAKGM2MmE4ZWE5ZGY5MGExNGM4YzQ4Y2NiYWZmYTk1OWVkNmNhMmE5N2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T02:55:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T02:55:40Z"}, "message": "Don't point out return span on every E0308", "tree": {"sha": "0c27ac988e5b85452df66a4bd7494fab733d1687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c27ac988e5b85452df66a4bd7494fab733d1687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "html_url": "https://github.com/rust-lang/rust/commit/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b57946a405d5b2a87e612335db033edb2c3427f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b57946a405d5b2a87e612335db033edb2c3427f", "html_url": "https://github.com/rust-lang/rust/commit/1b57946a405d5b2a87e612335db033edb2c3427f"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "b75a2f3edd95a56315ce3725dac4fbf5c1a1e20d", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "patch": "@@ -1648,9 +1648,30 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             );\n         }\n \n-        if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n+        let ret_coercion_span = fcx.ret_coercion_span.get();\n+\n+        if let Some(sp) = ret_coercion_span\n+            // If the closure has an explicit return type annotation, or if\n+            // the closure's return type has been inferred from outside\n+            // requirements (such as an Fn* trait bound), then a type error\n+            // may occur at the first return expression we see in the closure\n+            // (if it conflicts with the declared return type). Skip adding a\n+            // note in this case, since it would be incorrect.\n+            && !fcx.return_type_pre_known\n+        {\n+            err.span_note(\n+                sp,\n+                &format!(\n+                    \"return type inferred to be `{}` here\",\n+                    fcx.resolve_vars_if_possible(expected)\n+                ),\n+            );\n+        }\n+\n+        if let (Some(sp), Some(fn_output)) = (ret_coercion_span, fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }\n+\n         err\n     }\n "}, {"sha": "0595b9a73bed56ce5c733974686e89ab95e0c5ef", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "patch": "@@ -45,7 +45,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n-        self.report_closure_inferred_return_type(err, expected);\n     }\n \n     // Requires that the two types unify, and prints an error message if\n@@ -1418,25 +1417,4 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => false,\n         }\n     }\n-\n-    // Report the type inferred by the return statement.\n-    fn report_closure_inferred_return_type(&self, err: &mut Diagnostic, expected: Ty<'tcx>) {\n-        if let Some(sp) = self.ret_coercion_span.get()\n-            // If the closure has an explicit return type annotation, or if\n-            // the closure's return type has been inferred from outside\n-            // requirements (such as an Fn* trait bound), then a type error\n-            // may occur at the first return expression we see in the closure\n-            // (if it conflicts with the declared return type). Skip adding a\n-            // note in this case, since it would be incorrect.\n-            && !self.return_type_pre_known\n-        {\n-            err.span_note(\n-                sp,\n-                &format!(\n-                    \"return type inferred to be `{}` here\",\n-                    self.resolve_vars_if_possible(expected)\n-                ),\n-            );\n-        }\n-    }\n }"}, {"sha": "59607afec8f8da20f901af644eba78a8afe679c3", "filename": "src/test/ui/closures/issue-84128.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr?ref=c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "patch": "@@ -6,11 +6,6 @@ LL |         Foo(())\n    |         |\n    |         arguments to this struct are incorrect\n    |\n-note: return type inferred to be `{integer}` here\n-  --> $DIR/issue-84128.rs:10:20\n-   |\n-LL |             return Foo(0);\n-   |                    ^^^^^^\n note: tuple struct defined here\n   --> $DIR/issue-84128.rs:5:8\n    |"}, {"sha": "f2ba610e2d1f62ac15c37ae854113949196d076f", "filename": "src/test/ui/mismatched_types/dont-point-return-on-E0308.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.rs?ref=c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "patch": "@@ -0,0 +1,18 @@\n+// edition:2021\n+\n+async fn f(_: &()) {}\n+//~^ NOTE function defined here\n+//~| NOTE\n+// Second note is the span of the underlined argument, I think...\n+\n+fn main() {\n+    (|| async {\n+        Err::<(), ()>(())?;\n+        f(());\n+        //~^ ERROR mismatched types\n+        //~| NOTE arguments to this function are incorrect\n+        //~| NOTE expected `&()`, found `()`\n+        //~| HELP consider borrowing here\n+        Ok::<(), ()>(())\n+    })();\n+}"}, {"sha": "e79ab537b4c0fe284332e1652becc412a9b46788", "filename": "src/test/ui/mismatched_types/dont-point-return-on-E0308.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr?ref=c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-point-return-on-E0308.rs:10:11\n+   |\n+LL |         f(());\n+   |         - ^^\n+   |         | |\n+   |         | expected `&()`, found `()`\n+   |         | help: consider borrowing here: `&()`\n+   |         arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/dont-point-return-on-E0308.rs:3:10\n+   |\n+LL | async fn f(_: &()) {}\n+   |          ^ ------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}