{"sha": "228225842b0345b037fa1959b99178f68ea26d6e", "node_id": "C_kwDOAAsO6NoAKDIyODIyNTg0MmIwMzQ1YjAzN2ZhMTk1OWI5OTE3OGY2OGVhMjZkNmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-16T09:45:56Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-16T09:45:56Z"}, "message": "Document how constants as opaque patterns behave differently.", "tree": {"sha": "030d33e33a6437ff82348dd1f0536a9d8726a312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030d33e33a6437ff82348dd1f0536a9d8726a312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/228225842b0345b037fa1959b99178f68ea26d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/228225842b0345b037fa1959b99178f68ea26d6e", "html_url": "https://github.com/rust-lang/rust/commit/228225842b0345b037fa1959b99178f68ea26d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/228225842b0345b037fa1959b99178f68ea26d6e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08", "html_url": "https://github.com/rust-lang/rust/commit/87f9f99f9cdddda1f24fe9aea7dc1326d55b9c08"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "6a77146138bb582aa2df5cf59614c56598b379ab", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/228225842b0345b037fa1959b99178f68ea26d6e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228225842b0345b037fa1959b99178f68ea26d6e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=228225842b0345b037fa1959b99178f68ea26d6e", "patch": "@@ -844,8 +844,8 @@ impl<'tcx> Constructor<'tcx> {\n     }\n \n     /// Faster version of `is_covered_by` when applied to many constructors. `used_ctors` is\n-    /// assumed to be built from `matrix.head_ctors()` with wildcards filtered out, and `self` is\n-    /// assumed to have been split from a wildcard.\n+    /// assumed to be built from `matrix.head_ctors()` with wildcards and opaques filtered out,\n+    /// and `self` is assumed to have been split from a wildcard.\n     fn is_covered_by_any<'p>(\n         &self,\n         pcx: &PatCtxt<'_, 'p, 'tcx>,\n@@ -894,7 +894,7 @@ impl<'tcx> Constructor<'tcx> {\n /// in `to_ctors`: in some cases we only return `Missing`.\n #[derive(Debug)]\n pub(super) struct SplitWildcard<'tcx> {\n-    /// Constructors seen in the matrix.\n+    /// Constructors (other than wildcards and opaques) seen in the matrix.\n     matrix_ctors: Vec<Constructor<'tcx>>,\n     /// All the constructors for this type\n     all_ctors: SmallVec<[Constructor<'tcx>; 1]>,\n@@ -1037,7 +1037,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n         // Since `all_ctors` never contains wildcards, this won't recurse further.\n         self.all_ctors =\n             self.all_ctors.iter().flat_map(|ctor| ctor.split(pcx, ctors.clone())).collect();\n-        self.matrix_ctors = ctors.filter(|c| !c.is_wildcard()).cloned().collect();\n+        self.matrix_ctors = ctors.filter(|c| !matches!(c, Wildcard | Opaque)).cloned().collect();\n     }\n \n     /// Whether there are any value constructors for this type that are not present in the matrix."}, {"sha": "e5b6350690609812c788847ec2389c72350ac982", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/228225842b0345b037fa1959b99178f68ea26d6e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228225842b0345b037fa1959b99178f68ea26d6e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=228225842b0345b037fa1959b99178f68ea26d6e", "patch": "@@ -288,6 +288,22 @@\n //!\n //! The details are not necessary to understand this file, so we explain them in\n //! [`super::deconstruct_pat`]. Splitting is done by the [`Constructor::split`] function.\n+//!\n+//! # Constants in patterns\n+//!\n+//! There are two kinds of constants in patterns:\n+//!\n+//! * literals (`1`, `true`, `\"foo\"`)\n+//! * named or inline consts (`FOO`, `const { 5 + 6 }`)\n+//!\n+//! The latter are converted into other patterns with literals at the leaves. For example\n+//! `const_to_pat(const { [1, 2, 3] })` becomes an `Array(vec![Const(1), Const(2), Const(3)])`\n+//! pattern. This gets problematic when comparing the constant via `==` would behave differently\n+//! from matching on the constant converted to a pattern. Situations like that can occur, when\n+//! the user implements `PartialEq` manually, and thus could make `==` behave arbitrarily different.\n+//! In order to honor the `==` implementation, constants of types that implement `PartialEq` manually\n+//! stay as a full constant and become an `Opaque` pattern. These `Opaque` patterns do not participate\n+//! in exhaustiveness, specialization or overlap checking.\n \n use self::ArmType::*;\n use self::Usefulness::*;"}]}