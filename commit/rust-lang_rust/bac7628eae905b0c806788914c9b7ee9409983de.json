{"sha": "bac7628eae905b0c806788914c9b7ee9409983de", "node_id": "C_kwDOAAsO6NoAKGJhYzc2MjhlYWU5MDViMGM4MDY3ODg5MTRjOWI3ZWU5NDA5OTgzZGU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-02T22:00:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-05T21:50:48Z"}, "message": "Put a `ShallowResolver` within `OpportunisticVarResolver`.\n\nSo one doesn't have to be constructed every time.", "tree": {"sha": "d77696828408e7650758bb3a75064cc8017cdeb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77696828408e7650758bb3a75064cc8017cdeb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac7628eae905b0c806788914c9b7ee9409983de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac7628eae905b0c806788914c9b7ee9409983de", "html_url": "https://github.com/rust-lang/rust/commit/bac7628eae905b0c806788914c9b7ee9409983de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac7628eae905b0c806788914c9b7ee9409983de/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a67649675014546ce454d65bc8fe3ebd18e6a319", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67649675014546ce454d65bc8fe3ebd18e6a319", "html_url": "https://github.com/rust-lang/rust/commit/a67649675014546ce454d65bc8fe3ebd18e6a319"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "49cd9a9c3d0fbfc0f6a063d218d01b72f3188dcb", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bac7628eae905b0c806788914c9b7ee9409983de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7628eae905b0c806788914c9b7ee9409983de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=bac7628eae905b0c806788914c9b7ee9409983de", "patch": "@@ -16,26 +16,28 @@ use std::ops::ControlFlow;\n /// useful for printing messages etc but also required at various\n /// points for correctness.\n pub struct OpportunisticVarResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'tcx>,\n+    // The shallow resolver is used to resolve inference variables at every\n+    // level of the type.\n+    shallow_resolver: crate::infer::ShallowResolver<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     #[inline]\n     pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n-        OpportunisticVarResolver { infcx }\n+        OpportunisticVarResolver { shallow_resolver: crate::infer::ShallowResolver { infcx } }\n     }\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n+        TypeFolder::tcx(&self.shallow_resolver)\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.has_non_region_infer() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n-            let t = self.infcx.shallow_resolve(t);\n+            let t = self.shallow_resolver.fold_ty(t);\n             t.super_fold_with(self)\n         }\n     }\n@@ -44,7 +46,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n         if !ct.has_non_region_infer() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n-            let ct = self.infcx.shallow_resolve(ct);\n+            let ct = self.shallow_resolver.fold_const(ct);\n             ct.super_fold_with(self)\n         }\n     }"}]}