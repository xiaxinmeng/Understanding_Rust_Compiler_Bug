{"sha": "d93277b9150d50fae4b086cd6efe2a006b3d88da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzI3N2I5MTUwZDUwZmFlNGIwODZjZDZlZmUyYTAwNmIzZDg4ZGE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-31T03:01:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-02T23:40:41Z"}, "message": "Remove `GCX_PTR`.\n\nWe store an `ImplicitCtxt` pointer in a thread-local value (TLV). This allows\nimplicit access to a `GlobalCtxt` and some other things.\n\nWe also store a `GlobalCtxt` pointer in `GCX_PTR`. This is always the same\n`GlobalCtxt` as the one within the `ImplicitCtxt` pointer in TLV. `GCX_PTR`\nis only used in the parallel compiler's `handle_deadlock()` function.\n\nThis commit does the following.\n- It removes `GCX_PTR`.\n- It also adds `ImplicitCtxt::new()`, which constructs an `ImplicitCtxt` from a\n  `GlobalCtxt`. `ImplicitCtxt::new()` + `tls::enter_context()` is now\n  equivalent to the old `tls::enter_global()`.\n- Makes `tls::get_tlv()` public for the parallel compiler, because it's\n  now used in `handle_deadlock()`.", "tree": {"sha": "4ff3d4399abf9b54a0cf281ac08635fe6727be49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff3d4399abf9b54a0cf281ac08635fe6727be49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93277b9150d50fae4b086cd6efe2a006b3d88da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93277b9150d50fae4b086cd6efe2a006b3d88da", "html_url": "https://github.com/rust-lang/rust/commit/d93277b9150d50fae4b086cd6efe2a006b3d88da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93277b9150d50fae4b086cd6efe2a006b3d88da/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f042d749b0fc212bff6bdc44b84e134b878bff64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f042d749b0fc212bff6bdc44b84e134b878bff64", "html_url": "https://github.com/rust-lang/rust/commit/f042d749b0fc212bff6bdc44b84e134b878bff64"}], "stats": {"total": 108, "additions": 33, "deletions": 75}, "files": [{"sha": "d4f4ec7f6f0a3ae00a39e8fed136aeca559ef890", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -3677,7 +3677,6 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"scoped-tls\",\n  \"smallvec 1.4.0\",\n  \"tracing\",\n ]"}, {"sha": "3a562847d3eb5f7161054e2b80f451e003c8b99f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -752,7 +752,8 @@ impl<'tcx> QueryContext<'tcx> {\n     where\n         F: FnOnce(TyCtxt<'tcx>) -> R,\n     {\n-        ty::tls::enter_global(self.0, f)\n+        let icx = ty::tls::ImplicitCtxt::new(self.0);\n+        ty::tls::enter_context(&icx, |_| f(icx.tcx))\n     }\n \n     pub fn print_stats(&mut self) {\n@@ -811,8 +812,9 @@ pub fn create_global_ctxt<'tcx>(\n     });\n \n     // Do some initialization of the DepGraph that can only be done with the tcx available.\n-    ty::tls::enter_global(&gcx, |tcx| {\n-        tcx.sess.time(\"dep_graph_tcx_init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n+    let icx = ty::tls::ImplicitCtxt::new(&gcx);\n+    ty::tls::enter_context(&icx, |_| {\n+        icx.tcx.sess.time(\"dep_graph_tcx_init\", || rustc_incremental::dep_graph_tcx_init(icx.tcx));\n     });\n \n     QueryContext(gcx)"}, {"sha": "bbb2f9d8b2500b212e496ffcd5a79dc2965c4a29", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -10,10 +10,9 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n use rustc_data_structures::jobserver;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{Lock, Lrc};\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n-use rustc_middle::ty;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{self, CrateType};\n@@ -144,12 +143,10 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n \n     let main_handler = move || {\n         rustc_ast::with_session_globals(edition, || {\n-            ty::tls::GCX_PTR.set(&Lock::new(0), || {\n-                if let Some(stderr) = stderr {\n-                    io::set_panic(Some(box Sink(stderr.clone())));\n-                }\n-                f()\n-            })\n+            if let Some(stderr) = stderr {\n+                io::set_panic(Some(box Sink(stderr.clone())));\n+            }\n+            f()\n         })\n     };\n \n@@ -163,6 +160,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n+    use rustc_middle::ty;\n     crate::callbacks::setup_callbacks();\n \n     let mut config = rayon::ThreadPoolBuilder::new()\n@@ -189,12 +187,10 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n                 let main_handler = move |thread: rayon::ThreadBuilder| {\n                     rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n                         rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n-                            ty::tls::GCX_PTR.set(&Lock::new(0), || {\n-                                if let Some(stderr) = stderr {\n-                                    io::set_panic(Some(box Sink(stderr.clone())));\n-                                }\n-                                thread.run()\n-                            })\n+                            if let Some(stderr) = stderr {\n+                                io::set_panic(Some(box Sink(stderr.clone())));\n+                            }\n+                            thread.run()\n                         })\n                     })\n                 };"}, {"sha": "03431cb5a885ed4310ac549a8ffe46387f4cc7b5", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -12,7 +12,6 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../librustc_arena\" }\n bitflags = \"1.2.1\"\n-scoped-tls = \"1.0\"\n log = { package = \"tracing\", version = \"0.1\" }\n rustc-rayon-core = \"0.3.0\"\n polonius-engine = \"0.12.0\""}, {"sha": "a49287840e19e0eb255aa57b241037e89845c00d", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -55,8 +55,6 @@\n #[macro_use]\n extern crate bitflags;\n #[macro_use]\n-extern crate scoped_tls;\n-#[macro_use]\n extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_data_structures;"}, {"sha": "6cbf5db8373a074be799c098a1eea09b50b71fcb", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 10, "deletions": 49, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -1632,7 +1632,6 @@ pub mod tls {\n     use crate::ty::query;\n     use rustc_data_structures::sync::{self, Lock};\n     use rustc_data_structures::thin_vec::ThinVec;\n-    use rustc_data_structures::OnDrop;\n     use rustc_errors::Diagnostic;\n     use std::mem;\n \n@@ -1649,8 +1648,7 @@ pub mod tls {\n     /// in this module.\n     #[derive(Clone)]\n     pub struct ImplicitCtxt<'a, 'tcx> {\n-        /// The current `TyCtxt`. Initially created by `enter_global` and updated\n-        /// by `enter_local` with a new local interner.\n+        /// The current `TyCtxt`.\n         pub tcx: TyCtxt<'tcx>,\n \n         /// The current query job, if any. This is updated by `JobOwner::start` in\n@@ -1669,6 +1667,13 @@ pub mod tls {\n         pub task_deps: Option<&'a Lock<TaskDeps>>,\n     }\n \n+    impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {\n+        pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {\n+            let tcx = TyCtxt { gcx };\n+            ImplicitCtxt { tcx, query: None, diagnostics: None, layout_depth: 0, task_deps: None }\n+        }\n+    }\n+\n     /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs\n     /// to `value` during the call to `f`. It is restored to its previous value after.\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n@@ -1682,7 +1687,7 @@ pub mod tls {\n     /// This is used to get the pointer to the current `ImplicitCtxt`.\n     #[cfg(parallel_compiler)]\n     #[inline]\n-    fn get_tlv() -> usize {\n+    pub fn get_tlv() -> usize {\n         rayon_core::tlv::get()\n     }\n \n@@ -1699,7 +1704,7 @@ pub mod tls {\n     #[inline]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         let old = get_tlv();\n-        let _reset = OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n+        let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n         TLV.with(|tlv| tlv.set(value));\n         f()\n     }\n@@ -1720,50 +1725,6 @@ pub mod tls {\n         set_tlv(context as *const _ as usize, || f(&context))\n     }\n \n-    /// Enters `GlobalCtxt` by setting up librustc_ast callbacks and\n-    /// creating a initial `TyCtxt` and `ImplicitCtxt`.\n-    /// This happens once per rustc session and `TyCtxt`s only exists\n-    /// inside the `f` function.\n-    pub fn enter_global<'tcx, F, R>(gcx: &'tcx GlobalCtxt<'tcx>, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        // Update `GCX_PTR` to indicate there's a `GlobalCtxt` available.\n-        GCX_PTR.with(|lock| {\n-            *lock.lock() = gcx as *const _ as usize;\n-        });\n-        // Set `GCX_PTR` back to 0 when we exit.\n-        let _on_drop = OnDrop(move || {\n-            GCX_PTR.with(|lock| *lock.lock() = 0);\n-        });\n-\n-        let tcx = TyCtxt { gcx };\n-        let icx =\n-            ImplicitCtxt { tcx, query: None, diagnostics: None, layout_depth: 0, task_deps: None };\n-        enter_context(&icx, |_| f(tcx))\n-    }\n-\n-    scoped_thread_local! {\n-        /// Stores a pointer to the `GlobalCtxt` if one is available.\n-        /// This is used to access the `GlobalCtxt` in the deadlock handler given to Rayon.\n-        pub static GCX_PTR: Lock<usize>\n-    }\n-\n-    /// Creates a `TyCtxt` and `ImplicitCtxt` based on the `GCX_PTR` thread local.\n-    /// This is used in the deadlock handler.\n-    pub unsafe fn with_global<F, R>(f: F) -> R\n-    where\n-        F: for<'tcx> FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let gcx = GCX_PTR.with(|lock| *lock.lock());\n-        assert!(gcx != 0);\n-        let gcx = &*(gcx as *const GlobalCtxt<'_>);\n-        let tcx = TyCtxt { gcx };\n-        let icx =\n-            ImplicitCtxt { query: None, diagnostics: None, tcx, layout_depth: 0, task_deps: None };\n-        enter_context(&icx, |_| f(tcx))\n-    }\n-\n     /// Allows access to the current `ImplicitCtxt` in a closure if one is available.\n     #[inline]\n     pub fn with_context_opt<F, R>(f: F) -> R"}, {"sha": "1093b4dde0ebf0c4669f9f150ff1956d58361e31", "filename": "src/librustc_middle/ty/query/job.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93277b9150d50fae4b086cd6efe2a006b3d88da/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fjob.rs?ref=d93277b9150d50fae4b086cd6efe2a006b3d88da", "patch": "@@ -10,18 +10,21 @@ use std::thread;\n pub unsafe fn handle_deadlock() {\n     let registry = rayon_core::Registry::current();\n \n-    let gcx_ptr = tls::GCX_PTR.with(|gcx_ptr| gcx_ptr as *const _);\n-    let gcx_ptr = &*gcx_ptr;\n+    let context = tls::get_tlv();\n+    assert!(context != 0);\n+    rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n+    let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n \n     let span_session_globals = rustc_span::SESSION_GLOBALS.with(|ssg| ssg as *const _);\n     let span_session_globals = &*span_session_globals;\n     let ast_session_globals = rustc_ast::attr::SESSION_GLOBALS.with(|asg| asg as *const _);\n     let ast_session_globals = &*ast_session_globals;\n     thread::spawn(move || {\n-        tls::GCX_PTR.set(gcx_ptr, || {\n+        tls::enter_context(icx, |_| {\n             rustc_ast::attr::SESSION_GLOBALS.set(ast_session_globals, || {\n-                rustc_span::SESSION_GLOBALS\n-                    .set(span_session_globals, || tls::with_global(|tcx| deadlock(tcx, &registry)))\n+                rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n+                    tls::with_context(|icx| deadlock(icx.tcx, &registry))\n+                })\n             });\n         })\n     });"}]}