{"sha": "8b14b84933467d7037feef9c37cb968a5cc9b607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTRiODQ5MzM0NjdkNzAzN2ZlZWY5YzM3Y2I5NjhhNWNjOWI2MDc=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-28T21:03:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:01:02Z"}, "message": "Assume unevaluated consts are equal to the other consts and add ConstEquate obligation. This delays\nthe need to evaluate consts eagerly and therefore gets around const eval query cycles.", "tree": {"sha": "bc95c45ace64478de738ad398db26ec82fb5557c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc95c45ace64478de738ad398db26ec82fb5557c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b14b84933467d7037feef9c37cb968a5cc9b607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b14b84933467d7037feef9c37cb968a5cc9b607", "html_url": "https://github.com/rust-lang/rust/commit/8b14b84933467d7037feef9c37cb968a5cc9b607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b14b84933467d7037feef9c37cb968a5cc9b607/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09739c22db948a7a2ed13e8f466cb22adb1d7818", "url": "https://api.github.com/repos/rust-lang/rust/commits/09739c22db948a7a2ed13e8f466cb22adb1d7818", "html_url": "https://github.com/rust-lang/rust/commit/09739c22db948a7a2ed13e8f466cb22adb1d7818"}], "stats": {"total": 493, "additions": 371, "deletions": 122}, "files": [{"sha": "c7a7cf89b4f1b738a16a6909f15784648e48e390", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -25,7 +25,7 @@ use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, BoundVar, Ty, TyCtxt};\n+use rustc_middle::ty::{self, BoundVar, Const, Ty, TyCtxt};\n use std::fmt::Debug;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n@@ -671,6 +671,13 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n+    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {\n+        span_bug!(\n+            self.cause.span(self.infcx.tcx),\n+            \"lazy_normalization_consts: unreachable `const_equate`\"\n+        );\n+    }\n+\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "b995ff989e97597da3507596f030d2cf5919707c", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -164,7 +164,6 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n-\n             _ => {}\n         }\n \n@@ -375,6 +374,20 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         debug!(\"generalize: success {{ {:?}, {:?} }}\", ty, needs_wf);\n         Ok(Generalization { ty, needs_wf })\n     }\n+\n+    pub fn add_const_equate_obligation(\n+        &mut self,\n+        a_is_expected: bool,\n+        a: &'tcx ty::Const<'tcx>,\n+        b: &'tcx ty::Const<'tcx>,\n+    ) {\n+        let predicate = if a_is_expected {\n+            ty::Predicate::ConstEquate(a, b)\n+        } else {\n+            ty::Predicate::ConstEquate(b, a)\n+        };\n+        self.obligations.push(Obligation::new(self.trace.cause.clone(), self.param_env, predicate));\n+    }\n }\n \n struct Generalizer<'cx, 'tcx> {\n@@ -637,6 +650,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(..) => Ok(c),\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }"}, {"sha": "eebcc0ff12a6ae550a84a3de95649d79a87fb90c", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -4,7 +4,7 @@ use super::Subtype;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyVar;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ConstKind, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n \n@@ -119,7 +119,17 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        self.fields.infcx.super_combine_consts(self, a, b)\n+        match (a.val, b.val) {\n+            (ConstKind::Unevaluated(..), _) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(b)\n+            }\n+            (_, ConstKind::Unevaluated(..)) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(a)\n+            }\n+            _ => self.fields.infcx.super_combine_consts(self, a, b),\n+        }\n     }\n \n     fn binders<T>("}, {"sha": "583e80efc7c5564d24ce609d6a90216dba212bc6", "filename": "src/librustc_infer/infer/glb.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fglb.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -79,7 +79,17 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        self.fields.infcx.super_combine_consts(self, a, b)\n+        match (a.val, b.val) {\n+            (ty::ConstKind::Unevaluated(..), _) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(b)\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(a)\n+            }\n+            _ => self.fields.infcx.super_combine_consts(self, a, b),\n+        }\n     }\n \n     fn binders<T>("}, {"sha": "e613bd5dc7a891b797aa1c0ad5a4ba36912e5b8d", "filename": "src/librustc_infer/infer/lub.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flub.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -79,7 +79,17 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        self.fields.infcx.super_combine_consts(self, a, b)\n+        match (a.val, b.val) {\n+            (ty::ConstKind::Unevaluated(..), _) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(b)\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(a)\n+            }\n+            _ => self.fields.infcx.super_combine_consts(self, a, b),\n+        }\n     }\n \n     fn binders<T>("}, {"sha": "9c81a1153958b5a22cc5dfca7dec50cd7ac4c3ae", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1490,6 +1490,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.report_and_explain_type_error(trace, &err)\n     }\n \n+    pub fn report_mismatched_consts(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        expected: &'tcx ty::Const<'tcx>,\n+        actual: &'tcx ty::Const<'tcx>,\n+        err: TypeError<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let trace = TypeTrace::consts(cause, true, expected, actual);\n+        self.report_and_explain_type_error(trace, &err)\n+    }\n+\n     pub fn replace_bound_vars_with_fresh_vars<T>(\n         &self,\n         span: Span,\n@@ -1777,6 +1788,15 @@ impl<'tcx> TypeTrace<'tcx> {\n         TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n \n+    pub fn consts(\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: &'tcx ty::Const<'tcx>,\n+        b: &'tcx ty::Const<'tcx>,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+    }\n+\n     pub fn dummy(tcx: TyCtxt<'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n             cause: ObligationCause::dummy(),"}, {"sha": "32f11abdc9797eb20951f4ac86e2c4d173951127", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -77,6 +77,8 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// delegate.\n     fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>);\n \n+    fn const_equate(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+\n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n \n@@ -592,8 +594,16 @@ where\n             b = self.infcx.shallow_resolve(b);\n         }\n \n-        match b.val {\n-            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+        match (a.val, b.val) {\n+            (ty::ConstKind::Unevaluated(..), _) => {\n+                self.delegate.const_equate(a, b);\n+                Ok(b)\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) => {\n+                self.delegate.const_equate(a, b);\n+                Ok(a)\n+            }\n+            (_, ty::ConstKind::Infer(InferConst::Var(_))) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n             }\n@@ -976,6 +986,7 @@ where\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(..) => Ok(a),\n             _ => relate::super_relate_consts(self, a, a),\n         }\n     }"}, {"sha": "289457e2bd0c294ea1fcfa63b235d044d9caf14f", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -19,7 +19,8 @@ pub fn explicit_outlives_bounds<'tcx>(\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::TypeOutlives(..)\n-        | ty::Predicate::ConstEvaluatable(..) => None,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => None,\n         ty::Predicate::RegionOutlives(ref data) => data\n             .no_bound_vars()\n             .map(|ty::OutlivesPredicate(r_a, r_b)| OutlivesBound::RegionSubRegion(r_b, r_a)),"}, {"sha": "91b43dd082f14f750891596a8628a37b51100a9c", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -155,7 +155,17 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        self.fields.infcx.super_combine_consts(self, a, b)\n+        match (a.val, b.val) {\n+            (ty::ConstKind::Unevaluated(..), _) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(b)\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) => {\n+                self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+                Ok(a)\n+            }\n+            _ => self.fields.infcx.super_combine_consts(self, a, b),\n+        }\n     }\n \n     fn binders<T>("}, {"sha": "8d95904b355da7247def7b9629a384dd624b917e", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -10,7 +10,7 @@ pub mod util;\n \n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_span::Span;\n \n pub use self::FulfillmentErrorCode::*;\n@@ -81,6 +81,7 @@ pub enum FulfillmentErrorCode<'tcx> {\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate\n+    CodeConstEquateError(ExpectedFound<&'tcx Const<'tcx>>, TypeError<'tcx>),\n     CodeAmbiguity,\n }\n "}, {"sha": "c48e58c04824e03a13e3a2a461957754bb58c0d1", "filename": "src/librustc_infer/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -41,6 +41,9 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n             super::CodeSubtypeError(ref a, ref b) => {\n                 write!(f, \"CodeSubtypeError({:?}, {:?})\", a, b)\n             }\n+            super::CodeConstEquateError(ref a, ref b) => {\n+                write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n+            }\n             super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n         }\n     }"}, {"sha": "ee903b676bae95cf7e3a600fa2ab197bd5e13635", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -42,6 +42,8 @@ pub fn anonymize_predicate<'tcx>(\n         ty::Predicate::ConstEvaluatable(def_id, substs) => {\n             ty::Predicate::ConstEvaluatable(def_id, substs)\n         }\n+\n+        ty::Predicate::ConstEquate(c1, c2) => ty::Predicate::ConstEquate(c1, c2),\n     }\n }\n \n@@ -187,6 +189,10 @@ impl Elaborator<'tcx> {\n                 // Currently, we do not elaborate const-evaluatable\n                 // predicates.\n             }\n+            ty::Predicate::ConstEquate(..) => {\n+                // Currently, we do not elaborate const-equate\n+                // predicates.\n+            }\n             ty::Predicate::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`.\n             }"}, {"sha": "bca91fb7b5d168629a4bff103892fb9eb26d2ff4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1221,7 +1221,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n-                    ConstEvaluatable(..) => continue,\n+                    ConstEvaluatable(..) |\n+                    ConstEquate(..) => continue,\n                 };\n                 if predicate.is_global() {\n                     cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {"}, {"sha": "36bc44f5e50329b9734a8bd37168e33b9a334b78", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1054,6 +1054,9 @@ pub enum Predicate<'tcx> {\n \n     /// Constant initializer must evaluate successfully.\n     ConstEvaluatable(DefId, SubstsRef<'tcx>),\n+\n+    /// Constants must be equal. The first component is the const that is expected.\n+    ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1172,6 +1175,9 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::ConstEvaluatable(def_id, const_substs) => {\n                 Predicate::ConstEvaluatable(def_id, const_substs.subst(tcx, substs))\n             }\n+            Predicate::ConstEquate(c1, c2) => {\n+                Predicate::ConstEquate(c1.subst(tcx, substs), c2.subst(tcx, substs))\n+            }\n         }\n     }\n }\n@@ -1349,7 +1355,8 @@ impl<'tcx> Predicate<'tcx> {\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n             | Predicate::TypeOutlives(..)\n-            | Predicate::ConstEvaluatable(..) => None,\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => None,\n         }\n     }\n \n@@ -1363,7 +1370,8 @@ impl<'tcx> Predicate<'tcx> {\n             | Predicate::WellFormed(..)\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n-            | Predicate::ConstEvaluatable(..) => None,\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => None,\n         }\n     }\n }"}, {"sha": "3e6a12df6887dd49416923986fb668abad80c5e8", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -83,6 +83,11 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 }\n             }\n \n+            ty::Array(element, _) => {\n+                // Don't look into the len const as it doesn't affect regions\n+                compute_components(tcx, element, out);\n+            }\n+\n             ty::Closure(_, ref substs) => {\n                 for upvar_ty in substs.as_closure().upvar_tys() {\n                     compute_components(tcx, upvar_ty, out);\n@@ -158,7 +163,6 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n             ty::Opaque(..) |      // OutlivesNominalType (ish)\n             ty::Foreign(..) |     // OutlivesNominalType\n             ty::Str |             // OutlivesScalar (ish)\n-            ty::Array(..) |       // ...\n             ty::Slice(..) |       // ...\n             ty::RawPtr(..) |      // ...\n             ty::Ref(..) |         // OutlivesReference"}, {"sha": "2502a4a13a8f0e7550658d00c33a17a7a0707ee9", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -2058,6 +2058,13 @@ define_print_and_forward_display! {\n                    print_value_path(def_id, substs),\n                    write(\"` can be evaluated\"))\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                p!(write(\"the constant `\"),\n+                   print(c1),\n+                   write(\"` equals `\"),\n+                   print(c2),\n+                   write(\"`\"))\n+            }\n         }\n     }\n "}, {"sha": "0795990649f43777deaa9bc030069874d48ece74", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -432,16 +432,17 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             match relation.relate(&sz_a, &sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n                 Err(err) => {\n-                    // Check whether the lengths are both concrete/known values,\n-                    // but are unequal, for better diagnostics.\n-                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n-                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n-                    match (sz_a, sz_b) {\n-                        (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n-                            expected_found(relation, &sz_a_val, &sz_b_val),\n-                        )),\n-                        _ => Err(err),\n-                    }\n+                    //                    // Check whether the lengths are both concrete/known values,\n+                    //                    // but are unequal, for better diagnostics.\n+                    //                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n+                    //                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n+                    //                    match (sz_a, sz_b) {\n+                    //                        (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n+                    //                            expected_found(relation, &sz_a_val, &sz_b_val),\n+                    //                        )),\n+                    //                        _ => Err(err),\n+                    //                    }\n+                    Err(err)\n                 }\n             }\n         }\n@@ -604,14 +605,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         }\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n-        (\n-            ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n-            ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n-        ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n-            let substs =\n-                relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-            Ok(ty::ConstKind::Unevaluated(a_def_id, &substs, a_promoted))\n-        }\n+        // (\n+        //     ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n+        //     ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n+        // ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n+        //     let substs =\n+        //         relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n+        //     Ok(ty::ConstKind::Unevaluated(a_def_id, &substs, a_promoted))\n+        // }\n         _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n     };\n     new_const_val.map(|val| tcx.mk_const(ty::Const { val, ty: a.ty }))"}, {"sha": "cdb7e34546af8999f3e2fd84f83f476174554925", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -240,6 +240,7 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                 write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n         }\n     }\n }\n@@ -492,6 +493,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                 tcx.lift(&substs).map(|substs| ty::Predicate::ConstEvaluatable(def_id, substs))\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                tcx.lift(&(c1, c2)).map(|(c1, c2)| ty::Predicate::ConstEquate(c1, c2))\n+            }\n         }\n     }\n }"}, {"sha": "c3b0bd82398cb9ae911bd5fa8cab7fbb9ac16595", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -2,7 +2,7 @@ use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRe\n use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::borrow_check::constraints::OutlivesConstraint;\n@@ -99,6 +99,8 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         }\n     }\n \n+    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {}\n+\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "a2e2c1bf9eda30e1dece280f9c82f4301732a36e", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -28,7 +28,8 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | Predicate::TypeOutlives(_)\n                 | Predicate::WellFormed(_)\n                 | Predicate::Projection(_)\n-                | Predicate::ConstEvaluatable(..) => continue,\n+                | Predicate::ConstEvaluatable(..)\n+                | Predicate::ConstEquate(..) => continue,\n                 Predicate::ObjectSafe(_) => {\n                     bug!(\"object safe predicate on function: {:#?}\", predicate)\n                 }"}, {"sha": "396965fcfb8b790c63b5eedaaa694b8d3b897bbf", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1277,7 +1277,8 @@ crate fn required_region_bounds(\n                 | ty::Predicate::ObjectSafe(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::RegionOutlives(..)\n-                | ty::Predicate::ConstEvaluatable(..) => None,\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => None,\n                 ty::Predicate::TypeOutlives(predicate) => {\n                     // Search for a bound of the form `erased_self_ty\n                     // : 'a`, but be wary of something like `for<'a>"}, {"sha": "1b8f2e1ae9fd41581e62321dec688594da2761e5", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -615,6 +615,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation\n                         )\n                     }\n+\n+                    \n+                    ty::Predicate::ConstEquate(..) => {\n+                        // Errors for `ConstEquate` predicates show up as\n+                        // `SelectionError::ConstEvalFailure`,\n+                        // not `Unimplemented`.\n+                        span_bug!(\n+                            span,\n+                            \"const-equate requirement gave wrong error: `{:?}`\",\n+                            obligation\n+                        )\n+                    }\n                 }\n             }\n \n@@ -1092,6 +1104,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 )\n                 .emit();\n             }\n+            FulfillmentErrorCode::CodeConstEquateError(ref expected_found, ref err) => {\n+                self.report_mismatched_consts(\n+                    &error.obligation.cause,\n+                    expected_found.expected,\n+                    expected_found.found,\n+                    err.clone(),\n+                )\n+                .emit();\n+            }\n         }\n     }\n "}, {"sha": "18ba46dce23d38a809d6476ef57764a7b3a120ff", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -3,8 +3,9 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_infer::traits::{TraitEngine, TraitEngineExt as _};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::{self, ToPolyTraitRef, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Const, ToPolyTraitRef, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n use super::project;\n@@ -520,6 +521,65 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     Err(err) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))),\n                 }\n             }\n+\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                debug!(\"equating consts: c1={:?} c2={:?}\", c1, c2);\n+\n+                let stalled_on = &mut pending_obligation.stalled_on;\n+\n+                let mut evaluate = |c: &'tcx Const<'tcx>| {\n+                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                        match self.selcx.infcx().const_eval_resolve(\n+                            obligation.param_env,\n+                            def_id,\n+                            substs,\n+                            promoted,\n+                            Some(obligation.cause.span),\n+                        ) {\n+                            Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n+                            Err(ErrorHandled::TooGeneric) => {\n+                                stalled_on.append(\n+                                    &mut substs.types().filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty)).collect(),\n+                                );\n+                                Err(ProcessResult::Unchanged)\n+                            }\n+                            Err(err) => {\n+                                Err(ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))))\n+                            }\n+                        }\n+                    } else {\n+                        Ok(c)\n+                    }\n+                };\n+\n+                match (evaluate(c1), evaluate(c2)) {\n+                    (Ok(c1), Ok(c2)) => {\n+                        match self\n+                            .selcx\n+                            .infcx()\n+                            .at(&obligation.cause, obligation.param_env)\n+                            .eq(c1, c2)\n+                        {\n+                            Ok(_) => ProcessResult::Changed(vec![]),\n+                            Err(err) => {\n+                                ProcessResult::Error(FulfillmentErrorCode::CodeConstEquateError(\n+                                    ExpectedFound::new(true, c1, c2),\n+                                    err,\n+                                ))\n+                            }\n+                        }\n+                    }\n+                    // FIXME(skinny121) How to report both errors if both produces errors?\n+                    (Err(result @ ProcessResult::Error(_)), _)\n+                    | (_, Err(result @ ProcessResult::Error(_))) => result,\n+                    (Err(ProcessResult::Unchanged), _) | (_, Err(ProcessResult::Unchanged)) => {\n+                        ProcessResult::Unchanged\n+                    }\n+                    _ => {\n+                        unreachable!(\"evaluate shouldn't itself return ProcessResult::Changed(..)\")\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "3b4533b04ba4c19c4cbc7ca0d1935ad3d6cbb33c", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 57, "deletions": 41, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -16,8 +16,8 @@ use crate::traits::{self, Obligation, ObligationCause};\n use rustc_errors::{Applicability, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n+use rustc_middle::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -281,7 +281,8 @@ fn predicates_reference_self(\n                 | ty::Predicate::RegionOutlives(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::Subtype(..)\n-                | ty::Predicate::ConstEvaluatable(..) => None,\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => None,\n             }\n         })\n         .collect()\n@@ -313,7 +314,8 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::TypeOutlives(..)\n-        | ty::Predicate::ConstEvaluatable(..) => false,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => false,\n     })\n }\n \n@@ -724,51 +726,65 @@ fn contains_illegal_self_type_reference<'tcx>(\n     // object type, and we cannot resolve `Self as SomeOtherTrait`\n     // without knowing what `Self` is.\n \n-    let mut supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>> = None;\n-    let self_ty = tcx.types.self_param;\n-\n-    let mut walker = ty.walk();\n-    while let Some(arg) = walker.next() {\n-        if arg == self_ty.into() {\n-            return true;\n-        }\n-\n-        // Special-case projections (everything else is walked normally).\n-        if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Projection(ref data) = ty.kind {\n-                // This is a projected type `<Foo as SomeTrait>::X`.\n+    struct IllegalSelfTypeVisitor<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        trait_def_id: DefId,\n+        supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>>,\n+    }\n \n-                // Compute supertraits of current trait lazily.\n-                if supertraits.is_none() {\n-                    let trait_ref = ty::Binder::bind(ty::TraitRef::identity(tcx, trait_def_id));\n-                    supertraits = Some(traits::supertraits(tcx, trait_ref).collect());\n-                }\n+    impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+            match t.kind {\n+                ty::Param(_) => t == self.self_ty,\n+                ty::Projection(ref data) => {\n+                    // This is a projected type `<Foo as SomeTrait>::X`.\n+\n+                    // Compute supertraits of current trait lazily.\n+                    if self.supertraits.is_none() {\n+                        let trait_ref =\n+                            ty::Binder::bind(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        self.supertraits = Some(traits::supertraits(self.tcx, trait_ref).collect());\n+                    }\n \n-                // Determine whether the trait reference `Foo as\n-                // SomeTrait` is in fact a supertrait of the\n-                // current trait. In that case, this type is\n-                // legal, because the type `X` will be specified\n-                // in the object type.  Note that we can just use\n-                // direct equality here because all of these types\n-                // are part of the formal parameter listing, and\n-                // hence there should be no inference variables.\n-                let projection_trait_ref = ty::Binder::bind(data.trait_ref(tcx));\n-                let is_supertrait_of_current_trait =\n-                    supertraits.as_ref().unwrap().contains(&projection_trait_ref);\n-\n-                if is_supertrait_of_current_trait {\n-                    // Do not walk contained types, do not report error, do collect $200.\n-                    walker.skip_current_subtree();\n+                    // Determine whether the trait reference `Foo as\n+                    // SomeTrait` is in fact a supertrait of the\n+                    // current trait. In that case, this type is\n+                    // legal, because the type `X` will be specified\n+                    // in the object type.  Note that we can just use\n+                    // direct equality here because all of these types\n+                    // are part of the formal parameter listing, and\n+                    // hence there should be no inference variables.\n+                    let projection_trait_ref = ty::Binder::bind(data.trait_ref(self.tcx));\n+                    let is_supertrait_of_current_trait =\n+                        self.supertraits.as_ref().unwrap().contains(&projection_trait_ref);\n+\n+                    if is_supertrait_of_current_trait {\n+                        false // do not walk contained types, do not report error, do collect $200\n+                    } else {\n+                        t.super_visit_with(self) // DO walk contained types, POSSIBLY reporting an error\n+                    }\n                 }\n-\n-                // DO walk contained types, POSSIBLY reporting an error.\n+                _ => t.super_visit_with(self), // walk contained types, if any\n             }\n         }\n \n-        // Walk contained types, if any.\n+        fn visit_const(&mut self, _c: &ty::Const<'tcx>) -> bool {\n+            // FIXME Look into the unevaluated constants for object safety violations.\n+            // Do not walk substitutions of unevaluated consts, as they contain `Self`, even\n+            // though the const expression doesn't necessary use it. Currently type variables\n+            // inside array length expressions are forbidden, so they can't break the above\n+            // rules.\n+            false\n+        }\n     }\n \n-    false\n+    ty.visit_with(&mut IllegalSelfTypeVisitor {\n+        tcx,\n+        self_ty: tcx.types.self_param,\n+        trait_def_id,\n+        supertraits: None,\n+    })\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {"}, {"sha": "d7402fc5376d682b294a59f84d539be492e10691", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -386,11 +386,6 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             _ => ty,\n         }\n     }\n-\n-    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        let constant = constant.super_fold_with(self);\n-        constant.eval(self.selcx.tcx(), self.param_env)\n-    }\n }\n \n /// The guts of `normalize`: normalize a specific projection like `<T"}, {"sha": "c1150036ac2c019d4100663c8f58d58e182f7bdb", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -201,9 +201,4 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             _ => ty,\n         }\n     }\n-\n-    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        let constant = constant.super_fold_with(self);\n-        constant.eval(self.infcx.tcx, self.param_env)\n-    }\n }"}, {"sha": "4f4942ff596fc743c1e53f21ae87fba3182fdd63", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -43,6 +43,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n@@ -503,9 +504,43 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     None,\n                 ) {\n                     Ok(_) => Ok(EvaluatedToOk),\n+                    Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n                     Err(_) => Ok(EvaluatedToErr),\n                 }\n             }\n+\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                debug!(\"evaluate_predicate_recursively: equating consts c1={:?} c2={:?}\", c1, c2);\n+\n+                let evaluate = |c: &'tcx ty::Const<'tcx>| {\n+                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                        match self.infcx.const_eval_resolve(\n+                            obligation.param_env,\n+                            def_id,\n+                            substs,\n+                            promoted,\n+                            Some(obligation.cause.span),\n+                        ) {\n+                            Ok(val) => Ok(ty::Const::from_value(self.tcx(), val, c.ty)),\n+                            Err(ErrorHandled::TooGeneric) => Err(EvaluatedToAmbig),\n+                            Err(_) => Err(EvaluatedToErr),\n+                        }\n+                    } else {\n+                        Ok(c)\n+                    }\n+                };\n+\n+                match (evaluate(c1), evaluate(c2)) {\n+                    (Ok(c1), Ok(c2)) => {\n+                        match self.infcx().at(&obligation.cause, obligation.param_env).eq(c1, c2) {\n+                            Ok(_) => Ok(EvaluatedToOk),\n+                            Err(_) => Ok(EvaluatedToErr),\n+                        }\n+                    }\n+                    (Err(EvaluatedToErr), _) | (_, Err(EvaluatedToErr)) => Ok(EvaluatedToErr),\n+                    _ => Ok(EvaluatedToAmbig),\n+                }\n+            }\n         }\n     }\n "}, {"sha": "4d3bbfa77c37d99e0088fb35f573b71952d23316", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -102,6 +102,10 @@ pub fn predicate_obligations<'a, 'tcx>(\n                 wf.compute(ty);\n             }\n         }\n+        ty::Predicate::ConstEquate(c1, c2) => {\n+            wf.compute(c1.ty);\n+            wf.compute(c2.ty);\n+        }\n     }\n \n     wf.normalize()"}, {"sha": "eaaab87ab747467aa1952c653391b60458f04769", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -100,7 +100,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::Predicate::Projection(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::ObjectSafe(..)\n-                | ty::Predicate::ConstEvaluatable(..) => vec![],\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => vec![],\n \n                 ty::Predicate::WellFormed(subty) => {\n                     wf_types.push(subty);"}, {"sha": "ed30ed5313e5c591ff3eca0df43cd70ea0c64c81", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -48,6 +48,7 @@ fn not_outlives_predicate(p: &ty::Predicate<'_>) -> bool {\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::Subtype(..)\n-        | ty::Predicate::ConstEvaluatable(..) => true,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => true,\n     }\n }"}, {"sha": "e21db9035e25d11da0e565561fd774accf9c5404", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -810,7 +810,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             | ty::Predicate::ObjectSafe(..)\n             | ty::Predicate::ClosureKind(..)\n             | ty::Predicate::TypeOutlives(..)\n-            | ty::Predicate::ConstEvaluatable(..) => None,\n+            | ty::Predicate::ConstEvaluatable(..)\n+            | ty::Predicate::ConstEquate(..) => None,\n         });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {"}, {"sha": "02b42284e6dea8a16b9867a28adfb62cd65a6a44", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1648,6 +1648,16 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n \n             r.super_visit_with(self)\n         }\n+\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+            if let ty::ConstKind::Unevaluated(..) = c.val {\n+                // FIXME(lazy_normalization_consts) We currenctly don't detect lifetimes within substs\n+                // which would violate this check. Even though the particular substitution is not used\n+                // within the const, this should still be fixed.\n+                return false;\n+            }\n+            c.super_visit_with(self)\n+        }\n     }\n \n     let prohibit_opaque = match item.kind {\n@@ -3858,6 +3868,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Predicate::WellFormed(..) => None,\n                 ty::Predicate::ObjectSafe(..) => None,\n                 ty::Predicate::ConstEvaluatable(..) => None,\n+                ty::Predicate::ConstEquate(..) => None,\n                 // N.B., this predicate is created by breaking down a\n                 // `ClosureType: FnFoo()` predicate, where\n                 // `ClosureType` represents some `Closure`. It can't"}, {"sha": "efee33fa5b930559d4b40358c06b54bfc07feb3c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -1156,42 +1156,16 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n     let node = tcx.hir().get(hir_id);\n     let parent_def_id = match node {\n-        Node::ImplItem(_)\n+        Node::AnonConst(_)\n+        | Node::ImplItem(_)\n         | Node::TraitItem(_)\n         | Node::Variant(_)\n         | Node::Ctor(..)\n         | Node::Field(_) => {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             Some(tcx.hir().local_def_id(parent_id).to_def_id())\n         }\n-        // FIXME(#43408) enable this always when we get lazy normalization.\n-        Node::AnonConst(_) => {\n-            let parent_id = tcx.hir().get_parent_item(hir_id);\n-            let parent_def_id = tcx.hir().local_def_id(parent_id);\n-\n-            // HACK(eddyb) this provides the correct generics when\n-            // `feature(const_generics)` is enabled, so that const expressions\n-            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.features().const_generics {\n-                Some(parent_def_id.to_def_id())\n-            } else {\n-                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n-                match parent_node {\n-                    // HACK(eddyb) this provides the correct generics for repeat\n-                    // expressions' count (i.e. `N` in `[x; N]`), and explicit\n-                    // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n-                    // as they shouldn't be able to cause query cycle errors.\n-                    Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n-                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n-                        if constant.hir_id == hir_id =>\n-                    {\n-                        Some(parent_def_id.to_def_id())\n-                    }\n \n-                    _ => None,\n-                }\n-            }\n-        }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n             Some(tcx.closure_base_def_id(def_id))\n         }"}, {"sha": "919bcc9943d4883920cd80890f51f5a158cab023", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -413,6 +413,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::Predicate::Subtype(_)\n         | ty::Predicate::ObjectSafe(_)\n         | ty::Predicate::ClosureKind(..)\n-        | ty::Predicate::ConstEvaluatable(..) => None,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => None,\n     }\n }"}, {"sha": "66daf0e7f7d9df6df31870c5f66743e7203c2153", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -58,7 +58,8 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::Predicate::ObjectSafe(..)\n                     | ty::Predicate::ClosureKind(..)\n                     | ty::Predicate::Subtype(..)\n-                    | ty::Predicate::ConstEvaluatable(..) => (),\n+                    | ty::Predicate::ConstEvaluatable(..)\n+                    | ty::Predicate::ConstEquate(..) => (),\n                 }\n             }\n "}, {"sha": "c130ed3f46dbb5d7916d1d2896e17c066a2a569a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b14b84933467d7037feef9c37cb968a5cc9b607/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b14b84933467d7037feef9c37cb968a5cc9b607", "patch": "@@ -493,7 +493,8 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             Predicate::WellFormed(..)\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n-            | Predicate::ConstEvaluatable(..) => panic!(\"not user writable\"),\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}]}