{"sha": "01c14a2058924390543f072aeb5955a8d179df36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYzE0YTIwNTg5MjQzOTA1NDNmMDcyYWViNTk1NWE4ZDE3OWRmMzY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-18T09:12:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T09:12:12Z"}, "message": "Merge pull request #3012 from YaLTeR/fix-issue-2496\n\nFix match arm block flattening", "tree": {"sha": "0cc445e64cb5a91af1bc6e3bd1dd4e73c6887e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc445e64cb5a91af1bc6e3bd1dd4e73c6887e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c14a2058924390543f072aeb5955a8d179df36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboMFsCRBK7hj4Ov3rIwAAdHIIAKeF9PtYMS1zesEwwLZJwHRm\nCQZNYq3/+qHKufcOxC+uDXrPJaXMFzUXDoeRJWgOKbACpVtcaV2Vsvng6WpXu7mA\nVGhqPVRGBLw5HaoRz5QjXS0m1yFgoN0GdMSL+3+J7BH6QFb035I7SJMPIMSkRzLo\nRO0MfkX3XT8ar51ZIZItj+LFCCk8mEfNa51OJYU2/rDGJHETbUikVcvl1vcs3eRz\ni/MR11xZ/wm0dbVS6uYUB4yzEV4hOdQ5hISmuZ7LjbXb/tMJuSq4D6cJG4fXIRqB\nj/rXrNlz41vP8RzNoNsJcoTAsGOa/B0GY2AQRqlzRvp4NRDJIU7Lt4URCuAXhwQ=\n=U51w\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cc445e64cb5a91af1bc6e3bd1dd4e73c6887e55\nparent 81a4235c7f5df681f1c62af40889c8a7b1adccb0\nparent 838df8dfb60e8a17b3b3b43a642da0d8ca9828e2\nauthor Nick Cameron <nrc@ncameron.org> 1537261932 +1200\ncommitter GitHub <noreply@github.com> 1537261932 +1200\n\nMerge pull request #3012 from YaLTeR/fix-issue-2496\n\nFix match arm block flattening"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c14a2058924390543f072aeb5955a8d179df36", "html_url": "https://github.com/rust-lang/rust/commit/01c14a2058924390543f072aeb5955a8d179df36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c14a2058924390543f072aeb5955a8d179df36/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a4235c7f5df681f1c62af40889c8a7b1adccb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a4235c7f5df681f1c62af40889c8a7b1adccb0", "html_url": "https://github.com/rust-lang/rust/commit/81a4235c7f5df681f1c62af40889c8a7b1adccb0"}, {"sha": "838df8dfb60e8a17b3b3b43a642da0d8ca9828e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/838df8dfb60e8a17b3b3b43a642da0d8ca9828e2", "html_url": "https://github.com/rust-lang/rust/commit/838df8dfb60e8a17b3b3b43a642da0d8ca9828e2"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "6fcd0609b6569912c96977412f3307b9492e95c5", "filename": "Configurations.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -1303,7 +1303,7 @@ fn main() {\n     });\n \n     match lorem {\n-        None => if ipsum {\n+        None => |ipsum| {\n             println!(\"Hello World\");\n         },\n         Some(dolor) => foo(),\n@@ -1324,7 +1324,7 @@ fn main() {\n \n     match lorem {\n         None => {\n-            if ipsum {\n+            |ipsum| {\n                 println!(\"Hello World\");\n             }\n         }"}, {"sha": "9dc3a7e6b0f23887dda3f2000ac32092445ad2f4", "filename": "src/config/lists.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -95,11 +95,13 @@ impl SeparatorPlace {\n     ) -> SeparatorPlace {\n         match tactic {\n             DefinitiveListTactic::Vertical => default,\n-            _ => if sep == \",\" {\n-                SeparatorPlace::Back\n-            } else {\n-                default\n-            },\n+            _ => {\n+                if sep == \",\" {\n+                    SeparatorPlace::Back\n+                } else {\n+                    default\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "fef4a024cf5e306c48ab7fedbb192985baf6481a", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -179,11 +179,13 @@ pub fn format_expr(\n                 Some(format!(\"break{}\", id_str))\n             }\n         }\n-        ast::ExprKind::Yield(ref opt_expr) => if let Some(ref expr) = *opt_expr {\n-            rewrite_unary_prefix(context, \"yield \", &**expr, shape)\n-        } else {\n-            Some(\"yield\".to_string())\n-        },\n+        ast::ExprKind::Yield(ref opt_expr) => {\n+            if let Some(ref expr) = *opt_expr {\n+                rewrite_unary_prefix(context, \"yield \", &**expr, shape)\n+            } else {\n+                Some(\"yield\".to_string())\n+            }\n+        }\n         ast::ExprKind::Closure(capture, asyncness, movability, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(\n                 capture, asyncness, movability, fn_decl, body, expr.span, context, shape,"}, {"sha": "2295535b1215c902bf6e4a5e5895cc83e860316f", "filename": "src/matches.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -20,7 +20,7 @@ use comment::{combine_strs_with_missing_comments, rewrite_comment};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use expr::{\n     format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n-    rewrite_multiple_patterns, ExprType, RhsTactics, ToExpr,\n+    rewrite_multiple_patterns, ExprType, RhsTactics,\n };\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n@@ -314,23 +314,21 @@ fn block_can_be_flattened<'a>(\n // @extend: true if the arm body can be put next to `=>`\n // @body: flattened body, if the body is block with a single expression\n fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bool, &'a ast::Expr) {\n+    let can_extend =\n+        |expr| !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n+\n     if let Some(ref block) = block_can_be_flattened(context, body) {\n         if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n             if let ast::ExprKind::Block(..) = expr.node {\n                 flatten_arm_body(context, expr)\n             } else {\n-                let can_extend_expr =\n-                    !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n-                (can_extend_expr, &*expr)\n+                (can_extend(expr), &*expr)\n             }\n         } else {\n             (false, &*body)\n         }\n     } else {\n-        (\n-            !context.config.force_multiline_blocks() && body.can_be_overflowed(context, 1),\n-            &*body,\n-        )\n+        (can_extend(body), &*body)\n     }\n }\n "}, {"sha": "0ebd4b510ece63cc6e4c1539b561170cf50d5b92", "filename": "tests/source/issue-2496.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/tests%2Fsource%2Fissue-2496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/tests%2Fsource%2Fissue-2496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2496.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-indent_style: Visual\n+fn main() {\n+    match option {\n+        None => some_function(first_reasonably_long_argument,\n+                              second_reasonably_long_argument),\n+    }\n+}\n+\n+fn main() {\n+    match option {\n+        None => {\n+            some_function(first_reasonably_long_argument,\n+                          second_reasonably_long_argument)\n+        }\n+    }\n+}"}, {"sha": "935ece53b83bc4277db0c5fe92863e8790c9bd99", "filename": "tests/source/match-flattening.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/tests%2Fsource%2Fmatch-flattening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/tests%2Fsource%2Fmatch-flattening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-flattening.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    match option {\n+        None => if condition {\n+            true\n+        } else {\n+            false\n+        },\n+    }\n+}\n+\n+fn main() {\n+    match option {\n+        None => {\n+            if condition {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}"}, {"sha": "60c4f55ddffd8306acac9acd16b61cc84c070cf9", "filename": "tests/target/issue-2496.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/tests%2Ftarget%2Fissue-2496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/tests%2Ftarget%2Fissue-2496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2496.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-indent_style: Visual\n+fn main() {\n+    match option {\n+        None => some_function(first_reasonably_long_argument,\n+                              second_reasonably_long_argument),\n+    }\n+}\n+\n+fn main() {\n+    match option {\n+        None => some_function(first_reasonably_long_argument,\n+                              second_reasonably_long_argument),\n+    }\n+}"}, {"sha": "f246952a08d4b9fe70cb9cd01ba3afac32d7c31e", "filename": "tests/target/match-flattening.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01c14a2058924390543f072aeb5955a8d179df36/tests%2Ftarget%2Fmatch-flattening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c14a2058924390543f072aeb5955a8d179df36/tests%2Ftarget%2Fmatch-flattening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-flattening.rs?ref=01c14a2058924390543f072aeb5955a8d179df36", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+    match option {\n+        None => {\n+            if condition {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    match option {\n+        None => {\n+            if condition {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}"}]}