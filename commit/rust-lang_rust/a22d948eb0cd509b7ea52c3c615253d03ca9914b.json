{"sha": "a22d948eb0cd509b7ea52c3c615253d03ca9914b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMmQ5NDhlYjBjZDUwOWI3ZWE1MmMzYzYxNTI1M2QwM2NhOTkxNGI=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-21T19:45:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-21T19:45:32Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "f94d248950dd352158c5b96d371ab0455de84b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94d248950dd352158c5b96d371ab0455de84b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22d948eb0cd509b7ea52c3c615253d03ca9914b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMrhcCRBK7hj4Ov3rIwAAdHIIAC4BxCsKNMeMofO2r0ZdQCzG\n76APepkhzT6PVjYBAAWIy5IbjhfeVjA817qm1DopdXrGd/9D6wGIqnV5Z6M2uubb\n1vFaHXgq/l7xY1DTQpDu5qSVh7dlhw41Ozy+cBYj3NO1VD0C4/32Haa7aiIX9W2I\nMoCqMYbyBPaoECsosJ1hfoD1vou+Ft087kc1Ms3bRp2Re7Q26XqPtO1gU2iSQDI/\nR5VwbjFhi4erlTigMyI48CygLmkUSRWy8WteHOBmn0DcewJy4RbgnZOvPLKaFI/s\nNHVwmmyOUcUsvyVfYLo5pAyla7bNrnunVGirBE/xSbEaRnZPOqWzVws/T02pyF4=\n=i5jD\n-----END PGP SIGNATURE-----\n", "payload": "tree f94d248950dd352158c5b96d371ab0455de84b1a\nparent dd4b938c7f0c7704582a786f973bcfb17e523e94\nauthor Nixon Enraght-Moony <nixon.emoony@gmail.com> 1613936732 +0000\ncommitter GitHub <noreply@github.com> 1613936732 +0000\n\nApply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22d948eb0cd509b7ea52c3c615253d03ca9914b", "html_url": "https://github.com/rust-lang/rust/commit/a22d948eb0cd509b7ea52c3c615253d03ca9914b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22d948eb0cd509b7ea52c3c615253d03ca9914b/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4b938c7f0c7704582a786f973bcfb17e523e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4b938c7f0c7704582a786f973bcfb17e523e94", "html_url": "https://github.com/rust-lang/rust/commit/dd4b938c7f0c7704582a786f973bcfb17e523e94"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "9c9d49b821f4a0740bb083123a49efadfc8977d4", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a22d948eb0cd509b7ea52c3c615253d03ca9914b/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22d948eb0cd509b7ea52c3c615253d03ca9914b/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=a22d948eb0cd509b7ea52c3c615253d03ca9914b", "patch": "@@ -187,7 +187,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n /// Performs the actual work of ensuring a command passes. Generally assumes the command\n /// is syntactically valid.\n fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n-    // FIXME: Be more granular about why, (eg syntax error, count not equal)\n+    // FIXME: Be more granular about why, (e.g. syntax error, count not equal)\n     let result = match command.kind {\n         CommandKind::Has => {\n             match command.args.len() {\n@@ -215,7 +215,7 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                                 v_holder = serde_json::from_str(&command.args[2]).unwrap();\n                                 &v_holder\n                             };\n-                            !results.is_empty() && results.into_iter().any(|val| val == pat)\n+                            results.contains(pat)\n                         }\n                         Err(_) => false,\n                     }\n@@ -263,7 +263,7 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 Ok(results) => {\n                     assert_eq!(results.len(), 1);\n                     let r = cache.variables.insert(command.args[0].clone(), results[0].clone());\n-                    assert!(r.is_none(), \"Name collision\");\n+                    assert!(r.is_none(), \"Name collision: {} is duplicated\", command.args[0]);\n                     true\n                 }\n                 Err(_) => false,"}]}