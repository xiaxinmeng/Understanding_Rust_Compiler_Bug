{"sha": "d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "node_id": "C_kwDOAAsO6NoAKGQxNzQxNThhYmNlMGFiN2U5ZjJkM2JjNzU1NmFiNzA3MGQzOGFhYTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T16:15:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T16:15:19Z"}, "message": "Rename things: Tool -> ToolModule", "tree": {"sha": "dcd2c363df224e5bc5b1e8085d44adba6e50bf20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd2c363df224e5bc5b1e8085d44adba6e50bf20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "html_url": "https://github.com/rust-lang/rust/commit/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b8331fd51774f764affded4127c2ef25df87a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b8331fd51774f764affded4127c2ef25df87a1", "html_url": "https://github.com/rust-lang/rust/commit/70b8331fd51774f764affded4127c2ef25df87a1"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "c7f94ff9aa63418e741a9dbf4bffc39cbc7af1c9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -2039,9 +2039,9 @@ impl BuiltinAttr {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct Tool(usize);\n+pub struct ToolModule(usize);\n \n-impl Tool {\n+impl ToolModule {\n     pub(crate) fn by_name(name: &str) -> Option<Self> {\n         // FIXME: def maps registered tools\n         hir_def::builtin_attr::TOOL_MODULES.iter().position(|&tool| tool == name).map(Self)"}, {"sha": "ed1b2f64fd1d155bafbec72a005d2f9082a14c1f", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     source_analyzer::{resolve_hir_path, resolve_hir_path_as_macro, SourceAnalyzer},\n     Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n     HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path,\n-    ScopeDef, Tool, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -44,7 +44,7 @@ pub enum PathResolution {\n     Macro(MacroDef),\n     AssocItem(AssocItem),\n     BuiltinAttr(BuiltinAttr),\n-    Tool(Tool),\n+    ToolModule(ToolModule),\n }\n \n impl PathResolution {\n@@ -66,7 +66,7 @@ impl PathResolution {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }\n             PathResolution::BuiltinAttr(_)\n-            | PathResolution::Tool(_)\n+            | PathResolution::ToolModule(_)\n             | PathResolution::Local(_)\n             | PathResolution::Macro(_)\n             | PathResolution::ConstParam(_) => None,"}, {"sha": "762f172c2afdb2a46b06ddb5bbbd412898e1608a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -30,8 +30,8 @@ use syntax::{\n \n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, BuiltinAttr, BuiltinType, Const, Field,\n-    Function, Local, MacroDef, ModuleDef, Static, Struct, Tool, Trait, Type, TypeAlias, TypeParam,\n-    Variant,\n+    Function, Local, MacroDef, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias,\n+    TypeParam, Variant,\n };\n use base_db::CrateId;\n \n@@ -341,8 +341,8 @@ impl SourceAnalyzer {\n                 None => path.as_single_name_ref().and_then(|name_ref| {\n                     if let builtin @ Some(_) = BuiltinAttr::by_name(&name_ref.text()) {\n                         builtin.map(PathResolution::BuiltinAttr)\n-                    } else if let tool @ Some(_) = Tool::by_name(&name_ref.text()) {\n-                        tool.map(PathResolution::Tool)\n+                    } else if let tool @ Some(_) = ToolModule::by_name(&name_ref.text()) {\n+                        tool.map(PathResolution::ToolModule)\n                     } else {\n                         None\n                     }\n@@ -362,8 +362,8 @@ impl SourceAnalyzer {\n             None if is_path_of_attr => path\n                 .first_segment()\n                 .and_then(|seg| seg.name_ref())\n-                .and_then(|name_ref| Tool::by_name(&name_ref.text()))\n-                .map(PathResolution::Tool),\n+                .and_then(|name_ref| ToolModule::by_name(&name_ref.text()))\n+                .map(PathResolution::ToolModule),\n             None => None,\n         }\n     }"}, {"sha": "617f63d358283e99bfd50d906a3f121a8b8a00be", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -182,7 +182,7 @@ pub(crate) fn resolve_doc_path_for_def(\n         Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n         Definition::BuiltinAttr(_)\n-        | Definition::Tool(_)\n+        | Definition::ToolModule(_)\n         | Definition::BuiltinType(_)\n         | Definition::SelfType(_)\n         | Definition::Local(_)\n@@ -498,7 +498,7 @@ fn filename_and_frag_for_def(\n         | Definition::GenericParam(_)\n         | Definition::Label(_)\n         | Definition::BuiltinAttr(_)\n-        | Definition::Tool(_) => return None,\n+        | Definition::ToolModule(_) => return None,\n     };\n \n     Some((def, res, None))"}, {"sha": "393bb253b61ab1b0bf84dfe7eb7e0ba00d80e350", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -371,7 +371,7 @@ pub(super) fn definition(\n         Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n         // FIXME: We should be able to show more info about these\n         Definition::BuiltinAttr(it) => return Some(Markup::fenced_block(&it.name(db))),\n-        Definition::Tool(it) => return Some(Markup::fenced_block(&it.name(db))),\n+        Definition::ToolModule(it) => return Some(Markup::fenced_block(&it.name(db))),\n     };\n \n     markup(docs.filter(|_| config.documentation.is_some()).map(Into::into), label, mod_path)"}, {"sha": "49ff3625caa7de01dcf51056a92a1890c02469ff", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -214,7 +214,7 @@ impl TryToNav for Definition {\n             Definition::Trait(it) => it.try_to_nav(db),\n             Definition::TypeAlias(it) => it.try_to_nav(db),\n             Definition::BuiltinType(_) => None,\n-            Definition::Tool(_) => None,\n+            Definition::ToolModule(_) => None,\n             Definition::BuiltinAttr(_) => None,\n         }\n     }"}, {"sha": "56e07da0b90085f547debe9f16f0ee0a8898ceb0", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -115,7 +115,7 @@ pub struct HlRange {\n // parameter:: Emitted for non-self function parameters.\n // property:: Emitted for struct and union fields.\n // selfKeyword:: Emitted for the self function parameter and self path-specifier.\n-// tool:: Emitted for tool modules.\n+// toolModule:: Emitted for tool modules.\n // typeParameter:: Emitted for type parameters.\n // unresolvedReference:: Emitted for unresolved references, names that rust-analyzer can't find the definition of.\n // variable:: Emitted for locals, constants and statics."}, {"sha": "34c4ccd4c76a1ea0067af1f85410baa8df41967f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -513,7 +513,7 @@ fn highlight_def(\n         }\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n         Definition::BuiltinAttr(_) => Highlight::new(HlTag::Symbol(SymbolKind::BuiltinAttr)),\n-        Definition::Tool(_) => Highlight::new(HlTag::Symbol(SymbolKind::Tool)),\n+        Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n     };\n \n     let famous_defs = FamousDefs(sema, krate);"}, {"sha": "a3b05ee2633280d3a9d3eeb8c03ab169d32f97ad", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -264,7 +264,7 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n         },\n         Definition::Label(_) => SymbolKind::Label,\n         Definition::BuiltinAttr(_) => SymbolKind::BuiltinAttr,\n-        Definition::Tool(_) => SymbolKind::Tool,\n+        Definition::ToolModule(_) => SymbolKind::ToolModule,\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "3e0a78392a380b677ccf49e257084437681e7e3c", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -139,7 +139,7 @@ impl HlTag {\n                 SymbolKind::SelfParam => \"self_keyword\",\n                 SymbolKind::Static => \"static\",\n                 SymbolKind::Struct => \"struct\",\n-                SymbolKind::Tool => \"tool\",\n+                SymbolKind::ToolModule => \"tool_module\",\n                 SymbolKind::Trait => \"trait\",\n                 SymbolKind::TypeAlias => \"type_alias\",\n                 SymbolKind::TypeParam => \"type_param\","}, {"sha": "b3f404d9053ddd2fd55b96d1979f671fe7b1c18e", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -247,7 +247,7 @@ impl CompletionItemKind {\n                 SymbolKind::SelfParam => \"sp\",\n                 SymbolKind::Static => \"sc\",\n                 SymbolKind::Struct => \"st\",\n-                SymbolKind::Tool => \"tl\",\n+                SymbolKind::ToolModule => \"tm\",\n                 SymbolKind::Trait => \"tt\",\n                 SymbolKind::TypeAlias => \"ta\",\n                 SymbolKind::TypeParam => \"tp\","}, {"sha": "ef2f0f940f51c3da99a4119da27e891a310db6ed", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -9,7 +9,7 @@ use arrayvec::ArrayVec;\n use hir::{\n     Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Field, Function, GenericParam,\n     HasVisibility, Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, Static, Tool, Trait, TypeAlias, Variant, Visibility,\n+    Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -38,7 +38,7 @@ pub enum Definition {\n     GenericParam(GenericParam),\n     Label(Label),\n     BuiltinAttr(BuiltinAttr),\n-    Tool(Tool),\n+    ToolModule(ToolModule),\n }\n \n impl Definition {\n@@ -129,7 +129,7 @@ impl Definition {\n             Definition::Local(it) => it.module(db),\n             Definition::GenericParam(it) => it.module(db),\n             Definition::Label(it) => it.module(db),\n-            Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::Tool(_) => {\n+            Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::ToolModule(_) => {\n                 return None\n             }\n         };\n@@ -150,7 +150,7 @@ impl Definition {\n             Definition::BuiltinType(_) => Visibility::Public,\n             Definition::Macro(_) => return None,\n             Definition::BuiltinAttr(_)\n-            | Definition::Tool(_)\n+            | Definition::ToolModule(_)\n             | Definition::SelfType(_)\n             | Definition::Local(_)\n             | Definition::GenericParam(_)\n@@ -177,7 +177,7 @@ impl Definition {\n             Definition::GenericParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n             Definition::BuiltinAttr(_) => return None, // FIXME\n-            Definition::Tool(_) => return None,        // FIXME\n+            Definition::ToolModule(_) => return None,  // FIXME\n         };\n         Some(name)\n     }\n@@ -551,7 +551,7 @@ impl From<PathResolution> for Definition {\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),\n             PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n-            PathResolution::Tool(tool) => Definition::Tool(tool),\n+            PathResolution::ToolModule(tool) => Definition::ToolModule(tool),\n         }\n     }\n }"}, {"sha": "67f23536bd8b5cccf3a4fb7525be08c9abab7846", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -160,7 +160,7 @@ pub enum SymbolKind {\n     SelfParam,\n     Static,\n     Struct,\n-    Tool,\n+    ToolModule,\n     Trait,\n     TypeAlias,\n     TypeParam,"}, {"sha": "1b4f793a507fe4cb41b9a7d085e4c1edd55816f3", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -166,7 +166,7 @@ impl<'a> Ctx<'a> {\n             | hir::PathResolution::Macro(_)\n             | hir::PathResolution::AssocItem(_)\n             | hir::PathResolution::BuiltinAttr(_)\n-            | hir::PathResolution::Tool(_) => (),\n+            | hir::PathResolution::ToolModule(_) => (),\n         }\n         Some(())\n     }"}, {"sha": "60160f9553e93d66d370ba50cf2904b14c2d71bf", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -147,7 +147,7 @@ impl Definition {\n             Definition::BuiltinType(_) => return None,\n             Definition::SelfType(_) => return None,\n             Definition::BuiltinAttr(_) => return None,\n-            Definition::Tool(_) => return None,\n+            Definition::ToolModule(_) => return None,\n         };\n         return res;\n "}, {"sha": "8e1ccfb397bdbb0106614e1ec6b4b6ce7d248a75", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -65,7 +65,7 @@ define_semantic_token_types![\n     (SELF_KEYWORD, \"selfKeyword\"),\n     (SEMICOLON, \"semicolon\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n-    (TOOL, \"tool\"),\n+    (TOOL_MODULE, \"toolModule\"),\n     (UNION, \"union\"),\n     (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n ];"}, {"sha": "579ad22baca1300088f843f92acdce3c4e30eef3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174158abce0ab7e9f2d3bc7556ab7070d38aaa4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d174158abce0ab7e9f2d3bc7556ab7070d38aaa4", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n         SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n         SymbolKind::Macro | SymbolKind::BuiltinAttr => lsp_types::SymbolKind::FUNCTION,\n-        SymbolKind::Module | SymbolKind::Tool => lsp_types::SymbolKind::MODULE,\n+        SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n         SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n         SymbolKind::Static => lsp_types::SymbolKind::CONSTANT,\n@@ -129,7 +129,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::ValueParam => lsp_types::CompletionItemKind::VALUE,\n             SymbolKind::Variant => lsp_types::CompletionItemKind::ENUM_MEMBER,\n             SymbolKind::BuiltinAttr => lsp_types::CompletionItemKind::FUNCTION,\n-            SymbolKind::Tool => lsp_types::CompletionItemKind::MODULE,\n+            SymbolKind::ToolModule => lsp_types::CompletionItemKind::MODULE,\n         },\n     }\n }\n@@ -502,7 +502,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n             SymbolKind::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n-            SymbolKind::Tool => semantic_tokens::TOOL,\n+            SymbolKind::ToolModule => semantic_tokens::TOOL_MODULE,\n         },\n         HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,"}]}