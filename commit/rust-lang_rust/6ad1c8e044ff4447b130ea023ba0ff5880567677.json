{"sha": "6ad1c8e044ff4447b130ea023ba0ff5880567677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZDFjOGUwNDRmZjQ0NDdiMTMwZWEwMjNiYTBmZjU4ODA1Njc2Nzc=", "commit": {"author": {"name": "Edward Z. Yang", "email": "ezyang@cs.stanford.edu", "date": "2013-12-19T06:41:59Z"}, "committer": {"name": "Edward Z. Yang", "email": "ezyang@cs.stanford.edu", "date": "2013-12-19T11:58:08Z"}, "message": "Generalize item_span into node_span, which works on more types.\n\nSigned-off-by: Edward Z. Yang <ezyang@cs.stanford.edu>", "tree": {"sha": "e3cec09103e0a4b3148df4b4ba55cddcc3e7d4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3cec09103e0a4b3148df4b4ba55cddcc3e7d4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ad1c8e044ff4447b130ea023ba0ff5880567677", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad1c8e044ff4447b130ea023ba0ff5880567677", "html_url": "https://github.com/rust-lang/rust/commit/6ad1c8e044ff4447b130ea023ba0ff5880567677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ad1c8e044ff4447b130ea023ba0ff5880567677/comments", "author": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc65762d7923a9e66e8e5d743cb8b2d2fdd3cde5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc65762d7923a9e66e8e5d743cb8b2d2fdd3cde5", "html_url": "https://github.com/rust-lang/rust/commit/dc65762d7923a9e66e8e5d743cb8b2d2fdd3cde5"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "219f9689a2571dd1497bfb6514932e06c80fb432", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1c8e044ff4447b130ea023ba0ff5880567677/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1c8e044ff4447b130ea023ba0ff5880567677/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=6ad1c8e044ff4447b130ea023ba0ff5880567677", "patch": "@@ -916,7 +916,7 @@ impl<'a> SolveContext<'a> {\n             // attribute and report an error with various results if found.\n             if ty::has_attr(tcx, item_def_id, \"rustc_variance\") {\n                 let found = item_variances.repr(tcx);\n-                tcx.sess.span_err(ast_map::item_span(tcx.items, item_id), found);\n+                tcx.sess.span_err(ast_map::node_span(tcx.items, item_id), found);\n             }\n \n             let newly_added = item_variance_map.insert(item_def_id,"}, {"sha": "63e8251b22c64e427152b88902d69eeba42e0f9b", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ad1c8e044ff4447b130ea023ba0ff5880567677/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad1c8e044ff4447b130ea023ba0ff5880567677/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=6ad1c8e044ff4447b130ea023ba0ff5880567677", "patch": "@@ -490,14 +490,23 @@ pub fn node_item_query<Result>(items: map, id: NodeId, query: |@item| -> Result,\n     }\n }\n \n-pub fn item_span(items: map,\n+pub fn node_span(items: map,\n                  id: ast::NodeId)\n                  -> Span {\n     match items.find(&id) {\n         Some(&node_item(item, _)) => item.span,\n-        r => {\n-            fail!(format!(\"item_span: expected item with id {} but found {:?}\",\n-                           id, r))\n-        }\n+        Some(&node_foreign_item(foreign_item, _, _, _)) => foreign_item.span,\n+        Some(&node_trait_method(@required(ref type_method), _, _)) => type_method.span,\n+        Some(&node_trait_method(@provided(ref method), _, _)) => method.span,\n+        Some(&node_method(method, _, _)) => method.span,\n+        Some(&node_variant(variant, _, _)) => variant.span,\n+        Some(&node_expr(expr)) => expr.span,\n+        Some(&node_stmt(stmt)) => stmt.span,\n+        Some(&node_arg(pat)) => pat.span,\n+        Some(&node_local(_)) => fail!(\"node_span: cannot get span from node_local\"),\n+        Some(&node_block(block)) => block.span,\n+        Some(&node_struct_ctor(_, item, _)) => item.span,\n+        Some(&node_callee_scope(expr)) => expr.span,\n+        None => fail!(\"node_span: could not find id {}\", id),\n     }\n }"}]}