{"sha": "d565f6005494532dc0907eb22b9217b139103ea2", "node_id": "C_kwDOAAsO6NoAKGQ1NjVmNjAwNTQ5NDUzMmRjMDkwN2ViMjJiOTIxN2IxMzkxMDNlYTI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-25T10:29:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-25T10:29:57Z"}, "message": "Rustup to rustc 1.61.0-nightly (4b043faba 2022-02-24)", "tree": {"sha": "be517f5968b861c5997c71dc9f4345bed248d815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be517f5968b861c5997c71dc9f4345bed248d815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d565f6005494532dc0907eb22b9217b139103ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d565f6005494532dc0907eb22b9217b139103ea2", "html_url": "https://github.com/rust-lang/rust/commit/d565f6005494532dc0907eb22b9217b139103ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d565f6005494532dc0907eb22b9217b139103ea2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471234f8aac0fec4edf0097235b929572b6860f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/471234f8aac0fec4edf0097235b929572b6860f4", "html_url": "https://github.com/rust-lang/rust/commit/471234f8aac0fec4edf0097235b929572b6860f4"}], "stats": {"total": 222, "additions": 217, "deletions": 5}, "files": [{"sha": "4ffb24cd9a7a099f2c6ed0f4fbface61d7d80a66", "filename": "patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 216, "deletions": 4, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/d565f6005494532dc0907eb22b9217b139103ea2/patches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/d565f6005494532dc0907eb22b9217b139103ea2/patches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-core-Disable-portable-simd-test.patch?ref=d565f6005494532dc0907eb22b9217b139103ea2", "patch": "@@ -7,18 +7,230 @@ Subject: [PATCH] [core] Disable portable-simd test\n  library/core/tests/lib.rs | 1 -\n  1 file changed, 1 deletion(-)\n \n+diff --git a/library/core/src/lib.rs b/library/core/src/lib.rs\n+index aa1ad93..95fbf55 100644\n+--- a/library/core/src/lib.rs\n++++ b/library/core/src/lib.rs\n+@@ -398,25 +398,4 @@ pub mod arch {\n+     }\n+ }\n+ \n+-// Pull in the `core_simd` crate directly into libcore. The contents of\n+-// `core_simd` are in a different repository: rust-lang/portable-simd.\n+-//\n+-// `core_simd` depends on libcore, but the contents of this module are\n+-// set up in such a way that directly pulling it here works such that the\n+-// crate uses this crate as its libcore.\n+-#[path = \"../../portable-simd/crates/core_simd/src/mod.rs\"]\n+-#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n+-#[allow(rustdoc::bare_urls)]\n+-#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+-mod core_simd;\n+-\n+-#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n+-#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+-pub mod simd {\n+-    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-    pub use crate::core_simd::simd::*;\n+-}\n+-\n+ include!(\"primitive_docs.rs\");\n+diff --git a/library/core/src/slice/mod.rs b/library/core/src/slice/mod.rs\n+index cd38c3a..ad632dc 100644\n+--- a/library/core/src/slice/mod.rs\n++++ b/library/core/src/slice/mod.rs\n+@@ -17,7 +17,6 @@ use crate::ptr;\n+ use crate::result::Result;\n+ use crate::result::Result::{Err, Ok};\n+ #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+-use crate::simd::{self, Simd};\n+ use crate::slice;\n+ \n+ #[unstable(\n+@@ -3475,123 +3474,6 @@ impl<T> [T] {\n+         }\n+     }\n+ \n+-    /// Split a slice into a prefix, a middle of aligned SIMD types, and a suffix.\n+-    ///\n+-    /// This is a safe wrapper around [`slice::align_to`], so has the same weak\n+-    /// postconditions as that method.  You're only assured that\n+-    /// `self.len() == prefix.len() + middle.len() * LANES + suffix.len()`.\n+-    ///\n+-    /// Notably, all of the following are possible:\n+-    /// - `prefix.len() >= LANES`.\n+-    /// - `middle.is_empty()` despite `self.len() >= 3 * LANES`.\n+-    /// - `suffix.len() >= LANES`.\n+-    ///\n+-    /// That said, this is a safe method, so if you're only writing safe code,\n+-    /// then this can at most cause incorrect logic, not unsoundness.\n+-    ///\n+-    /// # Panics\n+-    ///\n+-    /// This will panic if the size of the SIMD type is different from\n+-    /// `LANES` times that of the scalar.\n+-    ///\n+-    /// At the time of writing, the trait restrictions on `Simd<T, LANES>` keeps\n+-    /// that from ever happening, as only power-of-two numbers of lanes are\n+-    /// supported.  It's possible that, in the future, those restrictions might\n+-    /// be lifted in a way that would make it possible to see panics from this\n+-    /// method for something like `LANES == 3`.\n+-    ///\n+-    /// # Examples\n+-    ///\n+-    /// ```\n+-    /// #![feature(portable_simd)]\n+-    ///\n+-    /// let short = &[1, 2, 3];\n+-    /// let (prefix, middle, suffix) = short.as_simd::<4>();\n+-    /// assert_eq!(middle, []); // Not enough elements for anything in the middle\n+-    ///\n+-    /// // They might be split in any possible way between prefix and suffix\n+-    /// let it = prefix.iter().chain(suffix).copied();\n+-    /// assert_eq!(it.collect::<Vec<_>>(), vec![1, 2, 3]);\n+-    ///\n+-    /// fn basic_simd_sum(x: &[f32]) -> f32 {\n+-    ///     use std::ops::Add;\n+-    ///     use std::simd::f32x4;\n+-    ///     let (prefix, middle, suffix) = x.as_simd();\n+-    ///     let sums = f32x4::from_array([\n+-    ///         prefix.iter().copied().sum(),\n+-    ///         0.0,\n+-    ///         0.0,\n+-    ///         suffix.iter().copied().sum(),\n+-    ///     ]);\n+-    ///     let sums = middle.iter().copied().fold(sums, f32x4::add);\n+-    ///     sums.horizontal_sum()\n+-    /// }\n+-    ///\n+-    /// let numbers: Vec<f32> = (1..101).map(|x| x as _).collect();\n+-    /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n+-    /// ```\n+-    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+-    pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n+-    where\n+-        Simd<T, LANES>: AsRef<[T; LANES]>,\n+-        T: simd::SimdElement,\n+-        simd::LaneCount<LANES>: simd::SupportedLaneCount,\n+-    {\n+-        // These are expected to always match, as vector types are laid out like\n+-        // arrays per <https://llvm.org/docs/LangRef.html#vector-type>, but we\n+-        // might as well double-check since it'll optimize away anyhow.\n+-        assert_eq!(mem::size_of::<Simd<T, LANES>>(), mem::size_of::<[T; LANES]>());\n+-\n+-        // SAFETY: The simd types have the same layout as arrays, just with\n+-        // potentially-higher alignment, so the de-facto transmutes are sound.\n+-        unsafe { self.align_to() }\n+-    }\n+-\n+-    /// Split a slice into a prefix, a middle of aligned SIMD types, and a suffix.\n+-    ///\n+-    /// This is a safe wrapper around [`slice::align_to_mut`], so has the same weak\n+-    /// postconditions as that method.  You're only assured that\n+-    /// `self.len() == prefix.len() + middle.len() * LANES + suffix.len()`.\n+-    ///\n+-    /// Notably, all of the following are possible:\n+-    /// - `prefix.len() >= LANES`.\n+-    /// - `middle.is_empty()` despite `self.len() >= 3 * LANES`.\n+-    /// - `suffix.len() >= LANES`.\n+-    ///\n+-    /// That said, this is a safe method, so if you're only writing safe code,\n+-    /// then this can at most cause incorrect logic, not unsoundness.\n+-    ///\n+-    /// This is the mutable version of [`slice::as_simd`]; see that for examples.\n+-    ///\n+-    /// # Panics\n+-    ///\n+-    /// This will panic if the size of the SIMD type is different from\n+-    /// `LANES` times that of the scalar.\n+-    ///\n+-    /// At the time of writing, the trait restrictions on `Simd<T, LANES>` keeps\n+-    /// that from ever happening, as only power-of-two numbers of lanes are\n+-    /// supported.  It's possible that, in the future, those restrictions might\n+-    /// be lifted in a way that would make it possible to see panics from this\n+-    /// method for something like `LANES == 3`.\n+-    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n+-    pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n+-    where\n+-        Simd<T, LANES>: AsMut<[T; LANES]>,\n+-        T: simd::SimdElement,\n+-        simd::LaneCount<LANES>: simd::SupportedLaneCount,\n+-    {\n+-        // These are expected to always match, as vector types are laid out like\n+-        // arrays per <https://llvm.org/docs/LangRef.html#vector-type>, but we\n+-        // might as well double-check since it'll optimize away anyhow.\n+-        assert_eq!(mem::size_of::<Simd<T, LANES>>(), mem::size_of::<[T; LANES]>());\n+-\n+-        // SAFETY: The simd types have the same layout as arrays, just with\n+-        // potentially-higher alignment, so the de-facto transmutes are sound.\n+-        unsafe { self.align_to_mut() }\n+-    }\n+-\n+     /// Checks if the elements of this slice are sorted.\n+     ///\n+     /// That is, for each element `a` and its following element `b`, `a <= b` must hold. If the\n diff --git a/library/core/tests/lib.rs b/library/core/tests/lib.rs\n-index ec70034..7cd9e21 100644\n+index 06c7be0..359e2e7 100644\n --- a/library/core/tests/lib.rs\n +++ b/library/core/tests/lib.rs\n-@@ -121,7 +121,6 @@ mod pattern;\n- mod pin;\n+@@ -75,7 +75,6 @@\n+ #![feature(never_type)]\n+ #![feature(unwrap_infallible)]\n+ #![feature(result_into_ok_or_err)]\n+-#![feature(portable_simd)]\n+ #![feature(ptr_metadata)]\n+ #![feature(once_cell)]\n+ #![feature(option_result_contains)]\n+@@ -127,7 +126,6 @@ mod pin;\n+ mod pin_macro;\n  mod ptr;\n  mod result;\n -mod simd;\n  mod slice;\n  mod str;\n  mod str_lossy;\n--- \n+diff --git a/library/std/src/lib.rs b/library/std/src/lib.rs\n+index 5dc586d..b6fc48f 100644\n+--- a/library/std/src/lib.rs\n++++ b/library/std/src/lib.rs\n+@@ -312,7 +312,6 @@\n+ #![feature(panic_can_unwind)]\n+ #![feature(panic_unwind)]\n+ #![feature(platform_intrinsics)]\n+-#![feature(portable_simd)]\n+ #![feature(prelude_import)]\n+ #![feature(ptr_as_uninit)]\n+ #![feature(ptr_internals)]\n+@@ -508,25 +508,6 @@ pub mod time;\n+ #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+ pub mod lazy;\n+ \n+-// Pull in `std_float` crate  into libstd. The contents of\n+-// `std_float` are in a different repository: rust-lang/portable-simd.\n+-#[path = \"../../portable-simd/crates/std_float/src/lib.rs\"]\n+-#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n+-#[allow(rustdoc::bare_urls)]\n+-#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+-mod std_float;\n+-\n+-#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+-#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n+-#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+-pub mod simd {\n+-    #[doc(inline)]\n+-    pub use crate::std_float::StdFloat;\n+-    #[doc(inline)]\n+-    pub use core::simd::*;\n+-}\n+-\n+ #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+ pub mod task {\n+     //! Types and Traits for working with asynchronous tasks.\n+--\n 2.26.2.7.g19db9cfb68\n "}, {"sha": "f2d80b78313d5b60d19ffa8607a83ecbd9b8d949", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d565f6005494532dc0907eb22b9217b139103ea2/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/d565f6005494532dc0907eb22b9217b139103ea2/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=d565f6005494532dc0907eb22b9217b139103ea2", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-01-30\"\n+channel = \"nightly-2022-02-25\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}]}