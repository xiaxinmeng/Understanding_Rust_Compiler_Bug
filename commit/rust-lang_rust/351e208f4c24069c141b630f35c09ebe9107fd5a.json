{"sha": "351e208f4c24069c141b630f35c09ebe9107fd5a", "node_id": "C_kwDOAAsO6NoAKDM1MWUyMDhmNGMyNDA2OWMxNDFiNjMwZjM1YzA5ZWJlOTEwN2ZkNWE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-05T15:18:19Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-04-27T20:29:03Z"}, "message": "add tracing for layout optimizations", "tree": {"sha": "032cd37aed18094793a48ddae237673b2d6059bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032cd37aed18094793a48ddae237673b2d6059bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351e208f4c24069c141b630f35c09ebe9107fd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351e208f4c24069c141b630f35c09ebe9107fd5a", "html_url": "https://github.com/rust-lang/rust/commit/351e208f4c24069c141b630f35c09ebe9107fd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351e208f4c24069c141b630f35c09ebe9107fd5a/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4907dac54cc43d44bd6df87636e545756d110957", "url": "https://api.github.com/repos/rust-lang/rust/commits/4907dac54cc43d44bd6df87636e545756d110957", "html_url": "https://github.com/rust-lang/rust/commit/4907dac54cc43d44bd6df87636e545756d110957"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "f15fb877d519920130e931349eb99407c868caa8", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/351e208f4c24069c141b630f35c09ebe9107fd5a/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351e208f4c24069c141b630f35c09ebe9107fd5a/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=351e208f4c24069c141b630f35c09ebe9107fd5a", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use std::fmt::Write;\n use std::{borrow::Borrow, cmp, iter, ops::Bound};\n \n #[cfg(feature = \"randomize\")]\n@@ -72,12 +73,30 @@ pub trait LayoutCalculator {\n                         .expect(\"alt layout should have a niche like the regular one\");\n                     let alt_head_space = niche.offset.bytes();\n                     let alt_niche_len = niche.value.size(dl).bytes();\n+                    let alt_tail_space = alt_layout.size.bytes() - alt_head_space - alt_niche_len;\n \n                     debug_assert_eq!(layout.size.bytes(), alt_layout.size.bytes());\n \n                     let prefer_alt_layout =\n                         alt_head_space > head_space && alt_head_space > tail_space;\n \n+                    debug!(\n+                        \"sz: {}, default_niche_at: {}+{}, default_tail_space: {}, alt_niche_at/head_space: {}+{}, alt_tail: {}, num_fields: {}, better: {}\\n\\\n+                        layout: {}\\n\\\n+                        alt_layout: {}\\n\",\n+                        layout.size.bytes(),\n+                        head_space,\n+                        niche_length,\n+                        tail_space,\n+                        alt_head_space,\n+                        alt_niche_len,\n+                        alt_tail_space,\n+                        layout.fields.count(),\n+                        prefer_alt_layout,\n+                        format_field_niches(&layout, &fields, &dl),\n+                        format_field_niches(&alt_layout, &fields, &dl),\n+                    );\n+\n                     if prefer_alt_layout {\n                         return Some(alt_layout);\n                     }\n@@ -1015,3 +1034,28 @@ fn univariant(\n         size,\n     })\n }\n+\n+fn format_field_niches(\n+    layout: &LayoutS,\n+    fields: &IndexSlice<FieldIdx, Layout<'_>>,\n+    dl: &TargetDataLayout,\n+) -> String {\n+    let mut s = String::new();\n+    for i in layout.fields.index_by_increasing_offset() {\n+        let offset = layout.fields.offset(i);\n+        let f = fields[i.into()];\n+        write!(s, \"[o{}a{}s{}\", offset.bytes(), f.align().abi.bytes(), f.size().bytes()).unwrap();\n+        if let Some(n) = f.largest_niche() {\n+            write!(\n+                s,\n+                \" n{}b{}s{}\",\n+                n.offset.bytes(),\n+                n.available(dl).ilog2(),\n+                n.value.size(dl).bytes()\n+            )\n+            .unwrap();\n+        }\n+        write!(s, \"] \").unwrap();\n+    }\n+    s\n+}"}]}