{"sha": "cbc7f94f113f7ae97db7e04b7f71b753c8349435", "node_id": "C_kwDOAAsO6NoAKGNiYzdmOTRmMTEzZjdhZTk3ZGI3ZTA0YjdmNzFiNzUzYzgzNDk0MzU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-11T02:37:11Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-16T14:00:00Z"}, "message": "Add a flag to disable leak backtraces", "tree": {"sha": "5aa550e240e50207716da116b22f3514b8ba1ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa550e240e50207716da116b22f3514b8ba1ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc7f94f113f7ae97db7e04b7f71b753c8349435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc7f94f113f7ae97db7e04b7f71b753c8349435", "html_url": "https://github.com/rust-lang/rust/commit/cbc7f94f113f7ae97db7e04b7f71b753c8349435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc7f94f113f7ae97db7e04b7f71b753c8349435/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "606ca4da7ea3ba7ea4caec41709bd4952daf3c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/606ca4da7ea3ba7ea4caec41709bd4952daf3c3b", "html_url": "https://github.com/rust-lang/rust/commit/606ca4da7ea3ba7ea4caec41709bd4952daf3c3b"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "04a1d939d2e5e837ed318f375552ee829caf8a19", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -301,18 +301,22 @@ environment variable. We first document the most relevant and most commonly used\n * `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n+* `-Zmiri-disable-leak-backtraces` disables backtraces reports for memory leaks. By default, a\n+  backtrace is captured for every allocation when it is created, just in case it leaks. This incurs\n+  some memory overhead to store data that is almost never used. This flag is implied by\n+  `-Zmiri-ignore-leaks`.\n+* `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n+  be used multiple times to forward several variables. Execution will still be deterministic if the\n+  value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n+* `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n+  remaining threads to exist when the main thread exits.\n * `-Zmiri-isolation-error=<action>` configures Miri's response to operations\n   requiring host access while isolation is enabled. `abort`, `hide`, `warn`,\n   and `warn-nobacktrace` are the supported actions. The default is to `abort`,\n   which halts the machine. Some (but not all) operations also support continuing\n   execution with a \"permission denied\" error being returned to the program.\n   `warn` prints a full backtrace when that happens; `warn-nobacktrace` is less\n   verbose. `hide` hides the warning entirely.\n-* `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n-  be used multiple times to forward several variables. Execution will still be deterministic if the\n-  value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n-* `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n-  remaining threads to exist when the main thread exits.\n * `-Zmiri-num-cpus` states the number of available CPUs to be reported by miri. By default, the\n   number of available CPUs is `1`. Note that this flag does not affect how miri handles threads in\n   any way."}, {"sha": "3aa71bb7e3c878ce4ae1523324a0cc5c6b60abe7", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -359,6 +359,8 @@ fn main() {\n                 isolation_enabled = Some(false);\n             }\n             miri_config.isolated_op = miri::IsolatedOp::Allow;\n+        } else if arg == \"-Zmiri-disable-leak-backtraces\" {\n+            miri_config.collect_leak_backtraces = false;\n         } else if arg == \"-Zmiri-disable-weak-memory-emulation\" {\n             miri_config.weak_memory_emulation = false;\n         } else if arg == \"-Zmiri-track-weak-memory-loads\" {\n@@ -385,6 +387,7 @@ fn main() {\n             };\n         } else if arg == \"-Zmiri-ignore-leaks\" {\n             miri_config.ignore_leaks = true;\n+            miri_config.collect_leak_backtraces = false;\n         } else if arg == \"-Zmiri-panic-on-unsupported\" {\n             miri_config.panic_on_unsupported = true;\n         } else if arg == \"-Zmiri-tag-raw-pointers\" {"}, {"sha": "defd37c37757e72f168e2e54af7b074c2a38a488", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -146,6 +146,8 @@ pub struct MiriConfig {\n     pub num_cpus: u32,\n     /// Requires Miri to emulate pages of a certain size\n     pub page_size: Option<u64>,\n+    /// Whether to collect a backtrace when each allocation is created, just in case it leaks.\n+    pub collect_leak_backtraces: bool,\n }\n \n impl Default for MiriConfig {\n@@ -180,6 +182,7 @@ impl Default for MiriConfig {\n             gc_interval: 10_000,\n             num_cpus: 1,\n             page_size: None,\n+            collect_leak_backtraces: true,\n         }\n     }\n }\n@@ -461,9 +464,14 @@ pub fn eval_entry<'tcx>(\n         let leaks = ecx.find_leaked_allocations(&ecx.machine.static_roots);\n         if !leaks.is_empty() {\n             report_leaks(&ecx, leaks);\n-            tcx.sess.note_without_error(\n-                \"the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\",\n-            );\n+            let leak_message = \"the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\";\n+            if ecx.machine.collect_leak_backtraces {\n+                // If we are collecting leak backtraces, each leak is a distinct error diagnostic.\n+                tcx.sess.note_without_error(leak_message);\n+            } else {\n+                // If we do not have backtraces, we just report an error without any span.\n+                tcx.sess.err(leak_message);\n+            };\n             // Ignore the provided return code - let the reported error\n             // determine the return code.\n             return None;"}, {"sha": "37f54a4a5bd4b618c86f87dce7caed61abb3b3a4", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -471,12 +471,17 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) gc_interval: u32,\n     /// The number of blocks that passed since the last BorTag GC pass.\n     pub(crate) since_gc: u32,\n+\n     /// The number of CPUs to be reported by miri.\n     pub(crate) num_cpus: u32,\n+\n     /// Determines Miri's page size and associated values\n     pub(crate) page_size: u64,\n     pub(crate) stack_addr: u64,\n     pub(crate) stack_size: u64,\n+\n+    /// Whether to collect a backtrace when each allocation is created, just in case it leaks.\n+    pub(crate) collect_leak_backtraces: bool,\n }\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n@@ -585,6 +590,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             page_size,\n             stack_addr,\n             stack_size,\n+            collect_leak_backtraces: config.collect_leak_backtraces,\n         }\n     }\n \n@@ -732,6 +738,7 @@ impl VisitTags for MiriMachine<'_, '_> {\n             page_size: _,\n             stack_addr: _,\n             stack_size: _,\n+            collect_leak_backtraces: _,\n         } = self;\n \n         threads.visit_tags(visit);\n@@ -975,7 +982,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n         // If an allocation is leaked, we want to report a backtrace to indicate where it was\n         // allocated. We don't need to record a backtrace for allocations which are allowed to\n         // leak.\n-        let backtrace = if kind.may_leak() { None } else { Some(ecx.generate_stacktrace()) };\n+        let backtrace = if kind.may_leak() || !ecx.machine.collect_leak_backtraces {\n+            None\n+        } else {\n+            Some(ecx.generate_stacktrace())\n+        };\n \n         let alloc: Allocation<Provenance, Self::AllocExtra> = alloc.adjust_from_tcx(\n             &ecx.tcx,"}, {"sha": "6d9b664c8f48338d081accc6ad75bf36a44b3b5e", "filename": "src/tools/miri/tests/fail/memleak.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -15,6 +15,8 @@ note: inside `main`\n LL |     std::mem::forget(Box::new(42));\n    |                      ^^^^^^^^^^^^\n \n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n note: the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\n \n error: aborting due to previous error"}, {"sha": "24d4a02df712ceb5d339d5a2c29a58f9fa368862", "filename": "src/tools/miri/tests/fail/memleak_no_backtrace.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -0,0 +1,7 @@\n+//@compile-flags: -Zmiri-disable-leak-backtraces\n+//@error-pattern: the evaluated program leaked memory\n+//@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n+\n+fn main() {\n+    std::mem::forget(Box::new(42));\n+}"}, {"sha": "f44e6ce07977917aaafe306614c3662caa734f16", "filename": "src/tools/miri/tests/fail/memleak_no_backtrace.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.stderr?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -0,0 +1,4 @@\n+error: the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "0e1146cf4ad93755e873adc3c8bfd60dff6f121e", "filename": "src/tools/miri/tests/fail/memleak_rc.32bit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -16,6 +16,8 @@ note: inside `main`\n LL |     let x = Dummy(Rc::new(RefCell::new(None)));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n note: the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\n \n error: aborting due to previous error"}, {"sha": "4979588f370ff5f53c595478ce75d9ff4b66f886", "filename": "src/tools/miri/tests/fail/memleak_rc.64bit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc7f94f113f7ae97db7e04b7f71b753c8349435/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr?ref=cbc7f94f113f7ae97db7e04b7f71b753c8349435", "patch": "@@ -16,6 +16,8 @@ note: inside `main`\n LL |     let x = Dummy(Rc::new(RefCell::new(None)));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n note: the evaluated program leaked memory, pass `-Zmiri-ignore-leaks` to disable this check\n \n error: aborting due to previous error"}]}