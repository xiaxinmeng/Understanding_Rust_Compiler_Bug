{"sha": "13f2838c04af1e2a17e71453d67a8bac6a006765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjI4MzhjMDRhZjFlMmExN2U3MTQ1M2Q2N2E4YmFjNmEwMDY3NjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-08T07:55:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T07:55:33Z"}, "message": "Rollup merge of #73075 - jyn514:comment-module, r=Dylan-DPC\n\nAdd comments to `Resolve::get_module`\n\nr? @Manishearth", "tree": {"sha": "c538e174162bc672ff5bebb0f132b67340ef60b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c538e174162bc672ff5bebb0f132b67340ef60b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f2838c04af1e2a17e71453d67a8bac6a006765", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3e71CRBK7hj4Ov3rIwAAdHIIAFNshOZrKvTG6ZA/aKA0Rb40\nEKrrRbm5bprSw2+RqRV8BBIH6PJPH6PFVg3PdZ/mwe5trJqEAvsIwpfa5dQ9qLxA\nbiVeSNv+SyTyTrH9zyMe4Fa77r7DoaLICWlK2mXI43cntajmGpW/+TdTv814AjoV\n+0Ta09bwSoyxMghsI7rhfrThy23ObaUpkzA/FaTTRrVa1H805mrMRQXdqrs3x6jJ\nQi+tTf6RweXqmIlnDgfcqPduXiMyMAB8pONYq7qXHafIL7RCVsF0nApaVXCsiX66\nYKlb2N71CQrSnQ75GoAaEM2Q6DroViQJB42rq7tg/3nfzjjlQshdhGTg7YMlKjw=\n=uah1\n-----END PGP SIGNATURE-----\n", "payload": "tree c538e174162bc672ff5bebb0f132b67340ef60b5\nparent 244465dbb8b0e49d741bc1f93925d037020cb1f1\nparent ff327c87e380ed34f6304531a8b46ad0a0124082\nauthor Ralf Jung <post@ralfj.de> 1591602933 +0200\ncommitter GitHub <noreply@github.com> 1591602933 +0200\n\nRollup merge of #73075 - jyn514:comment-module, r=Dylan-DPC\n\nAdd comments to `Resolve::get_module`\n\nr? @Manishearth\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f2838c04af1e2a17e71453d67a8bac6a006765", "html_url": "https://github.com/rust-lang/rust/commit/13f2838c04af1e2a17e71453d67a8bac6a006765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f2838c04af1e2a17e71453d67a8bac6a006765/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244465dbb8b0e49d741bc1f93925d037020cb1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/244465dbb8b0e49d741bc1f93925d037020cb1f1", "html_url": "https://github.com/rust-lang/rust/commit/244465dbb8b0e49d741bc1f93925d037020cb1f1"}, {"sha": "ff327c87e380ed34f6304531a8b46ad0a0124082", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff327c87e380ed34f6304531a8b46ad0a0124082", "html_url": "https://github.com/rust-lang/rust/commit/ff327c87e380ed34f6304531a8b46ad0a0124082"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "2ae063660e38d9d9ba178fc5630cea14a56a8182", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13f2838c04af1e2a17e71453d67a8bac6a006765/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f2838c04af1e2a17e71453d67a8bac6a006765/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=13f2838c04af1e2a17e71453d67a8bac6a006765", "patch": "@@ -95,24 +95,30 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n+        // If this is a local module, it will be in `module_map`, no need to recalculate it.\n         if let Some(def_id) = def_id.as_local() {\n             return self.module_map[&def_id];\n         }\n \n+        // Cache module resolution\n         if let Some(&module) = self.extern_module_map.get(&def_id) {\n             return module;\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n+            // This is the crate root\n             (self.cstore().crate_name_untracked(def_id.krate), None)\n         } else {\n             let def_key = self.cstore().def_key(def_id);\n             (\n+                // This unwrap is safe: crates must always have a name\n                 def_key.disambiguated_data.data.get_opt_name().unwrap(),\n+                // This unwrap is safe since we know this isn't the root\n                 Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })),\n             )\n         };\n \n+        // Allocate and return a new module with the information we found\n         let kind = ModuleKind::Def(DefKind::Mod, def_id, name);\n         let module = self.arenas.alloc_module(ModuleData::new(\n             parent,"}]}