{"sha": "21f595433e449ff44de5e6cd6373b8a852512d49", "node_id": "C_kwDOAAsO6NoAKDIxZjU5NTQzM2U0NDlmZjQ0ZGU1ZTZjZDYzNzNiOGE4NTI1MTJkNDk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T13:33:15Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:24:58Z"}, "message": "Move `BorrowAsPtr` into `Casts` lint pass", "tree": {"sha": "01e9487b6d41af1768ea49f1cc45adcc8613c2d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e9487b6d41af1768ea49f1cc45adcc8613c2d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f595433e449ff44de5e6cd6373b8a852512d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f595433e449ff44de5e6cd6373b8a852512d49", "html_url": "https://github.com/rust-lang/rust/commit/21f595433e449ff44de5e6cd6373b8a852512d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f595433e449ff44de5e6cd6373b8a852512d49/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab2f880d00bea8822f78289bbd3d1ae59990121", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab2f880d00bea8822f78289bbd3d1ae59990121", "html_url": "https://github.com/rust-lang/rust/commit/8ab2f880d00bea8822f78289bbd3d1ae59990121"}], "stats": {"total": 183, "additions": 79, "deletions": 104}, "files": [{"sha": "0993adbae2e6bfdb37c27b85335549c83c773dc9", "filename": "clippy_lints/src/borrow_as_ptr.rs", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab2f880d00bea8822f78289bbd3d1ae59990121/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs?ref=8ab2f880d00bea8822f78289bbd3d1ae59990121", "patch": "@@ -1,99 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_no_std_crate;\n-use clippy_utils::source::snippet_opt;\n-use clippy_utils::{meets_msrv, msrvs};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, TyKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for the usage of `&expr as *const T` or\n-    /// `&mut expr as *mut T`, and suggest using `ptr::addr_of` or\n-    /// `ptr::addr_of_mut` instead.\n-    ///\n-    /// ### Why is this bad?\n-    /// This would improve readability and avoid creating a reference\n-    /// that points to an uninitialized value or unaligned place.\n-    /// Read the `ptr::addr_of` docs for more information.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let val = 1;\n-    /// let p = &val as *const i32;\n-    ///\n-    /// let mut val_mut = 1;\n-    /// let p_mut = &mut val_mut as *mut i32;\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// let val = 1;\n-    /// let p = std::ptr::addr_of!(val);\n-    ///\n-    /// let mut val_mut = 1;\n-    /// let p_mut = std::ptr::addr_of_mut!(val_mut);\n-    /// ```\n-    #[clippy::version = \"1.60.0\"]\n-    pub BORROW_AS_PTR,\n-    pedantic,\n-    \"borrowing just to cast to a raw pointer\"\n-}\n-\n-impl_lint_pass!(BorrowAsPtr => [BORROW_AS_PTR]);\n-\n-pub struct BorrowAsPtr {\n-    msrv: Option<RustcVersion>,\n-}\n-\n-impl BorrowAsPtr {\n-    #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n-    }\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for BorrowAsPtr {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n-            return;\n-        }\n-\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let ExprKind::Cast(left_expr, ty) = &expr.kind;\n-            if let TyKind::Ptr(_) = ty.kind;\n-            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, e) = &left_expr.kind;\n-\n-            then {\n-                let core_or_std = if is_no_std_crate(cx) { \"core\" } else { \"std\" };\n-                let macro_name = match mutability {\n-                    Mutability::Not => \"addr_of\",\n-                    Mutability::Mut => \"addr_of_mut\",\n-                };\n-\n-                span_lint_and_sugg(\n-                    cx,\n-                    BORROW_AS_PTR,\n-                    expr.span,\n-                    \"borrow as raw pointer\",\n-                    \"try\",\n-                    format!(\n-                        \"{}::ptr::{}!({})\",\n-                        core_or_std,\n-                        macro_name,\n-                        snippet_opt(cx, e.span).unwrap()\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-    }\n-\n-    extract_msrv_attr!(LateContext);\n-}"}, {"sha": "6e1f8cd64f077936122944ef2fa61792a356cbf2", "filename": "clippy_lints/src/casts/borrow_as_ptr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs?ref=21f595433e449ff44de5e6cd6373b8a852512d49", "patch": "@@ -0,0 +1,37 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_no_std_crate;\n+use clippy_utils::source::snippet_with_context;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Ty, TyKind};\n+use rustc_lint::LateContext;\n+\n+use super::BORROW_AS_PTR;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    cast_expr: &'tcx Expr<'_>,\n+    cast_to: &'tcx Ty<'_>,\n+) {\n+    if matches!(cast_to.kind, TyKind::Ptr(_))\n+        && let ExprKind::AddrOf(BorrowKind::Ref, mutability, e) = cast_expr.kind\n+    {\n+        let core_or_std = if is_no_std_crate(cx) { \"core\" } else { \"std\" };\n+        let macro_name = match mutability {\n+            Mutability::Not => \"addr_of\",\n+            Mutability::Mut => \"addr_of_mut\",\n+        };\n+        let mut app = Applicability::MachineApplicable;\n+        let snip = snippet_with_context(cx, e.span, cast_expr.span.ctxt(), \"..\", &mut app).0;\n+\n+        span_lint_and_sugg(\n+            cx,\n+            BORROW_AS_PTR,\n+            expr.span,\n+            \"borrow as raw pointer\",\n+            \"try\",\n+            format!(\"{}::ptr::{}!({})\", core_or_std, macro_name, snip),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}"}, {"sha": "644edefb8fe99e2d5118cef2df12b22b897fafe2", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=21f595433e449ff44de5e6cd6373b8a852512d49", "patch": "@@ -1,4 +1,5 @@\n mod as_underscore;\n+mod borrow_as_ptr;\n mod cast_abs_to_unsigned;\n mod cast_enum_constructor;\n mod cast_lossless;\n@@ -17,7 +18,7 @@ mod ptr_as_ptr;\n mod unnecessary_cast;\n mod utils;\n \n-use clippy_utils::is_hir_ty_cfg_dependant;\n+use clippy_utils::{is_hir_ty_cfg_dependant, meets_msrv, msrvs};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -535,6 +536,39 @@ declare_clippy_lint! {\n     \"detects `as _` conversion\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the usage of `&expr as *const T` or\n+    /// `&mut expr as *mut T`, and suggest using `ptr::addr_of` or\n+    /// `ptr::addr_of_mut` instead.\n+    ///\n+    /// ### Why is this bad?\n+    /// This would improve readability and avoid creating a reference\n+    /// that points to an uninitialized value or unaligned place.\n+    /// Read the `ptr::addr_of` docs for more information.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let val = 1;\n+    /// let p = &val as *const i32;\n+    ///\n+    /// let mut val_mut = 1;\n+    /// let p_mut = &mut val_mut as *mut i32;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let val = 1;\n+    /// let p = std::ptr::addr_of!(val);\n+    ///\n+    /// let mut val_mut = 1;\n+    /// let p_mut = std::ptr::addr_of_mut!(val_mut);\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub BORROW_AS_PTR,\n+    pedantic,\n+    \"borrowing just to cast to a raw pointer\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -565,6 +599,7 @@ impl_lint_pass!(Casts => [\n     CAST_ENUM_CONSTRUCTOR,\n     CAST_ABS_TO_UNSIGNED,\n     AS_UNDERSCORE,\n+    BORROW_AS_PTR,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -607,6 +642,10 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             }\n \n             as_underscore::check(cx, expr, cast_to_hir);\n+\n+            if meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n+                borrow_as_ptr::check(cx, expr, cast_expr, cast_to_hir);\n+            }\n         }\n \n         cast_ref_to_mut::check(cx, expr);"}, {"sha": "7883711e5a3eb66709fb2a4e276fad8aa56936c2", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=21f595433e449ff44de5e6cd6373b8a852512d49", "patch": "@@ -58,7 +58,6 @@ store.register_lints(&[\n     bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n     booleans::NONMINIMAL_BOOL,\n     booleans::OVERLY_COMPLEX_BOOL_EXPR,\n-    borrow_as_ptr::BORROW_AS_PTR,\n     borrow_deref_ref::BORROW_DEREF_REF,\n     bytecount::NAIVE_BYTECOUNT,\n     bytes_count_to_len::BYTES_COUNT_TO_LEN,\n@@ -69,6 +68,7 @@ store.register_lints(&[\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n     casts::AS_UNDERSCORE,\n+    casts::BORROW_AS_PTR,\n     casts::CAST_ABS_TO_UNSIGNED,\n     casts::CAST_ENUM_CONSTRUCTOR,\n     casts::CAST_ENUM_TRUNCATION,"}, {"sha": "ae9f046f023fa536b8484946035119984f086908", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=21f595433e449ff44de5e6cd6373b8a852512d49", "patch": "@@ -4,9 +4,9 @@\n \n store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(attrs::INLINE_ALWAYS),\n-    LintId::of(borrow_as_ptr::BORROW_AS_PTR),\n     LintId::of(bytecount::NAIVE_BYTECOUNT),\n     LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n+    LintId::of(casts::BORROW_AS_PTR),\n     LintId::of(casts::CAST_LOSSLESS),\n     LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n     LintId::of(casts::CAST_POSSIBLE_WRAP),"}, {"sha": "63e0fcf6b0feb1ab3846311b8e19bcba4062bcd4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f595433e449ff44de5e6cd6373b8a852512d49/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=21f595433e449ff44de5e6cd6373b8a852512d49", "patch": "@@ -179,7 +179,6 @@ mod await_holding_invalid;\n mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n-mod borrow_as_ptr;\n mod borrow_deref_ref;\n mod bytecount;\n mod bytes_count_to_len;\n@@ -893,7 +892,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n-    store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));"}]}