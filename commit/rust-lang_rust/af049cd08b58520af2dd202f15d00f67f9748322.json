{"sha": "af049cd08b58520af2dd202f15d00f67f9748322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDQ5Y2QwOGI1ODUyMGFmMmRkMjAyZjE1ZDAwZjY3Zjk3NDgzMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-18T21:59:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-18T21:59:01Z"}, "message": "Auto merge of #43316 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 11 pull requests\n\n- Successful merges: #42837, #43282, #43287, #43290, #43292, #43294, #43304, #43310, #43312, #43314, #43315\n- Failed merges:", "tree": {"sha": "8882aaafa2beb020f823f42544c6f3a36baf75fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8882aaafa2beb020f823f42544c6f3a36baf75fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af049cd08b58520af2dd202f15d00f67f9748322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af049cd08b58520af2dd202f15d00f67f9748322", "html_url": "https://github.com/rust-lang/rust/commit/af049cd08b58520af2dd202f15d00f67f9748322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af049cd08b58520af2dd202f15d00f67f9748322/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c659ef655b1f740777f83eb415fd7ebe5a3fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c659ef655b1f740777f83eb415fd7ebe5a3fe5", "html_url": "https://github.com/rust-lang/rust/commit/83c659ef655b1f740777f83eb415fd7ebe5a3fe5"}, {"sha": "dc6606ead91b147630c6644afcbddf7ea9806808", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6606ead91b147630c6644afcbddf7ea9806808", "html_url": "https://github.com/rust-lang/rust/commit/dc6606ead91b147630c6644afcbddf7ea9806808"}], "stats": {"total": 345, "additions": 189, "deletions": 156}, "files": [{"sha": "d315546930330d4de16c24ba50a802f0652e3a9f", "filename": ".travis.yml", "status": "modified", "additions": 106, "deletions": 99, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -11,43 +11,28 @@ git:\n matrix:\n   fast_finish: true\n   include:\n-    # Linux builders, all docker images\n-    - env: IMAGE=arm-android\n-    - env: IMAGE=armhf-gnu\n-    - env: IMAGE=cross DEPLOY=1\n-    - env: IMAGE=dist-aarch64-linux DEPLOY=1\n-    - env: IMAGE=dist-android DEPLOY=1\n-    - env: IMAGE=dist-arm-linux DEPLOY=1\n-    - env: IMAGE=dist-armhf-linux DEPLOY=1\n-    - env: IMAGE=dist-armv7-linux DEPLOY=1\n-    - env: IMAGE=dist-fuchsia DEPLOY=1\n-    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n-    - env: IMAGE=dist-i686-freebsd DEPLOY=1\n-    - env: IMAGE=dist-i686-linux DEPLOY=1\n-    - env: IMAGE=dist-mips-linux DEPLOY=1\n-    - env: IMAGE=dist-mips64-linux DEPLOY=1\n-    - env: IMAGE=dist-mips64el-linux DEPLOY=1\n-    - env: IMAGE=dist-mipsel-linux DEPLOY=1\n-    - env: IMAGE=dist-powerpc-linux DEPLOY=1\n-    - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n-    - env: IMAGE=dist-powerpc64le-linux DEPLOY=1\n-    - env: IMAGE=dist-s390x-linux DEPLOY=1\n-    - env: IMAGE=dist-x86_64-freebsd DEPLOY=1\n-    - env: IMAGE=dist-x86_64-linux DEPLOY=1 ALLOW_TRY=1\n-    - env: IMAGE=dist-x86_64-musl DEPLOY=1\n-    - env: IMAGE=dist-x86_64-netbsd DEPLOY=1\n-    - env: IMAGE=asmjs\n-    - env: IMAGE=i686-gnu\n-    - env: IMAGE=i686-gnu-nopt\n-    # - env: IMAGE=wasm32 issue 42646\n-    - env: IMAGE=x86_64-gnu\n-    - env: IMAGE=x86_64-gnu-full-bootstrap\n-    - env: IMAGE=x86_64-gnu-aux\n-    - env: IMAGE=x86_64-gnu-debug\n-    - env: IMAGE=x86_64-gnu-nopt\n+    # Images used in testing PR and try-build should be run first.\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n-    - env: IMAGE=x86_64-gnu-distcheck\n-    - env: IMAGE=x86_64-gnu-incremental\n+    - env: IMAGE=dist-x86_64-linux DEPLOY=1 ALLOW_TRY=1\n+\n+    # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n+    # turned on, they're deployed to a different location primarily for projects\n+    # which are stuck on nightly and don't want llvm assertions in the artifacts\n+    # that they use.\n+    - env: IMAGE=dist-x86_64-linux DEPLOY_ALT=1\n+    - env: >\n+        RUST_CHECK_TARGET=dist\n+        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler\"\n+        SRC=.\n+        DEPLOY_ALT=1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n+        SCCACHE_ERROR_LOG=/tmp/sccache.log\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n+      os: osx\n+      osx_image: xcode7\n+\n+    # macOS builders. These are placed near the beginning because they are very\n+    # slow to run.\n \n     # OSX builders running tests, these run the full test suite.\n     #\n@@ -63,11 +48,6 @@ matrix:\n         MACOSX_STD_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode8.2\n-      install: &osx_install_sccache >\n-        travis_retry curl -fo /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache &&\n-        travis_retry curl -fo /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/stamp\n     - env: >\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n@@ -78,7 +58,6 @@ matrix:\n         MACOSX_STD_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode8.2\n-      install: *osx_install_sccache\n \n     # OSX builders producing releases. These do not run the full test suite and\n     # just produce a bunch of artifacts.\n@@ -96,10 +75,6 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install:\n-        - travis_retry brew update\n-        - travis_retry brew install xz\n-        - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler\"\n@@ -110,30 +85,42 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install:\n-        - travis_retry brew update\n-        - travis_retry brew install xz\n-        - *osx_install_sccache\n \n-    # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n-    # turned on, they're deployed to a different location primarily for projects\n-    # which are stuck on nightly and don't want llvm assertions in the artifacts\n-    # that they use.\n-    - env: IMAGE=dist-x86_64-linux DEPLOY_ALT=1\n-    - env: >\n-        RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler\"\n-        SRC=.\n-        DEPLOY_ALT=1\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n-        SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.7\n-      os: osx\n-      osx_image: xcode7\n-      install:\n-        - travis_retry brew update\n-        - travis_retry brew install xz\n-        - *osx_install_sccache\n+    # Linux builders, remaining docker images\n+    - env: IMAGE=arm-android\n+    - env: IMAGE=armhf-gnu\n+    - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=dist-aarch64-linux DEPLOY=1\n+    - env: IMAGE=dist-android DEPLOY=1\n+    - env: IMAGE=dist-arm-linux DEPLOY=1\n+    - env: IMAGE=dist-armhf-linux DEPLOY=1\n+    - env: IMAGE=dist-armv7-linux DEPLOY=1\n+    - env: IMAGE=dist-fuchsia DEPLOY=1\n+    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-i686-freebsd DEPLOY=1\n+    - env: IMAGE=dist-i686-linux DEPLOY=1\n+    - env: IMAGE=dist-mips-linux DEPLOY=1\n+    - env: IMAGE=dist-mips64-linux DEPLOY=1\n+    - env: IMAGE=dist-mips64el-linux DEPLOY=1\n+    - env: IMAGE=dist-mipsel-linux DEPLOY=1\n+    - env: IMAGE=dist-powerpc-linux DEPLOY=1\n+    - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n+    - env: IMAGE=dist-powerpc64le-linux DEPLOY=1\n+    - env: IMAGE=dist-s390x-linux DEPLOY=1\n+    - env: IMAGE=dist-x86_64-freebsd DEPLOY=1\n+    - env: IMAGE=dist-x86_64-musl DEPLOY=1\n+    - env: IMAGE=dist-x86_64-netbsd DEPLOY=1\n+    - env: IMAGE=asmjs\n+    - env: IMAGE=i686-gnu\n+    - env: IMAGE=i686-gnu-nopt\n+    # - env: IMAGE=wasm32 issue 42646\n+    - env: IMAGE=x86_64-gnu\n+    - env: IMAGE=x86_64-gnu-full-bootstrap\n+    - env: IMAGE=x86_64-gnu-aux\n+    - env: IMAGE=x86_64-gnu-debug\n+    - env: IMAGE=x86_64-gnu-nopt\n+    - env: IMAGE=x86_64-gnu-distcheck\n+    - env: IMAGE=x86_64-gnu-incremental\n \n env:\n   global:\n@@ -142,41 +129,64 @@ env:\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"Pixhh0hXDqGCdOyLtGFjli3J2AtDWIpyb2btIrLe956nCBDRutRoMm6rv5DI9sFZN07Mms7VzNNvhc9wCW1y63JAm414d2Co7Ob8kWMZlz9l9t7ACHuktUiis8yr+S4Quq1Vqd6pqi7pf2J++UxC8R/uLeqVrubzr6+X7AbmEFE=\"\n \n-# Note that this is overridden on OSX builders\n-install: >\n-  travis_retry curl -fo $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n-    chmod +x $HOME/stamp &&\n-    export PATH=$PATH:$HOME\n+before_install:\n+  # If we are building a pull request, do the build if $ALLOW_PR == 1\n+  # Otherwise, do the build if we are on the auto branch, or the try branch and $ALLOW_TRY == 1\n+  - >\n+    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n+        if [[ \"$ALLOW_PR\" == \"1\" ]]; then\n+            export SKIP_BUILD=false;\n+        else\n+            export SKIP_BUILD=true;\n+        fi;\n+    elif [[ \"$TRAVIS_BRANCH\" == \"auto\" || ( \"$ALLOW_TRY\" == \"1\" && \"$TRAVIS_BRANCH\" == \"try\" ) ]]; then\n+        export SKIP_BUILD=false;\n+    else\n+        export SKIP_BUILD=true;\n+    fi\n+  - >\n+    if [[ \"$SKIP_BUILD\" == false ]]; then\n+      zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+    fi\n+  - mkdir -p $HOME/rustsrc\n+\n+install:\n+  - >\n+    if [[ \"$SKIP_BUILD\" == true ]]; then\n+      echo echo skipping, not a full build > $HOME/stamp &&\n+        chmod +x $HOME/stamp &&\n+        export PATH=$PATH:$HOME;\n+    else\n+      case \"$TRAVIS_OS_NAME\" in\n+        linux)\n+          travis_retry curl -fo $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n+            chmod +x $HOME/stamp &&\n+            export PATH=$PATH:$HOME\n+          ;;\n+        osx)\n+          if [[ \"$RUST_CHECK_TARGET\" == dist ]]; then\n+            travis_retry brew update &&\n+            travis_retry brew install xz;\n+          fi &&\n+          travis_retry curl -fo /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n+            chmod +x /usr/local/bin/sccache &&\n+          travis_retry curl -fo /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n+            chmod +x /usr/local/bin/stamp\n+          ;;\n+      esac\n+    fi\n \n before_script:\n   - >\n       echo \"#### Disk usage before running script:\";\n       df -h;\n       du . | sort -nr | head -n100\n-  # If we are building a pull request, do the build if $ALLOW_PR == 1\n-  # Otherwise, do the build if we are on the auto branch, or the try branch and $ALLOW_TRY == 1\n   - >\n-      if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-          if [[ \"$ALLOW_PR\" == \"1\" ]]; then\n-              SKIP_BUILD=false;\n-          else\n-              SKIP_BUILD=true;\n-          fi\n-      elif [[ \"$TRAVIS_BRANCH\" == \"auto\" || ( \"$ALLOW_TRY\" == \"1\" && \"$TRAVIS_BRANCH\" == \"try\" ) ]]; then\n-          SKIP_BUILD=false;\n+      RUN_SCRIPT=\"src/ci/init_repo.sh . $HOME/rustsrc\";\n+      if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+          export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/run.sh\";\n       else\n-          SKIP_BUILD=true;\n-      fi\n-\n-      if [[ \"$SKIP_BUILD\" == true ]]; then\n-          export RUN_SCRIPT=\"echo 'skipping, not a full build'\";\n-      else\n-          RUN_SCRIPT=\"src/ci/init_repo.sh . $HOME/rustsrc\";\n-          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-              export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/run.sh\";\n-          else\n-              export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/docker/run.sh $IMAGE\";\n-          fi\n+          export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/docker/run.sh $IMAGE\";\n       fi\n \n # Log time information from this machine and an external machine for insight into possible\n@@ -223,9 +233,6 @@ before_cache:\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n-before_install:\n-  - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n-  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false"}, {"sha": "04b6fea75a78a87d962e33aa961635832fd7a404", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -289,7 +289,7 @@ been approved. The PR then enters the [merge queue][merge-queue], where @bors\n will run all the tests on every platform we support. If it all works out,\n @bors will merge your code into `master` and close the pull request.\n \n-[merge-queue]: https://buildbot.rust-lang.org/homu/queue/rust\n+[merge-queue]: https://buildbot2.rust-lang.org/homu/queue/rust\n \n Speaking of tests, Rust has a comprehensive test suite. More information about\n it can be found"}, {"sha": "ec030496d393a4fb5f8285cc02feec096f8df32a", "filename": "src/ci/docker/scripts/android-ndk.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -15,7 +15,7 @@ URL=https://dl.google.com/android/repository\n download_ndk() {\n     mkdir -p /android/ndk\n     cd /android/ndk\n-    curl -sO $URL/$1\n+    curl -fO $URL/$1\n     unzip -q $1\n     rm $1\n     mv android-ndk-* ndk"}, {"sha": "d343aae9dfb6839e85a4de88e1cc9dd3a31dee70", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -15,7 +15,7 @@ URL=https://dl.google.com/android/repository\n download_sdk() {\n     mkdir -p /android/sdk\n     cd /android/sdk\n-    curl -sO $URL/$1\n+    curl -fO $URL/$1\n     unzip -q $1\n     rm -rf $1\n }"}, {"sha": "79a5bc3bb4ac620c8b0f30c304a686e7822ed0a5", "filename": "src/ci/docker/scripts/crosstool-ng.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -11,7 +11,7 @@\n set -ex\n \n url=\"http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2\"\n-curl -s $url | tar xjf -\n+curl -f $url | tar xjf -\n cd crosstool-ng\n ./configure --prefix=/usr/local\n make -j$(nproc)"}, {"sha": "42ecec6ba08dc6cd83c3ceb2ed4789ccb5defe4b", "filename": "src/ci/docker/scripts/dumb-init.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -10,6 +10,6 @@\n \n set -ex\n \n-curl -sOL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n+curl -fOL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n dpkg -i dumb-init_*.deb\n rm dumb-init_*.deb"}, {"sha": "18499060a20f5fd9cec1fb6c7b434c4eb21ee9d0", "filename": "src/ci/docker/scripts/emscripten-wasm.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -28,7 +28,7 @@ exit 1\n }\n \n # Download last known good emscripten from WebAssembly waterfall\n-BUILD=$(curl -sL https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n+BUILD=$(curl -fL https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n     jq '.build | tonumber')\n curl -sL https://storage.googleapis.com/wasm-llvm/builds/linux/$BUILD/wasm-binaries.tbz2 | \\\n     hide_output tar xvkj"}, {"sha": "d32ed6b461d858394775710d657f2cbe26bbfff4", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -28,7 +28,7 @@ exit 1\n }\n \n cd /\n-curl -sL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n+curl -fL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n     tar -xz\n \n cd /emsdk-portable"}, {"sha": "ec6e046c96452e3ec25499850643febe6fac97b5", "filename": "src/ci/docker/scripts/make3.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmake3.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -10,7 +10,7 @@\n \n set -ex\n \n-curl -s https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf -\n+curl -f https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf -\n cd make-3.81\n ./configure --prefix=/usr\n make"}, {"sha": "98b0ed712c02a214736fffd9c0f980f1e7328d31", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -10,7 +10,7 @@\n \n set -ex\n \n-curl -so /usr/local/bin/sccache \\\n+curl -fo /usr/local/bin/sccache \\\n   https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "9e72238fbd463f0f1dfdcae2e42ea5ef5d4c9ce1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -973,7 +973,7 @@ impl<T> From<T> for Rc<T> {\n /// A `Weak` pointer is useful for keeping a temporary reference to the value\n /// within [`Rc`] without extending its lifetime. It is also used to prevent\n /// circular references between [`Rc`] pointers, since mutual owning references\n-/// would never allow either [`Arc`] to be dropped. For example, a tree could\n+/// would never allow either [`Rc`] to be dropped. For example, a tree could\n /// have strong [`Rc`] pointers from parent nodes to children, and `Weak`\n /// pointers from children back to their parents.\n ///"}, {"sha": "ab36e29b1e1d4238cc4778754e605e0178c92d40", "filename": "src/libcore/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -126,7 +126,7 @@ pub trait Default: Sized {\n }\n \n macro_rules! default_impl {\n-    ($t:ty, $v:expr, $doc:expr) => {\n+    ($t:ty, $v:expr, $doc:tt) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Default for $t {\n             #[inline]"}, {"sha": "193c8b9f925fbf0011f00e73860d6c0636b14291", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -81,6 +81,22 @@ pub type Result = result::Result<(), Error>;\n /// This type does not support transmission of an error other than that an error\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n+///\n+/// An important thing to remember is that the type `fmt::Error` should not be\n+/// confused with `std::io::Error` or `std::error::Error`, which you may also\n+/// have in scope.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::fmt::{self, write};\n+///\n+/// let mut output = String::new();\n+/// match write(&mut output, format_args!(\"Hello {}!\", \"world\")) {\n+///     Err(fmt::Error) => panic!(\"An error occurred\"),\n+///     _ => (),\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n pub struct Error;"}, {"sha": "0135cd0a588cf09e530499f3e4c60b571cbf62b2", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -1094,7 +1094,7 @@ impl f32 {\n     /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n     ///\n     /// ```\n-    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u32 {\n         unsafe { ::mem::transmute(self) }\n@@ -1125,7 +1125,7 @@ impl f32 {\n     /// let snan = 0x7F800001;\n     /// assert_ne!(f32::from_bits(snan).to_bits(), snan);\n     /// ```\n-    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn from_bits(mut v: u32) -> Self {\n         const EXP_MASK: u32   = 0x7F800000;"}, {"sha": "d73d7cd2c7bd1cf52c088a0e45d45c4e5e688d84", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -1009,7 +1009,7 @@ impl f64 {\n     /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n     ///\n     /// ```\n-    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u64 {\n         unsafe { ::mem::transmute(self) }\n@@ -1040,7 +1040,7 @@ impl f64 {\n     /// let snan = 0x7FF0000000000001;\n     /// assert_ne!(f64::from_bits(snan).to_bits(), snan);\n     /// ```\n-    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[inline]\n     pub fn from_bits(mut v: u64) -> Self {\n         const EXP_MASK: u64   = 0x7FF0000000000000;"}, {"sha": "38d3312b4e7dd6a7569cdd5381de742edc8e538e", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -2346,17 +2346,17 @@ mod tests {\n \n     #[test]\n     fn recursive_mkdir_slash() {\n-        check!(fs::create_dir_all(&Path::new(\"/\")));\n+        check!(fs::create_dir_all(Path::new(\"/\")));\n     }\n \n     #[test]\n     fn recursive_mkdir_dot() {\n-        check!(fs::create_dir_all(&Path::new(\".\")));\n+        check!(fs::create_dir_all(Path::new(\".\")));\n     }\n \n     #[test]\n     fn recursive_mkdir_empty() {\n-        check!(fs::create_dir_all(&Path::new(\"\")));\n+        check!(fs::create_dir_all(Path::new(\"\")));\n     }\n \n     #[test]"}, {"sha": "319965ab3965e21646216d88dad3b4b6a4cdb7ec", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -29,7 +29,7 @@ impl TcpStream {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(TcpStream(File::open(&Path::new(path.as_str()), &options)?))\n+        Ok(TcpStream(File::open(Path::new(path.as_str()), &options)?))\n     }\n \n     pub fn connect_timeout(_addr: &SocketAddr, _timeout: Duration) -> Result<TcpStream> {\n@@ -177,7 +177,7 @@ impl TcpListener {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(TcpListener(File::open(&Path::new(path.as_str()), &options)?))\n+        Ok(TcpListener(File::open(Path::new(path.as_str()), &options)?))\n     }\n \n     pub fn accept(&self) -> Result<(TcpStream, SocketAddr)> {"}, {"sha": "7e7666e7ef3641b43ccced4bea02bdc11d1c37c2", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -30,7 +30,7 @@ impl UdpSocket {\n         let mut options = OpenOptions::new();\n         options.read(true);\n         options.write(true);\n-        Ok(UdpSocket(File::open(&Path::new(path.as_str()), &options)?, UnsafeCell::new(None)))\n+        Ok(UdpSocket(File::open(Path::new(path.as_str()), &options)?, UnsafeCell::new(None)))\n     }\n \n     fn get_conn(&self) -> &mut Option<SocketAddr> {"}, {"sha": "efddd5f0294840afb40a94b8f627d5d23e4138e6", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -73,10 +73,10 @@ pub fn split_paths(unparsed: &OsStr) -> SplitPaths {\n     fn bytes_to_path(b: &[u8]) -> PathBuf {\n         PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n     }\n-    fn is_colon(b: &u8) -> bool { *b == b':' }\n+    fn is_semicolon(b: &u8) -> bool { *b == b';' }\n     let unparsed = unparsed.as_bytes();\n     SplitPaths {\n-        iter: unparsed.split(is_colon as fn(&u8) -> bool)\n+        iter: unparsed.split(is_semicolon as fn(&u8) -> bool)\n                       .map(bytes_to_path as fn(&[u8]) -> PathBuf)\n     }\n }\n@@ -94,7 +94,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     where I: Iterator<Item=T>, T: AsRef<OsStr>\n {\n     let mut joined = Vec::new();\n-    let sep = b':';\n+    let sep = b';';\n \n     for (i, path) in paths.enumerate() {\n         let path = path.as_ref().as_bytes();"}, {"sha": "ff1626d9b31c1aaf5ba64d9f9ffd8ca6d28e7739", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use collections::hash_map::HashMap;\n-use env;\n+use env::{self, split_paths};\n use ffi::OsStr;\n+use os::unix::ffi::OsStrExt;\n use fmt;\n use io::{self, Error, ErrorKind};\n-use path::Path;\n+use path::{Path, PathBuf};\n use sys::fd::FileDesc;\n use sys::fs::{File, OpenOptions};\n use sys::pipe::{self, AnonPipe};\n@@ -313,23 +314,29 @@ impl Command {\n         }\n \n         let program = if self.program.contains(':') || self.program.contains('/') {\n-            self.program.to_owned()\n-        } else {\n-            let mut path_env = ::env::var(\"PATH\").unwrap_or(\".\".to_string());\n-\n-            if ! path_env.ends_with('/') {\n-                path_env.push('/');\n+            Some(PathBuf::from(&self.program))\n+        } else if let Ok(path_env) = ::env::var(\"PATH\") {\n+            let mut program = None;\n+            for mut path in split_paths(&path_env) {\n+                path.push(&self.program);\n+                if path.exists() {\n+                    program = Some(path);\n+                    break;\n+                }\n             }\n-\n-            path_env.push_str(&self.program);\n-\n-            path_env\n+            program\n+        } else {\n+            None\n         };\n \n-        if let Err(err) = syscall::execve(&program, &args) {\n-            io::Error::from_raw_os_error(err.errno as i32)\n+        if let Some(program) = program {\n+            if let Err(err) = syscall::execve(program.as_os_str().as_bytes(), &args) {\n+                io::Error::from_raw_os_error(err.errno as i32)\n+            } else {\n+                panic!(\"return from exec without err\");\n+            }\n         } else {\n-            panic!(\"return from exec without err\");\n+            io::Error::new(io::ErrorKind::NotFound, \"\")\n         }\n     }\n \n@@ -393,7 +400,7 @@ impl Stdio {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n                 opts.write(!readable);\n-                let fd = File::open(&Path::new(\"null:\"), &opts)?;\n+                let fd = File::open(Path::new(\"null:\"), &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_fd()), None))\n             }\n         }"}, {"sha": "ec9005c2cc3be702981a2febe47b20fc5307fe18", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -77,9 +77,9 @@ pub fn dup2(fd: usize, newfd: usize, buf: &[u8]) -> Result<usize> {\n }\n \n /// Replace the current process with a new executable\n-pub fn execve(path: &str, args: &[[usize; 2]]) -> Result<usize> {\n-    unsafe { syscall4(SYS_EXECVE, path.as_ptr() as usize, path.len(),\n-                                  args.as_ptr() as usize, args.len()) }\n+pub fn execve<T: AsRef<[u8]>>(path: T, args: &[[usize; 2]]) -> Result<usize> {\n+    unsafe { syscall4(SYS_EXECVE, path.as_ref().as_ptr() as usize,\n+                      path.as_ref().len(), args.as_ptr() as usize, args.len()) }\n }\n \n /// Exit the current process"}, {"sha": "48819adb23e2ea03c2f5c194b176be1dd9e59846", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,9 +18,10 @@ const MILLIS_PER_SEC: u64 = 1_000;\n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n ///\n-/// Each `Duration` is composed of a number of seconds and nanosecond precision.\n-/// APIs binding a system timeout will typically round up the nanosecond\n-/// precision if the underlying system does not support that level of precision.\n+/// Each `Duration` is composed of a whole number of seconds and a fractional part\n+/// represented in nanoseconds.  If the underlying system does not support\n+/// nanosecond-level precision, APIs binding a system timeout will typically round up\n+/// the number of nanoseconds.\n ///\n /// `Duration`s implement many common traits, including [`Add`], [`Sub`], and other\n /// [`ops`] traits.\n@@ -50,11 +51,11 @@ pub struct Duration {\n }\n \n impl Duration {\n-    /// Creates a new `Duration` from the specified number of seconds and\n-    /// additional nanosecond precision.\n+    /// Creates a new `Duration` from the specified number of whole seconds and\n+    /// additional nanoseconds.\n     ///\n-    /// If the nanoseconds is greater than 1 billion (the number of nanoseconds\n-    /// in a second), then it will carry over into the seconds provided.\n+    /// If the number of nanoseconds is greater than 1 billion (the number of\n+    /// nanoseconds in a second), then it will carry over into the seconds provided.\n     ///\n     /// # Panics\n     ///\n@@ -77,7 +78,7 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n-    /// Creates a new `Duration` from the specified number of seconds.\n+    /// Creates a new `Duration` from the specified number of whole seconds.\n     ///\n     /// # Examples\n     ///\n@@ -115,10 +116,10 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n-    /// Returns the number of whole seconds represented by this `Duration`.\n+    /// Returns the number of _whole_ seconds contained by this `Duration`.\n     ///\n-    /// The extra precision represented by this duration is ignored (i.e. extra\n-    /// nanoseconds are not represented in the returned value).\n+    /// The returned value does not include the fractional (nanosecond) part of the\n+    /// duration, which can be obtained using [`subsec_nanos`].\n     ///\n     /// # Examples\n     ///\n@@ -147,7 +148,7 @@ impl Duration {\n     #[inline]\n     pub fn as_secs(&self) -> u64 { self.secs }\n \n-    /// Returns the nanosecond precision represented by this `Duration`.\n+    /// Returns the fractional part of this `Duration`, in nanoseconds.\n     ///\n     /// This method does **not** return the length of the duration when\n     /// represented by nanoseconds. The returned number always represents a\n@@ -159,7 +160,8 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_millis(5010);\n-    /// assert_eq!(duration.subsec_nanos(), 10000000);\n+    /// assert_eq!(duration.as_secs(), 5);\n+    /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]"}, {"sha": "7dc9030ea055b3709cb92830acc313ed15ff43d9", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af049cd08b58520af2dd202f15d00f67f9748322/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af049cd08b58520af2dd202f15d00f67f9748322/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=af049cd08b58520af2dd202f15d00f67f9748322", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-arm\n+// ignore-powerpc\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows"}]}