{"sha": "071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWVmMjY4YjVjOGZiOWFmZWMxZGI5MTJlYmNjNWQ2NTc3ZjVlNzM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-17T08:29:32Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-17T08:29:32Z"}, "message": "feat: improve dot completions with scoring\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "78d3889c33d0591653ca3fac976b2224d3ec4148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d3889c33d0591653ca3fac976b2224d3ec4148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "html_url": "https://github.com/rust-lang/rust/commit/071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5", "html_url": "https://github.com/rust-lang/rust/commit/6ebc8bbeb005f5d3f2b00d1ae1f1804116e3a8f5"}], "stats": {"total": 129, "additions": 52, "deletions": 77}, "files": [{"sha": "19bc4321c1875ccc7d2a9439834a9ad2fd2e65cf", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "patch": "@@ -94,8 +94,5 @@ pub(crate) fn completions(\n     complete_macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     complete_trait_impl::complete_trait_impl(&mut acc, &ctx);\n \n-    // Compute score for completion items\n-    acc.compute_score(&ctx);\n-\n     Some(acc)\n }"}, {"sha": "c16357a7e047821a1033a51ebbc63673a3b61a90", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "patch": "@@ -1,16 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{\n-    HasVisibility,\n-    // HirDisplay,\n-    Type,\n-};\n+use hir::{HasVisibility, Type};\n \n use crate::{\n-    call_info::call_info,\n     completion::{\n         completion_context::CompletionContext,\n-        completion_item::{CompletionKind, Completions, ScoreOption},\n+        completion_item::{CompletionKind, Completions},\n     },\n     // CallInfo,\n     CompletionItem,\n@@ -46,15 +41,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n \n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     for receiver in receiver.autoderef(ctx.db) {\n-        let fields = receiver.fields(ctx.db);\n-\n-        if let Some(record_field) = &ctx.record_field_syntax {\n-            acc.with_score_option(ScoreOption::RecordField(record_field.clone()));\n-        } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n-            acc.with_score_option(ScoreOption::CallFn(call_info));\n-        }\n-\n-        for (field, ty) in fields {\n+        for (field, ty) in receiver.fields(ctx.db) {\n             if ctx.scope().module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the\n                 // field is editable, we should show the completion"}, {"sha": "a3ae9c86b45cc5483b044c4ab72a96c06e61f47c", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 48, "deletions": 58, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use std::{cmp::Ordering, fmt};\n+use std::fmt;\n \n use super::completion_context::CompletionContext;\n-use crate::CallInfo;\n+use crate::call_info::call_info;\n use hir::{Documentation, HirDisplay};\n-use ra_syntax::{ast::RecordField, TextRange};\n+use ra_syntax::TextRange;\n use ra_text_edit::TextEdit;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n@@ -199,6 +199,10 @@ impl CompletionItem {\n         self.score.clone()\n     }\n \n+    pub fn set_score(&mut self, score: CompletionScore) {\n+        self.score = Some(score);\n+    }\n+\n     pub fn trigger_call_info(&self) -> bool {\n         self.trigger_call_info\n     }\n@@ -300,6 +304,47 @@ impl Builder {\n         self.deprecated = Some(deprecated);\n         self\n     }\n+    #[allow(unused)]\n+    pub(crate) fn compute_score(mut self, ctx: &CompletionContext) -> Builder {\n+        let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n+            if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n+                (\n+                    struct_field.name(ctx.db).to_string(),\n+                    struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n+                )\n+            } else {\n+                return self;\n+            }\n+        } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n+            if call_info.active_parameter_type().is_some()\n+                && call_info.active_parameter_name().is_some()\n+            {\n+                (\n+                    call_info.active_parameter_name().unwrap(),\n+                    call_info.active_parameter_type().unwrap(),\n+                )\n+            } else {\n+                return self;\n+            }\n+        } else {\n+            return self;\n+        };\n+\n+        // Compute score\n+        // For the same type\n+        if let Some(a_parameter_type) = &self.detail {\n+            if &active_type == a_parameter_type {\n+                // If same type + same name then go top position\n+                if active_name == self.label {\n+                    return self.set_score(CompletionScore::TypeAndNameMatch);\n+                } else {\n+                    return self.set_score(CompletionScore::TypeMatch);\n+                }\n+            }\n+        }\n+\n+        self\n+    }\n     pub(crate) fn set_score(mut self, score: CompletionScore) -> Builder {\n         self.score = Some(score);\n         self\n@@ -316,12 +361,6 @@ impl<'a> Into<CompletionItem> for Builder {\n     }\n }\n \n-#[derive(Debug)]\n-pub(crate) enum ScoreOption {\n-    CallFn(CallInfo),\n-    RecordField(RecordField),\n-}\n-\n #[derive(Debug, Clone)]\n pub enum CompletionScore {\n     TypeMatch,\n@@ -332,7 +371,6 @@ pub enum CompletionScore {\n #[derive(Debug, Default)]\n pub(crate) struct Completions {\n     buf: Vec<CompletionItem>,\n-    score_option: Option<ScoreOption>,\n }\n \n impl Completions {\n@@ -346,54 +384,6 @@ impl Completions {\n     {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n-\n-    pub(crate) fn with_score_option(&mut self, score_option: ScoreOption) {\n-        self.score_option = Some(score_option);\n-    }\n-\n-    pub(crate) fn compute_score(&mut self, ctx: &CompletionContext) {\n-        if self.score_option.is_none() {\n-            return;\n-        }\n-\n-        let (active_name, active_type) = match self.score_option.as_ref().unwrap() {\n-            ScoreOption::CallFn(call_info) => {\n-                if call_info.active_parameter_type().is_none()\n-                    || call_info.active_parameter_name().is_none()\n-                {\n-                    return;\n-                }\n-                (\n-                    call_info.active_parameter_name().unwrap(),\n-                    call_info.active_parameter_type().unwrap(),\n-                )\n-            }\n-            ScoreOption::RecordField(record_field) => {\n-                if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n-                    (\n-                        struct_field.name(ctx.db).to_string(),\n-                        struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n-                    )\n-                } else {\n-                    return;\n-                }\n-            }\n-        };\n-\n-        for completion_item in &mut self.buf {\n-            // For the same type\n-            if let Some(a_parameter_type) = &completion_item.detail {\n-                if &active_type == a_parameter_type {\n-                    // If same type + same name then go top position\n-                    if active_name == completion_item.label {\n-                        completion_item.score = Some(CompletionScore::TypeAndNameMatch);\n-                    } else {\n-                        completion_item.score = Some(CompletionScore::TypeMatch);\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n impl Into<Vec<CompletionItem>> for Completions {"}, {"sha": "5c3360ce42beaf52b55a4cbb92f804b9319884f1", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ef268b5c8fb9afec1db912ebcc5d6577f5e73/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=071ef268b5c8fb9afec1db912ebcc5d6577f5e73", "patch": "@@ -31,6 +31,7 @@ impl Completions {\n         .detail(ty.display(ctx.db).to_string())\n         .set_documentation(field.docs(ctx.db))\n         .set_deprecated(is_deprecated)\n+        .compute_score(ctx)\n         .add_to(self);\n     }\n "}]}