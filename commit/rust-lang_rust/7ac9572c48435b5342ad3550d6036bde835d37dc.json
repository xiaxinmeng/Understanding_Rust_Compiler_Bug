{"sha": "7ac9572c48435b5342ad3550d6036bde835d37dc", "node_id": "C_kwDOAAsO6NoAKDdhYzk1NzJjNDg0MzViNTM0MmFkMzU1MGQ2MDM2YmRlODM1ZDM3ZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-06T21:51:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-06T21:51:44Z"}, "message": "Auto merge of #106415 - Nilstrieb:where-is-my-master-branch, r=jyn514\n\nHandle non-existent upstream master branches in `x fmt`\n\nPeople who do have a remote for `rust-lang/rust` but don't have the master branch checked out there used to get this error when running `x fmt`:\n> fatal: ambiguous argument 'rust/master': unknown revision or path not in the working tree.\n> Use '--' to separate paths from revisions, like this:\n> 'git <command> [<revision>...] -- [<file>...]'\n> rust/master\n\nWhich is not exactly helpful.\n\nNow, we fall back to `origin/master` (hoping that at least that remote exists) for that case. If there is still some error, we just fall back to `x fmt .` and print a warning.\n\nr? `@jyn514`", "tree": {"sha": "5d084e243ed2d75bfb1249f60a339ac2597c8c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d084e243ed2d75bfb1249f60a339ac2597c8c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac9572c48435b5342ad3550d6036bde835d37dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac9572c48435b5342ad3550d6036bde835d37dc", "html_url": "https://github.com/rust-lang/rust/commit/7ac9572c48435b5342ad3550d6036bde835d37dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac9572c48435b5342ad3550d6036bde835d37dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb8b72ce49997d60a631e921d2cf5be9ca229e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb8b72ce49997d60a631e921d2cf5be9ca229e6", "html_url": "https://github.com/rust-lang/rust/commit/0fb8b72ce49997d60a631e921d2cf5be9ca229e6"}, {"sha": "d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "html_url": "https://github.com/rust-lang/rust/commit/d5e5762211a6c8ee22b789c15596d2b49a45ed3f"}], "stats": {"total": 267, "additions": 192, "deletions": 75}, "files": [{"sha": "4f48506b5af4f0ebab7b0236cc92a130eac64d2f", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -271,6 +271,10 @@ dependencies = [\n  \"toml\",\n ]\n \n+[[package]]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"bump-stage0\"\n version = \"0.1.0\""}, {"sha": "ce08d4edb567d05f1e108655c0fd56588913f00d", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -4,6 +4,7 @@ members = [\n   \"library/std\",\n   \"library/test\",\n   \"src/rustdoc-json-types\",\n+  \"src/tools/build_helper\",\n   \"src/tools/cargotest\",\n   \"src/tools/clippy\",\n   \"src/tools/clippy/clippy_dev\","}, {"sha": "4a0ba5925773e573e9862819ac10345f6c319cac", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -36,6 +36,7 @@ dependencies = [\n name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper\",\n  \"cc\",\n  \"cmake\",\n  \"fd-lock\",\n@@ -70,6 +71,10 @@ dependencies = [\n  \"regex-automata\",\n ]\n \n+[[package]]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.73\""}, {"sha": "22ceeca941e932872474ce0a3f549de91eece093", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -30,6 +30,7 @@ path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n [dependencies]\n+build_helper = { path = \"../tools/build_helper\" }\n cmake = \"0.1.38\"\n fd-lock = \"3.0.8\"\n filetime = \"0.2\""}, {"sha": "bfc57a85cdb42bdd106098ae9e4fc3bc707904de", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 34, "deletions": 44, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -1,7 +1,8 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, program_out_of_date, t};\n+use crate::util::{output, output_result, program_out_of_date, t};\n+use build_helper::git::updated_master_branch;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -78,50 +79,24 @@ fn update_rustfmt_version(build: &Builder<'_>) {\n /// rust-lang/master and what is now on the disk.\n ///\n /// Returns `None` if all files should be formatted.\n-fn get_modified_rs_files(build: &Builder<'_>) -> Option<Vec<String>> {\n-    let Ok(remote) = get_rust_lang_rust_remote() else { return None; };\n+fn get_modified_rs_files(build: &Builder<'_>) -> Result<Option<Vec<String>>, String> {\n+    let Ok(updated_master) = updated_master_branch(Some(&build.config.src)) else { return Ok(None); };\n+\n     if !verify_rustfmt_version(build) {\n-        return None;\n+        return Ok(None);\n     }\n \n     let merge_base =\n-        output(build.config.git().arg(\"merge-base\").arg(&format!(\"{remote}/master\")).arg(\"HEAD\"));\n-    Some(\n-        output(build.config.git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()))\n-            .lines()\n-            .map(|s| s.trim().to_owned())\n-            .filter(|f| Path::new(f).extension().map_or(false, |ext| ext == \"rs\"))\n-            .collect(),\n-    )\n-}\n-\n-/// Finds the remote for rust-lang/rust.\n-/// For example for these remotes it will return `upstream`.\n-/// ```text\n-/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n-/// origin  https://github.com/Nilstrieb/rust.git (push)\n-/// upstream        https://github.com/rust-lang/rust (fetch)\n-/// upstream        https://github.com/rust-lang/rust (push)\n-/// ```\n-fn get_rust_lang_rust_remote() -> Result<String, String> {\n-    let mut git = Command::new(\"git\");\n-    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n-\n-    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n-    if !output.status.success() {\n-        return Err(\"failed to execute git config command\".to_owned());\n-    }\n-\n-    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n-\n-    let rust_lang_remote = stdout\n+        output_result(build.config.git().arg(\"merge-base\").arg(&updated_master).arg(\"HEAD\"))?;\n+    Ok(Some(\n+        output_result(\n+            build.config.git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()),\n+        )?\n         .lines()\n-        .find(|remote| remote.contains(\"rust-lang\"))\n-        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n-\n-    let remote_name =\n-        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n-    Ok(remote_name.into())\n+        .map(|s| s.trim().to_owned())\n+        .filter(|f| Path::new(f).extension().map_or(false, |ext| ext == \"rs\"))\n+        .collect(),\n+    ))\n }\n \n #[derive(serde::Deserialize)]\n@@ -158,6 +133,9 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n         Ok(status) => status.success(),\n         Err(_) => false,\n     };\n+\n+    let mut paths = paths.to_vec();\n+\n     if git_available {\n         let in_working_tree = match build\n             .config\n@@ -191,10 +169,21 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n             if !check && paths.is_empty() {\n-                if let Some(files) = get_modified_rs_files(build) {\n-                    for file in files {\n-                        println!(\"formatting modified file {file}\");\n-                        ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                match get_modified_rs_files(build) {\n+                    Ok(Some(files)) => {\n+                        for file in files {\n+                            println!(\"formatting modified file {file}\");\n+                            ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                        }\n+                    }\n+                    Ok(None) => {}\n+                    Err(err) => {\n+                        println!(\n+                            \"WARN: Something went wrong when running git commands:\\n{err}\\n\\\n+                            Falling back to formatting all files.\"\n+                        );\n+                        // Something went wrong when getting the version. Just format all the files.\n+                        paths.push(\".\".into());\n                     }\n                 }\n             }\n@@ -204,6 +193,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     } else {\n         println!(\"Could not find usable git. Skipping git-aware format checks\");\n     }\n+\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n     let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {"}, {"sha": "d44b96cfb991ece07a53944f225a0624737b2921", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -113,6 +113,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n+use build_helper::ci::CiEnv;\n use channel::GitInfo;\n use config::{DryRun, Target};\n use filetime::FileTime;\n@@ -121,7 +122,7 @@ use once_cell::sync::OnceCell;\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{\n-    exe, libdir, mtime, output, run, run_suppressed, symlink_dir, try_run_suppressed, CiEnv,\n+    exe, libdir, mtime, output, run, run_suppressed, symlink_dir, try_run_suppressed,\n };\n \n mod bolt;"}, {"sha": "89bb2b770f90deba19893bf5b5a193b887a97ffa", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -24,6 +24,8 @@ use crate::util::get_clang_cl_resource_dir;\n use crate::util::{self, exe, output, t, up_to_date};\n use crate::{CLang, GitRepo};\n \n+use build_helper::ci::CiEnv;\n+\n #[derive(Clone)]\n pub struct LlvmResult {\n     /// Path to llvm-config binary.\n@@ -217,7 +219,7 @@ pub(crate) fn is_ci_llvm_available(config: &Config, asserts: bool) -> bool {\n         return false;\n     }\n \n-    if crate::util::CiEnv::is_ci() {\n+    if CiEnv::is_ci() {\n         // We assume we have access to git, so it's okay to unconditionally pass\n         // `true` here.\n         let llvm_sha = detect_llvm_sha(config, true);"}, {"sha": "93e53d383cd39daa00485a0f46dd9277056d918d", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -255,35 +255,6 @@ pub enum CiEnv {\n     GitHubActions,\n }\n \n-impl CiEnv {\n-    /// Obtains the current CI environment.\n-    pub fn current() -> CiEnv {\n-        if env::var(\"TF_BUILD\").map_or(false, |e| e == \"True\") {\n-            CiEnv::AzurePipelines\n-        } else if env::var(\"GITHUB_ACTIONS\").map_or(false, |e| e == \"true\") {\n-            CiEnv::GitHubActions\n-        } else {\n-            CiEnv::None\n-        }\n-    }\n-\n-    pub fn is_ci() -> bool {\n-        Self::current() != CiEnv::None\n-    }\n-\n-    /// If in a CI environment, forces the command to run with colors.\n-    pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n-        if self != CiEnv::None {\n-            // Due to use of stamp/docker, the output stream of rustbuild is not\n-            // a TTY in CI, so coloring is by-default turned off.\n-            // The explicit `TERM=xterm` environment is needed for\n-            // `--color always` to actually work. This env var was lost when\n-            // compiling through the Makefile. Very strange.\n-            cmd.env(\"TERM\", \"xterm\").args(&[\"--color\", \"always\"]);\n-        }\n-    }\n-}\n-\n pub fn forcing_clang_based_tests() -> bool {\n     if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n         match &var.to_string_lossy().to_lowercase()[..] {\n@@ -441,6 +412,23 @@ pub fn output(cmd: &mut Command) -> String {\n     String::from_utf8(output.stdout).unwrap()\n }\n \n+pub fn output_result(cmd: &mut Command) -> Result<String, String> {\n+    let output = match cmd.stderr(Stdio::inherit()).output() {\n+        Ok(status) => status,\n+        Err(e) => return Err(format!(\"failed to run command: {:?}: {}\", cmd, e)),\n+    };\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"command did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n{}\",\n+            cmd,\n+            output.status,\n+            String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+        ));\n+    }\n+    Ok(String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?)\n+}\n+\n /// Returns the last-modified time for `path`, or zero if it doesn't exist.\n pub fn mtime(path: &Path) -> SystemTime {\n     fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)"}, {"sha": "99f6fea2ecf997b8a3b47433466f5a7840714ab5", "filename": "src/tools/build_helper/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2FCargo.toml?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "9f113c72b9338be390922d45d14d7f1ef6cf7dc5", "filename": "src/tools/build_helper/src/ci.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -0,0 +1,40 @@\n+use std::process::Command;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum CiEnv {\n+    /// Not a CI environment.\n+    None,\n+    /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n+    AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n+}\n+\n+impl CiEnv {\n+    /// Obtains the current CI environment.\n+    pub fn current() -> CiEnv {\n+        if std::env::var(\"TF_BUILD\").map_or(false, |e| e == \"True\") {\n+            CiEnv::AzurePipelines\n+        } else if std::env::var(\"GITHUB_ACTIONS\").map_or(false, |e| e == \"true\") {\n+            CiEnv::GitHubActions\n+        } else {\n+            CiEnv::None\n+        }\n+    }\n+\n+    pub fn is_ci() -> bool {\n+        Self::current() != CiEnv::None\n+    }\n+\n+    /// If in a CI environment, forces the command to run with colors.\n+    pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n+        if self != CiEnv::None {\n+            // Due to use of stamp/docker, the output stream of rustbuild is not\n+            // a TTY in CI, so coloring is by-default turned off.\n+            // The explicit `TERM=xterm` environment is needed for\n+            // `--color always` to actually work. This env var was lost when\n+            // compiling through the Makefile. Very strange.\n+            cmd.env(\"TERM\", \"xterm\").args(&[\"--color\", \"always\"]);\n+        }\n+    }\n+}"}, {"sha": "dc62051cb85da59ee4654a3dac139ae82e050bef", "filename": "src/tools/build_helper/src/git.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -0,0 +1,75 @@\n+use std::{path::Path, process::Command};\n+\n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+pub fn get_rust_lang_rust_remote(git_dir: Option<&Path>) -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    if let Some(git_dir) = git_dir {\n+        git.current_dir(git_dir);\n+    }\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(\"failed to execute git config command\".to_owned());\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}\n+\n+pub fn rev_exists(rev: &str, git_dir: Option<&Path>) -> Result<bool, String> {\n+    let mut git = Command::new(\"git\");\n+    if let Some(git_dir) = git_dir {\n+        git.current_dir(git_dir);\n+    }\n+    git.args([\"rev-parse\", rev]);\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+\n+    match output.status.code() {\n+        Some(0) => Ok(true),\n+        Some(128) => Ok(false),\n+        None => {\n+            return Err(format!(\n+                \"git didn't exit properly: {}\",\n+                String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+            ));\n+        }\n+        Some(code) => {\n+            return Err(format!(\n+                \"git command exited with status code: {code}: {}\",\n+                String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+            ));\n+        }\n+    }\n+}\n+\n+/// Returns the master branch from which we can take diffs to see changes.\n+/// This will usually be rust-lang/rust master, but sometimes this might not exist.\n+/// This could be because the user is updating their forked master branch using the GitHub UI\n+/// and therefore doesn't need an upstream master branch checked out.\n+/// We will then fall back to origin/master in the hope that at least this exists.\n+pub fn updated_master_branch(git_dir: Option<&Path>) -> Result<String, String> {\n+    let upstream_remote = get_rust_lang_rust_remote(git_dir)?;\n+    let upstream_master = format!(\"{upstream_remote}/master\");\n+    if rev_exists(&upstream_master, git_dir)? {\n+        return Ok(upstream_master);\n+    }\n+\n+    // We could implement smarter logic here in the future.\n+    Ok(\"origin/master\".into())\n+}"}, {"sha": "d3d2323db853a0cfe735d80dbfe2b9d19a883f43", "filename": "src/tools/build_helper/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac9572c48435b5342ad3550d6036bde835d37dc/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Flib.rs?ref=7ac9572c48435b5342ad3550d6036bde835d37dc", "patch": "@@ -0,0 +1,2 @@\n+pub mod ci;\n+pub mod git;"}]}