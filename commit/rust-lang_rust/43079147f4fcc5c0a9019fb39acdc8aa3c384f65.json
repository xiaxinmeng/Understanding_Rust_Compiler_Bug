{"sha": "43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDc5MTQ3ZjRmY2M1YzBhOTAxOWZiMzlhY2RjOGFhM2MzODRmNjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T09:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T09:36:18Z"}, "message": "Rollup merge of #69373 - tspiteri:const_int_conversion, r=oli-obk\n\nStabilize const for integer {to,from}_{be,le,ne}_bytes methods\n\nAll of these functions can be implemented simply and naturally as const functions, e.g. `u32::from_le_bytes` can be implemented as\n```rust\n(bytes[0] as u32)\n    | (bytes[1] as u32) << 8\n    | (bytes[2] as u32) << 16\n    | (bytes[3] as u32) << 24\n```\nSo stabilizing the constness will not expose that internally they are implemented using transmute which is not const in stable.", "tree": {"sha": "fca5051e24aad45b4fb287208fd65c32d49e178c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca5051e24aad45b4fb287208fd65c32d49e178c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaLESCRBK7hj4Ov3rIwAAdHIIADMBQi203r4dr8HFypZXrLfN\nF5f0F87ZBcBt3KmF6dsG/6bXhFS2/tSxTJcrJMf12qn6i87U7yiYscksl3A711YH\n7WU7WTea0uNi/vLtWRMX57Q++/I96AzAhmGzMgT1rXENNxdBCxWINCjMySNWpqT1\n3f5OwJtenYP9x31/z3NghR72iAVgrLVS6QTQud0XG/hdetOZX21AX2ToxY3HTdXA\nIKGHeI6ROYWRIvMPRNnt6l4CUTA23wuqbKVoIGj9uotjipM7OVuUsZxXoKq4wDDW\no1rr5pU7KCHy6kUiTkPGZtLkR7TSRw3sPOLn8sqnDjxSxMIGhxMde9JG9oBjZ8Q=\n=sbgh\n-----END PGP SIGNATURE-----\n", "payload": "tree fca5051e24aad45b4fb287208fd65c32d49e178c\nparent a7c2eef2aeb23f52efc4a4bfd240292d43a61798\nparent 87f0dc63a864c6d9a3c34aa4052762dbcd316c91\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583919378 +0100\ncommitter GitHub <noreply@github.com> 1583919378 +0100\n\nRollup merge of #69373 - tspiteri:const_int_conversion, r=oli-obk\n\nStabilize const for integer {to,from}_{be,le,ne}_bytes methods\n\nAll of these functions can be implemented simply and naturally as const functions, e.g. `u32::from_le_bytes` can be implemented as\n```rust\n(bytes[0] as u32)\n    | (bytes[1] as u32) << 8\n    | (bytes[2] as u32) << 16\n    | (bytes[3] as u32) << 24\n```\nSo stabilizing the constness will not expose that internally they are implemented using transmute which is not const in stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "html_url": "https://github.com/rust-lang/rust/commit/43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "html_url": "https://github.com/rust-lang/rust/commit/a7c2eef2aeb23f52efc4a4bfd240292d43a61798"}, {"sha": "87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f0dc63a864c6d9a3c34aa4052762dbcd316c91", "html_url": "https://github.com/rust-lang/rust/commit/87f0dc63a864c6d9a3c34aa4052762dbcd316c91"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "f4874c772135e0c0d73c72754efbfee6245da6ca", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "patch": "@@ -130,7 +130,6 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]"}, {"sha": "caffa6c509aaa5071dcfd1ce9c9249a42c73c64f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "patch": "@@ -2154,7 +2154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2174,7 +2174,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2209,12 +2209,20 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -2243,7 +2251,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2276,7 +2284,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2319,11 +2327,19 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n \n@@ -4099,7 +4115,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4119,7 +4135,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4154,12 +4170,20 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -4188,7 +4212,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4221,7 +4245,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4264,11 +4288,19 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n "}, {"sha": "6484169dd9ae12e4e6ef7013741105c595770d53", "filename": "src/test/ui/consts/const-int-conversion-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43079147f4fcc5c0a9019fb39acdc8aa3c384f65/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs?ref=43079147f4fcc5c0a9019fb39acdc8aa3c384f65", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_int_conversion)]\n-\n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n const FROM_LE_BYTES: i32 = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);"}]}