{"sha": "1113f73ee270c0001429a6be306e4debb6079e45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTNmNzNlZTI3MGMwMDAxNDI5YTZiZTMwNmU0ZGViYjYwNzllNDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-04T13:26:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-04T13:26:03Z"}, "message": "Merge #3443\n\n3443: Remove old find refs infra r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4f14fda3b2ef64d7fe945a493f4f64c1696ef2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f14fda3b2ef64d7fe945a493f4f64c1696ef2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1113f73ee270c0001429a6be306e4debb6079e45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeX6xrCRBK7hj4Ov3rIwAAdHIIAInQ/vIq50qzmhFthvX3SQKp\nQSpX0ULUj4kPzhXnAfgLCbSxTskOGiPeBjGidui2tg3PPpHhRbuL6HGD9mASz+Mt\ndWKHARQ8OXLWin4XWZRrb2p7iwvrNhXG9CGc7SGZq2DmCtS2Fp15F8itYONbWrbH\nn5zhu9Ai7S6dAqPdKstRxC8VTZFwbO1QBhSl0L/Fs7JU0wjBt8PoJlDr/uiPfYsJ\n1+mx5ZNeFfQY4ePYPjVrCLaG/B4g1fe5dH+tt769Iw0by5b6CDCaDZpc1N3PNgR2\naqNHjKB6vUF2dz6+ralR+jIl3XHQpnLwj6Fo2GvaPybgjPNR7jxdh8nytLcl4Hc=\n=d6VH\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f14fda3b2ef64d7fe945a493f4f64c1696ef2cc\nparent 94189d0a1c8cf24b155fe7bad9b159bc17e997bb\nparent f57682c0b3b17a09d728c77134200b4151b2358d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583328363 +0000\ncommitter GitHub <noreply@github.com> 1583328363 +0000\n\nMerge #3443\n\n3443: Remove old find refs infra r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1113f73ee270c0001429a6be306e4debb6079e45", "html_url": "https://github.com/rust-lang/rust/commit/1113f73ee270c0001429a6be306e4debb6079e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1113f73ee270c0001429a6be306e4debb6079e45/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94189d0a1c8cf24b155fe7bad9b159bc17e997bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/94189d0a1c8cf24b155fe7bad9b159bc17e997bb", "html_url": "https://github.com/rust-lang/rust/commit/94189d0a1c8cf24b155fe7bad9b159bc17e997bb"}, {"sha": "f57682c0b3b17a09d728c77134200b4151b2358d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57682c0b3b17a09d728c77134200b4151b2358d", "html_url": "https://github.com/rust-lang/rust/commit/f57682c0b3b17a09d728c77134200b4151b2358d"}], "stats": {"total": 77, "additions": 23, "deletions": 54}, "files": [{"sha": "3bfcba8ff3779feb2fda2c035382ae08ffb02cc9", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=1113f73ee270c0001429a6be306e4debb6079e45", "patch": "@@ -1,3 +1,4 @@\n+use ra_ide_db::defs::Definition;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n@@ -37,6 +38,15 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n     let initializer_expr = let_stmt.initializer()?;\n+\n+    let def = ctx.sema.to_def(&bind_pat)?;\n+    let def = Definition::Local(def);\n+    let refs = def.find_usages(ctx.db, None);\n+    if refs.is_empty() {\n+        tested_by!(test_not_applicable_if_variable_unused);\n+        return None;\n+    };\n+\n     let delete_range = if let Some(whitespace) = let_stmt\n         .syntax()\n         .next_sibling_or_token()\n@@ -49,16 +59,14 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n     } else {\n         let_stmt.syntax().text_range()\n     };\n-    let refs = ctx.sema.find_all_refs(&bind_pat);\n-    if refs.is_empty() {\n-        return None;\n-    };\n \n     let mut wrap_in_parens = vec![true; refs.len()];\n \n     for (i, desc) in refs.iter().enumerate() {\n-        let usage_node =\n-            ctx.covering_node_for_range(desc.range).ancestors().find_map(ast::PathExpr::cast)?;\n+        let usage_node = ctx\n+            .covering_node_for_range(desc.file_range.range)\n+            .ancestors()\n+            .find_map(ast::PathExpr::cast)?;\n         let usage_parent_option = usage_node.syntax().parent().and_then(ast::Expr::cast);\n         let usage_parent = match usage_parent_option {\n             Some(u) => u,\n@@ -103,11 +111,9 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         move |edit: &mut ActionBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n-                if should_wrap {\n-                    edit.replace(desc.range, init_in_paren.clone())\n-                } else {\n-                    edit.replace(desc.range, init_str.clone())\n-                }\n+                let replacement =\n+                    if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n+                edit.replace(desc.file_range.range, replacement)\n             }\n             edit.set_cursor(delete_range.start())\n         },\n@@ -657,6 +663,7 @@ fn foo() {\n \n     #[test]\n     fn test_not_applicable_if_variable_unused() {\n+        covers!(test_not_applicable_if_variable_unused);\n         check_assist_not_applicable(\n             inline_local_variable,\n             r\""}, {"sha": "22404ee80a7cb80c2512b018208660d37011a30d", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=1113f73ee270c0001429a6be306e4debb6079e45", "patch": "@@ -1,9 +1,10 @@\n //! See test_utils/src/marks.rs\n \n-test_utils::marks!(\n+test_utils::marks![\n     introduce_var_in_comment_is_not_applicable\n     test_introduce_var_expr_stmt\n     test_introduce_var_last_expr\n     not_applicable_outside_of_bind_pat\n     test_not_inline_mut_variable\n-);\n+    test_not_applicable_if_variable_unused\n+];"}, {"sha": "7ce7857913458b63df4e6b2b87978dd831095f82", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=1113f73ee270c0001429a6be306e4debb6079e45", "patch": "@@ -19,7 +19,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n-    source_analyzer::{resolve_hir_path, ReferenceDescriptor, SourceAnalyzer},\n+    source_analyzer::{resolve_hir_path, SourceAnalyzer},\n     Function, HirFileId, InFile, Local, MacroDef, Module, ModuleDef, Name, Origin, Path,\n     PathResolution, ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n };\n@@ -171,12 +171,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         SemanticsScope { db: self.db, resolver }\n     }\n \n-    // FIXME: we only use this in `inline_local_variable` assist, ideally, we\n-    // should switch to general reference search infra there.\n-    pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n-        self.analyze(pat.syntax()).find_all_refs(pat)\n-    }\n-\n     fn analyze(&self, node: &SyntaxNode) -> SourceAnalyzer {\n         let src = self.find_file(node.clone());\n         self.analyze2(src.as_ref(), None)"}, {"sha": "73cff17c9e5510bfe024d32206218ceac0a469e5", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1113f73ee270c0001429a6be306e4debb6079e45/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=1113f73ee270c0001429a6be306e4debb6079e45", "patch": "@@ -7,7 +7,6 @@\n //! purely for \"IDE needs\".\n use std::{iter::once, sync::Arc};\n \n-use either::Either;\n use hir_def::{\n     body::{\n         scope::{ExprScopes, ScopeId},\n@@ -21,7 +20,7 @@ use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n use ra_syntax::{\n     ast::{self, AstNode},\n-    AstPtr, SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n+    SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n \n use crate::{\n@@ -251,38 +250,6 @@ impl SourceAnalyzer {\n         resolve_hir_path(db, &self.resolver, &hir_path)\n     }\n \n-    fn resolve_local_name(\n-        &self,\n-        name_ref: &ast::NameRef,\n-    ) -> Option<Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>> {\n-        let name = name_ref.as_name();\n-        let source_map = self.body_source_map.as_ref()?;\n-        let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, InFile::new(self.file_id, name_ref.syntax()))?;\n-        let entry = scopes.resolve_name_in_scope(scope, &name)?;\n-        Some(source_map.pat_syntax(entry.pat())?.value)\n-    }\n-\n-    // FIXME: we only use this in `inline_local_variable` assist, ideally, we\n-    // should switch to general reference search infra there.\n-    pub(crate) fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n-        let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n-        let ptr = Either::Left(AstPtr::new(&ast::Pat::from(pat.clone())));\n-        fn_def\n-            .syntax()\n-            .descendants()\n-            .filter_map(ast::NameRef::cast)\n-            .filter(|name_ref| match self.resolve_local_name(&name_ref) {\n-                None => false,\n-                Some(d_ptr) => d_ptr == ptr,\n-            })\n-            .map(|name_ref| ReferenceDescriptor {\n-                name: name_ref.text().to_string(),\n-                range: name_ref.syntax().text_range(),\n-            })\n-            .collect()\n-    }\n-\n     pub(crate) fn expand(\n         &self,\n         db: &impl HirDatabase,"}]}