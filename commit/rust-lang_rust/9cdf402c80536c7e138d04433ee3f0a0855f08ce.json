{"sha": "9cdf402c80536c7e138d04433ee3f0a0855f08ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZGY0MDJjODA1MzZjN2UxMzhkMDQ0MzNlZTNmMGEwODU1ZjA4Y2U=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-27T03:13:28Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-27T03:13:28Z"}, "message": "Propagate NaNs for Orderable methods impled on floating-point primitives", "tree": {"sha": "fbb6406a1cf3d2db860336a8bc669c7282e37d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb6406a1cf3d2db860336a8bc669c7282e37d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cdf402c80536c7e138d04433ee3f0a0855f08ce", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdf402c80536c7e138d04433ee3f0a0855f08ce", "html_url": "https://github.com/rust-lang/rust/commit/9cdf402c80536c7e138d04433ee3f0a0855f08ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cdf402c80536c7e138d04433ee3f0a0855f08ce/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d099d60d8be7327fb90f2d1228436f0b403b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d099d60d8be7327fb90f2d1228436f0b403b20", "html_url": "https://github.com/rust-lang/rust/commit/c9d099d60d8be7327fb90f2d1228436f0b403b20"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "ada47fb597e5debffe7b6dd7960ec6625d657ac0", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=9cdf402c80536c7e138d04433ee3f0a0855f08ce", "patch": "@@ -225,16 +225,26 @@ impl Ord for f32 {\n }\n \n impl Orderable for f32 {\n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n-    fn min(&self, other: &f32) -> f32 { fmin(*self, *other) }\n+    fn min(&self, other: &f32) -> f32 {\n+        if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmin(*self, *other) }\n+    }\n \n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n-    fn max(&self, other: &f32) -> f32 { fmax(*self, *other) }\n+    fn max(&self, other: &f32) -> f32 {\n+        if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmax(*self, *other) }\n+    }\n \n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    /// If any of the numbers are `NaN` then `NaN` is returned.\n     #[inline(always)]\n     fn clamp(&self, mn: &f32, mx: &f32) -> f32 {\n-        if *self > *mx { *mx } else\n-        if *self < *mn { *mn } else { *self }\n+        if self.is_NaN() { *self }\n+        else if !(*self <= *mx) { *mx }\n+        else if !(*self >= *mn) { *mn }\n+        else { *self }\n     }\n }\n \n@@ -828,14 +838,25 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_orderable() {\n+    fn test_min() {\n         assert_eq!(1f32.min(&2f32), 1f32);\n         assert_eq!(2f32.min(&1f32), 1f32);\n+    }\n+\n+    #[test]\n+    fn test_max() {\n         assert_eq!(1f32.max(&2f32), 2f32);\n         assert_eq!(2f32.max(&1f32), 2f32);\n+    }\n+\n+    #[test]\n+    fn test_clamp() {\n         assert_eq!(1f32.clamp(&2f32, &4f32), 2f32);\n         assert_eq!(8f32.clamp(&2f32, &4f32), 4f32);\n         assert_eq!(3f32.clamp(&2f32, &4f32), 3f32);\n+        assert!(3f32.clamp(&Float::NaN::<f32>(), &4f32).is_NaN());\n+        assert!(3f32.clamp(&2f32, &Float::NaN::<f32>()).is_NaN());\n+        assert!(Float::NaN::<f32>().clamp(&2f32, &4f32).is_NaN());\n     }\n \n     #[test]"}, {"sha": "07a29652e94aaa9d0cd8f4bfa785e9597018a464", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=9cdf402c80536c7e138d04433ee3f0a0855f08ce", "patch": "@@ -246,16 +246,26 @@ impl Ord for f64 {\n }\n \n impl Orderable for f64 {\n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n-    fn min(&self, other: &f64) -> f64 { fmin(*self, *other) }\n+    fn min(&self, other: &f64) -> f64 {\n+        if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmin(*self, *other) }\n+    }\n \n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n-    fn max(&self, other: &f64) -> f64 { fmax(*self, *other) }\n+    fn max(&self, other: &f64) -> f64 {\n+        if self.is_NaN() || other.is_NaN() { Float::NaN() } else { fmax(*self, *other) }\n+    }\n \n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    /// If any of the numbers are `NaN` then `NaN` is returned.\n     #[inline(always)]\n     fn clamp(&self, mn: &f64, mx: &f64) -> f64 {\n-        if *self > *mx { *mx } else\n-        if *self < *mn { *mn } else { *self }\n+        if self.is_NaN() { *self }\n+        else if !(*self <= *mx) { *mx }\n+        else if !(*self >= *mn) { *mn }\n+        else { *self }\n     }\n }\n \n@@ -869,14 +879,29 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_orderable() {\n+    fn test_min() {\n         assert_eq!(1f64.min(&2f64), 1f64);\n         assert_eq!(2f64.min(&1f64), 1f64);\n+        assert!(1f64.min(&Float::NaN::<f64>()).is_NaN());\n+        assert!(Float::NaN::<f64>().min(&1f64).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_max() {\n         assert_eq!(1f64.max(&2f64), 2f64);\n         assert_eq!(2f64.max(&1f64), 2f64);\n+        assert!(1f64.max(&Float::NaN::<f64>()).is_NaN());\n+        assert!(Float::NaN::<f64>().max(&1f64).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_clamp() {\n         assert_eq!(1f64.clamp(&2f64, &4f64), 2f64);\n         assert_eq!(8f64.clamp(&2f64, &4f64), 4f64);\n         assert_eq!(3f64.clamp(&2f64, &4f64), 3f64);\n+        assert!(3f64.clamp(&Float::NaN::<f64>(), &4f64).is_NaN());\n+        assert!(3f64.clamp(&2f64, &Float::NaN::<f64>()).is_NaN());\n+        assert!(Float::NaN::<f64>().clamp(&2f64, &4f64).is_NaN());\n     }\n \n     #[test]"}, {"sha": "ef0adee884b7c2482e53ee4b72ad003defd33e70", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdf402c80536c7e138d04433ee3f0a0855f08ce/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=9cdf402c80536c7e138d04433ee3f0a0855f08ce", "patch": "@@ -385,20 +385,23 @@ impl Ord for float {\n }\n \n impl Orderable for float {\n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n     fn min(&self, other: &float) -> float {\n-        fmin(*self as f64, *other as f64) as float\n+        (*self as f64).min(&(*other as f64)) as float\n     }\n \n+    /// Returns `NaN` if either of the numbers are `NaN`.\n     #[inline(always)]\n     fn max(&self, other: &float) -> float {\n-        fmax(*self as f64, *other as f64) as float\n+        (*self as f64).max(&(*other as f64)) as float\n     }\n \n+    /// Returns the number constrained within the range `mn <= self <= mx`.\n+    /// If any of the numbers are `NaN` then `NaN` is returned.\n     #[inline(always)]\n     fn clamp(&self, mn: &float, mx: &float) -> float {\n-        if *self > *mx { *mx } else\n-        if *self < *mn { *mn } else { *self }\n+        (*self as f64).clamp(&(*mn as f64), &(*mx as f64)) as float\n     }\n }\n \n@@ -802,14 +805,25 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_orderable() {\n+    fn test_min() {\n         assert_eq!(1f.min(&2f), 1f);\n         assert_eq!(2f.min(&1f), 1f);\n+    }\n+\n+    #[test]\n+    fn test_max() {\n         assert_eq!(1f.max(&2f), 2f);\n         assert_eq!(2f.max(&1f), 2f);\n+    }\n+\n+    #[test]\n+    fn test_clamp() {\n         assert_eq!(1f.clamp(&2f, &4f), 2f);\n         assert_eq!(8f.clamp(&2f, &4f), 4f);\n         assert_eq!(3f.clamp(&2f, &4f), 3f);\n+        assert!(3f.clamp(&Float::NaN::<float>(), &4f).is_NaN());\n+        assert!(3f.clamp(&2f, &Float::NaN::<float>()).is_NaN());\n+        assert!(Float::NaN::<float>().clamp(&2f, &4f).is_NaN());\n     }\n \n     #[test]"}]}