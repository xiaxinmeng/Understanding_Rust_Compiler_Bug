{"sha": "d10296910f36cf51187b1b5183a3a628422dd757", "node_id": "C_kwDOAAsO6NoAKGQxMDI5NjkxMGYzNmNmNTExODdiMWI1MTgzYTNhNjI4NDIyZGQ3NTc", "commit": {"author": {"name": "Ariel Uy", "email": "ariel.b.uy@gmail.com", "date": "2022-04-29T03:54:58Z"}, "committer": {"name": "Ariel Uy", "email": "ariel.b.uy@gmail.com", "date": "2022-04-30T02:11:00Z"}, "message": "Support negative ints in manual_range_contains\n\nFixes issue where ranges containing ints with different signs would be\nincorrect due to comparing as unsigned.", "tree": {"sha": "641d37f7bb73407fc00455f7235b971bee2cf428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641d37f7bb73407fc00455f7235b971bee2cf428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10296910f36cf51187b1b5183a3a628422dd757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10296910f36cf51187b1b5183a3a628422dd757", "html_url": "https://github.com/rust-lang/rust/commit/d10296910f36cf51187b1b5183a3a628422dd757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10296910f36cf51187b1b5183a3a628422dd757/comments", "author": {"login": "arieluy", "id": 36049232, "node_id": "MDQ6VXNlcjM2MDQ5MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/36049232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arieluy", "html_url": "https://github.com/arieluy", "followers_url": "https://api.github.com/users/arieluy/followers", "following_url": "https://api.github.com/users/arieluy/following{/other_user}", "gists_url": "https://api.github.com/users/arieluy/gists{/gist_id}", "starred_url": "https://api.github.com/users/arieluy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arieluy/subscriptions", "organizations_url": "https://api.github.com/users/arieluy/orgs", "repos_url": "https://api.github.com/users/arieluy/repos", "events_url": "https://api.github.com/users/arieluy/events{/privacy}", "received_events_url": "https://api.github.com/users/arieluy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arieluy", "id": 36049232, "node_id": "MDQ6VXNlcjM2MDQ5MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/36049232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arieluy", "html_url": "https://github.com/arieluy", "followers_url": "https://api.github.com/users/arieluy/followers", "following_url": "https://api.github.com/users/arieluy/following{/other_user}", "gists_url": "https://api.github.com/users/arieluy/gists{/gist_id}", "starred_url": "https://api.github.com/users/arieluy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arieluy/subscriptions", "organizations_url": "https://api.github.com/users/arieluy/orgs", "repos_url": "https://api.github.com/users/arieluy/repos", "events_url": "https://api.github.com/users/arieluy/events{/privacy}", "received_events_url": "https://api.github.com/users/arieluy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94623ee882d6c598e09cd0787fcc62bd98d88d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/94623ee882d6c598e09cd0787fcc62bd98d88d94", "html_url": "https://github.com/rust-lang/rust/commit/94623ee882d6c598e09cd0787fcc62bd98d88d94"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "043299333b12189644887d969f86cebe8d4aac5f", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d10296910f36cf51187b1b5183a3a628422dd757/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10296910f36cf51187b1b5183a3a628422dd757/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=d10296910f36cf51187b1b5183a3a628422dd757", "patch": "@@ -219,15 +219,17 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n         _ => return,\n     };\n     // value, name, order (higher/lower), inclusiveness\n-    if let (Some((lval, lid, name_span, lval_span, lord, linc)), Some((rval, rid, _, rval_span, rord, rinc))) =\n-        (check_range_bounds(cx, l), check_range_bounds(cx, r))\n+    if let (\n+        Some((lval, lexpr, lid, name_span, lval_span, lord, linc)),\n+        Some((rval, _, rid, _, rval_span, rord, rinc)),\n+    ) = (check_range_bounds(cx, l), check_range_bounds(cx, r))\n     {\n         // we only lint comparisons on the same name and with different\n         // direction\n         if lid != rid || lord == rord {\n             return;\n         }\n-        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(l), &lval, &rval);\n+        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(lexpr), &lval, &rval);\n         if combine_and && ord == Some(rord) {\n             // order lower bound and upper bound\n             let (l_span, u_span, l_inc, u_inc) = if rord == Ordering::Less {\n@@ -292,7 +294,10 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n     }\n }\n \n-fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant, HirId, Span, Span, Ordering, bool)> {\n+fn check_range_bounds<'a>(\n+    cx: &'a LateContext<'_>,\n+    ex: &'a Expr<'_>,\n+) -> Option<(Constant, &'a Expr<'a>, HirId, Span, Span, Ordering, bool)> {\n     if let ExprKind::Binary(ref op, l, r) = ex.kind {\n         let (inclusive, ordering) = match op.node {\n             BinOpKind::Gt => (false, Ordering::Greater),\n@@ -303,11 +308,11 @@ fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant,\n         };\n         if let Some(id) = path_to_local(l) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), r) {\n-                return Some((c, id, l.span, r.span, ordering, inclusive));\n+                return Some((c, r, id, l.span, r.span, ordering, inclusive));\n             }\n         } else if let Some(id) = path_to_local(r) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), l) {\n-                return Some((c, id, r.span, l.span, ordering.reverse(), inclusive));\n+                return Some((c, l, id, r.span, l.span, ordering.reverse(), inclusive));\n             }\n         }\n     }"}, {"sha": "3d34eaa916ed3346724361cd8172fc8d8e1d99d3", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d10296910f36cf51187b1b5183a3a628422dd757/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10296910f36cf51187b1b5183a3a628422dd757/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=d10296910f36cf51187b1b5183a3a628422dd757", "patch": "@@ -130,12 +130,10 @@ impl Constant {\n         match (left, right) {\n             (&Self::Str(ref ls), &Self::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Self::Char(ref l), &Self::Char(ref r)) => Some(l.cmp(r)),\n-            (&Self::Int(l), &Self::Int(r)) => {\n-                if let ty::Int(int_ty) = *cmp_type.kind() {\n-                    Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n-                } else {\n-                    Some(l.cmp(&r))\n-                }\n+            (&Self::Int(l), &Self::Int(r)) => match *cmp_type.kind() {\n+                ty::Int(int_ty) => Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty))),\n+                ty::Uint(_) => Some(l.cmp(&r)),\n+                _ => bug!(\"Not an int type\"),\n             },\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),"}, {"sha": "f497719971174a14bf03a97cf96734bbe12d168d", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=d10296910f36cf51187b1b5183a3a628422dd757", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     (8..12).contains(&x);\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     (0. ..1.).contains(&y);\n     !(0. ..=1.).contains(&y);\n+\n+    // handle negatives #8721\n+    (-10..=10).contains(&x);\n+    x >= 10 && x <= -10;\n+    (-3. ..=3.).contains(&y);\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "9e2180b0c9944290a4fd872c8e5d7692f2680d23", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=d10296910f36cf51187b1b5183a3a628422dd757", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     x >= 8 && x < 12;\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     y >= 0. && y < 1.;\n     y < 0. || y > 1.;\n+\n+    // handle negatives #8721\n+    x >= -10 && x <= 10;\n+    x >= 10 && x <= -10;\n+    y >= -3. && y <= 3.;\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "1817ee1715d1779c463c7c549147ba91bea489f8", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d10296910f36cf51187b1b5183a3a628422dd757/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=d10296910f36cf51187b1b5183a3a628422dd757", "patch": "@@ -84,5 +84,17 @@ error: manual `!RangeInclusive::contains` implementation\n LL |     y < 0. || y > 1.;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n \n-error: aborting due to 14 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:48:5\n+   |\n+LL |     x >= -10 && x <= 10;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-10..=10).contains(&x)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:50:5\n+   |\n+LL |     y >= -3. && y <= 3.;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n+\n+error: aborting due to 16 previous errors\n "}]}