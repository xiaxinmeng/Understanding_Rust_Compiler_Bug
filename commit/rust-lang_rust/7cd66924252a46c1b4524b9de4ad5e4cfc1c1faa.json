{"sha": "7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZDY2OTI0MjUyYTQ2YzFiNDUyNGI5ZGU0YWQ1ZTRjZmMxYzFmYWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-07T20:01:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-08T04:44:02Z"}, "message": "Fix merge fallout of privacy changes", "tree": {"sha": "da9398990b3000a808e19deb362d17bdb665233f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9398990b3000a808e19deb362d17bdb665233f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "html_url": "https://github.com/rust-lang/rust/commit/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "html_url": "https://github.com/rust-lang/rust/commit/2c76cdae3e091ee8fe662713e89a56ceffc6e19c"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "83833afb90e95f5609c80f6a3a388cfeee7c60af", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -1624,6 +1624,8 @@ pub mod submodule {\n         }\n     }\n }\n+\n+# fn main() {}\n ~~~\n \n For a rust program to pass the privacy checking pass, all paths must be valid\n@@ -1643,6 +1645,8 @@ pub use api = self::implementation;\n mod implementation {\n     pub fn f() {}\n }\n+\n+# fn main() {}\n ~~~\n \n This means that any external crate referencing `implementation::f` would receive"}, {"sha": "3f2c55a55b838595e01fb7f1763bfc1286daba04", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -623,6 +623,7 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n     }\n \n     encode_path(ecx, ebml_w, path, ast_map::path_mod(name));\n+    encode_visibility(ebml_w, vis);\n \n     // Encode the reexports of this module, if this module is public.\n     if vis == public {"}, {"sha": "fb4b76c7c916e6411dd330e92d809450a2f5b5de", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -64,28 +64,40 @@ impl<'self> Visitor<()> for ParentVisitor<'self> {\n                     }\n                 }\n             }\n+\n+            // Trait methods are always considered \"public\", but if the trait is\n+            // private then we need some private item in the chain from the\n+            // method to the root. In this case, if the trait is private, then\n+            // parent all the methods to the trait to indicate that they're\n+            // private.\n+            ast::item_trait(_, _, ref methods) if item.vis != ast::public => {\n+                for m in methods.iter() {\n+                    match *m {\n+                        ast::provided(ref m) => self.parents.insert(m.id, item.id),\n+                        ast::required(ref m) => self.parents.insert(m.id, item.id),\n+                    };\n+                }\n+            }\n+\n             _ => {}\n         }\n         visit::walk_item(self, item, ());\n         self.curparent = prev;\n     }\n \n-    fn visit_trait_method(&mut self, m: &ast::trait_method, _: ()) {\n-        match *m {\n-            ast::provided(ref m) => self.parents.insert(m.id, self.curparent),\n-            ast::required(ref m) => self.parents.insert(m.id, self.curparent),\n-        };\n-        visit::walk_trait_method(self, m, ());\n-    }\n-\n     fn visit_foreign_item(&mut self, a: @ast::foreign_item, _: ()) {\n         self.parents.insert(a.id, self.curparent);\n         visit::walk_foreign_item(self, a, ());\n     }\n \n     fn visit_fn(&mut self, a: &visit::fn_kind, b: &ast::fn_decl,\n                 c: &ast::Block, d: Span, id: ast::NodeId, _: ()) {\n-        self.parents.insert(id, self.curparent);\n+        // We already took care of some trait methods above, otherwise things\n+        // like impl methods and pub trait methods are parented to the\n+        // containing module, not the containing trait.\n+        if !self.parents.contains_key(&id) {\n+            self.parents.insert(id, self.curparent);\n+        }\n         visit::walk_fn(self, a, b, c, d, id, ());\n     }\n "}, {"sha": "156cb741af3e0f4bbac4d4a032725017edd75af6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -1649,7 +1649,15 @@ impl Resolver {\n                 external crate) building external def, priv {:?}\",\n                vis);\n         let is_public = vis == ast::public;\n-        if is_public {\n+        let is_exported = is_public && match new_parent {\n+            ModuleReducedGraphParent(module) => {\n+                match module.def_id {\n+                    None => true,\n+                    Some(did) => self.external_exports.contains(&did)\n+                }\n+            }\n+        };\n+        if is_exported {\n             self.external_exports.insert(def_id_of_def(def));\n         }\n         match def {\n@@ -1725,7 +1733,7 @@ impl Resolver {\n                   if explicit_self != sty_static {\n                       interned_method_names.insert(method_name.name);\n                   }\n-                  if is_public {\n+                  if is_exported {\n                       self.external_exports.insert(method_def_id);\n                   }\n               }\n@@ -1952,7 +1960,7 @@ impl Resolver {\n     /// Builds the reduced graph rooted at the 'use' directive for an external\n     /// crate.\n     fn build_reduced_graph_for_external_crate(&mut self,\n-                                                  root: @mut Module) {\n+                                              root: @mut Module) {\n         do csearch::each_top_level_item_of_crate(self.session.cstore,\n                                                  root.def_id.unwrap().crate)\n                 |def_like, ident, visibility| {"}, {"sha": "bb1e32bf34e3dc6f647355939f62bda76a046898", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -16,7 +16,6 @@ use lib::llvm::{llvm, TargetData, TypeNames};\n use lib::llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::astencode;\n-use middle::privacy;\n use middle::resolve;\n use middle::trans::adt;\n use middle::trans::base;"}, {"sha": "a46e115a503cab08c133da7d54bc445adfaeda29", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -1069,7 +1069,7 @@ fn test_try_fail() {\n \n #[cfg(test)]\n fn get_sched_id() -> int {\n-    do Local::borrow |sched: &mut ::rt::sched::Scheduler| {\n+    do Local::borrow |sched: &mut ::rt::shouldnt_be_public::Scheduler| {\n         sched.sched_id() as int\n     }\n }"}, {"sha": "7363fb6d0b2df27b429be1363821638aee26703e", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -10,6 +10,8 @@\n \n // Make sure that globs only bring in public things.\n \n+#[feature(globs)];\n+\n use bar::*;\n \n mod bar {"}, {"sha": "6764b489b6255cc6be332656dfe64e99513e3548", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n \n // ensures that 'use foo:*' doesn't import non-public item\n "}, {"sha": "0d4dbc86dce4d6e1a89ea3bea9a9499f4a1a19ed", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[no_std]; // makes debugging this test *a lot* easier (during resolve)\n \n mod bar {"}, {"sha": "98772b0c67b82cc8ad59c04b761ed9c4b31e2164", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[no_std]; // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that globs don't leak in regular `use` statements."}, {"sha": "3308be4a12e782946a7ad894f041e1afc8f5f0d6", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[no_std]; // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private"}, {"sha": "4e33536b2b05f381b31d62645a4fb5bb87cecedf", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[no_std]; // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private"}, {"sha": "7a07c97090223c4434193ac6ae482b204db786f8", "filename": "src/test/run-pass/privacy1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Frun-pass%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa/src%2Ftest%2Frun-pass%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy1.rs?ref=7cd66924252a46c1b4524b9de4ad5e4cfc1c1faa", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod test2 {\n+    // This used to generate an ICE (make sure that default functions are\n+    // parented to their trait to find the first private thing as the trait).\n+\n+    struct B;\n+    trait A { fn foo(&self) {} }\n+    impl A for B {}\n+\n+    mod tests {\n+        use super::A;\n+        fn foo() {\n+            let a = super::B;\n+            a.foo();\n+        }\n+    }\n+}\n+\n+\n+pub fn main() {}"}]}