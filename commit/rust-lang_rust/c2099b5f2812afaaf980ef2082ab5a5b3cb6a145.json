{"sha": "c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDk5YjVmMjgxMmFmYWFmOTgwZWYyMDgyYWI1YTViM2NiNmExNDU=", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-08-07T18:58:34Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-08-08T11:36:19Z"}, "message": "Add safety section to `NonNull::as_*` method docs\n\nThis basically adds the safety section of `*mut T::as_{ref,mut}` to the\nsame methods on `NonNull` with minor modifications to fit the\ndifferences.\n\nPart of #48929.", "tree": {"sha": "231cc191ad9da7cfc72e161550335ce730881da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231cc191ad9da7cfc72e161550335ce730881da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "html_url": "https://github.com/rust-lang/rust/commit/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4342347b71313258a46e506ee0a258f365185c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4342347b71313258a46e506ee0a258f365185c", "html_url": "https://github.com/rust-lang/rust/commit/4d4342347b71313258a46e506ee0a258f365185c"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "7b3db1692a8ce11dfad9e7731c44313c49672c7d", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "patch": "@@ -117,6 +117,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory the pointer points to must not\n+    /// get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n@@ -130,6 +148,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferenceable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory this pointer points to must not\n+    /// get accessed (read or written) through any other pointer.\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {"}]}