{"sha": "b14b20c6388da5379df078dc2e7ea3bff582af7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNGIyMGM2Mzg4ZGE1Mzc5ZGYwNzhkYzJlN2VhM2JmZjU4MmFmN2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T03:14:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-10T03:14:06Z"}, "message": "Rollup merge of #62278 - cuviper:iter-partition, r=alexcrichton\n\nAdd Iterator::partition_in_place() and is_partitioned()\n\n`partition_in_place()` swaps `&mut T` items in-place to satisfy the\npredicate, so all `true` items precede all `false` items. This requires\na `DoubleEndedIterator` so we can search from front and back for items\nthat need swapping.\n\n`is_partitioned()` checks whether the predicate is already satisfied.", "tree": {"sha": "688ea0b2bba425df55f71ac625635bffd7598e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688ea0b2bba425df55f71ac625635bffd7598e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14b20c6388da5379df078dc2e7ea3bff582af7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJVf+CRBK7hj4Ov3rIwAAdHIIABJh4JbuUdHDQw4YFawLd0u5\n3s60Mu8WWZEDbtdCzD4Hi0jflFT/mtuYkFflnwCcwJ/jdlmxtZOv4OpHhOpYpglE\nSoDlsVX8l1m3lUWVl2akNlF29SVVbIy7S9Vudmp8aII2mx+vMrDZPMqZrWbzE3Aj\nxwzCRXo7v6Q+TlP4VwMppKOMUIxc1s50t/VhujQWgEDnfktx+TtVA8buvjyfq7Q3\nU3UBlq2xpkhb3O61iAf0spd7nbLj/ObDncxap6gq0Pft4lPFefPvvYe6hxLOJIwy\nwQDzuKMMPbDvwZPgtn9spoOmWjzhQ1z19yPjrCfD+shMiclu3j0V2GsVXEJoyWM=\n=LmVw\n-----END PGP SIGNATURE-----\n", "payload": "tree 688ea0b2bba425df55f71ac625635bffd7598e68\nparent 3c3e3756b0e9852960acda062f3c3da1ff079811\nparent 7171c83ab234926d620c4869eeac90b393833ef2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562728446 +0200\ncommitter GitHub <noreply@github.com> 1562728446 +0200\n\nRollup merge of #62278 - cuviper:iter-partition, r=alexcrichton\n\nAdd Iterator::partition_in_place() and is_partitioned()\n\n`partition_in_place()` swaps `&mut T` items in-place to satisfy the\npredicate, so all `true` items precede all `false` items. This requires\na `DoubleEndedIterator` so we can search from front and back for items\nthat need swapping.\n\n`is_partitioned()` checks whether the predicate is already satisfied.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b20c6388da5379df078dc2e7ea3bff582af7d", "html_url": "https://github.com/rust-lang/rust/commit/b14b20c6388da5379df078dc2e7ea3bff582af7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14b20c6388da5379df078dc2e7ea3bff582af7d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3e3756b0e9852960acda062f3c3da1ff079811", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3e3756b0e9852960acda062f3c3da1ff079811", "html_url": "https://github.com/rust-lang/rust/commit/3c3e3756b0e9852960acda062f3c3da1ff079811"}, {"sha": "7171c83ab234926d620c4869eeac90b393833ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7171c83ab234926d620c4869eeac90b393833ef2", "html_url": "https://github.com/rust-lang/rust/commit/7171c83ab234926d620c4869eeac90b393833ef2"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "6eddac672c1585c49e658359f1aee617b85290fa", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=b14b20c6388da5379df078dc2e7ea3bff582af7d", "patch": "@@ -1472,6 +1472,11 @@ pub trait Iterator {\n     /// `partition()` returns a pair, all of the elements for which it returned\n     /// `true`, and all of the elements for which it returned `false`.\n     ///\n+    /// See also [`is_partitioned()`] and [`partition_in_place()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition_in_place()`]: #method.partition_in_place\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1506,6 +1511,101 @@ pub trait Iterator {\n         (left, right)\n     }\n \n+    /// Reorder the elements of this iterator *in-place* according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    /// Returns the number of `true` elements found.\n+    ///\n+    /// The relative order of partitioned items is not maintained.\n+    ///\n+    /// See also [`is_partitioned()`] and [`partition()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition()`]: #method.partition\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_partition_in_place)]\n+    ///\n+    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n+    ///\n+    /// // Partition in-place between evens and odds\n+    /// let i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n+    ///\n+    /// assert_eq!(i, 3);\n+    /// assert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\n+    /// assert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n+    /// ```\n+    #[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue = \"62543\")]\n+    fn partition_in_place<'a, T: 'a, P>(mut self, ref mut predicate: P) -> usize\n+    where\n+        Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n+        P: FnMut(&T) -> bool,\n+    {\n+        // FIXME: should we worry about the count overflowing? The only way to have more than\n+        // `usize::MAX` mutable references is with ZSTs, which aren't useful to partition...\n+\n+        // These closure \"factory\" functions exist to avoid genericity in `Self`.\n+\n+        #[inline]\n+        fn is_false<'a, T>(\n+            predicate: &'a mut impl FnMut(&T) -> bool,\n+            true_count: &'a mut usize,\n+        ) -> impl FnMut(&&mut T) -> bool + 'a {\n+            move |x| {\n+                let p = predicate(&**x);\n+                *true_count += p as usize;\n+                !p\n+            }\n+        }\n+\n+        #[inline]\n+        fn is_true<T>(\n+            predicate: &mut impl FnMut(&T) -> bool\n+        ) -> impl FnMut(&&mut T) -> bool + '_ {\n+            move |x| predicate(&**x)\n+        }\n+\n+        // Repeatedly find the first `false` and swap it with the last `true`.\n+        let mut true_count = 0;\n+        while let Some(head) = self.find(is_false(predicate, &mut true_count)) {\n+            if let Some(tail) = self.rfind(is_true(predicate)) {\n+                crate::mem::swap(head, tail);\n+                true_count += 1;\n+            } else {\n+                break;\n+            }\n+        }\n+        true_count\n+    }\n+\n+    /// Checks if the elements of this iterator are partitioned according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    ///\n+    /// See also [`partition()`] and [`partition_in_place()`].\n+    ///\n+    /// [`partition()`]: #method.partition\n+    /// [`partition_in_place()`]: #method.partition_in_place\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_is_partitioned)]\n+    ///\n+    /// assert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\n+    /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n+    /// ```\n+    #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"62544\")]\n+    fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n+    where\n+        Self: Sized,\n+        P: FnMut(Self::Item) -> bool,\n+    {\n+        // Either all items test `true`, or the first clause stops at `false`\n+        // and we check that there are no more `true` items after that.\n+        self.all(&mut predicate) || !self.any(predicate)\n+    }\n+\n     /// An iterator method that applies a function as long as it returns\n     /// successfully, producing a single, final value.\n     ///"}, {"sha": "b7b0849e2129b65af0c1ab3c4e409f0fbb2c1f15", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=b14b20c6388da5379df078dc2e7ea3bff582af7d", "patch": "@@ -2460,3 +2460,39 @@ fn test_is_sorted() {\n     assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());\n     assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n }\n+\n+#[test]\n+fn test_partition() {\n+    fn check(xs: &mut [i32], ref p: impl Fn(&i32) -> bool, expected: usize) {\n+        let i = xs.iter_mut().partition_in_place(p);\n+        assert_eq!(expected, i);\n+        assert!(xs[..i].iter().all(p));\n+        assert!(!xs[i..].iter().any(p));\n+        assert!(xs.iter().is_partitioned(p));\n+        if i == 0 || i == xs.len() {\n+            assert!(xs.iter().rev().is_partitioned(p));\n+        } else {\n+            assert!(!xs.iter().rev().is_partitioned(p));\n+        }\n+    }\n+\n+    check(&mut [], |_| true, 0);\n+    check(&mut [], |_| false, 0);\n+\n+    check(&mut [0], |_| true, 1);\n+    check(&mut [0], |_| false, 0);\n+\n+    check(&mut [-1, 1], |&x| x > 0, 1);\n+    check(&mut [-1, 1], |&x| x < 0, 1);\n+\n+    let ref mut xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    check(xs, |_| true, 10);\n+    check(xs, |_| false, 0);\n+    check(xs, |&x| x % 2 == 0, 5); // evens\n+    check(xs, |&x| x % 2 == 1, 5); // odds\n+    check(xs, |&x| x % 3 == 0, 4); // multiple of 3\n+    check(xs, |&x| x % 4 == 0, 3); // multiple of 4\n+    check(xs, |&x| x % 5 == 0, 2); // multiple of 5\n+    check(xs, |&x| x < 3, 3); // small\n+    check(xs, |&x| x > 6, 3); // large\n+}"}, {"sha": "cbb6423d710106fb4ac7bdba6f8e7d1fe2bdcd80", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b20c6388da5379df078dc2e7ea3bff582af7d/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=b14b20c6388da5379df078dc2e7ea3bff582af7d", "patch": "@@ -31,6 +31,8 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n #![feature(const_fn)]\n+#![feature(iter_partition_in_place)]\n+#![feature(iter_is_partitioned)]\n #![warn(rust_2018_idioms)]\n \n extern crate test;"}]}