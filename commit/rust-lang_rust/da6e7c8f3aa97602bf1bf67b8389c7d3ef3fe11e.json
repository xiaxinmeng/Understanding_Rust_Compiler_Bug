{"sha": "da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNmU3YzhmM2FhOTc2MDJiZjFiZjY3YjgzODljN2QzZWYzZmUxMWU=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-03-09T12:31:26Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-03-09T12:31:55Z"}, "message": "Distinguish the ways `CStr::from_bytes_with_nul` can fail", "tree": {"sha": "5c3f2aecef9c50438c6d61299d9ca88ecbf23e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3f2aecef9c50438c6d61299d9ca88ecbf23e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e", "html_url": "https://github.com/rust-lang/rust/commit/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04ebef43242ade6be8968694caf56a0fb00a4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3", "html_url": "https://github.com/rust-lang/rust/commit/b04ebef43242ade6be8968694caf56a0fb00a4d3"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "bfb0aa6e1a122410e6fe6acfd1e9b612e2c76710", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=da6e7c8f3aa97602bf1bf67b8389c7d3ef3fe11e", "patch": "@@ -154,7 +154,28 @@ pub struct NulError(usize, Vec<u8>);\n /// byte was found too early in the slice provided or one wasn't found at all.\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-pub struct FromBytesWithNulError { _a: () }\n+pub struct FromBytesWithNulError {\n+    kind: FromBytesWithNulErrorKind,\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+enum FromBytesWithNulErrorKind {\n+    InteriorNul(usize),\n+    NotNulTerminated,\n+}\n+\n+impl FromBytesWithNulError {\n+    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+        FromBytesWithNulError {\n+            kind: FromBytesWithNulErrorKind::InteriorNul(pos),\n+        }\n+    }\n+    fn not_nul_terminated() -> FromBytesWithNulError {\n+        FromBytesWithNulError {\n+            kind: FromBytesWithNulErrorKind::NotNulTerminated,\n+        }\n+    }\n+}\n \n /// An error returned from `CString::into_string` to indicate that a UTF-8 error\n /// was encountered during the conversion.\n@@ -458,14 +479,23 @@ impl From<NulError> for io::Error {\n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl Error for FromBytesWithNulError {\n     fn description(&self) -> &str {\n-        \"data provided is not null terminated or contains an interior nul byte\"\n+        match self.kind {\n+            FromBytesWithNulErrorKind::InteriorNul(..) =>\n+                \"data provided contains an interior nul byte\",\n+            FromBytesWithNulErrorKind::NotNulTerminated =>\n+                \"data provided is not nul terminated\",\n+        }\n     }\n }\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl fmt::Display for FromBytesWithNulError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n+        f.write_str(self.description())?;\n+        if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n+            write!(f, \" at byte pos {}\", pos)?;\n+        }\n+        Ok(())\n     }\n }\n \n@@ -559,10 +589,14 @@ impl CStr {\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub fn from_bytes_with_nul(bytes: &[u8])\n                                -> Result<&CStr, FromBytesWithNulError> {\n-        if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n-            Err(FromBytesWithNulError { _a: () })\n+        let nul_pos = memchr::memchr(0, bytes);\n+        if let Some(nul_pos) = nul_pos {\n+            if nul_pos + 1 != bytes.len() {\n+                return Err(FromBytesWithNulError::interior_nul(nul_pos));\n+            }\n+            Ok(unsafe { CStr::from_bytes_with_nul_unchecked(bytes) })\n         } else {\n-            Ok(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\n+            Err(FromBytesWithNulError::not_nul_terminated())\n         }\n     }\n "}]}