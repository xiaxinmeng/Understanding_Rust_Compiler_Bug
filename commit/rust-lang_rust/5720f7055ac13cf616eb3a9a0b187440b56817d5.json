{"sha": "5720f7055ac13cf616eb3a9a0b187440b56817d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjBmNzA1NWFjMTNjZjYxNmViM2E5YTBiMTg3NDQwYjU2ODE3ZDU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-27T10:31:48Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-27T10:31:48Z"}, "message": "Register new snapshots (2015-07-26 a5c12f4).", "tree": {"sha": "8bb78bc851de24e3ab11a879517a0788416396d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb78bc851de24e3ab11a879517a0788416396d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5720f7055ac13cf616eb3a9a0b187440b56817d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5720f7055ac13cf616eb3a9a0b187440b56817d5", "html_url": "https://github.com/rust-lang/rust/commit/5720f7055ac13cf616eb3a9a0b187440b56817d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5720f7055ac13cf616eb3a9a0b187440b56817d5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7e825ecdb00023f481e5648b356d40b606fa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7e825ecdb00023f481e5648b356d40b606fa35", "html_url": "https://github.com/rust-lang/rust/commit/cf7e825ecdb00023f481e5648b356d40b606fa35"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "fce327398e38daa348687e257a68a88df0a150c1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -70,8 +70,6 @@\n        test(no_crate_inject))]\n #![no_std]\n \n-// SNAP d4432b3\n-#![allow(unused_features)] // until feature(placement_in_syntax) is in snap\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]"}, {"sha": "80b7587ed36435a696a727e9cd074b601cc3fcbf", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -184,19 +184,11 @@ extern \"rust-intrinsic\" {\n     /// elements.\n     pub fn size_of<T>() -> usize;\n \n-    #[cfg(not(stage0))]\n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n-    // SNAP d4432b3\n-    #[cfg(stage0)]\n-    /// Moves a value to an uninitialized memory location.\n-    ///\n-    /// Drop glue is not run on the destination.\n-    pub fn move_val_init<T>(dst: &mut T, src: T);\n-\n     pub fn min_align_of<T>() -> usize;\n     pub fn pref_align_of<T>() -> usize;\n \n@@ -614,6 +606,5 @@ extern \"rust-intrinsic\" {\n     /// Rust's \"try catch\" construct which invokes the function pointer `f` with\n     /// the data pointer `data`, returning the exception payload if an exception\n     /// is thrown (aka the thread panics).\n-    #[cfg(not(stage0))]\n     pub fn try(f: fn(*mut u8), data: *mut u8) -> *mut u8;\n }"}, {"sha": "1fff123c7aa512eca88ec06ded0ce99bda6a417a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -203,7 +203,6 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![cfg_attr(stage0, allow(unused_features))]\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]"}, {"sha": "23e10ee6c39e3b318fafb0df514c025c222002d0", "filename": "src/libstd/rt/unwind/gcc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -115,7 +115,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         _version: c_int,\n@@ -168,7 +168,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         _version: c_int,\n@@ -218,7 +218,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n@@ -307,7 +307,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         exceptionRecord: *mut EXCEPTION_RECORD,"}, {"sha": "60eced014de1b27aa4311d34a39dc199847684ac", "filename": "src/libstd/rt/unwind/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fmod.rs?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -139,7 +139,6 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     // `dllexport`, but it's easier to not have conditional `src/rt/rust_try.ll`\n     // files and instead just have this non-generic shim the compiler can take\n     // care of exposing correctly.\n-    #[cfg(not(stage0))]\n     unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n                         -> Result<(), Box<Any + Send>> {\n         let prev = PANICKING.with(|s| s.get());\n@@ -152,11 +151,6 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n             Err(imp::cleanup(ep))\n         }\n     }\n-    #[cfg(stage0)]\n-    unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n-                        -> Result<(), Box<Any + Send>> {\n-        Ok(f(data))\n-    }\n \n     fn try_fn<F: FnOnce()>(opt_closure: *mut u8) {\n         let opt_closure = opt_closure as *mut Option<F>;"}, {"sha": "d317b5be4c101c8e0c7acaecd3f85e040ea4285c", "filename": "src/snapshots.txt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5720f7055ac13cf616eb3a9a0b187440b56817d5/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=5720f7055ac13cf616eb3a9a0b187440b56817d5", "patch": "@@ -1,3 +1,13 @@\n+S 2015-07-26 a5c12f4\n+  bitrig-x86_64 8734eb41ffbe6ddc1120aa2910db4162ec9cf270\n+  freebsd-x86_64 bc50b0f8d7f6d62f4f5ffa136f5387f5bf6524fd\n+  linux-i386 3459275cdf3896f678e225843fa56f0d9fdbabe8\n+  linux-x86_64 e451e3bd6e5fcef71e41ae6f3da9fb1cf0e13a0c\n+  macos-i386 428944a7984c0988e77909d82ca2ef77d96a1fbd\n+  macos-x86_64 b0515bb7d2892b9a58282fc865fee11a885406d6\n+  winnt-i386 22286e815372c3e03729853af48a2f6d538ed086\n+  winnt-x86_64 f13aa3c02a15f8e794b9e180487bdf04378f8f04\n+\n S 2015-07-17 d4432b3\n   bitrig-x86_64 af77768e0eb0f4c7ec5a8e36047a08053b54b230\n   freebsd-i386 b049325e5b2efe5f4884f3dafda448c1dac49b4f"}]}