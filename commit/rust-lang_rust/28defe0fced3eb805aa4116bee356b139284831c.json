{"sha": "28defe0fced3eb805aa4116bee356b139284831c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGVmZTBmY2VkM2ViODA1YWE0MTE2YmVlMzU2YjEzOTI4NDgzMWM=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-07-16T22:46:27Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:36Z"}, "message": "Remove deserialize", "tree": {"sha": "4426fe31fe6a79458b57c06b592d4727ce5d7946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4426fe31fe6a79458b57c06b592d4727ce5d7946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28defe0fced3eb805aa4116bee356b139284831c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28defe0fced3eb805aa4116bee356b139284831c", "html_url": "https://github.com/rust-lang/rust/commit/28defe0fced3eb805aa4116bee356b139284831c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28defe0fced3eb805aa4116bee356b139284831c/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec44b0656da4863e46fdda0c6772c10c387ede2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec44b0656da4863e46fdda0c6772c10c387ede2", "html_url": "https://github.com/rust-lang/rust/commit/dec44b0656da4863e46fdda0c6772c10c387ede2"}], "stats": {"total": 45, "additions": 10, "deletions": 35}, "files": [{"sha": "c27493158826cf695c69586e0af896e91f9e35bd", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28defe0fced3eb805aa4116bee356b139284831c/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28defe0fced3eb805aa4116bee356b139284831c/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=28defe0fced3eb805aa4116bee356b139284831c", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use serde::Deserialize;\n-use serde::de::{self, Deserializer, Visitor};\n-\n use std::any::{Any, TypeId};\n use std::borrow::Borrow;\n use std::cell::RefCell;\n@@ -29,29 +26,6 @@ use builder::Step;\n \n pub struct Interned<T>(usize, PhantomData<*const T>);\n \n-impl<'de> Deserialize<'de> for Interned<String> {\n-    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n-        where D: Deserializer<'de>\n-    {\n-        struct StrVisitor;\n-\n-        impl<'de> Visitor<'de> for StrVisitor {\n-            type Value = &'de str;\n-\n-            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-                formatter.write_str(\"a str\")\n-            }\n-\n-            fn visit_borrowed_str<E>(self, value: &'de str) -> Result<&'de str, E>\n-                where E: de::Error\n-            {\n-                Ok(value)\n-            }\n-        }\n-\n-        Ok(INTERNER.intern_str(deserializer.deserialize_str(StrVisitor)?))\n-    }\n-}\n impl Default for Interned<String> {\n     fn default() -> Self {\n         INTERNER.intern_string(String::default())"}, {"sha": "ad555be877ae4cf7b364cfb3f376f8482ab8f500", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28defe0fced3eb805aa4116bee356b139284831c/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28defe0fced3eb805aa4116bee356b139284831c/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=28defe0fced3eb805aa4116bee356b139284831c", "patch": "@@ -16,7 +16,7 @@ use build_helper::output;\n use serde_json;\n \n use {Build, Crate};\n-use cache::Interned;\n+use cache::INTERNER;\n \n #[derive(Deserialize)]\n struct Output {\n@@ -27,7 +27,7 @@ struct Output {\n #[derive(Deserialize)]\n struct Package {\n     id: String,\n-    name: Interned<String>,\n+    name: String,\n     version: String,\n     source: Option<String>,\n     manifest_path: String,\n@@ -66,15 +66,16 @@ fn build_krate(build: &mut Build, krate: &str) {\n     let mut id2name = HashMap::new();\n     for package in output.packages {\n         if package.source.is_none() {\n-            id2name.insert(package.id, package.name);\n+            let name = INTERNER.intern_string(package.name);\n+            id2name.insert(package.id, name);\n             let mut path = PathBuf::from(package.manifest_path);\n             path.pop();\n-            build.crates.insert(package.name, Crate {\n-                build_step: format!(\"build-crate-{}\", package.name),\n-                doc_step: format!(\"doc-crate-{}\", package.name),\n-                test_step: format!(\"test-crate-{}\", package.name),\n-                bench_step: format!(\"bench-crate-{}\", package.name),\n-                name: package.name,\n+            build.crates.insert(name, Crate {\n+                build_step: format!(\"build-crate-{}\", name),\n+                doc_step: format!(\"doc-crate-{}\", name),\n+                test_step: format!(\"test-crate-{}\", name),\n+                bench_step: format!(\"bench-crate-{}\", name),\n+                name: name,\n                 version: package.version,\n                 deps: Vec::new(),\n                 path: path,"}]}