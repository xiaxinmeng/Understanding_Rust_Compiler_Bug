{"sha": "22c9623604c6366e4783614244372cf1b31f7ca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzk2MjM2MDRjNjM2NmU0NzgzNjE0MjQ0MzcyY2YxYjMxZjdjYTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:09:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:09:19Z"}, "message": "Implement simd_reduce_{add,mul}_{,un}ordered", "tree": {"sha": "e0d64a5f7fd28a5f69803c2c686cb8b83aec4e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d64a5f7fd28a5f69803c2c686cb8b83aec4e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c9623604c6366e4783614244372cf1b31f7ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c9623604c6366e4783614244372cf1b31f7ca7", "html_url": "https://github.com/rust-lang/rust/commit/22c9623604c6366e4783614244372cf1b31f7ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c9623604c6366e4783614244372cf1b31f7ca7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3179bc44bcba851f08e25acab44097c06b27b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3179bc44bcba851f08e25acab44097c06b27b52", "html_url": "https://github.com/rust-lang/rust/commit/c3179bc44bcba851f08e25acab44097c06b27b52"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "d17ed5aaf4c327b8b41fd3f9ef05be7fc69ac9ba", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/22c9623604c6366e4783614244372cf1b31f7ca7/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c9623604c6366e4783614244372cf1b31f7ca7/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=22c9623604c6366e4783614244372cf1b31f7ca7", "patch": "@@ -107,9 +107,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             for (out_idx, in_idx) in indexes.into_iter().enumerate() {\n                 let in_lane = if in_idx < lane_count {\n-                    x.value_field(fx, mir::Field::new(in_idx.try_into().unwrap()))\n+                    x.value_field(fx, mir::Field::new(in_idx.into()))\n                 } else {\n-                    y.value_field(fx, mir::Field::new((in_idx - lane_count).try_into().unwrap()))\n+                    y.value_field(fx, mir::Field::new((in_idx - lane_count).into()))\n                 };\n                 let out_lane = ret.place_field(fx, mir::Field::new(out_idx));\n                 out_lane.write_cvalue(fx, in_lane);\n@@ -207,7 +207,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             assert_eq!(lane_count, ret_lane_count);\n \n             for lane in 0..lane_count {\n-                let lane = mir::Field::new(lane.try_into().unwrap());\n+                let lane = mir::Field::new(lane.into());\n                 let a_lane = a.value_field(fx, lane).load_scalar(fx);\n                 let b_lane = b.value_field(fx, lane).load_scalar(fx);\n                 let c_lane = c.value_field(fx, lane).load_scalar(fx);\n@@ -228,11 +228,47 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n \n+        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n+            assert_eq!(lane_layout.ty, ret.layout().ty);\n+\n+            let mut res_val = v.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+            for lane_idx in 1..lane_count {\n+                let lane = v.value_field(fx, mir::Field::new(lane_idx.into())).load_scalar(fx);\n+                res_val = if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fadd(res_val, lane)\n+                } else {\n+                    fx.bcx.ins().iadd(res_val, lane)\n+                };\n+            }\n+            let res = CValue::by_val(res_val, lane_layout);\n+            ret.write_cvalue(fx, res);\n+        };\n+\n+        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n+            assert_eq!(lane_layout.ty, ret.layout().ty);\n+\n+            let mut res_val = v.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+            for lane_idx in 1..lane_count {\n+                let lane = v.value_field(fx, mir::Field::new(lane_idx.into())).load_scalar(fx);\n+                res_val = if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fmul(res_val, lane)\n+                } else {\n+                    fx.bcx.ins().imul(res_val, lane)\n+                };\n+            }\n+            let res = CValue::by_val(res_val, lane_layout);\n+            ret.write_cvalue(fx, res);\n+        };\n+\n         // simd_fabs\n         // simd_saturating_add\n         // simd_bitmask\n         // simd_select\n-        // simd_reduce_add_{,un}ordered\n+        // simd_reduce_{add,mul}_{,un}ordered\n         // simd_rem\n     }\n }"}]}