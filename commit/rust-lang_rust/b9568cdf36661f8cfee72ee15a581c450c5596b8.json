{"sha": "b9568cdf36661f8cfee72ee15a581c450c5596b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NTY4Y2RmMzY2NjFmOGNmZWU3MmVlMTVhNTgxYzQ1MGM1NTk2Yjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T00:46:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` `creader::Env`", "tree": {"sha": "93c1408624bf98d2a207f4953ed96608c42d1bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c1408624bf98d2a207f4953ed96608c42d1bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9568cdf36661f8cfee72ee15a581c450c5596b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9568cdf36661f8cfee72ee15a581c450c5596b8", "html_url": "https://github.com/rust-lang/rust/commit/b9568cdf36661f8cfee72ee15a581c450c5596b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9568cdf36661f8cfee72ee15a581c450c5596b8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07279011b8a41c5b05320630a5304318b132fa40", "url": "https://api.github.com/repos/rust-lang/rust/commits/07279011b8a41c5b05320630a5304318b132fa40", "html_url": "https://github.com/rust-lang/rust/commit/07279011b8a41c5b05320630a5304318b132fa40"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "64d4d5939d0cf1bf189f39c5cfe295909c185270", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b9568cdf36661f8cfee72ee15a581c450c5596b8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9568cdf36661f8cfee72ee15a581c450c5596b8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b9568cdf36661f8cfee72ee15a581c450c5596b8", "patch": "@@ -33,22 +33,29 @@ pub fn read_crates(sess: Session,\n                    crate: &ast::Crate,\n                    os: loader::Os,\n                    intr: @ident_interner) {\n-    let e = @mut Env {\n+    let mut e = Env {\n         sess: sess,\n         os: os,\n         crate_cache: @mut ~[],\n         next_crate_num: 1,\n         intr: intr\n     };\n-    let mut v = ReadCrateVisitor{ e:e };\n-    visit_crate(e, crate);\n-    visit::walk_crate(&mut v, crate, ());\n+    visit_crate(&e, crate);\n+    {\n+        let mut v = ReadCrateVisitor {\n+            e: &mut e\n+        };\n+        visit::walk_crate(&mut v, crate, ());\n+    }\n     dump_crates(*e.crate_cache);\n-    warn_if_multiple_versions(e, sess.diagnostic(), *e.crate_cache);\n+    warn_if_multiple_versions(&mut e, sess.diagnostic(), *e.crate_cache);\n+}\n+\n+struct ReadCrateVisitor<'a> {\n+    e: &'a mut Env,\n }\n \n-struct ReadCrateVisitor { e:@mut Env }\n-impl visit::Visitor<()> for ReadCrateVisitor {\n+impl<'a> visit::Visitor<()> for ReadCrateVisitor<'a> {\n     fn visit_view_item(&mut self, a:&ast::view_item, _:()) {\n         visit_view_item(self.e, a);\n         visit::walk_view_item(self, a, ());\n@@ -76,7 +83,7 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n     }\n }\n \n-fn warn_if_multiple_versions(e: @mut Env,\n+fn warn_if_multiple_versions(e: &mut Env,\n                              diag: @mut span_handler,\n                              crate_cache: &[cache_entry]) {\n     if crate_cache.len() != 0u {\n@@ -121,7 +128,7 @@ fn visit_crate(e: &Env, c: &ast::Crate) {\n     }\n }\n \n-fn visit_view_item(e: @mut Env, i: &ast::view_item) {\n+fn visit_view_item(e: &mut Env, i: &ast::view_item) {\n     match i.node {\n       ast::view_item_extern_mod(ident, path_opt, _, id) => {\n           let ident = token::ident_to_str(&ident);\n@@ -248,7 +255,7 @@ fn existing_match(e: &Env, name: @str, version: @str, hash: &str) -> Option<ast:\n     None\n }\n \n-fn resolve_crate(e: @mut Env,\n+fn resolve_crate(e: &mut Env,\n                  ident: @str,\n                  name: @str,\n                  version: @str,\n@@ -311,7 +318,7 @@ fn resolve_crate(e: @mut Env,\n }\n \n // Go through the crate metadata and load any crates that it references\n-fn resolve_crate_deps(e: @mut Env, cdata: &[u8]) -> cstore::cnum_map {\n+fn resolve_crate_deps(e: &mut Env, cdata: &[u8]) -> cstore::cnum_map {\n     debug!(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers"}]}