{"sha": "cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjBlMjVhYWE4NDA3Y2FjYTg3OGNmZDBlOTJkNDZiYjUwYjZkYTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-21T17:05:52Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-21T17:05:52Z"}, "message": "Make use of `block_def_map` in body lowering\n\nRemoves the `local_scope` hack from `Expander` in favor of tracking the\n`DefMap` in use during body lowering", "tree": {"sha": "625dde24f7b862a4810d8cc61ea529cbe5383f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625dde24f7b862a4810d8cc61ea529cbe5383f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "html_url": "https://github.com/rust-lang/rust/commit/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc6298600d7d91d8473ba8153ebde7b3a7768e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc6298600d7d91d8473ba8153ebde7b3a7768e5", "html_url": "https://github.com/rust-lang/rust/commit/bbc6298600d7d91d8473ba8153ebde7b3a7768e5"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "8e8c0271fdfd215d4764dcdf09cd9be71cfbb020", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "patch": "@@ -45,7 +45,7 @@ pub(crate) struct CfgExpander {\n \n pub(crate) struct Expander {\n     cfg_expander: CfgExpander,\n-    crate_def_map: Arc<DefMap>,\n+    def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n@@ -90,7 +90,7 @@ impl Expander {\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n-            crate_def_map,\n+            def_map: crate_def_map,\n             current_file_id,\n             ast_id_map,\n             module,\n@@ -101,7 +101,6 @@ impl Expander {\n     pub(crate) fn enter_expand<T: ast::AstNode>(\n         &mut self,\n         db: &dyn DefDatabase,\n-        local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> ExpandResult<Option<(Mark, T)>> {\n         if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n@@ -111,18 +110,12 @@ impl Expander {\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        let resolver = |path: ModPath| -> Option<MacroDefId> {\n-            if let Some(local_scope) = local_scope {\n-                if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n-                    return Some(def);\n-                }\n-            }\n-            self.resolve_path_as_macro(db, &path)\n-        };\n+        let resolver =\n+            |path: ModPath| -> Option<MacroDefId> { self.resolve_path_as_macro(db, &path) };\n \n         let mut err = None;\n         let call_id =\n-            macro_call.as_call_id_with_errors(db, self.crate_def_map.krate(), resolver, &mut |e| {\n+            macro_call.as_call_id_with_errors(db, self.def_map.krate(), resolver, &mut |e| {\n                 err.get_or_insert(e);\n             });\n         let call_id = match call_id {\n@@ -203,7 +196,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {\n-        self.crate_def_map\n+        self.def_map\n             .resolve_path(db, self.module.local_id, path, BuiltinShadowMode::Other)\n             .0\n             .take_macros()"}, {"sha": "2c8a86723087f4ac76c53a043f343461555355a4", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{any::type_name, sync::Arc};\n+use std::{any::type_name, mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n@@ -559,7 +559,7 @@ impl ExprCollector<'_> {\n         let outer_file = self.expander.current_file_id;\n \n         let macro_call = self.expander.to_source(AstPtr::new(&e));\n-        let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n+        let res = self.expander.enter_expand(self.db, e);\n \n         match &res.err {\n             Some(ExpandError::UnresolvedProcMacro) => {\n@@ -696,11 +696,19 @@ impl ExprCollector<'_> {\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n         let syntax_node_ptr = AstPtr::new(&block.clone().into());\n+        let ast_id = self.expander.ast_id(&block);\n+        let def_map = self.db.block_def_map(self.expander.module.krate, ast_id);\n+        let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n+\n         self.collect_stmts_items(block.statements());\n         let statements =\n             block.statements().filter_map(|s| self.collect_stmt(s)).flatten().collect();\n         let tail = block.tail_expr().map(|e| self.collect_expr(e));\n-        self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr)\n+        let expr_id =\n+            self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr);\n+\n+        self.expander.def_map = prev_def_map;\n+        expr_id\n     }\n \n     fn collect_stmts_items(&mut self, stmts: ast::AstChildren<ast::Stmt>) {\n@@ -830,7 +838,7 @@ impl ExprCollector<'_> {\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n                     // decide that, we need to try resolving the name.\n-                    let (resolved, _) = self.expander.crate_def_map.resolve_path(\n+                    let (resolved, _) = self.expander.def_map.resolve_path(\n                         self.db,\n                         self.expander.module.local_id,\n                         &name.clone().into(),"}, {"sha": "c2b0dc00714a9e1fae5345f439170ce47300c6e7", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb0e25aaa8407caca878cfd0e92d46bb50b6da1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=cdb0e25aaa8407caca878cfd0e92d46bb50b6da1", "patch": "@@ -262,7 +262,7 @@ fn collect_items(\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n \n-                if let Some((mark, mac)) = expander.enter_expand(db, None, call).value {\n+                if let Some((mark, mac)) = expander.enter_expand(db, call).value {\n                     let src: InFile<ast::MacroItems> = expander.to_source(mac);\n                     let item_tree = db.item_tree(src.file_id);\n                     let iter ="}]}