{"sha": "b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OWE1ZDFmN2M4ZmI3ZmNmYmJiZjA2NTQ0YmU5YmZhZjJjMjViZjg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-06T21:00:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-09T20:17:00Z"}, "message": "Make FixedCount partitioning handle case where codegen units have to be added.", "tree": {"sha": "c14d97a4cf7bffce141567adcf53bff58d63a225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c14d97a4cf7bffce141567adcf53bff58d63a225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8", "html_url": "https://github.com/rust-lang/rust/commit/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0142336a2a447e9883ae4dd6db98354154ba08e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0142336a2a447e9883ae4dd6db98354154ba08e3", "html_url": "https://github.com/rust-lang/rust/commit/0142336a2a447e9883ae4dd6db98354154ba08e3"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "7b21b612097597eff5e12ce0bd8b2a2f71610313", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=b89a5d1f7c8fb7fcfbbbf06544be9bfaf2c25bf8", "patch": "@@ -182,19 +182,7 @@ pub fn partition<'tcx, I>(tcx: &TyCtxt<'tcx>,\n     // easily determine which declarations need to be placed within each one.\n     let post_declarations = place_declarations(post_inlining, reference_map);\n \n-    let mut final_partitioning = post_declarations.0;\n-\n-    if final_partitioning.len() == 0 {\n-        // Some crates don't contain anything that will result in a translation\n-        // item. We still want to have at least one (empty) codegen unit in that\n-        // case.\n-        final_partitioning.push(CodegenUnit {\n-            name: token::intern_and_get_ident(&format!(\"{}.0\", tcx.crate_name)[..]),\n-            items: FnvHashMap()\n-        });\n-    }\n-\n-    final_partitioning\n+    post_declarations.0\n }\n \n struct PreInliningPartitioning<'tcx> {\n@@ -268,10 +256,6 @@ fn place_root_translation_items<'tcx, I>(tcx: &TyCtxt<'tcx>,\n fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<'tcx>,\n                              target_cgu_count: usize,\n                              crate_name: &str) {\n-    if target_cgu_count >= initial_partitioning.codegen_units.len() {\n-        return;\n-    }\n-\n     assert!(target_cgu_count >= 1);\n     let codegen_units = &mut initial_partitioning.codegen_units;\n \n@@ -290,7 +274,22 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     }\n \n     for (index, cgu) in codegen_units.iter_mut().enumerate() {\n-        cgu.name = token::intern_and_get_ident(&format!(\"{}.{}\", crate_name, index)[..]);\n+        cgu.name = numbered_codegen_unit_name(crate_name, index);\n+    }\n+\n+    // If the initial partitioning contained less than target_cgu_count to begin\n+    // with, we won't have enough codegen units here, so add a empty units until\n+    // we reach the target count\n+    while codegen_units.len() < target_cgu_count {\n+        let index = codegen_units.len();\n+        codegen_units.push(CodegenUnit {\n+            name: numbered_codegen_unit_name(crate_name, index),\n+            items: FnvHashMap()\n+        });\n+    }\n+\n+    fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {\n+        token::intern_and_get_ident(&format!(\"{}.{}\", crate_name, index)[..])\n     }\n }\n "}]}