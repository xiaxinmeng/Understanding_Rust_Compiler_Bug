{"sha": "bba4be681d664a50ab307ec732f957c02255e067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTRiZTY4MWQ2NjRhNTBhYjMwN2VjNzMyZjk1N2MwMjI1NWUwNjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-01T00:53:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-06T22:43:14Z"}, "message": "Move rustc_mir::transform to rustc_mir_transform.", "tree": {"sha": "d56899ff2ba1bcf004901eac1e155b2656a5e4fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56899ff2ba1bcf004901eac1e155b2656a5e4fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba4be681d664a50ab307ec732f957c02255e067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba4be681d664a50ab307ec732f957c02255e067", "html_url": "https://github.com/rust-lang/rust/commit/bba4be681d664a50ab307ec732f957c02255e067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba4be681d664a50ab307ec732f957c02255e067/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31a61ccc38201a13c2549b20772daf15ce0e0309", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a61ccc38201a13c2549b20772daf15ce0e0309", "html_url": "https://github.com/rust-lang/rust/commit/31a61ccc38201a13c2549b20772daf15ce0e0309"}], "stats": {"total": 1473, "additions": 775, "deletions": 698}, "files": [{"sha": "3ec143d2492f96e767fccbdff400a3434c02caa5", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -3928,6 +3928,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_mir\",\n  \"rustc_mir_build\",\n+ \"rustc_mir_transform\",\n  \"rustc_parse\",\n  \"rustc_passes\",\n  \"rustc_plugin_impl\",\n@@ -4071,10 +4072,8 @@ dependencies = [\n name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n- \"coverage_test_macros\",\n  \"either\",\n  \"gsgdt\",\n- \"itertools 0.9.0\",\n  \"polonius-engine\",\n  \"regex\",\n  \"rustc_apfloat\",\n@@ -4120,6 +4119,29 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_mir_transform\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"coverage_test_macros\",\n+ \"itertools 0.9.0\",\n+ \"rustc_ast\",\n+ \"rustc_attr\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_middle\",\n+ \"rustc_mir\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"rustc_trait_selection\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_parse\"\n version = \"0.0.0\""}, {"sha": "8b277269258358305c537c2c87a80572a9de0743", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -34,6 +34,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n rustc_mir = { path = \"../rustc_mir\" }\n rustc_mir_build = { path = \"../rustc_mir_build\" }\n+rustc_mir_transform = { path = \"../rustc_mir_transform\" }\n rustc_passes = { path = \"../rustc_passes\" }\n rustc_typeck = { path = \"../rustc_typeck\" }\n rustc_lint = { path = \"../rustc_lint\" }"}, {"sha": "7d41db0d4aeee7bd5b4087f5632368c0bbff7f2c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -742,6 +742,7 @@ pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     mir::provide(providers);\n     mir_borrowck::provide(providers);\n     mir_build::provide(providers);\n+    rustc_mir_transform::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n@@ -913,7 +914,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         for def_id in tcx.body_owners() {\n             tcx.ensure().thir_check_unsafety(def_id);\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n-                mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n+                rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);\n             }\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n@@ -1061,7 +1062,7 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(e) = mir::transform::dump_mir::emit_mir(tcx, outputs) {\n+        if let Err(e) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n             tcx.sess.err(&format!(\"could not emit MIR: {}\", e));\n             tcx.sess.abort_if_errors();\n         }"}, {"sha": "0207d9c012ed09ccf3f5ce4eaa944a7047c267d7", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -9,7 +9,6 @@ doctest = false\n [dependencies]\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n-itertools = \"0.9\"\n polonius-engine = \"0.13.0\"\n regex = \"1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n@@ -30,6 +29,3 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_span = { path = \"../rustc_span\" }\n-\n-[dev-dependencies]\n-coverage_test_macros = { path = \"src/transform/coverage/test_macros\" }"}, {"sha": "fa449a2368861dfe1f1aa599813e189957498f59", "filename": "compiler/rustc_mir/src/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -79,7 +79,7 @@ fn place_contents_drop_state_cannot_differ<'tcx>(\n     }\n }\n \n-pub(crate) fn on_lookup_result_bits<'tcx, F>(\n+pub fn on_lookup_result_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -96,7 +96,7 @@ pub(crate) fn on_lookup_result_bits<'tcx, F>(\n     }\n }\n \n-pub(crate) fn on_all_children_bits<'tcx, F>(\n+pub fn on_all_children_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -138,7 +138,7 @@ pub(crate) fn on_all_children_bits<'tcx, F>(\n     on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);\n }\n \n-pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n+pub fn on_all_drop_children_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -161,7 +161,7 @@ pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n     })\n }\n \n-pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n+pub fn drop_flag_effects_for_function_entry<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -179,7 +179,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n     }\n }\n \n-pub(crate) fn drop_flag_effects_for_location<'tcx, F>(\n+pub fn drop_flag_effects_for_location<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,"}, {"sha": "f388d41d3177117dd435fa13f554d969445e6b80", "filename": "compiler/rustc_mir/src/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -3,7 +3,11 @@ use rustc_middle::ty;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n-pub(crate) use self::drop_flag_effects::*;\n+pub use self::drop_flag_effects::{\n+    drop_flag_effects_for_function_entry, drop_flag_effects_for_location,\n+    move_path_children_matching, on_all_children_bits, on_all_drop_children_bits,\n+    on_lookup_result_bits,\n+};\n pub use self::framework::{\n     fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine, Forward,\n     GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n@@ -26,7 +30,7 @@ pub struct MoveDataParamEnv<'tcx> {\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n-pub(crate) fn has_rustc_mir_with(\n+pub fn has_rustc_mir_with(\n     _sess: &Session,\n     attrs: &[ast::Attribute],\n     name: Symbol,"}, {"sha": "84e79408397e59efeabc80e346bfb425196268da", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -420,7 +420,7 @@ impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n     /// A helper function that allocates memory for the layout given and gives you access to mutate\n     /// it. Once your own mutation code is done, the backing `Allocation` is removed from the\n     /// current `Memory` and returned.\n-    pub(crate) fn intern_with_temp_alloc(\n+    pub fn intern_with_temp_alloc(\n         &mut self,\n         layout: TyAndLayout<'tcx>,\n         f: impl FnOnce("}, {"sha": "63aca67c9443c13b1724fa6fb2087cc6e94ec327", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -296,7 +296,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in an `Immediate`, not on which data is stored there currently.\n-    pub(crate) fn try_read_immediate(\n+    pub fn try_read_immediate(\n         &self,\n         src: &OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {\n@@ -547,7 +547,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     // in patterns via the `const_eval` module\n     /// The `val` and `layout` are assumed to already be in our interpreter\n     /// \"universe\" (param_env).\n-    crate fn const_to_op(\n+    pub fn const_to_op(\n         &self,\n         val: &ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n@@ -566,7 +566,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    crate fn mir_const_to_op(\n+    pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,"}, {"sha": "09bd07660a33eb0fa3ca56cc16ce2d62c6ce7b37", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -76,7 +76,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Runs the interpretation logic for the given `mir::Statement` at the current frame and\n     /// statement counter. This also moves the statement counter forward.\n-    crate fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n+    pub fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n \n         use rustc_middle::mir::StatementKind::*;"}, {"sha": "4c79c7da15c5224907a01eb9fc4dfe6d7673981d", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -37,23 +37,18 @@ pub mod const_eval;\n pub mod dataflow;\n pub mod interpret;\n pub mod monomorphize;\n-mod shim;\n pub mod transform;\n pub mod util;\n \n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {\n     const_eval::provide(providers);\n-    shim::provide(providers);\n-    transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n     monomorphize::polymorphize::provide(providers);\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.mir_callgraph_reachable = transform::inline::cycle::mir_callgraph_reachable;\n-    providers.mir_inliner_callees = transform::inline::cycle::mir_inliner_callees;\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)"}, {"sha": "abf43dd1d23bbe4e0b2946aaee3adefc84dbcf43", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 603, "changes": 605, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,149 +1,12 @@\n-use crate::{shim, util};\n-use required_consts::RequiredConstsVisitor;\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::steal::Steal;\n-use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n-use rustc_span::{Span, Symbol};\n+use rustc_middle::mir::Body;\n+use rustc_middle::ty::TyCtxt;\n use std::borrow::Cow;\n \n-pub mod abort_unwinding_calls;\n-pub mod add_call_guards;\n-pub mod add_moves_for_packed_drops;\n-pub mod add_retag;\n-pub mod check_const_item_mutation;\n pub mod check_consts;\n-pub mod check_packed_ref;\n-pub mod check_unsafety;\n-pub mod cleanup_post_borrowck;\n-pub mod const_debuginfo;\n-pub mod const_goto;\n-pub mod const_prop;\n-pub mod coverage;\n-pub mod deaggregator;\n-pub mod deduplicate_blocks;\n-pub mod dest_prop;\n-pub mod dump_mir;\n-pub mod early_otherwise_branch;\n-pub mod elaborate_drops;\n-pub mod function_item_references;\n-pub mod generator;\n-pub mod inline;\n-pub mod instcombine;\n-pub mod lower_intrinsics;\n-pub mod lower_slice_len;\n-pub mod match_branches;\n-pub mod multiple_return_terminators;\n-pub mod nrvo;\n pub mod promote_consts;\n-pub mod remove_noop_landing_pads;\n-pub mod remove_storage_markers;\n-pub mod remove_unneeded_drops;\n-pub mod remove_zsts;\n-pub mod required_consts;\n pub mod rustc_peek;\n-pub mod separate_const_switch;\n-pub mod simplify;\n-pub mod simplify_branches;\n-pub mod simplify_comparison_integral;\n-pub mod simplify_try;\n-pub mod uninhabited_enum_branching;\n-pub mod unreachable_prop;\n pub mod validate;\n \n-pub use rustc_middle::mir::MirSource;\n-\n-pub(crate) fn provide(providers: &mut Providers) {\n-    self::check_unsafety::provide(providers);\n-    self::check_packed_ref::provide(providers);\n-    *providers = Providers {\n-        mir_keys,\n-        mir_const,\n-        mir_const_qualif: |tcx, def_id| {\n-            let def_id = def_id.expect_local();\n-            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n-                tcx.mir_const_qualif_const_arg(def)\n-            } else {\n-                mir_const_qualif(tcx, ty::WithOptConstParam::unknown(def_id))\n-            }\n-        },\n-        mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n-            mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n-        },\n-        mir_promoted,\n-        mir_drops_elaborated_and_const_checked,\n-        mir_for_ctfe,\n-        mir_for_ctfe_of_const_arg,\n-        optimized_mir,\n-        is_mir_available,\n-        is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n-        promoted_mir: |tcx, def_id| {\n-            let def_id = def_id.expect_local();\n-            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n-                tcx.promoted_mir_of_const_arg(def)\n-            } else {\n-                promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id))\n-            }\n-        },\n-        promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n-            promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n-        },\n-        ..*providers\n-    };\n-    coverage::query::provide(providers);\n-}\n-\n-fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    let def_id = def_id.expect_local();\n-    tcx.mir_keys(()).contains(&def_id)\n-}\n-\n-/// Finds the full set of `DefId`s within the current crate that have\n-/// MIR associated with them.\n-fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n-    let mut set = FxHashSet::default();\n-\n-    // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners());\n-\n-    // Additionally, tuple struct/variant constructors have MIR, but\n-    // they don't have a BodyId, so we need to build them separately.\n-    struct GatherCtors<'a, 'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        set: &'a mut FxHashSet<LocalDefId>,\n-    }\n-    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n-        fn visit_variant_data(\n-            &mut self,\n-            v: &'tcx hir::VariantData<'tcx>,\n-            _: Symbol,\n-            _: &'tcx hir::Generics<'tcx>,\n-            _: hir::HirId,\n-            _: Span,\n-        ) {\n-            if let hir::VariantData::Tuple(_, hir_id) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n-            }\n-            intravisit::walk_struct_def(self, v)\n-        }\n-        type Map = intravisit::ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-    }\n-    tcx.hir()\n-        .krate()\n-        .visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n-\n-    set\n-}\n-\n /// Generates a default name for the pass based on the name of the\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n@@ -161,467 +24,3 @@ pub trait MirPass<'tcx> {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n }\n-\n-pub fn run_passes(\n-    tcx: TyCtxt<'tcx>,\n-    body: &mut Body<'tcx>,\n-    mir_phase: MirPhase,\n-    passes: &[&[&dyn MirPass<'tcx>]],\n-) {\n-    let phase_index = mir_phase.phase_index();\n-    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n-\n-    if body.phase >= mir_phase {\n-        return;\n-    }\n-\n-    if validate {\n-        validate::Validator { when: format!(\"input to phase {:?}\", mir_phase), mir_phase }\n-            .run_pass(tcx, body);\n-    }\n-\n-    let mut index = 0;\n-    let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n-        let run_hooks = |body: &_, index, is_after| {\n-            dump_mir::on_mir_pass(\n-                tcx,\n-                &format_args!(\"{:03}-{:03}\", phase_index, index),\n-                &pass.name(),\n-                body,\n-                is_after,\n-            );\n-        };\n-        run_hooks(body, index, false);\n-        pass.run_pass(tcx, body);\n-        run_hooks(body, index, true);\n-\n-        if validate {\n-            validate::Validator {\n-                when: format!(\"after {} in phase {:?}\", pass.name(), mir_phase),\n-                mir_phase,\n-            }\n-            .run_pass(tcx, body);\n-        }\n-\n-        index += 1;\n-    };\n-\n-    for pass_group in passes {\n-        for pass in *pass_group {\n-            run_pass(*pass);\n-        }\n-    }\n-\n-    body.phase = mir_phase;\n-\n-    if mir_phase == MirPhase::Optimization {\n-        validate::Validator { when: format!(\"end of phase {:?}\", mir_phase), mir_phase }\n-            .run_pass(tcx, body);\n-    }\n-}\n-\n-fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n-    let const_kind = tcx.hir().body_const_context(def.did);\n-\n-    // No need to const-check a non-const `fn`.\n-    if const_kind.is_none() {\n-        return Default::default();\n-    }\n-\n-    // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n-    // cannot yet be stolen), because `mir_promoted()`, which steals\n-    // from `mir_const(), forces this query to execute before\n-    // performing the steal.\n-    let body = &tcx.mir_const(def).borrow();\n-\n-    if body.return_ty().references_error() {\n-        tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n-        return Default::default();\n-    }\n-\n-    let ccx = check_consts::ConstCx { body, tcx, const_kind, param_env: tcx.param_env(def.did) };\n-\n-    let mut validator = check_consts::check::Checker::new(&ccx);\n-    validator.check_body();\n-\n-    // We return the qualifs in the return place for every MIR body, even though it is only used\n-    // when deciding to promote a reference to a `const` for now.\n-    validator.qualifs_in_return_place()\n-}\n-\n-/// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n-fn mir_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx Steal<Body<'tcx>> {\n-    if let Some(def) = def.try_upgrade(tcx) {\n-        return tcx.mir_const(def);\n-    }\n-\n-    // Unsafety check uses the raw mir, so make sure it is run.\n-    if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n-        if let Some(param_did) = def.const_param_did {\n-            tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n-        } else {\n-            tcx.ensure().unsafety_check_result(def.did);\n-        }\n-    }\n-\n-    let mut body = tcx.mir_built(def).steal();\n-\n-    util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n-\n-    run_passes(\n-        tcx,\n-        &mut body,\n-        MirPhase::Const,\n-        &[&[\n-            // MIR-level lints.\n-            &check_packed_ref::CheckPackedRef,\n-            &check_const_item_mutation::CheckConstItemMutation,\n-            &function_item_references::FunctionItemReferences,\n-            // What we need to do constant evaluation.\n-            &simplify::SimplifyCfg::new(\"initial\"),\n-            &rustc_peek::SanityCheck,\n-        ]],\n-    );\n-    tcx.alloc_steal_mir(body)\n-}\n-\n-/// Compute the main MIR body and the list of MIR bodies of the promoteds.\n-fn mir_promoted(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n-    if let Some(def) = def.try_upgrade(tcx) {\n-        return tcx.mir_promoted(def);\n-    }\n-\n-    // Ensure that we compute the `mir_const_qualif` for constants at\n-    // this point, before we steal the mir-const result.\n-    // Also this means promotion can rely on all const checks having been done.\n-    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n-    let _ = tcx.mir_abstract_const_opt_const_arg(def.to_global());\n-    let mut body = tcx.mir_const(def).steal();\n-\n-    let mut required_consts = Vec::new();\n-    let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n-    for (bb, bb_data) in traversal::reverse_postorder(&body) {\n-        required_consts_visitor.visit_basic_block_data(bb, bb_data);\n-    }\n-    body.required_consts = required_consts;\n-\n-    let promote_pass = promote_consts::PromoteTemps::default();\n-    let promote: &[&dyn MirPass<'tcx>] = &[\n-        // What we need to run borrowck etc.\n-        &promote_pass,\n-        &simplify::SimplifyCfg::new(\"promote-consts\"),\n-    ];\n-\n-    let opt_coverage: &[&dyn MirPass<'tcx>] =\n-        if tcx.sess.instrument_coverage() { &[&coverage::InstrumentCoverage] } else { &[] };\n-\n-    run_passes(tcx, &mut body, MirPhase::ConstPromotion, &[promote, opt_coverage]);\n-\n-    let promoted = promote_pass.promoted_fragments.into_inner();\n-    (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n-}\n-\n-/// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n-fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n-    let did = def_id.expect_local();\n-    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n-        tcx.mir_for_ctfe_of_const_arg(def)\n-    } else {\n-        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n-    }\n-}\n-\n-/// Same as `mir_for_ctfe`, but used to get the MIR of a const generic parameter.\n-/// The docs on `WithOptConstParam` explain this a bit more, but the TLDR is that\n-/// we'd get cycle errors with `mir_for_ctfe`, because typeck would need to typeck\n-/// the const parameter while type checking the main body, which in turn would try\n-/// to type check the main body again.\n-fn mir_for_ctfe_of_const_arg<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (did, param_did): (LocalDefId, DefId),\n-) -> &'tcx Body<'tcx> {\n-    tcx.arena.alloc(inner_mir_for_ctfe(\n-        tcx,\n-        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n-    ))\n-}\n-\n-fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n-    // FIXME: don't duplicate this between the optimized_mir/mir_for_ctfe queries\n-    if tcx.is_constructor(def.did.to_def_id()) {\n-        // There's no reason to run all of the MIR passes on constructors when\n-        // we can just output the MIR we want directly. This also saves const\n-        // qualification and borrow checking the trouble of special casing\n-        // constructors.\n-        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n-    }\n-\n-    let context = tcx\n-        .hir()\n-        .body_const_context(def.did)\n-        .expect(\"mir_for_ctfe should not be used for runtime functions\");\n-\n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n-\n-    match context {\n-        // Do not const prop functions, either they get executed at runtime or exported to metadata,\n-        // so we run const prop on them, or they don't, in which case we const evaluate some control\n-        // flow paths of the function and any errors in those paths will get emitted as const eval\n-        // errors.\n-        hir::ConstContext::ConstFn => {}\n-        // Static items always get evaluated, so we can just let const eval see if any erroneous\n-        // control flow paths get executed.\n-        hir::ConstContext::Static(_) => {}\n-        // Associated constants get const prop run so we detect common failure situations in the\n-        // crate that defined the constant.\n-        // Technically we want to not run on regular const items, but oli-obk doesn't know how to\n-        // conveniently detect that at this point without looking at the HIR.\n-        hir::ConstContext::Const => {\n-            #[rustfmt::skip]\n-            let optimizations: &[&dyn MirPass<'_>] = &[\n-                &const_prop::ConstProp,\n-            ];\n-\n-            #[rustfmt::skip]\n-            run_passes(\n-                tcx,\n-                &mut body,\n-                MirPhase::Optimization,\n-                &[\n-                    optimizations,\n-                ],\n-            );\n-        }\n-    }\n-\n-    debug_assert!(!body.has_free_regions(tcx), \"Free regions in MIR for CTFE\");\n-\n-    body\n-}\n-\n-/// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n-/// mir borrowck *before* doing so in order to ensure that borrowck can be run and doesn't\n-/// end up missing the source MIR due to stealing happening.\n-fn mir_drops_elaborated_and_const_checked<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx Steal<Body<'tcx>> {\n-    if let Some(def) = def.try_upgrade(tcx) {\n-        return tcx.mir_drops_elaborated_and_const_checked(def);\n-    }\n-\n-    // (Mir-)Borrowck uses `mir_promoted`, so we have to force it to\n-    // execute before we can steal.\n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n-\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    use rustc_middle::hir::map::blocks::FnLikeNode;\n-    let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n-    if is_fn_like {\n-        let did = def.did.to_def_id();\n-        let def = ty::WithOptConstParam::unknown(did);\n-\n-        // Do not compute the mir call graph without said call graph actually being used.\n-        if inline::is_enabled(tcx) {\n-            let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n-        }\n-    }\n-\n-    let (body, _) = tcx.mir_promoted(def);\n-    let mut body = body.steal();\n-\n-    run_post_borrowck_cleanup_passes(tcx, &mut body);\n-    check_consts::post_drop_elaboration::check_live_drops(tcx, &body);\n-    tcx.alloc_steal_mir(body)\n-}\n-\n-/// After this series of passes, no lifetime analysis based on borrowing can be done.\n-fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    debug!(\"post_borrowck_cleanup({:?})\", body.source.def_id());\n-\n-    let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n-        // Remove all things only needed by analysis\n-        &simplify_branches::SimplifyBranches::new(\"initial\"),\n-        &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        &cleanup_post_borrowck::CleanupNonCodegenStatements,\n-        &simplify::SimplifyCfg::new(\"early-opt\"),\n-        // These next passes must be executed together\n-        &add_call_guards::CriticalCallEdges,\n-        &elaborate_drops::ElaborateDrops,\n-        // This will remove extraneous landing pads which are no longer\n-        // necessary as well as well as forcing any call in a non-unwinding\n-        // function calling a possibly-unwinding function to abort the process.\n-        &abort_unwinding_calls::AbortUnwindingCalls,\n-        // AddMovesForPackedDrops needs to run after drop\n-        // elaboration.\n-        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n-        // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n-        // but before optimizations begin.\n-        &add_retag::AddRetag,\n-        &lower_intrinsics::LowerIntrinsics,\n-        &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n-        // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n-        // and it can help optimizations.\n-        &deaggregator::Deaggregator,\n-    ];\n-\n-    run_passes(tcx, body, MirPhase::DropLowering, &[post_borrowck_cleanup]);\n-}\n-\n-fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let mir_opt_level = tcx.sess.mir_opt_level();\n-\n-    // Lowering generator control-flow and variables has to happen before we do anything else\n-    // to them. We run some optimizations before that, because they may be harder to do on the state\n-    // machine than on MIR with async primitives.\n-    let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n-        &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n-        &unreachable_prop::UnreachablePropagation,\n-        &uninhabited_enum_branching::UninhabitedEnumBranching,\n-        &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n-        &inline::Inline,\n-        &generator::StateTransform,\n-    ];\n-\n-    // Even if we don't do optimizations, we still have to lower generators for codegen.\n-    let no_optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[&generator::StateTransform];\n-\n-    // The main optimizations that we do on MIR.\n-    let optimizations: &[&dyn MirPass<'tcx>] = &[\n-        &remove_storage_markers::RemoveStorageMarkers,\n-        &remove_zsts::RemoveZsts,\n-        &const_goto::ConstGoto,\n-        &remove_unneeded_drops::RemoveUnneededDrops,\n-        &match_branches::MatchBranchSimplification,\n-        // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n-        &multiple_return_terminators::MultipleReturnTerminators,\n-        &instcombine::InstCombine,\n-        &separate_const_switch::SeparateConstSwitch,\n-        &const_prop::ConstProp,\n-        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-        &early_otherwise_branch::EarlyOtherwiseBranch,\n-        &simplify_comparison_integral::SimplifyComparisonIntegral,\n-        &simplify_try::SimplifyArmIdentity,\n-        &simplify_try::SimplifyBranchSame,\n-        &dest_prop::DestinationPropagation,\n-        &simplify_branches::SimplifyBranches::new(\"final\"),\n-        &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        &simplify::SimplifyCfg::new(\"final\"),\n-        &nrvo::RenameReturnPlace,\n-        &const_debuginfo::ConstDebugInfo,\n-        &simplify::SimplifyLocals,\n-        &multiple_return_terminators::MultipleReturnTerminators,\n-        &deduplicate_blocks::DeduplicateBlocks,\n-    ];\n-\n-    // Optimizations to run even if mir optimizations have been disabled.\n-    let no_optimizations: &[&dyn MirPass<'tcx>] = &[\n-        // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n-        &const_prop::ConstProp,\n-    ];\n-\n-    // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n-    let pre_codegen_cleanup: &[&dyn MirPass<'tcx>] = &[\n-        &add_call_guards::CriticalCallEdges,\n-        // Dump the end result for testing and debugging purposes.\n-        &dump_mir::Marker(\"PreCodegen\"),\n-    ];\n-\n-    // End of pass declarations, now actually run the passes.\n-    // Generator Lowering\n-    #[rustfmt::skip]\n-    run_passes(\n-        tcx,\n-        body,\n-        MirPhase::GeneratorLowering,\n-        &[\n-            if mir_opt_level > 0 {\n-                optimizations_with_generators\n-            } else {\n-                no_optimizations_with_generators\n-            }\n-        ],\n-    );\n-\n-    // Main optimization passes\n-    #[rustfmt::skip]\n-    run_passes(\n-        tcx,\n-        body,\n-        MirPhase::Optimization,\n-        &[\n-            if mir_opt_level > 0 { optimizations } else { no_optimizations },\n-            pre_codegen_cleanup,\n-        ],\n-    );\n-}\n-\n-/// Optimize the MIR and prepare it for codegen.\n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n-    let did = did.expect_local();\n-    assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n-    tcx.arena.alloc(inner_optimized_mir(tcx, did))\n-}\n-\n-fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n-    if tcx.is_constructor(did.to_def_id()) {\n-        // There's no reason to run all of the MIR passes on constructors when\n-        // we can just output the MIR we want directly. This also saves const\n-        // qualification and borrow checking the trouble of special casing\n-        // constructors.\n-        return shim::build_adt_ctor(tcx, did.to_def_id());\n-    }\n-\n-    match tcx.hir().body_const_context(did) {\n-        // Run the `mir_for_ctfe` query, which depends on `mir_drops_elaborated_and_const_checked`\n-        // which we are going to steal below. Thus we need to run `mir_for_ctfe` first, so it\n-        // computes and caches its result.\n-        Some(hir::ConstContext::ConstFn) => tcx.ensure().mir_for_ctfe(did),\n-        None => {}\n-        Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n-    }\n-    let mut body =\n-        tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n-    run_optimization_passes(tcx, &mut body);\n-\n-    debug_assert!(!body.has_free_regions(tcx), \"Free regions in optimized MIR\");\n-\n-    body\n-}\n-\n-/// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for\n-/// constant evaluation once all substitutions become known.\n-fn promoted_mir<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-    if tcx.is_constructor(def.did.to_def_id()) {\n-        return tcx.arena.alloc(IndexVec::new());\n-    }\n-\n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().mir_borrowck(def.did);\n-    }\n-    let (_, promoted) = tcx.mir_promoted(def);\n-    let mut promoted = promoted.steal();\n-\n-    for body in &mut promoted {\n-        run_post_borrowck_cleanup_passes(tcx, body);\n-    }\n-\n-    debug_assert!(!promoted.has_free_regions(tcx), \"Free regions in promoted MIR\");\n-\n-    tcx.arena.alloc(promoted)\n-}"}, {"sha": "741c1e6b2c60f0fa65793ade4561f54a80ce9ce1", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -7,10 +7,10 @@ mod alignment;\n pub mod collect_writes;\n mod find_self_call;\n mod generic_graph;\n-pub(crate) mod generic_graphviz;\n+pub mod generic_graphviz;\n mod graphviz;\n pub mod pretty;\n-pub(crate) mod spanview;\n+pub mod spanview;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;"}, {"sha": "db98cb763430f4dc62a0e9f4246192a1ffc2dc88", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -7,7 +7,6 @@ use std::path::{Path, PathBuf};\n \n use super::graphviz::write_mir_fn_graphviz;\n use super::spanview::write_mir_fn_spanview;\n-use crate::transform::MirSource;\n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n@@ -16,6 +15,7 @@ use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, Pointer, Provenance,\n };\n use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt, TyS, TypeFoldable, TypeVisitor};\n use rustc_target::abi::Size;"}, {"sha": "cba3ab5176eb3dee14215824b5d0cb7a0a3c5a37", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -0,0 +1,29 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_mir_transform\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+itertools = \"0.9\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_attr = { path = \"../rustc_attr\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_mir = { path = \"../rustc_mir\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_span = { path = \"../rustc_span\" }\n+\n+[dev-dependencies]\n+coverage_test_macros = { path = \"src/coverage/test_macros\" }"}, {"sha": "855dcbc431b1eca3f57c50bfda93a1ac5e853d14", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_hir::def::DefKind;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::*;", "previous_filename": "compiler/rustc_mir/src/transform/abort_unwinding_calls.rs"}, {"sha": "cd6b671a0dbfd9f563fb808508206d4b80a1091f", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/add_call_guards.rs"}, {"sha": "c48d0c8b8f2cfa8c44f028413de08a86eae759c3", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,9 +1,9 @@\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n-use crate::transform::MirPass;\n use crate::util;\n use crate::util::patch::MirPatch;\n+use crate::MirPass;\n \n // This pass moves values being dropped that are within a packed\n // struct to a separate local before dropping them, to ensure that", "previous_filename": "compiler/rustc_mir/src/transform/add_moves_for_packed_drops.rs"}, {"sha": "7a8dee09c29f098b1924b913a1850daa29ed1dd9", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -4,7 +4,7 @@\n //! of MIR building, and only after this pass we think of the program has having the\n //! normal MIR semantics.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n ", "previous_filename": "compiler/rustc_mir/src/transform/add_retag.rs"}, {"sha": "27fe80a456f7de06b71a6157c7055ddb8182fb75", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::CONST_ITEM_MUTATION;\n use rustc_span::def_id::DefId;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n pub struct CheckConstItemMutation;\n ", "previous_filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs"}, {"sha": "49be34c7a284562bbb0ff247ffa6460ea3290828", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -6,8 +6,8 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n use rustc_span::symbol::sym;\n \n-use crate::transform::MirPass;\n use crate::util;\n+use crate::MirPass;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafe_derive_on_repr_packed, ..*providers };", "previous_filename": "compiler/rustc_mir/src/transform/check_packed_ref.rs"}, {"sha": "1ff9bd157210874391deafc577a31eb4dd435c42", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/check_unsafety.rs"}, {"sha": "611d29a4ee29a3400d60ed14f3cc47820cbf75b5", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -18,7 +18,7 @@\n //! [`ForMatchGuard`]: rustc_middle::mir::FakeReadCause::ForMatchGuard\n //! [`Nop`]: rustc_middle::mir::StatementKind::Nop\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::{Body, BorrowKind, Location, Rvalue};\n use rustc_middle::mir::{Statement, StatementKind};", "previous_filename": "compiler/rustc_mir/src/transform/cleanup_post_borrowck.rs"}, {"sha": "b613634560fbd42e8f615fd1fdd1c010477e87f5", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::{\n     ty::TyCtxt,\n };\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::{bit_set::BitSet, vec::IndexVec};\n \n pub struct ConstDebugInfo;", "previous_filename": "compiler/rustc_mir/src/transform/const_debuginfo.rs"}, {"sha": "d319fdcaa6b7e2b2c22383e0918bd963a70cf195", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -17,7 +17,7 @@\n //! }\n //! ```\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::{mir::visit::Visitor, ty::ParamEnv};", "previous_filename": "compiler/rustc_mir/src/transform/const_goto.rs"}, {"sha": "51240ee067711296f626f75a985a156980a58b00", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -28,13 +28,13 @@ use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n-use crate::const_eval::ConstEvalErr;\n-use crate::interpret::{\n+use crate::MirPass;\n+use rustc_mir::const_eval::ConstEvalErr;\n+use rustc_mir::interpret::{\n     self, compile_time_machine, AllocId, Allocation, ConstValue, CtfeValidationMode, Frame, ImmTy,\n     Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, MemoryKind, OpTy,\n     Operand as InterpOperand, PlaceTy, Scalar, ScalarMaybeUninit, StackPopCleanup, StackPopUnwind,\n };\n-use crate::transform::MirPass;\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n /// Needed for #66397, because otherwise we eval into large places and that can cause OOM or just", "previous_filename": "compiler/rustc_mir/src/transform/const_prop.rs"}, {"sha": "6726b669ff2aae96ac90176a2593239ac6bcf430", "filename": "compiler/rustc_mir_transform/src/coverage/counters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/counters.rs"}, {"sha": "9de2f4a5f847b927642a374a0f30a084841fa8ca", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "renamed", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -44,15 +44,15 @@\n //! points, which can be enabled via environment variable:\n //!\n //! ```shell\n-//! RUSTC_LOG=rustc_mir::transform::coverage=debug\n+//! RUSTC_LOG=rustc_mir_transform::transform::coverage=debug\n //! ```\n //!\n //! Other module paths with coverage-related debug logs may also be of interest, particularly for\n //! debugging the coverage map data, injected as global variables in the LLVM IR (during rustc's\n //! code generation pass). For example:\n //!\n //! ```shell\n-//! RUSTC_LOG=rustc_mir::transform::coverage,rustc_codegen_ssa::coverageinfo,rustc_codegen_llvm::coverageinfo=debug\n+//! RUSTC_LOG=rustc_mir_transform::transform::coverage,rustc_codegen_ssa::coverageinfo,rustc_codegen_llvm::coverageinfo=debug\n //! ```\n //!\n //! Coverage Debug Options\n@@ -181,13 +181,11 @@ impl DebugOptions {\n                             }\n                         };\n                     }\n-                    _ => {\n-                        bug!(\n-                            \"Unsupported setting `{}` in environment variable {}\",\n-                            option,\n-                            RUSTC_COVERAGE_DEBUG_OPTIONS\n-                        )\n-                    }\n+                    _ => bug!(\n+                        \"Unsupported setting `{}` in environment variable {}\",\n+                        option,\n+                        RUSTC_COVERAGE_DEBUG_OPTIONS\n+                    ),\n                 };\n             }\n         }", "previous_filename": "compiler/rustc_mir/src/transform/coverage/debug.rs"}, {"sha": "d78ad6ce97fa23697cb768ba90ed40efecaa81df", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/graph.rs"}, {"sha": "f7f0191502198ddea3d019c26008f32d28585147", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -12,8 +12,8 @@ use counters::CoverageCounters;\n use graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use spans::{CoverageSpan, CoverageSpans};\n \n-use crate::transform::MirPass;\n use crate::util::pretty;\n+use crate::MirPass;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::graph::WithNumNodes;", "previous_filename": "compiler/rustc_mir/src/transform/coverage/mod.rs"}, {"sha": "760f16eae6b1f85be18bea6412b0f260c77b4ed8", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/query.rs"}, {"sha": "08cc87ccc349d5c51068e5203bb3b0c710c64675", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/spans.rs"}, {"sha": "cc93fd482b5d49d4400e4d47b3a517dd1b346cdf", "filename": "compiler/rustc_mir_transform/src/coverage/test_macros/Cargo.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/test_macros/Cargo.toml"}, {"sha": "3d6095d2738cb562deecb28361595667663d888b", "filename": "compiler/rustc_mir_transform/src/coverage/test_macros/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/test_macros/src/lib.rs"}, {"sha": "14dd0a8b9245bdd83f121f616d6b356443ed53ec", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/coverage/tests.rs"}, {"sha": "a5491f0ef4e2daafa05b24e8e623c9a1e8efd376", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,5 +1,5 @@\n-use crate::transform::MirPass;\n use crate::util::expand_aggregate;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/deaggregator.rs"}, {"sha": "8d2413433a92be5386ec7f5aea3cd8b03efe8775", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -3,7 +3,7 @@\n \n use std::{collections::hash_map::Entry, hash::Hash, hash::Hasher, iter};\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::visit::MutVisitor;", "previous_filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs"}, {"sha": "ec9279ff00ccd42cfcfd99e13a569d1792f00d9b", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -96,11 +96,9 @@\n //! [previous attempt]: https://github.com/rust-lang/rust/pull/47954\n //! [subsequent approach]: https://github.com/rust-lang/rust/pull/71003\n \n-use crate::dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n-use crate::dataflow::Analysis;\n use crate::{\n-    transform::MirPass,\n     util::{dump_mir, PassWhere},\n+    MirPass,\n };\n use itertools::Itertools;\n use rustc_data_structures::unify::{InPlaceUnificationTable, UnifyKey};\n@@ -115,6 +113,8 @@ use rustc_middle::mir::{\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n+use rustc_mir::dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n+use rustc_mir::dataflow::Analysis;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time", "previous_filename": "compiler/rustc_mir/src/transform/dest_prop.rs"}, {"sha": "753948dacb370ecb0d2ade61ea7205185546c91c", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -5,8 +5,8 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use crate::transform::MirPass;\n use crate::util as mir_util;\n+use crate::MirPass;\n use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};", "previous_filename": "compiler/rustc_mir/src/transform/dump_mir.rs"}, {"sha": "01d0c10eddcd3e364eb46dd5f7c2b2786dc1e55a", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,4 +1,4 @@\n-use crate::{transform::MirPass, util::patch::MirPatch};\n+use crate::{util::patch::MirPatch, MirPass};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use std::fmt::Debug;", "previous_filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs"}, {"sha": "5ed13a0268d8385f3a2d8e9901a202a56a735fe7", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,18 +1,18 @@\n-use crate::dataflow;\n-use crate::dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use crate::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n-use crate::dataflow::on_lookup_result_bits;\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n-use crate::dataflow::{Analysis, ResultsCursor};\n-use crate::transform::MirPass;\n use crate::util::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n use crate::util::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n use crate::util::patch::MirPatch;\n+use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir::dataflow;\n+use rustc_mir::dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use rustc_mir::dataflow::on_lookup_result_bits;\n+use rustc_mir::dataflow::MoveDataParamEnv;\n+use rustc_mir::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use rustc_mir::dataflow::{Analysis, ResultsCursor};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use std::fmt;", "previous_filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs"}, {"sha": "d96a067fdda79237234cfbca14fa713d9f887265", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -11,7 +11,7 @@ use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n pub struct FunctionItemReferences;\n ", "previous_filename": "compiler/rustc_mir/src/transform/function_item_references.rs"}, {"sha": "f2486b58aac4874a613435decba2d31e82c361d8", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -49,15 +49,11 @@\n //! For generators with state 1 (returned) and state 2 (poisoned) it does nothing.\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n-use crate::dataflow::impls::{\n-    MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n-};\n-use crate::dataflow::{self, Analysis};\n-use crate::transform::simplify;\n-use crate::transform::MirPass;\n+use crate::simplify;\n use crate::util::dump_mir;\n use crate::util::expand_aggregate;\n use crate::util::storage;\n+use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -68,6 +64,10 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::GeneratorSubsts;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_mir::dataflow::impls::{\n+    MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n+};\n+use rustc_mir::dataflow::{self, Analysis};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};", "previous_filename": "compiler/rustc_mir/src/transform/generator.rs"}, {"sha": "d43528a1cf098b7b984cd55633d22150285a68a0", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use std::iter;\n use std::ops::{Range, RangeFrom};\n ", "previous_filename": "compiler/rustc_mir/src/transform/inline.rs"}, {"sha": "385394ba67d4d2e8fa0fdc2f8747c59129817d11", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/inline/cycle.rs"}, {"sha": "e15a69c95ae9c6904da0be721fa9d53ea4634a5e", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! Performs various peephole optimizations.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,", "previous_filename": "compiler/rustc_mir/src/transform/instcombine.rs"}, {"sha": "93f0a7f3d04adc32b2f11e3e821d91205ed6a5dd", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "added", "additions": 632, "deletions": 0, "changes": 632, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -0,0 +1,632 @@\n+#![feature(bindings_after_at)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(const_panic)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(map_try_insert)]\n+#![feature(min_specialization)]\n+#![feature(option_get_or_insert_default)]\n+#![feature(once_cell)]\n+#![feature(never_type)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n+\n+#[macro_use]\n+extern crate tracing;\n+#[macro_use]\n+extern crate rustc_middle;\n+\n+use required_consts::RequiredConstsVisitor;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::steal::Steal;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::visit::Visitor as _;\n+use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_mir::util;\n+use rustc_span::{Span, Symbol};\n+\n+mod abort_unwinding_calls;\n+mod add_call_guards;\n+mod add_moves_for_packed_drops;\n+mod add_retag;\n+mod check_const_item_mutation;\n+mod check_packed_ref;\n+pub mod check_unsafety;\n+mod cleanup_post_borrowck;\n+mod const_debuginfo;\n+mod const_goto;\n+mod const_prop;\n+mod coverage;\n+mod deaggregator;\n+mod deduplicate_blocks;\n+mod dest_prop;\n+pub mod dump_mir;\n+mod early_otherwise_branch;\n+mod elaborate_drops;\n+mod function_item_references;\n+mod generator;\n+mod inline;\n+mod instcombine;\n+mod lower_intrinsics;\n+mod lower_slice_len;\n+mod match_branches;\n+mod multiple_return_terminators;\n+mod nrvo;\n+mod remove_noop_landing_pads;\n+mod remove_storage_markers;\n+mod remove_unneeded_drops;\n+mod remove_zsts;\n+mod required_consts;\n+mod separate_const_switch;\n+mod shim;\n+mod simplify;\n+mod simplify_branches;\n+mod simplify_comparison_integral;\n+mod simplify_try;\n+mod uninhabited_enum_branching;\n+mod unreachable_prop;\n+\n+use rustc_mir::transform::check_consts;\n+use rustc_mir::transform::promote_consts;\n+use rustc_mir::transform::rustc_peek;\n+use rustc_mir::transform::validate;\n+use rustc_mir::transform::MirPass;\n+\n+pub fn provide(providers: &mut Providers) {\n+    check_unsafety::provide(providers);\n+    check_packed_ref::provide(providers);\n+    coverage::query::provide(providers);\n+    shim::provide(providers);\n+    *providers = Providers {\n+        mir_keys,\n+        mir_const,\n+        mir_const_qualif: |tcx, def_id| {\n+            let def_id = def_id.expect_local();\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+                tcx.mir_const_qualif_const_arg(def)\n+            } else {\n+                mir_const_qualif(tcx, ty::WithOptConstParam::unknown(def_id))\n+            }\n+        },\n+        mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n+            mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+        },\n+        mir_promoted,\n+        mir_drops_elaborated_and_const_checked,\n+        mir_for_ctfe,\n+        mir_for_ctfe_of_const_arg,\n+        optimized_mir,\n+        is_mir_available,\n+        is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n+        mir_callgraph_reachable: inline::cycle::mir_callgraph_reachable,\n+        mir_inliner_callees: inline::cycle::mir_inliner_callees,\n+        promoted_mir: |tcx, def_id| {\n+            let def_id = def_id.expect_local();\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+                tcx.promoted_mir_of_const_arg(def)\n+            } else {\n+                promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id))\n+            }\n+        },\n+        promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n+            promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+        },\n+        ..*providers\n+    };\n+}\n+\n+fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    let def_id = def_id.expect_local();\n+    tcx.mir_keys(()).contains(&def_id)\n+}\n+\n+/// Finds the full set of `DefId`s within the current crate that have\n+/// MIR associated with them.\n+fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n+    let mut set = FxHashSet::default();\n+\n+    // All body-owners have MIR associated with them.\n+    set.extend(tcx.body_owners());\n+\n+    // Additionally, tuple struct/variant constructors have MIR, but\n+    // they don't have a BodyId, so we need to build them separately.\n+    struct GatherCtors<'a, 'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        set: &'a mut FxHashSet<LocalDefId>,\n+    }\n+    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n+        fn visit_variant_data(\n+            &mut self,\n+            v: &'tcx hir::VariantData<'tcx>,\n+            _: Symbol,\n+            _: &'tcx hir::Generics<'tcx>,\n+            _: hir::HirId,\n+            _: Span,\n+        ) {\n+            if let hir::VariantData::Tuple(_, hir_id) = *v {\n+                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n+            }\n+            intravisit::walk_struct_def(self, v)\n+        }\n+        type Map = intravisit::ErasedMap<'tcx>;\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+            NestedVisitorMap::None\n+        }\n+    }\n+    tcx.hir()\n+        .krate()\n+        .visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n+\n+    set\n+}\n+\n+fn run_passes(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    mir_phase: MirPhase,\n+    passes: &[&[&dyn MirPass<'tcx>]],\n+) {\n+    let phase_index = mir_phase.phase_index();\n+    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n+\n+    if body.phase >= mir_phase {\n+        return;\n+    }\n+\n+    if validate {\n+        validate::Validator { when: format!(\"input to phase {:?}\", mir_phase), mir_phase }\n+            .run_pass(tcx, body);\n+    }\n+\n+    let mut index = 0;\n+    let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n+        let run_hooks = |body: &_, index, is_after| {\n+            dump_mir::on_mir_pass(\n+                tcx,\n+                &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                &pass.name(),\n+                body,\n+                is_after,\n+            );\n+        };\n+        run_hooks(body, index, false);\n+        pass.run_pass(tcx, body);\n+        run_hooks(body, index, true);\n+\n+        if validate {\n+            validate::Validator {\n+                when: format!(\"after {} in phase {:?}\", pass.name(), mir_phase),\n+                mir_phase,\n+            }\n+            .run_pass(tcx, body);\n+        }\n+\n+        index += 1;\n+    };\n+\n+    for pass_group in passes {\n+        for pass in *pass_group {\n+            run_pass(*pass);\n+        }\n+    }\n+\n+    body.phase = mir_phase;\n+\n+    if mir_phase == MirPhase::Optimization {\n+        validate::Validator { when: format!(\"end of phase {:?}\", mir_phase), mir_phase }\n+            .run_pass(tcx, body);\n+    }\n+}\n+\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n+    let const_kind = tcx.hir().body_const_context(def.did);\n+\n+    // No need to const-check a non-const `fn`.\n+    if const_kind.is_none() {\n+        return Default::default();\n+    }\n+\n+    // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n+    // cannot yet be stolen), because `mir_promoted()`, which steals\n+    // from `mir_const(), forces this query to execute before\n+    // performing the steal.\n+    let body = &tcx.mir_const(def).borrow();\n+\n+    if body.return_ty().references_error() {\n+        tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n+        return Default::default();\n+    }\n+\n+    let ccx = check_consts::ConstCx { body, tcx, const_kind, param_env: tcx.param_env(def.did) };\n+\n+    let mut validator = check_consts::check::Checker::new(&ccx);\n+    validator.check_body();\n+\n+    // We return the qualifs in the return place for every MIR body, even though it is only used\n+    // when deciding to promote a reference to a `const` for now.\n+    validator.qualifs_in_return_place()\n+}\n+\n+/// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n+fn mir_const<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx Steal<Body<'tcx>> {\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_const(def);\n+    }\n+\n+    // Unsafety check uses the raw mir, so make sure it is run.\n+    if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n+        if let Some(param_did) = def.const_param_did {\n+            tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n+        } else {\n+            tcx.ensure().unsafety_check_result(def.did);\n+        }\n+    }\n+\n+    let mut body = tcx.mir_built(def).steal();\n+\n+    util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+\n+    run_passes(\n+        tcx,\n+        &mut body,\n+        MirPhase::Const,\n+        &[&[\n+            // MIR-level lints.\n+            &check_packed_ref::CheckPackedRef,\n+            &check_const_item_mutation::CheckConstItemMutation,\n+            &function_item_references::FunctionItemReferences,\n+            // What we need to do constant evaluation.\n+            &simplify::SimplifyCfg::new(\"initial\"),\n+            &rustc_peek::SanityCheck,\n+        ]],\n+    );\n+    tcx.alloc_steal_mir(body)\n+}\n+\n+/// Compute the main MIR body and the list of MIR bodies of the promoteds.\n+fn mir_promoted(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_promoted(def);\n+    }\n+\n+    // Ensure that we compute the `mir_const_qualif` for constants at\n+    // this point, before we steal the mir-const result.\n+    // Also this means promotion can rely on all const checks having been done.\n+    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n+    let _ = tcx.mir_abstract_const_opt_const_arg(def.to_global());\n+    let mut body = tcx.mir_const(def).steal();\n+\n+    let mut required_consts = Vec::new();\n+    let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n+    for (bb, bb_data) in traversal::reverse_postorder(&body) {\n+        required_consts_visitor.visit_basic_block_data(bb, bb_data);\n+    }\n+    body.required_consts = required_consts;\n+\n+    let promote_pass = promote_consts::PromoteTemps::default();\n+    let promote: &[&dyn MirPass<'tcx>] = &[\n+        // What we need to run borrowck etc.\n+        &promote_pass,\n+        &simplify::SimplifyCfg::new(\"promote-consts\"),\n+    ];\n+\n+    let opt_coverage: &[&dyn MirPass<'tcx>] =\n+        if tcx.sess.instrument_coverage() { &[&coverage::InstrumentCoverage] } else { &[] };\n+\n+    run_passes(tcx, &mut body, MirPhase::ConstPromotion, &[promote, opt_coverage]);\n+\n+    let promoted = promote_pass.promoted_fragments.into_inner();\n+    (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n+}\n+\n+/// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n+fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+    let did = def_id.expect_local();\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+        tcx.mir_for_ctfe_of_const_arg(def)\n+    } else {\n+        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n+    }\n+}\n+\n+/// Same as `mir_for_ctfe`, but used to get the MIR of a const generic parameter.\n+/// The docs on `WithOptConstParam` explain this a bit more, but the TLDR is that\n+/// we'd get cycle errors with `mir_for_ctfe`, because typeck would need to typeck\n+/// the const parameter while type checking the main body, which in turn would try\n+/// to type check the main body again.\n+fn mir_for_ctfe_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) -> &'tcx Body<'tcx> {\n+    tcx.arena.alloc(inner_mir_for_ctfe(\n+        tcx,\n+        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+    ))\n+}\n+\n+fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n+    // FIXME: don't duplicate this between the optimized_mir/mir_for_ctfe queries\n+    if tcx.is_constructor(def.did.to_def_id()) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n+    }\n+\n+    let context = tcx\n+        .hir()\n+        .body_const_context(def.did)\n+        .expect(\"mir_for_ctfe should not be used for runtime functions\");\n+\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n+\n+    match context {\n+        // Do not const prop functions, either they get executed at runtime or exported to metadata,\n+        // so we run const prop on them, or they don't, in which case we const evaluate some control\n+        // flow paths of the function and any errors in those paths will get emitted as const eval\n+        // errors.\n+        hir::ConstContext::ConstFn => {}\n+        // Static items always get evaluated, so we can just let const eval see if any erroneous\n+        // control flow paths get executed.\n+        hir::ConstContext::Static(_) => {}\n+        // Associated constants get const prop run so we detect common failure situations in the\n+        // crate that defined the constant.\n+        // Technically we want to not run on regular const items, but oli-obk doesn't know how to\n+        // conveniently detect that at this point without looking at the HIR.\n+        hir::ConstContext::Const => {\n+            #[rustfmt::skip]\n+            let optimizations: &[&dyn MirPass<'_>] = &[\n+                &const_prop::ConstProp,\n+            ];\n+\n+            #[rustfmt::skip]\n+            run_passes(\n+                tcx,\n+                &mut body,\n+                MirPhase::Optimization,\n+                &[\n+                    optimizations,\n+                ],\n+            );\n+        }\n+    }\n+\n+    debug_assert!(!body.has_free_regions(tcx), \"Free regions in MIR for CTFE\");\n+\n+    body\n+}\n+\n+/// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n+/// mir borrowck *before* doing so in order to ensure that borrowck can be run and doesn't\n+/// end up missing the source MIR due to stealing happening.\n+fn mir_drops_elaborated_and_const_checked<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx Steal<Body<'tcx>> {\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_drops_elaborated_and_const_checked(def);\n+    }\n+\n+    // (Mir-)Borrowck uses `mir_promoted`, so we have to force it to\n+    // execute before we can steal.\n+    if let Some(param_did) = def.const_param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n+\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n+    use rustc_middle::hir::map::blocks::FnLikeNode;\n+    let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n+    if is_fn_like {\n+        let did = def.did.to_def_id();\n+        let def = ty::WithOptConstParam::unknown(did);\n+\n+        // Do not compute the mir call graph without said call graph actually being used.\n+        if inline::is_enabled(tcx) {\n+            let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n+        }\n+    }\n+\n+    let (body, _) = tcx.mir_promoted(def);\n+    let mut body = body.steal();\n+\n+    run_post_borrowck_cleanup_passes(tcx, &mut body);\n+    check_consts::post_drop_elaboration::check_live_drops(tcx, &body);\n+    tcx.alloc_steal_mir(body)\n+}\n+\n+/// After this series of passes, no lifetime analysis based on borrowing can be done.\n+fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    debug!(\"post_borrowck_cleanup({:?})\", body.source.def_id());\n+\n+    let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n+        // Remove all things only needed by analysis\n+        &simplify_branches::SimplifyBranches::new(\"initial\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &cleanup_post_borrowck::CleanupNonCodegenStatements,\n+        &simplify::SimplifyCfg::new(\"early-opt\"),\n+        // These next passes must be executed together\n+        &add_call_guards::CriticalCallEdges,\n+        &elaborate_drops::ElaborateDrops,\n+        // This will remove extraneous landing pads which are no longer\n+        // necessary as well as well as forcing any call in a non-unwinding\n+        // function calling a possibly-unwinding function to abort the process.\n+        &abort_unwinding_calls::AbortUnwindingCalls,\n+        // AddMovesForPackedDrops needs to run after drop\n+        // elaboration.\n+        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n+        // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n+        // but before optimizations begin.\n+        &add_retag::AddRetag,\n+        &lower_intrinsics::LowerIntrinsics,\n+        &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+        // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n+        // and it can help optimizations.\n+        &deaggregator::Deaggregator,\n+    ];\n+\n+    run_passes(tcx, body, MirPhase::DropLowering, &[post_borrowck_cleanup]);\n+}\n+\n+fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let mir_opt_level = tcx.sess.mir_opt_level();\n+\n+    // Lowering generator control-flow and variables has to happen before we do anything else\n+    // to them. We run some optimizations before that, because they may be harder to do on the state\n+    // machine than on MIR with async primitives.\n+    let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n+        &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n+        &unreachable_prop::UnreachablePropagation,\n+        &uninhabited_enum_branching::UninhabitedEnumBranching,\n+        &simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\"),\n+        &inline::Inline,\n+        &generator::StateTransform,\n+    ];\n+\n+    // Even if we don't do optimizations, we still have to lower generators for codegen.\n+    let no_optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[&generator::StateTransform];\n+\n+    // The main optimizations that we do on MIR.\n+    let optimizations: &[&dyn MirPass<'tcx>] = &[\n+        &remove_storage_markers::RemoveStorageMarkers,\n+        &remove_zsts::RemoveZsts,\n+        &const_goto::ConstGoto,\n+        &remove_unneeded_drops::RemoveUnneededDrops,\n+        &match_branches::MatchBranchSimplification,\n+        // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n+        &multiple_return_terminators::MultipleReturnTerminators,\n+        &instcombine::InstCombine,\n+        &separate_const_switch::SeparateConstSwitch,\n+        &const_prop::ConstProp,\n+        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &early_otherwise_branch::EarlyOtherwiseBranch,\n+        &simplify_comparison_integral::SimplifyComparisonIntegral,\n+        &simplify_try::SimplifyArmIdentity,\n+        &simplify_try::SimplifyBranchSame,\n+        &dest_prop::DestinationPropagation,\n+        &simplify_branches::SimplifyBranches::new(\"final\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &simplify::SimplifyCfg::new(\"final\"),\n+        &nrvo::RenameReturnPlace,\n+        &const_debuginfo::ConstDebugInfo,\n+        &simplify::SimplifyLocals,\n+        &multiple_return_terminators::MultipleReturnTerminators,\n+        &deduplicate_blocks::DeduplicateBlocks,\n+    ];\n+\n+    // Optimizations to run even if mir optimizations have been disabled.\n+    let no_optimizations: &[&dyn MirPass<'tcx>] = &[\n+        // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n+        &const_prop::ConstProp,\n+    ];\n+\n+    // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n+    let pre_codegen_cleanup: &[&dyn MirPass<'tcx>] = &[\n+        &add_call_guards::CriticalCallEdges,\n+        // Dump the end result for testing and debugging purposes.\n+        &dump_mir::Marker(\"PreCodegen\"),\n+    ];\n+\n+    // End of pass declarations, now actually run the passes.\n+    // Generator Lowering\n+    #[rustfmt::skip]\n+    run_passes(\n+        tcx,\n+        body,\n+        MirPhase::GeneratorLowering,\n+        &[\n+            if mir_opt_level > 0 {\n+                optimizations_with_generators\n+            } else {\n+                no_optimizations_with_generators\n+            }\n+        ],\n+    );\n+\n+    // Main optimization passes\n+    #[rustfmt::skip]\n+    run_passes(\n+        tcx,\n+        body,\n+        MirPhase::Optimization,\n+        &[\n+            if mir_opt_level > 0 { optimizations } else { no_optimizations },\n+            pre_codegen_cleanup,\n+        ],\n+    );\n+}\n+\n+/// Optimize the MIR and prepare it for codegen.\n+fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n+    let did = did.expect_local();\n+    assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n+    tcx.arena.alloc(inner_optimized_mir(tcx, did))\n+}\n+\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n+    if tcx.is_constructor(did.to_def_id()) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, did.to_def_id());\n+    }\n+\n+    match tcx.hir().body_const_context(did) {\n+        // Run the `mir_for_ctfe` query, which depends on `mir_drops_elaborated_and_const_checked`\n+        // which we are going to steal below. Thus we need to run `mir_for_ctfe` first, so it\n+        // computes and caches its result.\n+        Some(hir::ConstContext::ConstFn) => tcx.ensure().mir_for_ctfe(did),\n+        None => {}\n+        Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n+    }\n+    let mut body =\n+        tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n+    run_optimization_passes(tcx, &mut body);\n+\n+    debug_assert!(!body.has_free_regions(tcx), \"Free regions in optimized MIR\");\n+\n+    body\n+}\n+\n+/// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for\n+/// constant evaluation once all substitutions become known.\n+fn promoted_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n+    if tcx.is_constructor(def.did.to_def_id()) {\n+        return tcx.arena.alloc(IndexVec::new());\n+    }\n+\n+    if let Some(param_did) = def.const_param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n+    let (_, promoted) = tcx.mir_promoted(def);\n+    let mut promoted = promoted.steal();\n+\n+    for body in &mut promoted {\n+        run_post_borrowck_cleanup_passes(tcx, body);\n+    }\n+\n+    debug_assert!(!promoted.has_free_regions(tcx), \"Free regions in promoted MIR\");\n+\n+    tcx.arena.alloc(promoted)\n+}"}, {"sha": "2f89b041c27b1f7062502f547ef5efbb840ec0fa", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! Lowers intrinsic calls\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs"}, {"sha": "eac2b97a14cf186b24460cc2f2065f7867966cb9", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,11 +1,11 @@\n //! This pass lowers calls to core::slice::len to just Len op.\n //! It should run before inlining!\n \n-use crate::transform::MirPass;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir::transform::MirPass;\n \n pub struct LowerSliceLenCalls;\n ", "previous_filename": "compiler/rustc_mir/src/transform/lower_slice_len.rs"}, {"sha": "24eaf278977152be979d4a212725fa00b31a8907", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use std::iter;\n@@ -134,7 +134,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             let const_cmp = Operand::const_from_scalar(\n                                 tcx,\n                                 switch_ty,\n-                                crate::interpret::Scalar::from_uint(val, size),\n+                                rustc_mir::interpret::Scalar::from_uint(val, size),\n                                 rustc_span::DUMMY_SP,\n                             );\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };", "previous_filename": "compiler/rustc_mir/src/transform/match_branches.rs"}, {"sha": "b614917a88369ddced2445c4a4953de9a7aee194", "filename": "compiler/rustc_mir_transform/src/multiple_return_terminators.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,7 +1,7 @@\n //! This pass removes jumps to basic blocks containing only a return, and replaces them with a\n //! return instead.\n \n-use crate::transform::{simplify, MirPass};\n+use crate::{simplify, MirPass};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs"}, {"sha": "3ac4e77cf9a751fe190fd47fc7e750f5d7bee1a5", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::visit::{MutVisitor, NonUseContext, PlaceContext, Visitor}\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use rustc_middle::ty::TyCtxt;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n /// This pass looks for MIR that always copies the same local into the return place and eliminates\n /// the copy by renaming all uses of that local to `_0`.", "previous_filename": "compiler/rustc_mir/src/transform/nrvo.rs"}, {"sha": "52144cbaa876b9c7c5408d31c243e4f53eac65d0", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,5 +1,5 @@\n-use crate::transform::MirPass;\n use crate::util::patch::MirPatch;\n+use crate::MirPass;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/remove_noop_landing_pads.rs"}, {"sha": "0c7323cbac5b1d039886c53a003af72eb2169136", "filename": "compiler/rustc_mir_transform/src/remove_storage_markers.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! This pass removes storage markers if they won't be emitted during codegen.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/remove_storage_markers.rs"}, {"sha": "5c9d04a08bfec775e45efd7df67f67359536f84e", "filename": "compiler/rustc_mir_transform/src/remove_unneeded_drops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! This pass replaces a drop of a type that does not need dropping, with a goto\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs"}, {"sha": "25e3c52132cca69b59c30d44f719d9298bb07f47", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! Removes assignments to ZST places.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{Body, LocalDecls, Place, StatementKind};\n use rustc_middle::ty::{self, Ty, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/transform/remove_zsts.rs"}, {"sha": "8b64ad65ab35ca5ac000eb3c983ce0ea71d14adf", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/required_consts.rs"}, {"sha": "1945e551485d8fcf939fd8263e3e9f9715916b69", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -37,7 +37,7 @@\n //! simplicity rather than completeness (it notably\n //! sometimes duplicates abusively).\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;", "previous_filename": "compiler/rustc_mir/src/transform/separate_const_switch.rs"}, {"sha": "c57c1e1241691bb75a5a4ffdc399cbfbff1f6dc3", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -15,13 +15,13 @@ use rustc_target::spec::abi::Abi;\n use std::fmt;\n use std::iter;\n \n-use crate::transform::{\n-    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, remove_noop_landing_pads,\n-    run_passes, simplify,\n-};\n use crate::util::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n use crate::util::expand_aggregate;\n use crate::util::patch::MirPatch;\n+use crate::{\n+    abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, remove_noop_landing_pads,\n+    run_passes, simplify,\n+};\n \n pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;", "previous_filename": "compiler/rustc_mir/src/shim.rs"}, {"sha": "e3cfd1d0afcd79c870dafeb5c8e61af6472afa7d", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -27,7 +27,7 @@\n //! naively generate still contains the `_a = ()` write in the unreachable block \"after\" the\n //! return.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};", "previous_filename": "compiler/rustc_mir/src/transform/simplify.rs"}, {"sha": "df90cfa318df0c9943d1523a0055651a50e3de44", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! A pass that simplifies branches when their condition is known.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/simplify_branches.rs"}, {"sha": "948fcd9f4550f4e6ec0a7cbdbb606240978b494b", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "previous_filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs"}, {"sha": "fd36671b36f5435990a98e1cc287e3955bb603aa", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -9,7 +9,7 @@\n //!\n //! into just `x`.\n \n-use crate::transform::{simplify, MirPass};\n+use crate::{simplify, MirPass};\n use itertools::Itertools as _;\n use rustc_index::{bit_set::BitSet, vec::IndexVec};\n use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};", "previous_filename": "compiler/rustc_mir/src/transform/simplify_try.rs"}, {"sha": "5cef64d7786b3b965e9b9bd0471cddb562be8fe8", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -1,6 +1,6 @@\n //! A pass that eliminates branches on uninhabited enum variants.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_middle::mir::{\n     BasicBlock, BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, SwitchTargets,", "previous_filename": "compiler/rustc_mir/src/transform/uninhabited_enum_branching.rs"}, {"sha": "baf381081ddab019de0e25c8ef10278fbf82f2cc", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba4be681d664a50ab307ec732f957c02255e067/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=bba4be681d664a50ab307ec732f957c02255e067", "patch": "@@ -2,8 +2,8 @@\n //! when all of their successors are unreachable. This is achieved through a\n //! post-order traversal of the blocks.\n \n-use crate::transform::simplify;\n-use crate::transform::MirPass;\n+use crate::simplify;\n+use crate::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs"}]}