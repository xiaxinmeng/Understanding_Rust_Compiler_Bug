{"sha": "ccec510f392d5017a1da37c6b8327b5201dffd2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZWM1MTBmMzkyZDUwMTdhMWRhMzdjNmI4MzI3YjUyMDFkZmZkMmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-02T00:59:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T02:47:48Z"}, "message": "librustc: Stop parsing `fn@`, `fn~`, and `fn&`", "tree": {"sha": "4dccf3f19746fdc99b996a153be4d223fcd8a232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dccf3f19746fdc99b996a153be4d223fcd8a232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccec510f392d5017a1da37c6b8327b5201dffd2a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccec510f392d5017a1da37c6b8327b5201dffd2a", "html_url": "https://github.com/rust-lang/rust/commit/ccec510f392d5017a1da37c6b8327b5201dffd2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccec510f392d5017a1da37c6b8327b5201dffd2a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3b17baddbb5f1ac05359a7db5961ed100d960b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3b17baddbb5f1ac05359a7db5961ed100d960b", "html_url": "https://github.com/rust-lang/rust/commit/ce3b17baddbb5f1ac05359a7db5961ed100d960b"}], "stats": {"total": 135, "additions": 22, "deletions": 113}, "files": [{"sha": "d6af2f7862644175308a0ed799ed2dd398fa8bfb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -212,8 +212,8 @@ pub impl CheckLoanCtxt {\n                     (*self.fn_args).contains(&(did.node));\n                 if is_fn_arg { return; } // case (a) above\n               }\n-              ast::expr_fn_block(*) | ast::expr_fn(*) |\n-              ast::expr_loop_body(*) | ast::expr_do_body(*) => {\n+              ast::expr_fn_block(*) | ast::expr_loop_body(*) |\n+              ast::expr_do_body(*) => {\n                 if self.is_stack_closure(expr.id) {\n                     // case (b) above\n                     return;\n@@ -244,7 +244,7 @@ pub impl CheckLoanCtxt {\n     }\n \n     // True if the expression with the given `id` is a stack closure.\n-    // The expression must be an expr_fn(*) or expr_fn_block(*)\n+    // The expression must be an expr_fn_block(*)\n     fn is_stack_closure(@mut self, id: ast::node_id) -> bool {\n         let fn_ty = ty::node_id_to_type(self.tcx(), id);\n         match ty::get(fn_ty).sty {\n@@ -262,10 +262,8 @@ pub impl CheckLoanCtxt {\n             did.crate == ast::local_crate &&\n                 (*self.fn_args).contains(&(did.node))\n           }\n-          ast::expr_fn_block(*) | ast::expr_fn(*) => {\n-            self.is_stack_closure(expr.id)\n-          }\n-          _ => false\n+          ast::expr_fn_block(*) => self.is_stack_closure(expr.id),\n+          _ => false,\n         };\n     }\n "}, {"sha": "74a79e5e56096cab9da51b342012734567040d39", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -38,12 +38,6 @@ pub fn check_crate(tcx: ty::ctxt, crate: @crate) {\n               expr_loop(ref b, _) => {\n                 (v.visit_block)(b, Context { in_loop: true,.. cx }, v);\n               }\n-              expr_fn(*) => {\n-                visit::visit_expr(e, Context {\n-                                        in_loop: false,\n-                                        can_ret: true\n-                                     }, v);\n-              }\n               expr_fn_block(_, ref b) => {\n                 (v.visit_block)(b, Context {\n                                          in_loop: false,"}, {"sha": "52520b59b446e832737eb3a8b70021a835379675", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -49,12 +49,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n     let walk_expr: @fn(expr: @ast::expr, &&depth: int, v: visit::vt<int>) =\n         |expr, depth, v| {\n             match expr.node {\n-              ast::expr_fn(_, _, _, _) => {\n-                visit::visit_expr(expr, depth + 1, v);\n-              }\n-              ast::expr_fn_block(*) => {\n-                visit::visit_expr(expr, depth + 1, v);\n-              }\n+              ast::expr_fn_block(*) => visit::visit_expr(expr, depth + 1, v),\n               ast::expr_path(*) => {\n                   let mut i = 0;\n                   match def_map.find(&expr.id) {"}, {"sha": "95f28578fec66c8860df5aa56d77c8ec77bb31fb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -570,7 +570,6 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n         }\n         visit::visit_expr(expr, self, vt);\n       }\n-      expr_fn(*) |\n       expr_fn_block(*) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n@@ -1123,8 +1122,8 @@ pub impl Liveness {\n               self.propagate_through_expr(e, succ)\n           }\n \n-          expr_fn(_, _, ref blk, _) | expr_fn_block(_, ref blk) => {\n-              debug!(\"%s is an expr_fn or expr_fn_block\",\n+          expr_fn_block(_, ref blk) => {\n+              debug!(\"%s is an expr_fn_block\",\n                    expr_to_str(expr, self.tcx.sess.intr()));\n \n               /*\n@@ -1592,7 +1591,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_fn(*) | expr_fn_block(*) => {\n+      expr_fn_block(*) => {\n         let caps = self.ir.captures(expr);\n         for caps.each |cap| {\n             let var = self.variable(cap.var_nid, expr.span);\n@@ -1794,7 +1793,7 @@ pub impl @Liveness {\n         }\n \n         match move_expr.node {\n-            expr_fn(*) | expr_fn_block(*) => {\n+            expr_fn_block(*) => {\n                 self.report_illegal_read(\n                     move_expr.span, lnk, var, MovedValue);\n                 let name = self.ir.variable_name(var);"}, {"sha": "bcbb2d6fd175466e39bed1aaa506db880bb28553", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -441,7 +441,7 @@ pub impl mem_categorization_ctxt {\n \n           ast::expr_addr_of(*) | ast::expr_call(*) |\n           ast::expr_swap(*) | ast::expr_assign(*) |\n-          ast::expr_assign_op(*) | ast::expr_fn(*) | ast::expr_fn_block(*) |\n+          ast::expr_assign_op(*) | ast::expr_fn_block(*) |\n           ast::expr_assert(*) | ast::expr_ret(*) |\n           ast::expr_loop_body(*) | ast::expr_do_body(*) |\n           ast::expr_unary(*) | ast::expr_method_call(*) |"}, {"sha": "c360b3a23e735fa241db68a5328774d46df713ae", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -644,7 +644,6 @@ pub impl VisitContext {\n                 self.use_expr(base, comp_mode, visitor);\n             }\n \n-            expr_fn(_, _, ref body, _) |\n             expr_fn_block(_, ref body) => {\n                 let cap_vars = self.compute_captures(expr.id);\n                 self.move_maps.capture_map.insert(expr.id, cap_vars);"}, {"sha": "5298f6c632d64f2659e45a0914477f7cf94814be", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -34,12 +34,12 @@ use syntax::ast::{def_local, def_mod, def_prim_ty, def_region, def_self};\n use syntax::ast::{def_self_ty, def_static_method, def_struct, def_ty};\n use syntax::ast::{def_ty_param, def_typaram_binder};\n use syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n-use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n+use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field};\n use syntax::ast::{expr_fn_block, expr_index, expr_method_call, expr_path};\n use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n use syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n use syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n-use syntax::ast::{expr_fn_block, expr_index, expr_loop};\n+use syntax::ast::{expr_index, expr_loop};\n use syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n use syntax::ast::{Generics};\n@@ -4810,7 +4810,6 @@ pub impl Resolver {\n                 visit_expr(expr, (), visitor);\n             }\n \n-            expr_fn(_, ref fn_decl, ref block, _) |\n             expr_fn_block(ref fn_decl, ref block) => {\n                 self.resolve_function(FunctionRibKind(expr.id, block.node.id),\n                                       Some(@/*bad*/copy *fn_decl),"}, {"sha": "d6c691f6667633864e6e7b95eea10226784eaac9", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -869,15 +869,12 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n       }\n       ast_map::node_expr(expr) => {\n         match /*bad*/copy expr.node {\n-          ast::expr_fn(_, decl, _, _) => {\n-            ((dbg_cx.names)(~\"fn\"), decl.output, expr.id)\n-          }\n           ast::expr_fn_block(decl, _) => {\n             ((dbg_cx.names)(~\"fn\"), decl.output, expr.id)\n           }\n           _ => fcx.ccx.sess.span_bug(expr.span,\n                                      ~\"create_function: \\\n-                                       expected an expr_fn or fn_block here\")\n+                                       expected an expr_fn_block here\")\n         }\n       }\n       ast_map::node_dtor(_, _, did, _) => {"}, {"sha": "74cebaee2da4fd684834ff0ba2d04eeded403ccf", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -619,7 +619,6 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_vec(*) | ast::expr_repeat(*) => {\n             return tvec::trans_fixed_vstore(bcx, expr, expr, dest);\n         }\n-        ast::expr_fn(_, ref decl, ref body, _) |\n         ast::expr_fn_block(ref decl, ref body) => {\n             let expr_ty = expr_ty(bcx, expr);\n             let sigil = ty::ty_closure_sigil(expr_ty);"}, {"sha": "7b7a6eee92e7c5bf5fc7cfa0720cdcf440b826ea", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -301,7 +301,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n             }\n         }\n       }\n-      expr_fn(*) | expr_fn_block(*) => {\n+      expr_fn_block(*) => {\n           match ty::ty_closure_sigil(ty::expr_ty(cx.ccx.tcx, e)) {\n               ast::OwnedSigil => {}\n               ast::BorrowedSigil | ast::ManagedSigil => {"}, {"sha": "0b0715dd9ca35fe07db051cf3d88351e1083fd6a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -3124,7 +3124,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_tup(*) |\n         ast::expr_if(*) |\n         ast::expr_match(*) |\n-        ast::expr_fn(*) |\n         ast::expr_fn_block(*) |\n         ast::expr_loop_body(*) |\n         ast::expr_do_body(*) |"}, {"sha": "f724a442902f269e7e86a1c443fa002558bf9f2a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -2373,10 +2373,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       ast::expr_match(discrim, ref arms) => {\n         bot = _match::check_match(fcx, expr, discrim, (/*bad*/copy *arms));\n       }\n-      ast::expr_fn(sigil, ref decl, ref body, _) => {\n-        check_expr_fn(fcx, expr, Some(sigil),\n-                      decl, body, Vanilla, expected);\n-      }\n       ast::expr_fn_block(ref decl, ref body) => {\n         check_expr_fn(fcx, expr, None,\n                       decl, body, Vanilla, expected);"}, {"sha": "8a7726650722082ca8806193780818790ea94a1d", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -282,7 +282,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @mut Rcx, v: rvt) {\n             guarantor::for_match(rcx, discr, *arms);\n         }\n \n-        ast::expr_fn(*) | ast::expr_fn_block(*) => {\n+        ast::expr_fn_block(*) => {\n             let function_type = rcx.resolve_node_type(expr.id);\n             match ty::get(function_type).sty {\n                 ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil,\n@@ -708,7 +708,6 @@ pub mod guarantor {\n             ast::expr_tup(*) |\n             ast::expr_if(*) |\n             ast::expr_match(*) |\n-            ast::expr_fn(*) |\n             ast::expr_fn_block(*) |\n             ast::expr_loop_body(*) |\n             ast::expr_do_body(*) |"}, {"sha": "cec35b429b43b7236e2189c123a4b53bb8829805", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -571,10 +571,6 @@ pub enum expr_ {\n        (implicit) condition is always true. */\n     expr_loop(blk, Option<ident>),\n     expr_match(@expr, ~[arm]),\n-\n-    // FIXME(#4717) the @() is req'd on windows or else LLVM croaks\n-    expr_fn(Sigil, fn_decl, blk, @()),\n-\n     expr_fn_block(fn_decl, blk),\n     // Inner expr is always an expr_fn_block. We need the wrapping node to\n     // easily type this (a function returning nil on the inside but bool on"}, {"sha": "c8fb83224ac74b2201e5dcdae84de31eb512ca5e", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -15,7 +15,7 @@\n  * interface.\n  */\n \n-use prelude::*;\n+use core::prelude::*;\n \n use ast;\n use codemap::span;"}, {"sha": "9072f4bdd01bc55b978fabd15595f088973aaf98", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n use core::io::WriterUtil;\n+use core::prelude::*;\n \n use ast;\n use codemap;"}, {"sha": "d7f7f7c6510e4b54779ee53de7e202955c7bc3c6", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use core::prelude::*;\n \n use ast::tt_delim;\n use ast;"}, {"sha": "b315e543f5f40427c3f646b2d57c3d9d531d395e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -533,14 +533,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 arms.map(|x| fld.fold_arm(x))\n             )\n         }\n-        expr_fn(proto, ref decl, ref body, _) => {\n-            expr_fn(\n-                proto,\n-                fold_fn_decl(decl, fld),\n-                fld.fold_block(body),\n-                @()\n-            )\n-        }\n         expr_fn_block(ref decl, ref body) => {\n             expr_fn_block(\n                 fold_fn_decl(decl, fld),"}, {"sha": "a3df97b3ae4c70458777c9cdd1efe1c17598c0d0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -23,7 +23,7 @@ use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n-use ast::{expr_field, expr_fn, expr_fn_block, expr_if, expr_index};\n+use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n@@ -381,17 +381,8 @@ pub impl Parser {\n         let purity = self.parse_purity();\n         let onceness = parse_onceness(&self);\n         self.expect_keyword(&~\"fn\");\n-        let post_sigil = self.parse_fn_ty_sigil();\n-\n-        let sigil = match (pre_sigil, post_sigil) {\n-            (None, None) => BorrowedSigil,\n-            (Some(p), None) | (None, Some(p)) => p,\n-            (Some(_), Some(_)) => {\n-                self.fatal(~\"cannot combine prefix and postfix \\\n-                             syntax for closure kind; note that \\\n-                             postfix syntax is obsolete\");\n-            }\n-        };\n+\n+        let sigil = match pre_sigil { None => BorrowedSigil, Some(p) => p };\n \n         let region = if pre_region_name.is_some() {\n             Some(self.region_from_name(pre_region_name))\n@@ -1150,15 +1141,6 @@ pub impl Parser {\n             return self.parse_loop_expr();\n         } else if self.eat_keyword(&~\"match\") {\n             return self.parse_match_expr();\n-        } else if self.eat_keyword(&~\"fn\") {\n-            let opt_sigil = self.parse_fn_ty_sigil();\n-            let sigil = match opt_sigil {\n-                None => {\n-                    self.fatal(~\"fn expr are deprecated, use fn@\")\n-                }\n-                Some(p) => { p }\n-            };\n-            return self.parse_fn_expr(sigil);\n         } else if self.eat_keyword(&~\"unsafe\") {\n             return self.parse_block_expr(lo, unsafe_blk);\n         } else if *self.token == token::LBRACKET {\n@@ -1775,19 +1757,6 @@ pub impl Parser {\n         self.mk_expr(lo, hi, expr_if(cond, thn, els))\n     }\n \n-    fn parse_fn_expr(sigil: Sigil) -> @expr {\n-        let lo = self.last_span.lo;\n-\n-        // if we want to allow fn expression argument types to be inferred in\n-        // the future, just have to change parse_arg to parse_fn_block_arg.\n-        let decl = self.parse_fn_decl(|p| p.parse_arg());\n-\n-        let body = self.parse_block();\n-\n-        self.mk_expr(lo, body.span.hi,\n-                     expr_fn(sigil, decl, body, @()))\n-    }\n-\n     // `|args| { ... }` like in `do` expressions\n     fn parse_lambda_block_expr() -> @expr {\n         self.parse_lambda_expr_("}, {"sha": "f808a3be6bbebc0ff67165723dafa6495fcf5892", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -1346,17 +1346,6 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n         }\n         bclose_(s, expr.span, match_indent_unit);\n       }\n-      ast::expr_fn(sigil, ref decl, ref body, _) => {\n-        // containing cbox, will be closed by print-block at }\n-        cbox(s, indent_unit);\n-        // head-box, will be closed by print-block at start\n-        ibox(s, 0u);\n-        print_fn_header_info(s, None, None, ast::Many,\n-                             Some(sigil), ast::inherited);\n-        print_fn_args_and_ret(s, decl, None);\n-        space(s.s);\n-        print_block(s, body);\n-      }\n       ast::expr_fn_block(ref decl, ref body) => {\n         // in do/for blocks we don't want to show an empty\n         // argument list, but at this point we don't know which"}, {"sha": "262754624cba564d9897a605ca67da487ba9fcaf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccec510f392d5017a1da37c6b8327b5201dffd2a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ccec510f392d5017a1da37c6b8327b5201dffd2a", "patch": "@@ -534,17 +534,6 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n             (v.visit_expr)(x, e, v);\n             for arms.each |a| { (v.visit_arm)(a, e, v); }\n         }\n-        expr_fn(proto, ref decl, ref body, _) => {\n-            (v.visit_fn)(\n-                &fk_anon(proto),\n-                decl,\n-                body,\n-                ex.span,\n-                ex.id,\n-                e,\n-                v\n-            );\n-        }\n         expr_fn_block(ref decl, ref body) => {\n             (v.visit_fn)(\n                 &fk_fn_block,"}]}