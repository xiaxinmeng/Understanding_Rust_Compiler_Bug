{"sha": "87b269ab6654ddcaed43933ebcd3754d000117b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YjI2OWFiNjY1NGRkY2FlZDQzOTMzZWJjZDM3NTRkMDAwMTE3Yjc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-04T20:10:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-04T20:10:36Z"}, "message": "Rollup merge of #81645 - m-ou-se:panic-lint, r=estebank,flip1995\n\nAdd lint for `panic!(123)` which is not accepted in Rust 2021.\n\nThis extends the `panic_fmt` lint to warn for all cases where the first argument cannot be interpreted as a format string, as will happen in Rust 2021.\n\nIt suggests to add `\"{}\",` to format the message as a string. In the case of `std::panic!()`, it also suggests the recently stabilized\n`std::panic::panic_any()` function as an alternative.\n\nIt renames the lint to `non_fmt_panic` to match the lint naming guidelines.\n\n![image](https://user-images.githubusercontent.com/783247/106520928-675ea680-64d5-11eb-81f7-d8fa48b93a0b.png)\n\nThis is part of #80162.\n\nr? ```@estebank```", "tree": {"sha": "97f1329a2518b204ea50c667272fb2db77f872a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97f1329a2518b204ea50c667272fb2db77f872a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b269ab6654ddcaed43933ebcd3754d000117b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHFS8CRBK7hj4Ov3rIwAAdHIIACLzZHxWq+Waid8iPWoZljlz\nqjVjQyoDVqIQ7dEb7bhNS9MR9hK/4c+csmsQAmrujUU+d9iIaBVMfxUqXW2CkP/5\n5TsUfc98pMEQfvvHBsP3YFZlrDcvULIvpu0QO+GvmE7fmpx6/yDR3NCvmx75SDN/\nYEc10vJq8TxBVLp5RoKGVECa3NFo1efGFudj/NXR+Q5BZEKkzJzH8WHGZPqKkKuo\nY3/S1WAKf8AXaiDfRfB2As0nlwoLSrYuNG+i58bJYbUgpJHxrCUox0/BREthERrx\n3pqakYUNie7Eem24OVcvS5PYLAB5/VK1wcOA+NeqZonga+dYRYmWZqkI9pSeeyk=\n=50mX\n-----END PGP SIGNATURE-----\n", "payload": "tree 97f1329a2518b204ea50c667272fb2db77f872a8\nparent c5990dd8ad83fa1dccbc105102bceca0728977c3\nparent 0870c154b63319df131de822d85dcebcbba080af\nauthor Mara Bos <m-ou.se@m-ou.se> 1612469436 +0100\ncommitter GitHub <noreply@github.com> 1612469436 +0100\n\nRollup merge of #81645 - m-ou-se:panic-lint, r=estebank,flip1995\n\nAdd lint for `panic!(123)` which is not accepted in Rust 2021.\n\nThis extends the `panic_fmt` lint to warn for all cases where the first argument cannot be interpreted as a format string, as will happen in Rust 2021.\n\nIt suggests to add `\"{}\",` to format the message as a string. In the case of `std::panic!()`, it also suggests the recently stabilized\n`std::panic::panic_any()` function as an alternative.\n\nIt renames the lint to `non_fmt_panic` to match the lint naming guidelines.\n\n![image](https://user-images.githubusercontent.com/783247/106520928-675ea680-64d5-11eb-81f7-d8fa48b93a0b.png)\n\nThis is part of #80162.\n\nr? ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b269ab6654ddcaed43933ebcd3754d000117b7", "html_url": "https://github.com/rust-lang/rust/commit/87b269ab6654ddcaed43933ebcd3754d000117b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b269ab6654ddcaed43933ebcd3754d000117b7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5990dd8ad83fa1dccbc105102bceca0728977c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5990dd8ad83fa1dccbc105102bceca0728977c3", "html_url": "https://github.com/rust-lang/rust/commit/c5990dd8ad83fa1dccbc105102bceca0728977c3"}, {"sha": "0870c154b63319df131de822d85dcebcbba080af", "url": "https://api.github.com/repos/rust-lang/rust/commits/0870c154b63319df131de822d85dcebcbba080af", "html_url": "https://github.com/rust-lang/rust/commit/0870c154b63319df131de822d85dcebcbba080af"}], "stats": {"total": 654, "additions": 396, "deletions": 258}, "files": [{"sha": "024d9687f311940710bac84eb21f04f908aa8383", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -28,7 +28,7 @@ pub trait ExpectOne<A: Array> {\n \n impl<A: Array> ExpectOne<A> for SmallVec<A> {\n     fn expect_one(self, err: &'static str) -> A::Item {\n-        assert!(self.len() == 1, err);\n+        assert!(self.len() == 1, \"{}\", err);\n         self.into_iter().next().unwrap()\n     }\n }"}, {"sha": "aa88233209940c13e756ae1e5764a55d18d94902", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -901,7 +901,7 @@ impl HandlerInner {\n \n     fn span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), sp);\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn emit_diag_at_span(&mut self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n@@ -955,7 +955,7 @@ impl HandlerInner {\n \n     fn bug(&mut self, msg: &str) -> ! {\n         self.emit_diagnostic(&Diagnostic::new(Bug, msg));\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn delay_as_bug(&mut self, diagnostic: Diagnostic) {"}, {"sha": "638b73c27a8d7c467f99e6dddce83cc37f6212b4", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -55,8 +55,8 @@ mod late;\n mod levels;\n mod methods;\n mod non_ascii_idents;\n+mod non_fmt_panic;\n mod nonstandard_style;\n-mod panic_fmt;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -81,8 +81,8 @@ use builtin::*;\n use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n+use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n-use panic_fmt::PanicFmt;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -169,7 +169,7 @@ macro_rules! late_lint_passes {\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                PanicFmt: PanicFmt,\n+                NonPanicFmt: NonPanicFmt,\n             ]\n         );\n     };"}, {"sha": "e98297b692c92d887ec3fec65114f7959d3dcd9a", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -0,0 +1,197 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_ast as ast;\n+use rustc_errors::{pluralize, Applicability};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_parse_format::{ParseMode, Parser, Piece};\n+use rustc_span::{sym, symbol::kw, InnerSpan, Span, Symbol};\n+\n+declare_lint! {\n+    /// The `non_fmt_panic` lint detects `panic!(..)` invocations where the first\n+    /// argument is not a formatting string.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,no_run\n+    /// panic!(\"{}\");\n+    /// panic!(123);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2018 and earlier, `panic!(x)` directly uses `x` as the message.\n+    /// That means that `panic!(\"{}\")` panics with the message `\"{}\"` instead\n+    /// of using it as a formatting string, and `panic!(123)` will panic with\n+    /// an `i32` as message.\n+    ///\n+    /// Rust 2021 always interprets the first argument as format string.\n+    NON_FMT_PANIC,\n+    Warn,\n+    \"detect single-argument panic!() invocations in which the argument is not a format string\",\n+    report_in_external_macro\n+}\n+\n+declare_lint_pass!(NonPanicFmt => [NON_FMT_PANIC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n+            if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n+                if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n+                    || Some(def_id) == cx.tcx.lang_items().panic_fn()\n+                    || Some(def_id) == cx.tcx.lang_items().panic_str()\n+                {\n+                    if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n+                        if cx.tcx.is_diagnostic_item(sym::std_panic_2015_macro, id)\n+                            || cx.tcx.is_diagnostic_item(sym::core_panic_2015_macro, id)\n+                        {\n+                            check_panic(cx, f, arg);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n+    if let hir::ExprKind::Lit(lit) = &arg.kind {\n+        if let ast::LitKind::Str(sym, _) = lit.node {\n+            // The argument is a string literal.\n+            check_panic_str(cx, f, arg, &sym.as_str());\n+            return;\n+        }\n+    }\n+\n+    // The argument is *not* a string literal.\n+\n+    let (span, panic) = panic_call(cx, f);\n+\n+    cx.struct_span_lint(NON_FMT_PANIC, arg.span, |lint| {\n+        let mut l = lint.build(\"panic message is not a string literal\");\n+        l.note(\"this is no longer accepted in Rust 2021\");\n+        if span.contains(arg.span) {\n+            l.span_suggestion_verbose(\n+                arg.span.shrink_to_lo(),\n+                \"add a \\\"{}\\\" format string to Display the message\",\n+                \"\\\"{}\\\", \".into(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            if panic == sym::std_panic_macro {\n+                l.span_suggestion_verbose(\n+                    span.until(arg.span),\n+                    \"or use std::panic::panic_any instead\",\n+                    \"std::panic::panic_any(\".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+        l.emit();\n+    });\n+}\n+\n+fn check_panic_str<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    f: &'tcx hir::Expr<'tcx>,\n+    arg: &'tcx hir::Expr<'tcx>,\n+    fmt: &str,\n+) {\n+    if !fmt.contains(&['{', '}'][..]) {\n+        // No brace, no problem.\n+        return;\n+    }\n+\n+    let fmt_span = arg.span.source_callsite();\n+\n+    let (snippet, style) = match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n+        Ok(snippet) => {\n+            // Count the number of `#`s between the `r` and `\"`.\n+            let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n+            (Some(snippet), style)\n+        }\n+        Err(_) => (None, None),\n+    };\n+\n+    let mut fmt_parser =\n+        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+    let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n+\n+    let (span, _) = panic_call(cx, f);\n+\n+    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n+        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n+            [] => vec![fmt_span],\n+            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n+        };\n+        cx.struct_span_lint(NON_FMT_PANIC, arg_spans, |lint| {\n+            let mut l = lint.build(match n_arguments {\n+                1 => \"panic message contains an unused formatting placeholder\",\n+                _ => \"panic message contains unused formatting placeholders\",\n+            });\n+            l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n+            if span.contains(arg.span) {\n+                l.span_suggestion(\n+                    arg.span.shrink_to_hi(),\n+                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n+                    \", ...\".into(),\n+                    Applicability::HasPlaceholders,\n+                );\n+                l.span_suggestion(\n+                    arg.span.shrink_to_lo(),\n+                    \"or add a \\\"{}\\\" format string to use the message literally\",\n+                    \"\\\"{}\\\", \".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            l.emit();\n+        });\n+    } else {\n+        let brace_spans: Option<Vec<_>> =\n+            snippet.filter(|s| s.starts_with('\"') || s.starts_with(\"r#\")).map(|s| {\n+                s.char_indices()\n+                    .filter(|&(_, c)| c == '{' || c == '}')\n+                    .map(|(i, _)| fmt_span.from_inner(InnerSpan { start: i, end: i + 1 }))\n+                    .collect()\n+            });\n+        let msg = match &brace_spans {\n+            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n+            _ => \"panic message contains braces\",\n+        };\n+        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or(vec![span]), |lint| {\n+            let mut l = lint.build(msg);\n+            l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n+            if span.contains(arg.span) {\n+                l.span_suggestion(\n+                    arg.span.shrink_to_lo(),\n+                    \"add a \\\"{}\\\" format string to use the message literally\",\n+                    \"\\\"{}\\\", \".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            l.emit();\n+        });\n+    }\n+}\n+\n+fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {\n+    let mut expn = f.span.ctxt().outer_expn_data();\n+\n+    let mut panic_macro = kw::Empty;\n+\n+    // Unwrap more levels of macro expansion, as panic_2015!()\n+    // was likely expanded from panic!() and possibly from\n+    // [debug_]assert!().\n+    for &i in\n+        &[sym::std_panic_macro, sym::core_panic_macro, sym::assert_macro, sym::debug_assert_macro]\n+    {\n+        let parent = expn.call_site.ctxt().outer_expn_data();\n+        if parent.macro_def_id.map_or(false, |id| cx.tcx.is_diagnostic_item(i, id)) {\n+            expn = parent;\n+            panic_macro = i;\n+        }\n+    }\n+\n+    (expn.call_site, panic_macro)\n+}"}, {"sha": "4a6aca72acbbec957c2b4af13594c57ee60a22ed", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5990dd8ad83fa1dccbc105102bceca0728977c3/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=c5990dd8ad83fa1dccbc105102bceca0728977c3", "patch": "@@ -1,155 +0,0 @@\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_ast as ast;\n-use rustc_errors::{pluralize, Applicability};\n-use rustc_hir as hir;\n-use rustc_middle::ty;\n-use rustc_parse_format::{ParseMode, Parser, Piece};\n-use rustc_span::{sym, InnerSpan};\n-\n-declare_lint! {\n-    /// The `panic_fmt` lint detects `panic!(\"..\")` with `{` or `}` in the string literal.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,no_run\n-    /// panic!(\"{}\");\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// In Rust 2018 and earlier, `panic!(\"{}\")` panics with the message `\"{}\"`,\n-    /// as a `panic!()` invocation with a single argument does not use `format_args!()`.\n-    /// Rust 2021 interprets this string as format string, which breaks this.\n-    PANIC_FMT,\n-    Warn,\n-    \"detect braces in single-argument panic!() invocations\",\n-    report_in_external_macro\n-}\n-\n-declare_lint_pass!(PanicFmt => [PANIC_FMT]);\n-\n-impl<'tcx> LateLintPass<'tcx> for PanicFmt {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n-            if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n-                if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n-                    || Some(def_id) == cx.tcx.lang_items().panic_fn()\n-                {\n-                    check_panic(cx, f, arg);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n-    if let hir::ExprKind::Lit(lit) = &arg.kind {\n-        if let ast::LitKind::Str(sym, _) = lit.node {\n-            let mut expn = f.span.ctxt().outer_expn_data();\n-            if let Some(id) = expn.macro_def_id {\n-                if cx.tcx.is_diagnostic_item(sym::std_panic_2015_macro, id)\n-                    || cx.tcx.is_diagnostic_item(sym::core_panic_2015_macro, id)\n-                {\n-                    let fmt = sym.as_str();\n-                    if !fmt.contains(&['{', '}'][..]) {\n-                        return;\n-                    }\n-\n-                    let fmt_span = arg.span.source_callsite();\n-\n-                    let (snippet, style) =\n-                        match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n-                            Ok(snippet) => {\n-                                // Count the number of `#`s between the `r` and `\"`.\n-                                let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n-                                (Some(snippet), style)\n-                            }\n-                            Err(_) => (None, None),\n-                        };\n-\n-                    let mut fmt_parser =\n-                        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n-                    let n_arguments =\n-                        (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n-\n-                    // Unwrap more levels of macro expansion, as panic_2015!()\n-                    // was likely expanded from panic!() and possibly from\n-                    // [debug_]assert!().\n-                    for &assert in &[\n-                        sym::std_panic_macro,\n-                        sym::core_panic_macro,\n-                        sym::assert_macro,\n-                        sym::debug_assert_macro,\n-                    ] {\n-                        let parent = expn.call_site.ctxt().outer_expn_data();\n-                        if parent\n-                            .macro_def_id\n-                            .map_or(false, |id| cx.tcx.is_diagnostic_item(assert, id))\n-                        {\n-                            expn = parent;\n-                        }\n-                    }\n-\n-                    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n-                        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n-                            [] => vec![fmt_span],\n-                            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n-                        };\n-                        cx.struct_span_lint(PANIC_FMT, arg_spans, |lint| {\n-                            let mut l = lint.build(match n_arguments {\n-                                1 => \"panic message contains an unused formatting placeholder\",\n-                                _ => \"panic message contains unused formatting placeholders\",\n-                            });\n-                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust edition\");\n-                            if expn.call_site.contains(arg.span) {\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_hi(),\n-                                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n-                                    \", ...\".into(),\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_lo(),\n-                                    \"or add a \\\"{}\\\" format string to use the message literally\",\n-                                    \"\\\"{}\\\", \".into(),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            l.emit();\n-                        });\n-                    } else {\n-                        let brace_spans: Option<Vec<_>> = snippet\n-                            .filter(|s| s.starts_with('\"') || s.starts_with(\"r#\"))\n-                            .map(|s| {\n-                                s.char_indices()\n-                                    .filter(|&(_, c)| c == '{' || c == '}')\n-                                    .map(|(i, _)| {\n-                                        fmt_span.from_inner(InnerSpan { start: i, end: i + 1 })\n-                                    })\n-                                    .collect()\n-                            });\n-                        let msg = match &brace_spans {\n-                            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n-                            _ => \"panic message contains braces\",\n-                        };\n-                        cx.struct_span_lint(PANIC_FMT, brace_spans.unwrap_or(vec![expn.call_site]), |lint| {\n-                            let mut l = lint.build(msg);\n-                            l.note(\"this message is not used as a format string, but will be in a future Rust edition\");\n-                            if expn.call_site.contains(arg.span) {\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_lo(),\n-                                    \"add a \\\"{}\\\" format string to use the message literally\",\n-                                    \"\\\"{}\\\", \".into(),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            l.emit();\n-                        });\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "791d5060fe5c7b953c49acf4185012969888f636", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -3,7 +3,7 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n-use std::panic::Location;\n+use std::panic::{panic_any, Location};\n \n #[cold]\n #[inline(never)]\n@@ -32,7 +32,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n-            (None, _) => panic!(msg),\n+            (None, _) => panic_any(msg),\n         }\n     });\n     unreachable!();"}, {"sha": "6e502426df90643e689bb65e7defc0855c280787", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -10,22 +10,23 @@ tests. `panic!` is closely tied with the `unwrap` method of both\n `panic!` when they are set to [`None`] or [`Err`] variants.\n \n This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n-and the single-argument form of the `panic!` macro will be the value which\n-is transmitted.\n+panic entirely. This macro panics with a string and uses the [`format!`] syntax\n+for building the message.\n+\n+Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n+which contains either a `&str` or `String` for regular `panic!()` invocations.\n+To panic with a value of another other type, [`panic_any`] can be used.\n \n [`Result`] enum is often a better solution for recovering from errors than\n using the `panic!` macro. This macro should be used to avoid proceeding using\n incorrect values, such as from external sources. Detailed information about\n error handling is found in the [book].\n \n-The multi-argument form of this macro panics with a string and has the\n-[`format!`] syntax for building a string.\n-\n See also the macro [`compile_error!`], for raising errors during compilation.\n \n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n+[`panic_any`]: ../std/panic/fn.panic_any.html\n [`Box`]: ../std/boxed/struct.Box.html\n [`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n@@ -42,6 +43,6 @@ program with code `101`.\n # #![allow(unreachable_code)]\n panic!();\n panic!(\"this is a terrible mistake!\");\n-panic!(4); // panic with the value of 4 to be collected elsewhere\n panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+std::panic::panic_any(4); // panic with the value of 4 to be collected elsewhere\n ```"}, {"sha": "1cc0967c8f42e50e6e6c63654a1a7448269cb80d", "filename": "library/term/src/terminfo/parm/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -77,15 +77,15 @@ fn test_comparison_ops() {\n     for &(op, bs) in v.iter() {\n         let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[0]]);\n         let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[1]]);\n         let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[2]]);\n     }\n }\n@@ -95,13 +95,13 @@ fn test_conditionals() {\n     let mut vars = Variables::new();\n     let s = b\"\\\\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m\";\n     let res = expand(s, &[Number(1)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(8)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(42)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n }\n "}, {"sha": "f0586d510dbdb5f7db31a89d4a814e30ec97fe2a", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -199,7 +199,7 @@ fn test_should_panic_bad_message() {\n fn test_should_panic_non_string_message_type() {\n     use crate::tests::TrFailedMsg;\n     fn f() {\n-        panic!(1i32);\n+        std::panic::panic_any(1i32);\n     }\n     let expected = \"foobar\";\n     let failed_msg = format!("}, {"sha": "c7ef5ad70a114002fdad17f7e7c47c83d083aaa3", "filename": "src/test/ui-fulldeps/issue-15149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -50,7 +50,7 @@ fn test() {\n                                                       .output().unwrap();\n \n     assert!(child_output.status.success(),\n-            format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n-                    str::from_utf8(&child_output.stdout).unwrap(),\n-                    str::from_utf8(&child_output.stderr).unwrap()));\n+            \"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n+            str::from_utf8(&child_output.stdout).unwrap(),\n+            str::from_utf8(&child_output.stderr).unwrap());\n }"}, {"sha": "8ae8376ae4a6f53df0098ecedc172f1d8b0a9787", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_panic)]\n+#![allow(non_fmt_panic)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "74907a0b49518f82e2bd5f2bcbbfb657ef7c5d99", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,119 +1,119 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:6:15\n+  --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:16\n+  --> $DIR/const_panic.rs:11:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:11:16\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:14:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:14:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:15:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:18:15\n+  --> $DIR/const_panic.rs:19:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:18:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:19:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:22:15\n+  --> $DIR/const_panic.rs:23:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:23:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:26:20\n+  --> $DIR/const_panic.rs:27:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:26:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:27:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:30:21\n+  --> $DIR/const_panic.rs:31:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:30:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:31:21\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:35:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:34:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:35:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:38:20\n+  --> $DIR/const_panic.rs:39:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:38:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:39:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:42:20\n+  --> $DIR/const_panic.rs:43:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:42:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:43:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>"}, {"sha": "cb6d58a23d9368a79ba13df4fc66b0c59dda0487", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -82,7 +82,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "e28bedb982dd91d48095ec9ee4809a8a2a517446", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -46,7 +46,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n \n         let mut data = self.data.borrow_mut();\n@@ -67,7 +67,7 @@ impl<'a> Drop for Ptr<'a> {\n         self.1.cur_ops.set(self.1.cur_ops.get() + 1);\n \n         if self.1.cur_ops.get() == self.1.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "d5886a13558c627d8703fdee6705cf23322ff318", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -31,7 +31,7 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n     // For stability reasons this will need to part of an edition change.\n \n-    #[allow(panic_fmt)]\n+    #[allow(non_fmt_panic)]\n     let msg = std::panic::catch_unwind(|| {\n         panic!(\"{foo}\");\n     }).unwrap_err();"}, {"sha": "2846f2a1f835332074f6bed990fc8c83d4124f80", "filename": "src/test/ui/macros/assert-macro-owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'test-assert-owned'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     assert!(false, \"test-assert-owned\".to_string());\n }"}, {"sha": "fd2c590ae5fd6eac0af7664732daf8ddd034b728", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -57,7 +57,7 @@ fn writeln_1arg() {\n //\n // (Example: Issue #48042)\n #[test]\n-#[allow(panic_fmt)]\n+#[allow(non_fmt_panic)]\n fn to_format_or_not_to_format() {\n     // (\"{}\" is the easiest string to test because if this gets\n     // sent to format_args!, it'll simply fail to compile."}, {"sha": "22c804abf5cc85deedb2a746d0221986ac2d2043", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     assert_eq!(get(), vec![0, 2, 3, 1]);\n \n     let _ = std::panic::catch_unwind(|| {\n-        (d(4), &d(5), d(6), &d(7), panic!(InjectedFailure));\n+        (d(4), &d(5), d(6), &d(7), panic::panic_any(InjectedFailure));\n     });\n \n     // here, the temporaries (5/7) live until the end of the"}, {"sha": "25c53316e1290a04436fad7dab169ac900d44d18", "filename": "src/test/ui/non-fmt-panic.rs", "status": "renamed", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -13,19 +13,27 @@ fn main() {\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{:03x} {test} bla\");\n     //~^ WARN panic message contains unused formatting placeholders\n+    assert!(false, S);\n+    //~^ WARN panic message is not a string literal\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n-    panic!(C); // No warning (yet)\n-    panic!(S); // No warning (yet)\n+    panic!(C); //~ WARN panic message is not a string literal\n+    panic!(S); //~ WARN panic message is not a string literal\n+    std::panic!(123); //~ WARN panic message is not a string literal\n+    core::panic!(&*\"abc\"); //~ WARN panic message is not a string literal\n     panic!(concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n     panic!(concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n \n     fancy_panic::fancy_panic!(\"test {} 123\");\n     //~^ WARN panic message contains an unused formatting placeholder\n \n+    fancy_panic::fancy_panic!(S);\n+    //~^ WARN panic message is not a string literal\n+\n     // Check that the lint only triggers for std::panic and core::panic,\n     // not any panic macro:\n     macro_rules! panic {\n         ($e:expr) => ();\n     }\n     panic!(\"{}\"); // OK\n+    panic!(S); // OK\n }", "previous_filename": "src/test/ui/panic-brace.rs"}, {"sha": "45187c518c423901ffc246209bc4fb8598e34d9b", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "renamed", "additions": 98, "deletions": 18, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,35 +1,35 @@\n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:11:29\n+  --> $DIR/non-fmt-panic.rs:11:29\n    |\n LL |     panic!(\"here's a brace: {\");\n    |                             ^\n    |\n-   = note: `#[warn(panic_fmt)]` on by default\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: `#[warn(non_fmt_panic)]` on by default\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            ^^^^^\n \n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:12:31\n+  --> $DIR/non-fmt-panic.rs:12:31\n    |\n LL |     std::panic!(\"another one: }\");\n    |                               ^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:13:25\n+  --> $DIR/non-fmt-panic.rs:13:25\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing argument\n    |\n LL |     core::panic!(\"Hello {}\", ...);\n@@ -40,12 +40,12 @@ LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  ^^^^^\n \n warning: panic message contains unused formatting placeholders\n-  --> $DIR/panic-brace.rs:14:21\n+  --> $DIR/non-fmt-panic.rs:14:21\n    |\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing arguments\n    |\n LL |     assert!(false, \"{:03x} {test} bla\", ...);\n@@ -55,25 +55,97 @@ help: or add a \"{}\" format string to use the message literally\n LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    ^^^^^\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:16:20\n+   |\n+LL |     assert!(false, S);\n+   |                    ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     assert!(false, \"{}\", S);\n+   |                    ^^^^^\n+\n warning: panic message contains braces\n-  --> $DIR/panic-brace.rs:16:27\n+  --> $DIR/non-fmt-panic.rs:18:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          ^^^^^\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:19:12\n+   |\n+LL |     panic!(C);\n+   |            ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", C);\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(C);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:20:12\n+   |\n+LL |     panic!(S);\n+   |            ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", S);\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(S);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:21:17\n+   |\n+LL |     std::panic!(123);\n+   |                 ^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     std::panic!(\"{}\", 123);\n+   |                 ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(123);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:22:18\n+   |\n+LL |     core::panic!(&*\"abc\");\n+   |                  ^^^^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     core::panic!(\"{}\", &*\"abc\");\n+   |                  ^^^^^\n+\n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:19:12\n+  --> $DIR/non-fmt-panic.rs:23:12\n    |\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing argument\n    |\n LL |     panic!(concat!(\"{\", \"}\"), ...);\n@@ -84,24 +156,32 @@ LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n    |            ^^^^^\n \n warning: panic message contains braces\n-  --> $DIR/panic-brace.rs:20:5\n+  --> $DIR/non-fmt-panic.rs:24:5\n    |\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n    |            ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:22:37\n+  --> $DIR/non-fmt-panic.rs:26:37\n    |\n LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |                                     ^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:29:31\n+   |\n+LL |     fancy_panic::fancy_panic!(S);\n+   |                               ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n \n-warning: 8 warnings emitted\n+warning: 14 warnings emitted\n ", "previous_filename": "src/test/ui/panic-brace.stderr"}, {"sha": "bfcc12cd186bd5a8d59160baaf0694f45c6e7d66", "filename": "src/test/ui/panics/explicit-panic-msg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,5 +1,6 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n+#![allow(non_fmt_panic)]\n \n // run-fail\n // error-pattern:wooooo"}, {"sha": "95ae6ffe8be02e231576436500aaf183aa0adc8d", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'Box<Any>'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     panic!(Box::new(612_i64));\n }"}, {"sha": "d2a7ba3713a514cf07333795ec15d7fe2bc8e421", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]\n+#![allow(non_fmt_panic)]\n \n fn main() {\n     panic!(box 413 as Box<dyn std::any::Any + Send>);"}, {"sha": "3c6ee8fa3155e3ddce3de76c4c958294dae7f49c", "filename": "src/test/ui/panics/while-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -5,7 +5,7 @@\n // ignore-emscripten no processes\n \n fn main() {\n-    panic!({\n+    panic!(\"{}\", {\n         while true {\n             panic!(\"giraffe\")\n         }"}, {"sha": "4ee423b383b0f431c89db4193206a99b83c88410", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -2183,7 +2183,7 @@ fn lint_expect_fun_call(\n         span_replace_word,\n         &format!(\"use of `{}` followed by a function call\", name),\n         \"try this\",\n-        format!(\"unwrap_or_else({} {{ panic!({}) }})\", closure_args, arg_root_snippet),\n+        format!(\"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\", closure_args, arg_root_snippet),\n         applicability,\n     );\n }"}, {"sha": "9cef7438d225cbc51cdedd1b471ece46bbb89e78", "filename": "src/tools/clippy/tests/missing-test-files.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -9,14 +9,12 @@ fn test_missing_tests() {\n     if !missing_files.is_empty() {\n         assert!(\n             false,\n-            format!(\n-                \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n-                missing_files\n-                    .iter()\n-                    .map(|s| format!(\"\\t{}\", s))\n-                    .collect::<Vec<_>>()\n-                    .join(\"\\n\")\n-            )\n+            \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n+            missing_files\n+                .iter()\n+                .map(|s| format!(\"\\t{}\", s))\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\")\n         );\n     }\n }"}, {"sha": "e989de654045632a1a496859c9cff7640742492a", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,3 +1,5 @@\n+#![allow(non_fmt_panic)]\n+\n macro_rules! assert_const {\n     ($len:expr) => {\n         assert!($len > 0);"}, {"sha": "c66fdf093f5148a9a6aa660bea88dd23c6d9f61d", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -1,5 +1,5 @@\n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:9:5\n+  --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true);\n    |     ^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     assert!(true);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:10:5\n+  --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     assert!(false);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:11:5\n+  --> $DIR/assertions_on_constants.rs:13:5\n    |\n LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     assert!(true, \"true message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:12:5\n+  --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     assert!(false, \"false message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:15:5\n+  --> $DIR/assertions_on_constants.rs:17:5\n    |\n LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     assert!(false, msg.to_uppercase());\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:18:5\n+  --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     assert!(B);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:21:5\n+  --> $DIR/assertions_on_constants.rs:23:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     assert!(C);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:22:5\n+  --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     assert!(C, \"C message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:24:5\n+  --> $DIR/assertions_on_constants.rs:26:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a756d1cf50659473e1c43bbaca97ed675b9c4755", "filename": "src/tools/clippy/tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -74,12 +74,12 @@ fn main() {\n             \"foo\"\n         }\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_static_str()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_static_str()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) });\n     }\n \n     //Issue #3839"}, {"sha": "6dc796f5cee37d7e4effecde55e3775344710dc8", "filename": "src/tools/clippy/tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -34,31 +34,31 @@ error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:77:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:81:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_static_str()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:86:16"}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -36,7 +36,7 @@ impl From<Option<String>> for Invalid {\n     fn from(s: Option<String>) -> Invalid {\n         let s = s.unwrap();\n         if !s.is_empty() {\n-            panic!(42);\n+            panic!(\"42\");\n         } else if s.parse::<u32>().unwrap() != 42 {\n             panic!(\"{:?}\", s);\n         }"}, {"sha": "f787b30bdabc557641a968518485a53abcb72b7a", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87b269ab6654ddcaed43933ebcd3754d000117b7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr?ref=87b269ab6654ddcaed43933ebcd3754d000117b7", "patch": "@@ -59,8 +59,8 @@ note: potential failure(s)\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n LL |         if !s.is_empty() {\n-LL |             panic!(42);\n-   |             ^^^^^^^^^^^\n+LL |             panic!(\"42\");\n+   |             ^^^^^^^^^^^^^\n LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);"}]}