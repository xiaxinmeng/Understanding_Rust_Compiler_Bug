{"sha": "426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNmEzZWUxZTdhOTgzMmQ5ZjNjZDFhYzBhYmEwYmNmNWEzY2FhMGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-02T10:43:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-02T10:43:44Z"}, "message": "Rustup", "tree": {"sha": "9751ebcdfb80c876259baeeef46eb8df39dd892a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9751ebcdfb80c876259baeeef46eb8df39dd892a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "html_url": "https://github.com/rust-lang/rust/commit/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67701e00629ff2a0bb5a3b75628d23e102a95348", "url": "https://api.github.com/repos/rust-lang/rust/commits/67701e00629ff2a0bb5a3b75628d23e102a95348", "html_url": "https://github.com/rust-lang/rust/commit/67701e00629ff2a0bb5a3b75628d23e102a95348"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "a93b53270bdf1d2fbca6d68f4a5987bafdc09506", "filename": "examples/box_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fbox_vec.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -1,7 +1,6 @@\n #![feature(plugin)]\n \n-#[plugin]\n-extern crate clippy;\n+#![plugin(clippy)]\n \n pub fn test(foo: Box<Vec<bool>>) {\n     println!(\"{:?}\", foo.get(0))"}, {"sha": "d4c543b8e9f0288f3f9ee07accc3767ea5088ed0", "filename": "examples/dlist.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fdlist.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -1,15 +1,14 @@\n #![feature(plugin)]\n \n-#[plugin]\n-extern crate clippy;\n+#![plugin(clippy)]\n \n extern crate collections;\n-use collections::dlist::DList;\n+use collections::linked_list::LinkedList;\n \n-pub fn test(foo: DList<uint>) {\n+pub fn test(foo: LinkedList<uint>) {\n     println!(\"{:?}\", foo)\n }\n \n fn main(){\n-    test(DList::new());\n+    test(LinkedList::new());\n }\n\\ No newline at end of file"}, {"sha": "255bea7d73f21596dd5aa1f118932e13e27041df", "filename": "examples/match_if_let.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fmatch_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Fmatch_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmatch_if_let.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -1,7 +1,6 @@\n #![feature(plugin)]\n \n-#[plugin]\n-extern crate clippy;\n+#![plugin(clippy)]\n \n fn main(){\n     let x = Some(1u);\n@@ -19,4 +18,4 @@ fn main(){\n         (2...3, 7...9) => println!(\"{:?}\", z),\n         _ => {}\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3ebb354142a0b3bee7bf0efd2d1516296a823b94", "filename": "examples/toplevel_ref_arg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/examples%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Ftoplevel_ref_arg.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -1,7 +1,6 @@\n #![feature(plugin)]\n \n-#[plugin]\n-extern crate clippy;\n+#![plugin(clippy)]\n \n fn the_answer(ref mut x: u8) {\n   *x = 42;"}, {"sha": "b3f395e5a135c784d425e270785282c30abc6b7e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -23,7 +23,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::MiscPass as LintPassObject);\n     reg.register_lint_pass(box misc::StrToStringPass as LintPassObject);\n     reg.register_lint_pass(box misc::TopLevelRefPass as LintPassObject);\n-    reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::DLIST,\n+    reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG]);\n }"}, {"sha": "dceae401a2e2637c80de975be75f154bfba43d4b", "filename": "src/types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "patch": "@@ -12,8 +12,8 @@ pub struct TypePass;\n \n declare_lint!(pub BOX_VEC, Warn,\n               \"Warn on usage of Box<Vec<T>>\");\n-declare_lint!(pub DLIST, Warn,\n-              \"Warn on usage of DList\");\n+declare_lint!(pub LINKEDLIST, Warn,\n+              \"Warn on usage of LinkedList\");\n \n /// Matches a type with a provided string, and returns its type parameters if successful\n pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]> {\n@@ -48,7 +48,7 @@ pub fn span_note_and_lint(cx: &Context, lint: &'static Lint, span: Span, msg: &s\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, DLIST)\n+        lint_array!(BOX_VEC, LINKEDLIST)\n     }\n \n     fn check_ty(&mut self, cx: &Context, ty: &ast::Ty) {\n@@ -66,17 +66,17 @@ impl LintPass for TypePass {\n           });\n         {\n             // In case stuff gets moved around\n-            use collections::dlist::DList as DL1;\n-            use std::collections::dlist::DList as DL2;\n-            use std::collections::DList as DL3;\n+            use collections::linked_list::LinkedList as DL1;\n+            use std::collections::linked_list::LinkedList as DL2;\n+            use std::collections::linked_list::LinkedList as DL3;\n         }\n-        let dlists = [vec![\"std\",\"collections\",\"dlist\",\"DList\"],\n-                      vec![\"std\",\"collections\",\"DList\"],\n-                      vec![\"collections\",\"dlist\",\"DList\"]];\n+        let dlists = [vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n+                      vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n+                      vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n         for path in dlists.iter() {\n             if match_ty_unwrap(ty, path.as_slice()).is_some() {\n-                span_note_and_lint(cx, DLIST, ty.span,\n-                                   \"I see you're using a DList! Perhaps you meant some other data structure?\",\n+                span_note_and_lint(cx, LINKEDLIST, ty.span,\n+                                   \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                                    \"A RingBuf might work.\");\n                 return;\n             }"}]}