{"sha": "2f3201a64c43762052bc13022ddb5695c11ea516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzIwMWE2NGM0Mzc2MjA1MmJjMTMwMjJkZGI1Njk1YzExZWE1MTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T18:36:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T19:42:24Z"}, "message": "Reinstate commit 9f0eaa65817303b8768c80454734144c176fda43 with sufficient fixes to hopefully not break tinderboxes.", "tree": {"sha": "46c5a58517b2d09c3fa5bf5abb140e5b6a5f95ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c5a58517b2d09c3fa5bf5abb140e5b6a5f95ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3201a64c43762052bc13022ddb5695c11ea516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3201a64c43762052bc13022ddb5695c11ea516", "html_url": "https://github.com/rust-lang/rust/commit/2f3201a64c43762052bc13022ddb5695c11ea516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3201a64c43762052bc13022ddb5695c11ea516/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615b1774a4fda062f757f679e45d87b055a6e110", "url": "https://api.github.com/repos/rust-lang/rust/commits/615b1774a4fda062f757f679e45d87b055a6e110", "html_url": "https://github.com/rust-lang/rust/commit/615b1774a4fda062f757f679e45d87b055a6e110"}], "stats": {"total": 167, "additions": 150, "deletions": 17}, "files": [{"sha": "591dfd71467c2bcb14fa961344521edaddd3e7ed", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 138, "deletions": 10, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=2f3201a64c43762052bc13022ddb5695c11ea516", "patch": "@@ -2,6 +2,7 @@ import std._io.stdio_reader;\n import std._str;\n import std.map;\n import std.map.hashmap;\n+import util.common;\n \n fn new_str_hash[V]() -> map.hashmap[str,V] {\n     let map.hashfn[str] hasher = _str.hash;\n@@ -95,6 +96,80 @@ fn new_reader(stdio_reader rdr, str filename) -> reader\n     keywords.insert(\"ret\", token.RET());\n     keywords.insert(\"be\", token.BE());\n \n+    keywords.insert(\"fail\", token.FAIL());\n+    keywords.insert(\"drop\", token.DROP());\n+\n+    keywords.insert(\"type\", token.TYPE());\n+    keywords.insert(\"check\", token.CHECK());\n+    keywords.insert(\"claim\", token.CLAIM());\n+    keywords.insert(\"prove\", token.PROVE());\n+\n+    keywords.insert(\"io\", token.IO());\n+    keywords.insert(\"state\", token.STATE());\n+    keywords.insert(\"unsafe\", token.UNSAFE());\n+\n+    keywords.insert(\"native\", token.NATIVE());\n+    keywords.insert(\"mutable\", token.MUTABLE());\n+    keywords.insert(\"auto\", token.AUTO());\n+\n+    keywords.insert(\"fn\", token.FN());\n+    keywords.insert(\"iter\", token.ITER());\n+\n+    keywords.insert(\"import\", token.IMPORT());\n+    keywords.insert(\"export\", token.EXPORT());\n+\n+    keywords.insert(\"let\", token.LET());\n+\n+    keywords.insert(\"log\", token.LOG());\n+    keywords.insert(\"spawn\", token.SPAWN());\n+    keywords.insert(\"thread\", token.THREAD());\n+    keywords.insert(\"yield\", token.YIELD());\n+    keywords.insert(\"join\", token.JOIN());\n+\n+    keywords.insert(\"bool\", token.BOOL());\n+\n+    keywords.insert(\"int\", token.INT());\n+    keywords.insert(\"uint\", token.UINT());\n+    keywords.insert(\"float\", token.FLOAT());\n+\n+    keywords.insert(\"char\", token.CHAR());\n+    keywords.insert(\"str\", token.STR());\n+\n+\n+    keywords.insert(\"rec\", token.REC());\n+    keywords.insert(\"tup\", token.TUP());\n+    keywords.insert(\"tag\", token.TAG());\n+    keywords.insert(\"vec\", token.VEC());\n+    keywords.insert(\"any\", token.ANY());\n+\n+    keywords.insert(\"obj\", token.OBJ());\n+\n+    keywords.insert(\"port\", token.PORT());\n+    keywords.insert(\"chan\", token.CHAN());\n+\n+    keywords.insert(\"task\", token.TASK());\n+\n+    keywords.insert(\"true\", token.LIT_BOOL(true));\n+    keywords.insert(\"false\", token.LIT_BOOL(false));\n+\n+    keywords.insert(\"in\", token.IN());\n+\n+    keywords.insert(\"as\", token.AS());\n+    keywords.insert(\"with\", token.WITH());\n+\n+    keywords.insert(\"bind\", token.BIND());\n+\n+    keywords.insert(\"u8\", token.MACH(common.ty_u8()));\n+    keywords.insert(\"u16\", token.MACH(common.ty_u16()));\n+    keywords.insert(\"u32\", token.MACH(common.ty_u32()));\n+    keywords.insert(\"u64\", token.MACH(common.ty_u64()));\n+    keywords.insert(\"i8\", token.MACH(common.ty_i8()));\n+    keywords.insert(\"i16\", token.MACH(common.ty_i16()));\n+    keywords.insert(\"i32\", token.MACH(common.ty_i32()));\n+    keywords.insert(\"i64\", token.MACH(common.ty_i64()));\n+    keywords.insert(\"f32\", token.MACH(common.ty_f32()));\n+    keywords.insert(\"f64\", token.MACH(common.ty_f64()));\n+\n     ret reader(rdr, filename, rdr.getc() as char, rdr.getc() as char,\n                1u, 1u, keywords, reserved);\n }\n@@ -125,6 +200,31 @@ fn is_bin_digit(char c) -> bool {\n     ret c == '0' || c == '1';\n }\n \n+fn dec_digit_val(char c) -> int {\n+    ret (c as int) - ('0' as int);\n+}\n+\n+fn hex_digit_val(char c) -> int {\n+    if (in_range(c, '0', '9')) {\n+        ret (c as int) - ('0' as int);\n+    }\n+\n+    if (in_range(c, 'a', 'f')) {\n+        ret (c as int) - ('a' as int);\n+    }\n+\n+    if (in_range(c, 'A', 'F')) {\n+        ret (c as int) - ('A' as int);\n+    }\n+\n+    fail;\n+}\n+\n+fn bin_digit_value(char c) -> int {\n+    if (c == 0) { ret 0; }\n+    ret 1;\n+}\n+\n fn is_whitespace(char c) -> bool {\n     ret c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n }\n@@ -159,27 +259,54 @@ fn next_token(reader rdr) -> token.token {\n     auto c = rdr.curr();\n \n     if (is_alpha(c)) {\n-        while (is_alpha(rdr.curr())) {\n-            c = rdr.curr();\n+        while (is_alpha(c) || c == '_') {\n             accum_str += (c as u8);\n             rdr.bump();\n+            c = rdr.curr();\n         }\n+\n+        auto kwds = rdr.get_keywords();\n+        if (kwds.contains_key(accum_str)) {\n+            ret kwds.get(accum_str);\n+        }\n+\n         ret token.IDENT(accum_str);\n     }\n \n     if (is_dec_digit(c)) {\n-        if (c == '0') {\n-            log \"fixme: leading zero\";\n-            fail;\n-        } else {\n-            while (is_dec_digit(c)) {\n+        auto n = rdr.next();\n+        if (c == '0' && n == 'x') {\n+            rdr.bump();\n+            rdr.bump();\n+            c = rdr.curr();\n+            while (is_hex_digit(c) || c == '_') {\n+                accum_int *= 16;\n+                accum_int += hex_digit_val(v);\n+                rdr.bump();\n                 c = rdr.curr();\n-                accum_int *= 10;\n-                accum_int += (c as int) - ('0' as int);\n+            }\n+        }\n+\n+        if (c == '0' && n == 'b') {\n+            rdr.bump();\n+            rdr.bump();\n+            c = rdr.curr();\n+            while (is_hex_digit(c) || c == '_') {\n+                accum_int *= 2;\n+                accum_int += bit_value(c);\n                 rdr.bump();\n+                c = rdr.curr();\n             }\n-            ret token.LIT_INT(accum_int);\n         }\n+\n+        while (is_dec_digit(c) || c == '_') {\n+            accum_int *= 10;\n+            accum_int += dec_digit_val(v);\n+            rdr.bump();\n+            c = rdr.curr();\n+        }\n+\n+        ret token.LIT_INT(accum_int);\n     }\n \n \n@@ -206,6 +333,7 @@ fn next_token(reader rdr) -> token.token {\n         case (']') { rdr.bump(); ret token.RBRACKET(); }\n         case ('@') { rdr.bump(); ret token.AT(); }\n         case ('#') { rdr.bump(); ret token.POUND(); }\n+        case ('_') { rdr.bump(); ret token.UNDERSCORE(); }\n \n         // Multi-byte tokens.\n         case ('=') {"}, {"sha": "2ec492fabecb2f5cf6d36cecda1f171950f498d1", "filename": "src/comp/fe/token.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Ffe%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Ffe%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Ftoken.rs?ref=2f3201a64c43762052bc13022ddb5695c11ea516", "patch": "@@ -275,8 +275,9 @@ fn to_str(token t) -> str {\n         }\n         case (LIT_CHAR(c)) {\n             // FIXME: escape and encode.\n-            auto tmp = \"\";\n-            tmp += (c as u8);\n+            auto tmp = \"'\";\n+            tmp += c as u8;\n+            tmp += '\\'' as u8;\n             ret tmp;\n         }\n \n@@ -285,7 +286,7 @@ fn to_str(token t) -> str {\n         }\n \n         /* Name components */\n-        case (IDENT(s)) { ret s; }\n+        case (IDENT(s)) { auto si = \"ident:\"; si += s; ret si; }\n         case (IDX(i)) { ret \"_\" + _int.to_str(i, 10u); }\n         case (UNDERSCORE()) { ret \"_\"; }\n "}, {"sha": "51d843b45e72302e1b352274ee22a5588fa8989a", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3201a64c43762052bc13022ddb5695c11ea516/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=2f3201a64c43762052bc13022ddb5695c11ea516", "patch": "@@ -1,18 +1,22 @@\n \n type ty_mach = tag( ty_i8(), ty_i16(), ty_i32(), ty_i64(),\n                     ty_u8(), ty_u16(), ty_u32(), ty_u64(),\n-                    ty_f32(), ty_f16() );\n+                    ty_f32(), ty_f64() );\n \n fn ty_mach_to_str(ty_mach tm) -> str {\n     alt (tm) {\n         case (ty_u8()) { ret \"u8\"; }\n-        case (ty_i8()) { ret \"i8\"; }\n         case (ty_u16()) { ret \"u16\"; }\n-        case (ty_i16()) { ret \"i16\"; }\n         case (ty_u32()) { ret \"u32\"; }\n-        case (ty_i32()) { ret \"i32\"; }\n         case (ty_u64()) { ret \"u64\"; }\n+\n+        case (ty_i8()) { ret \"i8\"; }\n+        case (ty_i16()) { ret \"i16\"; }\n+        case (ty_i32()) { ret \"i32\"; }\n         case (ty_i64()) { ret \"i64\"; }\n+\n+        case (ty_f32()) { ret \"f32\"; }\n+        case (ty_f64()) { ret \"f64\"; }\n     }\n }\n "}]}