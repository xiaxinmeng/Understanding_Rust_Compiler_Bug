{"sha": "cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNWM4NzdmYzBkMDE4NjhkZWUzM2VkNmNlNjI2M2IzMTMwN2Q2YTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T13:22:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T16:40:05Z"}, "message": "Statically allocate static dicts\n\nIssue #1436", "tree": {"sha": "013a739ad3c644091d2ed23607f0d1bde63cc9be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013a739ad3c644091d2ed23607f0d1bde63cc9be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "html_url": "https://github.com/rust-lang/rust/commit/cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a2d8495e3784a03871b69d686f4937c8396707", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a2d8495e3784a03871b69d686f4937c8396707", "html_url": "https://github.com/rust-lang/rust/commit/41a2d8495e3784a03871b69d686f4937c8396707"}], "stats": {"total": 133, "additions": 109, "deletions": 24}, "files": [{"sha": "2dd553a80d5bf1acc43074057aff18960f3699dc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "patch": "@@ -5689,6 +5689,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           discrim_symbols: new_int_hash::<str>(),\n           consts: new_int_hash::<ValueRef>(),\n           tydescs: ty::new_ty_hash(),\n+          dicts: map::mk_hashmap(hash_dict_id, {|a, b| a == b}),\n           module_data: new_str_hash::<ValueRef>(),\n           lltypes: ty::new_ty_hash(),\n           names: namegen(0),"}, {"sha": "3e3df30c9f3dbffed995872882a8019e577dff9c", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "patch": "@@ -93,6 +93,7 @@ type crate_ctxt =\n      discrim_symbols: hashmap<ast::node_id, str>,\n      consts: hashmap<ast::node_id, ValueRef>,\n      tydescs: hashmap<ty::t, @tydesc_info>,\n+     dicts: hashmap<dict_id, ValueRef>,\n      module_data: hashmap<str, ValueRef>,\n      lltypes: hashmap<ty::t, TypeRef>,\n      names: namegen,\n@@ -925,6 +926,24 @@ pure fn type_is_tup_like(cx: @block_ctxt, t: ty::t) -> bool {\n     ty::type_is_tup_like(tcx, t)\n }\n \n+// Used to identify cached dictionaries\n+tag dict_param {\n+    dict_param_dict(dict_id);\n+    dict_param_ty(ty::t);\n+}\n+type dict_id = @{impl_def: ast::def_id, params: [dict_param]};\n+fn hash_dict_id(&&dp: dict_id) -> uint {\n+    let h = syntax::ast_util::hash_def_id(dp.impl_def);\n+    for param in dp.params {\n+        h = h << 2u;\n+        alt param {\n+          dict_param_dict(d) { h += hash_dict_id(d); }\n+          dict_param_ty(t) { h += t; }\n+        }\n+    }\n+    h\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "daee48c86305831f15db0b5b3ad533015e71ee4a", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 89, "deletions": 24, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5c877fc0d01868dee33ed6ce6263b31307d6a9/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=cf5c877fc0d01868dee33ed6ce6263b31307d6a9", "patch": "@@ -5,8 +5,8 @@ import option::{some, none};\n import syntax::{ast, ast_util};\n import metadata::csearch;\n import back::link;\n-import lib::llvm;\n-import llvm::llvm::{ValueRef, TypeRef, LLVMGetParam};\n+import lib::llvm::llvm;\n+import llvm::{ValueRef, TypeRef, LLVMGetParam};\n \n fn trans_impl(cx: @local_ctxt, name: ast::ident, methods: [@ast::method],\n               id: ast::node_id, tps: [ast::ty_param]) {\n@@ -76,18 +76,18 @@ fn trans_dict_callee(bcx: @block_ctxt, e: @ast::expr, base: @ast::expr,\n }\n \n fn llfn_arg_tys(ft: TypeRef) -> {inputs: [TypeRef], output: TypeRef} {\n-    let out_ty = llvm::llvm::LLVMGetReturnType(ft);\n-    let n_args = llvm::llvm::LLVMCountParamTypes(ft);\n+    let out_ty = llvm::LLVMGetReturnType(ft);\n+    let n_args = llvm::LLVMCountParamTypes(ft);\n     let args = vec::init_elt(0 as TypeRef, n_args);\n-    unsafe { llvm::llvm::LLVMGetParamTypes(ft, vec::to_ptr(args)); }\n+    unsafe { llvm::LLVMGetParamTypes(ft, vec::to_ptr(args)); }\n     {inputs: args, output: out_ty}\n }\n \n fn trans_wrapper(ccx: @crate_ctxt, pt: [ast::ident],\n                  extra_tps: [ty::param_bounds], m: @ast::method) -> ValueRef {\n     let real_fn = ccx.item_ids.get(m.id);\n     let {inputs: real_args, output: real_ret} =\n-        llfn_arg_tys(llvm::llvm::LLVMGetElementType(val_ty(real_fn)));\n+        llfn_arg_tys(llvm::LLVMGetElementType(val_ty(real_fn)));\n     let extra_ptrs = [];\n     for tp in extra_tps {\n         extra_ptrs += [T_ptr(ccx.tydesc_type)];\n@@ -121,7 +121,7 @@ fn trans_wrapper(ccx: @crate_ctxt, pt: [ast::ident],\n         args += [load_inbounds(bcx, dict, [0, i as int])];\n     }\n     // the rest of the parameters\n-    let i = 3u, params_total = llvm::llvm::LLVMCountParamTypes(llfn_ty);\n+    let i = 3u, params_total = llvm::LLVMCountParamTypes(llfn_ty);\n     while i < params_total {\n         args += [LLVMGetParam(llfn, i)];\n         i += 1u;\n@@ -132,9 +132,84 @@ fn trans_wrapper(ccx: @crate_ctxt, pt: [ast::ident],\n     ret llfn;\n }\n \n-// FIXME[impl] cache these on the function level somehow\n+fn dict_is_static(tcx: ty::ctxt, origin: typeck::dict_origin) -> bool {\n+    alt origin {\n+      typeck::dict_static(_, ts, origs) {\n+        vec::all(ts, {|t| !ty::type_contains_params(tcx, t)}) &&\n+        vec::all(*origs, {|o| dict_is_static(tcx, o)})\n+      }\n+      typeck::dict_param(_, _) { false }\n+    }\n+}\n+\n fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n-    let bcx = bcx, ccx = bcx_ccx(bcx);\n+    alt origin {\n+      typeck::dict_static(impl_did, tys, sub_origins) {\n+        if dict_is_static(bcx_tcx(bcx), origin) {\n+            ret rslt(bcx, get_static_dict(bcx, origin));\n+        }\n+        let {bcx, ptrs} = get_dict_ptrs(bcx, origin);\n+        let pty = T_ptr(T_i8()), dict_ty = T_array(pty, vec::len(ptrs));\n+        let dict = alloca(bcx, dict_ty), i = 0;\n+        for ptr in ptrs {\n+            Store(bcx, PointerCast(bcx, ptr, pty), GEPi(bcx, dict, [0, i]));\n+            i += 1;\n+        }\n+        rslt(bcx, PointerCast(bcx, dict, T_ptr(T_dict())))\n+      }\n+      typeck::dict_param(n_param, n_bound) {\n+        rslt(bcx, option::get(bcx.fcx.lltyparams[n_param].dicts)[n_bound])\n+      }\n+    }\n+}\n+\n+fn dict_id(tcx: ty::ctxt, origin: typeck::dict_origin) -> dict_id {\n+    alt origin {\n+      typeck::dict_static(did, ts, origs) {\n+        let d_params = [], orig = 0u;\n+        if vec::len(ts) == 0u { ret @{impl_def: did, params: d_params}; }\n+        let impl_params = ty::lookup_item_type(tcx, did).bounds;\n+        vec::iter2(ts, *impl_params) {|t, bounds|\n+            d_params += [dict_param_ty(t)];\n+            for bound in *bounds {\n+                alt bound {\n+                  ty::bound_iface(_) {\n+                    d_params += [dict_param_dict(dict_id(tcx, origs[orig]))];\n+                    orig += 1u;\n+                  }\n+                }\n+            }\n+        }\n+        @{impl_def: did, params: d_params}\n+      }\n+    }\n+}\n+\n+fn get_static_dict(bcx: @block_ctxt, origin: typeck::dict_origin)\n+    -> ValueRef {\n+    let ccx = bcx_ccx(bcx);\n+    let id = dict_id(ccx.tcx, origin);\n+    alt ccx.dicts.find(id) {\n+      some(d) { ret d; }\n+      none. {}\n+    }\n+    let ptrs = C_struct(get_dict_ptrs(bcx, origin).ptrs);\n+    let name = ccx.names.next(\"dict\");\n+    let gvar = str::as_buf(name, {|buf|\n+        llvm::LLVMAddGlobal(ccx.llmod, val_ty(ptrs), buf)\n+    });\n+    llvm::LLVMSetGlobalConstant(gvar, lib::llvm::True);\n+    llvm::LLVMSetInitializer(gvar, ptrs);\n+    llvm::LLVMSetLinkage(gvar,\n+                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    let cast = llvm::LLVMConstPointerCast(gvar, T_ptr(T_dict()));\n+    ccx.dicts.insert(id, cast);\n+    cast\n+}\n+\n+fn get_dict_ptrs(bcx: @block_ctxt, origin: typeck::dict_origin)\n+    -> {bcx: @block_ctxt, ptrs: [ValueRef]} {\n+    let ccx = bcx_ccx(bcx);\n     alt origin {\n       typeck::dict_static(impl_did, tys, sub_origins) {\n         let vtable = if impl_did.crate == ast::local_crate {\n@@ -144,9 +219,9 @@ fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n             get_extern_const(ccx.externs, ccx.llmod, name, T_ptr(T_i8()))\n         };\n         let impl_params = ty::lookup_item_type(ccx.tcx, impl_did).bounds;\n-        let ptrs = [vtable], i = 0u, origin = 0u, ti = none;\n-        for param in *impl_params {\n-            let rslt = get_tydesc(bcx, tys[i], false, tps_normal, ti).result;\n+        let ptrs = [vtable], origin = 0u, ti = none, bcx = bcx;\n+        vec::iter2(*impl_params, tys) {|param, ty|\n+            let rslt = get_tydesc(bcx, ty, true, tps_normal, ti).result;\n             ptrs += [rslt.val];\n             bcx = rslt.bcx;\n             for bound in *param {\n@@ -160,18 +235,8 @@ fn get_dict(bcx: @block_ctxt, origin: typeck::dict_origin) -> result {\n                   _ {}\n                 }\n             }\n-            i += 1u;\n         }\n-        let pty = T_ptr(T_i8()), dict_ty = T_array(pty, vec::len(ptrs));\n-        let dict = alloca(bcx, dict_ty), i = 0;\n-        for ptr in ptrs {\n-            Store(bcx, PointerCast(bcx, ptr, pty), GEPi(bcx, dict, [0, i]));\n-            i += 1;\n-        }\n-        rslt(bcx, PointerCast(bcx, dict, T_ptr(T_dict())))\n-      }\n-      typeck::dict_param(n_param, n_bound) {\n-        rslt(bcx, option::get(bcx.fcx.lltyparams[n_param].dicts)[n_bound])\n+        {bcx: bcx, ptrs: ptrs}\n       }\n     }\n-}\n\\ No newline at end of file\n+}"}]}