{"sha": "0b8b14f6f50575a515e1f9472eff410c6e140e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOGIxNGY2ZjUwNTc1YTUxNWUxZjk0NzJlZmY0MTBjNmUxNDBlOWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-14T18:20:51Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:03Z"}, "message": "Eliminate ty::Generics::types()\n\nAnd with one final incanation, the specific kind iterators were banished from ty::Generics, never to be seen again!", "tree": {"sha": "d4961178d1e7fd05d0a9737a5aa4253adac445ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4961178d1e7fd05d0a9737a5aa4253adac445ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b8b14f6f50575a515e1f9472eff410c6e140e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8b14f6f50575a515e1f9472eff410c6e140e9c", "html_url": "https://github.com/rust-lang/rust/commit/0b8b14f6f50575a515e1f9472eff410c6e140e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b8b14f6f50575a515e1f9472eff410c6e140e9c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d557ff983f75ad21a90240dea0a80e318175b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/d557ff983f75ad21a90240dea0a80e318175b504", "html_url": "https://github.com/rust-lang/rust/commit/d557ff983f75ad21a90240dea0a80e318175b504"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "f6d13c2a72f3090a2f06c3bba34a5017839927e5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -1659,8 +1659,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     .entry(def_id)\n                     .or_insert_with(|| {\n                         tcx.generics_of(def_id)\n-                            .types_depr()\n-                            .map(|def| def.object_lifetime_default)\n+                            .params\n+                            .iter()\n+                            .filter_map(|param| {\n+                                param.get_type().and_then(|ty| Some(ty.object_lifetime_default))\n+                            })\n                             .collect()\n                     })\n             };"}, {"sha": "d0166393f018495c4456017b385e72cd7afddef0", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -378,9 +378,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.types_depr() {\n+        for param in generics.params.iter().filter_map(|param| param.get_type()) {\n             let name = param.name.to_string();\n-            let ty = trait_ref.substs.type_for_def(param);\n+            let ty = trait_ref.substs.type_for_def(&param);\n             let ty_str = ty.to_string();\n             flags.push((name.clone(), Some(ty_str.clone())));\n         }"}, {"sha": "9fdbac49496cd3d088d2f260d643808dac1802bf", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -291,8 +291,12 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_ref.def_id);\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n-        let generic_map = generics.types_depr().map(|param| {\n-            (param.name.to_string(), trait_ref.substs.type_for_def(param).to_string())\n+        let generic_map = generics.params.iter().filter_map(|param| {\n+            if let Some(ty) = param.get_type() {\n+                Some((ty.name.to_string(), trait_ref.substs.type_for_def(&ty).to_string()))\n+            } else {\n+                None\n+            }\n         }).collect::<FxHashMap<String, String>>();\n \n         let parser = Parser::new(&self.0);"}, {"sha": "4525bfc1baa2c2bf9f59f8547084180ac6c357e6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -847,16 +847,6 @@ impl<'a, 'gcx, 'tcx> Generics {\n         count\n     }\n \n-    pub fn types_depr(&self) -> impl DoubleEndedIterator<Item = &TypeParamDef> {\n-        self.params.iter().filter_map(|p| {\n-            if let GenericParamDef::Type(ty) = p {\n-                Some(ty)\n-            } else {\n-                None\n-            }\n-        })\n-    }\n-\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         if self.params.iter().any(|p| p.get_type().is_some()) {\n             return true;"}, {"sha": "0817ededfaaccfca22d06c6506c0a386577f5a40", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -25,6 +25,7 @@ use util::nodemap::{FxHashSet, FxHashMap};\n use std::cell::Cell;\n use std::fmt;\n use std::usize;\n+use std::iter;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n@@ -335,17 +336,21 @@ impl PrintContext {\n             }\n \n             if !verbose {\n-                if generics.types_depr().last().map_or(false, |def| def.has_default) {\n-                    if let Some(substs) = tcx.lift(&substs) {\n-                        let tps = substs.types().rev().skip(child_types);\n-                        for (def, actual) in generics.types_depr().rev().zip(tps) {\n-                            if !def.has_default {\n-                                break;\n-                            }\n-                            if tcx.type_of(def.def_id).subst(tcx, substs) != actual {\n-                                break;\n+                let mut type_params =\n+                    generics.params.iter().rev().filter_map(|param| param.get_type());\n+                if let Some(last_ty) = type_params.next() {\n+                    if last_ty.has_default {\n+                        if let Some(substs) = tcx.lift(&substs) {\n+                            let mut tps = substs.types().rev().skip(child_types);\n+                            let zipped = iter::once((last_ty, tps.next().unwrap()))\n+                                              .chain(type_params.zip(tps));\n+                            for (ty, actual) in zipped {\n+                                if !ty.has_default ||\n+                                        tcx.type_of(ty.def_id).subst(tcx, substs) != actual {\n+                                    break;\n+                                }\n+                                num_supplied_defaults += 1;\n                             }\n-                            num_supplied_defaults += 1;\n                         }\n                     }\n                 }"}, {"sha": "2463e571436e31fd32fe9a48c2d7e1d83f9eaf20", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -429,7 +429,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         });\n         names.extend(generics.params.iter().map(|param| {\n             match param {\n-                GenericParamDef::Lifetime(lt) => (Kind::Lifetime, lt.name.as_str()),\n+                GenericParamDef::Lifetime(lt) => (Kind::Lifetime, lt.name),\n                 GenericParamDef::Type(ty) => (Kind::Type, ty.name),\n             }\n         }));"}, {"sha": "e02ba76405740a7b8af892f7dafae65492eec3a6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -728,7 +728,9 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut error_found = false;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    for (impl_ty, trait_ty) in impl_m_generics.types_depr().zip(trait_m_generics.types_depr()) {\n+    let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| param.get_type());\n+    let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| param.get_type());\n+    for (impl_ty, trait_ty) in impl_m_type_params.zip(trait_m_type_params) {\n         if impl_ty.synthetic != trait_ty.synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);"}, {"sha": "9eb53f2fdaecfc76c4cbab51958a5773b725bce3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -370,14 +370,22 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     let mut substituted_predicates = Vec::new();\n \n     let generics = tcx.generics_of(def_id);\n-    let is_our_default = |def: &ty::TypeParamDef|\n-                            def.has_default && def.index >= generics.parent_count as u32;\n+    let is_our_default = |def: &ty::TypeParamDef| {\n+        def.has_default && def.index >= generics.parent_count as u32\n+    };\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n     // For example this forbids the declaration:\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n-    for d in generics.types_depr().cloned().filter(is_our_default).map(|p| p.def_id) {\n+    for d in generics.params.iter().filter_map(|param| {\n+        if let GenericParamDef::Type(ty) = *param {\n+            if is_our_default(&ty) {\n+                return Some(ty.def_id);\n+            }\n+        }\n+        None\n+    }) {\n         let ty = fcx.tcx.type_of(d);\n         // ignore dependent defaults -- that is, where the default of one type\n         // parameter includes another (e.g., <T, U = T>). In those cases, we can't"}, {"sha": "25766c553a5df9b3cc9660a0212a420f68c18a2d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8b14f6f50575a515e1f9472eff410c6e140e9c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0b8b14f6f50575a515e1f9472eff410c6e140e9c", "patch": "@@ -1800,12 +1800,16 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens.types_depr().filter_map(|tp| {\n-            if tp.name == keywords::SelfType.name().as_str() {\n-                assert_eq!(tp.index, 0);\n-                None\n+        let stripped_typarams = gens.params.iter().filter_map(|param| {\n+            if let ty::GenericParamDef::Type(ty) = param {\n+                if ty.name == keywords::SelfType.name().as_str() {\n+                    assert_eq!(ty.index, 0);\n+                    None\n+                } else {\n+                    Some(ty.clean(cx))\n+                }\n             } else {\n-                Some(tp.clean(cx))\n+                None\n             }\n         }).collect::<Vec<_>>();\n "}]}