{"sha": "fe07132c80be874f47ddebe1456d0c3af2d8e36b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMDcxMzJjODBiZTg3NGY0N2RkZWJlMTQ1NmQwYzNhZjJkOGUzNmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-25T21:21:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-25T21:21:04Z"}, "message": "Rollup merge of #62921 - iluuu1994:improve-help-for-method-disambiguation, r=estebank\n\nAdd method disambiguation help for trait implementation\n\nCloses #51046\nCloses #40471", "tree": {"sha": "06334a1f4bd81ed57d63224ed5ccae288723ae77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06334a1f4bd81ed57d63224ed5ccae288723ae77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe07132c80be874f47ddebe1456d0c3af2d8e36b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOh1BCRBK7hj4Ov3rIwAAdHIIAKEJJcBt/QXJknXjUOrn7xoZ\nxLk+pTKcjpoo2EmLyL0j6fJBZsxunOLE04j7R93wAG9eBnX8W/bNY/vPodGg3DKx\n26+aqrDq62SbsQDuqLEoQ4j0PovWY7Oj3YJYGNnX332ZHzcUIxrRdgj4Laibdk8C\negPFE8Bo6KiJS0ipKglDxcd8P8wzcScVu9itLkoSKBYv/9qA0kliHLEAvMWByIWc\nWl5EK+DMQOR8e4NeXdXc+lbS5lqi8our/VWq7uSRlbhUiwm96vJZ3BB+kMIlbFV8\nGmBdlFCQ1SaCnTiAzaFWWQnk/16J0tAHhAC1MGIWNyFjaYG0mkQWTekqGMeIVdc=\n=vV/B\n-----END PGP SIGNATURE-----\n", "payload": "tree 06334a1f4bd81ed57d63224ed5ccae288723ae77\nparent c9a766ab47fb0515316bc7e68b9c27d460196af4\nparent be510dbc35960c9d90f42811787eea2acef8ffe5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564089664 +0200\ncommitter GitHub <noreply@github.com> 1564089664 +0200\n\nRollup merge of #62921 - iluuu1994:improve-help-for-method-disambiguation, r=estebank\n\nAdd method disambiguation help for trait implementation\n\nCloses #51046\nCloses #40471\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe07132c80be874f47ddebe1456d0c3af2d8e36b", "html_url": "https://github.com/rust-lang/rust/commit/fe07132c80be874f47ddebe1456d0c3af2d8e36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe07132c80be874f47ddebe1456d0c3af2d8e36b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a766ab47fb0515316bc7e68b9c27d460196af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a766ab47fb0515316bc7e68b9c27d460196af4", "html_url": "https://github.com/rust-lang/rust/commit/c9a766ab47fb0515316bc7e68b9c27d460196af4"}, {"sha": "be510dbc35960c9d90f42811787eea2acef8ffe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be510dbc35960c9d90f42811787eea2acef8ffe5", "html_url": "https://github.com/rust-lang/rust/commit/be510dbc35960c9d90f42811787eea2acef8ffe5"}], "stats": {"total": 142, "additions": 123, "deletions": 19}, "files": [{"sha": "d48ba74f9f23f5f04639c237701b2bf8bae2715c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -10,7 +10,6 @@ use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::map as hir_map;\n-use rustc::hir::print;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n@@ -78,6 +77,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        let print_disambiguation_help = |\n+            err: &mut DiagnosticBuilder<'_>,\n+            trait_name: String,\n+        | {\n+            err.help(&format!(\n+                \"to disambiguate the method call, write `{}::{}({}{})` instead\",\n+                trait_name,\n+                item_name,\n+                if rcvr_ty.is_region_ptr() && args.is_some() {\n+                    if rcvr_ty.is_mutable_pointer() {\n+                        \"&mut \"\n+                    } else {\n+                        \"&\"\n+                    }\n+                } else {\n+                    \"\"\n+                },\n+                args.map(|arg| arg\n+                    .iter()\n+                    .map(|arg| self.tcx.sess.source_map().span_to_snippet(arg.span)\n+                        .unwrap_or_else(|_| \"...\".to_owned()))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \")\n+                ).unwrap_or_else(|| \"...\".to_owned())\n+            ));\n+        };\n+\n         let report_candidates = |\n             span: Span,\n             err: &mut DiagnosticBuilder<'_>,\n@@ -139,6 +165,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             err.note(&note_str);\n                         }\n+                        if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n+                            print_disambiguation_help(err, self.tcx.def_path_str(trait_ref.def_id));\n+                        }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n                         let item = match self.associated_item(\n@@ -163,24 +192,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        \"the candidate is defined in the trait `{}`\",\n                                        self.tcx.def_path_str(trait_did));\n                         }\n-                        err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n-                                          instead\",\n-                                          self.tcx.def_path_str(trait_did),\n-                                          item_name,\n-                                          if rcvr_ty.is_region_ptr() && args.is_some() {\n-                                              if rcvr_ty.is_mutable_pointer() {\n-                                                  \"&mut \"\n-                                              } else {\n-                                                  \"&\"\n-                                              }\n-                                          } else {\n-                                              \"\"\n-                                          },\n-                                          args.map(|arg| arg.iter()\n-                                              .map(|arg| print::to_string(print::NO_ANN,\n-                                                                          |s| s.print_expr(arg)))\n-                                              .collect::<Vec<_>>()\n-                                              .join(\", \")).unwrap_or_else(|| \"...\".to_owned())));\n+                        print_disambiguation_help(err, self.tcx.def_path_str(trait_did));\n                     }\n                 }\n             }"}, {"sha": "bb217bd182db664cd33ccfa0801f216b1668da30", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,11 +9,13 @@ note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n    |\n LL |     const ID: i32 = 1;\n    |     ^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Foo::ID(...)` instead\n note: candidate #2 is defined in an impl of the trait `Bar` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:14:5\n    |\n LL |     const ID: i32 = 3;\n    |     ^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Bar::ID(...)` instead\n \n error: aborting due to previous error\n "}, {"sha": "a58d16bfafb591757740b870b45b8851325e3d6a", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,11 +9,13 @@ note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Tes\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `Trait1::foo(...)` instead\n note: candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n   --> $DIR/E0034.rs:16:5\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `Trait2::foo(...)` instead\n \n error: aborting due to previous error\n "}, {"sha": "b06a6298a571c67e596d486585fa23e84f44f9b3", "filename": "src/test/ui/inference/inference_unstable_featured.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -5,7 +5,9 @@ LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |                    ^^^^^^^^^^^ multiple `ipu_flatten` found\n    |\n    = note: candidate #1 is defined in an impl of the trait `inference_unstable_iterator::IpuIterator` for the type `char`\n+   = help: to disambiguate the method call, write `inference_unstable_iterator::IpuIterator::ipu_flatten('x')` instead\n    = note: candidate #2 is defined in an impl of the trait `inference_unstable_itertools::IpuItertools` for the type `char`\n+   = help: to disambiguate the method call, write `inference_unstable_itertools::IpuItertools::ipu_flatten('x')` instead\n \n error: aborting due to previous error\n "}, {"sha": "4d0ff750c254c0c50209f4a3fd70432aa7fe684e", "filename": "src/test/ui/issues/issue-3702-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,11 +9,13 @@ note: candidate #1 is defined in an impl of the trait `ToPrimitive` for the type\n    |\n LL |     fn to_int(&self) -> isize { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `ToPrimitive::to_int(&self)` instead\n note: candidate #2 is defined in an impl of the trait `Add` for the type `isize`\n   --> $DIR/issue-3702-2.rs:14:5\n    |\n LL |     fn to_int(&self) -> isize { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Add::to_int(&self)` instead\n \n error: aborting due to previous error\n "}, {"sha": "9f46a722a508e1a09a0c1743e59a8bc9c703f7b8", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,7 +9,9 @@ note: candidate #1 is defined in an impl of the trait `Me2` for the type `usize`\n    |\n LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Me2::me(1_usize)` instead\n    = note: candidate #2 is defined in an impl of the trait `ambig_impl_2_lib::Me` for the type `usize`\n+   = help: to disambiguate the method call, write `ambig_impl_2_lib::Me::me(1_usize)` instead\n \n error: aborting due to previous error\n "}, {"sha": "22bf840660536c7d489cc9e12b2850b15091a191", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -0,0 +1,16 @@\n+trait A { fn foo(self); }\n+trait B { fn foo(self); }\n+\n+struct AB {}\n+\n+impl A for AB {\n+    fn foo(self) {}\n+}\n+\n+impl B for AB {\n+    fn foo(self) {}\n+}\n+\n+fn main() {\n+    AB {}.foo();  //~ ERROR E0034\n+}"}, {"sha": "0b3724e030fa49ae986a6ef7b56ab5b25caafa3e", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -0,0 +1,22 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:15:11\n+   |\n+LL |     AB {}.foo();\n+   |           ^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:7:5\n+   |\n+LL |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `A::foo(AB {})` instead\n+note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:11:5\n+   |\n+LL |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `B::foo(AB {})` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "0a96c1223da36a475e769f0aa1880a59bd3b2227", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -0,0 +1,16 @@\n+trait A { fn foo(); }\n+trait B { fn foo(); }\n+\n+struct AB {}\n+\n+impl A for AB {\n+    fn foo() {}\n+}\n+\n+impl B for AB {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    AB::foo();  //~ ERROR E0034\n+}"}, {"sha": "81c99b33c813e07ff30cbe4ba287372605ca8812", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -0,0 +1,22 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:5\n+   |\n+LL |     AB::foo();\n+   |     ^^^^^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:7:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `A::foo(...)` instead\n+note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:11:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `B::foo(...)` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "dc8aef250373946452bcf34b4e67f554fc4c9561", "filename": "src/test/ui/methods/method-ambig-two-traits-with-default-method.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,11 +9,13 @@ note: candidate #1 is defined in an impl of the trait `Foo` for the type `usize`\n    |\n LL | trait Foo { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Foo::method(1_usize)` instead\n note: candidate #2 is defined in an impl of the trait `Bar` for the type `usize`\n   --> $DIR/method-ambig-two-traits-with-default-method.rs:6:13\n    |\n LL | trait Bar { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `Bar::method(1_usize)` instead\n \n error: aborting due to previous error\n "}, {"sha": "283ef8fcba7a4e58cf5dd134eeebd6dd46770fb4", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -27,11 +27,13 @@ note: candidate #1 is defined in an impl of the trait `internal::X` for the type\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `internal::X::foo(x)` instead\n note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n    |\n LL |         fn foo(self) {}\n    |         ^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `nuisance_foo::NuisanceFoo::foo(x)` instead\n note: candidate #3 is defined in the trait `FinalFoo`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:57:5\n    |"}, {"sha": "cde7dd08249247200d18f268b4d31561f63e31e9", "filename": "src/test/ui/traits/trait-alias-ambiguous.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe07132c80be874f47ddebe1456d0c3af2d8e36b/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr?ref=fe07132c80be874f47ddebe1456d0c3af2d8e36b", "patch": "@@ -9,11 +9,13 @@ note: candidate #1 is defined in an impl of the trait `inner::A` for the type `u\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `inner::A::foo(t)` instead\n note: candidate #2 is defined in an impl of the trait `inner::B` for the type `u8`\n   --> $DIR/trait-alias-ambiguous.rs:11:9\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `inner::B::foo(t)` instead\n \n error: aborting due to previous error\n "}]}