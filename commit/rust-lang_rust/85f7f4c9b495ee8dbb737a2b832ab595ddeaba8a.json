{"sha": "85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZjdmNGM5YjQ5NWVlOGRiYjczN2EyYjgzMmFiNTk1ZGRlYWJhOGE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-19T11:24:59Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-19T11:24:59Z"}, "message": "Merge pull request #205 from Manishearth/const\n\nMul and Div for integers", "tree": {"sha": "221c69c45fa973fc01f171c3220ede9ba95e7d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221c69c45fa973fc01f171c3220ede9ba95e7d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "html_url": "https://github.com/rust-lang/rust/commit/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc917fef0d8cf61df50958701ba1f6b94f6a03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc917fef0d8cf61df50958701ba1f6b94f6a03f", "html_url": "https://github.com/rust-lang/rust/commit/bbc917fef0d8cf61df50958701ba1f6b94f6a03f"}, {"sha": "973d5e5c6b58d7b2404f52bbb8b5eb5918defd9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/973d5e5c6b58d7b2404f52bbb8b5eb5918defd9c", "html_url": "https://github.com/rust-lang/rust/commit/973d5e5c6b58d7b2404f52bbb8b5eb5918defd9c"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "5056cc27a543c0694ecf2022cbd907ff65acee2d", "filename": "src/consts.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "patch": "@@ -320,7 +320,7 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n \n     /// create `Some(Vec![..])` of all constants, unless there is any\n     /// non-constant part\n-    fn multi<E: Deref<Target=Expr> + Sized>(&mut self, vec: &[E]) -> \n+    fn multi<E: Deref<Target=Expr> + Sized>(&mut self, vec: &[E]) ->\n             Option<Vec<Constant>> {\n         vec.iter().map(|elem| self.expr(elem))\n                   .collect::<Option<_>>()\n@@ -388,9 +388,8 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n                 match (l, r) {\n                     (ConstantByte(l8), ConstantByte(r8)) => if r8 > l8 {\n                         None } else { Some(ConstantByte(l8 - r8)) },\n-                    (ConstantInt(l64, lty), ConstantInt(r64, rty)) => {\n-                        let (ln, rn) = (is_negative(lty), is_negative(rty));\n-                        match (ln, rn) {\n+                    (ConstantInt(l64, lty), ConstantInt(r64, rty)) =>\n+                        match (is_negative(lty), is_negative(rty)) {\n                             (false, false) => sub_int(l64, lty, r64, rty, r64 > l64),\n                             (true, true) => sub_int(l64, lty, r64, rty, l64 > r64),\n                             (true, false) => unify_int_type(lty, rty, Minus)\n@@ -399,12 +398,11 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n                             (false, true) => unify_int_type(lty, rty, Plus)\n                                 .and_then(|ty| l64.checked_add(r64).map(\n                                     |v| ConstantInt(v, ty))),\n-                        }\n-                    },\n+                        },\n                     _ => None,\n                 }),\n-            //BiMul,\n-            //BiDiv,\n+            BiMul => self.divmul(left, right, u64::checked_mul),\n+            BiDiv => self.divmul(left, right, u64::checked_div),\n             //BiRem,\n             BiAnd => self.short_circuit(left, right, false),\n             BiOr => self.short_circuit(left, right, true),\n@@ -425,6 +423,20 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n         }\n     }\n \n+    fn divmul<F>(&mut self, left: &Expr, right: &Expr, f: F)\n+            -> Option<Constant> where F: Fn(u64, u64) -> Option<u64> {\n+        self.binop_apply(left, right, |l, r|\n+            match (l, r) {\n+                (ConstantInt(l64, lty), ConstantInt(r64, rty)) => {\n+                    f(l64, r64).and_then(|value|\n+                        unify_int_type(lty, rty, if is_negative(lty) ==\n+                                is_negative(rty) { Plus } else { Minus })\n+                            .map(|ty| ConstantInt(value, ty)))\n+                },\n+                _ => None,\n+            })\n+    }\n+\n     fn bitop<F>(&mut self, left: &Expr, right: &Expr, f: F)\n             -> Option<Constant> where F: Fn(u64, u64) -> u64 {\n         self.binop_apply(left, right, |l, r| match (l, r) {"}, {"sha": "55270cc6b515683c59ead309a11a6b70464436c7", "filename": "tests/consts.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "patch": "@@ -40,6 +40,8 @@ fn check(expect: Constant, expr: &Expr) {\n const TRUE : Constant = ConstantBool(true);\n const FALSE : Constant = ConstantBool(false);\n const ZERO : Constant = ConstantInt(0, UnsuffixedIntLit(Plus));\n+const ONE : Constant = ConstantInt(1, UnsuffixedIntLit(Plus));\n+const TWO : Constant = ConstantInt(2, UnsuffixedIntLit(Plus));\n \n #[test]\n fn test_lit() {\n@@ -56,10 +58,17 @@ fn test_ops() {\n     check(FALSE, &binop(BiAnd, lit(LitBool(false)), lit(LitBool(true))));\n \n     let litzero = lit(LitInt(0, UnsuffixedIntLit(Plus)));\n+    let litone = lit(LitInt(1, UnsuffixedIntLit(Plus)));\n     check(TRUE, &binop(BiEq, litzero.clone(), litzero.clone()));\n     check(TRUE, &binop(BiGe, litzero.clone(), litzero.clone()));\n     check(TRUE, &binop(BiLe, litzero.clone(), litzero.clone()));\n     check(FALSE, &binop(BiNe, litzero.clone(), litzero.clone()));\n     check(FALSE, &binop(BiGt, litzero.clone(), litzero.clone()));\n     check(FALSE, &binop(BiLt, litzero.clone(), litzero.clone()));\n+\n+    check(ZERO, &binop(BiAdd, litzero.clone(), litzero.clone()));\n+    check(TWO, &binop(BiAdd, litone.clone(), litone.clone()));\n+    check(ONE, &binop(BiSub, litone.clone(), litzero.clone()));\n+    check(ONE, &binop(BiMul, litone.clone(), litone.clone()));\n+    check(ONE, &binop(BiDiv, litone.clone(), litone.clone()));\n }"}]}