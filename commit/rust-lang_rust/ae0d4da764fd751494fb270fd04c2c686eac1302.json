{"sha": "ae0d4da764fd751494fb270fd04c2c686eac1302", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMGQ0ZGE3NjRmZDc1MTQ5NGZiMjcwZmQwNGMyYzY4NmVhYzEzMDI=", "commit": {"author": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-05-22T18:47:11Z"}, "committer": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-05-22T18:47:11Z"}, "message": "Fix invalid syntax in `from_iter_instead_of_collect` suggestion with \"as Trait\"", "tree": {"sha": "379acc2409d67ab4573835fae518bbb5736506f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379acc2409d67ab4573835fae518bbb5736506f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae0d4da764fd751494fb270fd04c2c686eac1302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0d4da764fd751494fb270fd04c2c686eac1302", "html_url": "https://github.com/rust-lang/rust/commit/ae0d4da764fd751494fb270fd04c2c686eac1302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae0d4da764fd751494fb270fd04c2c686eac1302/comments", "author": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f694f85ab379f459f9fbe7f96c4bbfc8edb3a094", "url": "https://api.github.com/repos/rust-lang/rust/commits/f694f85ab379f459f9fbe7f96c4bbfc8edb3a094", "html_url": "https://github.com/rust-lang/rust/commit/f694f85ab379f459f9fbe7f96c4bbfc8edb3a094"}], "stats": {"total": 115, "additions": 81, "deletions": 34}, "files": [{"sha": "b4188d9ed3095324a415fd7d501dabb97dccbb1c", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d4da764fd751494fb270fd04c2c686eac1302/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d4da764fd751494fb270fd04c2c686eac1302/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=ae0d4da764fd751494fb270fd04c2c686eac1302", "patch": "@@ -37,30 +37,43 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Exp\n }\n \n fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -> String {\n+    fn strip_angle_brackets(s: &str) -> Option<&str> {\n+        s.strip_prefix('<')?.strip_suffix('>')\n+    }\n+\n     let call_site = expr.span.source_callsite();\n     if_chain! {\n         if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n         let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n         if let Some((_, elements)) = snippet_split.split_last();\n \n         then {\n-            // is there a type specifier? (i.e.: like `<u32>` in `collections::BTreeSet::<u32>::`)\n-            if let Some(type_specifier) = snippet_split.iter().find(|e| e.starts_with('<') && e.ends_with('>')) {\n-                // remove the type specifier from the path elements\n-                let without_ts = elements.iter().filter_map(|e| {\n-                    if e == type_specifier { None } else { Some((*e).to_string()) }\n-                }).collect::<Vec<_>>();\n-                // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n-                format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n-            } else {\n-                // type is not explicitly specified so wildcards are needed\n-                // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n-                let ty_str = ty.to_string();\n-                let start = ty_str.find('<').unwrap_or(0);\n-                let end = ty_str.find('>').unwrap_or_else(|| ty_str.len());\n-                let nb_wildcard = ty_str[start..end].split(',').count();\n-                let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n-                format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+            if_chain! {\n+                if let [type_specifier, _] = snippet_split.as_slice();\n+                if let Some(type_specifier) = strip_angle_brackets(type_specifier);\n+                if let Some((type_specifier, ..)) = type_specifier.split_once(\" as \");\n+                then {\n+                    type_specifier.to_string()\n+                } else {\n+                    // is there a type specifier? (i.e.: like `<u32>` in `collections::BTreeSet::<u32>::`)\n+                    if let Some(type_specifier) = snippet_split.iter().find(|e| strip_angle_brackets(e).is_some()) {\n+                        // remove the type specifier from the path elements\n+                        let without_ts = elements.iter().filter_map(|e| {\n+                            if e == type_specifier { None } else { Some((*e).to_string()) }\n+                        }).collect::<Vec<_>>();\n+                        // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n+                        format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+                    } else {\n+                        // type is not explicitly specified so wildcards are needed\n+                        // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n+                        let ty_str = ty.to_string();\n+                        let start = ty_str.find('<').unwrap_or(0);\n+                        let end = ty_str.find('>').unwrap_or_else(|| ty_str.len());\n+                        let nb_wildcard = ty_str[start..end].split(',').count();\n+                        let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n+                        format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+                    }\n+                }\n             }\n         } else {\n             ty.to_string()"}, {"sha": "12db43b534361feb524ebaf57dd1c656eebd0040", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=ae0d4da764fd751494fb270fd04c2c686eac1302", "patch": "@@ -6,6 +6,20 @@\n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n use std::iter::FromIterator;\n \n+struct Foo(Vec<bool>);\n+\n+impl FromIterator<bool> for Foo {\n+    fn from_iter<T: IntoIterator<Item = bool>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+impl<'a> FromIterator<&'a bool> for Foo {\n+    fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {\n+        iter.into_iter().copied().collect::<Self>()\n+    }\n+}\n+\n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n     let _ = iter_expr.collect::<Vec<_>>();"}, {"sha": "f5ec190e0cdc512eaadb8c931c55d7df3e947c5e", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=ae0d4da764fd751494fb270fd04c2c686eac1302", "patch": "@@ -6,6 +6,20 @@\n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n use std::iter::FromIterator;\n \n+struct Foo(Vec<bool>);\n+\n+impl FromIterator<bool> for Foo {\n+    fn from_iter<T: IntoIterator<Item = bool>>(_: T) -> Self {\n+        todo!()\n+    }\n+}\n+\n+impl<'a> FromIterator<&'a bool> for Foo {\n+    fn from_iter<T: IntoIterator<Item = &'a bool>>(iter: T) -> Self {\n+        <Self as FromIterator<bool>>::from_iter(iter.into_iter().copied())\n+    }\n+}\n+\n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n     let _ = Vec::from_iter(iter_expr);"}, {"sha": "8f08ac8c3ff43c9686ddd479899c4ef3ce7a8380", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d4da764fd751494fb270fd04c2c686eac1302/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=ae0d4da764fd751494fb270fd04c2c686eac1302", "patch": "@@ -1,88 +1,94 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:11:13\n+  --> $DIR/from_iter_instead_of_collect.rs:19:9\n    |\n-LL |     let _ = Vec::from_iter(iter_expr);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n+LL |         <Self as FromIterator<bool>>::from_iter(iter.into_iter().copied())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter.into_iter().copied().collect::<Self>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:13:13\n+  --> $DIR/from_iter_instead_of_collect.rs:25:13\n+   |\n+LL |     let _ = Vec::from_iter(iter_expr);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:27:13\n    |\n LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:18:19\n+  --> $DIR/from_iter_instead_of_collect.rs:32:19\n    |\n LL |     assert_eq!(a, Vec::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:19:19\n+  --> $DIR/from_iter_instead_of_collect.rs:33:19\n    |\n LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:21:17\n+  --> $DIR/from_iter_instead_of_collect.rs:35:17\n    |\n LL |     let mut b = VecDeque::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:24:17\n+  --> $DIR/from_iter_instead_of_collect.rs:38:17\n    |\n LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:29:21\n+  --> $DIR/from_iter_instead_of_collect.rs:43:21\n    |\n LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:34:14\n+  --> $DIR/from_iter_instead_of_collect.rs:48:14\n    |\n LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:35:19\n+  --> $DIR/from_iter_instead_of_collect.rs:49:19\n    |\n LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:38:19\n+  --> $DIR/from_iter_instead_of_collect.rs:52:19\n    |\n LL |     let mut bts = BTreeSet::from_iter(0..3);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:42:17\n+  --> $DIR/from_iter_instead_of_collect.rs:56:17\n    |\n LL |         let _ = collections::BTreeSet::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:43:17\n+  --> $DIR/from_iter_instead_of_collect.rs:57:17\n    |\n LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:46:15\n+  --> $DIR/from_iter_instead_of_collect.rs:60:15\n    |\n LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:47:15\n+  --> $DIR/from_iter_instead_of_collect.rs:61:15\n    |\n LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n "}]}