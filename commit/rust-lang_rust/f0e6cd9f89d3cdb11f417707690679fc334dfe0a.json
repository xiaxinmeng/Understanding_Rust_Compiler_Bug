{"sha": "f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTZjZDlmODlkM2NkYjExZjQxNzcwNzY5MDY3OWZjMzM0ZGZlMGE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-20T17:18:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T11:26:32Z"}, "message": "Remove \"type parameter depends on const parameter\" error from resolution", "tree": {"sha": "ed221c5597539c9bbe40d00722ff097333c0d468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed221c5597539c9bbe40d00722ff097333c0d468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "html_url": "https://github.com/rust-lang/rust/commit/f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133cd2cfaf244c130e2e0d681090ca117bcba94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/133cd2cfaf244c130e2e0d681090ca117bcba94e", "html_url": "https://github.com/rust-lang/rust/commit/133cd2cfaf244c130e2e0d681090ca117bcba94e"}], "stats": {"total": 93, "additions": 21, "deletions": 72}, "files": [{"sha": "7634093fbefbac29bbbb8f0336bc92a40ed95011", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -367,16 +367,6 @@ impl<'a> Resolver<'a> {\n                     span, \"`Self` in type parameter default\".to_string());\n                 err\n             }\n-            ResolutionError::ConstParamDependentOnTypeParam => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0671,\n-                    \"const parameters cannot depend on type parameters\"\n-                );\n-                err.span_label(span, format!(\"const parameter depends on type parameter\"));\n-                err\n-            }\n         }\n     }\n "}, {"sha": "49f8e82a2d1b509c4167871ccdae7161d7769b95", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -1880,13 +1880,14 @@ fn main() {\n \"##,\n \n E0671: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n-```compile_fail,E0671\n+```compile_fail,E0740\n #![feature(const_generics)]\n \n-fn const_id<T, const N: T>() -> T { // error: const parameter\n-                                    // depends on type parameter\n+fn const_id<T, const N: T>() -> T { // error\n     N\n }\n ```"}, {"sha": "136ab1f0444fa87cc334f1d77b862042e32bf51a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -111,9 +111,6 @@ crate enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n-\n-    /// We forbid the use of type parameters as the types of const parameters.\n-    TyParamAsConstParamTy,\n }\n \n impl RibKind<'_> {\n@@ -128,8 +125,7 @@ impl RibKind<'_> {\n             | MacroDefinition(_) => false,\n             AssocItemRibKind\n             | ItemRibKind(_)\n-            | ForwardTyParamBanRibKind\n-            | TyParamAsConstParamTy => true,\n+            | ForwardTyParamBanRibKind => true,\n         }\n     }\n }\n@@ -483,18 +479,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n             default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n         }\n \n-        // We also ban access to type parameters for use as the types of const parameters.\n-        let mut const_ty_param_ban_rib = Rib::new(TyParamAsConstParamTy);\n-        const_ty_param_ban_rib.bindings.extend(generics.params.iter()\n-            .filter(|param| {\n-                if let GenericParamKind::Type { .. } = param.kind {\n-                    true\n-                } else {\n-                    false\n-                }\n-            })\n-            .map(|param| (Ident::with_dummy_span(param.ident.name), Res::Err)));\n-\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n@@ -513,15 +497,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n                 GenericParamKind::Const { ref ty } => {\n-                    self.ribs[TypeNS].push(const_ty_param_ban_rib);\n-\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n-\n                     self.visit_ty(ty);\n-\n-                    const_ty_param_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                 }\n             }\n         }"}, {"sha": "1cc21a54e3cff0ec9778a8c42ca21ee17ca8931d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -215,8 +215,6 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n-    /// Error E0671: const parameter cannot depend on type parameter.\n-    ConstParamDependentOnTypeParam,\n }\n \n // A minimal representation of a path segment. We use this in resolve because\n@@ -2169,15 +2167,6 @@ impl<'a> Resolver<'a> {\n             return Res::Err;\n         }\n \n-        // An invalid use of a type parameter as the type of a const parameter.\n-        if let TyParamAsConstParamTy = all_ribs[rib_index].kind {\n-            if record_used {\n-                self.report_error(span, ResolutionError::ConstParamDependentOnTypeParam);\n-            }\n-            assert_eq!(res, Res::Err);\n-            return Res::Err;\n-        }\n-\n         match res {\n             Res::Local(_) => {\n                 use ResolutionError::*;\n@@ -2186,7 +2175,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n-                        ForwardTyParamBanRibKind | TyParamAsConstParamTy => {\n+                        ForwardTyParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {\n@@ -2220,7 +2209,7 @@ impl<'a> Resolver<'a> {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind | AssocItemRibKind |\n                         ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n-                        ConstantItemRibKind | TyParamAsConstParamTy => {\n+                        ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }"}, {"sha": "78bd549ba791a456739aa62a60d2462aa4d8082f", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR const parameters cannot depend on type parameters\n+//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n \n fn main() {}"}, {"sha": "ba6f53e56840e3dfb4007e73fff513f791017e68", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -1,9 +1,3 @@\n-error[E0671]: const parameters cannot depend on type parameters\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n-   |\n-LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ const parameter depends on type parameter\n-\n error[E0658]: const generics are unstable\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n    |\n@@ -13,7 +7,13 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n+error[E0740]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                      ^ `T` doesn't derive both `PartialEq` and `Eq`\n+\n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0671.\n+Some errors have detailed explanations: E0658, E0740.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "b76209571b05cba8633f4f2606ee23bcc1071d5a", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -7,7 +7,6 @@\n // details.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR const parameters cannot depend on type parameters\n-//~^^ ERROR parameter `T` is never used\n+//~^ ERROR the types of const generic parameters must derive `PartialEq` and `Eq`\n \n fn main() {}"}, {"sha": "c86a09bef0b8d71922f9f55bb615b6d4c5ee2a19", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0e6cd9f89d3cdb11f417707690679fc334dfe0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=f0e6cd9f89d3cdb11f417707690679fc334dfe0a", "patch": "@@ -1,9 +1,3 @@\n-error[E0671]: const parameters cannot depend on type parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n-   |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ const parameter depends on type parameter\n-\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n@@ -12,15 +6,12 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n+error[E0740]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+   |                                  ^ `T` doesn't derive both `PartialEq` and `Eq`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0392, E0671.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0740`."}]}