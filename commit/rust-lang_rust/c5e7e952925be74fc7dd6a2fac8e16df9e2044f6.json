{"sha": "c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "node_id": "C_kwDOAAsO6NoAKGM1ZTdlOTUyOTI1YmU3NGZjN2RkNmEyZmFjOGUxNmRmOWUyMDQ0ZjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T20:58:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T20:58:55Z"}, "message": "Rollup merge of #95473 - lqd:macro-expansion, r=petrochenkov\n\ntrack individual proc-macro expansions in the self-profiler\n\nAs described in [this zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Macro.20expansion.20performance.20on.20complex.20macros/near/275063190), users don't currently have a lot of information to diagnose macro expansion performance issues. That comment suggests using the macro names to add further timing information.\n\nThis PR starts to do this for proc-macros which have the same issue, and performance problems happening in the wild in [this other zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Identifying.20proc-macro.20slowdowns) could be helped by such information.\n\nIt uses the available proc-macro name to track their individual expansions with self-profiling events.\n\nr? `@Aaron1011` who mentioned this idea originally", "tree": {"sha": "74472c12a12821573235732c3cbbf97bd9fdbcd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74472c12a12821573235732c3cbbf97bd9fdbcd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTK2PCRBK7hj4Ov3rIwAA4RoIAHvEox4Lb1gSn/SaHzeuLeOe\nYTGxXLqXTxLuvLQeOilxDXfr8/GVfyZd/MTiAGi7rtlYYTBFJ5EYgNJMuaMCbS1n\nFGxfZ8RZJZL0snOOToAYefRWXVEVqEQXoBtaeW+475g3BBlqI3s3pWSOQUV+s6Vj\n4j5Tuwmhp70GWzl9EsHBx7R8pjLYDfeUW3K8495dPGgRjRzNIjl4ZTT3AoLZN02q\nI7uv+4o9joIbeJXjy2f3hEpSNfqOiGApC1DMUeQ1aEcgLVGady9nfOpCf8oDVJe+\ncQnVYzUcqdV62Udl6q/o6enfb+OtN5g2p6PdF4gSbzBwu8j17b9G/n1Q1fPtyo4=\n=0Qry\n-----END PGP SIGNATURE-----\n", "payload": "tree 74472c12a12821573235732c3cbbf97bd9fdbcd2\nparent d2e1e6dc759ef6c56e68382a148ed7181ab3a18f\nparent 9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649192335 +0200\ncommitter GitHub <noreply@github.com> 1649192335 +0200\n\nRollup merge of #95473 - lqd:macro-expansion, r=petrochenkov\n\ntrack individual proc-macro expansions in the self-profiler\n\nAs described in [this zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Macro.20expansion.20performance.20on.20complex.20macros/near/275063190), users don't currently have a lot of information to diagnose macro expansion performance issues. That comment suggests using the macro names to add further timing information.\n\nThis PR starts to do this for proc-macros which have the same issue, and performance problems happening in the wild in [this other zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Identifying.20proc-macro.20slowdowns) could be helped by such information.\n\nIt uses the available proc-macro name to track their individual expansions with self-profiling events.\n\nr? `@Aaron1011` who mentioned this idea originally\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "html_url": "https://github.com/rust-lang/rust/commit/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "html_url": "https://github.com/rust-lang/rust/commit/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f"}, {"sha": "9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "html_url": "https://github.com/rust-lang/rust/commit/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "06a90ab05ac820e3ea0b467bfb127e4d9fc43b7c", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "patch": "@@ -1047,6 +1047,12 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expn_data().call_site\n     }\n \n+    /// Returns the current expansion kind's description.\n+    pub(crate) fn expansion_descr(&self) -> String {\n+        let expn_data = self.current_expansion.id.expn_data();\n+        expn_data.kind.descr()\n+    }\n+\n     /// Equivalent of `Span::def_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_def_site_ctxt(&self, span: Span) -> Span {"}, {"sha": "b4bae8ce5fbeb17fd03d57f3042d737c849e013d", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "patch": "@@ -24,6 +24,8 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -48,6 +50,8 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -97,17 +101,21 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n-        let server = proc_macro_server::Rustc::new(ecx);\n-        let stream = match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+        let stream = {\n+            let _timer =\n+                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n+            let server = proc_macro_server::Rustc::new(ecx);\n+            match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n+                Ok(stream) => stream,\n+                Err(e) => {\n+                    let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n+                    if let Some(s) = e.as_str() {\n+                        err.help(&format!(\"message: {}\", s));\n+                    }\n+                    err.emit();\n+                    return ExpandResult::Ready(vec![]);\n                 }\n-                err.emit();\n-                return ExpandResult::Ready(vec![]);\n             }\n         };\n "}]}