{"sha": "a59e155206ca596722a67e967848fa2d3e516e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWUxNTUyMDZjYTU5NjcyMmE2N2U5Njc4NDhmYTJkM2U1MTZlOGM=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-07T23:12:44Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-07T23:12:44Z"}, "message": "Tidy up calloc code", "tree": {"sha": "0ba0e6856a073852ecdeac745dc2d395f08c8b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba0e6856a073852ecdeac745dc2d395f08c8b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59e155206ca596722a67e967848fa2d3e516e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEELQoiL21itfwzY62qWM12+I31Y+AFAlyqg+wACgkQWM12+I31\nY+A1LwgArs4YLButIDH32eCzUkK55kEYUKp6XzYjS/GFX38NRIVyRErVWYr3hGuC\nwdE6y4MRGONfHG9HvYjmFSwh0PcBQ/qgmTMg7MUupIhhrh+Q7XrKHv0Hp2MPBm1J\nAyYW7x1A64mvnDbWkoJvVxyf06PQgBXkVbcx9VK58BP1/yQUinZFQPmyObs9G7dD\nrdvlSsslrYny+Vt53cYhgep1uzY3jvwTVLs9NohxBBfcT71XWr0C8nr7G92PELV9\n3zn1Lqbk5t//kfUnHaKldf7099vqJk/BaDsU4finRCrwxZrcedR4JgTVboWDsDYC\n45yiXVxK+F88n8rXoGDJ2NHZfchFrg==\n=fdk2\n-----END PGP SIGNATURE-----", "payload": "tree 0ba0e6856a073852ecdeac745dc2d395f08c8b6b\nparent d1d05c8b4127295717b6f893e22cf657b4dbf1db\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1554678764 +0200\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1554678764 +0200\n\nTidy up calloc code\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59e155206ca596722a67e967848fa2d3e516e8c", "html_url": "https://github.com/rust-lang/rust/commit/a59e155206ca596722a67e967848fa2d3e516e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59e155206ca596722a67e967848fa2d3e516e8c/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d05c8b4127295717b6f893e22cf657b4dbf1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d05c8b4127295717b6f893e22cf657b4dbf1db", "html_url": "https://github.com/rust-lang/rust/commit/d1d05c8b4127295717b6f893e22cf657b4dbf1db"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "2db23bd48c541144d4fcd8b1b5cfcf29cdbfa7ee", "filename": "src/fn_call.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a59e155206ca596722a67e967848fa2d3e516e8c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59e155206ca596722a67e967848fa2d3e516e8c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=a59e155206ca596722a67e967848fa2d3e516e8c", "patch": "@@ -95,25 +95,16 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             }\n             \"calloc\" => {\n                 let items = this.read_scalar(args[0])?.to_usize(this)?;\n-                let count = this.read_scalar(args[1])?.to_usize(this)?;\n-                let size = if let Some(size) = items.checked_add(count) {\n-                    size\n-                } else {\n-                    return err!(MachineError(format!(\n-                        \"calloc: overflow of items * count: {} * {}\",\n-                        items, count,\n-                    )));\n-                };\n-                if size == 0 {\n+                let len = this.read_scalar(args[1])?.to_usize(this)?;\n+                let bytes = items.checked_mul(len).ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n+\n+                if bytes== 0 {\n                     this.write_null(dest)?;\n                 } else {\n+                    let size = Size::from_bytes(bytes);\n                     let align = this.tcx.data_layout.pointer_align.abi;\n-                    let ptr = this.memory_mut()\n-                        .allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into())\n-                        .with_default_tag();\n-                    this.memory_mut()\n-                        .get_mut(ptr.alloc_id)?\n-                        .write_repeat(tcx, ptr, 0, Size::from_bytes(size))?;\n+                    let ptr = this.memory_mut().allocate(size, align, MiriMemoryKind::C.into()).with_default_tag();\n+                    this.memory_mut().get_mut(ptr.alloc_id)?.write_repeat(tcx, ptr, 0, size)?;\n                     this.write_scalar(Scalar::Ptr(ptr), dest)?;\n                 }\n             }"}]}