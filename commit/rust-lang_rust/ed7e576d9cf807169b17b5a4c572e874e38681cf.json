{"sha": "ed7e576d9cf807169b17b5a4c572e874e38681cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkN2U1NzZkOWNmODA3MTY5YjE3YjVhNGM1NzJlODc0ZTM4NjgxY2Y=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-01-12T20:02:59Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-01-17T14:41:26Z"}, "message": "Add a generic power function\n\nThe patch adds a `pow` function for types implementing `One`, `Mul` and\n`Clone` trait.\n\nThe patch also renames f32 and f64 pow into powf in order to still have\na way to easily have float powers. It uses llvms intrinsics.\n\nThe pow implementation for all num types uses the exponentiation by\nsquare.\n\nFixes bug #11499", "tree": {"sha": "02b3ccb929e3e47154f754f3a79508fba04bface", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b3ccb929e3e47154f754f3a79508fba04bface"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed7e576d9cf807169b17b5a4c572e874e38681cf", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7e576d9cf807169b17b5a4c572e874e38681cf", "html_url": "https://github.com/rust-lang/rust/commit/ed7e576d9cf807169b17b5a4c572e874e38681cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed7e576d9cf807169b17b5a4c572e874e38681cf/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdc81262a5d44f10e335384b5d69b938d6d729c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc81262a5d44f10e335384b5d69b938d6d729c", "html_url": "https://github.com/rust-lang/rust/commit/5fdc81262a5d44f10e335384b5d69b938d6d729c"}], "stats": {"total": 136, "additions": 82, "deletions": 54}, "files": [{"sha": "746e7f065cca98ce4520b4a7d561925158c7eaa2", "filename": "doc/guide-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/doc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/doc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-tasks.md?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -290,7 +290,7 @@ be distributed on the available cores.\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n     for num in range(start*100000, (start+1)*100000) {\n-        local_sum += (num as f64 + 1.0).pow(&-2.0);\n+        local_sum += (num as f64 + 1.0).powf(&-2.0);\n     }\n     local_sum\n }\n@@ -326,7 +326,7 @@ a single large vector of floats. Each task needs the full vector to perform its\n use extra::arc::Arc;\n \n fn pnorm(nums: &~[f64], p: uint) -> f64 {\n-    nums.iter().fold(0.0, |a,b| a+(*b).pow(&(p as f64)) ).pow(&(1.0 / (p as f64)))\n+    nums.iter().fold(0.0, |a,b| a+(*b).powf(&(p as f64)) ).powf(&(1.0 / (p as f64)))\n }\n \n fn main() {"}, {"sha": "c5b405a45aae6e1f8b19f07733188c0b4d186c97", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -653,19 +653,19 @@ mod test {\n \n         // f32\n         test(3.14159265359f32, (\"13176795\", \"4194304\"));\n-        test(2f32.pow(&100.), (\"1267650600228229401496703205376\", \"1\"));\n-        test(-2f32.pow(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n-        test(1.0 / 2f32.pow(&100.), (\"1\", \"1267650600228229401496703205376\"));\n+        test(2f32.powf(&100.), (\"1267650600228229401496703205376\", \"1\"));\n+        test(-2f32.powf(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n+        test(1.0 / 2f32.powf(&100.), (\"1\", \"1267650600228229401496703205376\"));\n         test(684729.48391f32, (\"1369459\", \"2\"));\n         test(-8573.5918555f32, (\"-4389679\", \"512\"));\n \n         // f64\n         test(3.14159265359f64, (\"3537118876014453\", \"1125899906842624\"));\n-        test(2f64.pow(&100.), (\"1267650600228229401496703205376\", \"1\"));\n-        test(-2f64.pow(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n+        test(2f64.powf(&100.), (\"1267650600228229401496703205376\", \"1\"));\n+        test(-2f64.powf(&100.), (\"-1267650600228229401496703205376\", \"1\"));\n         test(684729.48391f64, (\"367611342500051\", \"536870912\"));\n         test(-8573.5918555, (\"-4713381968463931\", \"549755813888\"));\n-        test(1.0 / 2f64.pow(&100.), (\"1\", \"1267650600228229401496703205376\"));\n+        test(1.0 / 2f64.powf(&100.), (\"1\", \"1267650600228229401496703205376\"));\n     }\n \n     #[test]"}, {"sha": "de33060896f0c848c0a89c1b8ae1edc4b927390a", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -349,8 +349,8 @@ pub fn write_boxplot(w: &mut io::Writer, s: &Summary, width_hint: uint) {\n     let (q1,q2,q3) = s.quartiles;\n \n     // the .abs() handles the case where numbers are negative\n-    let lomag = (10.0_f64).pow(&(s.min.abs().log10().floor()));\n-    let himag = (10.0_f64).pow(&(s.max.abs().log10().floor()));\n+    let lomag = (10.0_f64).powf(&(s.min.abs().log10().floor()));\n+    let himag = (10.0_f64).powf(&(s.max.abs().log10().floor()));\n \n     // need to consider when the limit is zero\n     let lo = if lomag == 0.0 {"}, {"sha": "e77348268c79e9fa9df5cff9079c145f5697ae76", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -409,7 +409,7 @@ impl Real for f32 {\n     fn recip(&self) -> f32 { 1.0 / *self }\n \n     #[inline]\n-    fn pow(&self, n: &f32) -> f32 { pow(*self, *n) }\n+    fn powf(&self, n: &f32) -> f32 { pow(*self, *n) }\n \n     #[inline]\n     fn sqrt(&self) -> f32 { sqrt(*self) }\n@@ -1265,7 +1265,7 @@ mod tests {\n     fn test_integer_decode() {\n         assert_eq!(3.14159265359f32.integer_decode(), (13176795u64, -22i16, 1i8));\n         assert_eq!((-8573.5918555f32).integer_decode(), (8779358u64, -10i16, -1i8));\n-        assert_eq!(2f32.pow(&100.0).integer_decode(), (8388608u64, 77i16, 1i8));\n+        assert_eq!(2f32.powf(&100.0).integer_decode(), (8388608u64, 77i16, 1i8));\n         assert_eq!(0f32.integer_decode(), (0u64, -150i16, 1i8));\n         assert_eq!((-0f32).integer_decode(), (0u64, -150i16, -1i8));\n         assert_eq!(INFINITY.integer_decode(), (8388608u64, 105i16, 1i8));"}, {"sha": "7a06ef2e1aff86a490d378a2b8e4d046bc7078f3", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -411,7 +411,7 @@ impl Real for f64 {\n     fn recip(&self) -> f64 { 1.0 / *self }\n \n     #[inline]\n-    fn pow(&self, n: &f64) -> f64 { pow(*self, *n) }\n+    fn powf(&self, n: &f64) -> f64 { pow(*self, *n) }\n \n     #[inline]\n     fn sqrt(&self) -> f64 { sqrt(*self) }\n@@ -1269,7 +1269,7 @@ mod tests {\n     fn test_integer_decode() {\n         assert_eq!(3.14159265359f64.integer_decode(), (7074237752028906u64, -51i16, 1i8));\n         assert_eq!((-8573.5918555f64).integer_decode(), (4713381968463931u64, -39i16, -1i8));\n-        assert_eq!(2f64.pow(&100.0).integer_decode(), (4503599627370496u64, 48i16, 1i8));\n+        assert_eq!(2f64.powf(&100.0).integer_decode(), (4503599627370496u64, 48i16, 1i8));\n         assert_eq!(0f64.integer_decode(), (0u64, -1075i16, 1i8));\n         assert_eq!((-0f64).integer_decode(), (0u64, -1075i16, -1i8));\n         assert_eq!(INFINITY.integer_decode(), (4503599627370496u64, 972i16, 1i8));"}, {"sha": "dbc7c67d97b9eaa9d3d538b70dce4d0b92f2891a", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -121,38 +121,6 @@ impl CheckedMul for int {\n     }\n }\n \n-/// Returns `base` raised to the power of `exponent`\n-pub fn pow(base: int, exponent: uint) -> int {\n-    if exponent == 0u {\n-        //Not mathemtically true if ~[base == 0]\n-        return 1;\n-    }\n-    if base == 0 { return 0; }\n-    let mut my_pow  = exponent;\n-    let mut acc     = 1;\n-    let mut multiplier = base;\n-    while(my_pow > 0u) {\n-        if my_pow % 2u == 1u {\n-            acc *= multiplier;\n-        }\n-        my_pow     /= 2u;\n-        multiplier *= multiplier;\n-    }\n-    return acc;\n-}\n-\n-#[test]\n-fn test_pow() {\n-    assert!((pow(0, 0u) == 1));\n-    assert!((pow(0, 1u) == 0));\n-    assert!((pow(0, 2u) == 0));\n-    assert!((pow(-1, 0u) == 1));\n-    assert!((pow(1, 0u) == 1));\n-    assert!((pow(-3, 2u) == 9));\n-    assert!((pow(-3, 3u) == -27));\n-    assert!((pow(4, 9u) == 262144));\n-}\n-\n #[test]\n fn test_overflows() {\n     assert!((::int::max_value > 0));"}, {"sha": "bcc95d6c48db2af6a2d576f71c231f7aef0ed3f1", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -185,9 +185,9 @@ pub trait Real: Signed\n     fn recip(&self) -> Self;\n \n     // Algebraic functions\n-\n     /// Raise a number to a power.\n-    fn pow(&self, n: &Self) -> Self;\n+    fn powf(&self, n: &Self) -> Self;\n+\n     /// Take the square root of a number.\n     fn sqrt(&self) -> Self;\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n@@ -263,17 +263,61 @@ pub trait Real: Signed\n     fn to_radians(&self) -> Self;\n }\n \n+/// Raises a value to the power of exp, using\n+/// exponentiation by squaring.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::num;\n+///\n+/// let sixteen = num::pow(2, 4u);\n+/// assert_eq!(sixteen, 16);\n+/// ```\n+#[inline]\n+pub fn pow<T: Clone+One+Mul<T, T>>(num: T, exp: uint) -> T {\n+    let one: uint = One::one();\n+    let num_one: T = One::one();\n+\n+    if exp.is_zero() { return num_one; }\n+    if exp == one { return num.clone(); }\n+\n+    let mut i: uint = exp;\n+    let mut v: T;\n+    let mut r: T = num_one;\n+\n+    // This if is to avoid cloning self.\n+    if (i & one) == one {\n+        r = r * num;\n+        i = i - one;\n+    }\n+\n+    i = i >> one;\n+    v = num * num;\n+\n+    while !i.is_zero() {\n+        if (i & one) == one {\n+            r = r * v;\n+            i = i - one;\n+        }\n+        i = i >> one;\n+        v = v * v;\n+    }\n+\n+    r\n+}\n+\n /// Raise a number to a power.\n ///\n /// # Example\n ///\n /// ```rust\n /// use std::num;\n ///\n-/// let sixteen: f64 = num::pow(2.0, 4.0);\n+/// let sixteen: f64 = num::powf(2.0, 4.0);\n /// assert_eq!(sixteen, 16.0);\n /// ```\n-#[inline(always)] pub fn pow<T: Real>(value: T, n: T) -> T { value.pow(&n) }\n+#[inline(always)] pub fn powf<T: Real>(value: T, n: T) -> T { value.powf(&n) }\n /// Take the square root of a number.\n #[inline(always)] pub fn sqrt<T: Real>(value: T) -> T { value.sqrt() }\n /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n@@ -1074,6 +1118,7 @@ pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n mod tests {\n     use prelude::*;\n     use super::*;\n+    use num;\n     use i8;\n     use i16;\n     use i32;\n@@ -1634,4 +1679,19 @@ mod tests {\n         assert_eq!(from_f32(5f32), Some(Value { x: 5 }));\n         assert_eq!(from_f64(5f64), Some(Value { x: 5 }));\n     }\n+\n+    #[test]\n+    fn test_pow() {\n+        fn assert_pow<T: Eq+Clone+One+Mul<T, T>>(num: T, exp: uint) -> () {\n+            assert_eq!(num::pow(num.clone(), exp),\n+                       range(1u, exp).fold(num.clone(), |acc, _| acc * num));\n+        }\n+\n+        assert_eq!(num::pow(3, 0), 1);\n+        assert_eq!(num::pow(5, 1), 5);\n+        assert_pow(-4, 2);\n+        assert_pow(8, 3);\n+        assert_pow(8, 5);\n+        assert_pow(2u64, 50);\n+    }\n }"}, {"sha": "2f1890b02333c4088f67fa14e340bb79f14af4fd", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -144,7 +144,7 @@ impl IndependentSample<f64> for GammaSmallShape {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         let Open01(u) = rng.gen::<Open01<f64>>();\n \n-        self.large_shape.ind_sample(rng) * num::pow(u, self.inv_shape)\n+        self.large_shape.ind_sample(rng) * num::powf(u, self.inv_shape)\n     }\n }\n impl IndependentSample<f64> for GammaLargeShape {"}, {"sha": "bf02bf204a53d1f99bf941db812d22ed60616615", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -31,10 +31,10 @@\n \n use clone::Clone;\n use kinds::Send;\n-use num::{Real, Round};\n use option::{Option, Some, None};\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicUint,Relaxed,Release,Acquire};\n+use uint;\n use vec;\n \n struct Node<T> {\n@@ -64,7 +64,7 @@ impl<T: Send> State<T> {\n                 2u\n             } else {\n                 // use next power of 2 as capacity\n-                2f64.pow(&((capacity as f64).log2().ceil())) as uint\n+                uint::next_power_of_two(capacity)\n             }\n         } else {\n             capacity"}, {"sha": "7abbbdd278cff0a70eaaed680ee218a94f63e0b1", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7e576d9cf807169b17b5a4c572e874e38681cf/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=ed7e576d9cf807169b17b5a4c572e874e38681cf", "patch": "@@ -62,7 +62,7 @@ fn main() {\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n \n     let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n-            use std::int::pow;\n+            use std::num::pow;\n             let iterations = pow(2, (max_depth - depth + min_depth) as uint);\n             do Future::spawn {\n                 let mut chk = 0;"}]}