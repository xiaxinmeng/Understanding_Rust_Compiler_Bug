{"sha": "cb863390f23bc2eac6561d55def9bd3ba54605fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiODYzMzkwZjIzYmMyZWFjNjU2MWQ1NWRlZjliZDNiYTU0NjA1ZmM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-15T17:57:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-15T18:21:23Z"}, "message": "Handle self/super/crate in PathSegment as NameRef", "tree": {"sha": "b19b39d9b6231e8857a4096cc803cf35e2ddbe81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19b39d9b6231e8857a4096cc803cf35e2ddbe81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb863390f23bc2eac6561d55def9bd3ba54605fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb863390f23bc2eac6561d55def9bd3ba54605fc", "html_url": "https://github.com/rust-lang/rust/commit/cb863390f23bc2eac6561d55def9bd3ba54605fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb863390f23bc2eac6561d55def9bd3ba54605fc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "html_url": "https://github.com/rust-lang/rust/commit/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a"}], "stats": {"total": 512, "additions": 258, "deletions": 254}, "files": [{"sha": "1c893cd5c94eb8c1cfaf5b573ab9107131654500", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -1817,9 +1817,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.7.0\"\n+version = \"1.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7758fccf6038d5c368a17c7224abc85d6508d5ae266d5a3de25faac3cc168509\"\n+checksum = \"e33a2183403af89252547c4219a06a6cc8aef6302fee67e10e8431866af3ee72\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "46c64d35c22354d8ff345e44f1c4a7957ee0e357", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -1,5 +1,5 @@\n [workspace]\n-members = [ \"xtask/\", \"lib/*\", \"crates/*\" ]\n+members = [\"xtask/\", \"lib/*\", \"crates/*\"]\n \n [profile.dev]\n # Disabling debug info speeds up builds a bunch,"}, {"sha": "ab213e04c5728fef0667f55f13132965efedb466", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -750,6 +750,7 @@ to_def_impls![\n     (crate::ConstParam, ast::ConstParam, const_param_to_def),\n     (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n+    (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),\n ];\n "}, {"sha": "9bf60c72af80aba94f73e96536db02ad3af9aa9e", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -114,6 +114,15 @@ impl SourceToDefCtx<'_, '_> {\n         let pat_id = source_map.node_pat(src.as_ref())?;\n         Some((container, pat_id))\n     }\n+    pub(super) fn self_param_to_def(\n+        &mut self,\n+        src: InFile<ast::SelfParam>,\n+    ) -> Option<(DefWithBodyId, PatId)> {\n+        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n+        let (_body, source_map) = self.db.body_with_source_map(container);\n+        let pat_id = source_map.node_self_param(src.as_ref())?;\n+        Some((container, pat_id))\n+    }\n     pub(super) fn label_to_def(\n         &mut self,\n         src: InFile<ast::Label>,"}, {"sha": "85ddc2c479a0fee3ad1eba303315e0e5dc83e346", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -258,7 +258,7 @@ impl Resolver {\n     ) -> Option<ResolveValueResult> {\n         let n_segments = path.segments.len();\n         let tmp = name![self];\n-        let first_name = if path.is_self() { &tmp } else { &path.segments.first()? };\n+        let first_name = if path.is_self() { &tmp } else { path.segments.first()? };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n             match scope {"}, {"sha": "b35bc2bae22fe322b5fc67c80a284e5d7a6dee62", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -18,7 +18,7 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, AstNode},\n-    SyntaxNode, TextRange, T,\n+    SyntaxNode, TextRange,\n };\n use text_edit::TextEdit;\n \n@@ -232,7 +232,7 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n     single_use_tree: &ast::UseTree,\n ) -> Option<TextEdit> {\n     let use_tree_list_node = single_use_tree.syntax().parent()?;\n-    if single_use_tree.path()?.segment()?.syntax().first_child_or_token()?.kind() == T![self] {\n+    if single_use_tree.path()?.segment()?.self_token().is_some() {\n         let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n         let end = use_tree_list_node.text_range().end();\n         return Some(TextEdit::delete(TextRange::new(start, end)));"}, {"sha": "685052e7f56bd62c6623c3941600286020ff17da", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -400,24 +400,33 @@ impl TryToNav for hir::GenericParam {\n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let node = match &src.value {\n-            Either::Left(bind_pat) => {\n-                bind_pat.name().map_or_else(|| bind_pat.syntax().clone(), |it| it.syntax().clone())\n-            }\n-            Either::Right(it) => it.syntax().clone(),\n+        let (node, focus_range) = match &src.value {\n+            Either::Left(bind_pat) => (\n+                bind_pat.syntax().clone(),\n+                bind_pat\n+                    .name()\n+                    .map(|it| src.with_value(&it.syntax().clone()).original_file_range(db).range),\n+            ),\n+            Either::Right(it) => (it.syntax().clone(), it.self_token().map(|it| it.text_range())),\n         };\n         let full_range = src.with_value(&node).original_file_range(db);\n         let name = match self.name(db) {\n             Some(it) => it.to_string().into(),\n             None => \"\".into(),\n         };\n-        let kind = if self.is_param(db) { SymbolKind::ValueParam } else { SymbolKind::Local };\n+        let kind = if self.is_self(db) {\n+            SymbolKind::SelfParam\n+        } else if self.is_param(db) {\n+            SymbolKind::ValueParam\n+        } else {\n+            SymbolKind::Local\n+        };\n         NavigationTarget {\n             file_id: full_range.file_id,\n             name,\n             kind: Some(kind),\n             full_range: full_range.range,\n-            focus_range: None,\n+            focus_range,\n             container_name: None,\n             description: None,\n             docs: None,"}, {"sha": "988a5668f879b21136dca9a56a04da30eb10fb8f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -1,7 +1,6 @@\n use either::Either;\n use hir::{HasAttrs, ModuleDef, Semantics};\n use ide_db::{\n-    base_db::FileId,\n     defs::{Definition, NameClass, NameRefClass},\n     symbol_index, RootDatabase,\n };\n@@ -13,7 +12,7 @@ use crate::{\n     display::{ToNav, TryToNav},\n     doc_links::extract_definitions_from_markdown,\n     runnables::doc_owner_to_def,\n-    FilePosition, NavigationTarget, RangeInfo, SymbolKind,\n+    FilePosition, NavigationTarget, RangeInfo,\n };\n \n // Feature: Go to Definition\n@@ -49,26 +48,18 @@ pub(crate) fn goto_definition(\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n-            ast::SelfParam(self_param) => {\n-                vec![self_to_nav_target(self_param, position.file_id)?]\n-            },\n-            ast::PathSegment(segment) => {\n-                segment.self_token()?;\n-                let path = segment.parent_path();\n-                if path.qualifier().is_some() && !ast::PathExpr::can_cast(path.syntax().parent()?.kind()) {\n-                    return None;\n-                }\n-                let func = segment.syntax().ancestors().find_map(ast::Fn::cast)?;\n-                let self_param = func.param_list()?.self_param()?;\n-                vec![self_to_nav_target(self_param, position.file_id)?]\n-            },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n                 let def = name_class.referenced_or_defined(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             } else {\n                 reference_definition(&sema, Either::Left(&lt)).to_vec()\n             },\n+            ast::SelfParam(self_param) => {\n+                let def = NameClass::classify_self_param(&sema, &self_param)?.referenced_or_defined(sema.db);\n+                let nav = def.try_to_nav(sema.db)?;\n+                vec![nav]\n+            },\n             _ => return None,\n         }\n     };\n@@ -134,20 +125,6 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     }\n }\n \n-fn self_to_nav_target(self_param: ast::SelfParam, file_id: FileId) -> Option<NavigationTarget> {\n-    let self_token = self_param.self_token()?;\n-    Some(NavigationTarget {\n-        file_id,\n-        full_range: self_param.syntax().text_range(),\n-        focus_range: Some(self_token.text_range()),\n-        name: self_token.text().clone(),\n-        kind: Some(SymbolKind::SelfParam),\n-        container_name: None,\n-        description: None,\n-        docs: None,\n-    })\n-}\n-\n #[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),"}, {"sha": "6022bd275265bd029b3829b68675b03b897a517f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -98,6 +98,7 @@ pub(crate) fn hover(\n             ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime)\n                 .map_or_else(|| NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced(sema.db)), |d| d.defined(sema.db)),\n+            ast::SelfParam(self_param) => NameClass::classify_self_param(&sema, &self_param).and_then(|d| d.defined(sema.db)),\n             _ => None,\n         }\n     };\n@@ -134,17 +135,14 @@ pub(crate) fn hover(\n         return None;\n     }\n \n-    let node = token.ancestors().find(|n| {\n-        ast::Expr::can_cast(n.kind())\n-            || ast::Pat::can_cast(n.kind())\n-            || ast::SelfParam::can_cast(n.kind())\n-    })?;\n+    let node = token\n+        .ancestors()\n+        .find(|n| ast::Expr::can_cast(n.kind()) || ast::Pat::can_cast(n.kind()))?;\n \n     let ty = match_ast! {\n         match node {\n             ast::Expr(it) => sema.type_of_expr(&it)?,\n             ast::Pat(it) => sema.type_of_pat(&it)?,\n-            ast::SelfParam(self_param) => sema.type_of_self(&self_param)?,\n             // If this node is a MACRO_CALL, it means that `descend_into_macros` failed to resolve.\n             // (e.g expanding a builtin macro). So we give up here.\n             ast::MacroCall(_it) => return None,\n@@ -386,7 +384,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT => 3,\n+            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] => 3,\n             T!['('] | T![')'] => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n@@ -3129,6 +3127,39 @@ fn foo<T: Foo>(t: T$0){}\n         );\n     }\n \n+    #[test]\n+    fn test_hover_self_has_go_to_type() {\n+        check_actions(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self$0) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::Foo\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..11,\n+                                    focus_range: 7..10,\n+                                    name: \"Foo\",\n+                                    kind: Struct,\n+                                    description: \"struct Foo\",\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_displays_normalized_crate_names() {\n         check(\n@@ -3193,6 +3224,7 @@ impl Foo {\n \"#,\n             expect![[r#\"\n                 *&self*\n+\n                 ```rust\n                 &Foo\n                 ```\n@@ -3212,6 +3244,7 @@ impl Foo {\n \"#,\n             expect![[r#\"\n                 *self: Arc<Foo>*\n+\n                 ```rust\n                 Arc<Foo>\n                 ```"}, {"sha": "51a2f4327278d2b1380618f304ea5bc8ed16f21a", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 96, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -11,6 +11,7 @@\n \n pub(crate) mod rename;\n \n+use either::Either;\n use hir::Semantics;\n use ide_db::{\n     base_db::FileId,\n@@ -21,10 +22,10 @@ use ide_db::{\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n-    match_ast, AstNode, SyntaxNode, TextRange, TokenAtOffset, T,\n+    AstNode, SyntaxNode, TextRange, TokenAtOffset, T,\n };\n \n-use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo, SymbolKind};\n+use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n@@ -90,10 +91,6 @@ pub(crate) fn find_all_refs(\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n-    if let Some(res) = try_find_self_references(&syntax, position) {\n-        return Some(res);\n-    }\n-\n     let (opt_name, search_kind) = if let Some(name) =\n         get_struct_def_name_for_struct_literal_search(&sema, &syntax, position)\n     {\n@@ -122,13 +119,16 @@ pub(crate) fn find_all_refs(\n \n     let mut kind = ReferenceKind::Other;\n     if let Definition::Local(local) = def {\n-        if let either::Either::Left(pat) = local.source(sema.db).value {\n-            if matches!(\n-                pat.syntax().parent().and_then(ast::RecordPatField::cast),\n-                Some(pat_field) if pat_field.name_ref().is_none()\n-            ) {\n-                kind = ReferenceKind::FieldShorthandForLocal;\n+        match local.source(sema.db).value {\n+            Either::Left(pat) => {\n+                if matches!(\n+                    pat.syntax().parent().and_then(ast::RecordPatField::cast),\n+                    Some(pat_field) if pat_field.name_ref().is_none()\n+                ) {\n+                    kind = ReferenceKind::FieldShorthandForLocal;\n+                }\n             }\n+            Either::Right(_) => kind = ReferenceKind::SelfParam,\n         }\n     } else if matches!(\n         def,\n@@ -251,79 +251,6 @@ fn get_enum_def_name_for_struct_literal_search(\n     None\n }\n \n-fn try_find_self_references(\n-    syntax: &SyntaxNode,\n-    position: FilePosition,\n-) -> Option<RangeInfo<ReferenceSearchResult>> {\n-    let FilePosition { file_id, offset } = position;\n-    let self_token = syntax.token_at_offset(offset).find(|t| t.kind() == T![self])?;\n-    let parent = self_token.parent();\n-    match_ast! {\n-        match parent {\n-            ast::SelfParam(it) => (),\n-            ast::PathSegment(segment) => {\n-                segment.self_token()?;\n-                let path = segment.parent_path();\n-                if path.qualifier().is_some() && !ast::PathExpr::can_cast(path.syntax().parent()?.kind()) {\n-                    return None;\n-                }\n-            },\n-            _ => return None,\n-        }\n-    };\n-    let function = parent.ancestors().find_map(ast::Fn::cast)?;\n-    let self_param = function.param_list()?.self_param()?;\n-    let param_self_token = self_param.self_token()?;\n-\n-    let declaration = Declaration {\n-        nav: NavigationTarget {\n-            file_id,\n-            full_range: self_param.syntax().text_range(),\n-            focus_range: Some(param_self_token.text_range()),\n-            name: param_self_token.text().clone(),\n-            kind: Some(SymbolKind::SelfParam),\n-            container_name: None,\n-            description: None,\n-            docs: None,\n-        },\n-        kind: ReferenceKind::SelfKw,\n-        access: Some(if self_param.mut_token().is_some() {\n-            ReferenceAccess::Write\n-        } else {\n-            ReferenceAccess::Read\n-        }),\n-    };\n-    let refs = function\n-        .body()\n-        .map(|body| {\n-            body.syntax()\n-                .descendants()\n-                .filter_map(ast::PathExpr::cast)\n-                .filter_map(|expr| {\n-                    let path = expr.path()?;\n-                    if path.qualifier().is_none() {\n-                        path.segment()?.self_token()\n-                    } else {\n-                        None\n-                    }\n-                })\n-                .map(|token| FileReference {\n-                    range: token.text_range(),\n-                    kind: ReferenceKind::SelfKw,\n-                    access: declaration.access, // FIXME: properly check access kind here instead of copying it from the declaration\n-                })\n-                .collect()\n-        })\n-        .unwrap_or_default();\n-    let mut references = UsageSearchResult::default();\n-    references.references.insert(file_id, refs);\n-\n-    Some(RangeInfo::new(\n-        param_self_token.text_range(),\n-        ReferenceSearchResult { declaration, references },\n-    ))\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -512,7 +439,7 @@ fn main() {\n     i = 5;\n }\"#,\n             expect![[r#\"\n-                i Local FileId(0) 24..25 Other Write\n+                i Local FileId(0) 20..25 24..25 Other Write\n \n                 FileId(0) 50..51 Other Write\n                 FileId(0) 54..55 Other Read\n@@ -536,7 +463,7 @@ fn bar() {\n }\n \"#,\n             expect![[r#\"\n-                spam Local FileId(0) 19..23 Other\n+                spam Local FileId(0) 19..23 19..23 Other\n \n                 FileId(0) 34..38 Other Read\n                 FileId(0) 41..45 Other Read\n@@ -551,7 +478,7 @@ fn bar() {\n fn foo(i : u32) -> u32 { i$0 }\n \"#,\n             expect![[r#\"\n-                i ValueParam FileId(0) 7..8 Other\n+                i ValueParam FileId(0) 7..8 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],\n@@ -565,7 +492,7 @@ fn foo(i : u32) -> u32 { i$0 }\n fn foo(i$0 : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n-                i ValueParam FileId(0) 7..8 Other\n+                i ValueParam FileId(0) 7..8 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],\n@@ -813,7 +740,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i Local FileId(0) 23..24 Other Write\n+                i Local FileId(0) 19..24 23..24 Other Write\n \n                 FileId(0) 34..35 Other Write\n                 FileId(0) 38..39 Other Read\n@@ -853,7 +780,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i Local FileId(0) 19..20 Other\n+                i Local FileId(0) 19..20 19..20 Other\n \n                 FileId(0) 26..27 Other Write\n             \"#]],\n@@ -995,10 +922,10 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                self SelfParam FileId(0) 47..51 47..51 SelfKw Read\n+                self SelfParam FileId(0) 47..51 47..51 SelfParam\n \n-                FileId(0) 71..75 SelfKw Read\n-                FileId(0) 152..156 SelfKw Read\n+                FileId(0) 71..75 Other Read\n+                FileId(0) 152..156 Other Read\n             \"#]],\n         );\n     }\n@@ -1105,7 +1032,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                a Local FileId(0) 59..60 Other\n+                a Local FileId(0) 59..60 59..60 Other\n \n                 FileId(0) 80..81 Other Read\n             \"#]],\n@@ -1123,7 +1050,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                a Local FileId(0) 59..60 Other\n+                a Local FileId(0) 59..60 59..60 Other\n \n                 FileId(0) 80..81 Other Read\n             \"#]],"}, {"sha": "9ac4af026bf67c8384005317c676f4b27c18b701", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -444,7 +444,7 @@ fn rename_reference(\n             mark::hit!(rename_not_an_ident_ref);\n             bail!(\"Invalid name `{}`: not an identifier\", new_name)\n         }\n-        (IdentifierKind::ToSelf, ReferenceKind::SelfKw) => {\n+        (IdentifierKind::ToSelf, ReferenceKind::SelfParam) => {\n             unreachable!(\"rename_self_to_param should've been called instead\")\n         }\n         (IdentifierKind::ToSelf, _) => {"}, {"sha": "87578e70ace43b6ff6e96b628ed7d67fc7c083a5", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -226,35 +226,16 @@ pub(super) fn element(\n                 T![unsafe] => h | HlMod::Unsafe,\n                 T![true] | T![false] => HlTag::BoolLiteral.into(),\n                 T![self] => {\n-                    let self_param_is_mut = element\n-                        .parent()\n-                        .and_then(ast::SelfParam::cast)\n-                        .and_then(|p| p.mut_token())\n-                        .is_some();\n-                    let self_path = &element\n-                        .parent()\n-                        .as_ref()\n-                        .and_then(SyntaxNode::parent)\n-                        .and_then(ast::Path::cast)\n-                        .and_then(|p| sema.resolve_path(&p));\n-                    let mut h = HlTag::Symbol(SymbolKind::SelfParam).into();\n-                    if self_param_is_mut\n-                        || matches!(self_path,\n-                            Some(hir::PathResolution::Local(local))\n-                                if local.is_self(db)\n-                                    && (local.is_mut(db) || local.ty(db).is_mutable_reference())\n-                        )\n+                    let self_param = element.parent().and_then(ast::SelfParam::cast);\n+                    if let Some(NameClass::Definition(def)) = self_param\n+                        .and_then(|self_param| NameClass::classify_self_param(sema, &self_param))\n                     {\n-                        h |= HlMod::Mutable\n-                    }\n-\n-                    if let Some(hir::PathResolution::Local(local)) = self_path {\n-                        if is_consumed_lvalue(element, &local, db) {\n-                            h |= HlMod::Consuming;\n-                        }\n+                        highlight_def(db, def) | HlMod::Definition\n+                    } else if element.ancestors().any(|it| it.kind() == USE_TREE) {\n+                        HlTag::Symbol(SymbolKind::SelfParam).into()\n+                    } else {\n+                        return None;\n                     }\n-\n-                    h\n                 }\n                 T![ref] => element\n                     .parent()\n@@ -345,7 +326,9 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             hir::GenericParam::LifetimeParam(_) => HlTag::Symbol(SymbolKind::LifetimeParam),\n         },\n         Definition::Local(local) => {\n-            let tag = if local.is_param(db) {\n+            let tag = if local.is_self(db) {\n+                HlTag::Symbol(SymbolKind::SelfParam)\n+            } else if local.is_param(db) {\n                 HlTag::Symbol(SymbolKind::ValueParam)\n             } else {\n                 HlTag::Symbol(SymbolKind::Local)"}, {"sha": "d421a78038748e7ebaa01836728166ff37ce6781", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -42,16 +42,16 @@\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">t_is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "5e877df88559e59e4469f7cbf0307fc3f6a06285", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -93,7 +93,7 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "036cb6c11576ee60f8b654c8e4cd30b06f96df6e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -46,7 +46,7 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"brace\">{</span>\n@@ -61,11 +61,11 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>"}, {"sha": "23714956660daa9da771a1188a5f0a45d6d23b95", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -66,25 +66,25 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">Foo</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">Foo</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -95,15 +95,15 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">FooCopy</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">FooCopy</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -213,7 +213,7 @@\n <span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"brace\">{</span>\n             <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>"}, {"sha": "231e886a915070c477110cdadec1b7b0c3988d5f", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -10,7 +10,7 @@ use hir::{\n     Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n };\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, PathSegmentKind},\n     match_ast, SyntaxKind, SyntaxNode,\n };\n \n@@ -117,6 +117,13 @@ impl NameClass {\n         }\n     }\n \n+    pub fn classify_self_param(\n+        sema: &Semantics<RootDatabase>,\n+        self_param: &ast::SelfParam,\n+    ) -> Option<NameClass> {\n+        sema.to_def(self_param).map(Definition::Local).map(NameClass::Definition)\n+    }\n+\n     pub fn classify(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n         let _p = profile::span(\"classify_name\");\n \n@@ -135,24 +142,26 @@ impl NameClass {\n                         let path = use_tree.path()?;\n                         let path_segment = path.segment()?;\n                         let name_ref_class = path_segment\n-                            .name_ref()\n-                            // The rename might be from a `self` token, so fallback to the name higher\n-                            // in the use tree.\n-                            .or_else(||{\n-                                if path_segment.self_token().is_none() {\n-                                    return None;\n+                            .kind()\n+                            .and_then(|kind| {\n+                                match kind {\n+                                    // The rename might be from a `self` token, so fallback to the name higher\n+                                    // in the use tree.\n+                                    PathSegmentKind::SelfKw => {\n+                                        let use_tree = use_tree\n+                                            .syntax()\n+                                            .parent()\n+                                            .as_ref()\n+                                            // Skip over UseTreeList\n+                                            .and_then(SyntaxNode::parent)\n+                                            .and_then(ast::UseTree::cast)?;\n+                                        let path = use_tree.path()?;\n+                                        let path_segment = path.segment()?;\n+                                        path_segment.name_ref()\n+                                    },\n+                                    PathSegmentKind::Name(name_ref) => Some(name_ref),\n+                                    _ => return None,\n                                 }\n-\n-                                let use_tree = use_tree\n-                                    .syntax()\n-                                    .parent()\n-                                    .as_ref()\n-                                    // Skip over UseTreeList\n-                                    .and_then(SyntaxNode::parent)\n-                                    .and_then(ast::UseTree::cast)?;\n-                                let path = use_tree.path()?;\n-                                let path_segment = path.segment()?;\n-                                path_segment.name_ref()\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n "}, {"sha": "0c180e9bcd1944135b7f35ceb01dc57ae82735c7", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -444,8 +444,14 @@ fn use_tree_path_cmp(a: &ast::Path, a_has_tl: bool, b: &ast::Path, b_has_tl: boo\n }\n \n fn path_segment_cmp(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n-    let a = a.name_ref();\n-    let b = b.name_ref();\n+    let a = a.kind().and_then(|kind| match kind {\n+        PathSegmentKind::Name(name_ref) => Some(name_ref),\n+        _ => None,\n+    });\n+    let b = b.kind().and_then(|kind| match kind {\n+        PathSegmentKind::Name(name_ref) => Some(name_ref),\n+        _ => None,\n+    });\n     a.as_ref().map(ast::NameRef::text).cmp(&b.as_ref().map(ast::NameRef::text))\n }\n "}, {"sha": "0ecb13a64b0ae44903b25eb29cd0e37d7f5342cd", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -65,7 +65,7 @@ pub enum ReferenceKind {\n     FieldShorthandForLocal,\n     StructLiteral,\n     RecordFieldExprOrPat,\n-    SelfKw,\n+    SelfParam,\n     EnumLiteral,\n     Lifetime,\n     Other,"}, {"sha": "b10f48fe122228e6638eaecce47ca18da59c397e", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -82,7 +82,11 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n             }\n             // test crate_path\n             // use crate::foo;\n-            T![self] | T![super] | T![crate] => p.bump_any(),\n+            T![self] | T![super] | T![crate] => {\n+                let m = p.start();\n+                p.bump_any();\n+                m.complete(p, NAME_REF);\n+            }\n             _ => {\n                 p.err_recover(\"expected identifier\", items::ITEM_RECOVERY_SET);\n                 if empty {"}, {"sha": "39da45cc0fbff63e594cbc84e6a9d15841f1ccc1", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -883,7 +883,7 @@ use crate::AstNode;\n \n                 replacements:\n \n-                Line 2: Node(NAME_REF@5..14) -> crate\n+                Line 2: Token(IDENT@5..14 \"text_edit\") -> crate\n                 Line 2: Token(IDENT@16..24 \"TextEdit\") -> AstNode\n                 Line 2: Token(WHITESPACE@25..27 \"\\n\\n\") -> \"\\n\"\n "}, {"sha": "1d722db3cf74d7b1a75ae8d9442adb5a598f1ad5", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -18,6 +18,9 @@ pub struct NameRef {\n }\n impl NameRef {\n     pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Lifetime {\n@@ -42,9 +45,6 @@ pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n impl PathSegment {\n-    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n-    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n-    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n     pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }"}, {"sha": "b8ce71d270fc42a4f30909d131b9e80f2b53c683", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -156,14 +156,28 @@ impl ast::PathSegment {\n             .expect(\"segments are always nested in paths\")\n     }\n \n+    pub fn crate_token(&self) -> Option<SyntaxToken> {\n+        self.name_ref().and_then(|it| it.crate_token())\n+    }\n+\n+    pub fn self_token(&self) -> Option<SyntaxToken> {\n+        self.name_ref().and_then(|it| it.self_token())\n+    }\n+\n+    pub fn super_token(&self) -> Option<SyntaxToken> {\n+        self.name_ref().and_then(|it| it.super_token())\n+    }\n+\n     pub fn kind(&self) -> Option<PathSegmentKind> {\n         let res = if let Some(name_ref) = self.name_ref() {\n-            PathSegmentKind::Name(name_ref)\n+            match name_ref.syntax().first_token().map(|it| it.kind()) {\n+                Some(T![self]) => PathSegmentKind::SelfKw,\n+                Some(T![super]) => PathSegmentKind::SuperKw,\n+                Some(T![crate]) => PathSegmentKind::CrateKw,\n+                _ => PathSegmentKind::Name(name_ref),\n+            }\n         } else {\n             match self.syntax().first_child_or_token()?.kind() {\n-                T![self] => PathSegmentKind::SelfKw,\n-                T![super] => PathSegmentKind::SuperKw,\n-                T![crate] => PathSegmentKind::CrateKw,\n                 T![<] => {\n                     // <T> or <T as Trait>\n                     // T is any TypeRef, Trait has to be a PathType"}, {"sha": "7901580ee9d7cf2445f37d976db22b9417e94e95", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -256,7 +256,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n             ));\n         }\n     } else if let Some(token) = segment.super_token() {\n-        if !all_supers(&path) {\n+        if segment.coloncolon_token().is_some() || !all_supers(&path) {\n             errors.push(SyntaxError::new(\n                 \"The `super` keyword may only be preceded by other `super`s\",\n                 token.text_range(),"}, {"sha": "060f47dc440cb777389d2b1b751958baacc6719d", "filename": "crates/syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -49,7 +49,8 @@ SOURCE_FILE@0..183\n                 PATH_EXPR@67..71\n                   PATH@67..71\n                     PATH_SEGMENT@67..71\n-                      SELF_KW@67..71 \"self\"\n+                      NAME_REF@67..71\n+                        SELF_KW@67..71 \"self\"\n                 DOT@71..72 \".\"\n                 NAME_REF@72..78\n                   IDENT@72..78 \"scopes\"\n@@ -66,7 +67,8 @@ SOURCE_FILE@0..183\n               PATH_EXPR@94..98\n                 PATH@94..98\n                   PATH_SEGMENT@94..98\n-                    SELF_KW@94..98 \"self\"\n+                    NAME_REF@94..98\n+                      SELF_KW@94..98 \"self\"\n               DOT@98..99 \".\"\n               NAME_REF@99..105\n                 IDENT@99..105 \"scopes\""}, {"sha": "a95151bc5bf862f920795fde50684db9db529e33", "filename": "crates/syntax/test_data/parser/err/0035_use_recover.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -24,7 +24,8 @@ SOURCE_FILE@0..48\n       PATH@22..32\n         PATH@22..27\n           PATH_SEGMENT@22..27\n-            CRATE_KW@22..27 \"crate\"\n+            NAME_REF@22..27\n+              CRATE_KW@22..27 \"crate\"\n         COLON2@27..29 \"::\"\n         PATH_SEGMENT@29..32\n           NAME_REF@29..32"}, {"sha": "7449b5ddfc5adb32f8043020760aaf7b75fab528", "filename": "crates/syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..98\n       PATH@4..11\n         PATH_SEGMENT@4..11\n           COLON2@4..6 \"::\"\n-          CRATE_KW@6..11 \"crate\"\n+          NAME_REF@6..11\n+            CRATE_KW@6..11 \"crate\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n   USE@13..54\n@@ -18,7 +19,8 @@ SOURCE_FILE@0..98\n         USE_TREE@18..23\n           PATH@18..23\n             PATH_SEGMENT@18..23\n-              CRATE_KW@18..23 \"crate\"\n+              NAME_REF@18..23\n+                CRATE_KW@18..23 \"crate\"\n         COMMA@23..24 \",\"\n         WHITESPACE@24..25 \" \"\n         USE_TREE@25..52\n@@ -35,7 +37,8 @@ SOURCE_FILE@0..98\n                   PATH@31..41\n                     PATH@31..36\n                       PATH_SEGMENT@31..36\n-                        CRATE_KW@31..36 \"crate\"\n+                        NAME_REF@31..36\n+                          CRATE_KW@31..36 \"crate\"\n                     COLON2@36..38 \"::\"\n                     PATH_SEGMENT@38..41\n                       NAME_REF@38..41\n@@ -63,7 +66,8 @@ SOURCE_FILE@0..98\n               IDENT@59..64 \"hello\"\n         COLON2@64..66 \"::\"\n         PATH_SEGMENT@66..71\n-          CRATE_KW@66..71 \"crate\"\n+          NAME_REF@66..71\n+            CRATE_KW@66..71 \"crate\"\n     SEMICOLON@71..72 \";\"\n   WHITESPACE@72..73 \"\\n\"\n   USE@73..97\n@@ -78,7 +82,8 @@ SOURCE_FILE@0..98\n                 IDENT@77..82 \"hello\"\n           COLON2@82..84 \"::\"\n           PATH_SEGMENT@84..89\n-            CRATE_KW@84..89 \"crate\"\n+            NAME_REF@84..89\n+              CRATE_KW@84..89 \"crate\"\n         COLON2@89..91 \"::\"\n         PATH_SEGMENT@91..96\n           NAME_REF@91..96"}, {"sha": "271f8d780387a73dab2f996d9290421d92437065", "filename": "crates/syntax/test_data/parser/err/0041_illegal_super_keyword_location.rast", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..67\n       PATH@4..11\n         PATH_SEGMENT@4..11\n           COLON2@4..6 \"::\"\n-          SUPER_KW@6..11 \"super\"\n+          NAME_REF@6..11\n+            SUPER_KW@6..11 \"super\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n   USE@13..26\n@@ -20,7 +21,8 @@ SOURCE_FILE@0..67\n               IDENT@17..18 \"a\"\n         COLON2@18..20 \"::\"\n         PATH_SEGMENT@20..25\n-          SUPER_KW@20..25 \"super\"\n+          NAME_REF@20..25\n+            SUPER_KW@20..25 \"super\"\n     SEMICOLON@25..26 \";\"\n   WHITESPACE@26..27 \"\\n\"\n   USE@27..47\n@@ -31,14 +33,16 @@ SOURCE_FILE@0..67\n         PATH@31..39\n           PATH@31..36\n             PATH_SEGMENT@31..36\n-              SUPER_KW@31..36 \"super\"\n+              NAME_REF@31..36\n+                SUPER_KW@31..36 \"super\"\n           COLON2@36..38 \"::\"\n           PATH_SEGMENT@38..39\n             NAME_REF@38..39\n               IDENT@38..39 \"a\"\n         COLON2@39..41 \"::\"\n         PATH_SEGMENT@41..46\n-          SUPER_KW@41..46 \"super\"\n+          NAME_REF@41..46\n+            SUPER_KW@41..46 \"super\"\n     SEMICOLON@46..47 \";\"\n   WHITESPACE@47..48 \"\\n\"\n   USE@48..66\n@@ -56,7 +60,8 @@ SOURCE_FILE@0..67\n           PATH@56..64\n             PATH@56..61\n               PATH_SEGMENT@56..61\n-                SUPER_KW@56..61 \"super\"\n+                NAME_REF@56..61\n+                  SUPER_KW@56..61 \"super\"\n             COLON2@61..63 \"::\"\n             PATH_SEGMENT@63..64\n               NAME_REF@63..64"}, {"sha": "01f601091441c9155b041ac3cb5164ec9b0ea669", "filename": "crates/syntax/test_data/parser/err/0042_illegal_self_keyword_location.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..25\n       PATH@4..10\n         PATH_SEGMENT@4..10\n           COLON2@4..6 \"::\"\n-          SELF_KW@6..10 \"self\"\n+          NAME_REF@6..10\n+            SELF_KW@6..10 \"self\"\n     SEMICOLON@10..11 \";\"\n   WHITESPACE@11..12 \"\\n\"\n   USE@12..24\n@@ -20,7 +21,8 @@ SOURCE_FILE@0..25\n               IDENT@16..17 \"a\"\n         COLON2@17..19 \"::\"\n         PATH_SEGMENT@19..23\n-          SELF_KW@19..23 \"self\"\n+          NAME_REF@19..23\n+            SELF_KW@19..23 \"self\"\n     SEMICOLON@23..24 \";\"\n   WHITESPACE@24..25 \"\\n\"\n error 6..10: The `self` keyword is only allowed as the first segment of a path"}, {"sha": "d3c5dde586cf49bbd1b7a651c2e2072593c529c2", "filename": "crates/syntax/test_data/parser/inline/err/0015_empty_segment.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_empty_segment.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..13\n       PATH@4..11\n         PATH@4..9\n           PATH_SEGMENT@4..9\n-            CRATE_KW@4..9 \"crate\"\n+            NAME_REF@4..9\n+              CRATE_KW@4..9 \"crate\"\n         COLON2@9..11 \"::\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\""}, {"sha": "970826739fd437be3ab1a7096e504f3f360228a3", "filename": "crates/syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -11,7 +11,8 @@ SOURCE_FILE@0..248\n               PATH@5..16\n                 PATH@5..10\n                   PATH_SEGMENT@5..10\n-                    CRATE_KW@5..10 \"crate\"\n+                    NAME_REF@5..10\n+                      CRATE_KW@5..10 \"crate\"\n                 COLON2@10..12 \"::\"\n                 PATH_SEGMENT@12..16\n                   NAME_REF@12..16"}, {"sha": "46a103d5baf42528e7aa04e9a44467c26ad626bb", "filename": "crates/syntax/test_data/parser/inline/ok/0052_path_type.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -42,7 +42,8 @@ SOURCE_FILE@0..71\n       PATH@39..48\n         PATH@39..43\n           PATH_SEGMENT@39..43\n-            SELF_KW@39..43 \"self\"\n+            NAME_REF@39..43\n+              SELF_KW@39..43 \"self\"\n         COLON2@43..45 \"::\"\n         PATH_SEGMENT@45..48\n           NAME_REF@45..48\n@@ -61,7 +62,8 @@ SOURCE_FILE@0..71\n       PATH@59..69\n         PATH@59..64\n           PATH_SEGMENT@59..64\n-            SUPER_KW@59..64 \"super\"\n+            NAME_REF@59..64\n+              SUPER_KW@59..64 \"super\"\n         COLON2@64..66 \"::\"\n         PATH_SEGMENT@66..69\n           NAME_REF@66..69"}, {"sha": "583dcac7ed37fca1fe08e790f3064401c85e2bb7", "filename": "crates/syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -43,7 +43,8 @@ SOURCE_FILE@0..70\n     PATH@45..55\n       PATH@45..50\n         PATH_SEGMENT@45..50\n-          SUPER_KW@45..50 \"super\"\n+          NAME_REF@45..50\n+            SUPER_KW@45..50 \"super\"\n       COLON2@50..52 \"::\"\n       PATH_SEGMENT@52..55\n         NAME_REF@52..55"}, {"sha": "87c0c48dc8bb03a75d3a60fc64953e0fb9e6d23f", "filename": "crates/syntax/test_data/parser/inline/ok/0067_crate_path.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..16\n       PATH@4..14\n         PATH@4..9\n           PATH_SEGMENT@4..9\n-            CRATE_KW@4..9 \"crate\"\n+            NAME_REF@4..9\n+              CRATE_KW@4..9 \"crate\"\n         COLON2@9..11 \"::\"\n         PATH_SEGMENT@11..14\n           NAME_REF@11..14"}, {"sha": "192a9cca6874a0f9175198a4ba1c8fba42efd864", "filename": "crates/syntax/test_data/parser/inline/ok/0069_use_tree_list_after_path.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -5,7 +5,8 @@ SOURCE_FILE@0..37\n     USE_TREE@4..17\n       PATH@4..9\n         PATH_SEGMENT@4..9\n-          CRATE_KW@4..9 \"crate\"\n+          NAME_REF@4..9\n+            CRATE_KW@4..9 \"crate\"\n       COLON2@9..11 \"::\"\n       USE_TREE_LIST@11..17\n         L_CURLY@11..12 \"{\"\n@@ -23,7 +24,8 @@ SOURCE_FILE@0..37\n     USE_TREE@23..35\n       PATH@23..27\n         PATH_SEGMENT@23..27\n-          SELF_KW@23..27 \"self\"\n+          NAME_REF@23..27\n+            SELF_KW@23..27 \"self\"\n       COLON2@27..29 \"::\"\n       USE_TREE_LIST@29..35\n         L_CURLY@29..30 \"{\""}, {"sha": "3016a65741dbf02c9bf0eb5a120c963bab458b46", "filename": "crates/syntax/test_data/parser/inline/ok/0117_macro_call_type.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -30,7 +30,8 @@ SOURCE_FILE@0..41\n       PATH@26..36\n         PATH@26..31\n           PATH_SEGMENT@26..31\n-            CRATE_KW@26..31 \"crate\"\n+            NAME_REF@26..31\n+              CRATE_KW@26..31 \"crate\"\n         COLON2@31..33 \"::\"\n         PATH_SEGMENT@33..36\n           NAME_REF@33..36"}, {"sha": "0fed2d3111f6d0f59ae659ea48b637bc10ea4713", "filename": "crates/syntax/test_data/parser/inline/ok/0125_crate_keyword_path.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -17,7 +17,8 @@ SOURCE_FILE@0..27\n             PATH@11..21\n               PATH@11..16\n                 PATH_SEGMENT@11..16\n-                  CRATE_KW@11..16 \"crate\"\n+                  NAME_REF@11..16\n+                    CRATE_KW@11..16 \"crate\"\n               COLON2@16..18 \"::\"\n               PATH_SEGMENT@18..21\n                 NAME_REF@18..21"}, {"sha": "a5ee07499eb17ac10ca01832e24da48fee649025", "filename": "crates/syntax/test_data/parser/inline/ok/0153_pub_parens_typepath.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -16,7 +16,8 @@ SOURCE_FILE@0..53\n             PATH@14..22\n               PATH@14..19\n                 PATH_SEGMENT@14..19\n-                  SUPER_KW@14..19 \"super\"\n+                  NAME_REF@14..19\n+                    SUPER_KW@14..19 \"super\"\n               COLON2@19..21 \"::\"\n               PATH_SEGMENT@21..22\n                 NAME_REF@21..22\n@@ -42,7 +43,8 @@ SOURCE_FILE@0..53\n             PATH@40..48\n               PATH@40..45\n                 PATH_SEGMENT@40..45\n-                  CRATE_KW@40..45 \"crate\"\n+                  NAME_REF@40..45\n+                    CRATE_KW@40..45 \"crate\"\n               COLON2@45..47 \"::\"\n               PATH_SEGMENT@47..48\n                 NAME_REF@47..48"}, {"sha": "dba74e222ebfd0a11184e1797c3d80c6cd8cd6f7", "filename": "crates/syntax/test_data/parser/ok/0013_use_path_self_super.rast", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -6,7 +6,8 @@ SOURCE_FILE@0..38\n       PATH@4..13\n         PATH@4..8\n           PATH_SEGMENT@4..8\n-            SELF_KW@4..8 \"self\"\n+            NAME_REF@4..8\n+              SELF_KW@4..8 \"self\"\n         COLON2@8..10 \"::\"\n         PATH_SEGMENT@10..13\n           NAME_REF@10..13\n@@ -21,10 +22,12 @@ SOURCE_FILE@0..38\n         PATH@19..31\n           PATH@19..24\n             PATH_SEGMENT@19..24\n-              SUPER_KW@19..24 \"super\"\n+              NAME_REF@19..24\n+                SUPER_KW@19..24 \"super\"\n           COLON2@24..26 \"::\"\n           PATH_SEGMENT@26..31\n-            SUPER_KW@26..31 \"super\"\n+            NAME_REF@26..31\n+              SUPER_KW@26..31 \"super\"\n         COLON2@31..33 \"::\"\n         PATH_SEGMENT@33..36\n           NAME_REF@33..36"}, {"sha": "21c564a2090075e0c22a023c5bb90b2c859b1aec", "filename": "crates/syntax/test_data/parser/ok/0020_type_param_bounds.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -187,7 +187,8 @@ SOURCE_FILE@0..250\n               PATH@164..173\n                 PATH@164..168\n                   PATH_SEGMENT@164..168\n-                    SELF_KW@164..168 \"self\"\n+                    NAME_REF@164..168\n+                      SELF_KW@164..168 \"self\"\n                 COLON2@168..170 \"::\"\n                 PATH_SEGMENT@170..173\n                   NAME_REF@170..173"}, {"sha": "a0a5ca7f5b1f9114a71b3d9eb23dde9c92781c36", "filename": "crates/syntax/test_data/parser/ok/0034_crate_path_in_call.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -25,7 +25,8 @@ SOURCE_FILE@0..62\n                 PATH@27..44\n                   PATH@27..32\n                     PATH_SEGMENT@27..32\n-                      CRATE_KW@27..32 \"crate\"\n+                      NAME_REF@27..32\n+                        CRATE_KW@27..32 \"crate\"\n                   COLON2@32..34 \"::\"\n                   PATH_SEGMENT@34..44\n                     NAME_REF@34..44"}, {"sha": "1bb9222d714af1ec9fddd3344b02877b46742fb0", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb863390f23bc2eac6561d55def9bd3ba54605fc/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb863390f23bc2eac6561d55def9bd3ba54605fc/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=cb863390f23bc2eac6561d55def9bd3ba54605fc", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.7\"\n+ungrammar = \"1.8\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}]}