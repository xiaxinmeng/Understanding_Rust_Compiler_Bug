{"sha": "936ce3dab7fd042101767c439362310f8355e859", "node_id": "C_kwDOAAsO6NoAKDkzNmNlM2RhYjdmZDA0MjEwMTc2N2M0MzkzNjIzMTBmODM1NWU4NTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T09:27:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T09:27:18Z"}, "message": "Auto merge of #92103 - Kobzol:stable-hash-skip-zero-bytes, r=the8472\n\nDo not hash leading zero bytes of i64 numbers in Sip128 hasher\n\nI was poking into the stable hasher, trying to improve its performance by compressing the number of hashed bytes. First I was experimenting with LEB128, but it was painful to implement because of the many assumptions that the SipHasher makes, so I tried something simpler - just ignoring leading zero bytes. For example, if an 8-byte integer can fit into a 4-byte integer, I will just hash the four bytes.\n\nI wonder if this could produce any hashing ambiguity. Originally I thought so, but then I struggled to find any counter-example where this could cause different values to have the same hash. I'd be glad for any examples that could be broken by this (there are some ways of mitigating it if that would be the case). It could happen if you had e.g. 2x `u8` vs 1x `u16` hashed after one another in two different runs, but that can also happen now, without this \"trick\". And with collections, it should be fine, because the length is included in their hash.\n\nI gathered some statistics for common values used in the `clap` benchmark. I observed that especially `i64` often had very low values, so I started with that type, let's see what perf does on CI.\n\nThere are some tradeoffs that we can try:\n1) What types to use this optimization for? `u64`, `u32`, `u16`? Locally it was a slight loss for `u64`, I noticed that its values are often quite large.\n2) What byte sizes to check? E.g. we can only distinguish between `u64`/`u32` or `u64`/`u8` instead of `u64`/`u32`/`u16`/`u8` to reduce branching (with `i64` it seemed to be better to go all the way down to `u8` locally though).\n\n(The macro was introduced because I expect that I will be trying out this \"trick\" for different types).\n\nCan you please schedule a perf. run? Thanks.\n\nr? `@the8472`", "tree": {"sha": "d6602f694ef438af7d5648351b741794d6662a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6602f694ef438af7d5648351b741794d6662a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936ce3dab7fd042101767c439362310f8355e859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936ce3dab7fd042101767c439362310f8355e859", "html_url": "https://github.com/rust-lang/rust/commit/936ce3dab7fd042101767c439362310f8355e859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936ce3dab7fd042101767c439362310f8355e859/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03c504742d086df063bfa105a1186bbc01a4b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03c504742d086df063bfa105a1186bbc01a4b0e", "html_url": "https://github.com/rust-lang/rust/commit/b03c504742d086df063bfa105a1186bbc01a4b0e"}, {"sha": "65a3279f4a221e97c97ca1c49d89626c8700d017", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a3279f4a221e97c97ca1c49d89626c8700d017", "html_url": "https://github.com/rust-lang/rust/commit/65a3279f4a221e97c97ca1c49d89626c8700d017"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "872b0eb7854ae4c2face1527a766ff89bec0594f", "filename": "compiler/rustc_data_structures/src/sip128.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/936ce3dab7fd042101767c439362310f8355e859/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936ce3dab7fd042101767c439362310f8355e859/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs?ref=936ce3dab7fd042101767c439362310f8355e859", "patch": "@@ -409,6 +409,20 @@ impl SipHasher128 {\n     }\n }\n \n+macro_rules! dispatch_value {\n+    ($target: expr, $value:expr) => {\n+        let value = $value;\n+        #[allow(unreachable_patterns)]\n+        #[allow(overflowing_literals)]\n+        match value {\n+            0..=0xFF => $target.short_write(value as u8),\n+            0x100..=0xFFFF => $target.short_write(value as u16),\n+            0x10000..=0xFFFFFFFF => $target.short_write(value as u32),\n+            _ => $target.short_write(value as u64),\n+        }\n+    };\n+}\n+\n impl Hasher for SipHasher128 {\n     #[inline]\n     fn write_u8(&mut self, i: u8) {\n@@ -422,7 +436,7 @@ impl Hasher for SipHasher128 {\n \n     #[inline]\n     fn write_u32(&mut self, i: u32) {\n-        self.short_write(i);\n+        dispatch_value!(self, i);\n     }\n \n     #[inline]\n@@ -452,7 +466,7 @@ impl Hasher for SipHasher128 {\n \n     #[inline]\n     fn write_i64(&mut self, i: i64) {\n-        self.short_write(i as u64);\n+        dispatch_value!(self, i as u64);\n     }\n \n     #[inline]"}, {"sha": "ac9a02cce048127d459d8716b3aa0be29a4808f9", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936ce3dab7fd042101767c439362310f8355e859/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936ce3dab7fd042101767c439362310f8355e859/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=936ce3dab7fd042101767c439362310f8355e859", "patch": "@@ -37,7 +37,7 @@\n // Const generic parameter\n // gdb-command:info functions -q function_names::const_generic_fn.*\n // gdb-check:[...]static fn function_names::const_generic_fn_bool<false>();\n-// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#fe3cfa0214ac55c7}>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#3fcd7c34c1555be6}>();\n // gdb-check:[...]static fn function_names::const_generic_fn_signed_int<-7>();\n // gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int<14>();\n \n@@ -76,7 +76,7 @@\n // Const generic parameter\n // cdb-command:x a!function_names::const_generic_fn*\n // cdb-check:[...] a!function_names::const_generic_fn_bool<false> (void)\n-// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$fe3cfa0214ac55c7> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$3fcd7c34c1555be6> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_unsigned_int<14> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_signed_int<-7> (void)\n "}]}