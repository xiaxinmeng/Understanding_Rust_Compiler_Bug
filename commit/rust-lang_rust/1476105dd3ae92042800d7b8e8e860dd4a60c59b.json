{"sha": "1476105dd3ae92042800d7b8e8e860dd4a60c59b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzYxMDVkZDNhZTkyMDQyODAwZDdiOGU4ZTg2MGRkNGE2MGM1OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-03T09:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-03T09:57:57Z"}, "message": "Auto merge of #40189 - SimonSapin:one-width, r=alexcrichton\n\nReduce std_unicode\u2019s public API\n\n * Only keep one copy of the `UTF8_CHAR_WIDTH` table instead of one of each of libcore and libstd_unicode.\n* Move the `utf8_char_width` function to `core::str` under the `str_internals` unstable feature.\n* Remove `std_unicode::str::is_utf16`. It was only accessible through the `#[unstable]` crate std_unicode. It has never been used in the compiler or standard library since 47e7a05 added it in 2012 \u201cfor OS API interop\u201d. It can be replaced with a one-liner:\n\n   ```rust\n   fn is_utf16(slice: &[u16]) -> bool {\n       std::char::decode_utf16(s).all(|r| r.is_ok())\n   }\n   ```", "tree": {"sha": "f0ea5b9d54071b007dc11b98dc186ee3d996dbd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ea5b9d54071b007dc11b98dc186ee3d996dbd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1476105dd3ae92042800d7b8e8e860dd4a60c59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1476105dd3ae92042800d7b8e8e860dd4a60c59b", "html_url": "https://github.com/rust-lang/rust/commit/1476105dd3ae92042800d7b8e8e860dd4a60c59b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1476105dd3ae92042800d7b8e8e860dd4a60c59b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042728e7ff27e305130747c0d1f19d4a67587863", "url": "https://api.github.com/repos/rust-lang/rust/commits/042728e7ff27e305130747c0d1f19d4a67587863", "html_url": "https://github.com/rust-lang/rust/commit/042728e7ff27e305130747c0d1f19d4a67587863"}, {"sha": "24b39c51af8b7320fd825a66a239a497f20b0ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b39c51af8b7320fd825a66a239a497f20b0ece", "html_url": "https://github.com/rust-lang/rust/commit/24b39c51af8b7320fd825a66a239a497f20b0ece"}], "stats": {"total": 130, "additions": 12, "deletions": 118}, "files": [{"sha": "f88bdd0ecf38262dd2855d5535de7329416b15d3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -54,6 +54,7 @@\n #![feature(slice_patterns)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(str_internals)]\n #![feature(trusted_len)]\n #![feature(unicode)]\n #![feature(unique)]"}, {"sha": "4979107ccadc7f9004a3cedd8092e72763fcba1e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -62,9 +62,9 @@ use core::iter::{FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n+use core::str as core_str;\n use core::str::pattern::Pattern;\n use std_unicode::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-use std_unicode::str as unicode_str;\n \n use borrow::{Cow, ToOwned};\n use range::RangeArgument;\n@@ -575,7 +575,7 @@ impl String {\n             if byte < 128 {\n                 // subseqidx handles this\n             } else {\n-                let w = unicode_str::utf8_char_width(byte);\n+                let w = core_str::utf8_char_width(byte);\n \n                 match w {\n                     2 => {"}, {"sha": "8071c7e8c20d58688534d4e94e571034c9c28b45", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -540,71 +540,6 @@ fn from_utf8_mostly_ascii() {\n     }\n }\n \n-#[test]\n-fn test_is_utf16() {\n-    use std_unicode::str::is_utf16;\n-\n-    macro_rules! pos {\n-        ($($e:expr),*) => { { $(assert!(is_utf16($e));)* } }\n-    }\n-\n-    // non-surrogates\n-    pos!(&[0x0000],\n-         &[0x0001, 0x0002],\n-         &[0xD7FF],\n-         &[0xE000]);\n-\n-    // surrogate pairs (randomly generated with Python 3's\n-    // .encode('utf-16be'))\n-    pos!(&[0xdb54, 0xdf16, 0xd880, 0xdee0, 0xdb6a, 0xdd45],\n-         &[0xd91f, 0xdeb1, 0xdb31, 0xdd84, 0xd8e2, 0xde14],\n-         &[0xdb9f, 0xdc26, 0xdb6f, 0xde58, 0xd850, 0xdfae]);\n-\n-    // mixtures (also random)\n-    pos!(&[0xd921, 0xdcc2, 0x002d, 0x004d, 0xdb32, 0xdf65],\n-         &[0xdb45, 0xdd2d, 0x006a, 0xdacd, 0xddfe, 0x0006],\n-         &[0x0067, 0xd8ff, 0xddb7, 0x000f, 0xd900, 0xdc80]);\n-\n-    // negative tests\n-    macro_rules! neg {\n-        ($($e:expr),*) => { { $(assert!(!is_utf16($e));)* } }\n-    }\n-\n-    neg!(\n-        // surrogate + regular unit\n-        &[0xdb45, 0x0000],\n-        // surrogate + lead surrogate\n-        &[0xd900, 0xd900],\n-        // unterminated surrogate\n-        &[0xd8ff],\n-        // trail surrogate without a lead\n-        &[0xddb7]);\n-\n-    // random byte sequences that Python 3's .decode('utf-16be')\n-    // failed on\n-    neg!(&[0x5b3d, 0x0141, 0xde9e, 0x8fdc, 0xc6e7],\n-         &[0xdf5a, 0x82a5, 0x62b9, 0xb447, 0x92f3],\n-         &[0xda4e, 0x42bc, 0x4462, 0xee98, 0xc2ca],\n-         &[0xbe00, 0xb04a, 0x6ecb, 0xdd89, 0xe278],\n-         &[0x0465, 0xab56, 0xdbb6, 0xa893, 0x665e],\n-         &[0x6b7f, 0x0a19, 0x40f4, 0xa657, 0xdcc5],\n-         &[0x9b50, 0xda5e, 0x24ec, 0x03ad, 0x6dee],\n-         &[0x8d17, 0xcaa7, 0xf4ae, 0xdf6e, 0xbed7],\n-         &[0xdaee, 0x2584, 0x7d30, 0xa626, 0x121a],\n-         &[0xd956, 0x4b43, 0x7570, 0xccd6, 0x4f4a],\n-         &[0x9dcf, 0x1b49, 0x4ba5, 0xfce9, 0xdffe],\n-         &[0x6572, 0xce53, 0xb05a, 0xf6af, 0xdacf],\n-         &[0x1b90, 0x728c, 0x9906, 0xdb68, 0xf46e],\n-         &[0x1606, 0xbeca, 0xbe76, 0x860f, 0xdfa5],\n-         &[0x8b4f, 0xde7a, 0xd220, 0x9fac, 0x2b6f],\n-         &[0xb8fe, 0xebbe, 0xda32, 0x1a5f, 0x8b8b],\n-         &[0x934b, 0x8956, 0xc434, 0x1881, 0xddf7],\n-         &[0x5a95, 0x13fc, 0xf116, 0xd89b, 0x93f9],\n-         &[0xd640, 0x71f1, 0xdd7d, 0x77eb, 0x1cd8],\n-         &[0x348b, 0xaef0, 0xdb2c, 0xebf1, 0x1282],\n-         &[0x50d7, 0xd824, 0x5010, 0xb369, 0x22ea]);\n-}\n-\n #[test]\n fn test_as_bytes() {\n     // no null"}, {"sha": "2f021b9935d6abc9b74daea6fdba81de54e9e765", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -129,7 +129,7 @@ fn test_from_utf16() {\n         let s_as_utf16 = s.encode_utf16().collect::<Vec<u16>>();\n         let u_as_string = String::from_utf16(&u).unwrap();\n \n-        assert!(::std_unicode::str::is_utf16(&u));\n+        assert!(::std_unicode::char::decode_utf16(u.iter().cloned()).all(|r| r.is_ok()));\n         assert_eq!(s_as_utf16, u);\n \n         assert_eq!(u_as_string, s);"}, {"sha": "52e330163105222ca1a8caec998eaec384789ccb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -1352,6 +1352,13 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n 4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0, // 0xFF\n ];\n \n+/// Given a first byte, determine how many bytes are in this UTF-8 character\n+#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[inline]\n+pub fn utf8_char_width(b: u8) -> usize {\n+    return UTF8_CHAR_WIDTH[b as usize] as usize;\n+}\n+\n /// Mask of the value bits of a continuation byte\n const CONT_MASK: u8 = 0b0011_1111;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte"}, {"sha": "58788cdcd4c7c4eb9d521789e7b2beacb506fdc9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -256,7 +256,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use cmp;\n-use std_unicode::str as core_str;\n+use core::str as core_str;\n use error as std_error;\n use fmt;\n use result;"}, {"sha": "7e5ab1a54ab3afa16ed4bc5da100d8c8631092b2", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -47,7 +47,6 @@ pub mod char;\n #[allow(deprecated)]\n pub mod str {\n     pub use u_str::{SplitWhitespace, UnicodeStr};\n-    pub use u_str::{is_utf16, utf8_char_width};\n     pub use u_str::Utf16Encoder;\n }\n "}, {"sha": "3c02ea82d2a1147f54d9789a238cedb8678d9b6f", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1476105dd3ae92042800d7b8e8e860dd4a60c59b/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=1476105dd3ae92042800d7b8e8e860dd4a60c59b", "patch": "@@ -77,54 +77,6 @@ impl UnicodeStr for str {\n     }\n }\n \n-// https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8; 256] = [\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x3F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x5F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x7F\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0x9F\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0xBF\n-0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\n-2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, // 0xDF\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3, // 0xEF\n-4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0, // 0xFF\n-];\n-\n-/// Given a first byte, determine how many bytes are in this UTF-8 character\n-#[inline]\n-pub fn utf8_char_width(b: u8) -> usize {\n-    return UTF8_CHAR_WIDTH[b as usize] as usize;\n-}\n-\n-/// Determines if a vector of `u16` contains valid UTF-16\n-pub fn is_utf16(v: &[u16]) -> bool {\n-    let mut it = v.iter();\n-    macro_rules! next { ($ret:expr) => {\n-            match it.next() { Some(u) => *u, None => return $ret }\n-        }\n-    }\n-    loop {\n-        let u = next!(true);\n-\n-        match char::from_u32(u as u32) {\n-            Some(_) => {}\n-            None => {\n-                let u2 = next!(false);\n-                if u < 0xD7FF || u > 0xDBFF || u2 < 0xDC00 || u2 > 0xDFFF {\n-                    return false;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n /// Iterator adaptor for encoding `char`s to UTF-16.\n #[derive(Clone)]\n pub struct Utf16Encoder<I> {"}]}