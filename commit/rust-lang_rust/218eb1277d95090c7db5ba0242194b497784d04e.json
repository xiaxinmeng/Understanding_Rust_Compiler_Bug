{"sha": "218eb1277d95090c7db5ba0242194b497784d04e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOGViMTI3N2Q5NTA5MGM3ZGI1YmEwMjQyMTk0YjQ5Nzc4NGQwNGU=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-07-12T00:30:50Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-07-12T00:30:50Z"}, "message": "Correct and clarify integer division rounding docs", "tree": {"sha": "c85321f4e69b39da838002563abbbdeb234fff63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85321f4e69b39da838002563abbbdeb234fff63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218eb1277d95090c7db5ba0242194b497784d04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218eb1277d95090c7db5ba0242194b497784d04e", "html_url": "https://github.com/rust-lang/rust/commit/218eb1277d95090c7db5ba0242194b497784d04e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218eb1277d95090c7db5ba0242194b497784d04e/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b28ffa5216c845d1cef6b0cb3e5ac7db12025d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b28ffa5216c845d1cef6b0cb3e5ac7db12025d0", "html_url": "https://github.com/rust-lang/rust/commit/1b28ffa5216c845d1cef6b0cb3e5ac7db12025d0"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "c5423019d9464ffee544930df95ecd888115e780", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218eb1277d95090c7db5ba0242194b497784d04e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eb1277d95090c7db5ba0242194b497784d04e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=218eb1277d95090c7db5ba0242194b497784d04e", "patch": "@@ -459,15 +459,15 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `floor(self / other)`,\n+        /// Wrapping (modular) division. Computes `self / other`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// The only case where such wrapping can occur is when one\n         /// divides `MIN / -1` on a signed type (where `MIN` is the\n         /// negative minimal value for the type); this is equivalent\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n-        /// itself..\n+        /// itself.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {\n@@ -1031,15 +1031,15 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `floor(self / other)`,\n+        /// Wrapping (modular) division. Computes `self / other`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// The only case where such wrapping can occur is when one\n         /// divides `MIN / -1` on a signed type (where `MIN` is the\n         /// negative minimal value for the type); this is equivalent\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n-        /// itself..\n+        /// itself.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {"}, {"sha": "6f15a6bffa8a2da5d014415c19263bad4a11f860", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/218eb1277d95090c7db5ba0242194b497784d04e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eb1277d95090c7db5ba0242194b497784d04e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=218eb1277d95090c7db5ba0242194b497784d04e", "patch": "@@ -315,6 +315,9 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Div` trait is used to specify the functionality of `/`.\n ///\n+/// For primitive integral types, this operation rounds towards zero,\n+/// truncating any fractional part of the exact result.\n+///\n /// # Examples\n ///\n /// A trivial implementation of `Div`. When `Foo / Foo` happens, it ends up\n@@ -369,6 +372,9 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Rem` trait is used to specify the functionality of `%`.\n ///\n+/// For primitive integral types, this operation satisfies `n % d == n\n+/// - (n / d) * d`.  The result has the same sign as the left operand.\n+///\n /// # Examples\n ///\n /// A trivial implementation of `Rem`. When `Foo % Foo` happens, it ends up"}]}