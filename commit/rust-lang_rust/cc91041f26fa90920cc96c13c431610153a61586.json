{"sha": "cc91041f26fa90920cc96c13c431610153a61586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOTEwNDFmMjZmYTkwOTIwY2M5NmMxM2M0MzE2MTAxNTNhNjE1ODY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-05-18T15:00:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-05-18T15:00:44Z"}, "message": "Always generated object code for `#![no_builtins]`\n\nThis commit updates the code generation for `#![no_builtins]` to always\nproduce object files instead of conditionally respecting\n`-Clinker-plugin-lto` and sometimes producing bitcode. This is intended\nto address rust-lang/cargo#8239.\n\nThe issue at hand here is that Cargo has tried to get \"smarter\" about\ncodegen in whole crate graph scenarios. When LTO is enabled it attempts\nto avoid codegen on as many crates as possible, opting to pass\n`-Clinker-plugin-lto` where it can to only generate bitcode. When this\nis combined with `-Zbuild-std`, however, it means that\n`compiler-builtins` only generates LLVM bitcode instead of object files.\nRustc's own LTO passes then explicitly skip `compiler-builtins` (because\nit wouldn't work anyway) which means that LLVM bitcode gets sent to the\nlinker, which chokes most of the time.\n\nThe fix in this PR is to not actually respect `-Clinker-plugin-lto` for\n`#![no_builtins]` crates. These crates, even if slurped up by the linker\nrather than rustc, will not work with LTO. They define symbols which are\nonly referenced as part of codegen, so LTO's aggressive internalization\nwould trivially remove the symbols only to have the linker realize later\nthat the symbol is undefined. Since pure-bitcode never makes sense for\nthese libraries, the `-Clinker-plugin-lto` flag is silently ignored.", "tree": {"sha": "7d37e33ef28b2a702c8ce5164ce93104c02d1e30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d37e33ef28b2a702c8ce5164ce93104c02d1e30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc91041f26fa90920cc96c13c431610153a61586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc91041f26fa90920cc96c13c431610153a61586", "html_url": "https://github.com/rust-lang/rust/commit/cc91041f26fa90920cc96c13c431610153a61586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc91041f26fa90920cc96c13c431610153a61586/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2a6a29ce82e4fc5decad86dab7911a38582438", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2a6a29ce82e4fc5decad86dab7911a38582438", "html_url": "https://github.com/rust-lang/rust/commit/9e2a6a29ce82e4fc5decad86dab7911a38582438"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "f9ee7d8c5de71907359928d492d8ceda2e09ea50", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc91041f26fa90920cc96c13c431610153a61586/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc91041f26fa90920cc96c13c431610153a61586/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=cc91041f26fa90920cc96c13c431610153a61586", "patch": "@@ -142,8 +142,22 @@ impl ModuleConfig {\n         let emit_obj = if !should_emit_obj {\n             EmitObj::None\n         } else if sess.target.target.options.obj_is_bitcode\n-            || sess.opts.cg.linker_plugin_lto.enabled()\n+            || (sess.opts.cg.linker_plugin_lto.enabled() && !no_builtins)\n         {\n+            // This case is selected if the target uses objects as bitcode, or\n+            // if linker plugin LTO is enabled. In the linker plugin LTO case\n+            // the assumption is that the final link-step will read the bitcode\n+            // and convert it to object code. This may be done by either the\n+            // native linker or rustc itself.\n+            //\n+            // Note, however, that the linker-plugin-lto requested here is\n+            // explicitly ignored for `#![no_builtins]` crates. These crates are\n+            // specifically ignored by rustc's LTO passes and wouldn't work if\n+            // loaded into the linker. These crates define symbols that LLVM\n+            // lowers intrinsics to, and these symbol dependencies aren't known\n+            // until after codegen. As a result any crate marked\n+            // `#![no_builtins]` is assumed to not participate in LTO and\n+            // instead goes on to generate object code.\n             EmitObj::Bitcode\n         } else if need_bitcode_in_object(sess) {\n             EmitObj::ObjectCode(BitcodeSection::Full)"}]}