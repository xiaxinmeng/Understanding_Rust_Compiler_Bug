{"sha": "e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "node_id": "C_kwDOAAsO6NoAKGUzZTkwMmJiMDYxNDNjOGRjZjcyYmUzOTJlOTVjM2U2ZGM1MTdmMWE", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-02-28T10:49:56Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-02-28T10:49:56Z"}, "message": "4 - Make more use of `let_chains`\n\nContinuation of #94376.\n\ncc #53667", "tree": {"sha": "56d2903c7b69ee24d9864270a24288c9735d885c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d2903c7b69ee24d9864270a24288c9735d885c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "html_url": "https://github.com/rust-lang/rust/commit/e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427cf81206d3b6cf41c86c1b9ce113a33f1ce860", "url": "https://api.github.com/repos/rust-lang/rust/commits/427cf81206d3b6cf41c86c1b9ce113a33f1ce860", "html_url": "https://github.com/rust-lang/rust/commit/427cf81206d3b6cf41c86c1b9ce113a33f1ce860"}], "stats": {"total": 148, "additions": 72, "deletions": 76}, "files": [{"sha": "8318aec8726dc801a19d906ed84e259aebab00fe", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -282,14 +282,13 @@ struct TokenStreamBuilder {\n \n impl TokenStreamBuilder {\n     fn push(&mut self, (tree, joint): TreeAndSpacing) {\n-        if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {\n-            if let TokenTree::Token(token) = &tree {\n-                if let Some(glued) = prev_token.glue(token) {\n-                    self.buf.pop();\n-                    self.buf.push((TokenTree::Token(glued), joint));\n-                    return;\n-                }\n-            }\n+        if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last()\n+            && let TokenTree::Token(token) = &tree\n+            && let Some(glued) = prev_token.glue(token)\n+        {\n+            self.buf.pop();\n+            self.buf.push((TokenTree::Token(glued), joint));\n+            return;\n         }\n         self.buf.push((tree, joint))\n     }"}, {"sha": "5c95a9e7bb616bcea659745ab0d855cd71f9e467", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -1,9 +1,10 @@\n //! The main parser interface.\n \n #![feature(array_windows)]\n+#![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n-#![feature(box_patterns)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "42c9753d6bd10f6aadc9b20ac513ed7a4f006bd5", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -732,43 +732,42 @@ impl<'a> Parser<'a> {\n         mut e: DiagnosticBuilder<'a, ErrorReported>,\n         expr: &mut P<Expr>,\n     ) -> PResult<'a, ()> {\n-        if let ExprKind::Binary(binop, _, _) = &expr.kind {\n-            if let ast::BinOpKind::Lt = binop.node {\n-                if self.eat(&token::Comma) {\n-                    let x = self.parse_seq_to_before_end(\n-                        &token::Gt,\n-                        SeqSep::trailing_allowed(token::Comma),\n-                        |p| p.parse_generic_arg(None),\n-                    );\n-                    match x {\n-                        Ok((_, _, false)) => {\n-                            if self.eat(&token::Gt) {\n-                                e.span_suggestion_verbose(\n-                                    binop.span.shrink_to_lo(),\n-                                    TURBOFISH_SUGGESTION_STR,\n-                                    \"::\".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                )\n-                                .emit();\n-                                match self.parse_expr() {\n-                                    Ok(_) => {\n-                                        *expr =\n-                                            self.mk_expr_err(expr.span.to(self.prev_token.span));\n-                                        return Ok(());\n-                                    }\n-                                    Err(err) => {\n-                                        *expr = self.mk_expr_err(expr.span);\n-                                        err.cancel();\n-                                    }\n-                                }\n+        if let ExprKind::Binary(binop, _, _) = &expr.kind\n+            && let ast::BinOpKind::Lt = binop.node\n+            && self.eat(&token::Comma)\n+        {\n+            let x = self.parse_seq_to_before_end(\n+                &token::Gt,\n+                SeqSep::trailing_allowed(token::Comma),\n+                |p| p.parse_generic_arg(None),\n+            );\n+            match x {\n+                Ok((_, _, false)) => {\n+                    if self.eat(&token::Gt) {\n+                        e.span_suggestion_verbose(\n+                            binop.span.shrink_to_lo(),\n+                            TURBOFISH_SUGGESTION_STR,\n+                            \"::\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                        match self.parse_expr() {\n+                            Ok(_) => {\n+                                *expr =\n+                                    self.mk_expr_err(expr.span.to(self.prev_token.span));\n+                                return Ok(());\n+                            }\n+                            Err(err) => {\n+                                *expr = self.mk_expr_err(expr.span);\n+                                err.cancel();\n                             }\n                         }\n-                        Err(err) => {\n-                            err.cancel();\n-                        }\n-                        _ => {}\n                     }\n                 }\n+                Err(err) => {\n+                    err.cancel();\n+                }\n+                _ => {}\n             }\n         }\n         Err(e)\n@@ -784,12 +783,13 @@ impl<'a> Parser<'a> {\n         outer_op: &Spanned<AssocOp>,\n     ) -> bool /* advanced the cursor */ {\n         if let ExprKind::Binary(op, ref l1, ref r1) = inner_op.kind {\n-            if let ExprKind::Field(_, ident) = l1.kind {\n-                if ident.as_str().parse::<i32>().is_err() && !matches!(r1.kind, ExprKind::Lit(_)) {\n-                    // The parser has encountered `foo.bar<baz`, the likelihood of the turbofish\n-                    // suggestion being the only one to apply is high.\n-                    return false;\n-                }\n+            if let ExprKind::Field(_, ident) = l1.kind\n+                && ident.as_str().parse::<i32>().is_err()\n+                && !matches!(r1.kind, ExprKind::Lit(_))\n+            {\n+                // The parser has encountered `foo.bar<baz`, the likelihood of the turbofish\n+                // suggestion being the only one to apply is high.\n+                return false;\n             }\n             let mut enclose = |left: Span, right: Span| {\n                 err.multipart_suggestion("}, {"sha": "af5cc0e0948680414fd85556a29ff01672c95da8", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -102,14 +102,12 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, Option<Item>> {\n         // Don't use `maybe_whole` so that we have precise control\n         // over when we bump the parser\n-        if let token::Interpolated(nt) = &self.token.kind {\n-            if let token::NtItem(item) = &**nt {\n-                let mut item = item.clone();\n-                self.bump();\n+        if let token::Interpolated(nt) = &self.token.kind && let token::NtItem(item) = &**nt {\n+            let mut item = item.clone();\n+            self.bump();\n \n-                attrs.prepend_to_nt_inner(&mut item.attrs);\n-                return Ok(Some(item.into_inner()));\n-            }\n+            attrs.prepend_to_nt_inner(&mut item.attrs);\n+            return Ok(Some(item.into_inner()));\n         };\n \n         let mut unclosed_delims = vec![];"}, {"sha": "4d31de123b42f8461ffa27d76a00eac4592ea337", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -97,15 +97,15 @@ macro_rules! maybe_whole {\n #[macro_export]\n macro_rules! maybe_recover_from_interpolated_ty_qpath {\n     ($self: expr, $allow_qpath_recovery: expr) => {\n-        if $allow_qpath_recovery && $self.look_ahead(1, |t| t == &token::ModSep) {\n-            if let token::Interpolated(nt) = &$self.token.kind {\n-                if let token::NtTy(ty) = &**nt {\n+        if $allow_qpath_recovery\n+                    && $self.look_ahead(1, |t| t == &token::ModSep)\n+                    && let token::Interpolated(nt) = &$self.token.kind\n+                    && let token::NtTy(ty) = &**nt\n+                {\n                     let ty = ty.clone();\n                     $self.bump();\n                     return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);\n                 }\n-            }\n-        }\n     };\n }\n "}, {"sha": "5e537d7b95c4a082d66a342876c62fd11d259c09", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -658,13 +658,13 @@ impl<'a> Parser<'a> {\n         &self,\n         gen_arg: GenericArg,\n     ) -> Result<(Ident, Option<GenericArgs>), GenericArg> {\n-        if let GenericArg::Type(ty) = &gen_arg {\n-            if let ast::TyKind::Path(qself, path) = &ty.kind {\n-                if qself.is_none() && path.segments.len() == 1 {\n-                    let seg = &path.segments[0];\n-                    return Ok((seg.ident, seg.args.as_deref().cloned()));\n-                }\n-            }\n+        if let GenericArg::Type(ty) = &gen_arg\n+            && let ast::TyKind::Path(qself, path) = &ty.kind\n+            && qself.is_none()\n+            && path.segments.len() == 1\n+        {\n+            let seg = &path.segments[0];\n+            return Ok((seg.ident, seg.args.as_deref().cloned()));\n         }\n         Err(gen_arg)\n     }"}, {"sha": "2154c09f12a53028ae7f4f88616738b28523a6d4", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e902bb06143c8dcf72be392e95c3e6dc517f1a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e3e902bb06143c8dcf72be392e95c3e6dc517f1a", "patch": "@@ -48,15 +48,13 @@ impl<'a> Parser<'a> {\n \n         // Don't use `maybe_whole` so that we have precise control\n         // over when we bump the parser\n-        if let token::Interpolated(nt) = &self.token.kind {\n-            if let token::NtStmt(stmt) = &**nt {\n-                let mut stmt = stmt.clone();\n-                self.bump();\n-                stmt.visit_attrs(|stmt_attrs| {\n-                    attrs.prepend_to_nt_inner(stmt_attrs);\n-                });\n-                return Ok(Some(stmt));\n-            }\n+        if let token::Interpolated(nt) = &self.token.kind && let token::NtStmt(stmt) = &**nt {\n+            let mut stmt = stmt.clone();\n+            self.bump();\n+            stmt.visit_attrs(|stmt_attrs| {\n+                attrs.prepend_to_nt_inner(stmt_attrs);\n+            });\n+            return Ok(Some(stmt));\n         }\n \n         Ok(Some(if self.token.is_keyword(kw::Let) {"}]}