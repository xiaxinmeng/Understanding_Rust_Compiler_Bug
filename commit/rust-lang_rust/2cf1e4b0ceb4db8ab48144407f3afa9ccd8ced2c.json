{"sha": "2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjFlNGIwY2ViNGRiOGFiNDgxNDQ0MDdmM2FmYTljY2Q4Y2VkMmM=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-23T14:43:45Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-23T14:43:45Z"}, "message": "Honor hidden doc attribute of derivable trait methods\n\nCloses #13698", "tree": {"sha": "6d3f5726096ad4d928f0499629aea4cee0623a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d3f5726096ad4d928f0499629aea4cee0623a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "html_url": "https://github.com/rust-lang/rust/commit/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e049a7003b686002d5c091ec0465d07e5c5ff7a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e049a7003b686002d5c091ec0465d07e5c5ff7a6", "html_url": "https://github.com/rust-lang/rust/commit/e049a7003b686002d5c091ec0465d07e5c5ff7a6"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "6db9954820678d942475097346953f3eb0ce40d4", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -13,12 +13,15 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: @MetaItem,\n                              item: @Item,\n                              push: |@Item|) {\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -32,7 +35,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: Vec::new(),\n                 ret_ty: Self,\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_clone(\"Clone\", c, s, sub)\n             }"}, {"sha": "8a877a2a7a4a35b081836018e5aace6baa9867cb", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -13,6 +13,7 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n@@ -31,18 +32,20 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     }\n \n     macro_rules! md (\n-        ($name:expr, $f:ident) => {\n+        ($name:expr, $f:ident) => { {\n+            let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+            let attrs = vec!(cx.attribute(span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: true,\n                 combine_substructure: $f\n             }\n-        }\n+        } }\n     );\n \n     let trait_def = TraitDef {"}, {"sha": "2b2a490e5a403932f493f1ec4049cb94c20276e6", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -14,25 +14,28 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: @MetaItem,\n                            item: @Item,\n                            push: |@Item|) {\n     macro_rules! md (\n-        ($name:expr, $op:expr, $equal:expr) => {\n+        ($name:expr, $op:expr, $equal:expr) => { {\n+            let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+            let attrs = vec!(cx.attribute(span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: |cx, span, substr| cs_op($op, $equal, cx, span, substr)\n             }\n-        }\n+        } }\n     );\n \n     let trait_def = TraitDef {"}, {"sha": "24e0fc73f2a3d1234e322a2c116013725d9ab1a1", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -13,6 +13,7 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                                span: Span,\n@@ -33,6 +34,11 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                        substr)\n     }\n \n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let hidden = cx.meta_word(span, InternedString::new(\"hidden\"));\n+    let doc = cx.meta_list(span, InternedString::new(\"doc\"), vec!(hidden));\n+    let attrs = vec!(cx.attribute(span, inline),\n+                     cx.attribute(span, doc));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -46,7 +52,7 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: true,\n                 combine_substructure: cs_total_eq_assert\n             }"}, {"sha": "c2e52f7ef7701a8a054112aab68e2c51448b2718", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -14,6 +14,7 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n use std::cmp::{Ordering, Equal, Less, Greater};\n \n@@ -22,6 +23,8 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 mitem: @MetaItem,\n                                 item: @Item,\n                                 push: |@Item|) {\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -35,7 +38,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: cs_cmp\n             }"}, {"sha": "56fde41635f18befd0c29587f03121448900dd5d", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -50,7 +50,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(vec!(\"std\", \"result\", \"Result\"), None,\n                                           vec!(~Self, ~Literal(Path::new_local(\"__E\"))), true)),\n-                inline: false,\n+                attributes: Vec::new(),\n                 const_nonmatching: true,\n                 combine_substructure: decodable_substructure,\n             })"}, {"sha": "e89e25dd26c8337eeb0d7b62688bcd0c9d34b60b", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -13,12 +13,15 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             item: @Item,\n                             push: |@Item|) {\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -32,7 +35,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                 explicit_self: None,\n                 args: Vec::new(),\n                 ret_ty: Self,\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: default_substructure\n             })"}, {"sha": "8fdb994ecdd80ba2142e8cf062abc35395565fe6", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -121,7 +121,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                            vec!(~Tuple(Vec::new()),\n                                                 ~Literal(Path::new_local(\"__E\"))),\n                                            true)),\n-                inline: false,\n+                attributes: Vec::new(),\n                 const_nonmatching: true,\n                 combine_substructure: encodable_substructure,\n             })"}, {"sha": "f5bc3319da163391ef758d4fc8ba2b07793df7e0", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -227,8 +227,7 @@ pub struct MethodDef<'a> {\n     /// Return type\n     pub ret_ty: Ty<'a>,\n \n-    /// Whether to mark this as #[inline]\n-    pub inline: bool,\n+    pub attributes: Vec<ast::Attribute>,\n \n     /// if the value of the nonmatching enums is independent of the\n     /// actual enum variants, i.e. can use _ => .. match.\n@@ -604,23 +603,10 @@ impl<'a> MethodDef<'a> {\n         let fn_decl = cx.fn_decl(args, ret_type);\n         let body_block = cx.block_expr(body);\n \n-        let attrs = if self.inline {\n-            vec!(\n-                cx\n-                      .attribute(trait_.span,\n-                                 cx\n-                                       .meta_word(trait_.span,\n-                                                  InternedString::new(\n-                                                      \"inline\")))\n-            )\n-        } else {\n-            Vec::new()\n-        };\n-\n         // Create the method.\n         @ast::Method {\n             ident: method_ident,\n-            attrs: attrs,\n+            attrs: self.attributes.clone(),\n             generics: fn_generics,\n             explicit_self: explicit_self,\n             fn_style: ast::NormalFn,"}, {"sha": "c6f0900d27bd73a90d8d6e76fa6f04b9af86e3c0", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -14,6 +14,7 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,\n@@ -34,6 +35,8 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n          LifetimeBounds::empty(),\n          Path::new(vec!(\"std\", \"hash\", \"sip\", \"SipState\")))\n     };\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let hash_trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -47,7 +50,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(Ptr(~Literal(args), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: hash_substructure\n             }"}, {"sha": "90b011d24e3eacc3b29528272f7ad8d508203f95", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -21,6 +21,8 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       mitem: @MetaItem,\n                                       item: @Item,\n                                       push: |@Item|) {\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -38,8 +40,8 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                            None,\n                                            vec!(~Self),\n                                            true)),\n-                // liable to cause code-bloat\n-                inline: true,\n+                // #[inline] liable to cause code-bloat\n+                attributes: attrs.clone(),\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_from(\"i64\", c, s, sub),\n             },\n@@ -53,8 +55,8 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                            None,\n                                            vec!(~Self),\n                                            true)),\n-                // liable to cause code-bloat\n-                inline: true,\n+                // #[inline] liable to cause code-bloat\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_from(\"u64\", c, s, sub),\n             })"}, {"sha": "597e0959de2df8a4a7ebeeb62580f2c2b7ce6146", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -41,7 +41,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                         Borrowed(None, ast::MutMutable))\n                 ),\n                 ret_ty: Self,\n-                inline: false,\n+                attributes: Vec::new(),\n                 const_nonmatching: false,\n                 combine_substructure: rand_substructure\n             }"}, {"sha": "153374fbc1630d60a8547fdf62e0fc2700eb5f51", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -42,7 +42,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(fmtr),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n-                inline: false,\n+                attributes: Vec::new(),\n                 const_nonmatching: false,\n                 combine_substructure: show_substructure\n             }"}, {"sha": "cbb113f15f707169479f425690151da9a1296c31", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=2cf1e4b0ceb4db8ab48144407f3afa9ccd8ced2c", "patch": "@@ -13,12 +13,15 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n+use parse::token::InternedString;\n \n pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             item: @Item,\n                             push: |@Item|) {\n+    let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n+    let attrs = vec!(cx.attribute(span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -32,7 +35,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                 explicit_self: None,\n                 args: Vec::new(),\n                 ret_ty: Self,\n-                inline: true,\n+                attributes: attrs.clone(),\n                 const_nonmatching: false,\n                 combine_substructure: zero_substructure\n             },\n@@ -42,7 +45,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: Vec::new(),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n-                inline: true,\n+                attributes: attrs,\n                 const_nonmatching: false,\n                 combine_substructure: |cx, span, substr| {\n                     cs_and(|cx, span, _, _| cx.span_bug(span,"}]}