{"sha": "8964fcc5ac9cefcc55ea071142c3c81d623a52be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjRmY2M1YWM5Y2VmY2M1NWVhMDcxMTQyYzNjODFkNjIzYTUyYmU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-07T05:34:22Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:09Z"}, "message": "Implement DoubleEndedIterator on Range\n\nRange is now invertable as long as its element type conforms to Integer.\n\nRemove int::range_rev() et al in favor of range().invert().", "tree": {"sha": "4132b0ac9bc5396713071a4105ce29ecf003b2db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4132b0ac9bc5396713071a4105ce29ecf003b2db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8964fcc5ac9cefcc55ea071142c3c81d623a52be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8964fcc5ac9cefcc55ea071142c3c81d623a52be", "html_url": "https://github.com/rust-lang/rust/commit/8964fcc5ac9cefcc55ea071142c3c81d623a52be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8964fcc5ac9cefcc55ea071142c3c81d623a52be/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8523f6d64355f53bb9453c2c9d32e835bec790ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8523f6d64355f53bb9453c2c9d32e835bec790ae", "html_url": "https://github.com/rust-lang/rust/commit/8523f6d64355f53bb9453c2c9d32e835bec790ae"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "d10a5541e41a683fef643f9c02aa2957abf2a15c", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -18,9 +18,9 @@ implementing the `Iterator` trait.\n */\n \n use cmp;\n-use num::{Zero, One, Saturating};\n+use num::{Zero, One, Integer, Saturating};\n use option::{Option, Some, None};\n-use ops::{Add, Mul};\n+use ops::{Add, Mul, Sub};\n use cmp::Ord;\n use clone::Clone;\n use uint;\n@@ -1531,7 +1531,7 @@ pub fn range<A: Add<A, A> + Ord + Clone + One>(start: A, stop: A) -> Range<A> {\n     Range{state: start, stop: stop, one: One::one()}\n }\n \n-impl<A: Add<A, A> + Ord + Clone + One> Iterator<A> for Range<A> {\n+impl<A: Add<A, A> + Ord + Clone> Iterator<A> for Range<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.state < self.stop {\n@@ -1544,6 +1544,22 @@ impl<A: Add<A, A> + Ord + Clone + One> Iterator<A> for Range<A> {\n     }\n }\n \n+impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        if self.stop > self.state {\n+            // Integer doesn't technically define this rule, but we're going to assume that every\n+            // Integer is reachable from every other one by adding or subtracting enough Ones. This\n+            // seems like a reasonable-enough rule that every Integer should conform to, even if it\n+            // can't be statically checked.\n+            self.stop = self.stop - self.one;\n+            Some(self.stop.clone())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2121,4 +2137,17 @@ mod tests {\n         check_randacc_iter(xs.iter().cycle().take_(27), 27);\n         check_randacc_iter(empty.iter().cycle(), 0);\n     }\n+\n+    #[test]\n+    fn test_double_ended_range() {\n+        assert_eq!(range(11i, 14).invert().collect::<~[int]>(), ~[13i, 12, 11]);\n+        for _ in range(10i, 0).invert() {\n+            fail!(\"unreachable\");\n+        }\n+\n+        assert_eq!(range(11u, 14).invert().collect::<~[uint]>(), ~[13u, 12, 11]);\n+        for _ in range(10u, 0).invert() {\n+            fail!(\"unreachable\");\n+        }\n+    }\n }"}, {"sha": "b692bedebfd54f0ed17b39f5fcc99701abec5d32", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -124,14 +124,6 @@ pub fn range_step_inclusive(start: $T, last: $T, step: $T, it: &fn($T) -> bool)\n     range_step_core(start, last, step, Closed, it)\n }\n \n-\n-#[inline]\n-/// Iterate over the range (`hi`..`lo`]\n-pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n-    if hi == min_value { return true; }\n-    range_step_inclusive(hi-1, lo, -1 as $T, it)\n-}\n-\n impl Num for $T {}\n \n #[cfg(not(test))]\n@@ -889,10 +881,6 @@ mod tests {\n     fn test_ranges() {\n         let mut l = ~[];\n \n-        do range_rev(14,11) |i| {\n-            l.push(i);\n-            true\n-        };\n         do range_step(20,26,2) |i| {\n             l.push(i);\n             true\n@@ -917,18 +905,14 @@ mod tests {\n             l.push(i);\n             true\n         };\n-        assert_eq!(l, ~[13,12,11,\n-                        20,22,24,\n+        assert_eq!(l, ~[20,22,24,\n                         36,34,32,\n                         max_value-2,\n                         max_value-3,max_value-1,\n                         min_value+2,\n                         min_value+3,min_value+1]);\n \n         // None of the `fail`s should execute.\n-        do range_rev(0,10) |_i| {\n-            fail!(~\"unreachable\");\n-        };\n         do range_step(10,0,1) |_i| {\n             fail!(~\"unreachable\");\n         };"}, {"sha": "29b8f29d87d3f866a37bff576ea9e408be768687", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -125,13 +125,6 @@ pub fn range_step_inclusive(start: $T, last: $T, step: $T_SIGNED, it: &fn($T) ->\n     range_step_core(start, last, step, Closed, it)\n }\n \n-#[inline]\n-/// Iterate over the range (`hi`..`lo`]\n-pub fn range_rev(hi: $T, lo: $T, it: &fn($T) -> bool) -> bool {\n-    if hi == min_value { return true; }\n-    range_step_inclusive(hi-1, lo, -1 as $T_SIGNED, it)\n-}\n-\n impl Num for $T {}\n \n #[cfg(not(test))]\n@@ -654,10 +647,6 @@ mod tests {\n     pub fn test_ranges() {\n         let mut l = ~[];\n \n-        do range_rev(14,11) |i| {\n-            l.push(i);\n-            true\n-        };\n         do range_step(20,26,2) |i| {\n             l.push(i);\n             true\n@@ -683,18 +672,14 @@ mod tests {\n             true\n         };\n \n-        assert_eq!(l, ~[13,12,11,\n-                        20,22,24,\n+        assert_eq!(l, ~[20,22,24,\n                         36,34,32,\n                         max_value-2,\n                         max_value-3,max_value-1,\n                         min_value+2,\n                         min_value+3,min_value+1]);\n \n         // None of the `fail`s should execute.\n-        do range_rev(0,0) |_i| {\n-            fail!(\"unreachable\");\n-        };\n         do range_step(10,0,1) |_i| {\n             fail!(\"unreachable\");\n         };"}, {"sha": "694aa672af7b3361365c6feb6818cca6229e188c", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -632,7 +632,6 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n     use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n     use libc::funcs::bsd44::getdtablesize;\n-    use int;\n \n     mod rustrt {\n         use libc::c_void;\n@@ -665,10 +664,9 @@ fn spawn_process_os(prog: &str, args: &[~str],\n             fail!(\"failure in dup3(err_fd, 2): %s\", os::last_os_error());\n         }\n         // close all other fds\n-        do int::range_rev(getdtablesize() as int, 3) |fd| {\n+        for fd in range(3, getdtablesize()).invert() {\n             close(fd as c_int);\n-            true\n-        };\n+        }\n \n         do with_dirp(dir) |dirp| {\n             if !dirp.is_null() && chdir(dirp) == -1 {"}, {"sha": "5ef5526e5162d4833c3aeff09056c9d94fdc80d4", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -282,13 +282,14 @@ impl<T> TrieNode<T> {\n     }\n \n     fn each_reverse<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n-        do uint::range_rev(self.children.len(), 0) |idx| {\n-            match self.children[idx] {\n-                Internal(ref x) => x.each_reverse(|i,t| f(i,t)),\n-                External(k, ref v) => f(&k, v),\n-                Nothing => true\n+        for elt in self.children.rev_iter() {\n+            match *elt {\n+                Internal(ref x) => if !x.each_reverse(|i,t| f(i,t)) { return false },\n+                External(k, ref v) => if !f(&k, v) { return false },\n+                Nothing => ()\n             }\n         }\n+        true\n     }\n \n     fn mutate_values<'a>(&'a mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n@@ -539,10 +540,9 @@ mod test_map {\n     fn test_each_break() {\n         let mut m = TrieMap::new();\n \n-        do uint::range_rev(uint::max_value, uint::max_value - 10000) |x| {\n+        for x in range(uint::max_value - 10000, uint::max_value).invert() {\n             m.insert(x, x / 2);\n-            true\n-        };\n+        }\n \n         let mut n = uint::max_value - 10000;\n         do m.each |k, v| {\n@@ -580,10 +580,9 @@ mod test_map {\n     fn test_each_reverse_break() {\n         let mut m = TrieMap::new();\n \n-        do uint::range_rev(uint::max_value, uint::max_value - 10000) |x| {\n+        for x in range(uint::max_value - 10000, uint::max_value).invert() {\n             m.insert(x, x / 2);\n-            true\n-        };\n+        }\n \n         let mut n = uint::max_value - 1;\n         do m.each_reverse |k, v| {\n@@ -634,10 +633,9 @@ mod test_map {\n         let last = uint::max_value;\n \n         let mut map = TrieMap::new();\n-        do uint::range_rev(last, first) |x| {\n+        for x in range(first, last).invert() {\n             map.insert(x, x / 2);\n-            true\n-        };\n+        }\n \n         let mut i = 0;\n         for (k, &v) in map.iter() {"}, {"sha": "6475012e0097e9e7180f7eb55fce18ed49fe012e", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -53,24 +53,21 @@ fn descending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n     io::println(\" Descending integers:\");\n \n     do timed(\"insert\") {\n-        do uint::range_rev(n_keys, 0) |i| {\n+        for i in range(0, n_keys).invert() {\n             map.insert(i, i + 1);\n-            true\n-        };\n+        }\n     }\n \n     do timed(\"search\") {\n-        do uint::range_rev(n_keys, 0) |i| {\n+        for i in range(0, n_keys).invert() {\n             assert_eq!(map.find(&i).unwrap(), &(i + 1));\n-            true\n-        };\n+        }\n     }\n \n     do timed(\"remove\") {\n-        do uint::range_rev(n_keys, 0) |i| {\n+        for i in range(0, n_keys) {\n             assert!(map.remove(&i));\n-            true\n-        };\n+        }\n     }\n }\n "}, {"sha": "2841756d4a0e10e1d852b1e651e62f7903f954ac", "filename": "src/test/run-fail/assert-eq-macro-fail", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be"}, {"sha": "ea7d4a651f75d181b88bc80fa85fa9f771e9768d", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8964fcc5ac9cefcc55ea071142c3c81d623a52be/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=8964fcc5ac9cefcc55ea071142c3c81d623a52be", "patch": "@@ -20,11 +20,11 @@ fn int_range(lo: int,  hi: int, it: &fn(int) -> bool) -> bool {\n }\n \n fn uint_range_rev(hi: uint, lo: uint, it: &fn(uint) -> bool) -> bool {\n-    uint::range_rev(hi, lo, it)\n+    range(lo, hi).invert().advance(it)\n }\n \n fn int_range_rev(hi: int,  lo: int, it: &fn(int) -> bool) -> bool {\n-    int::range_rev(hi, lo, it)\n+    range(lo, hi).invert().advance(it)\n }\n \n fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {"}]}