{"sha": "6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTZjNWZiZWRiMzY4MWY5ZmU1ZWZhNWY5YmVmZTdmZjJmOTFlNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T09:35:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "fallout: update codegen-units tests", "tree": {"sha": "b40f5b9abcd663034089ede779b0838c7b6b079e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40f5b9abcd663034089ede779b0838c7b6b079e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "html_url": "https://github.com/rust-lang/rust/commit/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e26508744850e9c541e83d27f710cf221360fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e26508744850e9c541e83d27f710cf221360fbc", "html_url": "https://github.com/rust-lang/rust/commit/5e26508744850e9c541e83d27f710cf221360fbc"}], "stats": {"total": 148, "additions": 74, "deletions": 74}, "files": [{"sha": "30f3ef12d07435cb059d8b14947705906bccabb5", "filename": "src/test/codegen-units/cross-crate-closures.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fcross-crate-closures.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -19,12 +19,12 @@ extern crate cgu_extern_closures;\n //~ TRANS_ITEM fn cross_crate_closures::main[0]\n fn main() {\n \n-    //~ TRANS_ITEM fn cgu_extern_closures[0]::inlined_fn[0]\n-    //~ TRANS_ITEM fn cgu_extern_closures[0]::inlined_fn[0]::{{closure}}[0]\n+    //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]\n+    //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]::{{closure}}[0]\n     let _ = cgu_extern_closures::inlined_fn(1, 2);\n \n-    //~ TRANS_ITEM fn cgu_extern_closures[0]::inlined_fn_generic[0]<i32>\n-    //~ TRANS_ITEM fn cgu_extern_closures[0]::inlined_fn_generic[0]::{{closure}}[0]<i32>\n+    //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn_generic[0]<i32>\n+    //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn_generic[0]::{{closure}}[0]<i32>\n     let _ = cgu_extern_closures::inlined_fn_generic(3, 4, 5i32);\n \n     // Nothing should be generated for this call, we just link to the instance instance"}, {"sha": "ada1234b852a1b1c943c1b9bd92de1182fcbacbc", "filename": "src/test/codegen-units/cross-crate-generic-functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fcross-crate-generic-functions.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -19,12 +19,12 @@ extern crate cgu_generic_function;\n //~ TRANS_ITEM fn cross_crate_generic_functions::main[0]\n fn main()\n {\n-    //~ TRANS_ITEM fn cgu_generic_function[0]::bar[0]<u32>\n-    //~ TRANS_ITEM fn cgu_generic_function[0]::foo[0]<u32>\n+    //~ TRANS_ITEM fn cgu_generic_function::bar[0]<u32>\n+    //~ TRANS_ITEM fn cgu_generic_function::foo[0]<u32>\n     let _ = cgu_generic_function::foo(1u32);\n \n-    //~ TRANS_ITEM fn cgu_generic_function[0]::bar[0]<u64>\n-    //~ TRANS_ITEM fn cgu_generic_function[0]::foo[0]<u64>\n+    //~ TRANS_ITEM fn cgu_generic_function::bar[0]<u64>\n+    //~ TRANS_ITEM fn cgu_generic_function::foo[0]<u64>\n     let _ = cgu_generic_function::foo(2u64);\n \n     // This should not introduce a codegen item"}, {"sha": "9f29a90bffbf645932bfa08edf883b2b1f135a27", "filename": "src/test/codegen-units/cross-crate-trait-method.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fcross-crate-trait-method.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -29,31 +29,31 @@ fn main()\n     // Currently, no object code is generated for trait methods with default\n     // implemenations, unless they are actually called from somewhere. Therefore\n     // we cannot import the implementations and have to create our own inline.\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl[0]<u32>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl[0]<u32>\n     let _ = Trait::with_default_impl(0u32);\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl[0]<char>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl[0]<char>\n     let _ = Trait::with_default_impl('c');\n \n \n \n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl_generic[0]<u32, &str>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<u32, &str>\n     let _ = Trait::with_default_impl_generic(0u32, \"abc\");\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl_generic[0]<u32, bool>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<u32, bool>\n     let _ = Trait::with_default_impl_generic(0u32, false);\n \n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl_generic[0]<char, i16>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<char, i16>\n     let _ = Trait::with_default_impl_generic('x', 1i16);\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::Trait[0]::with_default_impl_generic[0]<char, i32>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<char, i32>\n     let _ = Trait::with_default_impl_generic('y', 0i32);\n \n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::u32.Trait[0]::without_default_impl_generic[0]<char>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[1]::without_default_impl_generic[0]<char>\n     let _: (u32, char) = Trait::without_default_impl_generic('c');\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::u32.Trait[0]::without_default_impl_generic[0]<bool>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[1]::without_default_impl_generic[0]<bool>\n     let _: (u32, bool) = Trait::without_default_impl_generic(false);\n \n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::char.Trait[0]::without_default_impl_generic[0]<char>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<char>\n     let _: (char, char) = Trait::without_default_impl_generic('c');\n-    //~ TRANS_ITEM fn cgu_export_trait_method[0]::char.Trait[0]::without_default_impl_generic[0]<bool>\n+    //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<bool>\n     let _: (char, bool) = Trait::without_default_impl_generic(false);\n }\n "}, {"sha": "476c84044e68656390521693be220ecbab4c461e", "filename": "src/test/codegen-units/generic-drop-glue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fgeneric-drop-glue.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -49,17 +49,17 @@ struct NonGenericWithDrop(i32);\n \n impl Drop for NonGenericWithDrop {\n     fn drop(&mut self) {}\n-//~ TRANS_ITEM fn generic_drop_glue::NonGenericWithDrop.Drop[0]::drop[0]\n+//~ TRANS_ITEM fn generic_drop_glue::{{impl}}[2]::drop[0]\n }\n \n //~ TRANS_ITEM fn generic_drop_glue::main[0]\n fn main() {\n     //~ TRANS_ITEM drop-glue generic_drop_glue::StructWithDrop[0]<i8, char>\n-    //~ TRANS_ITEM fn generic_drop_glue::StructWithDrop<T1, T2>.Drop[0]::drop[0]<i8, char>\n+    //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<i8, char>\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::StructWithDrop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n-    //~ TRANS_ITEM fn generic_drop_glue::StructWithDrop<T1, T2>.Drop[0]::drop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n+    //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n     let _ = StructWithDrop { x: \"&str\", y: NonGenericNoDrop(0) }.y;\n \n     // Should produce no drop glue\n@@ -71,14 +71,14 @@ fn main() {\n     let _ = StructNoDrop { x: NonGenericWithDrop(0), y: 0f64 }.y;\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::EnumWithDrop[0]<i32, i64>\n-    //~ TRANS_ITEM fn generic_drop_glue::EnumWithDrop<T1, T2>.Drop[0]::drop[0]<i32, i64>\n+    //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<i32, i64>\n     let _ = match EnumWithDrop::A::<i32, i64>(0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as i32\n     };\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::EnumWithDrop[0]<f64, f32>\n-    //~ TRANS_ITEM fn generic_drop_glue::EnumWithDrop<T1, T2>.Drop[0]::drop[0]<f64, f32>\n+    //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<f64, f32>\n     let _ = match EnumWithDrop::B::<f64, f32>(1.0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as f64"}, {"sha": "a27515fd39b701dd99b8328f320c0a858bfdf26c", "filename": "src/test/codegen-units/generic-impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fgeneric-impl.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -40,11 +40,11 @@ pub struct LifeTimeOnly<'a> {\n \n impl<'a> LifeTimeOnly<'a> {\n \n-    //~ TRANS_ITEM fn generic_impl::LifeTimeOnly<'a>[0]::foo[0]\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[1]::foo[0]\n     pub fn foo(&self) {}\n-    //~ TRANS_ITEM fn generic_impl::LifeTimeOnly<'a>[0]::bar[0]\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[1]::bar[0]\n     pub fn bar(&'a self) {}\n-    //~ TRANS_ITEM fn generic_impl::LifeTimeOnly<'a>[0]::baz[0]\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[1]::baz[0]\n     pub fn baz<'b>(&'b self) {}\n \n     pub fn non_instantiated<T>(&self) {}\n@@ -53,27 +53,27 @@ impl<'a> LifeTimeOnly<'a> {\n \n //~ TRANS_ITEM fn generic_impl::main[0]\n fn main() {\n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::new[0]<i32>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<i32>\n     //~ TRANS_ITEM fn generic_impl::id[0]<i32>\n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::get[0]<i32, i16>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<i32, i16>\n     let _ = Struct::new(0i32).get(0i16);\n \n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::new[0]<i64>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<i64>\n     //~ TRANS_ITEM fn generic_impl::id[0]<i64>\n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::get[0]<i64, i16>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<i64, i16>\n     let _ = Struct::new(0i64).get(0i16);\n \n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::new[0]<char>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<char>\n     //~ TRANS_ITEM fn generic_impl::id[0]<char>\n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::get[0]<char, i16>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<char, i16>\n     let _ = Struct::new('c').get(0i16);\n \n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::new[0]<&str>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<&str>\n     //~ TRANS_ITEM fn generic_impl::id[0]<&str>\n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::get[0]<generic_impl::Struct[0]<&str>, i16>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<generic_impl::Struct[0]<&str>, i16>\n     let _ = Struct::new(Struct::new(\"str\")).get(0i16);\n \n-    //~ TRANS_ITEM fn generic_impl::Struct<T>[0]::new[0]<generic_impl::Struct[0]<&str>>\n+    //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<generic_impl::Struct[0]<&str>>\n     //~ TRANS_ITEM fn generic_impl::id[0]<generic_impl::Struct[0]<&str>>\n     let _ = (Struct::new(Struct::new(\"str\")).f)(Struct::new(\"str\"));\n }"}, {"sha": "a3bfa67e1ae44eb2c05b7d23dba8547e1b0ad890", "filename": "src/test/codegen-units/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fimpl-in-non-instantiated-generic.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -21,7 +21,7 @@ trait SomeTrait {\n // discovered.\n pub fn generic_function<T>(x: T) -> (T, i32) {\n     impl SomeTrait for i64 {\n-        //~ TRANS_ITEM fn impl_in_non_instantiated_generic::generic_function[0]::i64.SomeTrait[0]::foo[0]\n+        //~ TRANS_ITEM fn impl_in_non_instantiated_generic::generic_function[0]::{{impl}}[0]::foo[0]\n         fn foo(&self) {}\n     }\n "}, {"sha": "b77252512200103aad028b238058dfe6c4934eec", "filename": "src/test/codegen-units/instantiation-through-vtable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Finstantiation-through-vtable.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -31,12 +31,12 @@ impl<T> Trait for Struct<T> {\n fn main() {\n     let s1 = Struct { _a: 0u32 };\n \n-    //~ TRANS_ITEM fn instantiation_through_vtable::Struct<T>.Trait[0]::foo[0]<u32>\n-    //~ TRANS_ITEM fn instantiation_through_vtable::Struct<T>.Trait[0]::bar[0]<u32>\n+    //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u32>\n+    //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u32>\n     let _ = &s1 as &Trait;\n \n     let s1 = Struct { _a: 0u64 };\n-    //~ TRANS_ITEM fn instantiation_through_vtable::Struct<T>.Trait[0]::foo[0]<u64>\n-    //~ TRANS_ITEM fn instantiation_through_vtable::Struct<T>.Trait[0]::bar[0]<u64>\n+    //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u64>\n+    //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u64>\n     let _ = &s1 as &Trait;\n }"}, {"sha": "bd8b0c605aecf8b96a48a468c35acb04a57de1ff", "filename": "src/test/codegen-units/non-generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fnon-generic-drop-glue.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -19,7 +19,7 @@ struct StructWithDrop {\n }\n \n impl Drop for StructWithDrop {\n-    //~ TRANS_ITEM fn non_generic_drop_glue::StructWithDrop.Drop[0]::drop[0]\n+    //~ TRANS_ITEM fn non_generic_drop_glue::{{impl}}[0]::drop[0]\n     fn drop(&mut self) {}\n }\n \n@@ -33,7 +33,7 @@ enum EnumWithDrop {\n }\n \n impl Drop for EnumWithDrop {\n-    //~ TRANS_ITEM fn non_generic_drop_glue::EnumWithDrop.Drop[0]::drop[0]\n+    //~ TRANS_ITEM fn non_generic_drop_glue::{{impl}}[1]::drop[0]\n     fn drop(&mut self) {}\n }\n "}, {"sha": "4e2a7c8508468f1ac82c1d8e58e722c8b53d2f50", "filename": "src/test/codegen-units/non-generic-functions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fnon-generic-functions.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -38,31 +38,31 @@ fn bar() {\n struct Struct { _x: i32 }\n \n impl Struct {\n-    //~ TRANS_ITEM fn non_generic_functions::Struct[0]::foo[0]\n+    //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]\n     fn foo() {\n         {\n-            //~ TRANS_ITEM fn non_generic_functions::Struct[0]::foo[0]::foo[0]\n+            //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]::foo[0]\n             fn foo() {}\n             foo();\n         }\n \n         {\n-            //~ TRANS_ITEM fn non_generic_functions::Struct[0]::foo[0]::foo[1]\n+            //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]::foo[1]\n             fn foo() {}\n             foo();\n         }\n     }\n \n-    //~ TRANS_ITEM fn non_generic_functions::Struct[0]::bar[0]\n+    //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]\n     fn bar(&self) {\n         {\n-            //~ TRANS_ITEM fn non_generic_functions::Struct[0]::bar[0]::foo[0]\n+            //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]::foo[0]\n             fn foo() {}\n             foo();\n         }\n \n         {\n-            //~ TRANS_ITEM fn non_generic_functions::Struct[0]::bar[0]::foo[1]\n+            //~ TRANS_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]::foo[1]\n             fn foo() {}\n             foo();\n         }"}, {"sha": "c275eb954b094296d69496812ca8002d94600354", "filename": "src/test/codegen-units/overloaded-operators.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Foverloaded-operators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Foverloaded-operators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Foverloaded-operators.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -23,7 +23,7 @@ pub struct Indexable {\n impl Index<usize> for Indexable {\n     type Output = u8;\n \n-    //~ TRANS_ITEM fn overloaded_operators::Indexable.Index<usize>[0]::index[0]\n+    //~ TRANS_ITEM fn overloaded_operators::{{impl}}[0]::index[0]\n     fn index(&self, index: usize) -> &Self::Output {\n         if index >= 3 {\n             &self.data[0]\n@@ -34,7 +34,7 @@ impl Index<usize> for Indexable {\n }\n \n impl IndexMut<usize> for Indexable {\n-    //~ TRANS_ITEM fn overloaded_operators::Indexable.IndexMut<usize>[0]::index_mut[0]\n+    //~ TRANS_ITEM fn overloaded_operators::{{impl}}[1]::index_mut[0]\n     fn index_mut(&mut self, index: usize) -> &mut Self::Output {\n         if index >= 3 {\n             &mut self.data[0]\n@@ -45,16 +45,16 @@ impl IndexMut<usize> for Indexable {\n }\n \n \n-//~ TRANS_ITEM fn overloaded_operators::Equatable.::std::cmp::PartialEq[0]::eq[0]\n-//~ TRANS_ITEM fn overloaded_operators::Equatable.::std::cmp::PartialEq[0]::ne[0]\n+//~ TRANS_ITEM fn overloaded_operators::{{impl}}[2]::eq[0]\n+//~ TRANS_ITEM fn overloaded_operators::{{impl}}[2]::ne[0]\n #[derive(PartialEq)]\n pub struct Equatable(u32);\n \n \n impl Add<u32> for Equatable {\n     type Output = u32;\n \n-    //~ TRANS_ITEM fn overloaded_operators::Equatable.Add<u32>[0]::add[0]\n+    //~ TRANS_ITEM fn overloaded_operators::{{impl}}[3]::add[0]\n     fn add(self, rhs: u32) -> u32 {\n         self.0 + rhs\n     }\n@@ -63,7 +63,7 @@ impl Add<u32> for Equatable {\n impl Deref for Equatable {\n     type Target = u32;\n \n-    //~ TRANS_ITEM fn overloaded_operators::Equatable.Deref[0]::deref[0]\n+    //~ TRANS_ITEM fn overloaded_operators::{{impl}}[4]::deref[0]\n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }"}, {"sha": "2eb2212f0cacd0f6f166d22032a2ac105149b6ff", "filename": "src/test/codegen-units/trait-implementations.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Ftrait-implementations.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -20,15 +20,15 @@ pub trait SomeTrait {\n \n impl SomeTrait for i64 {\n \n-    //~ TRANS_ITEM fn trait_implementations::i64.SomeTrait[0]::foo[0]\n+    //~ TRANS_ITEM fn trait_implementations::{{impl}}[0]::foo[0]\n     fn foo(&self) {}\n \n     fn bar<T>(&self, _: T) {}\n }\n \n impl SomeTrait for i32 {\n \n-    //~ TRANS_ITEM fn trait_implementations::i32.SomeTrait[0]::foo[0]\n+    //~ TRANS_ITEM fn trait_implementations::{{impl}}[1]::foo[0]\n     fn foo(&self) {}\n \n     fn bar<T>(&self, _: T) {}\n@@ -42,7 +42,7 @@ pub trait SomeGenericTrait<T> {\n // Concrete impl of generic trait\n impl SomeGenericTrait<u32> for f64 {\n \n-    //~ TRANS_ITEM fn trait_implementations::f64.SomeGenericTrait<u32>[0]::foo[0]\n+    //~ TRANS_ITEM fn trait_implementations::{{impl}}[2]::foo[0]\n     fn foo(&self, _: u32) {}\n \n     fn bar<T2>(&self, _: u32, _: T2) {}\n@@ -57,25 +57,25 @@ impl<T> SomeGenericTrait<T> for f32 {\n \n //~ TRANS_ITEM fn trait_implementations::main[0]\n fn main() {\n-   //~ TRANS_ITEM fn trait_implementations::i32.SomeTrait[0]::bar[0]<char>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[1]::bar[0]<char>\n    0i32.bar('x');\n \n-   //~ TRANS_ITEM fn trait_implementations::f64.SomeGenericTrait<u32>[0]::bar[0]<&str>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[2]::bar[0]<&str>\n    0f64.bar(0u32, \"&str\");\n \n-   //~ TRANS_ITEM fn trait_implementations::f64.SomeGenericTrait<u32>[0]::bar[0]<()>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[2]::bar[0]<()>\n    0f64.bar(0u32, ());\n \n-   //~ TRANS_ITEM fn trait_implementations::f32.SomeGenericTrait<T>[0]::foo[0]<char>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::foo[0]<char>\n    0f32.foo('x');\n \n-   //~ TRANS_ITEM fn trait_implementations::f32.SomeGenericTrait<T>[0]::foo[0]<i64>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::foo[0]<i64>\n    0f32.foo(-1i64);\n \n-   //~ TRANS_ITEM fn trait_implementations::f32.SomeGenericTrait<T>[0]::bar[0]<u32, ()>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<u32, ()>\n    0f32.bar(0u32, ());\n \n-   //~ TRANS_ITEM fn trait_implementations::f32.SomeGenericTrait<T>[0]::bar[0]<&str, &str>\n+   //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<&str, &str>\n    0f32.bar(\"&str\", \"&str\");\n }\n "}, {"sha": "e7006d73ef166c83c26c2d9ea5eebb1504712b7b", "filename": "src/test/codegen-units/trait-method-as-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Ftrait-method-as-argument.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -39,7 +39,7 @@ fn take_foo_mut<T, F: FnMut(T) -> T>(mut f: F, arg: T) -> T {\n //~ TRANS_ITEM fn trait_method_as_argument::main[0]\n fn main() {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<u32, fn(u32) -> u32>\n-    //~ TRANS_ITEM fn trait_method_as_argument::u32.Trait[0]::foo[0]\n+    //~ TRANS_ITEM fn trait_method_as_argument::{{impl}}[0]::foo[0]\n     take_foo_once(Trait::foo, 0u32);\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<char, fn(char) -> char>"}, {"sha": "21bb29199a685715ba4832ed0b35e071c6610c78", "filename": "src/test/codegen-units/transitive-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Ftransitive-drop-glue.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -21,7 +21,7 @@ struct Intermediate(Leaf);\n struct Leaf;\n \n impl Drop for Leaf {\n-    //~ TRANS_ITEM fn transitive_drop_glue::Leaf.Drop[0]::drop[0]\n+    //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[0]::drop[0]\n     fn drop(&mut self) {}\n }\n \n@@ -44,12 +44,12 @@ fn main() {\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::RootGen[0]<u32>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::IntermediateGen[0]<u32>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::LeafGen[0]<u32>\n-    //~ TRANS_ITEM fn transitive_drop_glue::LeafGen<T>.Drop[0]::drop[0]<u32>\n+    //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<u32>\n     let _ = RootGen(IntermediateGen(LeafGen(0u32)));\n \n     //~ TRANS_ITEM drop-glue transitive_drop_glue::RootGen[0]<i16>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::IntermediateGen[0]<i16>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::LeafGen[0]<i16>\n-    //~ TRANS_ITEM fn transitive_drop_glue::LeafGen<T>.Drop[0]::drop[0]<i16>\n+    //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<i16>\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n }"}, {"sha": "1bc235de88e1f603c33b3222ddb6b496b0d97081", "filename": "src/test/codegen-units/tuple-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Ftuple-drop-glue.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -17,7 +17,7 @@\n struct Dropped;\n \n impl Drop for Dropped {\n-    //~ TRANS_ITEM fn tuple_drop_glue::Dropped.Drop[0]::drop[0]\n+    //~ TRANS_ITEM fn tuple_drop_glue::{{impl}}[0]::drop[0]\n     fn drop(&mut self) {}\n }\n "}, {"sha": "45ba441bc8ba6066bef2f85c6eed8fbd37de471c", "filename": "src/test/codegen-units/unsizing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Funsizing.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -57,11 +57,11 @@ fn main()\n {\n     // simple case\n     let bool_sized = &true;\n-    //~ TRANS_ITEM fn unsizing::bool.Trait[0]::foo[0]\n+    //~ TRANS_ITEM fn unsizing::{{impl}}[0]::foo[0]\n     let _bool_unsized = bool_sized as &Trait;\n \n     let char_sized = &true;\n-    //~ TRANS_ITEM fn unsizing::char.Trait[0]::foo[0]\n+    //~ TRANS_ITEM fn unsizing::{{impl}}[1]::foo[0]\n     let _char_unsized = char_sized as &Trait;\n \n     // struct field\n@@ -70,11 +70,11 @@ fn main()\n         _b: 2,\n         _c: 3.0f64\n     };\n-    //~ TRANS_ITEM fn unsizing::f64.Trait[0]::foo[0]\n+    //~ TRANS_ITEM fn unsizing::{{impl}}[2]::foo[0]\n     let _struct_unsized = struct_sized as &Struct<Trait>;\n \n     // custom coercion\n     let wrapper_sized = Wrapper(&0u32);\n-    //~ TRANS_ITEM fn unsizing::u32.Trait[0]::foo[0]\n+    //~ TRANS_ITEM fn unsizing::{{impl}}[3]::foo[0]\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n }"}, {"sha": "8689beb3fb77e98e6df3cc05214d348615f01134", "filename": "src/test/codegen-units/unused-traits-and-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Funused-traits-and-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73/src%2Ftest%2Fcodegen-units%2Funused-traits-and-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Funused-traits-and-generics.rs?ref=6056c5fbedb3681f9fe5efa5f9befe7ff2f91e73", "patch": "@@ -85,5 +85,5 @@ impl NonGeneric {\n }\n \n // Only the non-generic methods should be instantiated:\n-//~ TRANS_ITEM fn unused_traits_and_generics::NonGeneric[0]::foo[0]\n+//~ TRANS_ITEM fn unused_traits_and_generics::{{impl}}[3]::foo[0]\n //~ TRANS_ITEM drop-glue i8"}]}