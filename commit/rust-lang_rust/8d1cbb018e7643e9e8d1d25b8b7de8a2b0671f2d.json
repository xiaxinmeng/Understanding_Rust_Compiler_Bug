{"sha": "8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWNiYjAxOGU3NjQzZTllOGQxZDI1YjhiN2RlOGEyYjA2NzFmMmQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-28T05:50:24Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T05:48:05Z"}, "message": "private no-mangle lints: help hint note if visibility modifier is `pub`\n\nIf the item is `pub`, one imagines users being confused as to why it's\nnot reachable/exported; a code suggestion is beyond our local knowledge\nhere, but we can at least offer a prose hint. (Thanks to Vadim\nPetrochenkov for shooting down the present author's original bad idea\nfor the note text.)\n\nWhile we're here, use proper HELP expectations instead of ad hoc\ncomments to communicate (and now, enforce) the expected suggestions in\ntest/ui/lint/suggestions.rs.", "tree": {"sha": "e913a85e4793d84750a5f288583c064e2e534f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e913a85e4793d84750a5f288583c064e2e534f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "html_url": "https://github.com/rust-lang/rust/commit/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53307473fdaebde701a54fc58b307d142b38b569", "url": "https://api.github.com/repos/rust-lang/rust/commits/53307473fdaebde701a54fc58b307d142b38b569", "html_url": "https://github.com/rust-lang/rust/commit/53307473fdaebde701a54fc58b307d142b38b569"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "96dcb458303f89c4e6c4f0528e4996b38a2267f5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "patch": "@@ -1177,7 +1177,7 @@ impl LintPass for InvalidNoMangleItems {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        let suggest_make_pub = |vis: &hir::Visibility, err: &mut DiagnosticBuilder| {\n+        let suggest_export = |vis: &hir::Visibility, err: &mut DiagnosticBuilder| {\n             let suggestion = match vis.node {\n                 hir::VisibilityInherited => {\n                     // inherited visibility is empty span at item start; need an extra space\n@@ -1187,7 +1187,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                 hir::VisibilityCrate(_) => {\n                     Some(\"pub\".to_owned())\n                 },\n-                hir::VisibilityPublic => None\n+                hir::VisibilityPublic => {\n+                    err.help(\"try exporting the item with a `pub use` statement\");\n+                    None\n+                }\n             };\n             if let Some(replacement) = suggestion {\n                 err.span_suggestion(vis.span, \"try making it public\", replacement);\n@@ -1203,7 +1206,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     if !cx.access_levels.is_reachable(it.id) {\n                         let msg = \"function is marked #[no_mangle], but not exported\";\n                         let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n-                        suggest_make_pub(&it.vis, &mut err);\n+                        suggest_export(&it.vis, &mut err);\n                         err.emit();\n                     }\n                     for param in &generics.params {\n@@ -1229,7 +1232,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     !cx.access_levels.is_reachable(it.id) {\n                         let msg = \"static is marked #[no_mangle], but not exported\";\n                         let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n-                        suggest_make_pub(&it.vis, &mut err);\n+                        suggest_export(&it.vis, &mut err);\n                         err.emit();\n                     }\n             }"}, {"sha": "4da2700cb9fdb7221aea5f5294a70fc6849e055c", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "patch": "@@ -13,33 +13,41 @@\n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n #![feature(no_debug)]\n \n-#[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n+#[no_mangle] static SHENZHOU: usize = 1;\n //~^ WARN static is marked #[no_mangle]\n-#[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n+//~| HELP try making it public\n+#[no_mangle] const DISCOVERY: usize = 1;\n //~^ ERROR const items should never be #[no_mangle]\n+//~| HELP try a static value\n \n-#[no_mangle] // should suggest removal (generics can't be no-mangle)\n+#[no_mangle]\n+//~^ HELP remove this attribute\n pub fn defiant<T>(_t: T) {}\n //~^ WARN functions generic over types must be mangled\n \n #[no_mangle]\n-fn rio_grande() {} // should suggest `pub`\n+fn rio_grande() {}\n //~^ WARN function is marked\n+//~| HELP try making it public\n \n mod badlands {\n     // The private-no-mangle lints shouldn't suggest inserting `pub` when the\n     // item is already `pub` (but triggered the lint because, e.g., it's in a\n     // private module). (Issue #47383)\n     #[no_mangle] pub static DAUNTLESS: bool = true;\n     //~^ WARN static is marked\n+    //~| HELP try exporting the item with a `pub use` statement\n     #[no_mangle] pub fn val_jean() {}\n     //~^ WARN function is marked\n+    //~| HELP try exporting the item with a `pub use` statement\n \n     // ... but we can suggest just-`pub` instead of restricted\n     #[no_mangle] pub(crate) static VETAR: bool = true;\n     //~^ WARN static is marked\n+    //~| HELP try making it public\n     #[no_mangle] pub(crate) fn crossfield() {}\n     //~^ WARN function is marked\n+    //~| HELP try making it public\n }\n \n struct Equinox {\n@@ -48,20 +56,26 @@ struct Equinox {\n \n #[no_debug] // should suggest removal of deprecated attribute\n //~^ WARN deprecated\n+//~| HELP remove this attribute\n fn main() {\n-    while true { // should suggest `loop`\n+    while true {\n     //~^ WARN denote infinite loops\n-        let mut a = (1); // should suggest no `mut`, no parens\n+    //~| HELP use `loop`\n+        let mut a = (1);\n         //~^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n         //~| WARN unnecessary parentheses\n+        //~| HELP remove these parentheses\n         // the line after `mut` has a `\\t` at the beginning, this is on purpose\n         let mut\n \t        b = 1;\n         //~^^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n         let d = Equinox { warp_factor: 9.975 };\n         match d {\n-            Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+            Equinox { warp_factor: warp_factor } => {}\n             //~^ WARN this pattern is redundant\n+            //~| HELP remove this\n         }\n         println!(\"{} {}\", a, b);\n     }"}, {"sha": "8e5dac8be78276b8f8c5ec1c3b71b81e38ed96ab", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=8d1cbb018e7643e9e8d1d25b8b7de8a2b0671f2d", "patch": "@@ -1,7 +1,7 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:54:21\n+  --> $DIR/suggestions.rs:64:21\n    |\n-LL |         let mut a = (1); // should suggest no `mut`, no parens\n+LL |         let mut a = (1);\n    |                     ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n@@ -11,17 +11,17 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:49:1\n+  --> $DIR/suggestions.rs:57:1\n    |\n LL | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:54:13\n+  --> $DIR/suggestions.rs:64:13\n    |\n-LL |         let mut a = (1); // should suggest no `mut`, no parens\n+LL |         let mut a = (1);\n    |             ----^\n    |             |\n    |             help: remove this `mut`\n@@ -33,7 +33,7 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:58:13\n+  --> $DIR/suggestions.rs:70:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -47,83 +47,88 @@ LL | ||             b = 1;\n warning: static is marked #[no_mangle], but not exported\n   --> $DIR/suggestions.rs:16:14\n    |\n-LL | #[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n+LL | #[no_mangle] static SHENZHOU: usize = 1;\n    |              -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              help: try making it public: `pub`\n    |\n    = note: #[warn(private_no_mangle_statics)] on by default\n \n error: const items should never be #[no_mangle]\n-  --> $DIR/suggestions.rs:18:14\n+  --> $DIR/suggestions.rs:19:14\n    |\n-LL | #[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n+LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              help: try a static value: `pub static`\n    |\n    = note: #[deny(no_mangle_const_items)] on by default\n \n warning: functions generic over types must be mangled\n-  --> $DIR/suggestions.rs:22:1\n+  --> $DIR/suggestions.rs:25:1\n    |\n-LL | #[no_mangle] // should suggest removal (generics can't be no-mangle)\n+LL | #[no_mangle]\n    | ------------ help: remove this attribute\n+LL | //~^ HELP remove this attribute\n LL | pub fn defiant<T>(_t: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(no_mangle_generic_items)] on by default\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:26:1\n+  --> $DIR/suggestions.rs:29:1\n    |\n-LL | fn rio_grande() {} // should suggest `pub`\n+LL | fn rio_grande() {}\n    | -^^^^^^^^^^^^^^^^^\n    | |\n    | help: try making it public: `pub`\n    |\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:33:18\n+  --> $DIR/suggestions.rs:37:18\n    |\n LL |     #[no_mangle] pub static DAUNTLESS: bool = true;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try exporting the item with a `pub use` statement\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:35:18\n+  --> $DIR/suggestions.rs:40:18\n    |\n LL |     #[no_mangle] pub fn val_jean() {}\n    |                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try exporting the item with a `pub use` statement\n \n warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:39:18\n+  --> $DIR/suggestions.rs:45:18\n    |\n LL |     #[no_mangle] pub(crate) static VETAR: bool = true;\n    |                  ----------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try making it public: `pub`\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:41:18\n+  --> $DIR/suggestions.rs:48:18\n    |\n LL |     #[no_mangle] pub(crate) fn crossfield() {}\n    |                  ----------^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try making it public: `pub`\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:52:5\n+  --> $DIR/suggestions.rs:61:5\n    |\n-LL |     while true { // should suggest `loop`\n+LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:63:23\n+  --> $DIR/suggestions.rs:76:23\n    |\n-LL |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       ------------^^^^^^^^^^^^\n    |                       |\n    |                       help: remove this"}]}