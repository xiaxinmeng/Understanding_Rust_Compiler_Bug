{"sha": "30772d94b1e86a09723af1f137149b45e8c12ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzcyZDk0YjFlODZhMDk3MjNhZjFmMTM3MTQ5YjQ1ZThjMTJlZDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-13T18:14:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-13T18:23:47Z"}, "message": "librustc: Forbid enum-to-float casts.\n\nCloses #14794.\n\nIf you're casting from an enum to a float, cast through an integer\nfirst.\n\n[breaking-change]", "tree": {"sha": "b0654ef98ff7c970fc49f678eccca1835879a465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0654ef98ff7c970fc49f678eccca1835879a465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30772d94b1e86a09723af1f137149b45e8c12ed7", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30772d94b1e86a09723af1f137149b45e8c12ed7", "html_url": "https://github.com/rust-lang/rust/commit/30772d94b1e86a09723af1f137149b45e8c12ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30772d94b1e86a09723af1f137149b45e8c12ed7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0422934e243ed57a7662ec878db9d4e01ca5b0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0422934e243ed57a7662ec878db9d4e01ca5b0f9", "html_url": "https://github.com/rust-lang/rust/commit/0422934e243ed57a7662ec878db9d4e01ca5b0f9"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "7e4bcb8f684f2d7accd7d104e4882a448696477b", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -503,9 +503,8 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                         let s = ty::type_is_signed(ety) as Bool;\n                         llvm::LLVMConstIntCast(iv, llty.to_ref(), s)\n                     }\n-                    expr::cast_float => llvm::LLVMConstSIToFP(iv, llty.to_ref()),\n                     _ => cx.sess().bug(\"enum cast destination is not \\\n-                                        integral or float\")\n+                                        integral\")\n                 }\n               }\n               (expr::cast_pointer, expr::cast_pointer) => {"}, {"sha": "0345dc3241ef79f415fbc7c637e776ae76659c4f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -1658,6 +1658,14 @@ pub fn type_is_scalar(ty: t) -> bool {\n     }\n }\n \n+/// Returns true if this type is a floating point type and false otherwise.\n+pub fn type_is_floating_point(ty: t) -> bool {\n+    match get(ty).sty {\n+        ty_float(_) => true,\n+        _ => false,\n+    }\n+}\n+\n pub fn type_needs_drop(cx: &ctxt, ty: t) -> bool {\n     type_contents(cx, ty).needs_drop(cx)\n }"}, {"sha": "a01df3dd7d2be60234e696efe09c32598c01a40c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -3229,12 +3229,24 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n                     let t_1_is_char = type_is_char(fcx, expr.span, t_1);\n                     let t_1_is_bare_fn = type_is_bare_fn(fcx, expr.span, t_1);\n+                    let t_1_is_float = type_is_floating_point(fcx,\n+                                                              expr.span,\n+                                                              t_1);\n \n                     // casts to scalars other than `char` and `bare fn` are trivial\n                     let t_1_is_trivial = t_1_is_scalar &&\n                         !t_1_is_char && !t_1_is_bare_fn;\n \n-                    if type_is_c_like_enum(fcx, expr.span, t_e) && t_1_is_trivial {\n+                    if type_is_c_like_enum(fcx, expr.span, t_e) &&\n+                            t_1_is_trivial {\n+                        if t_1_is_float {\n+                            fcx.type_error_message(expr.span, |actual| {\n+                                format!(\"illegal cast; cast through an \\\n+                                         integer first: `{}` as `{}`\",\n+                                        actual,\n+                                        fcx.infcx().ty_to_str(t_1))\n+                            }, t_e, None);\n+                        }\n                         // casts from C-like enums are allowed\n                     } else if t_1_is_char {\n                         let te = fcx.infcx().resolve_type_vars_if_possible(te);\n@@ -4205,6 +4217,11 @@ pub fn type_is_bare_fn(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n     return ty::type_is_bare_fn(typ_s);\n }\n \n+pub fn type_is_floating_point(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    return ty::type_is_floating_point(typ_s);\n+}\n+\n pub fn type_is_unsafe_ptr(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n     let typ_s = structurally_resolved_type(fcx, sp, typ);\n     return ty::type_is_unsafe_ptr(typ_s);"}, {"sha": "9c859cb0dde274ca9b7d487c7b02515ede0f371d", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that enum-to-float-casts do *signed* integer-to-float conversion.\n+// Tests that enum-to-float casts are disallowed.\n \n enum E {\n     L0 = -1,\n@@ -20,13 +20,13 @@ enum F {\n     H1 = 0xFFFFFFFFFFFFFFFF\n }\n \n-static C0: f32 = L0 as f32;\n-static C1: f32 = H1 as f32;\n+static C0: f32 = L0 as f32; //~ ERROR illegal cast\n+static C1: f32 = H1 as f32; //~ ERROR illegal cast\n \n pub fn main() {\n-    let a = L0 as f32;\n+    let a = L0 as f32;  //~ ERROR illegal cast\n     let b = C0;\n-    let c = H1 as f32;\n+    let c = H1 as f32;  //~ ERROR illegal cast\n     let d = C1;\n     assert_eq!(a, -1.0f32);\n     assert_eq!(b, -1.0f32);", "previous_filename": "src/test/run-pass/enum-to-float-cast.rs"}, {"sha": "346d379aa14312b2a9e04f602b2b8c2c91674ab1", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -14,18 +14,10 @@ enum B { B1=0, B2=2 }\n pub fn main () {\n     static c1: int = A2 as int;\n     static c2: int = B2 as int;\n-    static c3: f64 = A2 as f64;\n-    static c4: f64 = B2 as f64;\n     let a1 = A2 as int;\n     let a2 = B2 as int;\n-    let a3 = A2 as f64;\n-    let a4 = B2 as f64;\n     assert_eq!(c1, 1);\n     assert_eq!(c2, 2);\n-    assert_eq!(c3, 1.0);\n-    assert_eq!(c4, 2.0);\n     assert_eq!(a1, 1);\n     assert_eq!(a2, 2);\n-    assert_eq!(a3, 1.0);\n-    assert_eq!(a4, 2.0);\n }"}, {"sha": "c34b2be6fb5e2731c4071e7bfe1c12a0cccf3e07", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -21,5 +21,4 @@ pub fn main() {\n \n fn test_color(color: color, val: int, _name: String) {\n     assert!(color as int == val);\n-    assert!(color as f64 == val as f64);\n }"}, {"sha": "ac9af2b693dd49830a89f27a3d79842fd74f4c10", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30772d94b1e86a09723af1f137149b45e8c12ed7/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=30772d94b1e86a09723af1f137149b45e8c12ed7", "patch": "@@ -40,7 +40,6 @@ pub fn main() {\n fn test_color(color: color, val: int, name: String) {\n     //assert!(unsafe::transmute(color) == val);\n     assert_eq!(color as int, val);\n-    assert_eq!(color as f64, val as f64);\n     assert!(get_color_alt(color) == name);\n     assert!(get_color_if(color) == name);\n }"}]}