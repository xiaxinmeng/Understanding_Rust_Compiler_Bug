{"sha": "45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzgyYWJmMTMzODVmMjJkMTBkY2NlY2QxZTU0YjI4Y2ZiZWI1Y2M=", "commit": {"author": {"name": "Yuki OKUSHI", "email": "huyuumi.dev@gmail.com", "date": "2019-03-30T21:30:45Z"}, "committer": {"name": "Yuki OKUSHI", "email": "huyuumi.dev@gmail.com", "date": "2019-03-30T22:51:31Z"}, "message": "Distinguish depending on error level\n\nRemove unnecessary comment", "tree": {"sha": "a6b7d5e0b8f4153ab1e46222f27d4e1edf6f3dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b7d5e0b8f4153ab1e46222f27d4e1edf6f3dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "html_url": "https://github.com/rust-lang/rust/commit/45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a497a43794f0da5610c6da835ed3e02cd9af4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a497a43794f0da5610c6da835ed3e02cd9af4d", "html_url": "https://github.com/rust-lang/rust/commit/70a497a43794f0da5610c6da835ed3e02cd9af4d"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "1c5d0c5bab129c255b3de993ffe05aff2c9bf1f4", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "patch": "@@ -6,6 +6,7 @@ use crate::{\n     Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic,\n     SuggestionStyle, SourceMapperDyn, DiagnosticId,\n };\n+use crate::Level::Error;\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use crate::styled_buffer::StyledBuffer;\n \n@@ -72,6 +73,7 @@ impl Emitter for EmitterWriter {\n \n         self.fix_multispans_in_std_macros(&mut primary_span,\n                                           &mut children,\n+                                          &db.level,\n                                           db.handler.flags.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n@@ -856,18 +858,27 @@ impl EmitterWriter {\n     fn fix_multispans_in_std_macros(&mut self,\n                                     span: &mut MultiSpan,\n                                     children: &mut Vec<SubDiagnostic>,\n+                                    level: &Level,\n                                     backtrace: bool) {\n         let mut spans_updated = self.fix_multispan_in_std_macros(span, backtrace);\n         for child in children.iter_mut() {\n             spans_updated |= self.fix_multispan_in_std_macros(&mut child.span, backtrace);\n         }\n+        let msg = if level == &Error {\n+            \"this error originates in a macro outside of the current crate \\\n+             (in Nightly builds, run with -Z external-macro-backtrace \\\n+              for more info)\".to_string()\n+        } else {\n+            \"this warning originates in a macro outside of the current crate \\\n+             (in Nightly builds, run with -Z external-macro-backtrace \\\n+              for more info)\".to_string()\n+        };\n+\n         if spans_updated {\n             children.push(SubDiagnostic {\n                 level: Level::Note,\n                 message: vec![\n-                    (\"this error originates in a macro outside of the current crate \\\n-                      (in Nightly builds, run with -Z external-macro-backtrace \\\n-                       for more info)\".to_string(),\n+                    (msg,\n                      Style::NoStyle),\n                 ],\n                 span: MultiSpan::new(),"}, {"sha": "4c358a81cc1a451f10775457142b398b51161e5d", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "patch": "@@ -5,5 +5,5 @@ LL |     m!();\n    |     ^^^^^\n    |\n    = note: `use $crate;` was erroneously allowed and will become a hard error in a future release\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "302c8aa7e6a5558e23738afe58a93b8d2ab77936", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45c82abf13385f22d10dccecd1e54b28cfbeb5cc/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=45c82abf13385f22d10dccecd1e54b28cfbeb5cc", "patch": "@@ -6,5 +6,5 @@ LL |     write!(&mut example, \"{}\", 42);\n    |\n    = note: `-W unused-must-use` implied by `-W unused`\n    = note: this `Result` may be an `Err` variant, which should be handled\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}