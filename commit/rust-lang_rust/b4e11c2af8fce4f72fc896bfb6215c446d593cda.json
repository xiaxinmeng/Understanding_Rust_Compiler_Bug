{"sha": "b4e11c2af8fce4f72fc896bfb6215c446d593cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZTExYzJhZjhmY2U0ZjcyZmM4OTZiZmI2MjE1YzQ0NmQ1OTNjZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-07T06:18:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-07T06:18:23Z"}, "message": "Auto merge of #34655 - jseyfried:improve_resolver_api, r=nrc\n\nAdd to `resolve`'s public API\n\nThis adds a public method `with_module_lexical_scope` to `Resolver` to allow users to resolve a path in the lexical scope of an arbitrary module.\nr? @nrc", "tree": {"sha": "20066a6af7e5cb6e7756796740de70106007d353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20066a6af7e5cb6e7756796740de70106007d353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e11c2af8fce4f72fc896bfb6215c446d593cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e11c2af8fce4f72fc896bfb6215c446d593cda", "html_url": "https://github.com/rust-lang/rust/commit/b4e11c2af8fce4f72fc896bfb6215c446d593cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e11c2af8fce4f72fc896bfb6215c446d593cda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de78655bca47cac8e783dbb563e7e5c25c1fae40", "url": "https://api.github.com/repos/rust-lang/rust/commits/de78655bca47cac8e783dbb563e7e5c25c1fae40", "html_url": "https://github.com/rust-lang/rust/commit/de78655bca47cac8e783dbb563e7e5c25c1fae40"}, {"sha": "58dd06d9e55731ce4308d96ed680ee13286de4a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dd06d9e55731ce4308d96ed680ee13286de4a2", "html_url": "https://github.com/rust-lang/rust/commit/58dd06d9e55731ce4308d96ed680ee13286de4a2"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "a7fb039c295f8bdbda2e9cb3356e3ab1a8232a08", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4e11c2af8fce4f72fc896bfb6215c446d593cda/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e11c2af8fce4f72fc896bfb6215c446d593cda/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b4e11c2af8fce4f72fc896bfb6215c446d593cda", "patch": "@@ -980,7 +980,7 @@ pub struct Resolver<'a> {\n     //\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n-    module_map: NodeMap<Module<'a>>,\n+    pub module_map: NodeMap<Module<'a>>,\n \n     // Whether or not to print error messages. Can be set to true\n     // when getting additional info for error message suggestions,\n@@ -2674,6 +2674,34 @@ impl<'a> Resolver<'a> {\n         rs\n     }\n \n+    // Calls `f` with a `Resolver` whose current lexical scope is `module`'s lexical scope,\n+    // i.e. the module's items and the prelude (unless the module is `#[no_implicit_prelude]`).\n+    // FIXME #34673: This needs testing.\n+    pub fn with_module_lexical_scope<T, F>(&mut self, module: Module<'a>, f: F) -> T\n+        where F: FnOnce(&mut Resolver<'a>) -> T,\n+    {\n+        self.with_empty_ribs(|this| {\n+            this.value_ribs.push(Rib::new(ModuleRibKind(module)));\n+            this.type_ribs.push(Rib::new(ModuleRibKind(module)));\n+            f(this)\n+        })\n+    }\n+\n+    fn with_empty_ribs<T, F>(&mut self, f: F) -> T\n+        where F: FnOnce(&mut Resolver<'a>) -> T,\n+    {\n+        use ::std::mem::replace;\n+        let value_ribs = replace(&mut self.value_ribs, Vec::new());\n+        let type_ribs = replace(&mut self.type_ribs, Vec::new());\n+        let label_ribs = replace(&mut self.label_ribs, Vec::new());\n+\n+        let result = f(self);\n+        self.value_ribs = value_ribs;\n+        self.type_ribs = type_ribs;\n+        self.label_ribs = label_ribs;\n+        result\n+    }\n+\n     fn find_fallback_in_self_type(&mut self, name: Name) -> FallbackSuggestion {\n         fn extract_node_id(t: &Ty) -> Option<NodeId> {\n             match t.node {"}]}