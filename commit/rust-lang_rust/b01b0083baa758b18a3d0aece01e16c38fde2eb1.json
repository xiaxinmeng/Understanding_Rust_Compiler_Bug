{"sha": "b01b0083baa758b18a3d0aece01e16c38fde2eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWIwMDgzYmFhNzU4YjE4YTNkMGFlY2UwMWUxNmMzOGZkZTJlYjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-26T22:06:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-26T22:06:16Z"}, "message": "Merge pull request #2576 from kimsnj/infinite_loop\n\nwhile_immutable_condition: fix handling of self", "tree": {"sha": "351c16fbb36d3d5b5a59ad0afea959b0acef86c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/351c16fbb36d3d5b5a59ad0afea959b0acef86c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01b0083baa758b18a3d0aece01e16c38fde2eb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJauW7YCRBK7hj4Ov3rIwAAdHIIAASgox2bbXQcm5aO4BXfGO8L\nRcYVsrCMxWzsIi19z6tBn0uhxpcUJmy3FupGOzlSFA4lOLHZdMh73omhSxBNJEts\n3Q2Dv6ejsDaUN/e0/nqFjWa+rfhRf3i5f4Nq2psKJgkQInhUwJJsaea31+aN06J6\nJ2cZ+Id9dQP0DPqEH+5YVqQ7yX4IWxmeZ8q+Kqle0RsF2856M30glfy4+DR3BZfv\nMbo3ap1/dLXAinDH/F8SI69YW2oA7JquP/gqIKWxHDysrimB1rtldhTb5Hgfe8zJ\nGhpfoscVLwzwkKYYhY7GhMm0+BEwtG4ZVcF7SLsmr93o53vCIsQ0hOSoKq/IByA=\n=AgOO\n-----END PGP SIGNATURE-----\n", "payload": "tree 351c16fbb36d3d5b5a59ad0afea959b0acef86c6\nparent f7c4bb69d2a9fe9c36225f6067905f3971a414ce\nparent 737247e50e3709e0b040120dc7604362548bf8a7\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522101976 +0200\ncommitter GitHub <noreply@github.com> 1522101976 +0200\n\nMerge pull request #2576 from kimsnj/infinite_loop\n\nwhile_immutable_condition: fix handling of self"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01b0083baa758b18a3d0aece01e16c38fde2eb1", "html_url": "https://github.com/rust-lang/rust/commit/b01b0083baa758b18a3d0aece01e16c38fde2eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01b0083baa758b18a3d0aece01e16c38fde2eb1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c4bb69d2a9fe9c36225f6067905f3971a414ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c4bb69d2a9fe9c36225f6067905f3971a414ce", "html_url": "https://github.com/rust-lang/rust/commit/f7c4bb69d2a9fe9c36225f6067905f3971a414ce"}, {"sha": "737247e50e3709e0b040120dc7604362548bf8a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/737247e50e3709e0b040120dc7604362548bf8a7", "html_url": "https://github.com/rust-lang/rust/commit/737247e50e3709e0b040120dc7604362548bf8a7"}], "stats": {"total": 149, "additions": 86, "deletions": 63}, "files": [{"sha": "eaef31b28923a5d92ccf5759d72433dacc6b0a58", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b01b0083baa758b18a3d0aece01e16c38fde2eb1/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01b0083baa758b18a3d0aece01e16c38fde2eb1/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b01b0083baa758b18a3d0aece01e16c38fde2eb1", "patch": "@@ -2140,7 +2140,7 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n         return;\n     }\n \n-    let mut mut_var_visitor = MutableVarsVisitor {\n+    let mut mut_var_visitor = VarCollectorVisitor {\n         cx,\n         ids: HashMap::new(),\n         skip: false,\n@@ -2150,49 +2150,51 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n         return;\n     }\n \n-    if mut_var_visitor.ids.is_empty() {\n-        span_lint(\n-            cx,\n-            WHILE_IMMUTABLE_CONDITION,\n-            cond.span,\n-            \"all variables in condition are immutable. This either leads to an infinite or to a never running loop.\",\n-        );\n-        return;\n-    }\n-\n-\n     let mut delegate = MutVarsDelegate {\n-        mut_spans: mut_var_visitor.ids,\n+        used_mutably: mut_var_visitor.ids,\n     };\n     let def_id = def_id::DefId::local(block.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(expr);\n \n-    if !delegate.mut_spans.iter().any(|(_, v)| v.is_some()) {\n+    if !delegate.used_mutably.iter().any(|(_, v)| *v) {\n         span_lint(\n             cx,\n             WHILE_IMMUTABLE_CONDITION,\n-            expr.span,\n+            cond.span,\n             \"Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\",\n         );\n     }\n }\n \n-/// Collects the set of mutable variable in an expression\n+/// Collects the set of variables in an expression\n /// Stops analysis if a function call is found\n-struct MutableVarsVisitor<'a, 'tcx: 'a> {\n+/// Note: In some cases such as `self`, there are no mutable annotation,\n+/// All variables definition IDs are collected\n+struct VarCollectorVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    ids: HashMap<NodeId, Option<Span>>,\n+    ids: HashMap<NodeId, bool>,\n     skip: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n+    fn insert_def_id(&mut self, ex: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprPath(ref qpath) = ex.node;\n+            if let QPath::Resolved(None, _) = *qpath;\n+            let def = self.cx.tables.qpath_def(qpath, ex.hir_id);\n+            if let Def::Local(node_id) = def;\n+            then {\n+                self.ids.insert(node_id, false);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n-            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, ex) {\n-                self.ids.insert(node_id, None);\n-            },\n-\n+            ExprPath(_) => self.insert_def_id(ex),\n             // If there is any fuction/method call\u2026 we just stop analysis\n             ExprCall(..) | ExprMethodCall(..) => self.skip = true,\n \n@@ -2208,15 +2210,18 @@ impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n }\n \n struct MutVarsDelegate {\n-    mut_spans: HashMap<NodeId, Option<Span>>,\n+    used_mutably: HashMap<NodeId, bool>,\n }\n \n impl<'tcx> MutVarsDelegate {\n     fn update(&mut self, cat: &'tcx Categorization, sp: Span) {\n-        if let Categorization::Local(id) = *cat {\n-            if let Some(span) = self.mut_spans.get_mut(&id) {    \n-                *span = Some(sp)\n-            }\n+        match *cat {\n+            Categorization::Local(id) =>\n+                if let Some(used) = self.used_mutably.get_mut(&id) {\n+                    *used = true;\n+                },\n+            Categorization::Deref(ref cmt, _) => self.update(&cmt.cat, sp),\n+            _ => {}\n         }\n     }\n }\n@@ -2236,7 +2241,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     }\n \n     fn mutate(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: MutateMode) {\n-            self.update(&cmt.cat, sp)\n+        self.update(&cmt.cat, sp)\n     }\n \n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}"}, {"sha": "30f86129803a59f55c0f6455121704ced5328cc4", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b01b0083baa758b18a3d0aece01e16c38fde2eb1/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01b0083baa758b18a3d0aece01e16c38fde2eb1/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=b01b0083baa758b18a3d0aece01e16c38fde2eb1", "patch": "@@ -124,9 +124,36 @@ fn internally_mutable() {\n     }\n }\n \n+struct Counter {\n+    count: usize,\n+}\n+\n+impl Counter {\n+    fn inc(&mut self) {\n+        self.count += 1;\n+    }\n+\n+    fn inc_n(&mut self, n: usize) {\n+        while self.count < n {\n+            self.inc();\n+        }\n+        println!(\"OK - self borrowed mutably\");\n+    }\n+\n+    fn print_n(&self, n: usize) {\n+        while self.count < n {\n+            println!(\"KO - {} is not mutated\", self.count);\n+        }\n+    }\n+}\n+\n fn main() {\n     immutable_condition();\n     unused_var();\n     used_immutable();\n     internally_mutable();\n+\n+    let mut c = Counter { count: 0 };\n+    c.inc_n(5);\n+    c.print_n(2);\n }"}, {"sha": "67648dc91101ec6487cd5be9154ba8bfb87698e5", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b01b0083baa758b18a3d0aece01e16c38fde2eb1/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01b0083baa758b18a3d0aece01e16c38fde2eb1/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=b01b0083baa758b18a3d0aece01e16c38fde2eb1", "patch": "@@ -1,67 +1,58 @@\n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:10:11\n    |\n 10 |     while y < 10 {\n    |           ^^^^^^\n    |\n    = note: `-D while-immutable-condition` implied by `-D warnings`\n \n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:15:11\n    |\n 15 |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n \n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:22:11\n    |\n 22 |     while !cond {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:52:5\n+  --> $DIR/infinite_loop.rs:52:11\n    |\n-52 | /     while i < 3 {\n-53 | |         j = 3;\n-54 | |         println!(\"KO - i not mentionned\");\n-55 | |     }\n-   | |_____^\n+52 |     while i < 3 {\n+   |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:57:5\n+  --> $DIR/infinite_loop.rs:57:11\n    |\n-57 | /     while i < 3 && j > 0 {\n-58 | |         println!(\"KO - i and j not mentionned\");\n-59 | |     }\n-   | |_____^\n+57 |     while i < 3 && j > 0 {\n+   |           ^^^^^^^^^^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:61:5\n+  --> $DIR/infinite_loop.rs:61:11\n    |\n-61 | /     while i < 3 {\n-62 | |         let mut i = 5;\n-63 | |         fn_mutref(&mut i);\n-64 | |         println!(\"KO - shadowed\");\n-65 | |     }\n-   | |_____^\n+61 |     while i < 3 {\n+   |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:76:5\n+  --> $DIR/infinite_loop.rs:76:11\n    |\n-76 | /     while i < 3 {\n-77 | |         fn_constref(&i);\n-78 | |         println!(\"KO - const reference\");\n-79 | |     }\n-   | |_____^\n+76 |     while i < 3 {\n+   |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:81:5\n+  --> $DIR/infinite_loop.rs:81:11\n    |\n-81 | /     while i < 3 {\n-82 | |         fn_val(i);\n-83 | |         println!(\"KO - passed by value\");\n-84 | |     }\n-   | |_____^\n+81 |     while i < 3 {\n+   |           ^^^^^\n+\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n+   --> $DIR/infinite_loop.rs:144:15\n+    |\n+144 |         while self.count < n {\n+    |               ^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}