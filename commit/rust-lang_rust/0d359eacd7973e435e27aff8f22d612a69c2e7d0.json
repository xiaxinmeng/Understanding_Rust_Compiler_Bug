{"sha": "0d359eacd7973e435e27aff8f22d612a69c2e7d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzU5ZWFjZDc5NzNlNDM1ZTI3YWZmOGYyMmQ2MTJhNjljMmU3ZDA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-18T13:01:59Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-18T13:23:25Z"}, "message": "Cargo fmt", "tree": {"sha": "c17695f4a18b5f413354b3350f64f8c1887c7f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17695f4a18b5f413354b3350f64f8c1887c7f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d359eacd7973e435e27aff8f22d612a69c2e7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d359eacd7973e435e27aff8f22d612a69c2e7d0", "html_url": "https://github.com/rust-lang/rust/commit/0d359eacd7973e435e27aff8f22d612a69c2e7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d359eacd7973e435e27aff8f22d612a69c2e7d0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142fc45dbb7735be66ebce9efa88df80b8165175", "url": "https://api.github.com/repos/rust-lang/rust/commits/142fc45dbb7735be66ebce9efa88df80b8165175", "html_url": "https://github.com/rust-lang/rust/commit/142fc45dbb7735be66ebce9efa88df80b8165175"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "4eaf52681add55228534c6fd1c4e8e62111e51f7", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0d359eacd7973e435e27aff8f22d612a69c2e7d0", "patch": "@@ -1871,7 +1871,9 @@ fn rewrite_pat_expr(\n         } else {\n             format!(\"{} \", matcher)\n         };\n-        let pat_shape = shape.offset_left(matcher.len())?.sub_width(connector.len())?;\n+        let pat_shape = shape\n+            .offset_left(matcher.len())?\n+            .sub_width(connector.len())?;\n         let pat_string = pat.rewrite(context, pat_shape)?;\n         let result = format!(\"{}{}{}\", matcher, pat_string, connector);\n         return rewrite_assign_rhs(context, result, expr, shape);"}, {"sha": "e2a07194f2bc5e57f7bffa3c0ba537e27748a70e", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0d359eacd7973e435e27aff8f22d612a69c2e7d0", "patch": "@@ -2037,9 +2037,7 @@ fn rewrite_args(\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n     let mut arg_item_strs = args.iter()\n-        .map(|arg| {\n-            arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n-        })\n+        .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n         .collect::<Option<Vec<_>>>()?;\n \n     // Account for sugary self.\n@@ -2713,17 +2711,15 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.node {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n-                rewrite_fn_base(\n-                    context,\n-                    shape.indent,\n-                    self.ident,\n-                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n-                    span,\n-                    false,\n-                    false,\n-                ).map(|(s, _)| format!(\"{};\", s))\n-            }\n+            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n+                context,\n+                shape.indent,\n+                self.ident,\n+                &FnSig::new(fn_decl, generics, self.vis.clone()),\n+                span,\n+                false,\n+                false,\n+            ).map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "9812b8af6110c42f340f19f6bcdda5e340dd440d", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d359eacd7973e435e27aff8f22d612a69c2e7d0/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=0d359eacd7973e435e27aff8f22d612a69c2e7d0", "patch": "@@ -67,7 +67,9 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let ender_length = fmt.line_end.len();\n     // If we cannot put at least a single character per line, the rewrite won't\n     // succeed.\n-    let max_chars = shape.width.checked_sub(fmt.opener.len() + ender_length + 1)? + 1;\n+    let max_chars = shape\n+        .width\n+        .checked_sub(fmt.opener.len() + ender_length + 1)? + 1;\n \n     // Snip a line at a time from `orig` until it is used up. Push the snippet\n     // onto result."}]}