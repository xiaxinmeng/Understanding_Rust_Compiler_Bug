{"sha": "760424af17bc40c4fd2be95e96ebcebe70d217e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDQyNGFmMTdiYzQwYzRmZDJiZTk1ZTk2ZWJjZWJlNzBkMjE3ZTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:11:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:11:28Z"}, "message": "expand as_[mut_]ptr docs a bit", "tree": {"sha": "ddbdf335ff90d29c29d275e9b1e58e5177b9acc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddbdf335ff90d29c29d275e9b1e58e5177b9acc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760424af17bc40c4fd2be95e96ebcebe70d217e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760424af17bc40c4fd2be95e96ebcebe70d217e9", "html_url": "https://github.com/rust-lang/rust/commit/760424af17bc40c4fd2be95e96ebcebe70d217e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760424af17bc40c4fd2be95e96ebcebe70d217e9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a460aac37e91f66f9ba79824dbf62105733efee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a460aac37e91f66f9ba79824dbf62105733efee", "html_url": "https://github.com/rust-lang/rust/commit/9a460aac37e91f66f9ba79824dbf62105733efee"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3348e774a0b7aa05bf7e16b8b35907b4c367805b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760424af17bc40c4fd2be95e96ebcebe70d217e9/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760424af17bc40c4fd2be95e96ebcebe70d217e9/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=760424af17bc40c4fd2be95e96ebcebe70d217e9", "patch": "@@ -1174,16 +1174,16 @@ impl<T> MaybeUninit<T> {\n         &mut *self.value\n     }\n \n-    /// Get a pointer to the contained value. Reading from this pointer will be undefined\n-    /// behavior unless the `MaybeUninit` is initialized.\n+    /// Get a pointer to the contained value. Reading from this pointer or turning it\n+    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n         unsafe { &*self.value as *const T }\n     }\n \n-    /// Get a mutable pointer to the contained value. Reading from this pointer will be undefined\n-    /// behavior unless the `MaybeUninit` is initialized.\n+    /// Get a mutable pointer to the contained value. Reading from this pointer or turning it\n+    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {"}]}