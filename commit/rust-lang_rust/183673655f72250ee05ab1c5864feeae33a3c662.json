{"sha": "183673655f72250ee05ab1c5864feeae33a3c662", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzY3MzY1NWY3MjI1MGVlMDVhYjFjNTg2NGZlZWFlMzNhM2M2NjI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-26T09:58:56Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-26T09:58:56Z"}, "message": "Simpify code", "tree": {"sha": "96c0ee813095ff18488ea88d2c07d8996d7b9405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c0ee813095ff18488ea88d2c07d8996d7b9405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183673655f72250ee05ab1c5864feeae33a3c662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183673655f72250ee05ab1c5864feeae33a3c662", "html_url": "https://github.com/rust-lang/rust/commit/183673655f72250ee05ab1c5864feeae33a3c662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183673655f72250ee05ab1c5864feeae33a3c662/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb996cae6bf5bb5f60176a4a190311d4363b3e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb996cae6bf5bb5f60176a4a190311d4363b3e10", "html_url": "https://github.com/rust-lang/rust/commit/fb996cae6bf5bb5f60176a4a190311d4363b3e10"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "209f614932e884ed5cd193e065c466ebb2ab8bd6", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/183673655f72250ee05ab1c5864feeae33a3c662/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183673655f72250ee05ab1c5864feeae33a3c662/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=183673655f72250ee05ab1c5864feeae33a3c662", "patch": "@@ -109,24 +109,19 @@ impl ProcMacroLibraryLibloading {\n     }\n }\n \n-type ProcMacroLibraryImpl = ProcMacroLibraryLibloading;\n-\n pub struct Expander {\n-    inner: ProcMacroLibraryImpl,\n+    inner: ProcMacroLibraryLibloading,\n }\n \n impl Expander {\n-    pub fn new(lib: &Path) -> Result<Expander, String> {\n+    pub fn new(lib: &Path) -> io::Result<Expander> {\n         // Some libraries for dynamic loading require canonicalized path even when it is\n         // already absolute\n-        let lib = lib\n-            .canonicalize()\n-            .unwrap_or_else(|err| panic!(\"Cannot canonicalize {}: {:?}\", lib.display(), err));\n+        let lib = lib.canonicalize()?;\n \n-        // Copy the dylib to temp directory to prevent locking in Windows\n-        let lib = copy_to_temp_dir(&lib).map_err(|e| e.to_string())?;\n+        let lib = ensure_file_with_lock_free_access(&lib)?;\n \n-        let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n+        let library = ProcMacroLibraryLibloading::open(&lib)?;\n \n         Ok(Expander { inner: library })\n     }\n@@ -199,8 +194,9 @@ impl Expander {\n     }\n }\n \n+/// Copy the dylib to temp directory to prevent locking in Windows\n #[cfg(windows)]\n-fn copy_to_temp_dir(path: &Path) -> io::Result<PathBuf> {\n+fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n     let mut to = std::env::temp_dir();\n     let file_name = path.file_name().ok_or_else(|| {\n         io::Error::new(\n@@ -215,6 +211,6 @@ fn copy_to_temp_dir(path: &Path) -> io::Result<PathBuf> {\n }\n \n #[cfg(unix)]\n-fn copy_to_temp_dir(path: &Path) -> io::Result<PathBuf> {\n+fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n     Ok(path.to_path_buf())\n }"}, {"sha": "922bb84bbfcda92336fcc3f9b35536900547159b", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/183673655f72250ee05ab1c5864feeae33a3c662/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183673655f72250ee05ab1c5864feeae33a3c662/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=183673655f72250ee05ab1c5864feeae33a3c662", "patch": "@@ -23,7 +23,7 @@ use proc_macro::bridge::client::TokenStream;\n use ra_proc_macro::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n use std::{\n     collections::{hash_map::Entry, HashMap},\n-    fs::metadata,\n+    fs,\n     path::{Path, PathBuf},\n     time::SystemTime,\n };\n@@ -50,9 +50,9 @@ impl ProcMacroSrv {\n     }\n \n     fn expander(&mut self, path: &Path) -> Result<&dylib::Expander, String> {\n-        let time = metadata(path)\n-            .and_then(|it| it.modified())\n-            .map_err(|err| format!(\"Failed to file metadata for {}: {:?}\", path.display(), err))?;\n+        let time = fs::metadata(path).and_then(|it| it.modified()).map_err(|err| {\n+            format!(\"Failed to get file metadata for {}: {:?}\", path.display(), err)\n+        })?;\n \n         Ok(match self.expanders.entry((path.to_path_buf(), time)) {\n             Entry::Vacant(v) => v.insert(dylib::Expander::new(path).map_err(|err| {"}]}