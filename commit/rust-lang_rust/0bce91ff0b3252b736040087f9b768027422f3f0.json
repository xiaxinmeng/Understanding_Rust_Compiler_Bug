{"sha": "0bce91ff0b3252b736040087f9b768027422f3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2U5MWZmMGIzMjUyYjczNjA0MDA4N2Y5Yjc2ODAyNzQyMmYzZjA=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-12-14T17:13:10Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-12-14T17:13:10Z"}, "message": "add Scalar::try_from_(u)int methods", "tree": {"sha": "a12a84921448c2ff6f5d2389c1f6b20202850dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12a84921448c2ff6f5d2389c1f6b20202850dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bce91ff0b3252b736040087f9b768027422f3f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bce91ff0b3252b736040087f9b768027422f3f0", "html_url": "https://github.com/rust-lang/rust/commit/0bce91ff0b3252b736040087f9b768027422f3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bce91ff0b3252b736040087f9b768027422f3f0/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ea4ace9213ae045123fdfeb59d1ac887656d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ea4ace9213ae045123fdfeb59d1ac887656d31", "html_url": "https://github.com/rust-lang/rust/commit/c8ea4ace9213ae045123fdfeb59d1ac887656d31"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "4f196cda5ae2abfed2aed20b4b69bdcdb3078805", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bce91ff0b3252b736040087f9b768027422f3f0/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bce91ff0b3252b736040087f9b768027422f3f0/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=0bce91ff0b3252b736040087f9b768027422f3f0", "patch": "@@ -237,13 +237,18 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n+    pub fn try_from_uint(i: impl Into<u128>, size: Size) -> InterpResult<'tcx, Self> {\n         let i = i.into();\n-        assert_eq!(\n-            truncate(i, size), i,\n-            \"Unsigned value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: i, size: size.bytes() as u8 }\n+        if truncate(i, size) == i {\n+            Ok(Scalar::Raw { data: i, size: size.bytes() as u8 })\n+        } else {\n+            throw_unsup_format!(\"Unsigned value {:#x} does not fit in {} bits\", i, size.bits())\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n+        Self::try_from_uint(i, size).unwrap()\n     }\n \n     #[inline]\n@@ -267,15 +272,20 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+    pub fn try_from_int(i: impl Into<i128>, size: Size) -> InterpResult<'tcx, Self> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n-        assert_eq!(\n-            sign_extend(truncated, size) as i128, i,\n-            \"Signed value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: truncated, size: size.bytes() as u8 }\n+        if sign_extend(truncated, size) as i128 == i {\n+            Ok(Scalar::Raw { data: truncated, size: size.bytes() as u8 })\n+        } else {\n+            throw_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits())\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+        Self::try_from_int(i, size).unwrap()\n     }\n \n     #[inline]"}]}