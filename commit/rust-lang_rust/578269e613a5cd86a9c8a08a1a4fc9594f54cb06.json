{"sha": "578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "node_id": "C_kwDOAAsO6NoAKDU3ODI2OWU2MTNhNWNkODZhOWM4YTA4YTFhNGZjOTU5NGY1NGNiMDY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-22T01:48:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T01:48:31Z"}, "message": "Merge #11093\n\n11093: fix: Do not complete `Drop::drop`, complete `std::mem::drop` instead r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5005\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3a7ffec4cd8753ebe29b26df8810a7bcf5ea4d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7ffec4cd8753ebe29b26df8810a7bcf5ea4d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwoPvCRBK7hj4Ov3rIwAAkFUIAAFcHcPAT4QvZFThnY9LfoMt\nbKXpGCqZnSCPj0Vr61dEhIrn6nSMeECNp6vnkXVX+l1+zCZmwJWDl7HavDNIUX5I\nM7BIIfI8th9DGpfbMDqBjSLJxBdStJ42MOGW0uqyMxxny6AduJW7c2+RGv0SeCzI\nqkQgdxWA8lI7HO51Ls0c1sbs8SyVPwu3JKeTw9D4GXt2HHgvw+bfqAXZY3NeDCX8\nbYz29fVYYEknBUEdFE0dWhW6VA9L7Ieomt4SICOdsJd6dgzbKwL6acvBNykmIMO2\nvt6VC10dHZ6B7H+EV7Wqcc3iq5NRnczwNUQ4FUz0VdGPCcrxKCfIUD0wkEGHfqw=\n=Mp8R\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a7ffec4cd8753ebe29b26df8810a7bcf5ea4d86\nparent d4c5bf7828035d33e70362b6a72aed0065d3c97c\nparent 85ed5a318264e5639caf1a98fde2c92291f15e75\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640137711 +0000\ncommitter GitHub <noreply@github.com> 1640137711 +0000\n\nMerge #11093\n\n11093: fix: Do not complete `Drop::drop`, complete `std::mem::drop` instead r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5005\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "html_url": "https://github.com/rust-lang/rust/commit/578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c5bf7828035d33e70362b6a72aed0065d3c97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c5bf7828035d33e70362b6a72aed0065d3c97c", "html_url": "https://github.com/rust-lang/rust/commit/d4c5bf7828035d33e70362b6a72aed0065d3c97c"}, {"sha": "85ed5a318264e5639caf1a98fde2c92291f15e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ed5a318264e5639caf1a98fde2c92291f15e75", "html_url": "https://github.com/rust-lang/rust/commit/85ed5a318264e5639caf1a98fde2c92291f15e75"}], "stats": {"total": 169, "additions": 127, "deletions": 42}, "files": [{"sha": "842643cb97c481ba755abaf9fb7cc5731ba08faf", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -2361,46 +2361,53 @@ fn foo(ar$0g: &impl Foo + Bar<S>) {}\n fn test_hover_async_block_impl_trait_has_goto_type_action() {\n     check_actions(\n         r#\"\n-//- minicore: future\n+//- /main.rs crate:main deps:core\n+// we don't use minicore here so that this test doesn't randomly fail\n+// when someone edits minicore\n struct S;\n fn foo() {\n     let fo$0o = async { S };\n }\n+//- /core.rs crate:core\n+pub mod future {\n+    #[lang = \"future_trait\"]\n+    pub trait Future {}\n+}\n \"#,\n         expect![[r#\"\n-                [\n-                    GoToType(\n-                        [\n-                            HoverGotoTypeData {\n-                                mod_path: \"core::future::Future\",\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        1,\n-                                    ),\n-                                    full_range: 276..458,\n-                                    focus_range: 315..321,\n-                                    name: \"Future\",\n-                                    kind: Trait,\n-                                    description: \"pub trait Future\",\n-                                },\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"core::future::Future\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 21..69,\n+                                focus_range: 60..66,\n+                                name: \"Future\",\n+                                kind: Trait,\n+                                description: \"pub trait Future\",\n                             },\n-                            HoverGotoTypeData {\n-                                mod_path: \"test::S\",\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 0..9,\n-                                    focus_range: 7..8,\n-                                    name: \"S\",\n-                                    kind: Struct,\n-                                    description: \"struct S\",\n-                                },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"main::S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 0..110,\n+                                focus_range: 108..109,\n+                                name: \"S\",\n+                                kind: Struct,\n+                                description: \"struct S\",\n                             },\n-                        ],\n-                    ),\n-                ]\n-            \"#]],\n+                        },\n+                    ],\n+                ),\n+            ]\n+        \"#]],\n     );\n }\n "}, {"sha": "3cab1918f3ee5b990c855f254f4ad0f576ab74b4", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -1,7 +1,7 @@\n //! Completion for derives\n use hir::{HasAttrs, MacroDef, MacroKind};\n use ide_db::{\n-    helpers::{import_assets::ImportAssets, insert_use::ImportScope, FamousDefs},\n+    helpers::{import_assets::ImportAssets, insert_use::ImportScope},\n     SymbolKind,\n };\n use itertools::Itertools;\n@@ -18,7 +18,7 @@ pub(super) fn complete_derive(\n     ctx: &CompletionContext,\n     existing_derives: &[ast::Path],\n ) {\n-    let core = FamousDefs(&ctx.sema, ctx.krate).core();\n+    let core = ctx.famous_defs().core();\n     let existing_derives: FxHashSet<_> = existing_derives\n         .into_iter()\n         .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))"}, {"sha": "539b423cb30f94e13a5c39567b1eb8c507874539", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -76,7 +76,14 @@ fn complete_methods(\n ) {\n     if let Some(krate) = ctx.krate {\n         let mut seen_methods = FxHashSet::default();\n-        let traits_in_scope = ctx.scope.visible_traits();\n+        let mut traits_in_scope = ctx.scope.visible_traits();\n+\n+        // Remove drop from the environment as calling `Drop::drop` is not allowed\n+        if let Some(drop_trait) = ctx.famous_defs().core_ops_Drop() {\n+            cov_mark::hit!(dot_remove_drop_trait);\n+            traits_in_scope.remove(&drop_trait.into());\n+        }\n+\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n             if func.self_param(ctx.db).is_some() && seen_methods.insert(func.name(ctx.db)) {\n                 f(func);\n@@ -709,4 +716,34 @@ fn main() {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn postfix_drop_completion() {\n+        cov_mark::check!(dot_remove_drop_trait);\n+        cov_mark::check!(postfix_drop_completion);\n+        check_edit(\n+            \"drop\",\n+            r#\"\n+//- minicore: drop\n+struct Vec<T>(T);\n+impl<T> Drop for Vec<T> {\n+    fn drop(&mut self) {}\n+}\n+fn main() {\n+    let x = Vec(0u32)\n+    x.$0;\n+}\n+\"#,\n+            r\"\n+struct Vec<T>(T);\n+impl<T> Drop for Vec<T> {\n+    fn drop(&mut self) {}\n+}\n+fn main() {\n+    let x = Vec(0u32)\n+    drop($0x);\n+}\n+\",\n+        )\n+    }\n }"}, {"sha": "a212a98461fda3da92feaed784c57fec74df81b7", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -2,9 +2,9 @@\n \n mod format_like;\n \n-use hir::Documentation;\n+use hir::{Documentation, HasAttrs};\n use ide_db::{\n-    helpers::{insert_use::ImportScope, FamousDefs, SnippetCap},\n+    helpers::{insert_use::ImportScope, SnippetCap},\n     ty_filter::TryEnum,\n };\n use syntax::{\n@@ -59,6 +59,22 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n+    if let Some(drop_trait) = ctx.famous_defs().core_ops_Drop() {\n+        if receiver_ty.impls_trait(ctx.db, drop_trait, &[]) {\n+            if let &[hir::AssocItem::Function(drop_fn)] = &*drop_trait.items(ctx.db) {\n+                cov_mark::hit!(postfix_drop_completion);\n+                // FIXME: check that `drop` is in scope, use fully qualified path if it isn't/if shadowed\n+                let mut item = postfix_snippet(\n+                    \"drop\",\n+                    \"fn drop(&mut self)\",\n+                    &format!(\"drop($0{})\", receiver_text),\n+                );\n+                item.set_documentation(drop_fn.docs(ctx.db));\n+                item.add_to(acc);\n+            }\n+        }\n+    }\n+\n     if !ctx.config.snippets.is_empty() {\n         add_custom_postfix_completions(acc, ctx, &postfix_snippet, &receiver_text);\n     }\n@@ -107,7 +123,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         )\n         .add_to(acc);\n         postfix_snippet(\"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n-    } else if let Some(trait_) = FamousDefs(&ctx.sema, ctx.krate).core_iter_IntoIterator() {\n+    } else if let Some(trait_) = ctx.famous_defs().core_iter_IntoIterator() {\n         if receiver_ty.impls_trait(ctx.db, trait_, &[]) {\n             postfix_snippet(\n                 \"for\","}, {"sha": "b066a46065de0817178a5692d00a7a4d06d1af89", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -1,5 +1,5 @@\n //! Complete fields in record literals and patterns.\n-use ide_db::{helpers::FamousDefs, SymbolKind};\n+use ide_db::SymbolKind;\n use syntax::{ast::Expr, T};\n \n use crate::{\n@@ -13,7 +13,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n             | ImmediateLocation::RecordExprUpdate(record_expr),\n         ) => {\n             let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n-            let default_trait = FamousDefs(&ctx.sema, ctx.krate).core_default_Default();\n+            let default_trait = ctx.famous_defs().core_default_Default();\n             let impl_default_trait = default_trait.zip(ty).map_or(false, |(default_trait, ty)| {\n                 ty.original.impls_trait(ctx.db, default_trait, &[])\n             });"}, {"sha": "de67d68cdb4f3a895a34c85f527af555d05c9e33", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -5,6 +5,7 @@ use hir::{Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n use ide_db::{\n     active_parameter::ActiveParameter,\n     base_db::{FilePosition, SourceDatabase},\n+    helpers::FamousDefs,\n     RootDatabase,\n };\n use syntax::{\n@@ -150,6 +151,10 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }\n \n+    pub(crate) fn famous_defs(&self) -> FamousDefs {\n+        FamousDefs(&self.sema, self.krate)\n+    }\n+\n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match &self.completion_location {\n             Some("}, {"sha": "4fa5aa04dead5c9256e2c71b9c623a60eebaaf45", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -71,6 +71,7 @@ impl<'a> RenderContext<'a> {\n                 .unwrap_or(false)\n     }\n \n+    // FIXME: remove this\n     fn docs(&self, def: impl HasAttrs) -> Option<hir::Documentation> {\n         def.docs(self.db())\n     }"}, {"sha": "ee7bf9540bc2b04b8e36b706c190e6ffd89fe676", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -76,6 +76,10 @@ impl FamousDefs<'_, '_> {\n         self.find_enum(\"core:ops:ControlFlow\")\n     }\n \n+    pub fn core_ops_Drop(&self) -> Option<Trait> {\n+        self.find_trait(\"core:ops:Drop\")\n+    }\n+\n     pub fn core_marker_Copy(&self) -> Option<Trait> {\n         self.find_trait(\"core:marker:Copy\")\n     }"}, {"sha": "5c63e27879d02f799c0fb5252cc0d360d3e0a104", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578269e613a5cd86a9c8a08a1a4fc9594f54cb06/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=578269e613a5cd86a9c8a08a1a4fc9594f54cb06", "patch": "@@ -36,6 +36,7 @@\n //!     bool_impl: option, fn\n //!     add:\n //!     as_ref: sized\n+//!     drop:\n \n pub mod marker {\n     // region:sized\n@@ -118,7 +119,6 @@ pub mod clone {\n }\n // endregion:clone\n \n-\n pub mod convert {\n     // region:from\n     pub trait From<T>: Sized {\n@@ -195,6 +195,13 @@ pub mod ops {\n     };\n     // endregion:deref\n \n+    // region:drop\n+    #[lang = \"drop\"]\n+    pub trait Drop {\n+        fn drop(&mut self);\n+    }\n+    // endregion:drop\n+\n     // region:index\n     mod index {\n         #[lang = \"index\"]\n@@ -237,6 +244,12 @@ pub mod ops {\n     pub use self::index::{Index, IndexMut};\n     // endregion:index\n \n+    // region:drop\n+    pub mod mem {\n+        pub fn drop<T>(_x: T) {}\n+    }\n+    // endregion:drop\n+\n     // region:range\n     mod range {\n         #[lang = \"RangeFull\"]\n@@ -620,13 +633,15 @@ pub mod prelude {\n             clone::Clone,                       // :clone\n             cmp::{Eq, PartialEq},               // :eq\n             cmp::{Ord, PartialOrd},             // :ord\n-            convert::{From, Into},              // :from\n             convert::AsRef,                     // :as_ref\n+            convert::{From, Into},              // :from\n             default::Default,                   // :default\n             iter::{IntoIterator, Iterator},     // :iterator\n             macros::builtin::derive,            // :derive\n             marker::Copy,                       // :copy\n             marker::Sized,                      // :sized\n+            mem::drop,                          // :drop\n+            ops::Drop,                          // :drop\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option\n             result::Result::{self, Err, Ok},    // :result"}]}