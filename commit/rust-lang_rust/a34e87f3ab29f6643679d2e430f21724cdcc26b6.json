{"sha": "a34e87f3ab29f6643679d2e430f21724cdcc26b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNGU4N2YzYWIyOWY2NjQzNjc5ZDJlNDMwZjIxNzI0Y2RjYzI2YjY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-23T19:40:43Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-24T14:52:46Z"}, "message": "Add Examples for File\n\nThis is pretty basic, but it's nice to have something.", "tree": {"sha": "ed3595135903a01cf4dff54b6c630c6c54e6a0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3595135903a01cf4dff54b6c630c6c54e6a0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34e87f3ab29f6643679d2e430f21724cdcc26b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34e87f3ab29f6643679d2e430f21724cdcc26b6", "html_url": "https://github.com/rust-lang/rust/commit/a34e87f3ab29f6643679d2e430f21724cdcc26b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34e87f3ab29f6643679d2e430f21724cdcc26b6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0aad7dd4fad8d7e2e2f877a511a637258949597", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597", "html_url": "https://github.com/rust-lang/rust/commit/b0aad7dd4fad8d7e2e2f877a511a637258949597"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "72f4fbb116c567c3b90edb806de1f9695b2d621b", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a34e87f3ab29f6643679d2e430f21724cdcc26b6/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34e87f3ab29f6643679d2e430f21724cdcc26b6/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=a34e87f3ab29f6643679d2e430f21724cdcc26b6", "patch": "@@ -128,6 +128,17 @@ impl File {\n     ///\n     /// This function will return an error if `path` does not already exist.\n     /// Other errors may also be returned according to `OpenOptions::open`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsPath>(path: P) -> io::Result<File> {\n         OpenOptions::new().read(true).open(path)\n@@ -139,6 +150,17 @@ impl File {\n     /// and will truncate it if it does.\n     ///\n     /// See the `OpenOptions::open` function for more details.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::create(\"foo.txt\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn create<P: AsPath>(path: P) -> io::Result<File> {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path)\n@@ -156,6 +178,20 @@ impl File {\n     ///\n     /// This function will attempt to ensure that all in-core data reaches the\n     /// filesystem before returning.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::create(\"foo.txt\"));\n+    /// try!(f.write_all(b\"Hello, world!\"));\n+    ///\n+    /// try!(f.sync_all());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_all(&self) -> io::Result<()> {\n         self.inner.fsync()\n@@ -170,6 +206,20 @@ impl File {\n     ///\n     /// Note that some platforms may simply implement this in terms of\n     /// `sync_all`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::create(\"foo.txt\"));\n+    /// try!(f.write_all(b\"Hello, world!\"));\n+    ///\n+    /// try!(f.sync_data());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_data(&self) -> io::Result<()> {\n         self.inner.datasync()\n@@ -182,12 +232,36 @@ impl File {\n     /// be shrunk. If it is greater than the current file's size, then the file\n     /// will be extended to `size` and have all of the intermediate data filled\n     /// in with 0s.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// try!(f.set_len(0));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_len(&self, size: u64) -> io::Result<()> {\n         self.inner.truncate(size)\n     }\n \n     /// Queries metadata about the underlying file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let metadata = try!(f.metadata());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n         self.inner.file_attr().map(Metadata)"}]}