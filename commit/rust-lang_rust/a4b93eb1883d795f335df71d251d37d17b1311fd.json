{"sha": "a4b93eb1883d795f335df71d251d37d17b1311fd", "node_id": "C_kwDOAAsO6NoAKGE0YjkzZWIxODgzZDc5NWYzMzVkZjcxZDI1MWQzN2QxN2IxMzExZmQ", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-01-23T13:57:49Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-01-31T16:09:31Z"}, "message": "Take in account the unreachable! macro in the non_fmt_panic lint", "tree": {"sha": "c28619dcef7d5a3d0802bc3fff240c4422e2d4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28619dcef7d5a3d0802bc3fff240c4422e2d4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b93eb1883d795f335df71d251d37d17b1311fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b93eb1883d795f335df71d251d37d17b1311fd", "html_url": "https://github.com/rust-lang/rust/commit/a4b93eb1883d795f335df71d251d37d17b1311fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b93eb1883d795f335df71d251d37d17b1311fd/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "565710b33cb20c901b8b3371d1364cf7fb11e79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/565710b33cb20c901b8b3371d1364cf7fb11e79b", "html_url": "https://github.com/rust-lang/rust/commit/565710b33cb20c901b8b3371d1364cf7fb11e79b"}], "stats": {"total": 195, "additions": 160, "deletions": 35}, "files": [{"sha": "603971a6a916121b1c24cb06131ac8a6bbe9cb58", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -277,7 +277,6 @@ language_item_table! {\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n     PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n     PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n-    PanicStr,                sym::panic_str,           panic_str,                  Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;"}, {"sha": "3130d57c2a9716233247f52df79fbd07dab29961", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -49,9 +49,11 @@ impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n             if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n+                let f_diagnostic_name = cx.tcx.get_diagnostic_name(def_id);\n+\n                 if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n                     || Some(def_id) == cx.tcx.lang_items().panic_fn()\n-                    || Some(def_id) == cx.tcx.lang_items().panic_str()\n+                    || f_diagnostic_name == Some(sym::panic_str)\n                 {\n                     if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n                         if matches!(\n@@ -61,6 +63,22 @@ impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n                             check_panic(cx, f, arg);\n                         }\n                     }\n+                } else if f_diagnostic_name == Some(sym::unreachable_display) {\n+                    if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n+                        if cx.tcx.is_diagnostic_item(sym::unreachable_2015_macro, id) {\n+                            check_panic(\n+                                cx,\n+                                f,\n+                                // This is safe because we checked above that the callee is indeed\n+                                // unreachable_display\n+                                match &arg.kind {\n+                                    // Get the borrowed arg not the borrow\n+                                    hir::ExprKind::AddrOf(ast::BorrowKind::Ref, _, arg) => arg,\n+                                    _ => bug!(\"call to unreachable_display without borrow\"),\n+                                },\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -85,8 +103,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         return;\n     }\n \n-    // Find the span of the argument to `panic!()`, before expansion in the\n-    // case of `panic!(some_macro!())`.\n+    // Find the span of the argument to `panic!()` or `unreachable!`, before expansion in the\n+    // case of `panic!(some_macro!())` or `unreachable!(some_macro!())`.\n     // We don't use source_callsite(), because this `panic!(..)` might itself\n     // be expanded from another macro, in which case we want to stop at that\n     // expansion.\n@@ -319,6 +337,7 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n                 | sym::std_panic_macro\n                 | sym::assert_macro\n                 | sym::debug_assert_macro\n+                | sym::unreachable_macro\n         ) {\n             break;\n         }"}, {"sha": "0798076411ac4bff1d157112732fea1ced9b0d07", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -50,7 +50,7 @@ pub const fn panic(expr: &'static str) -> ! {\n \n #[inline]\n #[track_caller]\n-#[lang = \"panic_str\"] // needed for `non-fmt-panics` lint\n+#[rustc_diagnostic_item = \"panic_str\"]\n #[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n pub const fn panic_str(expr: &str) -> ! {\n     panic_display(&expr);"}, {"sha": "d70ef31eed65c2965616233c391f05d7687509a4", "filename": "src/test/ui/macros/unreachable-arg.edition_2021.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -0,0 +1,13 @@\n+error: format argument must be a string literal\n+  --> $DIR/unreachable-arg.rs:15:18\n+   |\n+LL |     unreachable!(a);\n+   |                  ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     unreachable!(\"{}\", a);\n+   |                  +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "4024bd20b7914f66b8df3ea485c668a28525ce9b", "filename": "src/test/ui/macros/unreachable-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -0,0 +1,16 @@\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]run-fail\n+// [edition_2021]check-fail\n+// [edition_2015]error-pattern:internal error: entered unreachable code: hello\n+// [edition_2021]error-pattern:format argument must be a string literal\n+\n+#![allow(non_fmt_panics)]\n+\n+fn main() {\n+    let a = \"hello\";\n+    unreachable!(a);\n+}"}, {"sha": "ff059ad9e15ad53e94de73d53fcd8eac81cd4c5b", "filename": "src/test/ui/macros/unreachable-format-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -7,6 +7,8 @@\n // [edition_2015]error-pattern:internal error: entered unreachable code: x is {x}\n // [edition_2021]error-pattern:internal error: entered unreachable code: x is 5\n \n+#![allow(non_fmt_panics)]\n+\n fn main() {\n     let x = 5;\n     unreachable!(\"x is {x}\");"}, {"sha": "5191f1877a9eee221ad850e24fe7be65d3306ac9", "filename": "src/test/ui/non-fmt-panic.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -11,6 +11,7 @@ static S: &str = \"{bla}\";\n #[allow(unreachable_code)]\n fn main() {\n     panic!(\"{}\", \"here's a brace: {\"); //~ WARN panic message contains a brace\n+    unreachable!(\"{}\", \"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"{}\", \"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"{}\", \"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{}\", \"{:03x} {test} bla\");\n@@ -24,6 +25,8 @@ fn main() {\n     debug_assert!(false, \"{}\", \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(\"{}\", C); //~ WARN panic message is not a string literal\n     panic!(\"{}\", S); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", S); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", S); //~ WARN panic message is not a string literal\n     std::panic::panic_any(123); //~ WARN panic message is not a string literal\n     core::panic!(\"{}\", &*\"abc\"); //~ WARN panic message is not a string literal\n     std::panic::panic_any(Some(123)); //~ WARN panic message is not a string literal\n@@ -41,8 +44,10 @@ fn main() {\n     }\n \n     std::panic::panic_any(a!()); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", a!()); //~ WARN panic message is not a string literal\n \n     panic!(\"{}\", 1); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", 1); //~ WARN panic message is not a string literal\n     assert!(false, \"{}\", 1); //~ WARN panic message is not a string literal\n     debug_assert!(false, \"{}\", 1); //~ WARN panic message is not a string literal\n "}, {"sha": "d0d06b79775949647b66c6150975e74573982b86", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -11,6 +11,7 @@ static S: &str = \"{bla}\";\n #[allow(unreachable_code)]\n fn main() {\n     panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n+    unreachable!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{:03x} {test} bla\");\n@@ -24,6 +25,8 @@ fn main() {\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(C); //~ WARN panic message is not a string literal\n     panic!(S); //~ WARN panic message is not a string literal\n+    unreachable!(S); //~ WARN panic message is not a string literal\n+    unreachable!(S); //~ WARN panic message is not a string literal\n     std::panic!(123); //~ WARN panic message is not a string literal\n     core::panic!(&*\"abc\"); //~ WARN panic message is not a string literal\n     panic!(Some(123)); //~ WARN panic message is not a string literal\n@@ -41,8 +44,10 @@ fn main() {\n     }\n \n     panic!(a!()); //~ WARN panic message is not a string literal\n+    unreachable!(a!()); //~ WARN panic message is not a string literal\n \n     panic!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n+    unreachable!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n     assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n     debug_assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n "}, {"sha": "3305e5cc9068d81d726ce34a59b6fb2561a6f5bb", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 96, "deletions": 30, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4b93eb1883d795f335df71d251d37d17b1311fd/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=a4b93eb1883d795f335df71d251d37d17b1311fd", "patch": "@@ -12,7 +12,19 @@ LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            +++++\n \n warning: panic message contains a brace\n-  --> $DIR/non-fmt-panic.rs:14:31\n+  --> $DIR/non-fmt-panic.rs:14:35\n+   |\n+LL |     unreachable!(\"here's a brace: {\");\n+   |                                   ^\n+   |\n+   = note: this message is not used as a format string, but will be in Rust 2021\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     unreachable!(\"{}\", \"here's a brace: {\");\n+   |                  +++++\n+\n+warning: panic message contains a brace\n+  --> $DIR/non-fmt-panic.rs:15:31\n    |\n LL |     std::panic!(\"another one: }\");\n    |                               ^\n@@ -24,7 +36,7 @@ LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 +++++\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:15:25\n+  --> $DIR/non-fmt-panic.rs:16:25\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n@@ -40,7 +52,7 @@ LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  +++++\n \n warning: panic message contains unused formatting placeholders\n-  --> $DIR/non-fmt-panic.rs:16:21\n+  --> $DIR/non-fmt-panic.rs:17:21\n    |\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n@@ -56,7 +68,7 @@ LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:18:20\n+  --> $DIR/non-fmt-panic.rs:19:20\n    |\n LL |     assert!(false, S);\n    |                    ^\n@@ -69,7 +81,7 @@ LL |     assert!(false, \"{}\", S);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:20:20\n+  --> $DIR/non-fmt-panic.rs:21:20\n    |\n LL |     assert!(false, 123);\n    |                    ^^^\n@@ -82,7 +94,7 @@ LL |     assert!(false, \"{}\", 123);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:22:20\n+  --> $DIR/non-fmt-panic.rs:23:20\n    |\n LL |     assert!(false, Some(123));\n    |                    ^^^^^^^^^\n@@ -95,7 +107,7 @@ LL |     assert!(false, \"{:?}\", Some(123));\n    |                    +++++++\n \n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:24:27\n+  --> $DIR/non-fmt-panic.rs:25:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n@@ -107,7 +119,7 @@ LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:25:12\n+  --> $DIR/non-fmt-panic.rs:26:12\n    |\n LL |     panic!(C);\n    |            ^\n@@ -120,7 +132,7 @@ LL |     panic!(\"{}\", C);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:26:12\n+  --> $DIR/non-fmt-panic.rs:27:12\n    |\n LL |     panic!(S);\n    |            ^\n@@ -133,7 +145,33 @@ LL |     panic!(\"{}\", S);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:27:17\n+  --> $DIR/non-fmt-panic.rs:28:18\n+   |\n+LL |     unreachable!(S);\n+   |                  ^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", S);\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:29:18\n+   |\n+LL |     unreachable!(S);\n+   |                  ^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", S);\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:30:17\n    |\n LL |     std::panic!(123);\n    |                 ^^^\n@@ -150,7 +188,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:28:18\n+  --> $DIR/non-fmt-panic.rs:31:18\n    |\n LL |     core::panic!(&*\"abc\");\n    |                  ^^^^^^^\n@@ -163,7 +201,7 @@ LL |     core::panic!(\"{}\", &*\"abc\");\n    |                  +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:29:12\n+  --> $DIR/non-fmt-panic.rs:32:12\n    |\n LL |     panic!(Some(123));\n    |            ^^^^^^^^^\n@@ -180,7 +218,7 @@ LL |     std::panic::panic_any(Some(123));\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:30:12\n+  --> $DIR/non-fmt-panic.rs:33:12\n    |\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n@@ -196,7 +234,7 @@ LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n    |            +++++\n \n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:31:5\n+  --> $DIR/non-fmt-panic.rs:34:5\n    |\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,15 +246,15 @@ LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n    |            +++++\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:33:37\n+  --> $DIR/non-fmt-panic.rs:36:37\n    |\n LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |                                     ^^\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:43:12\n+  --> $DIR/non-fmt-panic.rs:46:12\n    |\n LL |     panic!(a!());\n    |            ^^^^\n@@ -233,7 +271,20 @@ LL |     std::panic::panic_any(a!());\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:45:12\n+  --> $DIR/non-fmt-panic.rs:47:18\n+   |\n+LL |     unreachable!(a!());\n+   |                  ^^^^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", a!());\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:49:12\n    |\n LL |     panic!(format!(\"{}\", 1));\n    |            ^^^^^^^^^^^^^^^^\n@@ -248,7 +299,22 @@ LL +     panic!(\"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:46:20\n+  --> $DIR/non-fmt-panic.rs:50:18\n+   |\n+LL |     unreachable!(format!(\"{}\", 1));\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+   = note: the unreachable!() macro supports formatting, so there's no need for the format!() macro here\n+help: remove the `format!(..)` macro call\n+   |\n+LL -     unreachable!(format!(\"{}\", 1));\n+LL +     unreachable!(\"{}\", 1);\n+   | \n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:51:20\n    |\n LL |     assert!(false, format!(\"{}\", 1));\n    |                    ^^^^^^^^^^^^^^^^\n@@ -263,7 +329,7 @@ LL +     assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:47:26\n+  --> $DIR/non-fmt-panic.rs:52:26\n    |\n LL |     debug_assert!(false, format!(\"{}\", 1));\n    |                          ^^^^^^^^^^^^^^^^\n@@ -278,7 +344,7 @@ LL +     debug_assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:49:12\n+  --> $DIR/non-fmt-panic.rs:54:12\n    |\n LL |     panic![123];\n    |            ^^^\n@@ -295,7 +361,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:50:12\n+  --> $DIR/non-fmt-panic.rs:55:12\n    |\n LL |     panic!{123};\n    |            ^^^\n@@ -312,7 +378,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:67:12\n+  --> $DIR/non-fmt-panic.rs:72:12\n    |\n LL |     panic!(v);\n    |     ------ ^\n@@ -323,7 +389,7 @@ LL |     panic!(v);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:68:20\n+  --> $DIR/non-fmt-panic.rs:73:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -332,7 +398,7 @@ LL |     assert!(false, v);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:72:12\n+  --> $DIR/non-fmt-panic.rs:77:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -349,7 +415,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:73:20\n+  --> $DIR/non-fmt-panic.rs:78:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -362,7 +428,7 @@ LL |     assert!(false, \"{:?}\", v);\n    |                    +++++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:77:12\n+  --> $DIR/non-fmt-panic.rs:82:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -379,7 +445,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:78:20\n+  --> $DIR/non-fmt-panic.rs:83:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -392,7 +458,7 @@ LL |     assert!(false, \"{}\", v);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:82:12\n+  --> $DIR/non-fmt-panic.rs:87:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -409,7 +475,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:83:20\n+  --> $DIR/non-fmt-panic.rs:88:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -421,5 +487,5 @@ help: add a \"{}\" format string to Display the message\n LL |     assert!(false, \"{}\", v);\n    |                    +++++\n \n-warning: 30 warnings emitted\n+warning: 35 warnings emitted\n "}]}