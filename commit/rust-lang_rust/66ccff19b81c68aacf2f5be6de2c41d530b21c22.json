{"sha": "66ccff19b81c68aacf2f5be6de2c41d530b21c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Y2NmZjE5YjgxYzY4YWFjZjJmNWJlNmRlMmM0MWQ1MzBiMjFjMjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-01T13:05:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-01T13:05:03Z"}, "message": "Update protable-simd", "tree": {"sha": "c171856888df54aaa3360e834b57a4e70218f12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c171856888df54aaa3360e834b57a4e70218f12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66ccff19b81c68aacf2f5be6de2c41d530b21c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66ccff19b81c68aacf2f5be6de2c41d530b21c22", "html_url": "https://github.com/rust-lang/rust/commit/66ccff19b81c68aacf2f5be6de2c41d530b21c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66ccff19b81c68aacf2f5be6de2c41d530b21c22/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b007722ad4fa825128c2183b137bd09f8a494f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b007722ad4fa825128c2183b137bd09f8a494f9", "html_url": "https://github.com/rust-lang/rust/commit/0b007722ad4fa825128c2183b137bd09f8a494f9"}], "stats": {"total": 60, "additions": 23, "deletions": 37}, "files": [{"sha": "722843903bbfaf345ac1c31bb6f01aeb5bbf64d0", "filename": "build_system/prepare.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66ccff19b81c68aacf2f5be6de2c41d530b21c22/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ccff19b81c68aacf2f5be6de2c41d530b21c22/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=66ccff19b81c68aacf2f5be6de2c41d530b21c22", "patch": "@@ -28,11 +28,11 @@ pub(crate) fn prepare() {\n     );\n \n     clone_repo(\n-        \"stdsimd\",\n-        \"https://github.com/rust-lang/stdsimd\",\n-        \"be96995d8ddec03fac9a0caf4d4c51c7fbc33507\",\n+        \"portable-simd\",\n+        \"https://github.com/rust-lang/portable-simd\",\n+        \"d42875302dd9e924f8d667b32e88989388989b79\",\n     );\n-    apply_patches(\"stdsimd\", Path::new(\"stdsimd\"));\n+    apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n \n     clone_repo(\n         \"simple-raytracer\","}, {"sha": "6c527833693986d8450765db7097ad71961885be", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "renamed", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/66ccff19b81c68aacf2f5be6de2c41d530b21c22/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/66ccff19b81c68aacf2f5be6de2c41d530b21c22/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=66ccff19b81c68aacf2f5be6de2c41d530b21c22", "patch": "@@ -4,21 +4,20 @@ Date: Sun, 25 Jul 2021 18:39:31 +0200\n Subject: [PATCH] Disable unsupported tests\n \n ---\n- crates/core_simd/src/array.rs        |  2 ++\n- crates/core_simd/src/lib.rs          |  2 +-\n+ crates/core_simd/src/vector.rs        |  2 ++\n  crates/core_simd/src/math.rs         |  4 ++++\n  crates/core_simd/tests/masks.rs      | 12 ------------\n  crates/core_simd/tests/ops_macros.rs |  6 ++++++\n  crates/core_simd/tests/round.rs      |  2 ++\n  6 files changed, 15 insertions(+), 13 deletions(-)\n \n-diff --git a/crates/core_simd/src/array.rs b/crates/core_simd/src/array.rs\n+diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs\n index 25c5309..2b3d819 100644\n---- a/crates/core_simd/src/array.rs\n-+++ b/crates/core_simd/src/array.rs\n+--- a/crates/core_simd/src/vector.rs\n++++ b/crates/core_simd/src/vector.rs\n @@ -22,6 +22,7 @@ where\n-     #[must_use]\n-     fn splat(val: Self::Scalar) -> Self;\n+         self.0\n+     }\n  \n +    /*\n      /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n@@ -31,27 +30,14 @@ index 25c5309..2b3d819 100644\n +    */\n  }\n  \n- macro_rules! impl_simdarray_for {\n-diff --git a/crates/core_simd/src/lib.rs b/crates/core_simd/src/lib.rs\n-index a64904d..299eb11 100644\n---- a/crates/core_simd/src/lib.rs\n-+++ b/crates/core_simd/src/lib.rs\n-@@ -1,7 +1,7 @@\n- #![no_std]\n- #![allow(incomplete_features)]\n- #![feature(\n--    const_generics, \n-+    const_generics,\n-     platform_intrinsics,\n-     repr_simd,\n-     simd_ffi,\n+ impl<T, const LANES: usize> Copy for Simd<T, LANES>\n diff --git a/crates/core_simd/src/math.rs b/crates/core_simd/src/math.rs\n index 7290a28..e394730 100644\n --- a/crates/core_simd/src/math.rs\n +++ b/crates/core_simd/src/math.rs\n @@ -2,6 +2,7 @@ macro_rules! impl_uint_arith {\n-     ($(($name:ident, $n:ident)),+) => {\n-         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+     ($($ty:ty),+) => {\n+         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n  \n +            /*\n              /// Lanewise saturating add.\n@@ -66,8 +52,8 @@ index 7290a28..e394730 100644\n      }\n  }\n @@ -46,6 +48,7 @@ macro_rules! impl_int_arith {\n-     ($(($name:ident, $n:ident)),+) => {\n-         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+     ($($ty:ty),+) => {\n+         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n  \n +            /*\n              /// Lanewise saturating add.\n@@ -87,7 +73,7 @@ index 61d8e44..2bccae2 100644\n +++ b/crates/core_simd/tests/masks.rs\n @@ -67,18 +67,6 @@ macro_rules! test_mask_api {\n                  assert_eq!(int.to_array(), [-1, 0, 0, -1, 0, 0, -1, 0]);\n-                 assert_eq!(core_simd::$name::<8>::from_int(int), mask);\n+                 assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n              }\n -\n -            #[test]\n@@ -96,10 +82,10 @@ index 61d8e44..2bccae2 100644\n -                    true, false, false, true, false, false, true, false,\n -                    true, true, false, false, false, false, false, true,\n -                ];\n--                let mask = core_simd::$name::<16>::from_array(values);\n+-                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n -                let bitmask = mask.to_bitmask();\n -                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n--                assert_eq!(core_simd::$name::<16>::from_bitmask(bitmask), mask);\n+-                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n -            }\n          }\n      }\n@@ -122,7 +108,7 @@ index cb39e73..fc0ebe1 100644\n                  }\n +                */\n  \n-                 fn sqrt<const LANES: usize>() {\n+                 fn recip<const LANES: usize>() {\n                      test_helpers::test_unary_elementwise(\n @@ -581,6 +585,7 @@ macro_rules! impl_float_tests {\n                      });\n@@ -138,8 +124,8 @@ index cb39e73..fc0ebe1 100644\n                  }\n +                */\n              }\n-         }\n-     }\n+ \n+             #[cfg(feature = \"std\")]\n diff --git a/crates/core_simd/tests/round.rs b/crates/core_simd/tests/round.rs\n index 37044a7..4cdc6b7 100644\n --- a/crates/core_simd/tests/round.rs", "previous_filename": "patches/0001-stdsimd-Disable-unsupported-tests.patch"}, {"sha": "28a7980d6613cf0eef6c013879a59f3f442950f4", "filename": "scripts/tests.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66ccff19b81c68aacf2f5be6de2c41d530b21c22/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/66ccff19b81c68aacf2f5be6de2c41d530b21c22/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=66ccff19b81c68aacf2f5be6de2c41d530b21c22", "patch": "@@ -137,8 +137,8 @@ function extended_sysroot_tests() {\n     fi\n     popd\n \n-    pushd stdsimd\n-    echo \"[TEST] rust-lang/stdsimd\"\n+    pushd portable-simd\n+    echo \"[TEST] rust-lang/portable-simd\"\n     ../build/cargo clean\n     ../build/cargo build --all-targets --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then"}]}