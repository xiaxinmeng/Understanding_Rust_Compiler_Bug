{"sha": "4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2FiMGUxNmI3ZjQyNGE4YzkzYzY5ZDM2ZTRmYTZmNzBlZjhmMjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-27T17:27:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-27T17:54:43Z"}, "message": "Emit \"no-frame-pointer-elim\" attribute for closures, shims, and glue.", "tree": {"sha": "70bcd2c03e9ae78d404530637462e1dfc0393b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70bcd2c03e9ae78d404530637462e1dfc0393b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "html_url": "https://github.com/rust-lang/rust/commit/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9", "html_url": "https://github.com/rust-lang/rust/commit/36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "100b204b50135089678affdbbdbebce7b7f14456", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -15,7 +15,7 @@ use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::PanicStrategy;\n+use session::config::{DebugInfoLevel, PanicStrategy};\n use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n use mir::transform as mir_pass;\n@@ -315,6 +315,11 @@ impl Session {\n         self.opts.debugging_opts.enable_nonzeroing_move_hints\n     }\n \n+    pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n+        self.opts.debuginfo != DebugInfoLevel::NoDebugInfo ||\n+        !self.target.target.options.eliminate_frame_pointer\n+    }\n+\n     /// Returns the symbol name for the registrar function,\n     /// given the crate Svh and the function DefIndex.\n     pub fn generate_plugin_registrar_symbol(&self, svh: &Svh, index: DefIndex)"}, {"sha": "01e9970dc76c349d5b499a85056f9a3d4c4d9d72", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -11,7 +11,6 @@\n \n use libc::c_uint;\n use llvm::{self, ValueRef};\n-use session::config::NoDebugInfo;\n pub use syntax::attr::InlineAttr;\n use syntax::ast;\n use context::CrateContext;\n@@ -74,25 +73,28 @@ pub fn naked(val: ValueRef, is_naked: bool) {\n     }\n }\n \n-/// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n-/// attributes.\n-pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n-    use syntax::attr::*;\n-    inline(llfn, find_inline_attr(Some(ccx.sess().diagnostic()), attrs));\n-\n+pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) {\n     // FIXME: #11906: Omitting frame pointers breaks retrieving the value of a\n     // parameter.\n-    let no_fp_elim = (ccx.sess().opts.debuginfo != NoDebugInfo) ||\n-                     !ccx.sess().target.target.options.eliminate_frame_pointer;\n-    if no_fp_elim {\n+    if ccx.sess().must_not_eliminate_frame_pointers() {\n         unsafe {\n             let attr = \"no-frame-pointer-elim\\0\".as_ptr() as *const _;\n             let val = \"true\\0\".as_ptr() as *const _;\n             llvm::LLVMAddFunctionAttrStringValue(llfn,\n                                                  llvm::FunctionIndex as c_uint,\n-                                                 attr, val);\n+                                                 attr,\n+                                                 val);\n         }\n     }\n+}\n+\n+/// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n+/// attributes.\n+pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n+    use syntax::attr::*;\n+    inline(llfn, find_inline_attr(Some(ccx.sess().diagnostic()), attrs));\n+\n+    set_frame_pointer_elimination(ccx, llfn);\n \n     for attr in attrs {\n         if attr.check_name(\"cold\") {"}, {"sha": "5b2cfbe46490d458ec569e7dd0ccecfbb1ecd351", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -381,7 +381,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n                                                          bare_fn_ty,\n                                                          \"fn_pointer_shim\");\n     let llfn = declare::define_internal_fn(ccx, &function_name, tuple_fn_ty);\n-\n+    attributes::set_frame_pointer_elimination(ccx, llfn);\n     //\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();"}, {"sha": "9cc5cbbbb65cb332088c22fc7b7a42a826820f45", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -171,6 +171,7 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // set an inline hint for all closures\n     attributes::inline(llfn, attributes::InlineAttr::Hint);\n+    attributes::set_frame_pointer_elimination(ccx, llfn);\n \n     debug!(\"get_or_create_declaration_if_closure(): inserting new \\\n             closure {:?}: {:?}\",\n@@ -377,6 +378,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let function_name =\n         symbol_names::internal_name_from_type_and_suffix(ccx, llonce_fn_ty, \"once_shim\");\n     let lloncefn = declare::define_internal_fn(ccx, &function_name, llonce_fn_ty);\n+    attributes::set_frame_pointer_elimination(ccx, lloncefn);\n \n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();"}, {"sha": "9787915840109b3dbfca40a67dee9fabd88dd22d", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -14,6 +14,7 @@\n \n use std;\n \n+use attributes;\n use back::symbol_names;\n use llvm;\n use llvm::{ValueRef, get_param};\n@@ -272,6 +273,7 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let fn_nm = symbol_names::internal_name_from_type_and_suffix(ccx, t, suffix);\n     assert!(declare::get_defined_value(ccx, &fn_nm).is_none());\n     let llfn = declare::declare_cfn(ccx, &fn_nm, llfnty);\n+    attributes::set_frame_pointer_elimination(ccx, llfn);\n     ccx.available_drop_glues().borrow_mut().insert(g, fn_nm);\n     ccx.drop_glues().borrow_mut().insert(g, llfn);\n "}, {"sha": "4b81d993e02e17b4c1d9a50f7d770bbdda01327c", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -10,6 +10,7 @@\n \n use std::rc::Rc;\n \n+use attributes;\n use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_params};\n@@ -91,6 +92,7 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     let function_name =\n         symbol_names::internal_name_from_type_and_suffix(ccx, method_ty, \"object_shim\");\n     let llfn = declare::define_internal_fn(ccx, &function_name, method_ty);\n+    attributes::set_frame_pointer_elimination(ccx, llfn);\n \n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();"}, {"sha": "c02dd7995f1e934ec3490ebd437c2042f230571f", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=4f7ab0e16b7f424a8c93c69d36e4fa6f70ef8f26", "patch": "@@ -151,6 +151,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 _ => bug!()\n             };\n             attributes::inline(lldecl, attributes::InlineAttr::Hint);\n+            attributes::set_frame_pointer_elimination(ccx, lldecl);\n             base::trans_ctor_shim(ccx, fn_node_id, disr, psubsts, lldecl);\n         }\n "}]}