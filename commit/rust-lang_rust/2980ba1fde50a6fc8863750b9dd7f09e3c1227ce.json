{"sha": "2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODBiYTFmZGU1MGE2ZmM4ODYzNzUwYjlkZDdmMDllM2MxMjI3Y2U=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-04T11:29:09Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-04T11:29:09Z"}, "message": "Support build.rs cargo:rustc-cfg", "tree": {"sha": "6b90bc58f5f7dc661d71d3a4a499ae028a9f43ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b90bc58f5f7dc661d71d3a4a499ae028a9f43ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "html_url": "https://github.com/rust-lang/rust/commit/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "html_url": "https://github.com/rust-lang/rust/commit/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168"}], "stats": {"total": 161, "additions": 158, "deletions": 3}, "files": [{"sha": "697a0458147d76fb376fc73f99f242f7d0a474a2", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "patch": "@@ -53,4 +53,13 @@ impl CfgOptions {\n     pub fn insert_features(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n         iter.into_iter().for_each(|feat| self.insert_key_value(\"feature\".into(), feat));\n     }\n+\n+    /// Shortcut to set cfgs\n+    pub fn insert_cfgs(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n+        iter.into_iter().for_each(|cfg| match cfg.find('=') {\n+            Some(split) => self\n+                .insert_key_value(cfg[0..split].into(), cfg[split + 1..].trim_matches('\"').into()),\n+            None => self.insert_atom(cfg),\n+        });\n+    }\n }"}, {"sha": "afbd301646bc451d57fdc1ee1adda6a4021f5a06", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "patch": "@@ -83,6 +83,7 @@ pub struct PackageData {\n     pub dependencies: Vec<PackageDependency>,\n     pub edition: Edition,\n     pub features: Vec<String>,\n+    pub cfgs: Vec<PathBuf>,\n     pub out_dir: Option<PathBuf>,\n     pub proc_macro_dylib_path: Option<PathBuf>,\n }\n@@ -165,10 +166,12 @@ impl CargoWorkspace {\n         })?;\n \n         let mut out_dir_by_id = FxHashMap::default();\n+        let mut cfgs = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n         if cargo_features.load_out_dirs_from_check {\n             let resources = load_extern_resources(cargo_toml, cargo_features)?;\n             out_dir_by_id = resources.out_dirs;\n+            cfgs = resources.cfgs;\n             proc_macro_dylib_paths = resources.proc_dylib_paths;\n         }\n \n@@ -194,6 +197,7 @@ impl CargoWorkspace {\n                 edition,\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n+                cfgs: cfgs.get(&id).cloned().unwrap_or_default(),\n                 out_dir: out_dir_by_id.get(&id).cloned(),\n                 proc_macro_dylib_path: proc_macro_dylib_paths.get(&id).cloned(),\n             });\n@@ -275,6 +279,7 @@ impl CargoWorkspace {\n pub struct ExternResources {\n     out_dirs: FxHashMap<PackageId, PathBuf>,\n     proc_dylib_paths: FxHashMap<PackageId, PathBuf>,\n+    cfgs: FxHashMap<PackageId, Vec<PathBuf>>,\n }\n \n pub fn load_extern_resources(\n@@ -300,8 +305,9 @@ pub fn load_extern_resources(\n     for message in cargo_metadata::parse_messages(output.stdout.as_slice()) {\n         if let Ok(message) = message {\n             match message {\n-                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n-                    res.out_dirs.insert(package_id, out_dir);\n+                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n+                    res.out_dirs.insert(package_id.clone(), out_dir);\n+                    res.cfgs.insert(package_id, cfgs);\n                 }\n \n                 Message::CompilerArtifact(message) => {"}, {"sha": "2d5d61b611f3e46f02b6008679bd67d044744fd6", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "patch": "@@ -399,6 +399,13 @@ impl ProjectWorkspace {\n                             let cfg_options = {\n                                 let mut opts = default_cfg_options.clone();\n                                 opts.insert_features(cargo[pkg].features.iter().map(Into::into));\n+                                opts.insert_cfgs(\n+                                    cargo[pkg]\n+                                        .cfgs\n+                                        .iter()\n+                                        .filter_map(|c| c.to_str())\n+                                        .map(Into::into),\n+                                );\n                                 opts\n                             };\n                             let mut env = Env::default();"}, {"sha": "e94fbce3a1d51e2fa51cc1dbaf2021fdffbd621e", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 134, "deletions": 1, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "patch": "@@ -9,7 +9,8 @@ use lsp_types::{\n };\n use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n-    Formatting, GotoDefinition, HoverRequest, OnEnter, Runnables, RunnablesParams,\n+    Formatting, GotoDefinition, GotoTypeDefinition, HoverRequest, OnEnter, Runnables,\n+    RunnablesParams,\n };\n use serde_json::json;\n use tempfile::TempDir;\n@@ -707,3 +708,135 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\nfn bar()\\n```\"\"#)\n }\n+\n+#[test]\n+fn build_rs_cfgs() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r###\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- build.rs\n+\n+fn main() {\n+    println!(\"cargo:rustc-cfg=atom_cfg\");\n+    println!(\"cargo:rustc-cfg=featlike=\\\"set\\\"\");\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}\n+//- src/main.rs\n+#[cfg(atom_cfg)]\n+struct A;\n+\n+#[cfg(bad_atom_cfg)]\n+struct A;\n+\n+#[cfg(featlike = \"set\")]\n+struct B;\n+\n+#[cfg(featlike = \"not_set\")]\n+struct B;\n+\n+fn main() {\n+    let va = A;\n+    let vb = B;\n+}\n+\"###,\n+    )\n+    .with_config(|config| {\n+        config.cargo.load_out_dirs_from_check = true;\n+    })\n+    .server();\n+    server.wait_until_workspace_is_loaded();\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(13, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 13\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\":13\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 1\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\":0\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 1\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 1\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(14, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 14\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\":14\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\":6\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 7\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n+}"}]}