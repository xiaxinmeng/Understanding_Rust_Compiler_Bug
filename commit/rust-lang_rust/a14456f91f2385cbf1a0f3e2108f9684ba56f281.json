{"sha": "a14456f91f2385cbf1a0f3e2108f9684ba56f281", "node_id": "C_kwDOAAsO6NoAKGExNDQ1NmY5MWYyMzg1Y2JmMWEwZjNlMjEwOGY5Njg0YmE1NmYyODE", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-24T22:21:10Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:10Z"}, "message": "Reduced the size of `LintExpectationId` by 12 bytes (RFC-2383)", "tree": {"sha": "de45fae588cf168f11facf6a1a4ce4d084d9b5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de45fae588cf168f11facf6a1a4ce4d084d9b5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14456f91f2385cbf1a0f3e2108f9684ba56f281", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn1IACgkQ/Ny/Ka9k\n1gFwzg/8CLvokDeyMM1aUsRuuK9P7Q9VGcVf2RnQ9UKM+HiX7mzK3A3c7gPCTXd0\nNuABBF63hYNa/8yGkEDS5HWpuVnu6ETNvg66pB0m7QqFiKYHNg3VS+qyamddnYLf\nlA7DA3jfEZ1Hxf5c6fGgsJPLhuwgoloK60wK5ty5RVD2UiNYz/oAnJFF9sSgSnVR\ndyBB23tJBJHR7rA8klUUQJKRH2HGX4N/QC2TcjVOj/gUKw+4mF96xwR8+rSEMMBn\npcPfk+N/LlPwHS5U8T8vb2JLHshxnFTxLod41ryxsQHIP6qmUV2xFoBPMovrFKOA\nzJKnznWTOTwTXRj8yaWcJZSWGCJJFxQflA0sB6ga3g9r5hjDTdAInKiMz8AhwJ/W\nBmX5Zo35RiBfiEjhkbp4I1tokVZA3ZksQ4lpkhcKOjZcmrFvokMbasJ14jGYbCku\ncGpt/f2Ci9PazvN9JJhCILJA53hgLWEGhQ8s2MnLJnJNgwwphrjdtPTFNXHfbSr+\nXp7ahBkxbTjKdyeM1emO8HfdHBoQf7EdRfyf4qIEqZFRWcAdaYIc9QTjqrJe2KcL\noPbTgyIPU43IUNFB+PNsNjyIR+1Ma2M6uiVp86dNXg/eVrqB3FAe3lLGdZ4PBFSO\nzxBnV2xFp0XXHKNcx9MZ5jNE/mSFU7Xqj/PK0C0ZRKMWvXILGsQ=\n=WJLO\n-----END PGP SIGNATURE-----", "payload": "tree de45fae588cf168f11facf6a1a4ce4d084d9b5ac\nparent 43dc430f5275a520dab25a5bc1c8a0d0ad2cb6b8\nauthor xFrednet <xFrednet@gmail.com> 1637792470 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646239570 +0100\n\nReduced the size of `LintExpectationId` by 12 bytes (RFC-2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14456f91f2385cbf1a0f3e2108f9684ba56f281", "html_url": "https://github.com/rust-lang/rust/commit/a14456f91f2385cbf1a0f3e2108f9684ba56f281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14456f91f2385cbf1a0f3e2108f9684ba56f281/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43dc430f5275a520dab25a5bc1c8a0d0ad2cb6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/43dc430f5275a520dab25a5bc1c8a0d0ad2cb6b8", "html_url": "https://github.com/rust-lang/rust/commit/43dc430f5275a520dab25a5bc1c8a0d0ad2cb6b8"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "7045f8cf06ceb41beafadaf8f257d27e684fcda1", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a14456f91f2385cbf1a0f3e2108f9684ba56f281/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14456f91f2385cbf1a0f3e2108f9684ba56f281/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=a14456f91f2385cbf1a0f3e2108f9684ba56f281", "patch": "@@ -312,7 +312,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             for (lint_index, li) in metas.iter_mut().enumerate() {\n                 let level = match level {\n                     Level::Expect(mut id) => {\n-                        id.set_lint_index(Some(lint_index));\n+                        id.set_lint_index(Some(lint_index as u16));\n                         Level::Expect(id)\n                     }\n                     level => level,\n@@ -601,7 +601,8 @@ impl<'s> LintLevelsBuilder<'s> {\n         hir_id: HirId,\n         attr_index: usize,\n     ) -> LintExpectationId {\n-        let stable_id = LintExpectationId::Stable { hir_id, attr_index, lint_index: None };\n+        let stable_id =\n+            LintExpectationId::Stable { hir_id, attr_index: attr_index as u16, lint_index: None };\n \n         self.expectation_id_map.insert(unstable_id, stable_id);\n "}, {"sha": "2e5fd479738bedc0a2c3a7938ef057713ad710cc", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a14456f91f2385cbf1a0f3e2108f9684ba56f281/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14456f91f2385cbf1a0f3e2108f9684ba56f281/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=a14456f91f2385cbf1a0f3e2108f9684ba56f281", "patch": "@@ -64,16 +64,20 @@ pub enum Applicability {\n ///\n /// Each lint inside the `expect` attribute is tracked individually, the `lint_index`\n /// identifies the lint inside the attribute and ensures that the IDs are unique.\n+///\n+/// The index values have a type of `u16` to reduce the size of the `LintExpectationId`.\n+/// It's reasonable to assume that no user will define 2^16 attributes on one node or\n+/// have that amount of lints listed. `u16` values should therefore suffice.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n pub enum LintExpectationId {\n     /// Used for lints emitted during the `EarlyLintPass`. This id is not\n     /// has stable and should not be cached.\n-    Unstable { attr_id: AttrId, lint_index: Option<usize> },\n+    Unstable { attr_id: AttrId, lint_index: Option<u16> },\n     /// The [`HirId`] that the lint expectation is attached to. This id is\n     /// stable and can be cached. The additional index ensures that nodes with\n     /// several expectations can correctly match diagnostics to the individual\n     /// expectation.\n-    Stable { hir_id: HirId, attr_index: usize, lint_index: Option<usize> },\n+    Stable { hir_id: HirId, attr_index: u16, lint_index: Option<u16> },\n }\n \n impl LintExpectationId {\n@@ -84,14 +88,14 @@ impl LintExpectationId {\n         }\n     }\n \n-    pub fn get_lint_index(&self) -> Option<usize> {\n+    pub fn get_lint_index(&self) -> Option<u16> {\n         let (LintExpectationId::Unstable { lint_index, .. }\n         | LintExpectationId::Stable { lint_index, .. }) = self;\n \n         *lint_index\n     }\n \n-    pub fn set_lint_index(&mut self, new_lint_index: Option<usize>) {\n+    pub fn set_lint_index(&mut self, new_lint_index: Option<u16>) {\n         let (LintExpectationId::Unstable { ref mut lint_index, .. }\n         | LintExpectationId::Stable { ref mut lint_index, .. }) = self;\n \n@@ -116,7 +120,7 @@ impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n }\n \n impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectationId {\n-    type KeyType = (HirId, usize, usize);\n+    type KeyType = (HirId, u16, u16);\n \n     #[inline]\n     fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {"}]}