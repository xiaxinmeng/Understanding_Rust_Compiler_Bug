{"sha": "4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "node_id": "C_kwDOAAsO6NoAKDQwODVlOTRlY2UxY2E0NjJhODlhYTI4ZTNkMzhhNWM4NzQyZmQyZTk", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-24T08:36:28Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:44Z"}, "message": "`super_relate_consts` do not spurriously fail on assoc consts", "tree": {"sha": "d70dfa458a991616c700639fc4a7e44038a4630c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70dfa458a991616c700639fc4a7e44038a4630c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "html_url": "https://github.com/rust-lang/rust/commit/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "html_url": "https://github.com/rust-lang/rust/commit/430f7d16e669d0dc21e7c7545c72720a4f0acfaf"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "a5580fa62ac4d6a780b5399e7553cbc7ed1cad40", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "patch": "@@ -631,6 +631,15 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         b = b.eval(tcx, relation.param_env());\n     }\n \n+    if tcx.features().generic_const_exprs {\n+        if let Ok(Some(a2)) = tcx.expand_abstract_consts(a) {\n+            a = a2;\n+        }\n+        if let Ok(Some(b2)) = tcx.expand_abstract_consts(b) {\n+            b = b2\n+        }\n+    }\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n@@ -647,22 +656,6 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Placeholder(p1), ty::ConstKind::Placeholder(p2)) => p1 == p2,\n         (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => a_val == b_val,\n \n-        (ty::ConstKind::Unevaluated(_), ty::ConstKind::Unevaluated(_))\n-            if tcx.features().generic_const_exprs =>\n-        {\n-            // FIXME(generic_const_exprs): this spurriously fails when relating two assoc consts\n-            // i.e. `<T as Trait>::ASSOC eq <T as Trait>::ASSOC` would return `false`. Wheras if\n-            // both were behind an anon const that gets normalized away here it would succeed.\n-            if let (Ok(Some(a)), Ok(Some(b))) = (\n-                tcx.expand_abstract_consts(a),\n-                tcx.expand_abstract_consts(b),\n-            ) && a.ty() == b.ty() {\n-                return relation.consts(a, b);\n-            } else {\n-                false\n-            }\n-        }\n-\n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n         // and is the better alternative to waiting until `generic_const_exprs` can\n         // be stabilized."}, {"sha": "274caa1e99312482039b4d2d76873b4f6c75f6be", "filename": "src/test/ui/const-generics/generic_const_exprs/assoc_const_unification/dropck_unifies_assoc_consts.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdropck_unifies_assoc_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4085e94ece1ca462a89aa28e3d38a5c8742fd2e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdropck_unifies_assoc_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdropck_unifies_assoc_consts.rs?ref=4085e94ece1ca462a89aa28e3d38a5c8742fd2e9", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+\n+struct Foo<T: Trait>(T)\n+where\n+    [(); T::ASSOC]:;\n+\n+impl<T: Trait> Drop for Foo<T>\n+where\n+    [(); T::ASSOC]:,\n+{\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}]}