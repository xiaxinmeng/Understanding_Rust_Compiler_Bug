{"sha": "ec56f59ac17ad5ae797ce431883be8f31e795d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNTZmNTlhYzE3YWQ1YWU3OTdjZTQzMTg4M2JlOGYzMWU3OTVkMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:22:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:26:28Z"}, "message": "Remove import from resolution", "tree": {"sha": "82cfed150ad966674e6291010b9b976239351a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cfed150ad966674e6291010b9b976239351a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec56f59ac17ad5ae797ce431883be8f31e795d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec56f59ac17ad5ae797ce431883be8f31e795d1b", "html_url": "https://github.com/rust-lang/rust/commit/ec56f59ac17ad5ae797ce431883be8f31e795d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec56f59ac17ad5ae797ce431883be8f31e795d1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8", "html_url": "https://github.com/rust-lang/rust/commit/6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "8b70e13c46a9cfc134ea42d526734386c8c251c0", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec56f59ac17ad5ae797ce431883be8f31e795d1b/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec56f59ac17ad5ae797ce431883be8f31e795d1b/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=ec56f59ac17ad5ae797ce431883be8f31e795d1b", "patch": "@@ -30,7 +30,7 @@ static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n     BuiltinType::ALL\n         .iter()\n         .map(|(name, ty)| {\n-            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: None })\n+            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: false })\n         })\n         .collect()\n });\n@@ -54,7 +54,7 @@ impl ItemScope {\n \n     pub fn declarations(&self) -> impl Iterator<Item = ModuleDefId> + '_ {\n         self.entries()\n-            .filter_map(|(_name, res)| if res.import.is_none() { Some(res.def) } else { None })\n+            .filter_map(|(_name, res)| if !res.import { Some(res.def) } else { None })\n             .flat_map(|per_ns| {\n                 per_ns.take_types().into_iter().chain(per_ns.take_values().into_iter())\n             })\n@@ -123,25 +123,21 @@ impl ItemScope {\n \n         if existing.def.types.is_none() && res.def.types.is_some() {\n             existing.def.types = res.def.types;\n-            existing.import = import.or(res.import);\n+            existing.import = import.is_some() || res.import;\n             changed = true;\n         }\n         if existing.def.values.is_none() && res.def.values.is_some() {\n             existing.def.values = res.def.values;\n-            existing.import = import.or(res.import);\n+            existing.import = import.is_some() || res.import;\n             changed = true;\n         }\n         if existing.def.macros.is_none() && res.def.macros.is_some() {\n             existing.def.macros = res.def.macros;\n-            existing.import = import.or(res.import);\n+            existing.import = import.is_some() || res.import;\n             changed = true;\n         }\n \n-        if existing.def.is_none()\n-            && res.def.is_none()\n-            && existing.import.is_none()\n-            && res.import.is_some()\n-        {\n+        if existing.def.is_none() && res.def.is_none() && !existing.import && res.import {\n             existing.import = res.import;\n         }\n         changed\n@@ -160,6 +156,5 @@ impl ItemScope {\n pub struct Resolution {\n     /// None for unresolved\n     pub def: PerNs,\n-    /// ident by which this is imported into local scope.\n-    pub(crate) import: Option<LocalImportId>,\n+    pub(crate) import: bool,\n }"}, {"sha": "c2db5472b4d89d68543f07d4ebe0501049c1a8d0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec56f59ac17ad5ae797ce431883be8f31e795d1b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec56f59ac17ad5ae797ce431883be8f31e795d1b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ec56f59ac17ad5ae797ce431883be8f31e795d1b", "patch": "@@ -219,7 +219,7 @@ where\n             self.update(\n                 self.def_map.root,\n                 None,\n-                &[(name, Resolution { def: PerNs::macros(macro_), import: None })],\n+                &[(name, Resolution { def: PerNs::macros(macro_), import: false })],\n             );\n         }\n     }\n@@ -404,7 +404,7 @@ where\n                             let variant = EnumVariantId { parent: e, local_id };\n                             let res = Resolution {\n                                 def: PerNs::both(variant.into(), variant.into()),\n-                                import: Some(import_id),\n+                                import: true,\n                             };\n                             (name, res)\n                         })\n@@ -431,7 +431,7 @@ where\n                         }\n                     }\n \n-                    let resolution = Resolution { def, import: Some(import_id) };\n+                    let resolution = Resolution { def, import: true };\n                     self.update(module_id, Some(import_id), &[(name, resolution)]);\n                 }\n                 None => tested_by!(bogus_paths),\n@@ -719,7 +719,7 @@ where\n             def: PerNs::types(\n                 ModuleId { krate: self.def_collector.def_map.krate, local_id: res }.into(),\n             ),\n-            import: None,\n+            import: false,\n         };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)]);\n         res\n@@ -791,7 +791,7 @@ where\n                 PerNs::types(def.into())\n             }\n         };\n-        let resolution = Resolution { def, import: None };\n+        let resolution = Resolution { def, import: false };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)])\n     }\n "}]}