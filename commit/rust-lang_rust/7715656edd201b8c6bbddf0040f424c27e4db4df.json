{"sha": "7715656edd201b8c6bbddf0040f424c27e4db4df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MTU2NTZlZGQyMDFiOGM2YmJkZGYwMDQwZjQyNGMyN2U0ZGI0ZGY=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-16T01:34:15Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-19T19:24:25Z"}, "message": "Add jsondocck tool, and use it for rustdoc JSON", "tree": {"sha": "a3c2f7b0835fd4f3728d85755df926566ee29f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c2f7b0835fd4f3728d85755df926566ee29f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7715656edd201b8c6bbddf0040f424c27e4db4df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAHMfYACgkQfsyTL4ss\ncx5xyw/9GGUF2AnBBL8ktx2GWBKZYHwa50UC7Gr6Ee2Fl0cJBZtSgfgr/VvSKKZv\nFORsnhvnLSZ5IA2EADzKsJve5g+ssp9In3XlLoElOlIu0jzBSWFg6yv37MZJ/Ed3\nb4B3eG+g0tpS0WAJLA5WRHMrMTpiP9fCHuw0oRZ3njTULTILt1ocmVk1cOHDF52h\nrnAn0GMV8pJYkNGWY2RMYLbAPC3F4Uca/t4EcUckZyZZP3vbvh61d6JrLGIBLqRy\na+WbvmtmI6lSGTojSqe48ZRf96daiqu89FvYetDXU0aIRwO6WJAKg0w55x8Tgnn2\nGmw54JLtSl/iV8w/XVuicsLvMF0WeRd+yu84nUXcj/TVDRb1QkYxxZRVr9Tzfrx/\nihi2etY/fXDy26DNn2MQcugxFjxzK4Wl3wdKJZyG0Cg6cZbjxfm5IT14pqM5iZQ+\nnZ44p6+CbMyjbXm90uQkUOSL0ZOv8lnPY+evYSIZpN83LzBnT7I1lDTdW97z5xCP\n/U6s7THn2HnU/0ccE7vkKpu3XdqN4+6KaGzyJ+zlakgCtw0vFrXrFt+WMked2gJo\nzsaNEnLExcmGPnslO4AQlT7v/SWMNqrP9ecF4YMOrzcCj7rsCAV+uSBnJuhyoQlr\nK+jW2sN4CpY/1itXYC8CZtmHQV5+nXJi2TfQNgsNnX/SyDeEMFY=\n=fCsO\n-----END PGP SIGNATURE-----", "payload": "tree a3c2f7b0835fd4f3728d85755df926566ee29f36\nparent f09fb488f70c5965ec4f64453a6e681fbfcff56c\nauthor Rune Tynan <runetynan@gmail.com> 1610760855 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1611084265 -0500\n\nAdd jsondocck tool, and use it for rustdoc JSON\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7715656edd201b8c6bbddf0040f424c27e4db4df", "html_url": "https://github.com/rust-lang/rust/commit/7715656edd201b8c6bbddf0040f424c27e4db4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7715656edd201b8c6bbddf0040f424c27e4db4df/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09fb488f70c5965ec4f64453a6e681fbfcff56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "html_url": "https://github.com/rust-lang/rust/commit/f09fb488f70c5965ec4f64453a6e681fbfcff56c"}], "stats": {"total": 1358, "additions": 542, "deletions": 816}, "files": [{"sha": "b2ae22b6abd9b8762b5ab4603cfc1d8271a5c949", "filename": "Cargo.lock", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -101,6 +101,12 @@ version = \"0.4.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4d25d88fd6b8041580a654f9d0c581a047baee2b3efee13275f2fc392fc75034\"\n \n+[[package]]\n+name = \"array_tool\"\n+version = \"1.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8f8cb5d814eb646a863c4f24978cff2880c4be96ad8cde2c0f0678732902e271\"\n+\n [[package]]\n name = \"arrayref\"\n version = \"0.3.6\"\n@@ -1630,6 +1636,32 @@ version = \"0.11.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"92c245af8786f6ac35f95ca14feca9119e71339aaab41e878e7cdd655c97e9e5\"\n \n+[[package]]\n+name = \"jsondocck\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"getopts\",\n+ \"jsonpath_lib\",\n+ \"lazy_static\",\n+ \"regex\",\n+ \"serde\",\n+ \"serde_json\",\n+ \"shlex\",\n+]\n+\n+[[package]]\n+name = \"jsonpath_lib\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"61352ec23883402b7d30b3313c16cbabefb8907361c4eb669d990cbb87ceee5a\"\n+dependencies = [\n+ \"array_tool\",\n+ \"env_logger 0.7.1\",\n+ \"log\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n [[package]]\n name = \"jsonrpc-client-transports\"\n version = \"14.2.1\"\n@@ -2854,9 +2886,9 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.3.9\"\n+version = \"1.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c3780fcf44b193bc4d09f36d2a3c87b251da4a046c87795a0d35f4f927ad8e6\"\n+checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n@@ -2876,9 +2908,9 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.18\"\n+version = \"0.6.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"26412eb97c6b088a6997e05f69403a802a92d520de2f8e63c2b65f9e0f47c4e8\"\n+checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n \n [[package]]\n name = \"remote-test-client\"\n@@ -4578,6 +4610,7 @@ version = \"1.0.59\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dcac07dbffa1c65e7f816ab9eba78eb142c6d44410f4eeba1e26e4f5dfa56b95\"\n dependencies = [\n+ \"indexmap\",\n  \"itoa\",\n  \"ryu\",\n  \"serde\","}, {"sha": "5bd1147cad55425b693b4118e5326cb210e8ab29", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -31,6 +31,7 @@ members = [\n   \"src/tools/rustdoc-themes\",\n   \"src/tools/unicode-table-generator\",\n   \"src/tools/expand-yaml-anchors\",\n+  \"src/tools/jsondocck\",\n ]\n \n exclude = ["}, {"sha": "103fe32fa82714e19a2beb129a181145f8329774", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -751,6 +751,11 @@ impl<'a> Builder<'a> {\n         cmd\n     }\n \n+    /// Gets a path to the jsondocck tool\n+    pub fn jsondocck(&self, compiler: Compiler, target: TargetSelection) -> PathBuf {\n+        self.ensure(tool::JsonDocCk { compiler, target })\n+    }\n+\n     /// Return the path to `llvm-config` for the target, if it exists.\n     ///\n     /// Note that this returns `None` if LLVM is disabled, or if we're in a"}, {"sha": "baa3e36dc514684e88810c0fca9f0fb3322ab4a5", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -1072,6 +1072,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--docck-python\").arg(builder.python());\n \n+        cmd.arg(\"--jsondocck-path\").arg(builder.jsondocck(compiler, target));\n+\n         if builder.config.build.ends_with(\"apple-darwin\") {\n             // Force /usr/bin/python3 on macOS for LLDB tests because we're loading the\n             // LLDB plugin's compiled module which only works with the system python"}, {"sha": "999ce71ff6e5022a7d123e36f61ffba395d3c5f4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -367,6 +367,7 @@ bootstrap_tool!(\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\";\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n     LintDocs, \"src/tools/lint-docs\", \"lint-docs\";\n+    JsonDocCk, \"src/tools/jsondocck\", \"jsondocck\", is_unstable_tool = true;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "c7ca0134f9ce16de61fa622dd347a2342d5fdffa", "filename": "src/etc/check_missing_items.py", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -4,6 +4,8 @@\n # `index` or `paths`. It DOES NOT check that the structure of the produced json is actually in\n # any way correct, for example an empty map would pass.\n \n+# FIXME: Better error output\n+\n import sys\n import json\n ", "previous_filename": "src/test/rustdoc-json/check_missing_items.py"}, {"sha": "6a921266336e0add8cd8604af5058d8e8530c3ba", "filename": "src/test/rustdoc-json/compare.py", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fcompare.py", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fcompare.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fcompare.py?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,132 +0,0 @@\n-#!/usr/bin/env python\n-\n-# This script can check that an expected json blob is a subset of what actually gets produced.\n-# The comparison is independent of the value of IDs (which are unstable) and instead uses their\n-# relative ordering to check them against eachother by looking them up in their respective blob's\n-# `index` or `paths` mappings. To add a new test run `rustdoc --output-format json -o . yourtest.rs`\n-# and then create `yourtest.expected` by stripping unnecessary details from `yourtest.json`. If\n-# you're on windows, replace `\\` with `/`.\n-\n-# WARNING: The error messages produced by this may be misleading, in the case of list re-ordering\n-#          it may point to apparently unrelated keys.\n-\n-import copy\n-import sys\n-import json\n-import types\n-\n-# Used instead of the string ids when used as references.\n-# Not used as keys in `index` or `paths`\n-class ID(str):\n-    pass\n-\n-\n-class SubsetException(Exception):\n-    def __init__(self, msg, trace):\n-        self.msg = msg\n-        self.trace = msg\n-        super().__init__(\"{}: {}\".format(trace, msg))\n-\n-\n-def check_subset(expected_main, actual_main, base_dir):\n-    expected_index = expected_main[\"index\"]\n-    expected_paths = expected_main[\"paths\"]\n-    actual_index = actual_main[\"index\"]\n-    actual_paths = actual_main[\"paths\"]\n-    already_checked = set()\n-\n-    def _check_subset(expected, actual, trace):\n-        expected_type = type(expected)\n-        actual_type = type(actual)\n-\n-        if actual_type is str:\n-            actual = normalize(actual).replace(base_dir, \"$TEST_BASE_DIR\")\n-\n-        if expected_type is not actual_type:\n-            raise SubsetException(\n-                \"expected type `{}`, got `{}`\".format(expected_type, actual_type), trace\n-            )\n-\n-\n-        if expected_type in (int, bool, str) and expected != actual:\n-            raise SubsetException(\"expected `{}`, got: `{}`\".format(expected, actual), trace)\n-        if expected_type is dict:\n-            for key in expected:\n-                if key not in actual:\n-                    raise SubsetException(\n-                        \"Key `{}` not found in output\".format(key), trace\n-                    )\n-                new_trace = copy.deepcopy(trace)\n-                new_trace.append(key)\n-                _check_subset(expected[key], actual[key], new_trace)\n-        elif expected_type is list:\n-            expected_elements = len(expected)\n-            actual_elements = len(actual)\n-            if expected_elements != actual_elements:\n-                raise SubsetException(\n-                    \"Found {} items, expected {}\".format(\n-                        expected_elements, actual_elements\n-                    ),\n-                    trace,\n-                )\n-            for expected, actual in zip(expected, actual):\n-                new_trace = copy.deepcopy(trace)\n-                new_trace.append(expected)\n-                _check_subset(expected, actual, new_trace)\n-        elif expected_type is ID and expected not in already_checked:\n-            already_checked.add(expected)\n-            _check_subset(\n-                expected_index.get(expected, {}), actual_index.get(actual, {}), trace\n-            )\n-            _check_subset(\n-                expected_paths.get(expected, {}), actual_paths.get(actual, {}), trace\n-            )\n-\n-    _check_subset(expected_main[\"root\"], actual_main[\"root\"], [])\n-\n-\n-def rustdoc_object_hook(obj):\n-    # No need to convert paths, index and external_crates keys to ids, since\n-    # they are the target of resolution, and never a source itself.\n-    if \"id\" in obj and obj[\"id\"]:\n-        obj[\"id\"] = ID(obj[\"id\"])\n-    if \"root\" in obj:\n-        obj[\"root\"] = ID(obj[\"root\"])\n-    if \"items\" in obj:\n-        obj[\"items\"] = [ID(id) for id in obj[\"items\"]]\n-    if \"variants\" in obj:\n-        obj[\"variants\"] = [ID(id) for id in obj[\"variants\"]]\n-    if \"fields\" in obj:\n-        obj[\"fields\"] = [ID(id) for id in obj[\"fields\"]]\n-    if \"impls\" in obj:\n-        obj[\"impls\"] = [ID(id) for id in obj[\"impls\"]]\n-    if \"implementors\" in obj:\n-        obj[\"implementors\"] = [ID(id) for id in obj[\"implementors\"]]\n-    if \"links\" in obj:\n-        obj[\"links\"] = {s: ID(id) for s, id in obj[\"links\"]}\n-    if \"variant_kind\" in obj and obj[\"variant_kind\"] == \"struct\":\n-        obj[\"variant_inner\"] = [ID(id) for id in obj[\"variant_inner\"]]\n-    return obj\n-\n-\n-def main(expected_fpath, actual_fpath, base_dir):\n-    print(\n-        \"checking that {} is a logical subset of {}\".format(\n-            expected_fpath, actual_fpath\n-        )\n-    )\n-    with open(expected_fpath) as expected_file:\n-        expected_main = json.load(expected_file, object_hook=rustdoc_object_hook)\n-    with open(actual_fpath) as actual_file:\n-        actual_main = json.load(actual_file, object_hook=rustdoc_object_hook)\n-    check_subset(expected_main, actual_main, base_dir)\n-    print(\"all checks passed\")\n-\n-def normalize(s):\n-    return s.replace('\\\\', '/')\n-\n-if __name__ == \"__main__\":\n-    if len(sys.argv) < 4:\n-        print(\"Usage: `compare.py expected.json actual.json test-dir`\")\n-    else:\n-        main(sys.argv[1], sys.argv[2], normalize(sys.argv[3]))"}, {"sha": "80070e75f1e5eae657ae68a5a33495d93bc67abe", "filename": "src/test/rustdoc-json/nested.expected", "status": "removed", "additions": 0, "deletions": 196, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fnested.expected", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fnested.expected", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.expected?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,196 +0,0 @@\n-{\n-  \"crate_version\": null,\n-  \"external_crates\": {},\n-  \"format_version\": 1,\n-  \"includes_private\": false,\n-  \"index\": {\n-    \"0:0\": {\n-      \"attrs\": [],\n-      \"crate_id\": 0,\n-      \"deprecation\": null,\n-      \"docs\": \"\",\n-      \"id\": \"0:0\",\n-      \"inner\": {\n-        \"is_crate\": true,\n-        \"items\": [\n-          \"0:3\"\n-        ]\n-      },\n-      \"kind\": \"module\",\n-      \"links\": {},\n-      \"name\": \"nested\",\n-      \"source\": {\n-        \"begin\": [\n-          2,\n-          0\n-        ],\n-        \"end\": [\n-          7,\n-          1\n-        ],\n-        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n-      },\n-      \"visibility\": \"public\"\n-    },\n-    \"0:3\": {\n-      \"attrs\": [],\n-      \"crate_id\": 0,\n-      \"deprecation\": null,\n-      \"docs\": \"\",\n-      \"id\": \"0:3\",\n-      \"inner\": {\n-        \"is_crate\": false,\n-        \"items\": [\n-          \"0:4\",\n-          \"0:7\"\n-        ]\n-      },\n-      \"kind\": \"module\",\n-      \"links\": {},\n-      \"name\": \"l1\",\n-      \"source\": {\n-        \"begin\": [\n-          2,\n-          0\n-        ],\n-        \"end\": [\n-          7,\n-          1\n-        ],\n-        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n-      },\n-      \"visibility\": \"public\"\n-    },\n-    \"0:4\": {\n-      \"attrs\": [],\n-      \"crate_id\": 0,\n-      \"deprecation\": null,\n-      \"docs\": \"\",\n-      \"id\": \"0:4\",\n-      \"inner\": {\n-        \"is_crate\": false,\n-        \"items\": [\n-          \"0:5\"\n-        ]\n-      },\n-      \"kind\": \"module\",\n-      \"links\": {},\n-      \"name\": \"l3\",\n-      \"source\": {\n-        \"begin\": [\n-          3,\n-          4\n-        ],\n-        \"end\": [\n-          5,\n-          5\n-        ],\n-        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n-      },\n-      \"visibility\": \"public\"\n-    },\n-    \"0:5\": {\n-      \"attrs\": [],\n-      \"crate_id\": 0,\n-      \"deprecation\": null,\n-      \"docs\": \"\",\n-      \"id\": \"0:5\",\n-      \"inner\": {\n-        \"fields\": [],\n-        \"fields_stripped\": false,\n-        \"generics\": {\n-          \"params\": [],\n-          \"where_predicates\": []\n-        },\n-        \"impls\": [\n-          \"0:10\",\n-          \"0:11\",\n-          \"0:12\",\n-          \"0:14\",\n-          \"0:15\"\n-        ],\n-        \"struct_type\": \"unit\"\n-      },\n-      \"kind\": \"struct\",\n-      \"links\": {},\n-      \"name\": \"L4\",\n-      \"source\": {\n-        \"begin\": [\n-          4,\n-          8\n-        ],\n-        \"end\": [\n-          4,\n-          22\n-        ],\n-        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n-      },\n-      \"visibility\": \"public\"\n-    },\n-    \"0:7\": {\n-      \"attrs\": [],\n-      \"crate_id\": 0,\n-      \"deprecation\": null,\n-      \"docs\": \"\",\n-      \"id\": \"0:7\",\n-      \"inner\": {\n-        \"glob\": false,\n-        \"id\": \"0:5\",\n-        \"name\": \"L4\",\n-        \"span\": \"l3::L4\"\n-      },\n-      \"kind\": \"import\",\n-      \"links\": {},\n-      \"name\": null,\n-      \"source\": {\n-        \"begin\": [\n-          6,\n-          4\n-        ],\n-        \"end\": [\n-          6,\n-          19\n-        ],\n-        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n-      },\n-      \"visibility\": \"public\"\n-    }\n-  },\n-  \"paths\": {\n-    \"0:0\": {\n-      \"crate_id\": 0,\n-      \"kind\": \"module\",\n-      \"path\": [\n-        \"nested\"\n-      ]\n-    },\n-    \"0:3\": {\n-      \"crate_id\": 0,\n-      \"kind\": \"module\",\n-      \"path\": [\n-        \"nested\",\n-        \"l1\"\n-      ]\n-    },\n-    \"0:4\": {\n-      \"crate_id\": 0,\n-      \"kind\": \"module\",\n-      \"path\": [\n-        \"nested\",\n-        \"l1\",\n-        \"l3\"\n-      ]\n-    },\n-    \"0:5\": {\n-      \"crate_id\": 0,\n-      \"kind\": \"struct\",\n-      \"path\": [\n-        \"nested\",\n-        \"l1\",\n-        \"l3\",\n-        \"L4\"\n-      ]\n-    }\n-  },\n-  \"root\": \"0:0\"\n-}\n\\ No newline at end of file"}, {"sha": "2f32f4ef76d32c84fb9b61eb2103b3beac2bebe9", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -1,7 +1,25 @@\n // edition:2018\n+\n+// @has nested.json \"$.index.['0:0'].kind\" \\\"module\\\"\n+// @has - \"$.index.['0:0'].inner.is_crate\" true\n+// @has - \"$.index.['0:0'].inner.items[*]\" \\\"0:3\\\"\n+\n+// @has nested.json \"$.index.['0:3'].kind\" \\\"module\\\"\n+// @has - \"$.index.['0:3'].inner.is_crate\" false\n+// @has - \"$.index.['0:3'].inner.items[*]\" \\\"0:4\\\"\n+// @has - \"$.index.['0:3'].inner.items[*]\" \\\"0:7\\\"\n pub mod l1 {\n+\n+    // @has nested.json \"$.index.['0:4'].kind\" \\\"module\\\"\n+    // @has - \"$.index.['0:4'].inner.is_crate\" false\n+    // @has - \"$.index.['0:4'].inner.items[*]\" \\\"0:5\\\"\n     pub mod l3 {\n+\n+        // @has nested.json \"$.index.['0:5'].kind\" \\\"struct\\\"\n+        // @has - \"$.index.['0:5'].inner.struct_type\" \\\"unit\\\"\n         pub struct L4;\n     }\n+    // @has nested.json \"$.index.['0:7'].kind\" \\\"import\\\"\n+    // @has - \"$.index.['0:7'].inner.glob\" false\n     pub use l3::L4;\n }"}, {"sha": "799829de3fd6c9a6a29d52e6a8d90e9b30d24ea4", "filename": "src/test/rustdoc-json/structs.expected", "status": "removed", "additions": 0, "deletions": 456, "changes": 456, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs.expected?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,456 +0,0 @@\n-{\n-  \"root\": \"0:0\",\n-  \"version\": null,\n-  \"includes_private\": false,\n-  \"index\": {\n-    \"0:9\": {\n-      \"crate_id\": 0,\n-      \"name\": \"Unit\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          7,\n-          0\n-        ],\n-        \"end\": [\n-          7,\n-          16\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct\",\n-      \"inner\": {\n-        \"struct_type\": \"unit\",\n-        \"generics\": {\n-          \"params\": [],\n-          \"where_predicates\": []\n-        },\n-        \"fields_stripped\": false,\n-        \"fields\": []\n-      }\n-    },\n-    \"0:8\": {\n-      \"crate_id\": 0,\n-      \"name\": \"1\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          5,\n-          22\n-        ],\n-        \"end\": [\n-          5,\n-          28\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"resolved_path\",\n-        \"inner\": {\n-          \"name\": \"String\",\n-          \"id\": \"5:5035\",\n-          \"args\": {\n-            \"angle_bracketed\": {\n-              \"args\": [],\n-              \"bindings\": []\n-            }\n-          },\n-          \"param_names\": []\n-        }\n-      }\n-    },\n-    \"0:18\": {\n-      \"crate_id\": 0,\n-      \"name\": \"stuff\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          15,\n-          4\n-        ],\n-        \"end\": [\n-          15,\n-          17\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"resolved_path\",\n-        \"inner\": {\n-          \"name\": \"Vec\",\n-          \"id\": \"5:4322\",\n-          \"args\": {\n-            \"angle_bracketed\": {\n-              \"args\": [\n-                {\n-                  \"type\": {\n-                    \"kind\": \"generic\",\n-                    \"inner\": \"T\"\n-                  }\n-                }\n-              ],\n-              \"bindings\": []\n-            }\n-          },\n-          \"param_names\": []\n-        }\n-      }\n-    },\n-    \"0:11\": {\n-      \"crate_id\": 0,\n-      \"name\": \"WithPrimitives\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          9,\n-          0\n-        ],\n-        \"end\": [\n-          12,\n-          1\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct\",\n-      \"inner\": {\n-        \"struct_type\": \"plain\",\n-        \"generics\": {\n-          \"params\": [\n-            {\n-              \"name\": \"'a\",\n-              \"kind\": \"lifetime\"\n-            }\n-          ],\n-          \"where_predicates\": []\n-        },\n-        \"fields_stripped\": true\n-      }\n-    },\n-    \"0:14\": {\n-      \"crate_id\": 0,\n-      \"name\": \"s\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          11,\n-          4\n-        ],\n-        \"end\": [\n-          11,\n-          14\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"borrowed_ref\",\n-        \"inner\": {\n-          \"lifetime\": \"'a\",\n-          \"mutable\": false,\n-          \"type\": {\n-            \"kind\": \"primitive\",\n-            \"inner\": \"str\"\n-          }\n-        }\n-      }\n-    },\n-    \"0:19\": {\n-      \"crate_id\": 0,\n-      \"name\": \"things\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          16,\n-          4\n-        ],\n-        \"end\": [\n-          16,\n-          25\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"resolved_path\",\n-        \"inner\": {\n-          \"name\": \"HashMap\",\n-          \"id\": \"1:6600\",\n-          \"args\": {\n-            \"angle_bracketed\": {\n-              \"args\": [\n-                {\n-                  \"type\": {\n-                    \"kind\": \"generic\",\n-                    \"inner\": \"U\"\n-                  }\n-                },\n-                {\n-                  \"type\": {\n-                    \"kind\": \"generic\",\n-                    \"inner\": \"U\"\n-                  }\n-                }\n-              ],\n-              \"bindings\": []\n-            }\n-          },\n-          \"param_names\": []\n-        }\n-      }\n-    },\n-    \"0:15\": {\n-      \"crate_id\": 0,\n-      \"name\": \"WithGenerics\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          14,\n-          0\n-        ],\n-        \"end\": [\n-          17,\n-          1\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct\",\n-      \"inner\": {\n-        \"struct_type\": \"plain\",\n-        \"generics\": {\n-          \"params\": [\n-            {\n-              \"name\": \"T\",\n-              \"kind\": {\n-                \"type\": {\n-                  \"bounds\": [],\n-                  \"default\": null\n-                }\n-              }\n-            },\n-            {\n-              \"name\": \"U\",\n-              \"kind\": {\n-                \"type\": {\n-                  \"bounds\": [],\n-                  \"default\": null\n-                }\n-              }\n-            }\n-          ],\n-          \"where_predicates\": []\n-        },\n-        \"fields_stripped\": true\n-      }\n-    },\n-    \"0:0\": {\n-      \"crate_id\": 0,\n-      \"name\": \"structs\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          1,\n-          0\n-        ],\n-        \"end\": [\n-          17,\n-          1\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"module\",\n-      \"inner\": {\n-        \"is_crate\": true,\n-        \"items\": [\n-          \"0:4\",\n-          \"0:5\",\n-          \"0:9\",\n-          \"0:11\",\n-          \"0:15\"\n-        ]\n-      }\n-    },\n-    \"0:13\": {\n-      \"crate_id\": 0,\n-      \"name\": \"num\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          10,\n-          4\n-        ],\n-        \"end\": [\n-          10,\n-          12\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"primitive\",\n-        \"inner\": \"u32\"\n-      }\n-    },\n-    \"0:5\": {\n-      \"crate_id\": 0,\n-      \"name\": \"Tuple\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          5,\n-          0\n-        ],\n-        \"end\": [\n-          5,\n-          30\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct\",\n-      \"inner\": {\n-        \"struct_type\": \"tuple\",\n-        \"generics\": {\n-          \"params\": [],\n-          \"where_predicates\": []\n-        },\n-        \"fields_stripped\": true\n-      }\n-    },\n-    \"0:4\": {\n-      \"crate_id\": 0,\n-      \"name\": \"PlainEmpty\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          3,\n-          0\n-        ],\n-        \"end\": [\n-          3,\n-          24\n-        ]\n-      },\n-      \"visibility\": \"public\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct\",\n-      \"inner\": {\n-        \"struct_type\": \"plain\",\n-        \"generics\": {\n-          \"params\": [],\n-          \"where_predicates\": []\n-        },\n-        \"fields_stripped\": false,\n-        \"fields\": []\n-      }\n-    },\n-    \"0:7\": {\n-      \"crate_id\": 0,\n-      \"name\": \"0\",\n-      \"source\": {\n-        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n-        \"begin\": [\n-          5,\n-          17\n-        ],\n-        \"end\": [\n-          5,\n-          20\n-        ]\n-      },\n-      \"visibility\": \"default\",\n-      \"docs\": \"\",\n-      \"links\": {},\n-      \"attrs\": [],\n-      \"deprecation\": null,\n-      \"kind\": \"struct_field\",\n-      \"inner\": {\n-        \"kind\": \"primitive\",\n-        \"inner\": \"u32\"\n-      }\n-    }\n-  },\n-  \"paths\": {\n-    \"5:4322\": {\n-      \"crate_id\": 5,\n-      \"path\": [\n-        \"alloc\",\n-        \"vec\",\n-        \"Vec\"\n-      ],\n-      \"kind\": \"struct\"\n-    },\n-    \"5:5035\": {\n-      \"crate_id\": 5,\n-      \"path\": [\n-        \"alloc\",\n-        \"string\",\n-        \"String\"\n-      ],\n-      \"kind\": \"struct\"\n-    },\n-    \"1:6600\": {\n-      \"crate_id\": 1,\n-      \"path\": [\n-        \"std\",\n-        \"collections\",\n-        \"hash\",\n-        \"map\",\n-        \"HashMap\"\n-      ],\n-      \"kind\": \"struct\"\n-    }\n-  },\n-  \"external_crates\": {\n-    \"1\": {\n-      \"name\": \"std\"\n-    },\n-    \"5\": {\n-      \"name\": \"alloc\"\n-    }\n-  },\n-  \"format_version\": 1\n-}"}, {"sha": "43fc4743503aa5348f02b06a042ae7de7fc91200", "filename": "src/test/rustdoc-json/structs.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Frustdoc-json%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,17 +0,0 @@\n-use std::collections::HashMap;\n-\n-pub struct PlainEmpty {}\n-\n-pub struct Tuple(u32, String);\n-\n-pub struct Unit;\n-\n-pub struct WithPrimitives<'a> {\n-    num: u32,\n-    s: &'a str,\n-}\n-\n-pub struct WithGenerics<T, U> {\n-    stuff: Vec<T>,\n-    things: HashMap<U, U>,\n-}"}, {"sha": "9e41b1b72a2bf082404d9b0d2143129b8a804c60", "filename": "src/test/rustdoc-json/structs/plain_empty.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,7 @@\n+// @has plain_empty.json \"$.index.['0:3'].name\" \\\"PlainEmpty\\\"\n+// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n+// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n+// @has - \"$.index.['0:3'].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index.['0:3'].inner.fields_stripped\" false\n+// @has - \"$.index.['0:3'].inner.fields\" []\n+pub struct PlainEmpty {}"}, {"sha": "de9a0da8e72dcacdb054248ed6e868f38e8fffb4", "filename": "src/test/rustdoc-json/structs/tuple.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,6 @@\n+// @has tuple.json \"$.index.['0:3'].name\" \\\"Tuple\\\"\n+// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n+// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n+// @has - \"$.index.['0:3'].inner.struct_type\" \\\"tuple\\\"\n+// @has - \"$.index.['0:3'].inner.fields_stripped\" true\n+pub struct Tuple(u32, String);"}, {"sha": "14a1a7ec5d49592512d8c9ba82fce40db1f310fb", "filename": "src/test/rustdoc-json/structs/unit.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,6 @@\n+// @has unit.json \"$.index.['0:3'].name\" \\\"Unit\\\"\n+// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n+// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n+// @has - \"$.index.['0:3'].inner.struct_type\" \\\"unit\\\"\n+// @has - \"$.index.['0:3'].inner.fields\" []\n+pub struct Unit;"}, {"sha": "549729b4ca7c1847d9469d0e64b5163a27a702ed", "filename": "src/test/rustdoc-json/structs/with_generics.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,15 @@\n+use std::collections::HashMap;\n+\n+// @has with_generics.json \"$.index.['0:4'].name\" \\\"WithGenerics\\\"\n+// @has - \"$.index.['0:4'].visibility\" \\\"public\\\"\n+// @has - \"$.index.['0:4'].kind\" \\\"struct\\\"\n+// @has - \"$.index.['0:4'].inner.generics.params[0].name\" \\\"T\\\"\n+// @has - \"$.index.['0:4'].inner.generics.params[0].kind.type\"\n+// @has - \"$.index.['0:4'].inner.generics.params[1].name\" \\\"U\\\"\n+// @has - \"$.index.['0:4'].inner.generics.params[1].kind.type\"\n+// @has - \"$.index.['0:4'].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index.['0:4'].inner.fields_stripped\" true\n+pub struct WithGenerics<T, U> {\n+    stuff: Vec<T>,\n+    things: HashMap<U, U>,\n+}"}, {"sha": "f948b61f79bf9bb13d3ca7917034c3d3181c8f78", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,11 @@\n+// @has with_primitives.json \"$.index.['0:3'].name\" \\\"WithPrimitives\\\"\n+// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n+// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n+// @has - \"$.index.['0:3'].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @has - \"$.index.['0:3'].inner.generics.params[0].kind\" \\\"lifetime\\\"\n+// @has - \"$.index.['0:3'].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index.['0:3'].inner.fields_stripped\" true\n+pub struct WithPrimitives<'a> {\n+    num: u32,\n+    s: &'a str,\n+}"}, {"sha": "4cefb562b13e5191261e629e9265e2011b83cece", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -198,6 +198,9 @@ pub struct Config {\n     /// The Python executable to use for htmldocck.\n     pub docck_python: String,\n \n+    /// The jsondocck executable.\n+    pub jsondocck_path: String,\n+\n     /// The LLVM `FileCheck` binary path.\n     pub llvm_filecheck: Option<PathBuf>,\n "}, {"sha": "ec99fde0df9c2f03e3f2955bb03d9375cf05a8c4", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -45,6 +45,7 @@ fn config() -> Config {\n         \"--rustc-path=\",\n         \"--lldb-python=\",\n         \"--docck-python=\",\n+        \"--jsondocck-path=\",\n         \"--src-base=\",\n         \"--build-base=\",\n         \"--stage-id=stage2\","}, {"sha": "03a443c8bff23cf6409085a3a74e93b3df9597d9", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -60,6 +60,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"rust-demangler-path\", \"path to rust-demangler to use in tests\", \"PATH\")\n         .reqopt(\"\", \"lldb-python\", \"path to python to use for doc tests\", \"PATH\")\n         .reqopt(\"\", \"docck-python\", \"path to python to use for doc tests\", \"PATH\")\n+        .reqopt(\"\", \"jsondocck-path\", \"path to jsondocck to use for doc tests\", \"PATH\")\n         .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n         .optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\")\n         .optopt(\"\", \"run-clang-based-tests-with\", \"path to Clang executable\", \"PATH\")\n@@ -196,6 +197,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let has_tidy = Command::new(\"tidy\")\n         .arg(\"--version\")\n         .stdout(Stdio::null())\n+        .stderr(Stdio::null())\n         .status()\n         .map_or(false, |status| status.success());\n     Config {\n@@ -207,6 +209,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         rust_demangler_path: matches.opt_str(\"rust-demangler-path\").map(PathBuf::from),\n         lldb_python: matches.opt_str(\"lldb-python\").unwrap(),\n         docck_python: matches.opt_str(\"docck-python\").unwrap(),\n+        jsondocck_path: matches.opt_str(\"jsondocck-path\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n         run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),"}, {"sha": "b15a563a930e70051afea04ad91c647b265cebc1", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -2490,27 +2490,27 @@ impl<'test> TestCx<'test> {\n         let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n         json_out.set_extension(\"json\");\n         let res = self.cmd2procres(\n-            Command::new(&self.config.docck_python)\n-                .arg(root.join(\"src/test/rustdoc-json/check_missing_items.py\"))\n-                .arg(&json_out),\n+            Command::new(&self.config.jsondocck_path)\n+                .arg(\"--doc-dir\")\n+                .arg(root.join(&out_dir))\n+                .arg(\"--template\")\n+                .arg(&self.testpaths.file),\n         );\n \n         if !res.status.success() {\n-            self.fatal_proc_rec(\"check_missing_items failed!\", &res);\n+            self.fatal_proc_rec(\"jsondocck failed!\", &res)\n         }\n \n-        let mut expected = self.testpaths.file.clone();\n-        expected.set_extension(\"expected\");\n+        let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n+        json_out.set_extension(\"json\");\n         let res = self.cmd2procres(\n             Command::new(&self.config.docck_python)\n-                .arg(root.join(\"src/test/rustdoc-json/compare.py\"))\n-                .arg(&expected)\n-                .arg(&json_out)\n-                .arg(&expected.parent().unwrap()),\n+                .arg(root.join(\"src/etc/check_missing_items.py\"))\n+                .arg(&json_out),\n         );\n \n         if !res.status.success() {\n-            self.fatal_proc_rec(\"compare failed!\", &res);\n+            self.fatal_proc_rec(\"check_missing_items failed!\", &res);\n         }\n     }\n "}, {"sha": "97052ef58d6f2d0e7d876bacd375947595ab9540", "filename": "src/tools/jsondocck/Cargo.toml", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2FCargo.toml?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,14 @@\n+[package]\n+name = \"jsondocck\"\n+version = \"0.1.0\"\n+authors = [\"Rune Tynan <runetynan@gmail.com>\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+jsonpath_lib = \"0.2\"\n+getopts = \"0.2\"\n+regex = \"1.4\"\n+lazy_static = \"1.4\"\n+shlex = \"0.1\"\n+serde = \"1.0\"\n+serde_json = \"1.0\""}, {"sha": "32c32bc0890f61bfe21abf77d6292c4d5fe89e79", "filename": "src/tools/jsondocck/src/cache.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,70 @@\n+use crate::error::CkError;\n+use serde_json::Value;\n+use std::collections::HashMap;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+\n+#[derive(Debug)]\n+pub struct Cache {\n+    root: PathBuf,\n+    files: HashMap<PathBuf, String>,\n+    values: HashMap<PathBuf, Value>,\n+    last_path: Option<PathBuf>,\n+}\n+\n+impl Cache {\n+    pub fn new(doc_dir: &str) -> Cache {\n+        Cache {\n+            root: <str as AsRef<Path>>::as_ref(doc_dir).to_owned(),\n+            files: HashMap::new(),\n+            values: HashMap::new(),\n+            last_path: None,\n+        }\n+    }\n+\n+    fn resolve_path(&mut self, path: &String) -> Result<PathBuf, CkError> {\n+        if path != \"-\" {\n+            let resolve = self.root.join(path);\n+            self.last_path = Some(resolve.clone());\n+            Ok(resolve)\n+        } else {\n+            match &self.last_path {\n+                Some(p) => Ok(p.clone()),\n+                None => unreachable!(),\n+            }\n+        }\n+    }\n+\n+    pub fn get_file(&mut self, path: &String) -> Result<String, CkError> {\n+        let path = self.resolve_path(path)?;\n+\n+        if let Some(f) = self.files.get(&path) {\n+            return Ok(f.clone());\n+        }\n+\n+        let file = fs::read_to_string(&path)?;\n+\n+        self.files.insert(path, file.clone());\n+\n+        Ok(file)\n+        // Err(_) => Err(CkError::FailedCheck(format!(\"File {:?} does not exist / could not be opened\", path)))\n+    }\n+\n+    pub fn get_value(&mut self, path: &String) -> Result<Value, CkError> {\n+        let path = self.resolve_path(path)?;\n+\n+        if let Some(v) = self.values.get(&path) {\n+            return Ok(v.clone());\n+        }\n+\n+        let file = fs::File::open(&path)?;\n+        // Err(_) => return Err(CkError::FailedCheck(format!(\"File {:?} does not exist / could not be opened\", path)))\n+\n+        let val = serde_json::from_reader::<_, Value>(file)?;\n+\n+        self.values.insert(path, val.clone());\n+\n+        Ok(val)\n+        // Err(_) => Err(CkError::FailedCheck(format!(\"File {:?} did not contain valid JSON\", path)))\n+    }\n+}"}, {"sha": "e76ebe1fa80f02719e14b2f92edee0efdb12453a", "filename": "src/tools/jsondocck/src/config.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,41 @@\n+use getopts::Options;\n+\n+#[derive(Debug)]\n+pub struct Config {\n+    /// The directory documentation output was generated in\n+    pub doc_dir: String,\n+    /// The file documentation was generated for, with docck commands to check\n+    pub template: String,\n+}\n+\n+pub fn parse_config(args: Vec<String>) -> Config {\n+    let mut opts = Options::new();\n+    opts.reqopt(\"\", \"doc-dir\", \"Path to the documentation directory\", \"PATH\")\n+        .reqopt(\"\", \"template\", \"Path to the template file\", \"PATH\")\n+        .optflag(\"h\", \"help\", \"show this message\");\n+\n+    let (argv0, args_) = args.split_first().unwrap();\n+    if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n+        let message = format!(\"Usage: {} <doc-dir> <template>\", argv0);\n+        println!(\"{}\", opts.usage(&message));\n+        println!();\n+        panic!()\n+    }\n+\n+    let matches = &match opts.parse(args_) {\n+        Ok(m) => m,\n+        Err(f) => panic!(\"{:?}\", f),\n+    };\n+\n+    if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n+        let message = format!(\"Usage: {} <doc-dir> <template>\", argv0);\n+        println!(\"{}\", opts.usage(&message));\n+        println!();\n+        panic!()\n+    }\n+\n+    Config {\n+        doc_dir: matches.opt_str(\"doc-dir\").unwrap(),\n+        template: matches.opt_str(\"template\").unwrap(),\n+    }\n+}"}, {"sha": "53b9af2874b8a253ad12df2dc6ca98a48c297441", "filename": "src/tools/jsondocck/src/error.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Ferror.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,28 @@\n+use crate::Command;\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Debug)]\n+pub enum CkError {\n+    /// A check failed. File didn't exist or failed to match the command\n+    FailedCheck(String, Command),\n+    /// An error triggered by some other error\n+    Induced(Box<dyn Error>),\n+}\n+\n+impl fmt::Display for CkError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            CkError::FailedCheck(msg, cmd) => {\n+                write!(f, \"Failed check: {} on line {}\", msg, cmd.lineno)\n+            }\n+            CkError::Induced(err) => write!(f, \"Check failed: {}\", err),\n+        }\n+    }\n+}\n+\n+impl<T: Error + 'static> From<T> for CkError {\n+    fn from(err: T) -> CkError {\n+        CkError::Induced(Box::new(err))\n+    }\n+}"}, {"sha": "6155128f1a70f49911c54152f7ec6734ab246ebe", "filename": "src/tools/jsondocck/src/main.rs", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715656edd201b8c6bbddf0040f424c27e4db4df/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=7715656edd201b8c6bbddf0040f424c27e4db4df", "patch": "@@ -0,0 +1,260 @@\n+use jsonpath_lib::select;\n+use lazy_static::lazy_static;\n+use regex::{Regex, RegexBuilder};\n+use serde_json::Value;\n+use std::{env, fmt, fs};\n+\n+mod cache;\n+mod config;\n+mod error;\n+\n+use cache::Cache;\n+use config::parse_config;\n+use error::CkError;\n+\n+fn main() -> Result<(), String> {\n+    let config = parse_config(env::args().collect());\n+\n+    let mut failed = Vec::new();\n+    let mut cache = Cache::new(&config.doc_dir);\n+    let commands = get_commands(&config.template)\n+        .map_err(|_| format!(\"Jsondocck failed for {}\", &config.template))?;\n+\n+    for command in commands {\n+        if let Err(e) = check_command(command, &mut cache) {\n+            failed.push(e);\n+        }\n+    }\n+\n+    if failed.is_empty() {\n+        Ok(())\n+    } else {\n+        for i in failed {\n+            eprintln!(\"{}\", i);\n+        }\n+        Err(format!(\"Jsondocck failed for {}\", &config.template))\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Command {\n+    negated: bool,\n+    kind: CommandKind,\n+    args: Vec<String>,\n+    lineno: usize,\n+}\n+\n+#[derive(Debug)]\n+pub enum CommandKind {\n+    Has,\n+    Count,\n+}\n+\n+impl CommandKind {\n+    fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n+        let count = match self {\n+            CommandKind::Has => (1..=3).contains(&args.len()),\n+            CommandKind::Count => 3 == args.len(),\n+        };\n+\n+        if !count {\n+            print_err(&format!(\"Incorrect number of arguments to `@{}`\", self), lineno);\n+            return false;\n+        }\n+\n+        match self {\n+            CommandKind::Has => {\n+                if args[0] == \"-\" && command_num == 0 {\n+                    print_err(\n+                        &format!(\"Tried to use the previous path in the first command\"),\n+                        lineno,\n+                    );\n+                    return false;\n+                }\n+            }\n+            CommandKind::Count => {\n+                if args[0] == \"-\" && command_num == 0 {\n+                    print_err(\n+                        &format!(\"Tried to use the previous path in the first command\"),\n+                        lineno,\n+                    );\n+                    return false;\n+                }\n+                if args[2].parse::<usize>().is_err() {\n+                    print_err(&format!(\"Third argument to @count must be a valid usize\"), lineno);\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        true\n+    }\n+}\n+\n+impl fmt::Display for CommandKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let text = match self {\n+            CommandKind::Has => \"has\",\n+            CommandKind::Count => \"count\",\n+        };\n+        write!(f, \"{}\", text)\n+    }\n+}\n+\n+lazy_static! {\n+    static ref LINE_PATTERN: Regex = RegexBuilder::new(\n+        r#\"\n+        \\s(?P<invalid>!?)@(?P<negated>!?)\n+        (?P<cmd>[A-Za-z]+(?:-[A-Za-z]+)*)\n+        (?P<args>.*)$\n+    \"#\n+    )\n+    .ignore_whitespace(true)\n+    .unicode(true)\n+    .build()\n+    .unwrap();\n+}\n+\n+fn print_err(msg: &str, lineno: usize) {\n+    eprintln!(\"Invalid command: {} on line {}\", msg, lineno)\n+}\n+\n+fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n+    let mut commands = Vec::new();\n+    let mut errors = false;\n+    let file = fs::read_to_string(template).unwrap();\n+\n+    for (lineno, line) in file.split('\\n').enumerate() {\n+        let lineno = lineno + 1;\n+\n+        let cap = match LINE_PATTERN.captures(line) {\n+            Some(c) => c,\n+            None => continue,\n+        };\n+\n+        let negated = match cap.name(\"negated\") {\n+            Some(m) => m.as_str() == \"!\",\n+            None => false,\n+        };\n+        let cmd = cap.name(\"cmd\").unwrap().as_str();\n+\n+        let cmd = match cmd {\n+            \"has\" => CommandKind::Has,\n+            \"count\" => CommandKind::Count,\n+            _ => {\n+                print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n+                errors = true;\n+                continue;\n+            }\n+        };\n+\n+        if let Some(m) = cap.name(\"invalid\") {\n+            if m.as_str() == \"!\" {\n+                print_err(\n+                    &format!(\n+                        \"`!@{0}{1}`, (help: try with `@!{1}`)\",\n+                        if negated { \"!\" } else { \"\" },\n+                        cmd,\n+                    ),\n+                    lineno,\n+                );\n+                errors = true;\n+                continue;\n+            }\n+        }\n+\n+        let args = match cap.name(\"args\") {\n+            Some(m) => shlex::split(m.as_str()).unwrap(),\n+            None => vec![],\n+        };\n+\n+        if !cmd.validate(&args, commands.len(), lineno) {\n+            errors = true;\n+            continue;\n+        }\n+\n+        commands.push(Command { negated, kind: cmd, args, lineno })\n+    }\n+\n+    if !errors { Ok(commands) } else { Err(()) }\n+}\n+\n+fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n+    let result = match command.kind {\n+        CommandKind::Has => {\n+            match command.args.len() {\n+                // @has <path> = file existence\n+                1 => match cache.get_file(&command.args[0]) {\n+                    Ok(_) => true,\n+                    Err(_) => false,\n+                },\n+                // @has <path> <jsonpath> = check path exists\n+                2 => {\n+                    let val = cache.get_value(&command.args[0])?;\n+\n+                    match select(&val, &command.args[1]) {\n+                        Ok(results) => !results.is_empty(),\n+                        Err(_) => false,\n+                    }\n+                }\n+                // @has <path> <jsonpath> <value> = check *any* item matched by path equals value\n+                3 => {\n+                    let val = cache.get_value(&command.args[0])?;\n+                    match select(&val, &command.args[1]) {\n+                        Ok(results) => {\n+                            let pat: Value = serde_json::from_str(&command.args[2]).unwrap();\n+\n+                            !results.is_empty() && results.into_iter().any(|val| *val == pat)\n+                        }\n+                        Err(_) => false,\n+                    }\n+                }\n+                _ => {\n+                    unreachable!()\n+                }\n+            }\n+        }\n+        CommandKind::Count => {\n+            match command.args.len() {\n+                // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n+                3 => {\n+                    let expected: usize = command.args[2].parse().unwrap();\n+\n+                    let val = cache.get_value(&command.args[0])?;\n+                    match select(&val, &command.args[1]) {\n+                        Ok(results) => results.len() == expected,\n+                        Err(_) => false,\n+                    }\n+                }\n+                _ => {\n+                    unreachable!()\n+                }\n+            }\n+        }\n+    };\n+\n+    if result == command.negated {\n+        if command.negated {\n+            Err(CkError::FailedCheck(\n+                format!(\n+                    \"`@!{} {}` matched when it shouldn't\",\n+                    command.kind,\n+                    command.args.join(\" \")\n+                ),\n+                command,\n+            ))\n+        } else {\n+            // FIXME: In the future, try 'peeling back' each step, and see at what level the match failed\n+            Err(CkError::FailedCheck(\n+                format!(\n+                    \"`@{} {}` didn't match when it should\",\n+                    command.kind,\n+                    command.args.join(\" \")\n+                ),\n+                command,\n+            ))\n+        }\n+    } else {\n+        Ok(())\n+    }\n+}"}]}