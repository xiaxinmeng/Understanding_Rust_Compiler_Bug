{"sha": "6f1a79cabe011c7487652e61130275a2940c47bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMWE3OWNhYmUwMTFjNzQ4NzY1MmU2MTEzMDI3NWEyOTQwYzQ3YmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T02:45:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T06:42:26Z"}, "message": "GlobalCtxt: Erase `LintStore` type.", "tree": {"sha": "16dd2e22ebe2754e0a1ad0bd47a7e8f8269d52b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dd2e22ebe2754e0a1ad0bd47a7e8f8269d52b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1a79cabe011c7487652e61130275a2940c47bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1a79cabe011c7487652e61130275a2940c47bc", "html_url": "https://github.com/rust-lang/rust/commit/6f1a79cabe011c7487652e61130275a2940c47bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1a79cabe011c7487652e61130275a2940c47bc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "html_url": "https://github.com/rust-lang/rust/commit/c151782d76d1d664c1e55dd7ec2b44d3a18867c2"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "15ef6d44d46da0c5cd1fa87032fb4e212a4edd44", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6f1a79cabe011c7487652e61130275a2940c47bc", "patch": "@@ -8,7 +8,7 @@ use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use crate::lint::{maybe_lint_level_root, struct_lint_level, LintSource, LintStore};\n+use crate::lint::{maybe_lint_level_root, struct_lint_level, LintSource};\n use crate::middle;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::cstore::EncodedMetadata;\n@@ -947,7 +947,11 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n-    pub lint_store: Lrc<LintStore>,\n+    /// This only ever stores a `LintStore` but we don't want a dependency on that type here.\n+    ///\n+    /// FIXME(Centril): consider `dyn LintStoreMarker` once\n+    /// we can upcast to `Any` for some additional type safety.\n+    pub lint_store: Lrc<dyn Any>,\n \n     pub dep_graph: DepGraph,\n \n@@ -1116,7 +1120,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n-        lint_store: Lrc<LintStore>,\n+        lint_store: Lrc<dyn Any>,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n         arenas: &'tcx AllArenas,"}, {"sha": "e3ab604d39881e6a4e44baeec0bafd00839be986", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=6f1a79cabe011c7487652e61130275a2940c47bc", "patch": "@@ -15,8 +15,7 @@\n //! for all lint attributes.\n \n use rustc::hir::map::Map;\n-use rustc::lint::LateContext;\n-use rustc::lint::{LateLintPass, LateLintPassObject};\n+use rustc::lint::{LateContext, LateLintPass, LateLintPassObject, LintStore};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n@@ -31,6 +30,12 @@ use syntax::walk_list;\n use log::debug;\n use std::slice;\n \n+/// Extract the `LintStore` from the query context.\n+/// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n+crate fn unerased_lint_store<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx LintStore {\n+    tcx.lint_store.downcast_ref().unwrap()\n+}\n+\n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n@@ -356,7 +361,7 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: &tcx.lint_store,\n+        lint_store: unerased_lint_store(tcx),\n         last_node_with_lint_attrs: tcx.hir().as_local_hir_id(module_def_id).unwrap(),\n         generics: None,\n         only_module: true,\n@@ -386,7 +391,7 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n     let mut passes: Vec<_> =\n-        tcx.lint_store.late_module_passes.iter().map(|pass| (pass)()).collect();\n+        unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)()).collect();\n \n     if !passes.is_empty() {\n         late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });\n@@ -403,7 +408,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_store: &tcx.lint_store,\n+        lint_store: unerased_lint_store(tcx),\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n@@ -424,7 +429,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n }\n \n fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n-    let mut passes = tcx.lint_store.late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();\n+    let mut passes = unerased_lint_store(tcx).late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();\n \n     if !tcx.sess.opts.debugging_opts.no_interleave_lints {\n         if !passes.is_empty() {\n@@ -443,7 +448,7 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tcx>, b\n         }\n \n         let mut passes: Vec<_> =\n-            tcx.lint_store.late_module_passes.iter().map(|pass| (pass)()).collect();\n+            unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)()).collect();\n \n         for pass in &mut passes {\n             tcx.sess"}, {"sha": "a4910a02590d06d897f4c2eb312fd309c3b21819", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=6f1a79cabe011c7487652e61130275a2940c47bc", "patch": "@@ -1,3 +1,4 @@\n+use super::late::unerased_lint_store;\n use rustc::hir::map::Map;\n use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n@@ -11,11 +12,11 @@ pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n \n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n-    let store = &tcx.lint_store;\n+    let store = unerased_lint_store(tcx);\n     let mut builder = LintLevelMapBuilder {\n         levels: LintLevelSets::builder(tcx.sess, false, &store),\n         tcx: tcx,\n-        store: store,\n+        store,\n     };\n     let krate = tcx.hir().krate();\n "}, {"sha": "f62e9c466daeee1a0ba19972fc44d77aef93b916", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1a79cabe011c7487652e61130275a2940c47bc/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6f1a79cabe011c7487652e61130275a2940c47bc", "patch": "@@ -14,6 +14,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(crate_visibility_modifier)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}]}