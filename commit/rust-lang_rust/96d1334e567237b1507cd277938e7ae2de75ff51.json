{"sha": "96d1334e567237b1507cd277938e7ae2de75ff51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZDEzMzRlNTY3MjM3YjE1MDdjZDI3NzkzOGU3YWUyZGU3NWZmNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T20:36:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T20:36:12Z"}, "message": "Auto merge of #56572 - kevgrasso:let_self_err_dev, r=estebank\n\nContexually dependent error message for E0424 when value is assigned to \"self\"\n\nThis is an improvement for pull request #54495 referencing issue #54369. If the \"self\" keyword is assigned a value as though it were a valid identifier, it will now report:\n```\nlet self = \"self\";\n    ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n```\ninstead of\n```\nlet self = \"self\";\n    ^^^^ `self` value is a keyword only available in methods with `self` parameter\n```\nIf anyone has a better idea for what the error should be I'd be happy to modify it appropriately.", "tree": {"sha": "fe65d9a14a288c1ae63fb45ac2a59030646d5646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe65d9a14a288c1ae63fb45ac2a59030646d5646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96d1334e567237b1507cd277938e7ae2de75ff51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96d1334e567237b1507cd277938e7ae2de75ff51", "html_url": "https://github.com/rust-lang/rust/commit/96d1334e567237b1507cd277938e7ae2de75ff51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96d1334e567237b1507cd277938e7ae2de75ff51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "html_url": "https://github.com/rust-lang/rust/commit/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f"}, {"sha": "9de6beeae28841d7a8b6bc06d6b66a30c723939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de6beeae28841d7a8b6bc06d6b66a30c723939d", "html_url": "https://github.com/rust-lang/rust/commit/9de6beeae28841d7a8b6bc06d6b66a30c723939d"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "e449fece6b474a2b33ccc7ddf9041df7c1deab41", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=96d1334e567237b1507cd277938e7ae2de75ff51", "patch": "@@ -3010,6 +3010,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         // Visit all direct subpatterns of this pattern.\n         let outer_pat_id = pat.id;\n         pat.walk(&mut |pat| {\n+            debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.node);\n             match pat.node {\n                 PatKind::Ident(bmode, ident, ref opt_pat) => {\n                     // First try to resolve the identifier as some existing\n@@ -3166,6 +3167,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                  format!(\"not found in {}\", mod_str),\n                  item_span)\n             };\n+\n             let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n@@ -3189,11 +3191,22 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {\n+                debug!(\"smart_resolve_path_fragment E0424 source:{:?}\", source);\n+\n                 __diagnostic_used!(E0424);\n                 err.code(DiagnosticId::Error(\"E0424\".into()));\n-                err.span_label(span, format!(\"`self` value is a keyword \\\n-                                               only available in \\\n-                                               methods with `self` parameter\"));\n+                err.span_label(span, match source {\n+                    PathSource::Pat => {\n+                        format!(\"`self` value is a keyword \\\n+                                and may not be bound to \\\n+                                variables or shadowed\")\n+                    }\n+                    _ => {\n+                        format!(\"`self` value is a keyword \\\n+                                only available in methods \\\n+                                with `self` parameter\")\n+                    }\n+                });\n                 return (err, Vec::new());\n             }\n "}, {"sha": "20d42da1c0c40f5a96026c40777b2046d1f55f2c", "filename": "src/test/ui/error-codes/E0424.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs?ref=96d1334e567237b1507cd277938e7ae2de75ff51", "patch": "@@ -19,4 +19,5 @@ impl Foo {\n }\n \n fn main () {\n+    let self = \"self\"; //~ ERROR E0424\n }"}, {"sha": "5eccd7d2283fedfb32226e272f1676937256a89b", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96d1334e567237b1507cd277938e7ae2de75ff51/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=96d1334e567237b1507cd277938e7ae2de75ff51", "patch": "@@ -4,6 +4,12 @@ error[E0424]: expected value, found module `self`\n LL |         self.bar(); //~ ERROR E0424\n    |         ^^^^ `self` value is a keyword only available in methods with `self` parameter\n \n-error: aborting due to previous error\n+error[E0424]: expected unit struct/variant or constant, found module `self`\n+  --> $DIR/E0424.rs:22:9\n+   |\n+LL |     let self = \"self\"; //~ ERROR E0424\n+   |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0424`."}]}