{"sha": "78f7ac561c0b360650b36a175f39475bc237230f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjdhYzU2MWMwYjM2MDY1MGIzNmExNzVmMzk0NzViYzIzNzIzMGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-28T11:34:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T01:48:49Z"}, "message": "rejigger how we handle used trait imports\n\nThe previous way was not friendly to incremental compilation. The new\nplan is to compute, for each body, a set of trait imports used in that\nbody (slightly subtle: for a closure, we assign the trait imports to the\nenclosing fn). Then we walk all bodies and union these sets. The reason\nwe do this is that we can save the individual sets in the incremental\nstate, and then recompute only those sets that are needed. Before we\nwere planning to save only the final union, but in that case if some\ncomponents are invalidated we have to recompute *all* of them since we\ndon't have enough information to \"partly\" invalidate a result.\n\nIn truth, this set probably ought to be part of the `TypeckTables`;\nhowever, I opted not to do that because I don't want to have to\nsave/restore the entire tables in the incremental state yet (since it\ncontains a lot of `NodeId` references, and removing those is a\nsignificant refactoring).", "tree": {"sha": "b5659f1a520605e14b15aebc4f113e623ad7ae83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5659f1a520605e14b15aebc4f113e623ad7ae83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f7ac561c0b360650b36a175f39475bc237230f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f7ac561c0b360650b36a175f39475bc237230f", "html_url": "https://github.com/rust-lang/rust/commit/78f7ac561c0b360650b36a175f39475bc237230f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f7ac561c0b360650b36a175f39475bc237230f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd7e3c74419385541e2ba244117e7aa65f72a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7e3c74419385541e2ba244117e7aa65f72a01", "html_url": "https://github.com/rust-lang/rust/commit/fdd7e3c74419385541e2ba244117e7aa65f72a01"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "006de1c06e2d9f9d36fdeb4f15799b83868f8a06", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -113,6 +113,7 @@ pub enum DepNode<D: Clone + Debug> {\n     AssociatedItemDefIds(D),\n     InherentImpls(D),\n     TypeckTables(D),\n+    UsedTraitImports(D),\n \n     // The set of impls for a given trait. Ultimately, it would be\n     // nice to get more fine-grained here (e.g., to include a\n@@ -162,6 +163,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             AssociatedItemDefIds,\n             InherentImpls,\n             TypeckTables,\n+            UsedTraitImports,\n             TraitImpls,\n             ReprHints,\n         }\n@@ -230,6 +232,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             AssociatedItemDefIds(ref d) => op(d).map(AssociatedItemDefIds),\n             InherentImpls(ref d) => op(d).map(InherentImpls),\n             TypeckTables(ref d) => op(d).map(TypeckTables),\n+            UsedTraitImports(ref d) => op(d).map(UsedTraitImports),\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),"}, {"sha": "7dcbe04caf82bcc9d93db94f9ec17a3469a879f5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -499,7 +499,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Set of trait imports actually used in the method resolution.\n     /// This is used for warning unused imports.\n-    pub used_trait_imports: RefCell<DefIdSet>,\n+    pub used_trait_imports: RefCell<DepTrackingMap<maps::UsedTraitImports<'tcx>>>,\n \n     /// The set of external nominal types whose implementations have been read.\n     /// This is used for lazy resolution of methods.\n@@ -788,7 +788,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             inherent_impls: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             used_unsafe: RefCell::new(NodeSet()),\n             used_mut_nodes: RefCell::new(NodeSet()),\n-            used_trait_imports: RefCell::new(DefIdSet()),\n+            used_trait_imports: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             populated_external_types: RefCell::new(DefIdSet()),\n             populated_external_primitive_impls: RefCell::new(DefIdSet()),\n             stability: RefCell::new(stability),"}, {"sha": "d7341d148b720636a865cadd0f0399f8f7d189cd", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -12,6 +12,7 @@ use dep_graph::{DepNode, DepTrackingMapConfig};\n use hir::def_id::DefId;\n use mir;\n use ty::{self, Ty};\n+use util::nodemap::DefIdSet;\n \n use std::cell::RefCell;\n use std::marker::PhantomData;\n@@ -49,3 +50,4 @@ dep_map_ty! { Mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>> }\n dep_map_ty! { ClosureKinds: ItemSignature(DefId) -> ty::ClosureKind }\n dep_map_ty! { ClosureTypes: ItemSignature(DefId) -> ty::ClosureTy<'tcx> }\n dep_map_ty! { TypeckTables: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx> }\n+dep_map_ty! { UsedTraitImports: UsedTraitImports(DefId) -> DefIdSet }"}, {"sha": "eae8989bd342eec23106eb22252eb96f0cf0030f", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -138,7 +138,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n-            self.tcx.used_trait_imports.borrow_mut().insert(import_def_id);\n+            debug!(\"used_trait_import: {:?}\", import_def_id);\n+            self.used_trait_imports.borrow_mut().insert(import_def_id);\n         }\n \n         self.tcx.check_stability(pick.item.def_id, call_expr.id, span);\n@@ -338,7 +339,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some(import_id) = pick.import_id {\n             let import_def_id = self.tcx.hir.local_def_id(import_id);\n-            self.tcx.used_trait_imports.borrow_mut().insert(import_def_id);\n+            debug!(\"used_trait_import: {:?}\", import_def_id);\n+            self.used_trait_imports.borrow_mut().insert(import_def_id);\n         }\n \n         let def = pick.item.def();"}, {"sha": "1d9913cd96dc310383f1a348745eba0f3945687c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -102,7 +102,7 @@ use CrateCtxt;\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n-use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap};\n+use util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, NodeMap};\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -179,6 +179,11 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // Obligations which will have to be checked at the end of\n     // type-checking, after all functions have been inferred.\n     deferred_obligations: RefCell<Vec<traits::DeferredObligation<'tcx>>>,\n+\n+    // a set of trait import def-ids that we use during method\n+    // resolution; during writeback, this is written into\n+    // `tcx.used_trait_imports` for this item def-id\n+    used_trait_imports: RefCell<FxHashSet<DefId>>,\n }\n \n impl<'a, 'gcx, 'tcx> Deref for Inherited<'a, 'gcx, 'tcx> {\n@@ -513,6 +518,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             anon_types: RefCell::new(DefIdMap()),\n             deferred_obligations: RefCell::new(Vec::new()),\n+            used_trait_imports: RefCell::new(DefIdSet()),\n         }\n     }\n "}, {"sha": "9df0542f51fa109240d4ba1141e50f0c148faeb1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -19,9 +19,10 @@ use rustc::ty::{self, Ty, TyCtxt, MethodCall, MethodCallee};\n use rustc::ty::adjustment;\n use rustc::ty::fold::{TypeFolder,TypeFoldable};\n use rustc::infer::{InferCtxt, FixupError};\n-use rustc::util::nodemap::DefIdMap;\n+use rustc::util::nodemap::{DefIdMap, DefIdSet};\n \n use std::cell::Cell;\n+use std::mem;\n \n use syntax::ast;\n use syntax_pos::Span;\n@@ -56,6 +57,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let tables = self.tcx.alloc_tables(wbcx.tables);\n         self.tcx.tables.borrow_mut().insert(item_def_id, tables);\n+\n+        let used_trait_imports = mem::replace(&mut *self.used_trait_imports.borrow_mut(),\n+                                              DefIdSet());\n+        debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n+        self.tcx.used_trait_imports.borrow_mut().insert(item_def_id, used_trait_imports);\n     }\n }\n "}, {"sha": "6dff6d57e4facc1d576c06f0dcf89dcf6131f029", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -17,19 +17,21 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::util::nodemap::DefIdSet;\n \n-struct UnusedTraitImportVisitor<'a, 'tcx: 'a> {\n+struct CheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    used_trait_imports: DefIdSet,\n }\n \n-impl<'a, 'tcx> UnusedTraitImportVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n     fn check_import(&self, id: ast::NodeId, span: Span) {\n         if !self.tcx.maybe_unused_trait_imports.contains(&id) {\n             return;\n         }\n \n         let import_def_id = self.tcx.hir.local_def_id(id);\n-        if self.tcx.used_trait_imports.borrow().contains(&import_def_id) {\n+        if self.used_trait_imports.contains(&import_def_id) {\n             return;\n         }\n \n@@ -42,7 +44,7 @@ impl<'a, 'tcx> UnusedTraitImportVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if item.vis == hir::Public || item.span == DUMMY_SP {\n             return;\n@@ -61,6 +63,21 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n-    let mut visitor = UnusedTraitImportVisitor { tcx: tcx };\n+\n+    let mut used_trait_imports = DefIdSet();\n+    for &body_id in tcx.hir.krate().bodies.keys() {\n+        let item_id = tcx.hir.body_owner(body_id);\n+        let item_def_id = tcx.hir.local_def_id(item_id);\n+\n+        // this will have been written by the main typeck pass\n+        if let Some(imports) = tcx.used_trait_imports.borrow().get(&item_def_id) {\n+            debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n+            used_trait_imports.extend(imports);\n+        } else {\n+            debug!(\"GatherVisitor: item_def_id={:?} with no imports\", item_def_id);\n+        }\n+    }\n+\n+    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n }"}, {"sha": "f19a59a5d38aeb56e33733149ee59ce6c1347447", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7ac561c0b360650b36a175f39475bc237230f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=78f7ac561c0b360650b36a175f39475bc237230f", "patch": "@@ -77,6 +77,7 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n+#![feature(field_init_shorthand)]\n #![feature(loop_break_value)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}]}