{"sha": "bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "node_id": "C_kwDOAAsO6NoAKGJkMzliYmI0YmI5MmRmNDM5YmY2ZDg1NDcwZTI5NmNjNmE0N2ZmYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-07T17:19:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-07T17:19:47Z"}, "message": "Auto merge of #107767 - matthiaskrgr:rollup-9m1qfso, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #100599 (Add compiler error E0523 long description and test)\n - #107471 (rustdoc: do not include empty default-settings tag in HTML)\n - #107555 (Modify existing bounds if they exist)\n - #107662 (Turn projections into copies in CopyProp.)\n - #107695 (Add test for Future inflating arg size to 3x )\n - #107700 (Run the tools builder on all PRs)\n - #107706 (Mark 'atomic_mut_ptr' methods const)\n - #107709 (Fix problem noticed in PR106859 with char -> u8 suggestion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "85aea0de5df7a2c14f4c66e00891ae14a356d966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85aea0de5df7a2c14f4c66e00891ae14a356d966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "html_url": "https://github.com/rust-lang/rust/commit/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd0e1b7ae7bcddce28658487602e8a077737a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0e1b7ae7bcddce28658487602e8a077737a3e", "html_url": "https://github.com/rust-lang/rust/commit/5dd0e1b7ae7bcddce28658487602e8a077737a3e"}, {"sha": "0e3af6af4708b38065688c6bc4462a916083aff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3af6af4708b38065688c6bc4462a916083aff7", "html_url": "https://github.com/rust-lang/rust/commit/0e3af6af4708b38065688c6bc4462a916083aff7"}], "stats": {"total": 601, "additions": 492, "deletions": 109}, "files": [{"sha": "b51105750c82cc9aa428298d520959ab20071409", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -60,9 +60,8 @@ jobs:\n             env: {}\n           - name: x86_64-gnu-tools\n             tidy: false\n-            env:\n-              CI_ONLY_WHEN_SUBMODULES_CHANGED: 1\n             os: ubuntu-20.04-xl\n+            env: {}\n     timeout-minutes: 600\n     runs-on: \"${{ matrix.os }}\"\n     steps:"}, {"sha": "7b07c2a463371d531fa5ee6c3569492cacd2cd49", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -803,6 +803,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 predicates\n                     .iter()\n                     .map(|(param, constraint)| (param.name.as_str(), &**constraint, None)),\n+                None,\n             );\n         }\n     }"}, {"sha": "3e416b89ca6ea5a417821cc3468ef09eb4155b57", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -136,6 +136,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                             &param_ty.name.as_str(),\n                             &constraint,\n                             None,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "800f3c521778d756f86b6c5e08f00dc76b2f1ada", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -286,6 +286,7 @@ E0519: include_str!(\"./error_codes/E0519.md\"),\n E0520: include_str!(\"./error_codes/E0520.md\"),\n E0521: include_str!(\"./error_codes/E0521.md\"),\n E0522: include_str!(\"./error_codes/E0522.md\"),\n+E0523: include_str!(\"./error_codes/E0523.md\"),\n E0524: include_str!(\"./error_codes/E0524.md\"),\n E0525: include_str!(\"./error_codes/E0525.md\"),\n E0527: include_str!(\"./error_codes/E0527.md\"),\n@@ -622,7 +623,6 @@ E0793: include_str!(\"./error_codes/E0793.md\"),\n //  E0488, // lifetime of variable does not enclose its declaration\n //  E0489, // type/lifetime parameter not in scope here\n //  E0490, // removed: unreachable\n-    E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes\n //  E0548, // replaced with a generic attribute input check"}, {"sha": "209cbb00db562f3daa36e38d79b58e70c938828f", "filename": "compiler/rustc_error_codes/src/error_codes/E0464.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -1,6 +1,21 @@\n The compiler found multiple library files with the requested crate name.\n \n+```compile_fail\n+// aux-build:crateresolve-1.rs\n+// aux-build:crateresolve-2.rs\n+// aux-build:crateresolve-3.rs\n+\n+extern crate crateresolve;\n+//~^ ERROR multiple candidates for `rlib` dependency `crateresolve` found\n+\n+fn main() {}\n+```\n+\n This error can occur in several different cases -- for example, when using\n `extern crate` or passing `--extern` options without crate paths. It can also be\n caused by caching issues with the build directory, in which case `cargo clean`\n may help.\n+\n+In the above example, there are three different library files, all of which\n+define the same crate name. Without providing a full path, there is no way for\n+the compiler to know which crate it should use."}, {"sha": "0ddf70386c28d847523bbe042b56f684c7a4d95f", "filename": "compiler/rustc_error_codes/src/error_codes/E0523.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0523.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0523.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0523.md?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,25 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+The compiler found multiple library files with the requested crate name.\n+\n+```compile_fail\n+// aux-build:crateresolve-1.rs\n+// aux-build:crateresolve-2.rs\n+// aux-build:crateresolve-3.rs\n+\n+extern crate crateresolve;\n+//~^ ERROR multiple candidates for `rlib` dependency `crateresolve` found\n+\n+fn main() {}\n+```\n+\n+This error can occur in several different cases -- for example, when using\n+`extern crate` or passing `--extern` options without crate paths. It can also be\n+caused by caching issues with the build directory, in which case `cargo clean`\n+may help.\n+\n+In the above example, there are three different library files, all of which\n+define the same crate name. Without providing a full path, there is no way for\n+the compiler to know which crate it should use.\n+\n+*Note that E0523 has been merged into E0464.*"}, {"sha": "8c2423e3ca0d1f78f9c8847a73171c6fe7b1a207", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -176,6 +176,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 bounds.iter().map(|(param, constraint, def_id)| {\n                     (param.as_str(), constraint.as_str(), *def_id)\n                 }),\n+                None,\n             );\n             err.emit();\n         }"}, {"sha": "05e976534126b0ca92781196c678623cf5c88dd2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -1457,6 +1457,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     generics,\n                     diag,\n                     vec![(param.name.as_str(), \"Clone\", Some(clone_trait_did))].into_iter(),\n+                    None,\n                 );\n             } else {\n                 self.suggest_derive(diag, &[(trait_ref.to_predicate(self.tcx), None, None)]);"}, {"sha": "86f3174b7b2bb25e9c82d410761a445a4a5760f9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -1922,7 +1922,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Uint(ty::UintTy::U8), ty::Char) => {\n                             if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n                                 && let Some(code) = code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n-                                && code.chars().next().map_or(false, |c| c.is_ascii())\n+                                && !code.starts_with(\"\\\\u\") // forbid all Unicode escapes\n+                                && code.chars().next().map_or(false, |c| c.is_ascii()) // forbids literal Unicode characters beyond ASCII\n                             {\n                                 err.span_suggestion(\n                                     span,"}, {"sha": "984e8cf6a0eb909f872fb50574b53c586847a349", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 66, "deletions": 29, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -77,49 +77,86 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n                         if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n                     {\n-                        let generics = tcx.generics_of(body_owner_def_id);\n-                        let p_span = tcx.def_span(generics.type_param(p, tcx).def_id);\n+                        let p_def_id = tcx\n+                            .generics_of(body_owner_def_id)\n+                            .type_param(p, tcx)\n+                            .def_id;\n+                        let p_span = tcx.def_span(p_def_id);\n                         if !sp.contains(p_span) {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                         let hir = tcx.hir();\n                         let mut note = true;\n-                        if let Some(generics) = generics\n-                            .type_param(p, tcx)\n-                            .def_id\n+                        let parent = p_def_id\n                             .as_local()\n-                            .map(|id| hir.local_def_id_to_hir_id(id))\n-                            .and_then(|id| tcx.hir().find_parent(id))\n-                            .as_ref()\n-                            .and_then(|node| node.generics())\n+                            .and_then(|id| {\n+                                let local_id = hir.local_def_id_to_hir_id(id);\n+                                let generics = tcx.hir().find_parent(local_id)?.generics()?;\n+                                Some((id, generics))\n+                            });\n+                        if let Some((local_id, generics)) = parent\n                         {\n                             // Synthesize the associated type restriction `Add<Output = Expected>`.\n                             // FIXME: extract this logic for use in other diagnostics.\n                             let (trait_ref, assoc_substs) = proj.trait_ref_and_own_substs(tcx);\n-                            let path =\n-                                tcx.def_path_str_with_substs(trait_ref.def_id, trait_ref.substs);\n                             let item_name = tcx.item_name(proj.def_id);\n                             let item_args = self.format_generic_args(assoc_substs);\n \n-                            let path = if path.ends_with('>') {\n-                                format!(\n-                                    \"{}, {}{} = {}>\",\n-                                    &path[..path.len() - 1],\n-                                    item_name,\n-                                    item_args,\n-                                    p\n-                                )\n+                            // Here, we try to see if there's an existing\n+                            // trait implementation that matches the one that\n+                            // we're suggesting to restrict. If so, find the\n+                            // \"end\", whether it be at the end of the trait\n+                            // or the end of the generic arguments.\n+                            let mut matching_span = None;\n+                            let mut matched_end_of_args = false;\n+                            for bound in generics.bounds_for_param(local_id) {\n+                                let potential_spans = bound\n+                                    .bounds\n+                                    .iter()\n+                                    .find_map(|bound| {\n+                                        let bound_trait_path = bound.trait_ref()?.path;\n+                                        let def_id = bound_trait_path.res.opt_def_id()?;\n+                                        let generic_args = bound_trait_path.segments.iter().last().map(|path| path.args());\n+                                        (def_id == trait_ref.def_id).then_some((bound_trait_path.span, generic_args))\n+                                    });\n+\n+                                if let Some((end_of_trait, end_of_args)) = potential_spans {\n+                                    let args_span = end_of_args.and_then(|args| args.span());\n+                                    matched_end_of_args = args_span.is_some();\n+                                    matching_span = args_span\n+                                        .or_else(|| Some(end_of_trait))\n+                                        .map(|span| span.shrink_to_hi());\n+                                    break;\n+                                }\n+                            }\n+\n+                            if matched_end_of_args {\n+                                // Append suggestion to the end of our args\n+                                let path = format!(\", {}{} = {}\",item_name, item_args, p);\n+                                note = !suggest_constraining_type_param(\n+                                    tcx,\n+                                    generics,\n+                                    diag,\n+                                    &format!(\"{}\", proj.self_ty()),\n+                                    &path,\n+                                    None,\n+                                    matching_span,\n+                                );\n                             } else {\n-                                format!(\"{}<{}{} = {}>\", path, item_name, item_args, p)\n-                            };\n-                            note = !suggest_constraining_type_param(\n-                                tcx,\n-                                generics,\n-                                diag,\n-                                &format!(\"{}\", proj.self_ty()),\n-                                &path,\n-                                None,\n-                            );\n+                                // Suggest adding a bound to an existing trait\n+                                // or if the trait doesn't exist, add the trait\n+                                // and the suggested bounds.\n+                                let path = format!(\"<{}{} = {}>\", item_name, item_args, p);\n+                                note = !suggest_constraining_type_param(\n+                                    tcx,\n+                                    generics,\n+                                    diag,\n+                                    &format!(\"{}\", proj.self_ty()),\n+                                    &path,\n+                                    None,\n+                                    matching_span,\n+                                );\n+                            }\n                         }\n                         if note {\n                             diag.note(\"you might be missing a type parameter or trait bound\");"}, {"sha": "bf8b8aa2ce49704e13d47567f016d7ad2535e97b", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -356,7 +356,12 @@ impl<'a> CrateLoader<'a> {\n         for (_, other) in self.cstore.iter_crate_data() {\n             // Same stable crate id but different SVH\n             if other.stable_crate_id() == root.stable_crate_id() && other.hash() != root.hash() {\n-                return Err(CrateError::SymbolConflictsOthers(root.name()));\n+                bug!(\n+                    \"Previously returned E0523 here. \\\n+                     See https://github.com/rust-lang/rust/pull/100599 for additional discussion.\\\n+                     root.name() = {}.\",\n+                    root.name()\n+                );\n             }\n         }\n "}, {"sha": "c32686779facb5be9c91f306815ceba751897316", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -511,14 +511,6 @@ pub struct SymbolConflictsCurrent {\n     pub crate_name: Symbol,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(metadata_symbol_conflicts_others, code = \"E0523\")]\n-pub struct SymbolConflictsOthers {\n-    #[primary_span]\n-    pub span: Span,\n-    pub crate_name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(metadata_stable_crate_id_collision)]\n pub struct StableCrateIdCollision {"}, {"sha": "755a24253504ec844eb3be0225a8772db6e0bdc1", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -945,7 +945,6 @@ pub(crate) enum CrateError {\n     ExternLocationNotFile(Symbol, PathBuf),\n     MultipleCandidates(Symbol, CrateFlavor, Vec<PathBuf>),\n     SymbolConflictsCurrent(Symbol),\n-    SymbolConflictsOthers(Symbol),\n     StableCrateIdCollision(Symbol, Symbol),\n     DlOpen(String),\n     DlSym(String),\n@@ -989,9 +988,6 @@ impl CrateError {\n             CrateError::SymbolConflictsCurrent(root_name) => {\n                 sess.emit_err(errors::SymbolConflictsCurrent { span, crate_name: root_name });\n             }\n-            CrateError::SymbolConflictsOthers(root_name) => {\n-                sess.emit_err(errors::SymbolConflictsOthers { span, crate_name: root_name });\n-            }\n             CrateError::StableCrateIdCollision(crate_name0, crate_name1) => {\n                 sess.emit_err(errors::StableCrateIdCollision { span, crate_name0, crate_name1 });\n             }"}, {"sha": "0a30ae9d0aa78522c461b8a6dff9c81d7e0b28e9", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -193,19 +193,24 @@ fn suggest_removing_unsized_bound(\n }\n \n /// Suggest restricting a type param with a new bound.\n+///\n+/// If `span_to_replace` is provided, then that span will be replaced with the\n+/// `constraint`. If one wasn't provided, then the full bound will be suggested.\n pub fn suggest_constraining_type_param(\n     tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     err: &mut Diagnostic,\n     param_name: &str,\n     constraint: &str,\n     def_id: Option<DefId>,\n+    span_to_replace: Option<Span>,\n ) -> bool {\n     suggest_constraining_type_params(\n         tcx,\n         generics,\n         err,\n         [(param_name, constraint, def_id)].into_iter(),\n+        span_to_replace,\n     )\n }\n \n@@ -215,6 +220,7 @@ pub fn suggest_constraining_type_params<'a>(\n     generics: &hir::Generics<'_>,\n     err: &mut Diagnostic,\n     param_names_and_constraints: impl Iterator<Item = (&'a str, &'a str, Option<DefId>)>,\n+    span_to_replace: Option<Span>,\n ) -> bool {\n     let mut grouped = FxHashMap::default();\n     param_names_and_constraints.for_each(|(param_name, constraint, def_id)| {\n@@ -253,7 +259,9 @@ pub fn suggest_constraining_type_params<'a>(\n         let mut suggest_restrict = |span, bound_list_non_empty| {\n             suggestions.push((\n                 span,\n-                if bound_list_non_empty {\n+                if span_to_replace.is_some() {\n+                    constraint.clone()\n+                } else if bound_list_non_empty {\n                     format!(\" + {}\", constraint)\n                 } else {\n                     format!(\" {}\", constraint)\n@@ -262,6 +270,11 @@ pub fn suggest_constraining_type_params<'a>(\n             ))\n         };\n \n+        if let Some(span) = span_to_replace {\n+            suggest_restrict(span, true);\n+            continue;\n+        }\n+\n         // When the type parameter has been provided bounds\n         //\n         //    Message:"}, {"sha": "6e279232bcb48ce3e22ed586e0d9b6c96ec6dde9", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -153,8 +153,9 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n         if let Operand::Move(place) = *operand\n-            && let Some(local) = place.as_local()\n-            && !self.fully_moved.contains(local)\n+            // A move out of a projection of a copy is equivalent to a copy of the original projection.\n+            && !place.has_deref()\n+            && !self.fully_moved.contains(place.local)\n         {\n             *operand = Operand::Copy(place);\n         }"}, {"sha": "91da690a00056d58fc9fcfec0746d832c01de720", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -679,6 +679,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         &param_name,\n                         &constraint,\n                         Some(trait_pred.def_id()),\n+                        None,\n                     ) {\n                         return;\n                     }\n@@ -1087,6 +1088,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     param.name.as_str(),\n                     \"Clone\",\n                     Some(clone_trait),\n+                    None,\n                 );\n             }\n             err.span_suggestion_verbose("}, {"sha": "1d14efc7523b42a9c86e4f23b555e45771df316a", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -928,8 +928,8 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub fn as_mut_ptr(&self) -> *mut bool {\n-        self.v.get() as *mut bool\n+    pub const fn as_mut_ptr(&self) -> *mut bool {\n+        self.v.get().cast()\n     }\n \n     /// Fetches the value, and applies a function to it that returns an optional\n@@ -1803,7 +1803,7 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// ```ignore (extern-declaration)\n     /// #![feature(atomic_mut_ptr)]\n-    //// use std::sync::atomic::AtomicPtr;\n+    /// use std::sync::atomic::AtomicPtr;\n     ///\n     /// extern \"C\" {\n     ///     fn my_atomic_op(arg: *mut *mut u32);\n@@ -1819,7 +1819,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub fn as_mut_ptr(&self) -> *mut *mut T {\n+    pub const fn as_mut_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n }\n@@ -2727,7 +2727,7 @@ macro_rules! atomic_int {\n             #[unstable(feature = \"atomic_mut_ptr\",\n                    reason = \"recently added\",\n                    issue = \"66893\")]\n-            pub fn as_mut_ptr(&self) -> *mut $int_type {\n+            pub const fn as_mut_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }\n         }"}, {"sha": "3c128c0ca251b514142c020fbc7c6409ee843a06", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -307,8 +307,6 @@ jobs:\n           - name: x86_64-gnu-tools\n             <<: *job-linux-xl\n             tidy: false\n-            env:\n-              CI_ONLY_WHEN_SUBMODULES_CHANGED: 1\n \n   auto:\n     permissions:"}, {"sha": "48127166ad0809b644ba4b533b042588ab0eec7a", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -1,46 +1,11 @@\n #!/bin/bash\n-# Set the SKIP_JOB environment variable if this job is supposed to only run\n-# when submodules are updated and they were not. The following time consuming\n-# tasks will be skipped when the environment variable is present.\n+# Set the SKIP_JOB environment variable if this job is not supposed to run on the current builder.\n \n set -euo pipefail\n IFS=$'\\n\\t'\n \n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n-if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n-    git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n-    BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n-\n-    echo \"Searching for toolstate changes between $BASE_COMMIT and $(git rev-parse HEAD)\"\n-\n-    if git diff \"$BASE_COMMIT\" | grep --quiet \"^index .* 160000\"; then\n-        # Submodules pseudo-files inside git have the 160000 permissions, so when\n-        # those files are present in the diff a submodule was updated.\n-        echo \"Submodules were updated\"\n-    elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n-             src/tools/clippy src/tools/rustfmt src/tools/miri \\\n-             library/std/src/sys); then\n-        # There is not an easy blanket search for subtrees. For now, manually list\n-        # the subtrees.\n-        # Also run this when the platform-specific parts of std change, in case\n-        # that breaks Miri.\n-        echo \"Tool subtrees were updated\"\n-    elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n-             tests/rustdoc-gui \\\n-             src/librustdoc \\\n-             src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile \\\n-             src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version \\\n-             src/tools/rustdoc-gui); then\n-        # There was a change in either rustdoc or in its GUI tests.\n-        echo \"Rustdoc was updated\"\n-    else\n-        echo \"Not executing this job since no submodules nor subtrees were updated\"\n-        ciCommandSetEnv SKIP_JOB 1\n-        exit 0\n-    fi\n-fi\n-\n if [[ -n \"${CI_ONLY_WHEN_CHANNEL-}\" ]]; then\n     if [[ \"${CI_ONLY_WHEN_CHANNEL}\" = \"$(cat src/ci/channel)\" ]]; then\n         echo \"The channel is the expected one\""}, {"sha": "7690d8f251f7485a04affbcb445b9b6ca7486687", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -23,11 +23,13 @@\n     {%- for theme in themes -%}\n         <link rel=\"stylesheet\" disabled href=\"{{page.root_path|safe}}{{theme}}{{page.resource_suffix}}.css\"> {#- -#}\n     {%- endfor -%}\n+    {%- if !layout.default_settings.is_empty() -%}\n     <script id=\"default-settings\" {# -#}\n       {% for (k, v) in layout.default_settings %}\n         data-{{k}}=\"{{v}}\"\n       {%- endfor -%}\n     ></script> {#- -#}\n+    {%- endif -%}\n     <script src=\"{{static_root_path|safe}}{{files.storage_js}}\"></script> {#- -#}\n     {%- if page.css_class.contains(\"crate\") -%}\n     <script defer src=\"{{page.root_path|safe}}crates{{page.resource_suffix}}.js\"></script> {#- -#}"}, {"sha": "dd2fd1911f227c162b9b249b5a0e2c268dc538b8", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -31,7 +31,7 @@ const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E06\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n const IGNORE_UI_TEST_CHECK: &[&str] =\n-    &[\"E0461\", \"E0465\", \"E0476\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\"];\n+    &[\"E0461\", \"E0465\", \"E0476\", \"E0514\", \"E0554\", \"E0640\", \"E0717\", \"E0729\"];\n \n macro_rules! verbose_print {\n     ($verbose:expr, $($fmt:tt)*) => {"}, {"sha": "02308beb88af27b42bd9fcfed01d5c11bed855bf", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: Foo) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n+      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<Foo>(move _1) -> bb1; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n++         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:19:28: 19:34\n+                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:22:28: 22:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+      }\n+  }\n+  "}, {"sha": "2a1bbae99a4c8b3c4899f3ea9d4096c9ef70df06", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,34 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn opaque(_: impl Sized) -> bool { true }\n+\n+struct Foo(u8);\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(a: Foo) -> bool {\n+    mir!(\n+        {\n+            let b = a;\n+            // This is a move out of a copy, so must become a copy of `a.0`.\n+            let c = Move(b.0);\n+            Call(RET, bb1, opaque(Move(a)))\n+        }\n+        bb1 = {\n+            Call(RET, ret, opaque(Move(c)))\n+        }\n+        ret = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert!(f(Foo(0)));\n+}\n+\n+// EMIT_MIR move_projection.f.CopyProp.diff"}, {"sha": "66ba4df767ccf2ff004604ac17d3070affa706c1", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -34,7 +34,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     }\n \n     bb3: {\n-        _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        _4 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30"}, {"sha": "2281d9419b461e03853b2b3b03e348501cb1271e", "filename": "tests/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -16,8 +16,8 @@ LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n    |                                                                ^^^^^^^^^^ required by this bound in `UnsafeCopy`\n help: consider further restricting this bound\n    |\n-LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {\n-   |                                +++++++++++++++++++\n+LL | impl<T: Copy + std::ops::Deref<Target = T>> UnsafeCopy<'_, T> for T {\n+   |                               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1816d842d6c4179c0d57bb4513db215ea498b080", "filename": "tests/ui/async-await/future-sizes/async-awaiting-fut.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z print-type-sizes --crate-type lib\n+// edition:2021\n+// build-pass\n+// ignore-pass\n+\n+async fn wait() {}\n+\n+async fn big_fut(arg: [u8; 1024]) {}\n+\n+async fn calls_fut(fut: impl std::future::Future<Output = ()>) {\n+    loop {\n+        wait().await;\n+        if true {\n+            return fut.await;\n+        } else {\n+            wait().await;\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    let fut = big_fut([0u8; 1024]);\n+    calls_fut(fut).await;\n+}"}, {"sha": "eaf3e4b61e304a9241c510b538dd9a5dc794642a", "filename": "tests/ui/async-await/future-sizes/async-awaiting-fut.stdout", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Fasync-awaiting-fut.stdout?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,72 @@\n+print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:21:21: 24:2]`: 3078 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Unresumed`: 0 bytes\n+print-type-size     variant `Suspend0`: 3077 bytes\n+print-type-size         local `.__awaitee`: 3077 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 0 bytes\n+print-type-size     variant `Panicked`: 0 bytes\n+print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]`: 3077 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Unresumed`: 2051 bytes\n+print-type-size         padding: 1026 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `Suspend0`: 2052 bytes\n+print-type-size         local `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `..generator_field4`: 1 bytes\n+print-type-size         padding: 1 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 1 bytes\n+print-type-size     variant `Suspend1`: 3076 bytes\n+print-type-size         padding: 1024 bytes\n+print-type-size         local `..generator_field4`: 1 bytes, alignment: 1 bytes\n+print-type-size         padding: 1 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 1025 bytes\n+print-type-size     variant `Suspend2`: 2052 bytes\n+print-type-size         local `.fut`: 1025 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `..generator_field4`: 1 bytes\n+print-type-size         padding: 1 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 1 bytes\n+print-type-size     variant `Returned`: 2051 bytes\n+print-type-size         padding: 1026 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 2051 bytes\n+print-type-size         padding: 1026 bytes\n+print-type-size         upvar `.fut`: 1025 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]>`: 3077 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 3077 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async-awaiting-fut.rs:10:64: 19:2]>`: 3077 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 3077 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 3077 bytes\n+print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]`: 1025 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Unresumed`: 1024 bytes\n+print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 1024 bytes\n+print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 1024 bytes\n+print-type-size         upvar `.arg`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]>`: 1025 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 1025 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async-awaiting-fut.rs:8:35: 8:37]>`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 1025 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 1025 bytes\n+print-type-size type: `[async fn body@$DIR/async-awaiting-fut.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Unresumed`: 0 bytes\n+print-type-size     variant `Returned`: 0 bytes\n+print-type-size     variant `Panicked`: 0 bytes\n+print-type-size type: `std::mem::ManuallyDrop<bool>`: 1 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<bool>`: 1 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 1 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 1 bytes\n+print-type-size type: `std::task::Poll<()>`: 1 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Ready`: 0 bytes\n+print-type-size         field `.0`: 0 bytes\n+print-type-size     variant `Pending`: 0 bytes"}, {"sha": "47717fbd508a899d03729d19e5623e1fa33f6d24", "filename": "tests/ui/error-codes/E0523.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Ferror-codes%2FE0523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Ferror-codes%2FE0523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0523.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:crateresolve1-1.rs\n+// aux-build:crateresolve1-2.rs\n+// aux-build:crateresolve1-3.rs\n+\n+// normalize-stderr-test: \"\\.nll/\" -> \"/\"\n+// normalize-stderr-test: \"\\\\\\?\\\\\" -> \"\"\n+// normalize-stderr-test: \"(lib)?crateresolve1-([123])\\.[a-z]+\" -> \"libcrateresolve1-$2.somelib\"\n+\n+// NOTE: This test is duplicated from `tests/ui/crate-loading/crateresolve1.rs`.\n+\n+extern crate crateresolve1;\n+//~^ ERROR multiple candidates for `rlib` dependency `crateresolve1` found\n+\n+fn main() {}"}, {"sha": "8e3eb2159c298d7b20f14804dea3f63d1598b21e", "filename": "tests/ui/error-codes/E0523.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Ferror-codes%2FE0523.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Ferror-codes%2FE0523.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0523.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,13 @@\n+error[E0464]: multiple candidates for `rlib` dependency `crateresolve1` found\n+  --> $DIR/E0523.rs:11:1\n+   |\n+LL | extern crate crateresolve1;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: candidate #1: $TEST_BUILD_DIR/error-codes/E0523/auxiliary/libcrateresolve1-1.somelib\n+   = note: candidate #2: $TEST_BUILD_DIR/error-codes/E0523/auxiliary/libcrateresolve1-2.somelib\n+   = note: candidate #3: $TEST_BUILD_DIR/error-codes/E0523/auxiliary/libcrateresolve1-3.somelib\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0464`."}, {"sha": "f0212e985a92cdd95e411b4fcc777ff8a6e859dc", "filename": "tests/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -15,8 +15,8 @@ LL |     type Item<'a>: std::ops::Deref<Target = T>;\n    |                                    ^^^^^^^^^^ required by this bound in `UnsafeCopy::Item`\n help: consider further restricting this bound\n    |\n-LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<T> for T {\n-   |                                +++++++++++++++++++\n+LL | impl<T: Copy + std::ops::Deref<Target = T>> UnsafeCopy<T> for T {\n+   |                               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "054adbffbeafb66317e041b162ed5520584b4c3a", "filename": "tests/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -4,7 +4,7 @@ use std::ops::Add;\n \n struct A<B>(B);\n \n-impl<B> Add for A<B> where B: Add + Add<Output = B> {\n+impl<B> Add for A<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -14,7 +14,7 @@ impl<B> Add for A<B> where B: Add + Add<Output = B> {\n \n struct C<B>(B);\n \n-impl<B: Add + Add<Output = B>> Add for C<B> {\n+impl<B: Add<Output = B>> Add for C<B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -34,7 +34,7 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add + Add<Output = B>> Add for E<B> where B: Add<Output = B> {\n+impl<B: Add<Output = B>> Add for E<B> where B: Add<Output = B> {\n     //~^ ERROR equality constraints are not yet supported in `where` clauses\n     type Output = Self;\n "}, {"sha": "535edec575a7d715f1e061740db25993337a3ac4", "filename": "tests/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -37,8 +37,8 @@ LL | struct A<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B> Add for A<B> where B: Add + Add<Output = B> {\n-   |                                   +++++++++++++++++\n+LL | impl<B> Add for A<B> where B: Add<Output = B> {\n+   |                                  ++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:21:14\n@@ -60,8 +60,8 @@ LL | struct C<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B: Add + Add<Output = B>> Add for C<B> {\n-   |             +++++++++++++++++\n+LL | impl<B: Add<Output = B>> Add for C<B> {\n+   |            ++++++++++++\n \n error[E0369]: cannot add `B` to `B`\n   --> $DIR/missing-bounds.rs:31:21\n@@ -96,8 +96,8 @@ LL | struct E<B>(B);\n    |        ^\n help: consider further restricting this bound\n    |\n-LL | impl<B: Add + Add<Output = B>> Add for E<B> where <B as Add>::Output = B {\n-   |             +++++++++++++++++\n+LL | impl<B: Add<Output = B>> Add for E<B> where <B as Add>::Output = B {\n+   |            ++++++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "07712ce0de684ae624bf3e527754e234eeb2c58b", "filename": "tests/ui/suggestions/restrict-existing-type-bounds.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,30 @@\n+pub trait TryAdd<Rhs = Self> {\n+    type Error;\n+    type Output;\n+\n+    fn try_add(self, rhs: Rhs) -> Result<Self::Output, Self::Error>;\n+}\n+\n+impl<T: TryAdd> TryAdd for Option<T> {\n+    type Error = <T as TryAdd>::Error;\n+    type Output = Option<<T as TryAdd>::Output>;\n+\n+    fn try_add(self, rhs: Self) -> Result<Self::Output, Self::Error> {\n+        Ok(self) //~ ERROR mismatched types\n+    }\n+}\n+\n+struct Other<A>(A);\n+\n+struct X;\n+\n+impl<T: TryAdd<Error = X>> TryAdd for Other<T> {\n+    type Error = <T as TryAdd>::Error;\n+    type Output = Other<<T as TryAdd>::Output>;\n+\n+    fn try_add(self, rhs: Self) -> Result<Self::Output, Self::Error> {\n+        Ok(self) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "14a244b790a6380d51eb4f486540d66c08247063", "filename": "tests/ui/suggestions/restrict-existing-type-bounds.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frestrict-existing-type-bounds.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -0,0 +1,57 @@\n+error[E0308]: mismatched types\n+  --> $DIR/restrict-existing-type-bounds.rs:13:12\n+   |\n+LL | impl<T: TryAdd> TryAdd for Option<T> {\n+   |      - this type parameter\n+...\n+LL |         Ok(self)\n+   |         -- ^^^^ expected `Option<<T as TryAdd>::Output>`, found `Option<T>`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n+   |\n+   = note: expected enum `Option<<T as TryAdd>::Output>`\n+              found enum `Option<T>`\n+help: the type constructed contains `Option<T>` due to the type of the argument passed\n+  --> $DIR/restrict-existing-type-bounds.rs:13:9\n+   |\n+LL |         Ok(self)\n+   |         ^^^----^\n+   |            |\n+   |            this argument influences the type of `Ok`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: TryAdd<Output = T>> TryAdd for Option<T> {\n+   |               ++++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/restrict-existing-type-bounds.rs:26:12\n+   |\n+LL | impl<T: TryAdd<Error = X>> TryAdd for Other<T> {\n+   |      - this type parameter\n+...\n+LL |         Ok(self)\n+   |         -- ^^^^ expected `Other<<T as TryAdd>::Output>`, found `Other<T>`\n+   |         |\n+   |         arguments to this enum variant are incorrect\n+   |\n+   = note: expected struct `Other<<T as TryAdd>::Output>`\n+              found struct `Other<T>`\n+help: the type constructed contains `Other<T>` due to the type of the argument passed\n+  --> $DIR/restrict-existing-type-bounds.rs:26:9\n+   |\n+LL |         Ok(self)\n+   |         ^^^----^\n+   |            |\n+   |            this argument influences the type of `Ok`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: TryAdd<Error = X, Output = T>> TryAdd for Other<T> {\n+   |                         ++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "80cd2ca7dfc9afd0e7f732c47ed84f8d61b2af9c", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -12,7 +12,19 @@ fn main() {\n     //~^ ERROR: mismatched types [E0308]\n     //~| HELP: if you meant to write a byte literal, prefix with `b`\n \n+    let _a: u8 = '\\x20';\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    // Do not issue the suggestion if the char literal is a Unicode escape\n+    foo('\\u{0080}');\n+    //~^ ERROR: mismatched types [E0308]\n+\n     // Do not issue the suggestion if the char literal isn't ASCII\n     let _t: u8 = '\u20ac';\n     //~^ ERROR: mismatched types [E0308]\n+\n+    // Do not issue the suggestion if the char literal isn't ASCII\n+    foo('\\u{1f980}');\n+    //~^ ERROR: mismatched types [E0308]\n }"}, {"sha": "3d27149f0dcf13704a737b6541e94009b4800c7c", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.stderr", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr?ref=bd39bbb4bb92df439bf6d85470e296cc6a47ffbd", "patch": "@@ -30,13 +30,54 @@ LL |     foo(b'#');\n    |         ~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-byte-literal.rs:16:18\n+  --> $DIR/type-mismatch-byte-literal.rs:15:18\n+   |\n+LL |     let _a: u8 = '\\x20';\n+   |             --   ^^^^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+   |\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     let _a: u8 = b'\\x20';\n+   |                  ~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:20:9\n+   |\n+LL |     foo('\\u{0080}');\n+   |     --- ^^^^^^^^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:24:18\n    |\n LL |     let _t: u8 = '\u20ac';\n    |             --   ^^^ expected `u8`, found `char`\n    |             |\n    |             expected due to this\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:28:9\n+   |\n+LL |     foo('\\u{1f980}');\n+   |     --- ^^^^^^^^^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}