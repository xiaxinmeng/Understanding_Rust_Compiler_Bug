{"sha": "714836959be857e2fbd9c497974055deb2a91f9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDgzNjk1OWJlODU3ZTJmYmQ5YzQ5Nzk3NDA1NWRlYjJhOTFmOWI=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-15T19:46:59Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-15T19:46:59Z"}, "message": "7709: Added the check for return type of len function.", "tree": {"sha": "a91fd0e433d735446727ba85b62f7345b4da0eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91fd0e433d735446727ba85b62f7345b4da0eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/714836959be857e2fbd9c497974055deb2a91f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/714836959be857e2fbd9c497974055deb2a91f9b", "html_url": "https://github.com/rust-lang/rust/commit/714836959be857e2fbd9c497974055deb2a91f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/714836959be857e2fbd9c497974055deb2a91f9b/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "html_url": "https://github.com/rust-lang/rust/commit/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "1a1454068e791a168d2431cb7f7b3d1768bbe387", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/714836959be857e2fbd9c497974055deb2a91f9b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714836959be857e2fbd9c497974055deb2a91f9b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=714836959be857e2fbd9c497974055deb2a91f9b", "patch": "@@ -1631,6 +1631,13 @@ impl Type {\n         matches!(self.ty.value.interned(&Interner), TyKind::Ref(hir_ty::Mutability::Mut, ..))\n     }\n \n+    pub fn is_usize(&self) -> bool {\n+        matches!(\n+            self.ty.value.interned(&Interner),\n+            TyKind::Scalar(Scalar::Uint(hir_ty::primitive::UintTy::Usize))\n+        )\n+    }\n+\n     pub fn remove_ref(&self) -> Option<Type> {\n         match &self.ty.value.interned(&Interner) {\n             TyKind::Ref(.., ty) => Some(self.derived(ty.clone())),"}, {"sha": "b8834d283d7e321efd74eccf56eb8ca5247adfa3", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/714836959be857e2fbd9c497974055deb2a91f9b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714836959be857e2fbd9c497974055deb2a91f9b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=714836959be857e2fbd9c497974055deb2a91f9b", "patch": "@@ -1,7 +1,7 @@\n use hir::{known, HasSource, Name};\n use syntax::{\n     ast::{self, NameOwner},\n-    AstNode, TextRange,\n+    AstNode,\n };\n \n use crate::{\n@@ -51,12 +51,19 @@ pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n+    let len_fn = get_impl_method(ctx, &impl_, &known::len)?;\n+    if !len_fn.ret_type(ctx.sema.db).is_usize() {\n+        cov_mark::hit!(len_fn_different_return_type);\n+        return None;\n+    }\n+\n     if get_impl_method(ctx, &impl_, &known::is_empty).is_some() {\n         cov_mark::hit!(is_empty_already_implemented);\n         return None;\n     }\n \n-    let range = get_text_range_of_len_function(ctx, &impl_)?;\n+    let node = len_fn.source(ctx.sema.db)?;\n+    let range = node.syntax().value.text_range();\n \n     acc.add(\n         AssistId(\"generate_is_empty_from_len\", AssistKind::Generate),\n@@ -89,13 +96,6 @@ fn get_impl_method(\n     ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n }\n \n-fn get_text_range_of_len_function(ctx: &AssistContext, impl_: &ast::Impl) -> Option<TextRange> {\n-    let db = ctx.sema.db;\n-    let func = get_impl_method(ctx, impl_, &known::len)?;\n-    let node = func.source(db)?;\n-    Some(node.syntax().value.text_range())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -157,6 +157,23 @@ impl MyStruct {\n         );\n     }\n \n+    #[test]\n+    fn len_fn_different_return_type() {\n+        cov_mark::check!(len_fn_different_return_type);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> u32 {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn generate_is_empty() {\n         check_assist("}]}