{"sha": "9a0c32934ebe376128230aa8da3275697b2053e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGMzMjkzNGViZTM3NjEyODIzMGFhOGRhMzI3NTY5N2IyMDUzZTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-05T09:45:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-05T15:59:35Z"}, "message": "Disable value debuginfo\n\nThis prevents an expensive Cranelift pass from running to reconstruct the debuginfo", "tree": {"sha": "b7542f3fe3fa244ae6c219bb04d381056efa407c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7542f3fe3fa244ae6c219bb04d381056efa407c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0c32934ebe376128230aa8da3275697b2053e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0c32934ebe376128230aa8da3275697b2053e7", "html_url": "https://github.com/rust-lang/rust/commit/9a0c32934ebe376128230aa8da3275697b2053e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0c32934ebe376128230aa8da3275697b2053e7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e736293b3bcada7dba0a134604eb6c9866d5858", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e736293b3bcada7dba0a134604eb6c9866d5858", "html_url": "https://github.com/rust-lang/rust/commit/5e736293b3bcada7dba0a134604eb6c9866d5858"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "cffaf79ded10b8ebfaae7e4ea0a2db31b85579ab", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a0c32934ebe376128230aa8da3275697b2053e7/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0c32934ebe376128230aa8da3275697b2053e7/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=9a0c32934ebe376128230aa8da3275697b2053e7", "patch": "@@ -354,19 +354,19 @@ impl<'tcx> CPlace<'tcx> {\n         match self.inner {\n             CPlaceInner::Var(_local, var) => {\n                 let val = fx.bcx.use_var(var);\n-                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                //fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n                 CValue::by_val(val, layout)\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n                 let val1 = fx.bcx.use_var(var1);\n-                fx.bcx.set_val_label(val1, cranelift_codegen::ir::ValueLabel::new(var1.index()));\n+                //fx.bcx.set_val_label(val1, cranelift_codegen::ir::ValueLabel::new(var1.index()));\n                 let val2 = fx.bcx.use_var(var2);\n-                fx.bcx.set_val_label(val2, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n+                //fx.bcx.set_val_label(val2, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n                 CValue::by_val_pair(val1, val2, layout)\n             }\n             CPlaceInner::VarLane(_local, var, lane) => {\n                 let val = fx.bcx.use_var(var);\n-                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                //fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n                 let val = fx.bcx.ins().extractlane(val, lane);\n                 CValue::by_val(val, layout)\n             }\n@@ -456,7 +456,7 @@ impl<'tcx> CPlace<'tcx> {\n                 }\n                 _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n             };\n-            fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+            //fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var.index()));\n             fx.bcx.def_var(var, data);\n         }\n \n@@ -502,13 +502,13 @@ impl<'tcx> CPlace<'tcx> {\n \n                 // First get the old vector\n                 let vector = fx.bcx.use_var(var);\n-                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                //fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n \n                 // Next insert the written lane into the vector\n                 let vector = fx.bcx.ins().insertlane(vector, data, lane);\n \n                 // Finally write the new vector\n-                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                //fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n                 fx.bcx.def_var(var, vector);\n \n                 return;"}]}