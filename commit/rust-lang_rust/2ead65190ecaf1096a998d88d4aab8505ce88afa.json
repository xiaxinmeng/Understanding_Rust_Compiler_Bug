{"sha": "2ead65190ecaf1096a998d88d4aab8505ce88afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWQ2NTE5MGVjYWYxMDk2YTk5OGQ4OGQ0YWFiODUwNWNlODhhZmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T19:32:22Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Move Ty::builtin to TyBuilder", "tree": {"sha": "dd6aa27a384dfc08d4cf65da4207bc518d162ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6aa27a384dfc08d4cf65da4207bc518d162ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ead65190ecaf1096a998d88d4aab8505ce88afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead65190ecaf1096a998d88d4aab8505ce88afa", "html_url": "https://github.com/rust-lang/rust/commit/2ead65190ecaf1096a998d88d4aab8505ce88afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ead65190ecaf1096a998d88d4aab8505ce88afa/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "620769f32276bb7e8c580eae2c91ee535a06d9f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/620769f32276bb7e8c580eae2c91ee535a06d9f8", "html_url": "https://github.com/rust-lang/rust/commit/620769f32276bb7e8c580eae2c91ee535a06d9f8"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "682d49a21fd596398628d2590a9f5a4992c5b4b9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2ead65190ecaf1096a998d88d4aab8505ce88afa", "patch": "@@ -59,7 +59,7 @@ use hir_ty::{\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n     DebruijnIndex, InEnvironment, Interner, ProjectionTy, QuantifiedWhereClause, Scalar,\n-    Substitution, TraitEnvironment, Ty, TyDefId, TyKind, TyVariableKind, WhereClause,\n+    Substitution, TraitEnvironment, Ty, TyBuilder, TyDefId, TyKind, TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1129,7 +1129,7 @@ pub struct BuiltinType {\n impl BuiltinType {\n     pub fn ty(self, db: &dyn HirDatabase, module: Module) -> Type {\n         let resolver = module.id.resolver(db.upcast());\n-        Type::new_with_resolver(db, &resolver, Ty::builtin(self.inner))\n+        Type::new_with_resolver(db, &resolver, TyBuilder::builtin(self.inner))\n             .expect(\"crate not present in resolver\")\n     }\n "}, {"sha": "be6fe5016c8308ecbbd792d892805ddc5a9bbe54", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=2ead65190ecaf1096a998d88d4aab8505ce88afa", "patch": "@@ -877,6 +877,23 @@ impl TyBuilder<()> {\n         })\n         .intern(&Interner)\n     }\n+\n+    pub fn builtin(builtin: BuiltinType) -> Ty {\n+        match builtin {\n+            BuiltinType::Char => TyKind::Scalar(Scalar::Char).intern(&Interner),\n+            BuiltinType::Bool => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n+            BuiltinType::Str => TyKind::Str.intern(&Interner),\n+            BuiltinType::Int(t) => {\n+                TyKind::Scalar(Scalar::Int(primitive::int_ty_from_builtin(t))).intern(&Interner)\n+            }\n+            BuiltinType::Uint(t) => {\n+                TyKind::Scalar(Scalar::Uint(primitive::uint_ty_from_builtin(t))).intern(&Interner)\n+            }\n+            BuiltinType::Float(t) => {\n+                TyKind::Scalar(Scalar::Float(primitive::float_ty_from_builtin(t))).intern(&Interner)\n+            }\n+        }\n+    }\n }\n \n impl TyBuilder<hir_def::AdtId> {\n@@ -911,23 +928,6 @@ impl TyBuilder<hir_def::AdtId> {\n }\n \n impl Ty {\n-    pub fn builtin(builtin: BuiltinType) -> Self {\n-        match builtin {\n-            BuiltinType::Char => TyKind::Scalar(Scalar::Char).intern(&Interner),\n-            BuiltinType::Bool => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n-            BuiltinType::Str => TyKind::Str.intern(&Interner),\n-            BuiltinType::Int(t) => {\n-                TyKind::Scalar(Scalar::Int(primitive::int_ty_from_builtin(t))).intern(&Interner)\n-            }\n-            BuiltinType::Uint(t) => {\n-                TyKind::Scalar(Scalar::Uint(primitive::uint_ty_from_builtin(t))).intern(&Interner)\n-            }\n-            BuiltinType::Float(t) => {\n-                TyKind::Scalar(Scalar::Float(primitive::float_ty_from_builtin(t))).intern(&Interner)\n-            }\n-        }\n-    }\n-\n     pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n         match self.kind(&Interner) {\n             TyKind::Ref(mutability, ty) => Some((ty, *mutability)),"}, {"sha": "762b226e62baec529e8957d770f42163541719fc", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ead65190ecaf1096a998d88d4aab8505ce88afa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=2ead65190ecaf1096a998d88d4aab8505ce88afa", "patch": "@@ -1216,7 +1216,7 @@ impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for V\n /// namespace.\n pub(crate) fn ty_query(db: &dyn HirDatabase, def: TyDefId) -> Binders<Ty> {\n     match def {\n-        TyDefId::BuiltinType(it) => Binders::new(0, Ty::builtin(it)),\n+        TyDefId::BuiltinType(it) => Binders::new(0, TyBuilder::builtin(it)),\n         TyDefId::AdtId(it) => type_for_adt(db, it),\n         TyDefId::TypeAliasId(it) => type_for_type_alias(db, it),\n     }"}]}