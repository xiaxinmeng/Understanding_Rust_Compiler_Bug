{"sha": "d8af469c01dc502eb85e934e53e9fcf94d1515ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YWY0NjljMDFkYzUwMmViODVlOTM0ZTUzZTlmY2Y5NGQxNTE1ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-24T07:55:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-24T07:55:46Z"}, "message": "auto merge of #17459 : dradtke/rust/master, r=brson\n\nThis PR adds a new Vim compiler file specifically for use with Cargo. It passes all arguments through, so commands like `:make build`, `:make clean`, and `:make run` all work as expected.\r\n\r\nIt also adds a quickfix autocommand for fixing the paths before populating the error list. `cargo build` reports errors with file paths that are relative to Cargo.toml, so if you're further down in the project tree, then trying to open the error will result in a blank buffer because Vim treats that path as relative to the working directory instead. With this fix, the paths work properly no matter where you are in the project.", "tree": {"sha": "b78af770f280b07c6fe0b477c29d0ac8d9c53230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78af770f280b07c6fe0b477c29d0ac8d9c53230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8af469c01dc502eb85e934e53e9fcf94d1515ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8af469c01dc502eb85e934e53e9fcf94d1515ff", "html_url": "https://github.com/rust-lang/rust/commit/d8af469c01dc502eb85e934e53e9fcf94d1515ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8af469c01dc502eb85e934e53e9fcf94d1515ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cce2b7bab948805e48e63ec4eb60f04004a5138", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cce2b7bab948805e48e63ec4eb60f04004a5138", "html_url": "https://github.com/rust-lang/rust/commit/9cce2b7bab948805e48e63ec4eb60f04004a5138"}, {"sha": "59e750f198a31ef1222dd6048d873391a459abcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e750f198a31ef1222dd6048d873391a459abcf", "html_url": "https://github.com/rust-lang/rust/commit/59e750f198a31ef1222dd6048d873391a459abcf"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "89c1cff110e2108bfae061e2f533d9db5e12ffa6", "filename": "src/etc/vim/compiler/cargo.vim", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d8af469c01dc502eb85e934e53e9fcf94d1515ff/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "raw_url": "https://github.com/rust-lang/rust/raw/d8af469c01dc502eb85e934e53e9fcf94d1515ff/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim?ref=d8af469c01dc502eb85e934e53e9fcf94d1515ff", "patch": "@@ -0,0 +1,49 @@\n+\" Vim compiler file\n+\" Compiler:         Cargo Compiler\n+\" Maintainer:       Damien Radtke <damienradtke@gmail.com>\n+\" Latest Revision:  2014 Sep 18\n+\n+if exists(\"current_compiler\")\n+  finish\n+endif\n+let current_compiler = \"cargo\"\n+\n+if exists(\":CompilerSet\") != 2\n+    command -nargs=* CompilerSet setlocal <args>\n+endif\n+\n+CompilerSet errorformat&\n+CompilerSet makeprg=cargo\\ $*\n+\n+\" Allow a configurable global Cargo.toml name. This makes it easy to\n+\" support variations like 'cargo.toml'.\n+if !exists('g:cargo_toml_name')\n+    let g:cargo_toml_name = 'Cargo.toml'\n+endif\n+\n+let s:toml_dir = fnamemodify(findfile(g:cargo_toml_name, '.;'), ':p:h').'/'\n+\n+if s:toml_dir != ''\n+    augroup cargo\n+        au!\n+        au QuickfixCmdPost make call s:FixPaths()\n+    augroup END\n+\n+    \" FixPaths() is run after Cargo, and is used to change the file paths\n+    \" to be relative to the current directory instead of Cargo.toml.\n+    function! s:FixPaths()\n+        let qflist = getqflist()\n+        for qf in qflist\n+            if !qf['valid']\n+                continue\n+            endif\n+            let filename = bufname(qf['bufnr'])\n+            if stridx(filename, s:toml_dir) == -1\n+                let filename = s:toml_dir.filename\n+            endif\n+            let qf['filename'] = simplify(s:toml_dir.bufname(qf['bufnr']))\n+            call remove(qf, 'bufnr')\n+        endfor\n+        call setqflist(qflist, 'r')\n+    endfunction\n+endif"}]}