{"sha": "83d6bf49296dd2c365ee3989d114a99db9ca3577", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDZiZjQ5Mjk2ZGQyYzM2NWVlMzk4OWQxMTRhOTlkYjljYTM1Nzc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-10-26T16:41:55Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-11-03T14:03:21Z"}, "message": "Hack to make C++ exceptions test work on i686-pc-windows-gnu", "tree": {"sha": "fbf32dde542f30d28606fffe531518854dd91244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf32dde542f30d28606fffe531518854dd91244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d6bf49296dd2c365ee3989d114a99db9ca3577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d6bf49296dd2c365ee3989d114a99db9ca3577", "html_url": "https://github.com/rust-lang/rust/commit/83d6bf49296dd2c365ee3989d114a99db9ca3577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d6bf49296dd2c365ee3989d114a99db9ca3577/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1a0afd22c7f1e26782467503d32d026c55fc0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1a0afd22c7f1e26782467503d32d026c55fc0c", "html_url": "https://github.com/rust-lang/rust/commit/5f1a0afd22c7f1e26782467503d32d026c55fc0c"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "7eba52f3c24e87914d446f97d63542d74bc30668", "filename": "src/test/run-make-fulldeps/foreign-exceptions/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2FMakefile?ref=83d6bf49296dd2c365ee3989d114a99db9ca3577", "patch": "@@ -4,7 +4,7 @@ all: foo\n \t$(call RUN,foo)\n \n foo: foo.rs $(call NATIVE_STATICLIB,foo)\n-\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n+\t$(RUSTC) $< -lfoo $(EXTRARSCXXFLAGS)\n \n $(TMPDIR)/libfoo.o: foo.cpp\n \t$(call COMPILE_OBJ_CXX,$@,$<)"}, {"sha": "399c78f8d2d021cb7cdb80bc82400361666f7b6d", "filename": "src/test/run-make-fulldeps/foreign-exceptions/foo.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs?ref=83d6bf49296dd2c365ee3989d114a99db9ca3577", "patch": "@@ -2,6 +2,9 @@\n // are ignored by catch_unwind. Also tests that Rust panics can unwind through\n // C++ code.\n \n+// For linking libstdc++ on MinGW\n+#![cfg_attr(all(windows, target_env = \"gnu\"), feature(static_nobundle))]\n+\n #![feature(unwind_attributes)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};"}, {"sha": "4f93d97636e6004df6f86731d5937e2e7ed0dbfb", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=83d6bf49296dd2c365ee3989d114a99db9ca3577", "patch": "@@ -6,7 +6,7 @@ all: foo\n \t$(call RUN,foo)\n \n foo: foo.rs $(call NATIVE_STATICLIB,foo)\n-\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n+\t$(RUSTC) $< -lfoo $(EXTRARSCXXFLAGS)\n \n $(TMPDIR)/libfoo.o: foo.cpp\n \t$(call COMPILE_OBJ_CXX,$@,$<)"}, {"sha": "061f07c32434016b3686361998f8331171904e19", "filename": "src/test/run-make-fulldeps/issue-36710/foo.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs?ref=83d6bf49296dd2c365ee3989d114a99db9ca3577", "patch": "@@ -1,5 +1,8 @@\n // Tests that linking to C++ code with global destructors works.\n \n+// For linking libstdc++ on MinGW\n+#![cfg_attr(all(windows, target_env = \"gnu\"), feature(static_nobundle))]\n+\n extern { fn get() -> u32; }\n \n fn main() {"}, {"sha": "3194826371762a10b75058c05aafe0ab958b9e3a", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/83d6bf49296dd2c365ee3989d114a99db9ca3577/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=83d6bf49296dd2c365ee3989d114a99db9ca3577", "patch": "@@ -81,6 +81,22 @@ ifdef IS_MSVC\n else\n \tEXTRACFLAGS := -lws2_32 -luserenv\n \tEXTRACXXFLAGS := -lstdc++\n+\t# So this is a bit hacky: we can't use the DLL version of libstdc++ because\n+\t# it pulls in the DLL version of libgcc, which means that we end up with 2\n+\t# instances of the DW2 unwinding implementation. This is a problem on\n+\t# i686-pc-windows-gnu because each module (DLL/EXE) needs to register its\n+\t# unwind information with the unwinding implementation, and libstdc++'s\n+\t# __cxa_throw won't see the unwinding info we registered with our statically\n+\t# linked libgcc.\n+\t#\n+\t# Now, simply statically linking libstdc++ would fix this problem, except\n+\t# that it is compiled with the expectation that pthreads is dynamically\n+\t# linked as a DLL and will fail to link with a statically linked libpthread.\n+\t#\n+\t# So we end up with the following hack: we link use static-nobundle to only\n+\t# link the parts of libstdc++ that we actually use, which doesn't include\n+\t# the dependency on the pthreads DLL.\n+\tEXTRARSCXXFLAGS := -l static-nobundle=stdc++\n endif\n else\n ifeq ($(UNAME),Darwin)\n@@ -98,6 +114,7 @@ ifeq ($(UNAME),OpenBSD)\n else\n \tEXTRACFLAGS := -lm -lrt -ldl -lpthread\n \tEXTRACXXFLAGS := -lstdc++\n+\tEXTRARSCXXFLAGS := -lstdc++\n endif\n endif\n endif"}]}