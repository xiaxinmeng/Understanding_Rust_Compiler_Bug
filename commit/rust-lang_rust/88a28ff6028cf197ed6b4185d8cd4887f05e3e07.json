{"sha": "88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTI4ZmY2MDI4Y2YxOTdlZDZiNDE4NWQ4Y2Q0ODg3ZjA1ZTNlMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-15T16:07:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-15T16:07:48Z"}, "message": "Auto merge of #45936 - mikhail-m1:mir-borrowck-storage-dead, r=arielb1\n\nadd `StorageDead` handling\n\nfix #45642\nr? @arielb1", "tree": {"sha": "ba93d344ef887de5fb4c4fd17ebb88d287c3be31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba93d344ef887de5fb4c4fd17ebb88d287c3be31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "html_url": "https://github.com/rust-lang/rust/commit/88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce2b8a4944f1983759cb7d0e8d35a8bb889dbee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2b8a4944f1983759cb7d0e8d35a8bb889dbee6", "html_url": "https://github.com/rust-lang/rust/commit/ce2b8a4944f1983759cb7d0e8d35a8bb889dbee6"}, {"sha": "9e35fd262f8ca57d755259448df4e7b601cb236a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e35fd262f8ca57d755259448df4e7b601cb236a", "html_url": "https://github.com/rust-lang/rust/commit/9e35fd262f8ca57d755259448df4e7b601cb236a"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "c1320d9daa8a460679cc8355d8b40896328a5d88", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax_pos::DUMMY_SP;\n-\n use rustc::mir::{self, Mir, Location};\n use rustc::ty::{self, TyCtxt};\n use util::elaborate_drops::DropFlagState;\n@@ -187,23 +185,13 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'gcx, 'tcx, F>(\n     where F: FnMut(MovePathIndex, DropFlagState)\n {\n     let move_data = &ctxt.move_data;\n-    let param_env = ctxt.param_env;\n     debug!(\"drop_flag_effects_for_location({:?})\", loc);\n \n     // first, move out of the RHS\n     for mi in &move_data.loc_map[loc] {\n         let path = mi.move_path_index(move_data);\n         debug!(\"moving out of path {:?}\", move_data.move_paths[path]);\n \n-        // don't move out of non-Copy things\n-        let lvalue = &move_data.move_paths[path].lvalue;\n-        let ty = lvalue.ty(mir, tcx).to_ty(tcx);\n-        let gcx = tcx.global_tcx();\n-        let erased_ty = gcx.lift(&tcx.erase_regions(&ty)).unwrap();\n-        if !erased_ty.moves_by_default(gcx, param_env, DUMMY_SP) {\n-            continue;\n-        }\n-\n         on_all_children_bits(tcx, mir, move_data,\n                              path,\n                              |mpi| callback(mpi, DropFlagState::Absent))"}, {"sha": "147f3d796b91cfd5e7fd77ed51082734014f39a9", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "patch": "@@ -456,14 +456,24 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MovingOutStatements<'a, 'gcx, 'tcx> {\n         let path_map = &move_data.path_map;\n         let rev_lookup = &move_data.rev_lookup;\n \n-        debug!(\"stmt {:?} at loc {:?} moves out of move_indexes {:?}\",\n-               stmt, location, &loc_map[location]);\n-        for move_index in &loc_map[location] {\n-            // Every path deinitialized by a *particular move*\n-            // has corresponding bit, \"gen'ed\" (i.e. set)\n-            // here, in dataflow vector\n-            zero_to_one(sets.gen_set.words_mut(), *move_index);\n+        match stmt.kind {\n+            // this analysis only tries to find moves explicitly\n+            // written by the user, so we ignore the move-outs\n+            // created by `StorageDead` and at the beginning\n+            // of a function.\n+            mir::StatementKind::StorageDead(_) => {}\n+            _ => {\n+                debug!(\"stmt {:?} at loc {:?} moves out of move_indexes {:?}\",\n+                       stmt, location, &loc_map[location]);\n+                for move_index in &loc_map[location] {\n+                    // Every path deinitialized by a *particular move*\n+                    // has corresponding bit, \"gen'ed\" (i.e. set)\n+                    // here, in dataflow vector\n+                    zero_to_one(sets.gen_set.words_mut(), *move_index);\n+                }\n+            }\n         }\n+\n         let bits_per_block = self.bits_per_block();\n         match stmt.kind {\n             mir::StatementKind::SetDiscriminant { .. } => {"}, {"sha": "a0212de605eeee4a7802ef95dba1468bf9dd79a8", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "patch": "@@ -250,8 +250,10 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::StorageLive(_) |\n-            StatementKind::StorageDead(_) => {}\n+            StatementKind::StorageLive(_) => {}\n+            StatementKind::StorageDead(local) => {\n+                self.gather_move(&Lvalue::Local(local), true);\n+            }\n             StatementKind::SetDiscriminant{ .. } => {\n                 span_bug!(stmt.source_info.span,\n                           \"SetDiscriminant should not exist during borrowck\");\n@@ -309,7 +311,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {\n-                self.gather_move(&Lvalue::Local(RETURN_POINTER));\n+                self.gather_move(&Lvalue::Local(RETURN_POINTER), false);\n             }\n \n             TerminatorKind::Assert { .. } |\n@@ -322,7 +324,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             }\n \n             TerminatorKind::Drop { ref location, target: _, unwind: _ } => {\n-                self.gather_move(location);\n+                self.gather_move(location, false);\n             }\n             TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n                 self.create_move_path(location);\n@@ -344,19 +346,19 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         match *operand {\n             Operand::Constant(..) => {} // not-a-move\n             Operand::Consume(ref lval) => { // a move\n-                self.gather_move(lval);\n+                self.gather_move(lval, false);\n             }\n         }\n     }\n \n-    fn gather_move(&mut self, lval: &Lvalue<'tcx>) {\n+    fn gather_move(&mut self, lval: &Lvalue<'tcx>, force: bool) {\n         debug!(\"gather_move({:?}, {:?})\", self.loc, lval);\n \n         let tcx = self.builder.tcx;\n         let gcx = tcx.global_tcx();\n         let lv_ty = lval.ty(self.builder.mir, tcx).to_ty(tcx);\n         let erased_ty = gcx.lift(&tcx.erase_regions(&lv_ty)).unwrap();\n-        if !erased_ty.moves_by_default(gcx, self.builder.param_env, DUMMY_SP) {\n+        if !force && !erased_ty.moves_by_default(gcx, self.builder.param_env, DUMMY_SP) {\n             debug!(\"gather_move({:?}, {:?}) - {:?} is Copy. skipping\", self.loc, lval, lv_ty);\n             return\n         }"}, {"sha": "5ef502acd8113234e39c5b3ce89d792cb8cc4458", "filename": "src/test/compile-fail/borrowck/borrowck-storage-dead.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs?ref=88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn ok() {\n+    loop {\n+        let _x = 1;\n+    }\n+}\n+\n+fn fail() {\n+    loop {\n+        let x: i32;\n+        let _ = x + 1; //~ERROR (Ast) [E0381]\n+                       //~^ ERROR (Mir) [E0381]\n+    }\n+}\n+\n+fn main() {\n+    ok();\n+    fail();\n+}"}, {"sha": "4437e20fc42f77fcb83a2ba4bfe1b9cdb40fe61a", "filename": "src/test/compile-fail/issue-25579.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a28ff6028cf197ed6b4185d8cd4887f05e3e07/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs?ref=88a28ff6028cf197ed6b4185d8cd4887f05e3e07", "patch": "@@ -18,11 +18,10 @@ enum Sexpression {\n \n fn causes_ice(mut l: &mut Sexpression) {\n     loop { match l {\n-        &mut Sexpression::Num(ref mut n) => {}, //[mir]~ ERROR (Mir) [E0384]\n+        &mut Sexpression::Num(ref mut n) => {},\n         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n                                                   //[mir]~^ ERROR (Ast) [E0499]\n                                                   //[mir]~| ERROR (Mir) [E0506]\n-                                                  //[mir]~| ERROR (Mir) [E0384]\n                                                   //[mir]~| ERROR (Mir) [E0499]\n             l = &mut **expr; //[ast]~ ERROR [E0506]\n                              //[mir]~^ ERROR (Ast) [E0506]"}]}