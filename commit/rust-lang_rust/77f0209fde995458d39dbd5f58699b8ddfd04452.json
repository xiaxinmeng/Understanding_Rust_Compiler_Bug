{"sha": "77f0209fde995458d39dbd5f58699b8ddfd04452", "node_id": "C_kwDOAAsO6NoAKDc3ZjAyMDlmZGU5OTU0NThkMzlkYmQ1ZjU4Njk5YjhkZGZkMDQ0NTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-06T06:36:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-06T06:36:59Z"}, "message": "Rollup merge of #90905 - GuillaumeGomez:empty-impl-blocks, r=jsha\n\nAdd empty impl blocks if they have documentation\n\nFixes https://github.com/rust-lang/rust/issues/90866.\n\nThe update for the test script is needed to count the number of impl blocks we have with only the struct. To be noted that with https://github.com/rust-lang/rust/pull/89676 merged, it wouldn't be needed (I don't know what is the status of it btw. cc ```@Mark-Simulacrum).```\n\nIt looks like this:\n\n![Screenshot from 2021-11-14 16-51-28](https://user-images.githubusercontent.com/3050060/141689100-e57123c0-bf50-4c42-adf5-d991e169a0e4.png)\n\ncc ```@jyn514```\nr? ```@camelid```", "tree": {"sha": "63f67d5968d9f4363b11091f53595f3453a3629b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f67d5968d9f4363b11091f53595f3453a3629b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f0209fde995458d39dbd5f58699b8ddfd04452", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinaCMCRBK7hj4Ov3rIwAAc8AIAF2P0saP++yBhboxyhizx1i6\nGsBJL+ZMB1EOnetslrBx5YP8IM0ICH95iZczoZd6atR2KU4Q5SU+wMD8gRe8oBvh\nH/Md2zKjB1qLc0w94X9AKXWa1iXHs1dlPhDO+hpPw8lA/aPft2e9uf6WggqMN0Qy\nnFLmOfM/WbizxEll2tPHYgNyDbaUzJQpA+xyXguvl3vRA6906rmLZfb+3ZMBkmbL\nyghpUkp2SUK6cE9n24WBbQpw7gEfgy3zwbnV2YW87yIjZ0f6RsbgHON4WWM2ucrq\n19G41FFbxzK0Y8rFvcBFrDIf5lEfB5o0zeW0kOGYMA48fT/swfOl3LilddXjFzM=\n=eh+h\n-----END PGP SIGNATURE-----\n", "payload": "tree 63f67d5968d9f4363b11091f53595f3453a3629b\nparent 760237ff785fd14ac7fdab799f4d695d86cf9cbf\nparent eca12e33e9aca609b6409625f6a617d03bc479d3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654497419 +0200\ncommitter GitHub <noreply@github.com> 1654497419 +0200\n\nRollup merge of #90905 - GuillaumeGomez:empty-impl-blocks, r=jsha\n\nAdd empty impl blocks if they have documentation\n\nFixes https://github.com/rust-lang/rust/issues/90866.\n\nThe update for the test script is needed to count the number of impl blocks we have with only the struct. To be noted that with https://github.com/rust-lang/rust/pull/89676 merged, it wouldn't be needed (I don't know what is the status of it btw. cc ```@Mark-Simulacrum).```\n\nIt looks like this:\n\n![Screenshot from 2021-11-14 16-51-28](https://user-images.githubusercontent.com/3050060/141689100-e57123c0-bf50-4c42-adf5-d991e169a0e4.png)\n\ncc ```@jyn514```\nr? ```@camelid```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f0209fde995458d39dbd5f58699b8ddfd04452", "html_url": "https://github.com/rust-lang/rust/commit/77f0209fde995458d39dbd5f58699b8ddfd04452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f0209fde995458d39dbd5f58699b8ddfd04452/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760237ff785fd14ac7fdab799f4d695d86cf9cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/760237ff785fd14ac7fdab799f4d695d86cf9cbf", "html_url": "https://github.com/rust-lang/rust/commit/760237ff785fd14ac7fdab799f4d695d86cf9cbf"}, {"sha": "eca12e33e9aca609b6409625f6a617d03bc479d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca12e33e9aca609b6409625f6a617d03bc479d3", "html_url": "https://github.com/rust-lang/rust/commit/eca12e33e9aca609b6409625f6a617d03bc479d3"}], "stats": {"total": 87, "additions": 68, "deletions": 19}, "files": [{"sha": "f762e38900552748b2d1409001008e960a2a3d18", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -94,6 +94,10 @@\n   in the specified file. The number of occurrences must match the given\n   count.\n \n+* `@count PATH XPATH TEXT COUNT` checks for the occurrence of the given XPath\n+  with the given text in the specified file. The number of occurrences must\n+  match the given count.\n+\n * `@snapshot NAME PATH XPATH` creates a snapshot test named NAME.\n   A snapshot test captures a subtree of the DOM, at the location\n   determined by the XPath, and compares it to a pre-recorded value\n@@ -382,23 +386,25 @@ def check_tree_attr(tree, path, attr, pat, regexp):\n     return ret\n \n \n-def check_tree_text(tree, path, pat, regexp):\n+# Returns the number of occurences matching the regex (`regexp`) and the text (`pat`).\n+def check_tree_text(tree, path, pat, regexp, stop_at_first):\n     path = normalize_xpath(path)\n-    ret = False\n+    match_count = 0\n     try:\n         for e in tree.findall(path):\n             try:\n                 value = flatten(e)\n             except KeyError:\n                 continue\n             else:\n-                ret = check_string(value, pat, regexp)\n-                if ret:\n-                    break\n+                if check_string(value, pat, regexp):\n+                    match_count += 1\n+                    if stop_at_first:\n+                        break\n     except Exception:\n         print('Failed to get path \"{}\"'.format(path))\n         raise\n-    return ret\n+    return match_count\n \n \n def get_tree_count(tree, path):\n@@ -518,6 +524,19 @@ def print_err(lineno, context, err, message=None):\n         stderr(\"\\t{}\".format(context))\n \n \n+def get_nb_matching_elements(cache, c, regexp, stop_at_first):\n+    tree = cache.get_tree(c.args[0])\n+    pat, sep, attr = c.args[1].partition('/@')\n+    if sep:  # attribute\n+        tree = cache.get_tree(c.args[0])\n+        return check_tree_attr(tree, pat, attr, c.args[2], False)\n+    else:  # normalized text\n+        pat = c.args[1]\n+        if pat.endswith('/text()'):\n+            pat = pat[:-7]\n+        return check_tree_text(cache.get_tree(c.args[0]), pat, c.args[2], regexp, stop_at_first)\n+\n+\n ERR_COUNT = 0\n \n \n@@ -538,16 +557,7 @@ def check_command(c, cache):\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n             elif len(c.args) == 3:  # @has/matches <path> <pat> <match> = XML tree test\n                 cerr = \"`XPATH PATTERN` did not match\"\n-                tree = cache.get_tree(c.args[0])\n-                pat, sep, attr = c.args[1].partition('/@')\n-                if sep:  # attribute\n-                    tree = cache.get_tree(c.args[0])\n-                    ret = check_tree_attr(tree, pat, attr, c.args[2], regexp)\n-                else:  # normalized text\n-                    pat = c.args[1]\n-                    if pat.endswith('/text()'):\n-                        pat = pat[:-7]\n-                    ret = check_tree_text(cache.get_tree(c.args[0]), pat, c.args[2], regexp)\n+                ret = get_nb_matching_elements(cache, c, regexp, True) != 0\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n \n@@ -557,6 +567,11 @@ def check_command(c, cache):\n                 found = get_tree_count(cache.get_tree(c.args[0]), c.args[1])\n                 cerr = \"Expected {} occurrences but found {}\".format(expected, found)\n                 ret = expected == found\n+            elif len(c.args) == 4:  # @count <path> <pat> <text> <count> = count test\n+                expected = int(c.args[3])\n+                found = get_nb_matching_elements(cache, c, False, False)\n+                cerr = \"Expected {} occurrences but found {}\".format(expected, found)\n+                ret = found == expected\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n "}, {"sha": "cb887d16906a141406bebd16b542c678addd8f57", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -1600,6 +1600,13 @@ fn render_impl(\n         }\n \n         if let Some(ref dox) = i.impl_item.collapsed_doc_value() {\n+            if trait_.is_none() && i.inner_impl().items.is_empty() {\n+                w.write_str(\n+                    \"<div class=\\\"item-info\\\">\\\n+                    <div class=\\\"stab empty-impl\\\">This impl block contains no items.</div>\n+                </div>\",\n+                );\n+            }\n             write!(\n                 w,\n                 \"<div class=\\\"docblock\\\">{}</div>\","}, {"sha": "8e0521d9ad6a14acf42e2f7b6b08b0ffb895057d", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -281,9 +281,13 @@ details.undocumented > summary::before {\n \tcolor: #000;\n }\n \n+/* Created this empty rule to satisfy the theme checks. */\n+.stab.empty-impl {}\n+\n .stab.unstable,\n .stab.deprecated,\n-.stab.portability {\n+.stab.portability,\n+.stab.empty-impl {\n \tcolor: #c5c5c5;\n \tbackground: #314559 !important;\n \tborder-style: none !important;"}, {"sha": "071ad006ed3501aacbda80fe1028d561f8a87b8d", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -266,6 +266,7 @@ details.undocumented > summary::before {\n \tcolor: #ddd;\n }\n \n+.stab.empty-impl { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; color: #2f2f2f; }\n .stab.portability { background: #F3DFFF; border-color: #b07bdb; color: #2f2f2f; }"}, {"sha": "5c3789bf4630a46a08b813d99596067d861d86c7", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -255,6 +255,7 @@ details.undocumented > summary::before {\n \tcolor: #000;\n }\n \n+.stab.empty-impl { background: #FFF5D6; border-color: #FFC600; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #ffc4c4; border-color: #db7b7b; }\n .stab.portability { background: #F3DFFF; border-color: #b07bdb; }"}, {"sha": "0fd124e61541581f4d630cafaf23a560e59ffe7b", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -124,8 +124,9 @@ pub(crate) struct ImplStripper<'a> {\n impl<'a> DocFolder for ImplStripper<'a> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if let clean::ImplItem(ref imp) = *i.kind {\n-            // emptied none trait impls can be stripped\n-            if imp.trait_.is_none() && imp.items.is_empty() {\n+            // Impl blocks can be skipped if they are: empty; not a trait impl; and have no\n+            // documentation.\n+            if imp.trait_.is_none() && imp.items.is_empty() && i.doc_value().is_none() {\n                 return None;\n             }\n             if let Some(did) = imp.for_.def_id(self.cache) {"}, {"sha": "6a2a254f63a7fd09a9d5d8369375cb80697ec1a2", "filename": "src/test/rustdoc/empty-impl-block.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f0209fde995458d39dbd5f58699b8ddfd04452/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impl-block.rs?ref=77f0209fde995458d39dbd5f58699b8ddfd04452", "patch": "@@ -0,0 +1,20 @@\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.Foo.html'\n+pub struct Foo;\n+\n+// @has - '//*[@class=\"docblock\"]' 'Hello empty impl block!'\n+// @has - '//*[@class=\"item-info\"]' 'This impl block contains no items.'\n+/// Hello empty impl block!\n+impl Foo {}\n+// We ensure that this empty impl block without doc isn't rendered.\n+// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 1\n+impl Foo {}\n+\n+// Just to ensure that empty trait impl blocks are rendered.\n+pub struct Another;\n+pub trait Bar {}\n+\n+// @has 'foo/struct.Another.html'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Another'\n+impl Bar for Another {}"}]}