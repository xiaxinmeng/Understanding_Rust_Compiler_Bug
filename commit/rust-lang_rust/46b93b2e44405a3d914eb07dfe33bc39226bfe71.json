{"sha": "46b93b2e44405a3d914eb07dfe33bc39226bfe71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YjkzYjJlNDQ0MDVhM2Q5MTRlYjA3ZGZlMzNiYzM5MjI2YmZlNzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-16T18:21:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-16T18:21:20Z"}, "message": "Rollup merge of #82163 - matthiaskrgr:slice, r=jyn514\n\navoid full-slicing slices\n\nIf we already have a slice, there is no need to get another full-range slice from that, just use the original.\nclippy::redundant_slicing", "tree": {"sha": "dade0bdd8dac8da7b5b7079e0a5f848732f602c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dade0bdd8dac8da7b5b7079e0a5f848732f602c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b93b2e44405a3d914eb07dfe33bc39226bfe71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLA0gCRBK7hj4Ov3rIwAAdHIIAK3AMSc35hyska62aQ+moPzB\nKkIjgRdwXFrJUqXVZJ/5dVKBocnHNDjLoCMcG8HzywkmpmUr2h0YVlvWnbE31lrn\nmF2yAZUPCa0aDsFOdpldBJ7QqMVXBmYhzt2REtbootmcxBtxqsA8F6YXhiPINsp+\nH1psxyXc18F6ew7ImnHAjdyU5vPiK1dvLbzk8tLLSGFrPIgkL4J2TySNEBLj4e+D\n/jLrwl6JF9ucFw0b7vo8vaRybgKYAUeSFiCp2Ukd/0eMWbonn4jdUMte1rS8QUAZ\n71V7eVaKaE4nvRY6PwSBOHoxPU0QsXX6cEj7Hdvu8gnPbTl3GfeBeZiL4iXiyDE=\n=Bchk\n-----END PGP SIGNATURE-----\n", "payload": "tree dade0bdd8dac8da7b5b7079e0a5f848732f602c7\nparent cdab137bd44a12da1020444fb75efb37fd77f114\nparent 4390a61b6495765a04819130e3934ec671428bcd\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613499680 +0100\ncommitter GitHub <noreply@github.com> 1613499680 +0100\n\nRollup merge of #82163 - matthiaskrgr:slice, r=jyn514\n\navoid full-slicing slices\n\nIf we already have a slice, there is no need to get another full-range slice from that, just use the original.\nclippy::redundant_slicing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b93b2e44405a3d914eb07dfe33bc39226bfe71", "html_url": "https://github.com/rust-lang/rust/commit/46b93b2e44405a3d914eb07dfe33bc39226bfe71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b93b2e44405a3d914eb07dfe33bc39226bfe71/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdab137bd44a12da1020444fb75efb37fd77f114", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdab137bd44a12da1020444fb75efb37fd77f114", "html_url": "https://github.com/rust-lang/rust/commit/cdab137bd44a12da1020444fb75efb37fd77f114"}, {"sha": "4390a61b6495765a04819130e3934ec671428bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4390a61b6495765a04819130e3934ec671428bcd", "html_url": "https://github.com/rust-lang/rust/commit/4390a61b6495765a04819130e3934ec671428bcd"}], "stats": {"total": 73, "additions": 33, "deletions": 40}, "files": [{"sha": "097663ff1accd15f29ab90a8808a8c77cf4b5101", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -135,7 +135,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let parent_generics = match self.items.get(&parent_hir_id).unwrap().kind {\n             hir::ItemKind::Impl(hir::Impl { ref generics, .. })\n-            | hir::ItemKind::Trait(_, _, ref generics, ..) => &generics.params[..],\n+            | hir::ItemKind::Trait(_, _, ref generics, ..) => generics.params,\n             _ => &[],\n         };\n         let lt_def_names = parent_generics.iter().filter_map(|param| match param.kind {"}, {"sha": "180402c24fb7b683611035901908df1f34766962", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -1681,7 +1681,7 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.s.word(\"[\");\n         self.print_inner_attributes_inline(attrs);\n-        self.commasep_exprs(Inconsistent, &exprs[..]);\n+        self.commasep_exprs(Inconsistent, exprs);\n         self.s.word(\"]\");\n         self.end();\n     }\n@@ -1722,7 +1722,7 @@ impl<'a> State<'a> {\n         self.print_inner_attributes_inline(attrs);\n         self.commasep_cmnt(\n             Consistent,\n-            &fields[..],\n+            fields,\n             |s, field| {\n                 s.print_outer_attributes(&field.attrs);\n                 s.ibox(INDENT_UNIT);\n@@ -1757,7 +1757,7 @@ impl<'a> State<'a> {\n     fn print_expr_tup(&mut self, exprs: &[P<ast::Expr>], attrs: &[ast::Attribute]) {\n         self.popen();\n         self.print_inner_attributes_inline(attrs);\n-        self.commasep_exprs(Inconsistent, &exprs[..]);\n+        self.commasep_exprs(Inconsistent, exprs);\n         if exprs.len() == 1 {\n             self.s.word(\",\");\n         }"}, {"sha": "7e88b58c0e29d99cecfdf21100332b4469be5112", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::ArgumentNamed(s) => Named(s),\n                 };\n \n-                let ty = Placeholder(match &arg.format.ty[..] {\n+                let ty = Placeholder(match arg.format.ty {\n                     \"\" => \"Display\",\n                     \"?\" => \"Debug\",\n                     \"e\" => \"LowerExp\","}, {"sha": "0cc520e5bd1f0165d61b8a4ae8cf399b539edfea", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -312,7 +312,7 @@ pub mod printf {\n                 return Some((Substitution::Escape, &s[start + 2..]));\n             }\n \n-            Cur::new_at(&s[..], start)\n+            Cur::new_at(s, start)\n         };\n \n         // This is meant to be a translation of the following regex:\n@@ -673,7 +673,7 @@ pub mod shell {\n                 _ => { /* fall-through */ }\n             }\n \n-            Cur::new_at(&s[..], start)\n+            Cur::new_at(s, start)\n         };\n \n         let at = at.at_next_cp()?;"}, {"sha": "9ce9066980066523011d7718aecb426016cece53", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let (tup, args) = args.split_last().unwrap();\n             (args, Some(tup))\n         } else {\n-            (&args[..], None)\n+            (args, None)\n         };\n \n         'make_args: for (i, arg) in first_args.iter().enumerate() {"}, {"sha": "1f9133f2ccbf01a72f6411c05d657893e2581506", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -392,7 +392,7 @@ impl<'a> State<'a> {\n                     &f.decl,\n                     None,\n                     &f.generic_params,\n-                    &f.param_names[..],\n+                    f.param_names,\n                 );\n             }\n             hir::TyKind::OpaqueDef(..) => self.s.word(\"/*impl Trait*/\"),\n@@ -1200,7 +1200,7 @@ impl<'a> State<'a> {\n         self.s.word(\"{\");\n         self.commasep_cmnt(\n             Consistent,\n-            &fields[..],\n+            fields,\n             |s, field| {\n                 s.ibox(INDENT_UNIT);\n                 if !field.is_shorthand {"}, {"sha": "cb783847fd1cf463fbc28aefbf9e426874036849", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !impl_candidates.is_empty() && e.span.contains(span) {\n                     if let Some(expr) = exprs.first() {\n                         if let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind {\n-                            if let [path_segment] = &path.segments[..] {\n+                            if let [path_segment] = path.segments {\n                                 let candidate_len = impl_candidates.len();\n                                 let suggestions = impl_candidates.iter().map(|candidate| {\n                                     format!("}, {"sha": "94314464e085aa4a42ca78db0ea5b3812a73ba08", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -866,7 +866,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_variances_of(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n-        record!(self.tables.variances[def_id] <- &self.tcx.variances_of(def_id)[..]);\n+        record!(self.tables.variances[def_id] <- self.tcx.variances_of(def_id));\n     }\n \n     fn encode_item_type(&mut self, def_id: DefId) {"}, {"sha": "4bc6dda0a5577d94804471fbb34d963a0b4e3809", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -854,22 +854,22 @@ impl<'hir> Map<'hir> {\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n         self.find_entry(id).map_or(&[], |entry| match entry.node {\n-            Node::Param(a) => &a.attrs[..],\n+            Node::Param(a) => a.attrs,\n             Node::Local(l) => &l.attrs[..],\n-            Node::Item(i) => &i.attrs[..],\n-            Node::ForeignItem(fi) => &fi.attrs[..],\n-            Node::TraitItem(ref ti) => &ti.attrs[..],\n-            Node::ImplItem(ref ii) => &ii.attrs[..],\n-            Node::Variant(ref v) => &v.attrs[..],\n-            Node::Field(ref f) => &f.attrs[..],\n+            Node::Item(i) => i.attrs,\n+            Node::ForeignItem(fi) => fi.attrs,\n+            Node::TraitItem(ref ti) => ti.attrs,\n+            Node::ImplItem(ref ii) => ii.attrs,\n+            Node::Variant(ref v) => v.attrs,\n+            Node::Field(ref f) => f.attrs,\n             Node::Expr(ref e) => &*e.attrs,\n             Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id.id)),\n             Node::Arm(ref a) => &*a.attrs,\n-            Node::GenericParam(param) => &param.attrs[..],\n+            Node::GenericParam(param) => param.attrs,\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Node::Ctor(..) => self.attrs(self.get_parent_item(id)),\n-            Node::Crate(item) => &item.attrs[..],\n+            Node::Crate(item) => item.attrs,\n             Node::MacroDef(def) => def.attrs,\n             Node::AnonConst(..)\n             | Node::PathSegment(..)"}, {"sha": "efe047869330cf86566ae37d2261190d0763575f", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -427,7 +427,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n             fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n                 let mut cnums = vec![LOCAL_CRATE];\n-                cnums.extend_from_slice(&tcx.crates()[..]);\n+                cnums.extend_from_slice(tcx.crates());\n                 cnums.sort_unstable();\n                 // Just to be sure...\n                 cnums.dedup();"}, {"sha": "6457c6cee576f556b247ec19206684af418d7fd3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -1105,7 +1105,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         if let Some(items) = self.diagnostic_metadata.current_trait_assoc_items {\n-            for assoc_item in &items[..] {\n+            for assoc_item in items {\n                 if assoc_item.ident == ident {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,"}, {"sha": "c5dbd3ed089613d53d79660260862cb4f86ff524", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -1492,7 +1492,7 @@ impl Target {\n             } );\n             ($key_name:ident = $json_name:expr, optional) => ( {\n                 let name = $json_name;\n-                if let Some(o) = obj.find(&name[..]) {\n+                if let Some(o) = obj.find(name) {\n                     base.$key_name = o\n                         .as_string()\n                         .map(|s| s.to_string() );"}, {"sha": "b5404c3a15ce006d7fa74963d94edfd2799ad72f", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -237,7 +237,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n         if let ([], [bound]) = (&potential_assoc_types[..], &trait_bounds) {\n-            match &bound.trait_ref.path.segments[..] {\n+            match bound.trait_ref.path.segments {\n                 // FIXME: `trait_ref.path.span` can point to a full path with multiple\n                 // segments, even though `trait_ref.path.segments` is of length `1`. Work\n                 // around that bug here, even though it should be fixed elsewhere."}, {"sha": "fb737ae7f53849d1be2602f9a4cca79b7c9c45e4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -2374,7 +2374,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             crate::collect::placeholder_type_error(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()),\n-                &generics.params[..],\n+                generics.params,\n                 visitor.0,\n                 true,\n                 hir_ty,"}, {"sha": "9e6c11d9dddbb30255eead05deb29b2f2db73d79", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -897,7 +897,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return (\n                     path.res,\n                     opt_qself.as_ref().map(|qself| self.to_ty(qself)),\n-                    &path.segments[..],\n+                    path.segments,\n                 );\n             }\n             QPath::TypeRelative(ref qself, ref segment) => (self.to_ty(qself), qself, segment),"}, {"sha": "885d961810be8aebe0c1dbd5b4d603f5ef9e1c29", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     });\n                                     if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n                                         if let Some(g) = kind.generics() {\n-                                            let key = match &g.where_clause.predicates[..] {\n+                                            let key = match g.where_clause.predicates {\n                                                 [.., pred] => (pred.span().shrink_to_hi(), false),\n                                                 [] => (\n                                                     g.where_clause"}, {"sha": "0d7ca70b944ad8971d248f85a86ef9ca8399d357", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -229,14 +229,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(\n-        tcx,\n-        Some(generics.span),\n-        &generics.params[..],\n-        visitor.0,\n-        suggest,\n-        None,\n-    );\n+    placeholder_type_error(tcx, Some(generics.span), generics.params, visitor.0, suggest, None);\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -417,7 +410,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                         | hir::ItemKind::Struct(_, generics)\n                         | hir::ItemKind::Union(_, generics) => {\n                             let lt_name = get_new_lifetime_name(self.tcx, poly_trait_ref, generics);\n-                            let (lt_sp, sugg) = match &generics.params[..] {\n+                            let (lt_sp, sugg) = match generics.params {\n                                 [] => (generics.span, format!(\"<{}>\", lt_name)),\n                                 [bound, ..] => {\n                                     (bound.span.shrink_to_lo(), format!(\"{}, \", lt_name))"}, {"sha": "6044899c237e22b0bdd027258e2ba353a59793e8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -347,7 +347,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         };\n \n         // Done specifying what options are possible, so do the getopts parsing\n-        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+        let matches = opts.parse(args).unwrap_or_else(|e| {\n             // Invalid argument/option format\n             println!(\"\\n{}\\n\", e);\n             usage(1, &opts, false, &subcommand_help);"}, {"sha": "f3aeea4b8c9ed4a1fcbd2b0fdd2975f23ff27fc9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b93b2e44405a3d914eb07dfe33bc39226bfe71/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b93b2e44405a3d914eb07dfe33bc39226bfe71/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=46b93b2e44405a3d914eb07dfe33bc39226bfe71", "patch": "@@ -975,7 +975,7 @@ where\n {\n     fn clean(&self, cx: &DocContext<'_>) -> FnDecl {\n         FnDecl {\n-            inputs: (&self.0.inputs[..], self.1).clean(cx),\n+            inputs: (self.0.inputs, self.1).clean(cx),\n             output: self.0.output.clean(cx),\n             c_variadic: self.0.c_variadic,\n             attrs: Attributes::default(),\n@@ -1939,7 +1939,7 @@ impl Clean<String> for Symbol {\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, || {\n-            (self.generic_params.clean(cx), (&*self.decl, &self.param_names[..]).clean(cx))\n+            (self.generic_params.clean(cx), (&*self.decl, self.param_names).clean(cx))\n         });\n         BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n     }"}]}