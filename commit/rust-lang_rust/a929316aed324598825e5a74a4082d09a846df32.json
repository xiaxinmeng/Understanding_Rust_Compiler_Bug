{"sha": "a929316aed324598825e5a74a4082d09a846df32", "node_id": "C_kwDOAAsO6NoAKGE5MjkzMTZhZWQzMjQ1OTg4MjVlNWE3NGE0MDgyZDA5YTg0NmRmMzI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-23T20:44:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-23T20:49:20Z"}, "message": "Suggest `.clone()` on method call move errors", "tree": {"sha": "820e1ec1fb7dfacf1fe14977f2874ee4c71f509d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820e1ec1fb7dfacf1fe14977f2874ee4c71f509d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a929316aed324598825e5a74a4082d09a846df32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a929316aed324598825e5a74a4082d09a846df32", "html_url": "https://github.com/rust-lang/rust/commit/a929316aed324598825e5a74a4082d09a846df32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a929316aed324598825e5a74a4082d09a846df32/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79db9c5e5d7e0bdc230b53b01a4f65d84434082", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79db9c5e5d7e0bdc230b53b01a4f65d84434082", "html_url": "https://github.com/rust-lang/rust/commit/c79db9c5e5d7e0bdc230b53b01a4f65d84434082"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "6de8ba0f8e6597d0dec9431e55b8945b149f39e9", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -3447,6 +3447,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n+ \"rustc_hir_analysis\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_lexer\","}, {"sha": "f5001172754c711f8e36230aa0b861b1f2711445", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -15,6 +15,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n+rustc_hir_analysis = { path = \"../rustc_hir_analysis\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }"}, {"sha": "5250f39003d27b5670d8a185108ebf154885b331", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n@@ -1066,18 +1067,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n                 CallKind::Normal { self_arg, desugaring, method_did } => {\n                     let self_arg = self_arg.unwrap();\n+                    let tcx = self.infcx.tcx;\n                     if let Some((CallDesugaringKind::ForLoopIntoIter, _)) = desugaring {\n-                        let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n-                        let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n+                        let ty = moved_place.ty(self.body, tcx).ty;\n+                        let suggest = match tcx.get_diagnostic_item(sym::IntoIterator) {\n                             Some(def_id) => {\n                                 let infcx = self.infcx.tcx.infer_ctxt().build();\n                                 type_known_to_meet_bound_modulo_regions(\n                                     &infcx,\n                                     self.param_env,\n-                                    infcx.tcx.mk_imm_ref(\n-                                        infcx.tcx.lifetimes.re_erased,\n-                                        infcx.tcx.erase_regions(ty),\n-                                    ),\n+                                    tcx.mk_imm_ref(tcx.lifetimes.re_erased, tcx.erase_regions(ty)),\n                                     def_id,\n                                     DUMMY_SP,\n                                 )\n@@ -1133,8 +1132,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n-                        if let ty::Adt(def, ..)\n-                            = moved_place.ty(self.body, self.infcx.tcx).ty.kind()\n+                        let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n+                        if let ty::Adt(def, ..) = ty.kind()\n                             && Some(def.did()) == self.infcx.tcx.lang_items().pin_type()\n                         {\n                             err.span_suggestion_verbose(\n@@ -1144,8 +1143,34 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n+                        if let Some(clone_trait) = tcx.lang_items().clone_trait() {\n+                            // We can't use `predicate_may_hold` or `can_eq` without ICEs in\n+                            // borrowck because of the inference context, so we do a poor-man's\n+                            // version here.\n+                            for impl_def_id in tcx.all_impls(clone_trait) {\n+                                if let Some(def_id) = impl_def_id.as_local()\n+                                    && let hir_id = tcx.hir().local_def_id_to_hir_id(def_id)\n+                                    && let hir::Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Impl(hir::Impl {\n+                                            self_ty,\n+                                            ..\n+                                        }),\n+                                        ..\n+                                    }) = tcx.hir().get(hir_id)\n+                                {\n+                                    if ty == hir_ty_to_ty(tcx, self_ty) {\n+                                        err.span_suggestion_verbose(\n+                                            fn_call_span.shrink_to_lo(),\n+                                            \"you can `clone` the value and consume it, but this \\\n+                                             might not be your desired behavior\",\n+                                            \"clone().\".to_string(),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n                     }\n-                    let tcx = self.infcx.tcx;\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {"}, {"sha": "204bfdb10b0b30b46a9f03eebfb0400fb4efbf08", "filename": "src/test/ui/moves/suggest-clone.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {}\n+}\n+fn main() {\n+    let foo = &Foo;\n+    foo.clone().foo(); //~ ERROR cannot move out\n+}"}, {"sha": "25dd9f006f9eaefe39f0507a3c41b37a203190f5", "filename": "src/test/ui/moves/suggest-clone.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {}\n+}\n+fn main() {\n+    let foo = &Foo;\n+    foo.foo(); //~ ERROR cannot move out\n+}"}, {"sha": "cbb3dfea3ba9e5008bcfbc7240035e72969c4a9f", "filename": "src/test/ui/moves/suggest-clone.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a929316aed324598825e5a74a4082d09a846df32/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr?ref=a929316aed324598825e5a74a4082d09a846df32", "patch": "@@ -0,0 +1,22 @@\n+error[E0507]: cannot move out of `*foo` which is behind a shared reference\n+  --> $DIR/suggest-clone.rs:10:5\n+   |\n+LL |     foo.foo();\n+   |     ^^^^-----\n+   |     |   |\n+   |     |   `*foo` moved due to this method call\n+   |     move occurs because `*foo` has type `Foo`, which does not implement the `Copy` trait\n+   |\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `*foo`\n+  --> $DIR/suggest-clone.rs:6:12\n+   |\n+LL |     fn foo(self) {}\n+   |            ^^^^\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     foo.clone().foo();\n+   |         ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}