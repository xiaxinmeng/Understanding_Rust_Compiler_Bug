{"sha": "fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMWE0YWIyM2M2NDkzZDcyZTQxYjVlZDhkODdlNzc0MWU4NDcxNTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T21:41:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T21:41:39Z"}, "message": "Change log buffer butes to a symbolic const in runtime.", "tree": {"sha": "0e8d2ddadda85c63cb959a88ea8bea1c7f9ef6d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e8d2ddadda85c63cb959a88ea8bea1c7f9ef6d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "html_url": "https://github.com/rust-lang/rust/commit/fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcb9d9b531c8dc6962d854edfeeeeb9477b40b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcb9d9b531c8dc6962d854edfeeeeb9477b40b2", "html_url": "https://github.com/rust-lang/rust/commit/bdcb9d9b531c8dc6962d854edfeeeeb9477b40b2"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "a859c7b9d4911bc8fc5b4a461011ec9fb3a66df9", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "patch": "@@ -22,14 +22,14 @@ last_os_error(rust_task *task) {\n         return NULL;\n     }\n #elif defined(_GNU_SOURCE)\n-    char cbuf[1024];\n+    char cbuf[BUF_BYTES];\n     char *buf = strerror_r(errno, cbuf, sizeof(cbuf));\n     if (!buf) {\n         task->fail(1);\n         return NULL;\n     }\n #else\n-    char buf[1024];\n+    char buf[BUF_BYTES];\n     int err = strerror_r(errno, buf, sizeof(buf));\n     if (err) {\n         task->fail(1);"}, {"sha": "356e9fe49ba366d6e9244491f306b53dc7bc43cd", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "patch": "@@ -57,7 +57,7 @@ rust_dom::activate(rust_task *task) {\n \n void\n rust_dom::log(rust_task *task, uint32_t type_bits, char const *fmt, ...) {\n-    char buf[256];\n+    char buf[BUF_BYTES];\n     if (_log.is_tracing(type_bits)) {\n         va_list args;\n         va_start(args, fmt);\n@@ -69,7 +69,7 @@ rust_dom::log(rust_task *task, uint32_t type_bits, char const *fmt, ...) {\n \n void\n rust_dom::log(uint32_t type_bits, char const *fmt, ...) {\n-    char buf[256];\n+    char buf[BUF_BYTES];\n     if (_log.is_tracing(type_bits)) {\n         va_list args;\n         va_start(args, fmt);"}, {"sha": "9a1b2ec001f21bf5837504babc6a27673a1b7efc", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "patch": "@@ -88,6 +88,10 @@ static size_t const TIME_SLICE_IN_MS = 10;\n \n static intptr_t const CONST_REFCOUNT = 0x7badface;\n \n+// This accounts for logging buffers.\n+\n+static size_t const BUF_BYTES = 1024;\n+\n // Every reference counted object should derive from this base class.\n \n template <typename T> struct rc_base {"}, {"sha": "d0ba85de868c851896580f616fd7d89fe5f90ce1", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "patch": "@@ -136,7 +136,7 @@ append_string(char *buffer, rust_log::ansi_color color,\n \n void\n rust_log::trace_ln(uint32_t thread_id, char *prefix, char *message) {\n-    char buffer[1024] = \"\";\n+    char buffer[BUF_BYTES] = \"\";\n     _log_lock.lock();\n     append_string(buffer, \"%-34s\", prefix);\n     for (uint32_t i = 0; i < _indent; i++) {\n@@ -158,7 +158,7 @@ rust_log::trace_ln(rust_task *task, char *message) {\n #else\n     uint32_t thread_id = hash((uint32_t) pthread_self());\n #endif\n-    char prefix[1024] = \"\";\n+    char prefix[BUF_BYTES] = \"\";\n     if (_dom && _dom->name) {\n         append_string(prefix, \"%04\" PRIxPTR \":%.10s:\",\n                       thread_id, _dom->name);"}, {"sha": "0453abce6cd36edba0bb7a19596e1bf5da573114", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a4ab23c6493d72e41b5ed8d87e7741e847154/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "patch": "@@ -12,7 +12,7 @@ rust_srv::rust_srv() :\n }\n \n rust_srv::~rust_srv() {\n-//    char msg[1024];\n+//    char msg[BUF_BYTES];\n //    snprintf(msg, sizeof(msg), \"~rust_srv %\" PRIxPTR, (uintptr_t) this);\n //    log(msg);\n }\n@@ -43,13 +43,13 @@ rust_srv::fatal(const char *expression,\n     size_t line,\n     const char *format,\n     ...) {\n-    char buf[1024];\n+    char buf[BUF_BYTES];\n     va_list args;\n     va_start(args, format);\n     vsnprintf(buf, sizeof(buf), format, args);\n     va_end(args);\n \n-    char msg[1024];\n+    char msg[BUF_BYTES];\n     snprintf(msg, sizeof(msg),\n              \"fatal, '%s' failed, %s:%d %s\",\n              expression, file, (int)line, buf);\n@@ -63,13 +63,13 @@ rust_srv::warning(char const *expression,\n     size_t line,\n     const char *format,\n     ...) {\n-    char buf[1024];\n+    char buf[BUF_BYTES];\n     va_list args;\n     va_start(args, format);\n     vsnprintf(buf, sizeof(buf), format, args);\n     va_end(args);\n \n-    char msg[1024];\n+    char msg[BUF_BYTES];\n     snprintf(msg, sizeof(msg),\n              \"warning: '%s', at: %s:%d %s\",\n              expression, file, (int)line, buf);"}]}