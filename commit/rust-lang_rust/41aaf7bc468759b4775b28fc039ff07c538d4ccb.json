{"sha": "41aaf7bc468759b4775b28fc039ff07c538d4ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYWFmN2JjNDY4NzU5YjQ3NzViMjhmYzAzOWZmMDdjNTM4ZDRjY2I=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-14T20:34:43Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-29T07:30:07Z"}, "message": "Fix ICE with struct ctors and const generics.\n\nThis commit fixes a ICE where struct constructors were resulting in an\nICE with const generics. Previously, a `match` in `type_of` did not have\nan arm for the `DefKind::Ctor` resolutions and therefore would assume\nthat the type did not have generics.", "tree": {"sha": "0a293a6a11881ff09a0f30c7e757ae021d464ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a293a6a11881ff09a0f30c7e757ae021d464ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41aaf7bc468759b4775b28fc039ff07c538d4ccb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzuNP8ACgkQAXYLT59T\n8VRElw/9EouQ5d97pXor31gt/MrPncr1u/iYwxTUysACrEqdZvvAU6IuKGTkvRTD\nBt9MP7bpY6wNyM9GL0Q2osorwlSTkP6flXXUqJ6U1Kb2xBXkiKq6CNR8YoBFwhIx\npFq+gYZadHvOgpu3zocbCDlcjYPIboK2CaCsLK0C3u2VFiCkT46mKrinlePyeSmi\nd96IMGzPcsqW6a+n0tULPzZ5EJwNwpH9KCfPAmiYze5csqkYQE52sQRIy/JLVv0g\nsDQciA6oCQkLO/YuGUjIYFQfAg0+/X+s+bED2/DbPVPrPWurUP6SYrLiWika4Eyk\n9Tr+ruY5UHHe0RU9FJGRhngO4vQuBIdCkAqdkvwW6e6CE7Jl79KzDHMGBFde5Hxr\nFmfK6EEW5UoUwS2IRnpCf3MfMdEndSgjN8NSx6gyJIIZimMo9o8MEp9AjwT/X8ur\nV1kZbss0tDtNuRpfj3i+k6GI+4Q4Hp1nUyQWborRwJ8vG8T4m/enVOivnavgoJqO\nPlpdDeWpdSnLRw0S3vptPWfgl6yHMTkvkYLOTxFrxQw8/acHzJxl3fIUJ4ylRkac\nTj6iLEz6yo93vgVAeGHUL0w9vprhpTCiBSHZza9DkTxjPFQ3OTop4gxT7trh/iTS\nN9G32Znaa+rXYuKl62mudXX7YitOcdoRyZIwgO9kTFptxvMFnJQ=\n=6058\n-----END PGP SIGNATURE-----", "payload": "tree 0a293a6a11881ff09a0f30c7e757ae021d464ff6\nparent 4b9d80325a65b0375eea526409a0f3aaf1cbc23c\nauthor David Wood <david@davidtw.co> 1557866083 +0100\ncommitter David Wood <david@davidtw.co> 1559115007 +0100\n\nFix ICE with struct ctors and const generics.\n\nThis commit fixes a ICE where struct constructors were resulting in an\nICE with const generics. Previously, a `match` in `type_of` did not have\nan arm for the `DefKind::Ctor` resolutions and therefore would assume\nthat the type did not have generics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41aaf7bc468759b4775b28fc039ff07c538d4ccb", "html_url": "https://github.com/rust-lang/rust/commit/41aaf7bc468759b4775b28fc039ff07c538d4ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41aaf7bc468759b4775b28fc039ff07c538d4ccb/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9d80325a65b0375eea526409a0f3aaf1cbc23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9d80325a65b0375eea526409a0f3aaf1cbc23c", "html_url": "https://github.com/rust-lang/rust/commit/4b9d80325a65b0375eea526409a0f3aaf1cbc23c"}], "stats": {"total": 147, "additions": 74, "deletions": 73}, "files": [{"sha": "f03a8ddc90825a7a23086878d2150da9d2bb744d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -425,6 +425,13 @@ impl GenericArg {\n             GenericArg::Const(c) => c.value.hir_id,\n         }\n     }\n+\n+    pub fn is_const(&self) -> bool {\n+        match self {\n+            GenericArg::Const(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "3806fd0998b5e8785c16f3b1c77d44a61d4c14f4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 51, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::UnpackedKind;\n-use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n@@ -1349,65 +1349,61 @@ pub fn checked_type_of<'a, 'tcx>(\n \n                     match path {\n                         QPath::Resolved(_, ref path) => {\n-                            let mut arg_index = 0;\n-                            let mut found_const = false;\n-                            for seg in &path.segments {\n-                                if let Some(generic_args) = &seg.args {\n-                                    let args = &generic_args.args;\n-                                    for arg in args {\n-                                        if let GenericArg::Const(ct) = arg {\n-                                            if ct.value.hir_id == hir_id {\n-                                                found_const = true;\n-                                                break;\n-                                            }\n-                                            arg_index += 1;\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            // Sanity check to make sure everything is as expected.\n-                            if !found_const {\n-                                if !fail {\n-                                    return None;\n-                                }\n-                                bug!(\"no arg matching AnonConst in path\")\n-                            }\n-                            match path.res {\n-                                // We've encountered an `AnonConst` in some path, so we need to\n-                                // figure out which generic parameter it corresponds to and return\n-                                // the relevant type.\n-                                Res::Def(DefKind::Struct, def_id)\n-                                | Res::Def(DefKind::Union, def_id)\n-                                | Res::Def(DefKind::Enum, def_id)\n-                                | Res::Def(DefKind::Fn, def_id) => {\n-                                    let generics = tcx.generics_of(def_id);\n-                                    let mut param_index = 0;\n-                                    for param in &generics.params {\n-                                        if let ty::GenericParamDefKind::Const = param.kind {\n-                                            if param_index == arg_index {\n-                                                return Some(tcx.type_of(param.def_id));\n-                                            }\n-                                            param_index += 1;\n-                                        }\n-                                    }\n-                                    // This is no generic parameter associated with the arg. This is\n-                                    // probably from an extra arg where one is not needed.\n-                                    return Some(tcx.types.err);\n-                                }\n-                                Res::Err => tcx.types.err,\n-                                x => {\n+                            let arg_index = path.segments.iter()\n+                                .filter_map(|seg| seg.args.as_ref())\n+                                .map(|generic_args| generic_args.args.as_ref())\n+                                .find_map(|args| {\n+                                    args.iter()\n+                                        .filter(|arg| arg.is_const())\n+                                        .enumerate()\n+                                        .filter(|(_, arg)| arg.id() == hir_id)\n+                                        .map(|(index, _)| index)\n+                                        .next()\n+                                })\n+                                .or_else(|| {\n                                     if !fail {\n-                                        return None;\n+                                        None\n+                                    } else {\n+                                        bug!(\"no arg matching AnonConst in path\")\n                                     }\n+                                })?;\n+\n+                            // We've encountered an `AnonConst` in some path, so we need to\n+                            // figure out which generic parameter it corresponds to and return\n+                            // the relevant type.\n+                            let generics = match path.res {\n+                                Res::Def(DefKind::Ctor(..), def_id) =>\n+                                    tcx.generics_of(tcx.parent(def_id).unwrap()),\n+                                Res::Def(_, def_id) =>\n+                                    tcx.generics_of(def_id),\n+                                Res::Err =>\n+                                    return Some(tcx.types.err),\n+                                _ if !fail =>\n+                                    return None,\n+                                x => {\n                                     tcx.sess.delay_span_bug(\n                                         DUMMY_SP,\n                                         &format!(\n                                             \"unexpected const parent path def {:?}\", x\n                                         ),\n                                     );\n-                                    tcx.types.err\n+                                    return Some(tcx.types.err);\n                                 }\n-                            }\n+                            };\n+\n+                            generics.params.iter()\n+                                .filter(|param| {\n+                                    if let ty::GenericParamDefKind::Const = param.kind {\n+                                        true\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .nth(arg_index)\n+                                .map(|param| tcx.type_of(param.def_id))\n+                                // This is no generic parameter associated with the arg. This is\n+                                // probably from an extra arg where one is not needed.\n+                                .unwrap_or(tcx.types.err)\n                         }\n                         x => {\n                             if !fail {"}, {"sha": "f592e486be951fdc6c25b9f8fab427780426fad8", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -1,8 +1,9 @@\n+// compile-pass\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-// We should probably be able to infer the types here. However, this test is checking that we don't\n-// get an ICE in this case. It may be modified later to not be an error.\n+// This test confirms that the types can be inferred correctly for this example with const\n+// generics. Previously this would ICE, and more recently error.\n \n struct Foo<const NUM_BYTES: usize>(pub [u8; NUM_BYTES]);\n "}, {"sha": "52907bbb67720c919d8115145e31c3d83530206b", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -1,25 +1,6 @@\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/cannot-infer-type-for-const-param.rs:1:12\n+  --> $DIR/cannot-infer-type-for-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-type-for-const-param.rs:10:19\n-   |\n-LL |     let _ = Foo::<3>([1, 2, 3]);\n-   |                   ^ cannot infer type for `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/cannot-infer-type-for-const-param.rs:10:22\n-   |\n-LL |     let _ = Foo::<3>([1, 2, 3]);\n-   |                      ^^^^^^^^^ expected `3`, found `3usize`\n-   |\n-   = note: expected type `[u8; _]`\n-              found type `[u8; 3]`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "0b4aeae7a4a390ea5ea8f8b771fb53d88f368963", "filename": "src/test/ui/const-generics/issue-60818-struct-constructors.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.rs?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Generic<const V: usize>;\n+\n+fn main() {\n+    let _ = Generic::<0>;\n+}"}, {"sha": "4b8f50b9b021977444ff1cb1d2fd3899981682ac", "filename": "src/test/ui/const-generics/issue-60818-struct-constructors.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41aaf7bc468759b4775b28fc039ff07c538d4ccb/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr?ref=41aaf7bc468759b4775b28fc039ff07c538d4ccb", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-60818-struct-constructors.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}]}