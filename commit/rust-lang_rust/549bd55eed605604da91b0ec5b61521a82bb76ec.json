{"sha": "549bd55eed605604da91b0ec5b61521a82bb76ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OWJkNTVlZWQ2MDU2MDRkYTkxYjBlYzViNjE1MjFhODJiYjc2ZWM=", "commit": {"author": {"name": "Thiago Carvalho", "email": "thiago.carvalho@westwing.de", "date": "2015-04-09T16:07:33Z"}, "committer": {"name": "Thiago Carvalho", "email": "thiago.carvalho@westwing.de", "date": "2015-04-09T16:07:33Z"}, "message": "resurrect research paper list #24004", "tree": {"sha": "bf8e79e0afba8bb5801653fa556845175e573b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8e79e0afba8bb5801653fa556845175e573b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/549bd55eed605604da91b0ec5b61521a82bb76ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/549bd55eed605604da91b0ec5b61521a82bb76ec", "html_url": "https://github.com/rust-lang/rust/commit/549bd55eed605604da91b0ec5b61521a82bb76ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/549bd55eed605604da91b0ec5b61521a82bb76ec/comments", "author": null, "committer": null, "parents": [{"sha": "e57410cd9254d68684255c0a6f95aaa8af603ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57410cd9254d68684255c0a6f95aaa8af603ddd", "html_url": "https://github.com/rust-lang/rust/commit/e57410cd9254d68684255c0a6f95aaa8af603ddd"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "8853001191ca97a4612fe00cd14a109f3f660550", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/549bd55eed605604da91b0ec5b61521a82bb76ec/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/549bd55eed605604da91b0ec5b61521a82bb76ec/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=549bd55eed605604da91b0ec5b61521a82bb76ec", "patch": "@@ -67,3 +67,4 @@\n     * [Benchmark Tests](benchmark-tests.md)\n     * [Box Syntax and Patterns](box-syntax-and-patterns.md)\n * [Glossary](glossary.md)\n+* [Academic Research](academic-research.md)"}, {"sha": "f4f066fb3dfe3c5243f458bce92f2c3e9ef2d790", "filename": "src/doc/trpl/academic-research.md", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/549bd55eed605604da91b0ec5b61521a82bb76ec/src%2Fdoc%2Ftrpl%2Facademic-research.md", "raw_url": "https://github.com/rust-lang/rust/raw/549bd55eed605604da91b0ec5b61521a82bb76ec/src%2Fdoc%2Ftrpl%2Facademic-research.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Facademic-research.md?ref=549bd55eed605604da91b0ec5b61521a82bb76ec", "patch": "@@ -0,0 +1,46 @@\n+% Academic Research\n+\n+An incomplete list of papers that have had some influence in Rust.\n+\n+Recommended for inspiration and a better understanding of Rust's background.\n+\n+### Type system\n+\n+* [Region based memory management in Cyclone](http://209.68.42.137/ucsd-pages/Courses/cse227.w03/handouts/cyclone-regions.pdf)\n+* [Safe manual memory management in Cyclone](http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf)\n+* [Typeclasses: making ad-hoc polymorphism less ad hoc](http://www.ps.uni-sb.de/courses/typen-ws99/class.ps.gz)\n+* [Macros that work together](https://www.cs.utah.edu/plt/publications/jfp12-draft-fcdf.pdf)\n+* [Traits: composable units of behavior](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf)\n+* [Alias burying](http://www.cs.uwm.edu/faculty/boyland/papers/unique-preprint.ps) - We tried something similar and abandoned it.\n+* [External uniqueness is unique enough](http://www.computingscience.nl/research/techreps/repo/CS-2002/2002-048.pdf)\n+* [Uniqueness and Reference Immutability for Safe Parallelism](https://research.microsoft.com/pubs/170528/msr-tr-2012-79.pdf)\n+* [Region Based Memory Management](http://www.cs.ucla.edu/~palsberg/tba/papers/tofte-talpin-iandc97.pdf)\n+\n+### Concurrency\n+\n+* [Singularity: rethinking the software stack](https://research.microsoft.com/pubs/69431/osr2007_rethinkingsoftwarestack.pdf)\n+* [Language support for fast and reliable message passing in singularity OS](https://research.microsoft.com/pubs/67482/singsharp.pdf)\n+* [Scheduling multithreaded computations by work stealing](http://supertech.csail.mit.edu/papers/steal.pdf)\n+* [Thread scheduling for multiprogramming multiprocessors](http://www.eecis.udel.edu/%7Ecavazos/cisc879-spring2008/papers/arora98thread.pdf)\n+* [The data locality of work stealing](http://www.aladdin.cs.cmu.edu/papers/pdfs/y2000/locality_spaa00.pdf)\n+* [Dynamic circular work stealing deque](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&rep=rep1&type=pdf) - The Chase/Lev deque\n+* [Work-first and help-first scheduling policies for async-finish task parallelism](http://www.cs.rice.edu/%7Eyguo/pubs/PID824943.pdf) - More general than fully-strict work stealing\n+* [A Java fork/join calamity](http://www.coopsoft.com/ar/CalamityArticle.html) - critique of Java's fork/join library, particularly its application of work stealing to non-strict computation\n+* [Scheduling techniques for concurrent systems](http://www.ece.rutgers.edu/%7Eparashar/Classes/ece572-papers/05/ps-ousterhout.pdf)\n+* [Contention aware scheduling](http://www.blagodurov.net/files/a8-blagodurov.pdf)\n+* [Balanced work stealing for time-sharing multicores](http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-12-1.pdf)\n+* [Three layer cake](http://www.upcrc.illinois.edu/workshops/paraplop10/papers/paraplop10_submission_8.pdf)\n+* [Non-blocking steal-half work queues](http://www.cs.bgu.ac.il/%7Ehendlerd/papers/p280-hendler.pdf)\n+* [Reagents: expressing and composing fine-grained concurrency](http://www.mpi-sws.org/~turon/reagents.pdf)\n+* [Algorithms for scalable synchronization of shared-memory multiprocessors](https://www.cs.rochester.edu/u/scott/papers/1991_TOCS_synch.pdf)\n+\n+### Others\n+\n+* [Crash-only software](https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf)\n+* [Composing High-Performance Memory Allocators](http://people.cs.umass.edu/~emery/pubs/berger-pldi2001.pdf)\n+* [Reconsidering Custom Memory Allocation](http://people.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf)\n+\n+### Papers *about* Rust\n+\n+* [GPU programming in Rust](http://www.cs.indiana.edu/~eholk/papers/hips2013.pdf)\n+* [Parallel closures: a new twist on an old idea](https://www.usenix.org/conference/hotpar12/parallel-closures-new-twist-old-idea) - not exactly about rust, but by nmatsakis"}]}