{"sha": "d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "node_id": "C_kwDOAAsO6NoAKGQ1MzU0ZWI0OGVhODcwNWQ5ZjJkNGYyMTFiMTM5YjQzY2NkZWJkMTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-28T17:45:15Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-02T07:21:55Z"}, "message": "Add known bug test.", "tree": {"sha": "eb6d9ddf376d6a6b757ae5b98380456f67adec79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6d9ddf376d6a6b757ae5b98380456f67adec79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "html_url": "https://github.com/rust-lang/rust/commit/d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6fa4f118d88991458549464d960aa1e495541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b", "html_url": "https://github.com/rust-lang/rust/commit/9a6fa4f118d88991458549464d960aa1e495541b"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "ee2c61468cb6035d82c43838c8abbff0e320f235", "filename": "src/test/ui/lifetimes/bare-trait-object-borrowck.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -0,0 +1,27 @@\n+#![allow(bare_trait_objects)]\n+\n+pub struct FormatWith<'a, I, F> {\n+    sep: &'a str,\n+    /// FormatWith uses interior mutability because Display::fmt takes &self.\n+    inner: RefCell<Option<(I, F)>>,\n+}\n+\n+use std::cell::RefCell;\n+use std::fmt;\n+\n+struct Layout;\n+\n+pub fn new_format<'a, I, F>(iter: I, separator: &'a str, f: F) -> FormatWith<'a, I, F>\n+where\n+    I: Iterator,\n+    F: FnMut(I::Item, &mut FnMut(&fmt::Display) -> fmt::Result) -> fmt::Result,\n+{\n+    FormatWith { sep: separator, inner: RefCell::new(Some((iter, f))) }\n+}\n+\n+fn main() {\n+    let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n+    //~^ ERROR temporary value dropped while borrowed\n+    //~| ERROR temporary value dropped while borrowed\n+    //~| ERROR `i` does not live long enough\n+}"}, {"sha": "d7b059019eb3b15f14af3ac12a65177021eb1632", "filename": "src/test/ui/lifetimes/bare-trait-object-borrowck.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -0,0 +1,43 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/bare-trait-object-borrowck.rs:23:48\n+   |\n+LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n+   |                                          -  ---^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |  |  |                        |\n+   |                                          |  |  |                        temporary value is freed at the end of this statement\n+   |                                          |  |  creates a temporary which is freed while still in use\n+   |                                          |  argument requires that borrow lasts for `'1`\n+   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n+   |\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/bare-trait-object-borrowck.rs:23:48\n+   |\n+LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n+   |                                          -  ---^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                          |  |  |                        |\n+   |                                          |  |  |                        temporary value is freed at the end of this statement\n+   |                                          |  |  creates a temporary which is freed while still in use\n+   |                                          |  argument requires that borrow lasts for `'1`\n+   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n+   |\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0597]: `i` does not live long enough\n+  --> $DIR/bare-trait-object-borrowck.rs:23:71\n+   |\n+LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n+   |                                          -  --------------------------^--\n+   |                                          |  |                         | |\n+   |                                          |  |                         | `i` dropped here while still borrowed\n+   |                                          |  |                         borrowed value does not live long enough\n+   |                                          |  argument requires that `i` is borrowed for `'1`\n+   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n+   |\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "dc8b611c039780b0f10d6d66454727cbba529a9d", "filename": "src/test/ui/lifetimes/bare-trait-object.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -0,0 +1,27 @@\n+// Verify that lifetime resolution correctly accounts for `Fn` bare trait objects.\n+\n+#![allow(bare_trait_objects)]\n+\n+// This should work as: fn next_u32(fill_buf: &mut dyn FnMut(&mut [u8]))\n+fn next_u32(fill_buf: &mut FnMut(&mut [u8])) {\n+    let mut buf: [u8; 4] = [0; 4];\n+    fill_buf(&mut buf);\n+}\n+\n+fn explicit(fill_buf: &mut dyn FnMut(&mut [u8])) {\n+    let mut buf: [u8; 4] = [0; 4];\n+    fill_buf(&mut buf);\n+}\n+\n+fn main() {\n+    let _: fn(&mut FnMut(&mut [u8])) = next_u32;\n+    //~^ ERROR mismatched types\n+    let _: &dyn Fn(&mut FnMut(&mut [u8])) = &next_u32;\n+    let _: fn(&mut FnMut(&mut [u8])) = explicit;\n+    //~^ ERROR mismatched types\n+    let _: &dyn Fn(&mut FnMut(&mut [u8])) = &explicit;\n+    let _: fn(&mut dyn FnMut(&mut [u8])) = next_u32;\n+    let _: &dyn Fn(&mut dyn FnMut(&mut [u8])) = &next_u32;\n+    let _: fn(&mut dyn FnMut(&mut [u8])) = explicit;\n+    let _: &dyn Fn(&mut dyn FnMut(&mut [u8])) = &explicit;\n+}"}, {"sha": "8f06410152e62eb33412d3b1541f843bc1a1e947", "filename": "src/test/ui/lifetimes/bare-trait-object.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/bare-trait-object.rs:17:40\n+   |\n+LL |     let _: fn(&mut FnMut(&mut [u8])) = next_u32;\n+   |                                        ^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r, 's> fn(&'r mut (dyn for<'s> FnMut(&'s mut [u8]) + 'r))`\n+                 found fn item `for<'r> fn(&'r mut (dyn for<'r> FnMut(&'r mut [u8]) + 'r)) {next_u32}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bare-trait-object.rs:20:40\n+   |\n+LL |     let _: fn(&mut FnMut(&mut [u8])) = explicit;\n+   |                                        ^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'r, 's> fn(&'r mut (dyn for<'s> FnMut(&'s mut [u8]) + 'r))`\n+                 found fn item `for<'r> fn(&'r mut (dyn for<'r> FnMut(&'r mut [u8]) + 'r)) {explicit}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}