{"sha": "c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2MyYzYwMTZmMTY0NzYxMzhkYThmNmY3ZjNmMzg0ZTVkMzJmZTM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-24T18:42:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-28T16:09:11Z"}, "message": "Remove unnecessary `self_ty` parameter to `get_blanket_impls`\n\nIt can be calculated when necessary at the callsite, there's no need to\npass it separately.\n\nThis also renames `param_env_def_id` to `item_def_id`.", "tree": {"sha": "4c75f7880c10999f221173c989da55ce18870ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c75f7880c10999f221173c989da55ce18870ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "html_url": "https://github.com/rust-lang/rust/commit/c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "html_url": "https://github.com/rust-lang/rust/commit/fe1bf8e05c39bdcc73fc09e246b7209444e389bc"}], "stats": {"total": 81, "additions": 33, "deletions": 48}, "files": [{"sha": "c23c087be4142a4d402ece843de478376247773f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "patch": "@@ -34,7 +34,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         trait_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n-        param_env_def_id: DefId,\n+        item_def_id: DefId,\n         f: &auto_trait::AutoTraitFinder<'tcx>,\n         // If this is set, show only negative trait implementations, not positive ones.\n         discard_positive_impl: bool,\n@@ -50,7 +50,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             let region_data = info.region_data;\n \n             let names_map = tcx\n-                .generics_of(param_env_def_id)\n+                .generics_of(item_def_id)\n                 .params\n                 .iter()\n                 .filter_map(|param| match param.kind {\n@@ -62,16 +62,16 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             let lifetime_predicates = Self::handle_lifetimes(&region_data, &names_map);\n             let new_generics = self.param_env_to_generics(\n                 infcx.tcx,\n-                param_env_def_id,\n+                item_def_id,\n                 info.full_user_env,\n                 lifetime_predicates,\n                 info.vid_to_region,\n             );\n \n             debug!(\n-                \"find_auto_trait_generics(param_env_def_id={:?}, trait_def_id={:?}): \\\n+                \"find_auto_trait_generics(item_def_id={:?}, trait_def_id={:?}): \\\n                     finished with {:?}\",\n-                param_env_def_id, trait_def_id, new_generics\n+                item_def_id, trait_def_id, new_generics\n             );\n \n             new_generics\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 // Instead, we generate `impl !Send for Foo<T>`, which better\n                 // expresses the fact that `Foo<T>` never implements `Send`,\n                 // regardless of the choice of `T`.\n-                let params = (tcx.generics_of(param_env_def_id), ty::GenericPredicates::default())\n+                let params = (tcx.generics_of(item_def_id), ty::GenericPredicates::default())\n                     .clean(self.cx)\n                     .params;\n \n@@ -115,7 +115,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             name: None,\n             attrs: Default::default(),\n             visibility: Inherited,\n-            def_id: self.cx.next_def_id(param_env_def_id.krate),\n+            def_id: self.cx.next_def_id(item_def_id.krate),\n             kind: box ImplItem(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n@@ -130,26 +130,25 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         })\n     }\n \n-    // FIXME(eddyb) figure out a better way to pass information about\n-    // parametrization of `ty` than `param_env_def_id`.\n-    crate fn get_auto_trait_impls(&mut self, ty: Ty<'tcx>, param_env_def_id: DefId) -> Vec<Item> {\n+    crate fn get_auto_trait_impls(&mut self, item_def_id: DefId) -> Vec<Item> {\n         let tcx = self.cx.tcx;\n-        let param_env = tcx.param_env(param_env_def_id);\n-        let f = auto_trait::AutoTraitFinder::new(self.cx.tcx);\n+        let param_env = tcx.param_env(item_def_id);\n+        let ty = tcx.type_of(item_def_id);\n+        let f = auto_trait::AutoTraitFinder::new(tcx);\n \n         debug!(\"get_auto_trait_impls({:?})\", ty);\n         let auto_traits: Vec<_> = self.cx.auto_traits.iter().cloned().collect();\n         let mut auto_traits: Vec<Item> = auto_traits\n             .into_iter()\n             .filter_map(|trait_def_id| {\n-                self.generate_for_trait(ty, trait_def_id, param_env, param_env_def_id, &f, false)\n+                self.generate_for_trait(ty, trait_def_id, param_env, item_def_id, &f, false)\n             })\n             .collect();\n         // We are only interested in case the type *doesn't* implement the Sized trait.\n-        if !ty.is_sized(self.cx.tcx.at(rustc_span::DUMMY_SP), param_env) {\n+        if !ty.is_sized(tcx.at(rustc_span::DUMMY_SP), param_env) {\n             // In case `#![no_core]` is used, `sized_trait` returns nothing.\n-            if let Some(item) = self.cx.tcx.lang_items().sized_trait().and_then(|sized_trait_did| {\n-                self.generate_for_trait(ty, sized_trait_did, param_env, param_env_def_id, &f, true)\n+            if let Some(item) = tcx.lang_items().sized_trait().and_then(|sized_trait_did| {\n+                self.generate_for_trait(ty, sized_trait_did, param_env, item_def_id, &f, true)\n             }) {\n                 auto_traits.push(item);\n             }\n@@ -445,15 +444,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     fn param_env_to_generics(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        param_env_def_id: DefId,\n+        item_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n         mut existing_predicates: Vec<WherePredicate>,\n         vid_to_region: FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n     ) -> Generics {\n         debug!(\n-            \"param_env_to_generics(param_env_def_id={:?}, param_env={:?}, \\\n+            \"param_env_to_generics(item_def_id={:?}, param_env={:?}, \\\n              existing_predicates={:?})\",\n-            param_env_def_id, param_env, existing_predicates\n+            item_def_id, param_env, existing_predicates\n         );\n \n         // The `Sized` trait must be handled specially, since we only display it when\n@@ -463,7 +462,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n         let orig_bounds: FxHashSet<_> =\n-            self.cx.tcx.param_env(param_env_def_id).caller_bounds().iter().collect();\n+            self.cx.tcx.param_env(item_def_id).caller_bounds().iter().collect();\n         let clean_where_predicates = param_env\n             .caller_bounds()\n             .iter()\n@@ -477,14 +476,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .map(|p| p.fold_with(&mut replacer));\n \n         let mut generic_params =\n-            (tcx.generics_of(param_env_def_id), tcx.explicit_predicates_of(param_env_def_id))\n+            (tcx.generics_of(item_def_id), tcx.explicit_predicates_of(item_def_id))\n                 .clean(self.cx)\n                 .params;\n \n-        debug!(\n-            \"param_env_to_generics({:?}): generic_params={:?}\",\n-            param_env_def_id, generic_params\n-        );\n+        debug!(\"param_env_to_generics({:?}): generic_params={:?}\", item_def_id, generic_params);\n \n         let mut has_sized = FxHashSet::default();\n         let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n@@ -648,13 +644,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         .or_default()\n                                         .insert(*trait_.clone());\n                                 }\n-                                _ => panic!(\n-                                    \"Unexpected trait {:?} for {:?}\",\n-                                    trait_, param_env_def_id,\n-                                ),\n+                                _ => panic!(\"Unexpected trait {:?} for {:?}\", trait_, item_def_id),\n                             }\n                         }\n-                        _ => panic!(\"Unexpected LHS {:?} for {:?}\", lhs, param_env_def_id),\n+                        _ => panic!(\"Unexpected LHS {:?} for {:?}\", lhs, item_def_id),\n                     }\n                 }\n             };"}, {"sha": "5cda4cc5ada7122b92ba59cf5e245543188f273e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "patch": "@@ -14,10 +14,9 @@ crate struct BlanketImplFinder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n-    // FIXME(eddyb) figure out a better way to pass information about\n-    // parametrization of `ty` than `param_env_def_id`.\n-    crate fn get_blanket_impls(&mut self, ty: Ty<'tcx>, param_env_def_id: DefId) -> Vec<Item> {\n-        let param_env = self.cx.tcx.param_env(param_env_def_id);\n+    crate fn get_blanket_impls(&mut self, item_def_id: DefId) -> Vec<Item> {\n+        let param_env = self.cx.tcx.param_env(item_def_id);\n+        let ty = self.cx.tcx.type_of(item_def_id);\n \n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n@@ -39,7 +38,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         _ => return false,\n                     }\n \n-                    let substs = infcx.fresh_substs_for_item(DUMMY_SP, param_env_def_id);\n+                    let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n                     let ty = ty.subst(infcx.tcx, substs);\n                     let param_env = param_env.subst(infcx.tcx, substs);\n "}, {"sha": "12558c3c5a77f7eb2e7c803b74f8fe937422fbcb", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n@@ -426,19 +426,18 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path, id: hir::HirId) -> Ty\n \n crate fn get_auto_trait_and_blanket_impls(\n     cx: &mut DocContext<'tcx>,\n-    ty: Ty<'tcx>,\n-    param_env_def_id: DefId,\n+    item_def_id: DefId,\n ) -> impl Iterator<Item = Item> {\n     let auto_impls = cx\n         .sess()\n         .prof\n         .generic_activity(\"get_auto_trait_impls\")\n-        .run(|| AutoTraitFinder::new(cx).get_auto_trait_impls(ty, param_env_def_id));\n+        .run(|| AutoTraitFinder::new(cx).get_auto_trait_impls(item_def_id));\n     let blanket_impls = cx\n         .sess()\n         .prof\n         .generic_activity(\"get_blanket_impls\")\n-        .run(|| BlanketImplFinder { cx }.get_blanket_impls(ty, param_env_def_id));\n+        .run(|| BlanketImplFinder { cx }.get_blanket_impls(item_def_id));\n     auto_impls.into_iter().chain(blanket_impls)\n }\n "}, {"sha": "0e84a51017761d6bab372cd7591c976402f00002", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47c2c6016f16476138da8f6f7f3f384e5d32fe3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=c47c2c6016f16476138da8f6f7f3f384e5d32fe3", "patch": "@@ -46,9 +46,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n-                    let self_ty = cx.tcx.type_of(def_id);\n-                    let impls = get_auto_trait_and_blanket_impls(cx, self_ty, def_id);\n-\n+                    let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items.extend(impls.filter(|i| cx.renderinfo.inlined.insert(i.def_id)));\n                 }\n             });\n@@ -170,11 +168,7 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             // FIXME(eddyb) is this `doc(hidden)` check needed?\n             if !self.cx.tcx.get_attrs(i.def_id).lists(sym::doc).has_word(sym::hidden) {\n-                self.impls.extend(get_auto_trait_and_blanket_impls(\n-                    self.cx,\n-                    self.cx.tcx.type_of(i.def_id),\n-                    i.def_id,\n-                ));\n+                self.impls.extend(get_auto_trait_and_blanket_impls(self.cx, i.def_id));\n             }\n         }\n "}]}