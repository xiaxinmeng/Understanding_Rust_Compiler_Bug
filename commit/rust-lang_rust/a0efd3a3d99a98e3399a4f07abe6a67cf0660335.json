{"sha": "a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZWZkM2EzZDk5YTk4ZTMzOTlhNGYwN2FiZTZhNjdjZjA2NjAzMzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-22T00:31:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-22T04:31:25Z"}, "message": "trans: Be a little more picky about dllimport\n\nCurrently you can hit a link error on MSVC by only referencing static items from\na crate (no functions for example) and then link to the crate statically (as all\nRust crates do 99% of the time). A detailed investigation can be found [on\ngithub][details], but the tl;dr is that we need to stop applying dllimport so\naggressively.\n\nThis commit alters the application of dllimport on constants to only cases where\nthe crate the constant originated from will be linked as a dylib in some output\ncrate type. That way if we're just linking rlibs (like the motivation for this\nissue) we won't use dllimport. For the compiler, however, (which has lots of\ndylibs) we'll use dllimport.\n\n[details]: https://github.com/rust-lang/rust/issues/26591#issuecomment-123513631\n\ncc #26591", "tree": {"sha": "b66737059440b271396609ecb1254350db1f4645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66737059440b271396609ecb1254350db1f4645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "html_url": "https://github.com/rust-lang/rust/commit/a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2d3bc8a20545aa6bb660ae0e30ff143f160d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2d3bc8a20545aa6bb660ae0e30ff143f160d16", "html_url": "https://github.com/rust-lang/rust/commit/ee2d3bc8a20545aa6bb660ae0e30ff143f160d16"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "258051357b1057b21ab41be45deba19a7f00ba11", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "patch": "@@ -228,6 +228,7 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n     // FIXME(nagisa): perhaps the map of externs could be offloaded to llvm somehow?\n     // FIXME(nagisa): investigate whether it can be changed into define_global\n     let c = declare::declare_global(ccx, &name[..], ty);\n+\n     // Thread-local statics in some other crate need to *always* be linked\n     // against in a thread-local fashion, so we need to be sure to apply the\n     // thread-local attribute locally if it was present remotely. If we\n@@ -239,7 +240,42 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n             llvm::set_thread_local(c, true);\n         }\n     }\n-    if ccx.use_dll_storage_attrs() {\n+\n+    // MSVC is a little ornery about how items are imported across dlls, and for\n+    // lots more info on dllimport/dllexport see the large comment in\n+    // SharedCrateContext::new. Unfortunately, unlike functions, statics\n+    // imported from dlls *must* be tagged with dllimport (if you forget\n+    // dllimport on a function then the linker fixes it up with an injected\n+    // shim). This means that to link correctly to an upstream Rust dynamic\n+    // library we need to make sure its statics are tagged with dllimport.\n+    //\n+    // Hence, if this translation is using dll storage attributes and the crate\n+    // that this const originated from is being imported as a dylib at some\n+    // point we tag this with dllimport.\n+    //\n+    // Note that this is not 100% correct for a variety of reasons:\n+    //\n+    // 1. If we are producing an rlib and linking to an upstream rlib, we'll\n+    //    omit the dllimport. It's a possibility, though, that some later\n+    //    downstream compilation will link the same upstream dependency as a\n+    //    dylib and use our rlib, causing linker errors because we didn't use\n+    //    dllimport.\n+    // 2. We may have multiple crate output types. For example if we are\n+    //    emitting a statically linked binary as well as a dynamic library we'll\n+    //    want to omit dllimport for the binary but we need to have it for the\n+    //    dylib.\n+    //\n+    // For most every day uses, however, this should suffice. During the\n+    // bootstrap we're almost always linking upstream to a dylib for some crate\n+    // type output, so most imports will be tagged with dllimport (somewhat\n+    // appropriately). Otherwise rust dylibs linking against rust dylibs is\n+    // pretty rare in Rust so this will likely always be `false` and we'll never\n+    // tag with dllimport.\n+    //\n+    // Note that we can't just blindly tag all constants with dllimport as can\n+    // cause linkage errors when we're not actually linking against a dll. For\n+    // more info on this see rust-lang/rust#26591.\n+    if ccx.use_dll_storage_attrs() && ccx.upstream_dylib_used(did.krate) {\n         llvm::SetDLLStorageClass(c, llvm::DLLImportStorageClass);\n     }\n     ccx.externs().borrow_mut().insert(name.to_string(), c);"}, {"sha": "82428eebcce979184654a169e6064474ce3aa83b", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "patch": "@@ -11,6 +11,7 @@\n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n use metadata::common::LinkMeta;\n+use metadata::cstore;\n use middle::def::ExportMap;\n use middle::traits;\n use trans::adt;\n@@ -778,6 +779,29 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.shared.use_dll_storage_attrs()\n     }\n+\n+    /// Tests whether the given `krate` (an upstream crate) is ever used as a\n+    /// dynamic library for the final linkage of this crate.\n+    pub fn upstream_dylib_used(&self, krate: ast::CrateNum) -> bool {\n+        let tcx = self.tcx();\n+        let formats = tcx.dependency_formats.borrow();\n+        tcx.sess.crate_types.borrow().iter().any(|ct| {\n+            match formats[ct].get(krate as usize - 1) {\n+                // If a crate is explicitly linked dynamically then we're\n+                // definitely using it dynamically. If it's not being linked\n+                // then currently that means it's being included through another\n+                // dynamic library, so we're including it dynamically.\n+                Some(&Some(cstore::RequireDynamic)) |\n+                Some(&None) => true,\n+\n+                // Static linkage isn't included dynamically and if there's not\n+                // an entry in the array then this crate type isn't actually\n+                // doing much linkage so there's nothing dynamic going on.\n+                Some(&Some(cstore::RequireStatic)) |\n+                None => false,\n+            }\n+        })\n+    }\n }\n \n /// Declare any llvm intrinsics that you might need"}, {"sha": "85093869ba21a4c0ea462a4d01a98f205646e1d0", "filename": "src/test/auxiliary/xcrate-static.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Ftest%2Fauxiliary%2Fxcrate-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Ftest%2Fauxiliary%2Fxcrate-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate-static.rs?ref=a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+\n+pub static FOO: u8 = 8;"}, {"sha": "d1f08e726bc1f222cb923bb164f9926ac82b419a", "filename": "src/test/run-pass/xcrate-static.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Ftest%2Frun-pass%2Fxcrate-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0efd3a3d99a98e3399a4f07abe6a67cf0660335/src%2Ftest%2Frun-pass%2Fxcrate-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-static.rs?ref=a0efd3a3d99a98e3399a4f07abe6a67cf0660335", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate-static.rs\n+\n+extern crate xcrate_static;\n+\n+fn main() {\n+    println!(\"{}\", xcrate_static::FOO);\n+}"}]}