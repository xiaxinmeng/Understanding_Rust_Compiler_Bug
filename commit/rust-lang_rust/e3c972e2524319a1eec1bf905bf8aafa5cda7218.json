{"sha": "e3c972e2524319a1eec1bf905bf8aafa5cda7218", "node_id": "C_kwDOAAsO6NoAKGUzYzk3MmUyNTI0MzE5YTFlZWMxYmY5MDViZjhhYWZhNWNkYTcyMTg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-02-07T14:08:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-07T14:08:32Z"}, "message": "Rollup merge of #93208 - kellerkindt:wrapping_int_assign_impl, r=m-ou-se\n\nImpl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}Assign<$t> for Wrapping<$t> for rust 1.60.0\n\nTracking issue #93204\n\nThis is about adding basic integer operations to the `Wrapping` type:\n\n```rust\nlet mut value = Wrapping(2u8);\nvalue += 3u8;\nvalue -= 1u8;\nvalue *= 2u8;\nvalue /= 2u8;\nvalue %= 2u8;\nvalue ^= 255u8;\nvalue |= 123u8;\nvalue &= 2u8;\n```\n\nBecause this adds stable impls on a stable type, it runs into the following issue if an `#[unstable(...)]` attribute is used:\n\n```\nan `#[unstable]` annotation here has no effect\nnote: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n```\n\nThis means - if I understood this correctly - the new impls have to be stabilized instantly.\nWhich in turn means, this PR has to kick of an FCP on the tracking issue as well?\n\nThis impl is analog to 1c0dc1810d778bb6fea16aac02cafc5aa2e84b11 #92356 for the `Saturating` type ``@dtolnay``  ``@Mark-Simulacrum``", "tree": {"sha": "23cdcfef415cbec0444e6d85ec8b387ab1d56315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cdcfef415cbec0444e6d85ec8b387ab1d56315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c972e2524319a1eec1bf905bf8aafa5cda7218", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiASfhCRBK7hj4Ov3rIwAAQ40IABDa95uDpXqMm4wmA13cR9Nf\nadziIuJLqKcSrUOlCgNf1QTbjf31jqjnBytJIHjpZfoKUq6NYSolUxzQFwnO+bMd\ntJE/AsbgVG0Nm7Qpug3dBgm+GlS846VcqeFSXMlG5X2naX3r53cHuCduxWbjtyp8\nILxK/6c8ZNvdfImVBvMkKv47vIyV9D2+V8bvOsb1yQViqW4u3XKuir8WJKzbiGco\nXY3SI2T1snagQoy3kOcXujxOiYsM+aE90bVMS5XMPEs27OHo/SRXxa5EPBYLVZpO\neTtBRY0RnL79gZFiGSd4cVzAEW4PjFWTodt7dB6yGxP/KJnNqwYcfKM4vVwTqEk=\n=obXD\n-----END PGP SIGNATURE-----\n", "payload": "tree 23cdcfef415cbec0444e6d85ec8b387ab1d56315\nparent 8219ad4fac6728a87a8fdbf4eb6e4f696e60c230\nparent 14ff58cd862e3dff8d87e445932d37116924aeb2\nauthor Mara Bos <m-ou.se@m-ou.se> 1644242912 +0000\ncommitter GitHub <noreply@github.com> 1644242912 +0000\n\nRollup merge of #93208 - kellerkindt:wrapping_int_assign_impl, r=m-ou-se\n\nImpl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}Assign<$t> for Wrapping<$t> for rust 1.60.0\n\nTracking issue #93204\n\nThis is about adding basic integer operations to the `Wrapping` type:\n\n```rust\nlet mut value = Wrapping(2u8);\nvalue += 3u8;\nvalue -= 1u8;\nvalue *= 2u8;\nvalue /= 2u8;\nvalue %= 2u8;\nvalue ^= 255u8;\nvalue |= 123u8;\nvalue &= 2u8;\n```\n\nBecause this adds stable impls on a stable type, it runs into the following issue if an `#[unstable(...)]` attribute is used:\n\n```\nan `#[unstable]` annotation here has no effect\nnote: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n```\n\nThis means - if I understood this correctly - the new impls have to be stabilized instantly.\nWhich in turn means, this PR has to kick of an FCP on the tracking issue as well?\n\nThis impl is analog to 1c0dc1810d778bb6fea16aac02cafc5aa2e84b11 #92356 for the `Saturating` type ``@dtolnay``  ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c972e2524319a1eec1bf905bf8aafa5cda7218", "html_url": "https://github.com/rust-lang/rust/commit/e3c972e2524319a1eec1bf905bf8aafa5cda7218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c972e2524319a1eec1bf905bf8aafa5cda7218/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8219ad4fac6728a87a8fdbf4eb6e4f696e60c230", "url": "https://api.github.com/repos/rust-lang/rust/commits/8219ad4fac6728a87a8fdbf4eb6e4f696e60c230", "html_url": "https://github.com/rust-lang/rust/commit/8219ad4fac6728a87a8fdbf4eb6e4f696e60c230"}, {"sha": "14ff58cd862e3dff8d87e445932d37116924aeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ff58cd862e3dff8d87e445932d37116924aeb2", "html_url": "https://github.com/rust-lang/rust/commit/14ff58cd862e3dff8d87e445932d37116924aeb2"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "5353d900e76629a33ef568ef1ecbe13291b81a50", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e3c972e2524319a1eec1bf905bf8aafa5cda7218/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c972e2524319a1eec1bf905bf8aafa5cda7218/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=e3c972e2524319a1eec1bf905bf8aafa5cda7218", "patch": "@@ -239,6 +239,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn add_assign(&mut self, other: $t) {\n+                *self = *self + Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Sub for Wrapping<$t> {\n@@ -262,6 +272,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn sub_assign(&mut self, other: $t) {\n+                *self = *self - Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Mul for Wrapping<$t> {\n@@ -285,6 +305,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn mul_assign(&mut self, other: $t) {\n+                *self = *self * Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Div for Wrapping<$t> {\n@@ -308,6 +338,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn div_assign(&mut self, other: $t) {\n+                *self = *self / Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Rem for Wrapping<$t> {\n@@ -331,6 +371,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn rem_assign(&mut self, other: $t) {\n+                *self = *self % Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Not for Wrapping<$t> {\n@@ -367,6 +417,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitxor_assign(&mut self, other: $t) {\n+                *self = *self ^ Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitOr for Wrapping<$t> {\n@@ -390,6 +450,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitor_assign(&mut self, other: $t) {\n+                *self = *self | Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitAnd for Wrapping<$t> {\n@@ -413,6 +483,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitand_assign(&mut self, other: $t) {\n+                *self = *self & Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Neg for Wrapping<$t> {"}]}