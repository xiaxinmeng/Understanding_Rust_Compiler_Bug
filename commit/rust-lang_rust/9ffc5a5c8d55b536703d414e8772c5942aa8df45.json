{"sha": "9ffc5a5c8d55b536703d414e8772c5942aa8df45", "node_id": "C_kwDOAAsO6NoAKDlmZmM1YTVjOGQ1NWI1MzY3MDNkNDE0ZTg3NzJjNTk0MmFhOGRmNDU", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-08-29T20:36:11Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-08-29T20:36:11Z"}, "message": "Fix more parens for `suboptimal_flops` suggs", "tree": {"sha": "b1b38e9528a1d31b0b5554ce117f39fe1d6719ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b38e9528a1d31b0b5554ce117f39fe1d6719ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffc5a5c8d55b536703d414e8772c5942aa8df45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffc5a5c8d55b536703d414e8772c5942aa8df45", "html_url": "https://github.com/rust-lang/rust/commit/9ffc5a5c8d55b536703d414e8772c5942aa8df45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffc5a5c8d55b536703d414e8772c5942aa8df45/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a6891925f8e8bca95c6b71eea8e6becd38b73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a6891925f8e8bca95c6b71eea8e6becd38b73d", "html_url": "https://github.com/rust-lang/rust/commit/26a6891925f8e8bca95c6b71eea8e6becd38b73d"}], "stats": {"total": 172, "additions": 114, "deletions": 58}, "files": [{"sha": "bb50e8fcabbb712c15c4dd0cdae52368fbb8ae23", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -172,7 +172,7 @@ fn check_log_base(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", Sugg::hir(cx, &args[0], \"..\"), method),\n+            format!(\"{}.{}()\", Sugg::hir(cx, &args[0], \"..\").maybe_par(), method),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -263,21 +263,21 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n             (\n                 SUBOPTIMAL_FLOPS,\n                 \"square-root of a number can be computed more efficiently and accurately\",\n-                format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\")),\n+                format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\").maybe_par()),\n             )\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n             (\n                 IMPRECISE_FLOPS,\n                 \"cube-root of a number can be computed more accurately\",\n-                format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\")),\n+                format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\").maybe_par()),\n             )\n         } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n             (\n                 SUBOPTIMAL_FLOPS,\n                 \"exponentiation with integer powers can be computed more efficiently\",\n                 format!(\n                     \"{}.powi({})\",\n-                    Sugg::hir(cx, &args[0], \"..\"),\n+                    Sugg::hir(cx, &args[0], \"..\").maybe_par(),\n                     numeric_literal::format(&exponent.to_string(), None, false)\n                 ),\n             )\n@@ -327,7 +327,7 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n                         \"consider using\",\n                         format!(\n                             \"{}.mul_add({}, {})\",\n-                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &args[0], \"..\").maybe_par(),\n                             Sugg::hir(cx, &args[0], \"..\"),\n                             Sugg::hir(cx, other_addend, \"..\"),\n                         ),\n@@ -418,7 +418,7 @@ fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 \"consider using\",\n                 format!(\n                     \"{}.exp_m1()\",\n-                    Sugg::hir(cx, self_arg, \"..\")\n+                    Sugg::hir(cx, self_arg, \"..\").maybe_par()\n                 ),\n                 Applicability::MachineApplicable,\n             );\n@@ -550,11 +550,11 @@ fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         then {\n             let positive_abs_sugg = (\n                 \"manual implementation of `abs` method\",\n-                format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\").maybe_par()),\n             );\n             let negative_abs_sugg = (\n                 \"manual implementation of negation of `abs` method\",\n-                format!(\"-{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                format!(\"-{}.abs()\", Sugg::hir(cx, body, \"..\").maybe_par()),\n             );\n             let sugg = if is_testing_positive(cx, cond, body) {\n                 if if_expr_positive {\n@@ -621,7 +621,7 @@ fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 expr.span,\n                 \"log base can be expressed more clearly\",\n                 \"consider using\",\n-                format!(\"{}.log({})\", Sugg::hir(cx, largs_self, \"..\"), Sugg::hir(cx, rargs_self, \"..\"),),\n+                format!(\"{}.log({})\", Sugg::hir(cx, largs_self, \"..\").maybe_par(), Sugg::hir(cx, rargs_self, \"..\"),),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "c86a502d15f0967fcf2e448d62f35f0886bdeff9", "filename": "tests/ui/floating_point_exp.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.fixed?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     let x = 2f32;\n     let _ = x.exp_m1();\n     let _ = x.exp_m1() + 2.0;\n+    let _ = (x as f32).exp_m1() + 2.0;\n     // Cases where the lint shouldn't be applied\n     let _ = x.exp() - 2.0;\n     let _ = x.exp() - 1.0 * 2.0;"}, {"sha": "e59589f912a21accd00d9d9306a70b5df937197a", "filename": "tests/ui/floating_point_exp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     let x = 2f32;\n     let _ = x.exp() - 1.0;\n     let _ = x.exp() - 1.0 + 2.0;\n+    let _ = (x as f32).exp() - 1.0 + 2.0;\n     // Cases where the lint shouldn't be applied\n     let _ = x.exp() - 2.0;\n     let _ = x.exp() - 1.0 * 2.0;"}, {"sha": "f84eede19872a2923b409a5d32c3fddb5f03e8b7", "filename": "tests/ui/floating_point_exp.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -13,16 +13,22 @@ LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:13:13\n+  --> $DIR/floating_point_exp.rs:8:13\n+   |\n+LL |     let _ = (x as f32).exp() - 1.0 + 2.0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).exp_m1()`\n+\n+error: (e.pow(x) - 1) can be computed more accurately\n+  --> $DIR/floating_point_exp.rs:14:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:14:13\n+  --> $DIR/floating_point_exp.rs:15:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "4def9300bb7d2f70dae72beb47af6be5586fd03c", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -12,6 +12,7 @@ fn check_log_base() {\n     let _ = x.ln();\n     let _ = x.log2();\n     let _ = x.ln();\n+    let _ = (x as f32).log2();\n \n     let x = 1f64;\n     let _ = x.log2();"}, {"sha": "1e04caa7d2a865070f83c44e465dfe672ea1514a", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -12,6 +12,7 @@ fn check_log_base() {\n     let _ = x.log(std::f32::consts::E);\n     let _ = x.log(TWO);\n     let _ = x.log(E);\n+    let _ = (x as f32).log(2f32);\n \n     let x = 1f64;\n     let _ = x.log(2f64);"}, {"sha": "89800a13a6ecc75ed966bc41d57b090427b0fc50", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -31,144 +31,150 @@ LL |     let _ = x.log(E);\n    |             ^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:17:13\n+  --> $DIR/floating_point_log.rs:15:13\n+   |\n+LL |     let _ = (x as f32).log(2f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).log2()`\n+\n+error: logarithm for bases 2, 10 and e can be computed more accurately\n+  --> $DIR/floating_point_log.rs:18:13\n    |\n LL |     let _ = x.log(2f64);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:18:13\n+  --> $DIR/floating_point_log.rs:19:13\n    |\n LL |     let _ = x.log(10f64);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:19:13\n+  --> $DIR/floating_point_log.rs:20:13\n    |\n LL |     let _ = x.log(std::f64::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:24:13\n+  --> $DIR/floating_point_log.rs:25:13\n    |\n LL |     let _ = (1f32 + 2.).ln();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n    |\n    = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:25:13\n+  --> $DIR/floating_point_log.rs:26:13\n    |\n LL |     let _ = (1f32 + 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:26:13\n+  --> $DIR/floating_point_log.rs:27:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:27:13\n+  --> $DIR/floating_point_log.rs:28:13\n    |\n LL |     let _ = (1.0 + x / 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:28:13\n+  --> $DIR/floating_point_log.rs:29:13\n    |\n LL |     let _ = (1.0 + x.powi(3)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:29:13\n+  --> $DIR/floating_point_log.rs:30:13\n    |\n LL |     let _ = (1.0 + x.powi(3) / 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(3) / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:30:13\n+  --> $DIR/floating_point_log.rs:31:13\n    |\n LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(std::f32::consts::E - 1.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:31:13\n+  --> $DIR/floating_point_log.rs:32:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:32:13\n+  --> $DIR/floating_point_log.rs:33:13\n    |\n LL |     let _ = (x.powi(3) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:33:13\n+  --> $DIR/floating_point_log.rs:34:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:34:13\n+  --> $DIR/floating_point_log.rs:35:13\n    |\n LL |     let _ = (x / 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:42:13\n+  --> $DIR/floating_point_log.rs:43:13\n    |\n LL |     let _ = (1f64 + 2.).ln();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:43:13\n+  --> $DIR/floating_point_log.rs:44:13\n    |\n LL |     let _ = (1f64 + 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:44:13\n+  --> $DIR/floating_point_log.rs:45:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:45:13\n+  --> $DIR/floating_point_log.rs:46:13\n    |\n LL |     let _ = (1.0 + x / 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:46:13\n+  --> $DIR/floating_point_log.rs:47:13\n    |\n LL |     let _ = (1.0 + x.powi(3)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:47:13\n+  --> $DIR/floating_point_log.rs:48:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:48:13\n+  --> $DIR/floating_point_log.rs:49:13\n    |\n LL |     let _ = (x.powi(3) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:49:13\n+  --> $DIR/floating_point_log.rs:50:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:50:13\n+  --> $DIR/floating_point_log.rs:51:13\n    |\n LL |     let _ = (x / 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "936462f94066f681284506f22daacd4a6706dc84", "filename": "tests/ui/floating_point_logbase.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.fixed?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     let x = 3f32;\n     let y = 5f32;\n     let _ = x.log(y);\n+    let _ = (x as f32).log(y);\n     let _ = x.log(y);\n     let _ = x.log(y);\n     let _ = x.log(y);"}, {"sha": "0b56fa8fa41fa3112f63adfeac48176a2909c79e", "filename": "tests/ui/floating_point_logbase.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     let x = 3f32;\n     let y = 5f32;\n     let _ = x.ln() / y.ln();\n+    let _ = (x as f32).ln() / y.ln();\n     let _ = x.log2() / y.log2();\n     let _ = x.log10() / y.log10();\n     let _ = x.log(5f32) / y.log(5f32);"}, {"sha": "384e3554cbbe1335f3707ebc03eb52b1015bbdee", "filename": "tests/ui/floating_point_logbase.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_logbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.stderr?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -9,20 +9,26 @@ LL |     let _ = x.ln() / y.ln();\n error: log base can be expressed more clearly\n   --> $DIR/floating_point_logbase.rs:8:13\n    |\n+LL |     let _ = (x as f32).ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).log(y)`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:9:13\n+   |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:9:13\n+  --> $DIR/floating_point_logbase.rs:10:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:10:13\n+  --> $DIR/floating_point_logbase.rs:11:13\n    |\n LL |     let _ = x.log(5f32) / y.log(5f32);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "7efe10a10f9e9809db283ef8bf73378a16bbe31a", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -11,10 +11,13 @@ fn main() {\n     let _ = (-3.1f32).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n+    let _ = (x as f32).cbrt();\n     let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(16_777_215);\n     let _ = x.powi(-16_777_215);\n+    let _ = (x as f32).powi(-16_777_215);\n+    let _ = (x as f32).powi(3);\n     // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);"}, {"sha": "445080417f2ed8c2a0e5b7f1f1a799286077c2f8", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -11,10 +11,13 @@ fn main() {\n     let _ = std::f32::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n+    let _ = (x as f32).powf(1.0 / 3.0);\n     let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(16_777_215.0);\n     let _ = x.powf(-16_777_215.0);\n+    let _ = (x as f32).powf(-16_777_215.0);\n+    let _ = (x as f32).powf(3.0);\n     // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);"}, {"sha": "6ee696e6ada5ffda8d5580258d2ec7074bcfee3a", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -50,101 +50,119 @@ LL |     let _ = x.powf(1.0 / 3.0);\n    |\n    = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n-error: exponentiation with integer powers can be computed more efficiently\n+error: cube-root of a number can be computed more accurately\n   --> $DIR/floating_point_powf.rs:14:13\n    |\n+LL |     let _ = (x as f32).powf(1.0 / 3.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).cbrt()`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:15:13\n+   |\n LL |     let _ = x.powf(3.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:15:13\n+  --> $DIR/floating_point_powf.rs:16:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:16:13\n+  --> $DIR/floating_point_powf.rs:17:13\n    |\n LL |     let _ = x.powf(16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(16_777_215)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:17:13\n+  --> $DIR/floating_point_powf.rs:18:13\n    |\n LL |     let _ = x.powf(-16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-16_777_215)`\n \n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:19:13\n+   |\n+LL |     let _ = (x as f32).powf(-16_777_215.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).powi(-16_777_215)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:20:13\n+   |\n+LL |     let _ = (x as f32).powf(3.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).powi(3)`\n+\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:25:13\n+  --> $DIR/floating_point_powf.rs:28:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:26:13\n+  --> $DIR/floating_point_powf.rs:29:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:27:13\n+  --> $DIR/floating_point_powf.rs:30:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:28:13\n+  --> $DIR/floating_point_powf.rs:31:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:29:13\n+  --> $DIR/floating_point_powf.rs:32:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:30:13\n+  --> $DIR/floating_point_powf.rs:33:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:31:13\n+  --> $DIR/floating_point_powf.rs:34:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:32:13\n+  --> $DIR/floating_point_powf.rs:35:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:33:13\n+  --> $DIR/floating_point_powf.rs:36:13\n    |\n LL |     let _ = x.powf(3.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:34:13\n+  --> $DIR/floating_point_powf.rs:37:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:35:13\n+  --> $DIR/floating_point_powf.rs:38:13\n    |\n LL |     let _ = x.powf(-2_147_483_648.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-2_147_483_648)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:36:13\n+  --> $DIR/floating_point_powf.rs:39:13\n    |\n LL |     let _ = x.powf(2_147_483_647.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2_147_483_647)`\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "5758db7c6c82d90506cc76a561f5d3ac18dfe021", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     let y = 4f32;\n     let _ = x.mul_add(x, y);\n     let _ = y.mul_add(y, x);\n+    let _ = (y as f32).mul_add(y as f32, x);\n     let _ = x.mul_add(x, y).sqrt();\n     let _ = y.mul_add(y, x).sqrt();\n     // Cases where the lint shouldn't be applied"}, {"sha": "5926bf1b0004265c96a82b53a9e8abaefcdedcc2", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     let y = 4f32;\n     let _ = x.powi(2) + y;\n     let _ = x + y.powi(2);\n+    let _ = x + (y as f32).powi(2);\n     let _ = (x.powi(2) + y).sqrt();\n     let _ = (x + y.powi(2)).sqrt();\n     // Cases where the lint shouldn't be applied"}, {"sha": "a3c74544212b22e1f082e7d4938b14c60775f062", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ffc5a5c8d55b536703d414e8772c5942aa8df45/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=9ffc5a5c8d55b536703d414e8772c5942aa8df45", "patch": "@@ -15,14 +15,20 @@ LL |     let _ = x + y.powi(2);\n error: multiply and add expressions can be calculated more efficiently and accurately\n   --> $DIR/floating_point_powi.rs:11:13\n    |\n+LL |     let _ = x + (y as f32).powi(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y as f32).mul_add(y as f32, x)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:12:13\n+   |\n LL |     let _ = (x.powi(2) + y).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:12:13\n+  --> $DIR/floating_point_powi.rs:13:13\n    |\n LL |     let _ = (x + y.powi(2)).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}