{"sha": "10c997a746178085b6b447a76e237dd08c5446fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzk5N2E3NDYxNzgwODViNmI0NDdhNzZlMjM3ZGQwOGM1NDQ2ZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T23:38:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T23:38:07Z"}, "message": "rustc: Get rid of the impl_map in the encoder", "tree": {"sha": "ed249f782faeaefb4db593c00d6db64d600ea5e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed249f782faeaefb4db593c00d6db64d600ea5e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c997a746178085b6b447a76e237dd08c5446fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c997a746178085b6b447a76e237dd08c5446fa", "html_url": "https://github.com/rust-lang/rust/commit/10c997a746178085b6b447a76e237dd08c5446fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c997a746178085b6b447a76e237dd08c5446fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ed94a56744c0ed4056c22da297d84222f4327f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed94a56744c0ed4056c22da297d84222f4327f2", "html_url": "https://github.com/rust-lang/rust/commit/1ed94a56744c0ed4056c22da297d84222f4327f2"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "02fb03efe9fd511cb4a770d7cc01c8f8a91a5e2b", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10c997a746178085b6b447a76e237dd08c5446fa/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c997a746178085b6b447a76e237dd08c5446fa/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=10c997a746178085b6b447a76e237dd08c5446fa", "patch": "@@ -262,32 +262,26 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n     encode_family(ebml_w, 'm');\n     encode_name(ebml_w, name);\n     debug!{\"(encoding info for module) encoding info for module ID %d\", id};\n-    // the impl map contains ref_ids\n-    let impls = ecx.impl_map(id);\n-    for impls.each |i| {\n-        let (ident, did) = i;\n-        debug!{\"(encoding info for module) ... encoding impl %s (%?/%?), \\\n-                exported? %?\",\n-               *ident,\n-               did,\n-               ast_map::node_id_to_str(ecx.tcx.items, did.node),\n-               ast_util::is_exported(ident, md)};\n-\n-        ebml_w.start_tag(tag_mod_impl);\n-        match ecx.tcx.items.find(did.node) {\n-          some(ast_map::node_item(it@@{node: cl@item_class(*),_},_)) => {\n-        /* If did stands for a trait\n-        ref, we need to map it to its parent class */\n-            ebml_w.wr_str(def_to_str(local_def(it.id)));\n-          }\n-          _ => {\n-            // Must be a re-export, then!\n-            // ...or a trait ref\n-            ebml_w.wr_str(def_to_str(did));\n-          }\n-        };\n-        ebml_w.end_tag();\n-    } // for\n+\n+    // Encode info about all the module children.\n+    for md.items.each |item| {\n+        match item.node {\n+            item_impl(*) | item_class(*) => {\n+                let (ident, did) = (item.ident, item.id);\n+                debug!{\"(encoding info for module) ... encoding impl %s \\\n+                        (%?/%?), exported? %?\",\n+                       *ident,\n+                       did,\n+                       ast_map::node_id_to_str(ecx.tcx.items, did),\n+                       ast_util::is_exported(ident, md)};\n+\n+                ebml_w.start_tag(tag_mod_impl);\n+                ebml_w.wr_str(def_to_str(local_def(did)));\n+                ebml_w.end_tag();\n+            }\n+            _ => {} // XXX: Encode these too.\n+        }\n+    }\n \n     encode_path(ebml_w, path, ast_map::path_mod(name));\n "}]}