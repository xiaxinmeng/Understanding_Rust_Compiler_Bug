{"sha": "c485301d210872c38fe840c58d27d97c4e97d7a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODUzMDFkMjEwODcyYzM4ZmU4NDBjNThkMjdkOTdjNGU5N2Q3YTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-03T01:39:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-03T01:39:47Z"}, "message": "Update libuv.", "tree": {"sha": "855b61543430b2488e4284e11f2ce83d971e1d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855b61543430b2488e4284e11f2ce83d971e1d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c485301d210872c38fe840c58d27d97c4e97d7a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c485301d210872c38fe840c58d27d97c4e97d7a5", "html_url": "https://github.com/rust-lang/rust/commit/c485301d210872c38fe840c58d27d97c4e97d7a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c485301d210872c38fe840c58d27d97c4e97d7a5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6784b18303741ff7713950957f7250616d31aeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6784b18303741ff7713950957f7250616d31aeab", "html_url": "https://github.com/rust-lang/rust/commit/6784b18303741ff7713950957f7250616d31aeab"}], "stats": {"total": 5043, "additions": 1403, "deletions": 3640}, "files": [{"sha": "d750f8eb5b7813df48138cbc7d5aeb04e772cba7", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -3,4 +3,4 @@\n \turl = git://github.com/brson/llvm.git\n [submodule \"src/libuv\"]\n \tpath = src/libuv\n-\turl = git://github.com/joyent/libuv\n+\turl = git://github.com/graydon/libuv.git"}, {"sha": "10770c07b748fd0244b4ba3645c0bad1feaa7a51", "filename": "configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -467,6 +467,8 @@ cd ${CFG_SRC_DIR}\n \n if [ -z $CFG_DISABLE_MANAGE_SUBMODULES ]\n then\n+msg \"git: submodule sync\"\n+\"${CFG_GIT}\" submodule sync --quiet\n SUBMODULE_STATUS=$(\"${CFG_GIT}\" submodule status)\n NEED_INIT_COUNT=$(echo \"$SUBMODULE_STATUS\" | grep -c \"^-\")\n NEED_UPDATE_COUNT=$(echo \"$SUBMODULE_STATUS\" | grep -c \"^+\")"}, {"sha": "002fef0390ab81294d53eff840ed64835a1036b2", "filename": "mk/libuv/ia32/mac/Makefile", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -147,7 +148,7 @@ cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n@@ -162,6 +163,9 @@ cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n \n+quiet_cmd_infoplist = INFOPLIST $@\n+cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n+\n quiet_cmd_touch = TOUCH $@\n cmd_touch = touch $@\n \n@@ -262,8 +266,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -343,9 +347,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "6aca32e6e327c2dd036a7e2855ada04ae340b32c", "filename": "mk/libuv/ia32/mac/Makefile-e", "status": "removed", "additions": 0, "deletions": 375, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,375 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_objc = CXX($(TOOLSET)) $@\n-cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n-cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# Commands for precompiled header files.\n-quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n-cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n-cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n-cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# gyp-mac-tool is written next to the root Makefile by gyp.\n-# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n-# already.\n-quiet_cmd_mac_tool = MACTOOL $(4) $<\n-cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n-\n-quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n-cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = LIBTOOL-STATIC $@\n-cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n-\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): Find out and document the difference between shared_library and\n-# loadable_module on mac.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n-# -bundle -single_module here (for osmesa.so).\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "bd4059840ea8a6efa2825d0f5ea849e60f15b16b", "filename": "mk/libuv/ia32/mac/gyp-mac-tool", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n # Generated by gyp. Do not edit.\n # Copyright (c) 2011 Google Inc. All rights reserved.\n # Use of this source code is governed by a BSD-style license that can be\n@@ -17,10 +17,12 @@ import string\n import subprocess\n import sys\n \n+\n def main(args):\n   executor = MacTool()\n   executor.Dispatch(args)\n \n+\n class MacTool(object):\n   \"\"\"This class performs all the Mac tooling steps. The methods can either be\n   executed directly, or dispatched from an argument list.\"\"\"\n@@ -74,12 +76,14 @@ class MacTool(object):\n     if not plist:\n       return\n \n+    # Only create PkgInfo for executable types.\n+    package_type = plist['CFBundlePackageType']\n+    if package_type != 'APPL':\n+      return\n+\n     # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If either is missing, four\n+    # and bundle signature, each four characters. If that is missing, four\n     # '?' characters are used instead.\n-    package_type = plist['CFBundlePackageType']\n-    if len(package_type) != 4:\n-      package_type = '?' * 4\n     signature_code = plist['CFBundleSignature']\n     if len(signature_code) != 4:\n       signature_code = '?' * 4\n@@ -184,5 +188,6 @@ class MacTool(object):\n     else:\n       return None\n \n+\n if __name__ == '__main__':\n   sys.exit(main(sys.argv[1:]))"}, {"sha": "b8cc0a1c483ec1c92b32eced1e061ec00b73d65d", "filename": "mk/libuv/ia32/mac/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 68, "deletions": 16, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,31 +2,77 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -35,6 +81,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -53,10 +100,10 @@ $(OBJS): | $(builddir)/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -73,7 +120,12 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Debug := -Wl,-search_paths_first \\\n+\t-arch i386 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -Wl,-search_paths_first \\\n+\t-arch i386 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "be0c2c60856339d4ebd5ffe72969bab27fb998b2", "filename": "mk/libuv/ia32/mac/src/libuv/run-tests.target.mk", "status": "modified", "additions": 77, "deletions": 16, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,42 +2,91 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -49,12 +98,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -69,13 +121,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -87,10 +143,10 @@ $(OBJS): | $(builddir)/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -107,7 +163,12 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Debug := -Wl,-search_paths_first \\\n+\t-arch i386 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -Wl,-search_paths_first \\\n+\t-arch i386 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "98386060982485385f87aab97f6a571ef67e2bc5", "filename": "mk/libuv/ia32/mac/src/libuv/uv.target.mk", "status": "modified", "additions": 73, "deletions": 16, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,34 +2,87 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n \t'-DEIO_STACKSIZE=262144' \\\n \t'-DHAVE_CONFIG_H' \\\n \t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch i386 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/unix/ev \\\n@@ -91,6 +144,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n@@ -103,10 +157,10 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -123,7 +177,10 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Debug := -arch i386 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -arch i386 \\\n \t-L$(builddir)\n \n LIBS := -lm"}, {"sha": "4369fdb9a23b3f2481d18b80fad86cac7405031a", "filename": "mk/libuv/ia32/unix/Makefile", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -252,8 +253,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -321,9 +322,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "ffbb106422138b1974a265eda4ee6a62030cb5d8", "filename": "mk/libuv/ia32/unix/Makefile-e", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,353 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25b01014e79d4d77388813a41830e8d1ad32d84a", "filename": "mk/libuv/ia32/unix/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,21 +2,57 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -25,6 +61,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -43,8 +80,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -61,7 +98,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lrt\n "}, {"sha": "a2fe0d2065e230c637dd3c17a8cb946dfad41850", "filename": "mk/libuv/ia32/unix/src/libuv/run-tests.target.mk", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,32 +2,71 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -39,12 +78,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -59,13 +101,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -77,8 +123,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -95,7 +141,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lrt\n "}, {"sha": "60e0e8fd2def64a48356d5b48390bab1906ae4a5", "filename": "mk/libuv/ia32/unix/src/libuv/uv.target.mk", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,30 +2,79 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n \t'-DEIO_STACKSIZE=262144' \\\n \t'-DHAVE_CONFIG_H' \\\n \t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread \\\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter \\\n+\t-g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_linux\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n \t-g \\\n \t--std=gnu89 \\\n \t-pedantic \\\n \t-Wall \\\n \t-Wextra \\\n-\t-Wno-unused-parameter\n+\t-Wno-unused-parameter \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Release := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/unix/ev \\\n@@ -87,6 +136,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n@@ -98,8 +148,8 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -116,7 +166,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lm\n "}, {"sha": "8a6222228d891cc85a085544f4e2230a695cff68", "filename": "mk/libuv/ia32/win/Makefile", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -252,8 +253,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -321,9 +322,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "4c05b46dcbfea12f962a5ecaf09c44ec060c3ba9", "filename": "mk/libuv/ia32/win/Makefile-e", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,353 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25bf58f854886b60bb13d8e58485cddd463f426e", "filename": "mk/libuv/ia32/win/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,18 +2,42 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := \n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -22,6 +46,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -40,8 +65,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -58,10 +83,14 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n+\t-lws2_32.lib \\\n+\t-lpsapi.lib \\\n+\t-liphlpapi.lib\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)"}, {"sha": "51b62f7a3e2d58f64a4e3c2f9b1e33b874894567", "filename": "mk/libuv/ia32/win/src/libuv/run-tests.target.mk", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,29 +2,56 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := \n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -36,12 +63,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -56,13 +86,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -74,8 +108,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -92,10 +126,14 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n+\t-lws2_32.lib \\\n+\t-lpsapi.lib \\\n+\t-liphlpapi.lib\n \n $(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-tests: LIBS := $(LIBS)"}, {"sha": "53576a0f93570eec5f0ad4cbe4d217315332edd9", "filename": "mk/libuv/ia32/win/src/libuv/uv.target.mk", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,21 +2,53 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0502' \\\n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n \t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE'\n+\t'-D_GNU_SOURCE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_win32\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/ares/config_win32\n@@ -79,13 +111,13 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n@@ -98,8 +130,8 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -116,7 +148,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := \n "}, {"sha": "00b34e4bae5d953c21aad476ee81a42fe75abf67", "filename": "mk/libuv/ia32/win/src/libuv/uv.target.mk.bak", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk.bak", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk.bak", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk.bak?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -0,0 +1,167 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Debug := -g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := \n+\n+INCS_Debug := -I$(srcdir)\\src\\libuv\\include \\\n+\t-I$(srcdir)\\src\\libuv\\include\\uv-private \\\n+\t-I$(srcdir)\\src\\libuv\\src \\\n+\t-I$(srcdir)\\src\\libuv\\src\\ares\\config_win32\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)\\src\\libuv\\include \\\n+\t-I$(srcdir)\\src\\libuv\\include\\uv-private \\\n+\t-I$(srcdir)\\src\\libuv\\src \\\n+\t-I$(srcdir)\\src\\libuv\\src\\ares\\config_win32\n+\n+OBJS := $(obj).target\\$(TARGET)\\src\\libuv\\src\\uv-common.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_cancel.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares__close_sockets.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_data.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_destroy.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_expand_name.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_expand_string.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_fds.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_free_hostent.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_free_string.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_gethostbyaddr.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_gethostbyname.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares__get_hostent.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_getnameinfo.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_getopt.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_getsock.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_init.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_library_init.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_llist.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_mkquery.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_nowarn.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_options.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_aaaa_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_a_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_mx_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_ns_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_ptr_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_srv_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_parse_txt_reply.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_process.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_query.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares__read_line.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_search.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_send.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_strcasecmp.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_strdup.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_strerror.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_timeout.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares__timeval.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_version.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_writev.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\bitncmp.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\inet_net_pton.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\inet_ntop.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\windows_port.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_getenv.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\ares\\ares_platform.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\async.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\cares.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\core.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\dl.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\error.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\fs.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\fs-event.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\getaddrinfo.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\handle.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\loop-watcher.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\pipe.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\thread.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\process.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\req.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\stream.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\tcp.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\tty.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\threadpool.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\timer.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\udp.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\util.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\winapi.o \\\n+\t$(obj).target\\$(TARGET)\\src\\libuv\\src\\win\\winsock.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)\\$(TARGET)\\%.o: $(srcdir)\\%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)\\$(TARGET)\\%.o: $(obj).$(TOOLSET)\\%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)\\$(TARGET)\\%.o: $(obj)\\%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n+\n+LIBS := \n+\n+$(obj).target\\src\\libuv\\libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target\\src\\libuv\\libuv.a: LIBS := $(LIBS)\n+$(obj).target\\src\\libuv\\libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target\\src\\libuv\\libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target\\src\\libuv\\libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target\\src\\libuv\\libuv.a\n+"}, {"sha": "98a175dd3f0201bde67cda38156647804f4694f7", "filename": "mk/libuv/x86_64/freebsd/Makefile", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,353 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= lockf $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=freebsd\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "333d5e04a2310ac30a9e71fedb8b6cdab5c78e51", "filename": "mk/libuv/x86_64/freebsd/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,83 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := \n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "7eb08d192d1bb85fc48cd7924a093d4e72cffa3c", "filename": "mk/libuv/x86_64/freebsd/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,117 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := \n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "3842bae54b951d4e4d977d3f6f984e92be64f166", "filename": "mk/libuv/x86_64/freebsd/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/unix/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "f1b02252a037e0804f7206524cbe8e56d8a87445", "filename": "mk/libuv/x86_64/freebsd/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,138 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_freebsd.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_freebsd.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_freebsd\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/freebsd.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := -lm\n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "bae2ca0016bfdf2a39fe09977163c0590959e9af", "filename": "mk/libuv/x86_64/mac/Makefile", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -147,7 +148,7 @@ cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n@@ -162,6 +163,9 @@ cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n \n+quiet_cmd_infoplist = INFOPLIST $@\n+cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n+\n quiet_cmd_touch = TOUCH $@\n cmd_touch = touch $@\n \n@@ -262,8 +266,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -343,9 +347,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "44d99bab1d0714cd73f8f21bab6987e6701398fd", "filename": "mk/libuv/x86_64/mac/Makefile-e", "status": "removed", "additions": 0, "deletions": 375, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,375 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_objc = CXX($(TOOLSET)) $@\n-cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n-cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# Commands for precompiled header files.\n-quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n-cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n-cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n-cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# gyp-mac-tool is written next to the root Makefile by gyp.\n-# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n-# already.\n-quiet_cmd_mac_tool = MACTOOL $(4) $<\n-cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n-\n-quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n-cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = LIBTOOL-STATIC $@\n-cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n-\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): Find out and document the difference between shared_library and\n-# loadable_module on mac.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n-# -bundle -single_module here (for osmesa.so).\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "bd4059840ea8a6efa2825d0f5ea849e60f15b16b", "filename": "mk/libuv/x86_64/mac/gyp-mac-tool", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n # Generated by gyp. Do not edit.\n # Copyright (c) 2011 Google Inc. All rights reserved.\n # Use of this source code is governed by a BSD-style license that can be\n@@ -17,10 +17,12 @@ import string\n import subprocess\n import sys\n \n+\n def main(args):\n   executor = MacTool()\n   executor.Dispatch(args)\n \n+\n class MacTool(object):\n   \"\"\"This class performs all the Mac tooling steps. The methods can either be\n   executed directly, or dispatched from an argument list.\"\"\"\n@@ -74,12 +76,14 @@ class MacTool(object):\n     if not plist:\n       return\n \n+    # Only create PkgInfo for executable types.\n+    package_type = plist['CFBundlePackageType']\n+    if package_type != 'APPL':\n+      return\n+\n     # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If either is missing, four\n+    # and bundle signature, each four characters. If that is missing, four\n     # '?' characters are used instead.\n-    package_type = plist['CFBundlePackageType']\n-    if len(package_type) != 4:\n-      package_type = '?' * 4\n     signature_code = plist['CFBundleSignature']\n     if len(signature_code) != 4:\n       signature_code = '?' * 4\n@@ -184,5 +188,6 @@ class MacTool(object):\n     else:\n       return None\n \n+\n if __name__ == '__main__':\n   sys.exit(main(sys.argv[1:]))"}, {"sha": "f5930c9dc564d3d53dedece6866cadf828f6aeb9", "filename": "mk/libuv/x86_64/mac/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 68, "deletions": 16, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,31 +2,77 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch x86_64\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -35,6 +81,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -53,10 +100,10 @@ $(OBJS): | $(builddir)/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -73,7 +120,12 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch x86_64 \\\n+LDFLAGS_Debug := -Wl,-search_paths_first \\\n+\t-arch x86_64 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -Wl,-search_paths_first \\\n+\t-arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "64d150f24fc1344ac0cfd3bca8ff2647279f749f", "filename": "mk/libuv/x86_64/mac/src/libuv/run-benchmarks.target.mk-e", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,97 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch i386\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "4694c7cfd4d6ad45c7dfeb6a8a059bb241257cc0", "filename": "mk/libuv/x86_64/mac/src/libuv/run-tests.target.mk", "status": "modified", "additions": 77, "deletions": 16, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,42 +2,91 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch x86_64\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -49,12 +98,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -69,13 +121,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -87,10 +143,10 @@ $(OBJS): | $(builddir)/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -107,7 +163,12 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch x86_64 \\\n+LDFLAGS_Debug := -Wl,-search_paths_first \\\n+\t-arch x86_64 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -Wl,-search_paths_first \\\n+\t-arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "5a5730b0f65845c7386d0f6c1565aa70b7bf4dfd", "filename": "mk/libuv/x86_64/mac/src/libuv/run-tests.target.mk-e", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,131 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch i386\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "385a64c9f538b732f45b8efa955c9272875f80e1", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.target.mk", "status": "modified", "additions": 73, "deletions": 16, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,34 +2,87 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n \t'-DEIO_STACKSIZE=262144' \\\n \t'-DHAVE_CONFIG_H' \\\n \t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n+CFLAGS_Debug := -Os \\\n \t-gdwarf-2 \\\n-\t-arch x86_64\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n \n # Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n+CFLAGS_OBJC_Debug := \n \n # Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n+CFLAGS_OBJCC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -Os \\\n+\t-gdwarf-2 \\\n+\t-fvisibility=hidden \\\n+\t-Wnewline-eof \\\n+\t-arch x86_64 \\\n+\t-fno-strict-aliasing \\\n+\t-Wall \\\n+\t-Wendif-labels \\\n+\t-W \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions \\\n+\t-fvisibility-inlines-hidden \\\n+\t-fno-threadsafe-statics\n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Release := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/unix/ev \\\n@@ -91,6 +144,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n@@ -103,10 +157,10 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -123,7 +177,10 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch x86_64 \\\n+LDFLAGS_Debug := -arch x86_64 \\\n+\t-L$(builddir)\n+\n+LDFLAGS_Release := -arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -lm"}, {"sha": "28f911f4dc70f8d331cc4f1e60024ddf57ee915e", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.target.mk-e", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,145 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch i386\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -lm\n-\n-$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/libuv.a: LIBS := $(LIBS)\n-$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n-$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(builddir)/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(builddir)/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "d71b06661c8da6be1b12e3b55c6e4f5bc6cb5c56", "filename": "mk/libuv/x86_64/unix/Makefile", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -252,8 +253,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -321,9 +322,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "8197dff75755033cb504f687246742337da2b6f9", "filename": "mk/libuv/x86_64/unix/Makefile-e", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,353 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25b01014e79d4d77388813a41830e8d1ad32d84a", "filename": "mk/libuv/x86_64/unix/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,21 +2,57 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -25,6 +61,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -43,8 +80,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -61,7 +98,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lrt\n "}, {"sha": "a2fe0d2065e230c637dd3c17a8cb946dfad41850", "filename": "mk/libuv/x86_64/unix/src/libuv/run-tests.target.mk", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,32 +2,71 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -39,12 +78,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -59,13 +101,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -77,8 +123,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -95,7 +141,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lrt\n "}, {"sha": "60e0e8fd2def64a48356d5b48390bab1906ae4a5", "filename": "mk/libuv/x86_64/unix/src/libuv/uv.target.mk", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,30 +2,79 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n \t'-D_FILE_OFFSET_BITS=64' \\\n \t'-D_GNU_SOURCE' \\\n \t'-DEIO_STACKSIZE=262144' \\\n \t'-DHAVE_CONFIG_H' \\\n \t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n \n # Flags passed to all source files.\n-CFLAGS_Default := -pthread \\\n+CFLAGS_Debug := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter \\\n+\t-g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_linux\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -pthread \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-pthread \\\n+\t-fvisibility=hidden \\\n \t-g \\\n \t--std=gnu89 \\\n \t-pedantic \\\n \t-Wall \\\n \t-Wextra \\\n-\t-Wno-unused-parameter\n+\t-Wno-unused-parameter \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Release := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/unix/ev \\\n@@ -87,6 +136,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n@@ -98,8 +148,8 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -116,7 +166,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := -pthread\n+\n+LDFLAGS_Release := -pthread\n \n LIBS := -lm\n "}, {"sha": "d40391e0f8988659a5558bd22cf560c4745dbf90", "filename": "mk/libuv/x86_64/win/Makefile", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -8,6 +8,7 @@ MAKEFLAGS=-r\n \n # The source directory tree.\n srcdir := ../../../..\n+abs_srcdir := $(abspath $(srcdir))\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -20,7 +21,7 @@ else\n endif\n \n # Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n+BUILDTYPE ?= Debug\n \n # Directory all our build output goes into.\n # Note that this must be two directories beneath src/ for unit tests to pass,\n@@ -252,8 +253,8 @@ $(if $(or $(command_changed),$(prereq_changed)),\n )\n endef\n \n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n .PHONY: all\n all:\n \n@@ -321,9 +322,9 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n   include src/libuv/uv.target.mk\n endif\n \n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "d7c20772b7a10f14c2813caa0d178e1165df929f", "filename": "mk/libuv/x86_64/win/Makefile-e", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/6784b18303741ff7713950957f7250616d31aeab/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e?ref=6784b18303741ff7713950957f7250616d31aeab", "patch": "@@ -1,353 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Default\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare \"all\" target first so it is the default, even though we don't have the\n-# deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n-Makefile: $(srcdir)/src/libuv/uv.gyp\n-\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25bf58f854886b60bb13d8e58485cddd463f426e", "filename": "mk/libuv/x86_64/win/src/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,18 +2,42 @@\n \n TOOLSET := target\n TARGET := run-benchmarks\n-DEFS_Default := \n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n@@ -22,6 +46,7 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n@@ -40,8 +65,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -58,10 +83,14 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n+\t-lws2_32.lib \\\n+\t-lpsapi.lib \\\n+\t-liphlpapi.lib\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)"}, {"sha": "51b62f7a3e2d58f64a4e3c2f9b1e33b874894567", "filename": "mk/libuv/x86_64/win/src/libuv/run-tests.target.mk", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,29 +2,56 @@\n \n TOOLSET := target\n TARGET := run-tests\n-DEFS_Default := \n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n \n OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n@@ -36,12 +63,15 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n@@ -56,13 +86,17 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n \t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n \n # Add to the list of files we specially track dependencies for.\n@@ -74,8 +108,8 @@ $(OBJS): | $(obj).target/src/libuv/libuv.a\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -92,10 +126,14 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n+\t-lws2_32.lib \\\n+\t-lpsapi.lib \\\n+\t-liphlpapi.lib\n \n $(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-tests: LIBS := $(LIBS)"}, {"sha": "53576a0f93570eec5f0ad4cbe4d217315332edd9", "filename": "mk/libuv/x86_64/win/src/libuv/uv.target.mk", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,21 +2,53 @@\n \n TOOLSET := target\n TARGET := uv\n-DEFS_Default := '-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0502' \\\n+DEFS_Debug := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n \t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE'\n+\t'-D_GNU_SOURCE' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG'\n \n # Flags passed to all source files.\n-CFLAGS_Default := \n+CFLAGS_Debug := -g \\\n+\t-O0\n \n # Flags passed to only C files.\n-CFLAGS_C_Default := \n+CFLAGS_C_Debug := \n \n # Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n+CFLAGS_CC_Debug := \n \n-INCS_Default := -I$(srcdir)/src/libuv/include \\\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_win32\n+\n+DEFS_Release := '-DWIN32' \\\n+\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n+\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0600' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release := -O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := \n+\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n \t-I$(srcdir)/src/libuv/include/uv-private \\\n \t-I$(srcdir)/src/libuv/src \\\n \t-I$(srcdir)/src/libuv/src/ares/config_win32\n@@ -79,13 +111,13 @@ OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/thread.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/threads.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n \t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n@@ -98,8 +130,8 @@ all_deps += $(OBJS)\n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n $(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n \n # Suffix rules, putting all outputs into $(obj).\n \n@@ -116,7 +148,9 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := \n+LDFLAGS_Debug := \n+\n+LDFLAGS_Release := \n \n LIBS := \n "}, {"sha": "504377d5dfce2a48c1454adb2760e2670350e25d", "filename": "mk/rt.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -116,16 +116,16 @@ endif\n \n ifeq ($$(CFG_WINDOWSY), 1)\n   LIBUV_OSTYPE_$(1) := win\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/libuv.a\n else ifeq ($(CFG_OSTYPE), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := freebsd\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n else\n   LIBUV_OSTYPE_$(1) := unix\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n endif\n \n RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n@@ -172,6 +172,7 @@ $$(LIBUV_LIB_$(1)): $$(wildcard \\\n \t\tCC=\"$$(CFG_GCCISH_CROSS)$$(CC)\" \\\n \t\tCXX=\"$$(CFG_GCCISH_CROSS)$$(CXX)\" \\\n \t\tAR=\"$$(CFG_GCCISH_CROSS)$$(AR)\" \\\n+\t\tBUILDTYPE=Release \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n \t\tV=$$(VERBOSE) FLOCK= uv\n "}, {"sha": "e64ed4f30597c036aa07884c95f68404737b61b0", "filename": "src/etc/gyp-uv", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Fetc%2Fgyp-uv", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Fetc%2Fgyp-uv", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgyp-uv?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -2,55 +2,61 @@\n \n # This script generates rust compatible makefiles from libuv. When upgrading\n # libuv, do:\n+#\n # cd $RUST_DIR\n-# rm -r mk/libuv\n-# cd $LIBUV_DIR\n-# git archive --prefix libuv/ $REVISION > libuv.tar.gz\n-# cd $RUST_DIR/src/rt\n-# rm -r libuv\n-# tar -xvf $LIBUV_DIR/libuv.tar.gz\n-# mkdir -p libuv/build\n-# svn co http://gyp.googlecode.com/svn/trunk libuv/build/gyp\n+# cd src/libuv\n+# git checkout master\n+# git pull\n+# svn co http://gyp.googlecode.com/svn/trunk build/gyp\n # cd ../..\n-# ./src/etc/gyp_uv\n+# rm -r mk/libuv\n+# ./src/etc/gyp-uv\n+#\n+# Note: you must not run gyp on windows. It will get the backslashes\n+# incorrect in its rules, and not work.\n \n set -e\n \n cd `dirname $0`\n cd ../..\n \n+GYPFILE=src/libuv/uv.gyp\n+INCLUDES=\"-I src/libuv/common.gypi\"\n+\n for ARCH in ia32 x86_64\n do\n-    args=\"--depth . -Dlibrary=static_library -Dtarget_arch=$ARCH\"\n+    ARGS=\"$GYPFILE \\\n+         $INCLUDES \\\n+         --depth . \\\n+         -Dcomponent=static_library \\\n+         -Dlibrary=static_library \\\n+         -Dtarget_arch=$ARCH\"\n     \n-    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp $ARGS \\\n         -f make-mac \\\n         --generator-output mk/libuv/$ARCH/mac \\\n         -DOS=mac\n \n-    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp $ARGS \\\n         -f make-linux \\\n         --generator-output mk/libuv/$ARCH/unix \\\n         -DOS=linux\n \n-    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp $ARGS \\\n         -f make-linux \\\n         --generator-output mk/libuv/$ARCH/win \\\n         -DOS=win\n \n-    # Comment out the gyp auto regeneration\n-    for os in mac unix win; do\n-        sed -i \\\n-            -e 's/^\\(Makefile: $(srcdir)\\/src\\/rt\\/libuv\\/uv\\.gyp\\)/#\\1/' \\\n-            mk/libuv/$ARCH/$os/Makefile\n-\n-        sed -i \\\n-            -e 's/^\\(\t$(call do_cmd,regen_makefile)\\)/#\\1/' \\\n-            mk/libuv/$ARCH/$os/Makefile\n-    done\n done\n \n # On Mac, GYP hardcodes a -arch i386 into the output. Fix that.\n sed -i \\\n     -e 's/-arch i386/-arch x86_64/' \\\n     mk/libuv/x86_64/mac/src/libuv/*.mk\n+\n+MKFILES=$(find mk/libuv -name \\*.mk -o -name Makefile)\n+\n+# Comment out the gyp auto regeneration\n+perl -i -p -e 's@^(Makefile:.*)@#\\1@go' $MKFILES\n+perl -i -p -e 's@^(Makefile:.*)@#\\1@go' $MKFILES\n+perl -i -p -e 's@(.*regen_makefile.*)@#\\1@go' $MKFILES"}, {"sha": "7748f8f3261086f924c2278b2bb90ed38a4af9bd", "filename": "src/etc/x86.supp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -369,21 +369,14 @@\n    libuv-0-byte-realloc1\n    Memcheck:Leak\n    fun:malloc\n-   fun:realloc\n-   fun:ev_realloc_emul\n-   fun:ev_realloc\n-   fun:epoll_destroy\n-   fun:ev_loop_destroy\n+   ...\n    fun:uv_loop_delete\n }\n \n {\n    libuv-0-byte-realloc2\n    Memcheck:Leak\n    fun:malloc\n-   fun:realloc\n-   fun:ev_realloc_emul\n-   fun:ev_realloc\n-   fun:ev_loop_destroy\n+   ...\n    fun:uv_loop_delete\n }"}, {"sha": "27f2a3c54a85ca6fbcf7c9dc1db8a9378921a567", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -107,7 +107,7 @@ fn unref(loop: *loop_t) {\n fn sanity_check() {\n     fn check_size(t: str, uv: ctypes::size_t, rust: ctypes::size_t) {\n         #debug(\"size of %s: uv: %u, rust: %u\", t, uv, rust);\n-        assert uv == rust;\n+        assert uv <= rust;\n     }\n     check_size(\"idle_t\",\n                helpers::rust_uv_size_of_idle_t(),\n@@ -144,53 +144,45 @@ fn idle_new() -> idle_t {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-// FIXME: We're out of date on libuv and not testing\n-// it on windows presently. This needs to change.\n-mod os {\n+#[cfg(test)]\n+mod tests {\n \n-    #[cfg(test)]\n-    mod tests {\n+    #[test]\n+    fn test_sanity_check() {\n+        sanity_check();\n+    }\n+\n+    // From test-ref.c\n+    mod test_ref {\n+\n+        #[test]\n+        fn ref() {\n+            let loop = loop_new();\n+            run(loop);\n+            loop_delete(loop);\n+        }\n \n         #[test]\n-        fn test_sanity_check() {\n-            sanity_check();\n+        fn idle_ref() {\n+            let loop = loop_new();\n+            let h = idle_new();\n+            idle_init(loop, ptr::addr_of(h));\n+            idle_start(ptr::addr_of(h), ptr::null());\n+            unref(loop);\n+            run(loop);\n+            loop_delete(loop);\n         }\n \n-        // From test-ref.c\n-        mod test_ref {\n-\n-            #[test]\n-            fn ref() {\n-                let loop = loop_new();\n-                run(loop);\n-                loop_delete(loop);\n-            }\n-\n-            #[test]\n-            fn idle_ref() {\n-                let loop = loop_new();\n-                let h = idle_new();\n-                idle_init(loop, ptr::addr_of(h));\n-                idle_start(ptr::addr_of(h), ptr::null());\n-                unref(loop);\n-                run(loop);\n-                loop_delete(loop);\n-            }\n-\n-            #[test]\n-            fn async_ref() {\n-                /*\n-                let loop = loop_new();\n-                let h = async_new();\n-                async_init(loop, ptr::addr_of(h), ptr::null());\n-                unref(loop);\n-                run(loop);\n-                loop_delete(loop);\n-                */\n-            }\n+        #[test]\n+        fn async_ref() {\n+            /*\n+            let loop = loop_new();\n+            let h = async_new();\n+            async_init(loop, ptr::addr_of(h), ptr::null());\n+            unref(loop);\n+            run(loop);\n+            loop_delete(loop);\n+            */\n         }\n     }\n }"}, {"sha": "d18a59031eaf66e41a86cc743365caed8c5bd67e", "filename": "src/libstd/uvtmp.rs", "status": "modified", "additions": 61, "deletions": 69, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Flibstd%2Fuvtmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c485301d210872c38fe840c58d27d97c4e97d7a5/src%2Flibstd%2Fuvtmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuvtmp.rs?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -95,82 +95,74 @@ fn get_req_id(cd: connect_data) -> u32 {\n     ret rustrt::rust_uvtmp_get_req_id(cd);\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-// FIXME: We're out of date on libuv and not testing\n-// it on windows presently. This needs to change.\n-mod os {\n-\n-    #[test]\n-    fn test_start_stop() {\n-        let thread = create_thread();\n-        start_thread(thread);\n-        join_thread(thread);\n-        delete_thread(thread);\n-    }\n+#[test]\n+fn test_start_stop() {\n+    let thread = create_thread();\n+    start_thread(thread);\n+    join_thread(thread);\n+    delete_thread(thread);\n+}\n \n-    #[test]\n-    #[ignore]\n-    fn test_connect() {\n-        let thread = create_thread();\n-        start_thread(thread);\n-        let port = comm::port();\n-        let chan = comm::chan(port);\n-        connect(thread, 0u32, \"74.125.224.146\", chan);\n-        alt comm::recv(port) {\n-          connected(cd) {\n-            close_connection(thread, 0u32);\n-          }\n-          _ { fail \"test_connect: port isn't connected\"; }\n-        }\n-        join_thread(thread);\n-        delete_thread(thread);\n+#[test]\n+#[ignore]\n+fn test_connect() {\n+    let thread = create_thread();\n+    start_thread(thread);\n+    let port = comm::port();\n+    let chan = comm::chan(port);\n+    connect(thread, 0u32, \"74.125.224.146\", chan);\n+    alt comm::recv(port) {\n+      connected(cd) {\n+        close_connection(thread, 0u32);\n+      }\n+      _ { fail \"test_connect: port isn't connected\"; }\n     }\n+    join_thread(thread);\n+    delete_thread(thread);\n+}\n \n-    #[test]\n-    #[ignore]\n-    fn test_http() {\n-        let thread = create_thread();\n-        start_thread(thread);\n-        let port = comm::port();\n-        let chan = comm::chan(port);\n-        connect(thread, 0u32, \"74.125.224.146\", chan);\n+#[test]\n+#[ignore]\n+fn test_http() {\n+    let thread = create_thread();\n+    start_thread(thread);\n+    let port = comm::port();\n+    let chan = comm::chan(port);\n+    connect(thread, 0u32, \"74.125.224.146\", chan);\n+    alt comm::recv(port) {\n+      connected(cd) {\n+        write(thread, 0u32, str::bytes(\"GET / HTTP/1.0\\n\\n\"), chan);\n         alt comm::recv(port) {\n-          connected(cd) {\n-            write(thread, 0u32, str::bytes(\"GET / HTTP/1.0\\n\\n\"), chan);\n-            alt comm::recv(port) {\n-              wrote(cd) {\n-                read_start(thread, 0u32, chan);\n-                let keep_going = true;\n-                while keep_going {\n-                    alt comm::recv(port) {\n-                      read(_, buf, -1) {\n-                        keep_going = false;\n-                        delete_buf(buf);\n-                      }\n-                      read(_, buf, len) {\n-                        unsafe {\n-                            log(error, len);\n-                            let buf = vec::unsafe::from_buf(buf,\n-                                                            len as uint);\n-                            let str = str::from_bytes(buf);\n-                            #error(\"read something\");\n-                            io::println(str);\n-                        }\n-                        delete_buf(buf);\n-                      }\n-                      _ { fail \"test_http: protocol error\"; }\n+          wrote(cd) {\n+            read_start(thread, 0u32, chan);\n+            let keep_going = true;\n+            while keep_going {\n+                alt comm::recv(port) {\n+                  read(_, buf, -1) {\n+                    keep_going = false;\n+                    delete_buf(buf);\n+                  }\n+                  read(_, buf, len) {\n+                    unsafe {\n+                        log(error, len);\n+                        let buf = vec::unsafe::from_buf(buf,\n+                                                        len as uint);\n+                        let str = str::from_bytes(buf);\n+                        #error(\"read something\");\n+                        io::println(str);\n                     }\n+                    delete_buf(buf);\n+                  }\n+                  _ { fail \"test_http: protocol error\"; }\n                 }\n-                close_connection(thread, 0u32);\n-              }\n-              _ { fail \"test_http: expected `wrote`\"; }\n             }\n+            close_connection(thread, 0u32);\n           }\n-          _ { fail \"test_http: port not connected\"; }\n+          _ { fail \"test_http: expected `wrote`\"; }\n         }\n-        join_thread(thread);\n-        delete_thread(thread);\n+      }\n+      _ { fail \"test_http: port not connected\"; }\n     }\n-}\n\\ No newline at end of file\n+    join_thread(thread);\n+    delete_thread(thread);\n+}"}, {"sha": "1170ffba3ac5191930b40c897d4569a9d8a296a3", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=c485301d210872c38fe840c58d27d97c4e97d7a5", "patch": "@@ -1 +1 @@\n-Subproject commit f1859eb841be2fe48512bc10e64556383f408b01\n+Subproject commit 1170ffba3ac5191930b40c897d4569a9d8a296a3"}]}