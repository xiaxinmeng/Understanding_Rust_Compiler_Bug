{"sha": "b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YmUyYjFkM2NjMmZkOGNhOGU3YWE3NTQyYWFmOWQ0ZjkwNWY5ZjU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T12:19:55Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-03T13:21:15Z"}, "message": "Use block_def_map in body lowering", "tree": {"sha": "e7ced55e0eed0106da0b687c5f489165d6a11484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ced55e0eed0106da0b687c5f489165d6a11484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "html_url": "https://github.com/rust-lang/rust/commit/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e1f0905aae762b8d64b52e76bbc6aa5915894b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e1f0905aae762b8d64b52e76bbc6aa5915894b", "html_url": "https://github.com/rust-lang/rust/commit/85e1f0905aae762b8d64b52e76bbc6aa5915894b"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "41abd8f83b5e1f3d7aaac39c67c290f90a32a68a", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -46,7 +46,7 @@ pub(crate) struct CfgExpander {\n \n pub(crate) struct Expander {\n     cfg_expander: CfgExpander,\n-    crate_def_map: Arc<DefMap>,\n+    def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n@@ -91,7 +91,7 @@ impl Expander {\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n-            crate_def_map,\n+            def_map: crate_def_map,\n             current_file_id,\n             ast_id_map,\n             module,\n@@ -102,7 +102,6 @@ impl Expander {\n     pub(crate) fn enter_expand<T: ast::AstNode>(\n         &mut self,\n         db: &dyn DefDatabase,\n-        local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> ExpandResult<Option<(Mark, T)>> {\n         if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n@@ -112,18 +111,12 @@ impl Expander {\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        let resolver = |path: ModPath| -> Option<MacroDefId> {\n-            if let Some(local_scope) = local_scope {\n-                if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n-                    return Some(def);\n-                }\n-            }\n-            self.resolve_path_as_macro(db, &path)\n-        };\n+        let resolver =\n+            |path: ModPath| -> Option<MacroDefId> { self.resolve_path_as_macro(db, &path) };\n \n         let mut err = None;\n         let call_id =\n-            macro_call.as_call_id_with_errors(db, self.crate_def_map.krate(), resolver, &mut |e| {\n+            macro_call.as_call_id_with_errors(db, self.def_map.krate(), resolver, &mut |e| {\n                 err.get_or_insert(e);\n             });\n         let call_id = match call_id {\n@@ -204,7 +197,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {\n-        self.crate_def_map\n+        self.def_map\n             .resolve_path(db, self.module.local_id, path, BuiltinShadowMode::Other)\n             .0\n             .take_macros()"}, {"sha": "bc61730a7a97530f6d82c84f93923c05aa49de71", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{any::type_name, sync::Arc};\n+use std::{any::type_name, mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n@@ -36,8 +36,8 @@ use crate::{\n     item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n-    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n-    StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, BlockLoc, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern,\n+    ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n use super::{diagnostics::BodyDiagnostic, ExprSource, PatSource};\n@@ -152,8 +152,8 @@ impl ExprCollector<'_> {\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n         self.make_expr(expr, Err(SyntheticSyntax))\n     }\n-    fn empty_block(&mut self) -> ExprId {\n-        self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None, label: None })\n+    fn unit(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Tuple { exprs: Vec::new() })\n     }\n     fn missing_expr(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Missing)\n@@ -222,7 +222,7 @@ impl ExprCollector<'_> {\n                                 MatchArm { pat, expr: then_branch, guard: None },\n                                 MatchArm {\n                                     pat: placeholder_pat,\n-                                    expr: else_branch.unwrap_or_else(|| self.empty_block()),\n+                                    expr: else_branch.unwrap_or_else(|| self.unit()),\n                                     guard: None,\n                                 },\n                             ];\n@@ -561,7 +561,7 @@ impl ExprCollector<'_> {\n         let outer_file = self.expander.current_file_id;\n \n         let macro_call = self.expander.to_source(AstPtr::new(&e));\n-        let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n+        let res = self.expander.enter_expand(self.db, e);\n \n         match &res.err {\n             Some(ExpandError::UnresolvedProcMacro) => {\n@@ -697,12 +697,27 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n-        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n+        let ast_id = self.expander.ast_id(&block);\n+        let block_loc = BlockLoc { ast_id, module: self.expander.module };\n+        let block_id = self.db.intern_block(block_loc);\n+        let def_map = self.db.block_def_map(block_id);\n+        let root = def_map.module_id(def_map.root());\n+        let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n+        let prev_module = mem::replace(&mut self.expander.module, root);\n+\n         self.collect_stmts_items(block.statements());\n         let statements =\n             block.statements().filter_map(|s| self.collect_stmt(s)).flatten().collect();\n         let tail = block.tail_expr().map(|e| self.collect_expr(e));\n-        self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr)\n+        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n+        let expr_id = self.alloc_expr(\n+            Expr::Block { id: block_id, statements, tail, label: None },\n+            syntax_node_ptr,\n+        );\n+\n+        self.expander.def_map = prev_def_map;\n+        self.expander.module = prev_module;\n+        expr_id\n     }\n \n     fn collect_stmts_items(&mut self, stmts: ast::AstChildren<ast::Stmt>) {\n@@ -832,7 +847,7 @@ impl ExprCollector<'_> {\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n                     // decide that, we need to try resolving the name.\n-                    let (resolved, _) = self.expander.crate_def_map.resolve_path(\n+                    let (resolved, _) = self.expander.def_map.resolve_path(\n                         self.db,\n                         self.expander.module.local_id,\n                         &name.clone().into(),"}, {"sha": "c2b0dc00714a9e1fae5345f439170ce47300c6e7", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -262,7 +262,7 @@ fn collect_items(\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n \n-                if let Some((mark, mac)) = expander.enter_expand(db, None, call).value {\n+                if let Some((mark, mac)) = expander.enter_expand(db, call).value {\n                     let src: InFile<ast::MacroItems> = expander.to_source(mac);\n                     let item_tree = db.item_tree(src.file_id);\n                     let iter ="}, {"sha": "4d72eaeaff9aa4269d9d42bdb102b993a977d101", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -20,6 +20,7 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n+    BlockId,\n };\n \n pub type ExprId = Idx<Expr>;\n@@ -56,6 +57,7 @@ pub enum Expr {\n         else_branch: Option<ExprId>,\n     },\n     Block {\n+        id: BlockId,\n         statements: Vec<Statement>,\n         tail: Option<ExprId>,\n         label: Option<LabelId>,"}, {"sha": "4bde676490ec2a613a3cc548dddf0e08b6f790bc", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -24,7 +24,7 @@ use la_arena::{Arena, Idx, RawIdx};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n-use syntax::{ast, match_ast};\n+use syntax::{ast, match_ast, SyntaxKind};\n use test_utils::mark;\n \n use crate::{\n@@ -80,6 +80,10 @@ impl ItemTree {\n     pub(crate) fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n+            if node.kind() == SyntaxKind::ERROR {\n+                // FIXME: not 100% sure why these crop up, but return an empty tree to avoid a panic\n+                return Default::default();\n+            }\n             node\n         } else {\n             return Default::default();"}, {"sha": "12f1591c81f266b2d2a09f64aa33c9e78c77b109", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b7be2b1d3cc2fd8ca8e7aa7542aaf9d4f905f9f5", "patch": "@@ -137,7 +137,7 @@ impl<'a> InferenceContext<'a> {\n \n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n-            Expr::Block { statements, tail, label } => match label {\n+            Expr::Block { statements, tail, label, id: _ } => match label {\n                 Some(_) => {\n                     let break_ty = self.table.new_type_var();\n                     self.breakables.push(BreakableContext {"}]}