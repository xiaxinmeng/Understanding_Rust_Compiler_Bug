{"sha": "934902af61d8024ddd7db290b33a7076dad7b107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDkwMmFmNjFkODAyNGRkZDdkYjI5MGIzM2E3MDc2ZGFkN2IxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-02T18:14:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-02T18:14:09Z"}, "message": "Auto merge of #49252 - Manishearth:easy-feature-flag, r=nikomatsakis\n\nEasy edition feature flag\n\nWe no longer gate features on epochs; instead we have a `#![feature(rust_2018_preview)]` that flips on a bunch of features (currently dyn_trait).\n\nBased on #49001 to avoid merge conflicts\n\nr? @nikomatsakis", "tree": {"sha": "8e070daf866643f7c4115bd95594afadc1e5879a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e070daf866643f7c4115bd95594afadc1e5879a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/934902af61d8024ddd7db290b33a7076dad7b107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/934902af61d8024ddd7db290b33a7076dad7b107", "html_url": "https://github.com/rust-lang/rust/commit/934902af61d8024ddd7db290b33a7076dad7b107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/934902af61d8024ddd7db290b33a7076dad7b107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097efa9a998d4f3a4aee3af126e8f8a9eba1ae07", "url": "https://api.github.com/repos/rust-lang/rust/commits/097efa9a998d4f3a4aee3af126e8f8a9eba1ae07", "html_url": "https://github.com/rust-lang/rust/commit/097efa9a998d4f3a4aee3af126e8f8a9eba1ae07"}, {"sha": "195c6b4789858b7fa23735a67facf2bd0749729b", "url": "https://api.github.com/repos/rust-lang/rust/commits/195c6b4789858b7fa23735a67facf2bd0749729b", "html_url": "https://github.com/rust-lang/rust/commit/195c6b4789858b7fa23735a67facf2bd0749729b"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "e579fc74b42661753386440869b2bc0ac16c213d", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/934902af61d8024ddd7db290b33a7076dad7b107/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934902af61d8024ddd7db290b33a7076dad7b107/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=934902af61d8024ddd7db290b33a7076dad7b107", "patch": "@@ -55,6 +55,13 @@ impl Edition {\n             Edition::Edition2018 => \"edition_2018\",\n         }\n     }\n+\n+    pub fn feature_name(&self) -> &'static str {\n+        match *self {\n+            Edition::Edition2015 => \"rust_2015_preview\",\n+            Edition::Edition2018 => \"rust_2018_preview\",\n+        }\n+    }\n }\n \n impl FromStr for Edition {"}, {"sha": "463e76e14618a11aef9c3d768a9d9d970256b00e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/934902af61d8024ddd7db290b33a7076dad7b107/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934902af61d8024ddd7db290b33a7076dad7b107/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=934902af61d8024ddd7db290b33a7076dad7b107", "patch": "@@ -28,7 +28,7 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n-use edition::Edition;\n+use edition::{ALL_EDITIONS, Edition};\n use codemap::Spanned;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -1800,21 +1800,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    edition: Edition) -> Features {\n+                    crate_edition: Edition) -> Features {\n+    fn feature_removed(span_handler: &Handler, span: Span) {\n+        span_err!(span_handler, span, E0557, \"feature has been removed\");\n+    }\n+\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n-        if let Some(f_edition) = f_edition {\n-            if edition >= f_edition {\n-                // FIXME(Manishearth) there is currently no way to set\n-                // lang features by edition\n-                set(&mut features, DUMMY_SP);\n-            }\n-        }\n-    }\n-\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n@@ -1827,6 +1821,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n             Some(list) => {\n                 for mi in list {\n+\n                     let name = if let Some(word) = mi.word() {\n                         word.name()\n                     } else {\n@@ -1844,11 +1839,26 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                             .find(|& &(n, _, _)| name == n)\n                         .or_else(|| STABLE_REMOVED_FEATURES.iter()\n                             .find(|& &(n, _, _)| name == n)) {\n-                        span_err!(span_handler, mi.span, E0557, \"feature has been removed\");\n+                        feature_removed(span_handler, mi.span);\n                     }\n                     else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n                         .find(|& &(n, _, _)| name == n) {\n                         features.declared_stable_lang_features.push((name, mi.span));\n+                    } else if let Some(&edition) = ALL_EDITIONS.iter()\n+                                                              .find(|e| name == e.feature_name()) {\n+                        if edition <= crate_edition {\n+                            feature_removed(span_handler, mi.span);\n+                        } else {\n+                            for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                                if let Some(f_edition) = f_edition {\n+                                    if edition >= f_edition {\n+                                        // FIXME(Manishearth) there is currently no way to set\n+                                        // lib features by edition\n+                                        set(&mut features, DUMMY_SP);\n+                                    }\n+                                }\n+                            }\n+                        }\n                     } else {\n                         features.declared_lib_features.push((name, mi.span));\n                     }"}, {"sha": "e3cd1edd20987786dfa1cf891d42203885d77387", "filename": "src/test/run-pass/epoch-gate-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/934902af61d8024ddd7db290b33a7076dad7b107/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934902af61d8024ddd7db290b33a7076dad7b107/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs?ref=934902af61d8024ddd7db290b33a7076dad7b107", "patch": "@@ -11,7 +11,7 @@\n // Checks if the correct registers are being used to pass arguments\n // when the sysv64 ABI is specified.\n \n-// compile-flags: -Zedition=2018\n+#![feature(rust_2018_preview)]\n \n pub trait Foo {}\n "}]}