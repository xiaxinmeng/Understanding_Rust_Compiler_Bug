{"sha": "1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYjljYWQ1MGE4ZDUzOGJmNDkwM2Y4YzJlNmFmNWMyYmQ2YTMwODE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T12:50:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T12:01:16Z"}, "message": "Use () for analysis.", "tree": {"sha": "03160b22c30994783668074d2162fb0e2154ed70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03160b22c30994783668074d2162fb0e2154ed70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "html_url": "https://github.com/rust-lang/rust/commit/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "html_url": "https://github.com/rust-lang/rust/commit/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "c9b36dd0c24ca9cd40c39a3bada9207640cc2c31", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -21,7 +21,6 @@ use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_feature::find_gated_cfg;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_builtin_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n@@ -389,7 +388,7 @@ fn run_compiler(\n             }\n \n             queries.global_ctxt()?.peek_mut().enter(|tcx| {\n-                let result = tcx.analysis(LOCAL_CRATE);\n+                let result = tcx.analysis(());\n                 if sess.opts.debugging_opts.save_analysis {\n                     let crate_name = queries.crate_name()?.peek().clone();\n                     sess.time(\"save_analysis\", || {"}, {"sha": "370ec053cbbcbbcc62b59486e9f79249b6296024", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -4,7 +4,6 @@ use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -74,7 +73,7 @@ where\n             f(&annotation, tcx.hir().krate())\n         }\n         PpHirMode::Typed => {\n-            abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n+            abort_on_err(tcx.analysis(()), tcx.sess);\n \n             let annotation = TypedAnnotation { tcx, maybe_typeck_results: Cell::new(None) };\n             tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n@@ -475,7 +474,7 @@ fn print_with_analysis(\n     ppm: PpMode,\n     ofile: Option<&Path>,\n ) -> Result<(), ErrorReported> {\n-    tcx.analysis(LOCAL_CRATE)?;\n+    tcx.analysis(())?;\n \n     let out = match ppm {\n         Mir => {"}, {"sha": "cb5c82a470570fe7f0457670f7d30e35818fd615", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n-use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n@@ -809,9 +809,7 @@ pub fn create_global_ctxt<'tcx>(\n \n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n-fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     rustc_passes::hir_id_validator::check_crate(tcx);\n \n     let sess = tcx.sess;"}, {"sha": "92d05e4806871e5e50be8113c761697f2d313a84", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -285,7 +285,7 @@ impl<'tcx> Queries<'tcx> {\n         self.ongoing_codegen.compute(|| {\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n-                tcx.analysis(LOCAL_CRATE).ok();\n+                tcx.analysis(()).ok();\n \n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;"}, {"sha": "f93ed974aa8ec4db4d58a3fd047c17e60a3e7d8b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -361,9 +361,9 @@ pub fn provide(providers: &mut Providers) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             CStore::from_tcx(tcx).has_global_allocator()\n         },\n-        postorder_cnums: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            tcx.arena.alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(cnum))\n+        postorder_cnums: |tcx, ()| {\n+            tcx.arena\n+                .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n \n         ..*providers"}, {"sha": "d63116e29c86f4b541a04e93896ff9796bee72a9", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -251,7 +251,7 @@ pub fn used_crates(tcx: TyCtxt<'_>, prefer: LinkagePreference) -> Vec<(CrateNum,\n             Some((cnum, path))\n         })\n         .collect::<Vec<_>>();\n-    let mut ordering = tcx.postorder_cnums(LOCAL_CRATE).to_owned();\n+    let mut ordering = tcx.postorder_cnums(()).to_owned();\n     ordering.reverse();\n     libs.sort_by_cached_key(|&(a, _)| ordering.iter().position(|x| *x == a));\n     libs"}, {"sha": "c243192e8b7e124e6e813fca7c97031499812310", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -114,7 +114,7 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n-    query analysis(key: CrateNum) -> Result<(), ErrorReported> {\n+    query analysis(key: ()) -> Result<(), ErrorReported> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }\n     }\n@@ -1381,7 +1381,7 @@ rustc_queries! {\n         eval_always\n         desc { \"looking at the source for a crate\" }\n     }\n-    query postorder_cnums(_: CrateNum) -> &'tcx [CrateNum] {\n+    query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n@@ -1394,8 +1394,7 @@ rustc_queries! {\n         eval_always\n         desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n-    query maybe_unused_extern_crates(_: CrateNum)\n-        -> &'tcx [(LocalDefId, Span)] {\n+    query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n         eval_always\n         desc { \"looking up all possibly unused extern crates\" }\n     }"}, {"sha": "dde5cbadbd965ae7feb3ef3549cc0a775251efc9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -2795,10 +2795,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         tcx.crate_name\n     };\n     providers.maybe_unused_trait_import = |tcx, id| tcx.maybe_unused_trait_imports.contains(&id);\n-    providers.maybe_unused_extern_crates = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        &tcx.maybe_unused_extern_crates[..]\n-    };\n+    providers.maybe_unused_extern_crates = |tcx, ()| &tcx.maybe_unused_extern_crates[..];\n     providers.names_imported_by_glob_use =\n         |tcx, id| tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default());\n "}, {"sha": "836bed2a156354e43a1c9ca863169fe460d565de", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=1fb9cad50a8d538bf4903f8c2e6af5c2bd6a3081", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n@@ -77,7 +77,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     // can always suggest removing (no matter which edition we are\n     // in).\n     let unused_extern_crates: FxHashMap<LocalDefId, Span> = tcx\n-        .maybe_unused_extern_crates(LOCAL_CRATE)\n+        .maybe_unused_extern_crates(())\n         .iter()\n         .filter(|&&(def_id, _)| {\n             // The `def_id` here actually was calculated during resolution (at least"}]}