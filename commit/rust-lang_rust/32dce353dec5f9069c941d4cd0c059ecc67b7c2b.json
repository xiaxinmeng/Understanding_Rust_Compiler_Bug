{"sha": "32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZGNlMzUzZGVjNWY5MDY5Yzk0MWQ0Y2QwYzA1OWVjYzY3YjdjMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T12:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T12:28:04Z"}, "message": "Auto merge of #82891 - cjgillot:monoparent, r=petrochenkov\n\nMake def_key and HIR parenting consistent.\n\nr? `@petrochenkov`", "tree": {"sha": "804abe3c94cc191c89c6f4a8cafca8637afaf50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/804abe3c94cc191c89c6f4a8cafca8637afaf50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "html_url": "https://github.com/rust-lang/rust/commit/32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178bd9130e9e5f4f26be325bbf593f69dfa894b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/178bd9130e9e5f4f26be325bbf593f69dfa894b0", "html_url": "https://github.com/rust-lang/rust/commit/178bd9130e9e5f4f26be325bbf593f69dfa894b0"}, {"sha": "445b4e379ca487b268ff6360b193feb28106b5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/445b4e379ca487b268ff6360b193feb28106b5ac", "html_url": "https://github.com/rust-lang/rust/commit/445b4e379ca487b268ff6360b193feb28106b5ac"}], "stats": {"total": 231, "additions": 177, "deletions": 54}, "files": [{"sha": "003500eb68f0c41d3eaa3a83c861171cf5ca8a4a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -223,7 +223,7 @@ enum ImplTraitContext<'b, 'a> {\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n     ///\n     /// Newly generated parameters should be inserted into the given `Vec`.\n-    Universal(&'b mut Vec<hir::GenericParam<'a>>),\n+    Universal(&'b mut Vec<hir::GenericParam<'a>>, LocalDefId),\n \n     /// Treat `impl Trait` as shorthand for a new opaque type.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -278,7 +278,7 @@ impl<'a> ImplTraitContext<'_, 'a> {\n     fn reborrow<'this>(&'this mut self) -> ImplTraitContext<'this, 'a> {\n         use self::ImplTraitContext::*;\n         match self {\n-            Universal(params) => Universal(params),\n+            Universal(params, parent) => Universal(params, *parent),\n             ReturnPositionOpaqueTy { fn_def_id, origin } => {\n                 ReturnPositionOpaqueTy { fn_def_id: *fn_def_id, origin: *origin }\n             }\n@@ -475,25 +475,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl MiscCollector<'_, '_, '_> {\n-            fn allocate_use_tree_hir_id_counters(&mut self, tree: &UseTree, owner: LocalDefId) {\n+            fn allocate_use_tree_hir_id_counters(&mut self, tree: &UseTree) {\n                 match tree.kind {\n                     UseTreeKind::Simple(_, id1, id2) => {\n                         for &id in &[id1, id2] {\n-                            self.lctx.resolver.create_def(\n-                                owner,\n-                                id,\n-                                DefPathData::Misc,\n-                                ExpnId::root(),\n-                                tree.prefix.span,\n-                            );\n                             self.lctx.allocate_hir_id_counter(id);\n                         }\n                     }\n                     UseTreeKind::Glob => (),\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n-                            let hir_id = self.lctx.allocate_hir_id_counter(id);\n-                            self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                            self.lctx.allocate_hir_id_counter(id);\n+                            self.allocate_use_tree_hir_id_counters(use_tree);\n                         }\n                     }\n                 }\n@@ -502,7 +495,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         impl<'tcx> Visitor<'tcx> for MiscCollector<'tcx, '_, '_> {\n             fn visit_item(&mut self, item: &'tcx Item) {\n-                let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n+                self.lctx.allocate_hir_id_counter(item.id);\n \n                 match item.kind {\n                     ItemKind::Struct(_, ref generics)\n@@ -521,7 +514,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n                     }\n                     ItemKind::Use(ref use_tree) => {\n-                        self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                        self.allocate_use_tree_hir_id_counters(use_tree);\n                     }\n                     _ => {}\n                 }\n@@ -939,8 +932,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // `lifetimes_to_define`. If we swapped the order of these two,\n                     // in-band-lifetimes introduced by generics or where-clauses\n                     // wouldn't have been added yet.\n-                    let generics =\n-                        this.lower_generics_mut(generics, ImplTraitContext::Universal(&mut params));\n+                    let generics = this.lower_generics_mut(\n+                        generics,\n+                        ImplTraitContext::Universal(\n+                            &mut params,\n+                            this.current_hir_id_owner.last().unwrap().0,\n+                        ),\n+                    );\n                     let res = f(this, &mut params);\n                     (params, (generics, res))\n                 })\n@@ -1145,6 +1143,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             AssocTyConstraintKind::Bound { ref bounds } => {\n                 let mut capturable_lifetimes;\n+                let mut parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n                 let (desugar_to_impl_trait, itctx) = match itctx {\n                     // We are in the return position:\n@@ -1164,7 +1163,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal(..) if self.is_in_dyn_type => (true, itctx),\n+                    ImplTraitContext::Universal(_, parent) if self.is_in_dyn_type => {\n+                        parent_def_id = parent;\n+                        (true, itctx)\n+                    }\n \n                     // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n                     // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n@@ -1198,7 +1200,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n                     let impl_trait_node_id = self.resolver.next_node_id();\n-                    let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n                     self.resolver.create_def(\n                         parent_def_id,\n                         impl_trait_node_id,\n@@ -1451,7 +1452,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             |this| this.lower_param_bounds(bounds, nested_itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal(in_band_ty_params) => {\n+                    ImplTraitContext::Universal(in_band_ty_params, parent_def_id) => {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n@@ -1460,7 +1461,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let hir_bounds = self.with_hir_id_owner(def_node_id, |this| {\n                             this.lower_param_bounds(\n                                 bounds,\n-                                ImplTraitContext::Universal(in_band_ty_params),\n+                                ImplTraitContext::Universal(in_band_ty_params, parent_def_id),\n                             )\n                         });\n                         // Set the name to `impl Bound1 + Bound2`.\n@@ -1891,7 +1892,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             this.arena.alloc_from_iter(inputs.iter().map(|param| {\n                 if let Some((_, ibty)) = &mut in_band_ty_params {\n-                    this.lower_ty_direct(&param.ty, ImplTraitContext::Universal(ibty))\n+                    this.lower_ty_direct(\n+                        &param.ty,\n+                        ImplTraitContext::Universal(\n+                            ibty,\n+                            this.current_hir_id_owner.last().unwrap().0,\n+                        ),\n+                    )\n                 } else {\n                     this.lower_ty_direct(&param.ty, ImplTraitContext::disallowed())\n                 }"}, {"sha": "64d0503834bde34230b34e31ac40fbc3fd0071f1", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -221,6 +221,18 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n             data.signature =\n                 Some(self.arena.alloc(Owner { parent: entry.parent, node: entry.node }));\n+\n+            let dk_parent = self.definitions.def_key(id.owner).parent;\n+            if let Some(dk_parent) = dk_parent {\n+                let dk_parent = LocalDefId { local_def_index: dk_parent };\n+                let dk_parent = self.definitions.local_def_id_to_hir_id(dk_parent);\n+                if dk_parent.owner != entry.parent.owner {\n+                    panic!(\n+                        \"Different parents for {:?} => dk_parent={:?} actual={:?}\",\n+                        id.owner, dk_parent, entry.parent,\n+                    )\n+                }\n+            }\n         } else {\n             assert_eq!(entry.parent.owner, id.owner);\n             insert_vec_map("}, {"sha": "6ef5e1179debc41f5411ff8d92d765aca63f4cd8", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -1,4 +1,4 @@\n-use crate::Resolver;\n+use crate::{ImplTraitContext, Resolver};\n use rustc_ast::visit::{self, FnKind};\n use rustc_ast::walk_list;\n use rustc_ast::*;\n@@ -16,14 +16,15 @@ crate fn collect_definitions(\n     fragment: &AstFragment,\n     expansion: ExpnId,\n ) {\n-    let parent_def = resolver.invocation_parents[&expansion];\n-    fragment.visit_with(&mut DefCollector { resolver, parent_def, expansion });\n+    let (parent_def, impl_trait_context) = resolver.invocation_parents[&expansion];\n+    fragment.visit_with(&mut DefCollector { resolver, parent_def, expansion, impl_trait_context });\n }\n \n /// Creates `DefId`s for nodes in the AST.\n struct DefCollector<'a, 'b> {\n     resolver: &'a mut Resolver<'b>,\n     parent_def: LocalDefId,\n+    impl_trait_context: ImplTraitContext,\n     expansion: ExpnId,\n }\n \n@@ -40,6 +41,16 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n         self.parent_def = orig_parent_def;\n     }\n \n+    fn with_impl_trait<F: FnOnce(&mut Self)>(\n+        &mut self,\n+        impl_trait_context: ImplTraitContext,\n+        f: F,\n+    ) {\n+        let orig_itc = std::mem::replace(&mut self.impl_trait_context, impl_trait_context);\n+        f(self);\n+        self.impl_trait_context = orig_itc;\n+    }\n+\n     fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n         let index = |this: &Self| {\n             index.unwrap_or_else(|| {\n@@ -60,8 +71,9 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n     }\n \n     fn visit_macro_invoc(&mut self, id: NodeId) {\n+        let id = id.placeholder_to_expn_id();\n         let old_parent =\n-            self.resolver.invocation_parents.insert(id.placeholder_to_expn_id(), self.parent_def);\n+            self.resolver.invocation_parents.insert(id, (self.parent_def, self.impl_trait_context));\n         assert!(old_parent.is_none(), \"parent `LocalDefId` is reset for an invocation\");\n     }\n }\n@@ -103,29 +115,37 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         let def = self.create_def(i.id, def_data, i.span);\n \n         self.with_parent(def, |this| {\n-            match i.kind {\n-                ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n-                    // If this is a unit or tuple-like struct, register the constructor.\n-                    if let Some(ctor_hir_id) = struct_def.ctor_id() {\n-                        this.create_def(ctor_hir_id, DefPathData::Ctor, i.span);\n+            this.with_impl_trait(ImplTraitContext::Existential, |this| {\n+                match i.kind {\n+                    ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n+                        // If this is a unit or tuple-like struct, register the constructor.\n+                        if let Some(ctor_hir_id) = struct_def.ctor_id() {\n+                            this.create_def(ctor_hir_id, DefPathData::Ctor, i.span);\n+                        }\n                     }\n+                    _ => {}\n                 }\n-                _ => {}\n-            }\n-            visit::walk_item(this, i);\n+                visit::walk_item(this, i);\n+            })\n         });\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n         if let FnKind::Fn(_, _, sig, _, body) = fn_kind {\n             if let Async::Yes { closure_id, return_impl_trait_id, .. } = sig.header.asyncness {\n-                self.create_def(return_impl_trait_id, DefPathData::ImplTrait, span);\n+                let return_impl_trait_id =\n+                    self.create_def(return_impl_trait_id, DefPathData::ImplTrait, span);\n \n                 // For async functions, we need to create their inner defs inside of a\n                 // closure to match their desugared representation. Besides that,\n                 // we must mirror everything that `visit::walk_fn` below does.\n                 self.visit_fn_header(&sig.header);\n-                visit::walk_fn_decl(self, &sig.decl);\n+                for param in &sig.decl.inputs {\n+                    self.visit_param(param);\n+                }\n+                self.with_parent(return_impl_trait_id, |this| {\n+                    this.visit_fn_ret_ty(&sig.decl.output)\n+                });\n                 let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n                 self.with_parent(closure_def, |this| walk_list!(this, visit_block, body));\n                 return;\n@@ -137,6 +157,14 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n         self.create_def(id, DefPathData::Misc, use_tree.span);\n+        match use_tree.kind {\n+            UseTreeKind::Simple(_, id1, id2) => {\n+                self.create_def(id1, DefPathData::Misc, use_tree.prefix.span);\n+                self.create_def(id2, DefPathData::Misc, use_tree.prefix.span);\n+            }\n+            UseTreeKind::Glob => (),\n+            UseTreeKind::Nested(..) => {}\n+        }\n         visit::walk_use_tree(self, use_tree, id);\n     }\n \n@@ -191,7 +219,15 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         };\n         self.create_def(param.id, def_path_data, param.ident.span);\n \n-        visit::walk_generic_param(self, param);\n+        // impl-Trait can happen inside generic parameters, like\n+        // ```\n+        // fn foo<U: Iterator<Item = impl Clone>>() {}\n+        // ```\n+        //\n+        // In that case, the impl-trait is lowered as an additional generic parameter.\n+        self.with_impl_trait(ImplTraitContext::Universal(self.parent_def), |this| {\n+            visit::walk_generic_param(this, param)\n+        });\n     }\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n@@ -244,8 +280,19 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         match ty.kind {\n             TyKind::MacCall(..) => self.visit_macro_invoc(ty.id),\n             TyKind::ImplTrait(node_id, _) => {\n-                let parent_def = self.create_def(node_id, DefPathData::ImplTrait, ty.span);\n-                self.with_parent(parent_def, |this| visit::walk_ty(this, ty));\n+                let parent_def = match self.impl_trait_context {\n+                    ImplTraitContext::Universal(item_def) => self.resolver.create_def(\n+                        item_def,\n+                        node_id,\n+                        DefPathData::ImplTrait,\n+                        self.expansion,\n+                        ty.span,\n+                    ),\n+                    ImplTraitContext::Existential => {\n+                        self.create_def(node_id, DefPathData::ImplTrait, ty.span)\n+                    }\n+                };\n+                self.with_parent(parent_def, |this| visit::walk_ty(this, ty))\n             }\n             _ => visit::walk_ty(self, ty),\n         }\n@@ -275,7 +322,13 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_param(&mut self, p: &'a Param) {\n-        if p.is_placeholder { self.visit_macro_invoc(p.id) } else { visit::walk_param(self, p) }\n+        if p.is_placeholder {\n+            self.visit_macro_invoc(p.id)\n+        } else {\n+            self.with_impl_trait(ImplTraitContext::Universal(self.parent_def), |this| {\n+                visit::walk_param(this, p)\n+            })\n+        }\n     }\n \n     // This method is called only when we are visiting an individual field"}, {"sha": "ccfb5ff3aa0e6fe0fb12c0722a512a21a98ec5bf", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -156,6 +156,12 @@ impl<'a> ParentScope<'a> {\n     }\n }\n \n+#[derive(Copy, Debug, Clone)]\n+enum ImplTraitContext {\n+    Existential,\n+    Universal(LocalDefId),\n+}\n+\n #[derive(Eq)]\n struct BindingError {\n     name: Symbol,\n@@ -989,8 +995,9 @@ pub struct Resolver<'a> {\n     /// Indices of unnamed struct or variant fields with unresolved attributes.\n     placeholder_field_indices: FxHashMap<NodeId, usize>,\n     /// When collecting definitions from an AST fragment produced by a macro invocation `ExpnId`\n-    /// we know what parent node that fragment should be attached to thanks to this table.\n-    invocation_parents: FxHashMap<ExpnId, LocalDefId>,\n+    /// we know what parent node that fragment should be attached to thanks to this table,\n+    /// and how the `impl Trait` fragments were introduced.\n+    invocation_parents: FxHashMap<ExpnId, (LocalDefId, ImplTraitContext)>,\n \n     next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n     /// Some way to know that we are in a *trait* impl in `visit_assoc_item`.\n@@ -1205,7 +1212,7 @@ impl<'a> Resolver<'a> {\n         node_id_to_def_id.insert(CRATE_NODE_ID, root);\n \n         let mut invocation_parents = FxHashMap::default();\n-        invocation_parents.insert(ExpnId::root(), root);\n+        invocation_parents.insert(ExpnId::root(), (root, ImplTraitContext::Existential));\n \n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n             .opts"}, {"sha": "2d149c476a60fb435050d4eaf00b724ea4ac7f57", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -326,7 +326,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         // nearest closing item - we should try to return the closest parent of the ExpnId\n         self.invocation_parents\n             .get(&expn_id)\n-            .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[*id])\n+            .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[id.0])\n     }\n \n     fn has_derive_copy(&self, expn_id: ExpnId) -> bool {"}, {"sha": "0c28305dd7725c7bfcfb18239fa66ea5c094028d", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -93,9 +93,6 @@\n    59|      1|    used_only_from_this_lib_crate_generic_function(some_vec);\n    60|      1|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n    61|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_crate::use_this_lib_crate\n-  ------------------\n    62|       |\n    63|       |// FIXME(#79651): `used_from_bin_crate_and_lib_crate_generic_function()` is covered and executed\n    64|       |// `2` times, but the coverage output also shows (at the bottom of the coverage report):"}, {"sha": "62e2dc71210978a882020eb1c8d8f40543b64d90", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:12:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A))\n+   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[317d]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:19:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A))\n+   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[317d]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "78100318dc33ad1fdf640f0bd8b04e9d53448fda", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -12,7 +12,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:24 ~ generator_print_verbose_1[317d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[317d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -30,10 +30,10 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:29 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3165c9b9915723fc65f5e29e4e2ddf5f06e6c15a", "filename": "src/test/ui/impl-trait/impl-trait-in-macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt::Debug;\n+\n+macro_rules! i {\n+    ($($tr:tt)*) => { impl $($tr)* };\n+}\n+\n+fn foo(x: i!(Debug), y: i!(Debug)) -> String {\n+    let mut a = x;\n+    a = y; //~ ERROR mismatched\n+    format!(\"{:?}\", a)\n+}\n+\n+trait S<T> {}\n+\n+fn much_universe<T: S<i!(Debug)>, U: IntoIterator<Item = i!(Iterator<Item = i!(Clone)>)>>(\n+    _: i!(Debug + Clone),\n+) {\n+}\n+\n+fn main() {}"}, {"sha": "b5f9986ce408973d7fb0f70dcd62535ee04d53bd", "filename": "src/test/ui/impl-trait/impl-trait-in-macro.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/impl-trait-in-macro.rs:9:9\n+   |\n+LL |     ($($tr:tt)*) => { impl $($tr)* };\n+   |                       ----\n+   |                       |\n+   |                       expected type parameter\n+   |                       found type parameter\n+...\n+LL |     a = y;\n+   |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n+   |\n+   = note: expected type parameter `impl Debug` (type parameter `impl Debug`)\n+              found type parameter `impl Debug` (type parameter `impl Debug`)\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "689c240128d80e1ac139485ea792e85f478a933a", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dce353dec5f9069c941d4cd0c059ecc67b7c2b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.rs?ref=32dce353dec5f9069c941d4cd0c059ecc67b7c2b", "patch": "@@ -6,4 +6,11 @@ fn foo(x: impl Debug, y: impl Debug) -> String {\n     format!(\"{:?}\", a)\n }\n \n-fn main() { }\n+trait S<T> {}\n+\n+fn much_universe<T: S<impl Debug>, U: IntoIterator<Item = impl Iterator<Item = impl Clone>>>(\n+    _: impl Debug + Clone,\n+) {\n+}\n+\n+fn main() {}"}]}