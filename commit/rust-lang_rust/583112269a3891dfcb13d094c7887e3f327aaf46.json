{"sha": "583112269a3891dfcb13d094c7887e3f327aaf46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MzExMjI2OWEzODkxZGZjYjEzZDA5NGM3ODg3ZTNmMzI3YWFmNDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:26:44Z"}, "message": "rollup merge of #19980: erickt/cleanup-serialize\n\nThis brings over some changes from [rustc-serialize](https://github.com/rust-lang/rustc-serialize). It makes sense to keep the two in sync until we finally remove libserialize, just to make sure they don't diverge from each other.", "tree": {"sha": "88bfd56aef820c9b35eadfb27736f5932432ac52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88bfd56aef820c9b35eadfb27736f5932432ac52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/583112269a3891dfcb13d094c7887e3f327aaf46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/583112269a3891dfcb13d094c7887e3f327aaf46", "html_url": "https://github.com/rust-lang/rust/commit/583112269a3891dfcb13d094c7887e3f327aaf46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/583112269a3891dfcb13d094c7887e3f327aaf46/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca521fb7a91f6d6ab05af8f4dffdfaa474699abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca521fb7a91f6d6ab05af8f4dffdfaa474699abb", "html_url": "https://github.com/rust-lang/rust/commit/ca521fb7a91f6d6ab05af8f4dffdfaa474699abb"}, {"sha": "d729c966bb8f1a0fe06f432e5c9c9aa2f03c4820", "url": "https://api.github.com/repos/rust-lang/rust/commits/d729c966bb8f1a0fe06f432e5c9c9aa2f03c4820", "html_url": "https://github.com/rust-lang/rust/commit/d729c966bb8f1a0fe06f432e5c9c9aa2f03c4820"}], "stats": {"total": 43, "additions": 9, "deletions": 34}, "files": [{"sha": "3181e28a1211b11a2f0c605790cad81526748c33", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/583112269a3891dfcb13d094c7887e3f327aaf46/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583112269a3891dfcb13d094c7887e3f327aaf46/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=583112269a3891dfcb13d094c7887e3f327aaf46", "patch": "@@ -2012,7 +2012,6 @@ macro_rules! read_primitive {\n \n impl ::Decoder<DecoderError> for Decoder {\n     fn read_nil(&mut self) -> DecodeResult<()> {\n-        debug!(\"read_nil\");\n         expect!(self.pop(), Null)\n     }\n \n@@ -2030,7 +2029,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_f32(&mut self) -> DecodeResult<f32> { self.read_f64().map(|x| x as f32) }\n \n     fn read_f64(&mut self) -> DecodeResult<f64> {\n-        debug!(\"read_f64\");\n         match self.pop() {\n             Json::I64(f) => Ok(f as f64),\n             Json::U64(f) => Ok(f as f64),\n@@ -2049,7 +2047,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_bool(&mut self) -> DecodeResult<bool> {\n-        debug!(\"read_bool\");\n         expect!(self.pop(), Boolean)\n     }\n \n@@ -2067,22 +2064,19 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_str(&mut self) -> DecodeResult<string::String> {\n-        debug!(\"read_str\");\n         expect!(self.pop(), String)\n     }\n \n-    fn read_enum<T, F>(&mut self, name: &str, f: F) -> DecodeResult<T> where\n+    fn read_enum<T, F>(&mut self, _name: &str, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum({})\", name);\n         f(self)\n     }\n \n     fn read_enum_variant<T, F>(&mut self, names: &[&str],\n                                mut f: F) -> DecodeResult<T>\n         where F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_variant(names={})\", names);\n         let name = match self.pop() {\n             Json::String(s) => s,\n             Json::Object(mut o) => {\n@@ -2122,49 +2116,44 @@ impl ::Decoder<DecoderError> for Decoder {\n         f(self, idx)\n     }\n \n-    fn read_enum_variant_arg<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n+    fn read_enum_variant_arg<T, F>(&mut self, _idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_variant_arg(idx={})\", idx);\n         f(self)\n     }\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n         F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_struct_variant(names={})\", names);\n         self.read_enum_variant(names, f)\n     }\n \n \n     fn read_enum_struct_variant_field<T, F>(&mut self,\n-                                         name: &str,\n+                                         _name: &str,\n                                          idx: uint,\n                                          f: F)\n                                          -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_enum_struct_variant_field(name={}, idx={})\", name, idx);\n         self.read_enum_variant_arg(idx, f)\n     }\n \n-    fn read_struct<T, F>(&mut self, name: &str, len: uint, f: F) -> DecodeResult<T> where\n+    fn read_struct<T, F>(&mut self, _name: &str, _len: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_struct(name={}, len={})\", name, len);\n         let value = try!(f(self));\n         self.pop();\n         Ok(value)\n     }\n \n     fn read_struct_field<T, F>(&mut self,\n                                name: &str,\n-                               idx: uint,\n+                               _idx: uint,\n                                f: F)\n                                -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_struct_field(name={}, idx={})\", name, idx);\n         let mut obj = try!(expect!(self.pop(), Object));\n \n         let value = match obj.remove(&name.to_string()) {\n@@ -2189,7 +2178,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_tuple<T, F>(&mut self, tuple_len: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple()\");\n         self.read_seq(move |d, len| {\n             if len == tuple_len {\n                 f(d)\n@@ -2202,18 +2190,16 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_tuple_arg<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_arg(idx={})\", idx);\n         self.read_seq_elt(idx, f)\n     }\n \n     fn read_tuple_struct<T, F>(&mut self,\n-                               name: &str,\n+                               _name: &str,\n                                len: uint,\n                                f: F)\n                                -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_struct(name={})\", name);\n         self.read_tuple(len, f)\n     }\n \n@@ -2223,14 +2209,12 @@ impl ::Decoder<DecoderError> for Decoder {\n                                    -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_tuple_struct_arg(idx={})\", idx);\n         self.read_tuple_arg(idx, f)\n     }\n \n     fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n         F: FnMut(&mut Decoder, bool) -> DecodeResult<T>,\n     {\n-        debug!(\"read_option()\");\n         match self.pop() {\n             Json::Null => f(self, false),\n             value => { self.stack.push(value); f(self, true) }\n@@ -2240,7 +2224,6 @@ impl ::Decoder<DecoderError> for Decoder {\n     fn read_seq<T, F>(&mut self, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_seq()\");\n         let array = try!(expect!(self.pop(), Array));\n         let len = array.len();\n         for v in array.into_iter().rev() {\n@@ -2249,17 +2232,15 @@ impl ::Decoder<DecoderError> for Decoder {\n         f(self, len)\n     }\n \n-    fn read_seq_elt<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n+    fn read_seq_elt<T, F>(&mut self, _idx: uint, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_seq_elt(idx={})\", idx);\n         f(self)\n     }\n \n     fn read_map<T, F>(&mut self, f: F) -> DecodeResult<T> where\n         F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map()\");\n         let obj = try!(expect!(self.pop(), Object));\n         let len = obj.len();\n         for (key, value) in obj.into_iter() {\n@@ -2269,17 +2250,15 @@ impl ::Decoder<DecoderError> for Decoder {\n         f(self, len)\n     }\n \n-    fn read_map_elt_key<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n+    fn read_map_elt_key<T, F>(&mut self, _idx: uint, f: F) -> DecodeResult<T> where\n        F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map_elt_key(idx={})\", idx);\n         f(self)\n     }\n \n-    fn read_map_elt_val<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n+    fn read_map_elt_val<T, F>(&mut self, _idx: uint, f: F) -> DecodeResult<T> where\n        F: FnOnce(&mut Decoder) -> DecodeResult<T>,\n     {\n-        debug!(\"read_map_elt_val(idx={})\", idx);\n         f(self)\n     }\n \n@@ -2441,9 +2420,7 @@ mod tests {\n     use super::ParserError::*;\n     use super::DecoderError::*;\n     use super::JsonEvent::*;\n-    use super::ParserState::*;\n     use super::StackElement::*;\n-    use super::InternalStackElement::*;\n     use super::{PrettyEncoder, Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Encoder, Decoder};\n     use std::{i64, u64, f32, f64, io};\n@@ -2678,8 +2655,6 @@ mod tests {\n     }\n \n     fn with_str_writer<F>(f: F) -> string::String where F: FnOnce(&mut io::Writer){\n-        use std::str;\n-\n         let mut m = Vec::new();\n         f(&mut m as &mut io::Writer);\n         string::String::from_utf8(m).unwrap()"}]}