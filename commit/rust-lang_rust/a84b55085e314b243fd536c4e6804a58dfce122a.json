{"sha": "a84b55085e314b243fd536c4e6804a58dfce122a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NGI1NTA4NWUzMTRiMjQzZmQ1MzZjNGU2ODA0YTU4ZGZjZTEyMmE=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-06-29T16:15:59Z"}, "committer": {"name": "Alex Burka", "email": "durka42@gmail.com", "date": "2016-09-27T23:29:01Z"}, "message": "add wrapper for discriminant_value", "tree": {"sha": "7bfeda8f996aeba7145ff2fa573b136880ffdafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfeda8f996aeba7145ff2fa573b136880ffdafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84b55085e314b243fd536c4e6804a58dfce122a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84b55085e314b243fd536c4e6804a58dfce122a", "html_url": "https://github.com/rust-lang/rust/commit/a84b55085e314b243fd536c4e6804a58dfce122a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84b55085e314b243fd536c4e6804a58dfce122a/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1265cbf4e05628c98f51afebe0b662c451173faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1265cbf4e05628c98f51afebe0b662c451173faa", "html_url": "https://github.com/rust-lang/rust/commit/1265cbf4e05628c98f51afebe0b662c451173faa"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "e0aa25724c1f93924ce901139295d840355328af", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a84b55085e314b243fd536c4e6804a58dfce122a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84b55085e314b243fd536c4e6804a58dfce122a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=a84b55085e314b243fd536c4e6804a58dfce122a", "patch": "@@ -15,7 +15,12 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use clone;\n+use cmp;\n+use fmt;\n+use hash;\n use intrinsics;\n+use marker::{Copy, PhantomData, Sized};\n use ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -647,3 +652,80 @@ pub fn drop<T>(_x: T) { }\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     ptr::read(src as *const T as *const U)\n }\n+\n+/// Opaque type representing the discriminant of an enum.\n+///\n+/// See the `discriminant` function in this module for more information.\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+pub struct Discriminant<T>(u64, PhantomData<*const T>);\n+\n+// N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> Copy for Discriminant<T> {}\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> clone::Clone for Discriminant<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> cmp::PartialEq for Discriminant<T> {\n+    fn eq(&self, rhs: &Self) -> bool {\n+        self.0 == rhs.0\n+    }\n+}\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> cmp::Eq for Discriminant<T> {}\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> hash::Hash for Discriminant<T> {\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        self.0.hash(state);\n+    }\n+}\n+\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+impl<T> fmt::Debug for Discriminant<T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.debug_tuple(\"Discriminant\")\n+           .field(&self.0)\n+           .finish()\n+    }\n+}\n+\n+/// Returns a value uniquely identifying the enum variant in `v`.\n+///\n+/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n+/// return value is unspecified.\n+///\n+/// # Stability\n+///\n+/// The discriminant of an enum variant may change if the enum definition changes. A discriminant\n+/// of some variant will not change between compilations with the same compiler.\n+///\n+/// # Examples\n+///\n+/// This can be used to compare enums that carry data, while disregarding\n+/// the actual data:\n+///\n+/// ```\n+/// #![feature(discriminant_value)]\n+/// use std::mem;\n+///\n+/// enum Foo { A(&'static str), B(i32), C(i32) }\n+///\n+/// assert!(mem::discriminant(&Foo::A(\"bar\")) == mem::discriminant(&Foo::A(\"baz\")));\n+/// assert!(mem::discriminant(&Foo::B(1))     == mem::discriminant(&Foo::B(2)));\n+/// assert!(mem::discriminant(&Foo::B(3))     != mem::discriminant(&Foo::C(3)));\n+/// ```\n+#[unstable(feature = \"discriminant_value\", reason = \"recently added, follows RFC\", issue = \"24263\")]\n+pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n+    unsafe {\n+        Discriminant(intrinsics::discriminant_value(v), PhantomData)\n+    }\n+}\n+"}, {"sha": "2dbda0be18d98a6f813c2762afa7161e0aa460e2", "filename": "src/test/run-pass/discriminant_value-wrapper.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a84b55085e314b243fd536c4e6804a58dfce122a/src%2Ftest%2Frun-pass%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84b55085e314b243fd536c4e6804a58dfce122a/src%2Ftest%2Frun-pass%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiscriminant_value-wrapper.rs?ref=a84b55085e314b243fd536c4e6804a58dfce122a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(discriminant_value)]\n+\n+use std::mem;\n+\n+enum ADT {\n+    First(u32, u32),\n+    Second(u64)\n+}\n+\n+pub fn main() {\n+    assert!(mem::discriminant(&ADT::First(0,0)) == mem::discriminant(&ADT::First(1,1)));\n+    assert!(mem::discriminant(&ADT::Second(5))  == mem::discriminant(&ADT::Second(6)));\n+    assert!(mem::discriminant(&ADT::First(2,2)) != mem::discriminant(&ADT::Second(2)));\n+\n+    let _ = mem::discriminant(&10);\n+    let _ = mem::discriminant(&\"test\");\n+}\n+"}]}