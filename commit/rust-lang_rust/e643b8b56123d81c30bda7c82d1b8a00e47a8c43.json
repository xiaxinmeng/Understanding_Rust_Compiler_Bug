{"sha": "e643b8b56123d81c30bda7c82d1b8a00e47a8c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDNiOGI1NjEyM2Q4MWMzMGJkYTdjODJkMWI4YTAwZTQ3YThjNDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-12T22:41:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T16:17:49Z"}, "message": "fix cranelift", "tree": {"sha": "14ec067e545646f4613b571e56f52f8901d10cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ec067e545646f4613b571e56f52f8901d10cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e643b8b56123d81c30bda7c82d1b8a00e47a8c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e643b8b56123d81c30bda7c82d1b8a00e47a8c43", "html_url": "https://github.com/rust-lang/rust/commit/e643b8b56123d81c30bda7c82d1b8a00e47a8c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e643b8b56123d81c30bda7c82d1b8a00e47a8c43/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3091d74d876bbb6b02cf218b064ee47d1551e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3091d74d876bbb6b02cf218b064ee47d1551e41", "html_url": "https://github.com/rust-lang/rust/commit/e3091d74d876bbb6b02cf218b064ee47d1551e41"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "c87309e22224f8955a17c639b646e7e782fecea4", "filename": "src/constant.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e643b8b56123d81c30bda7c82d1b8a00e47a8c43/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e643b8b56123d81c30bda7c82d1b8a00e47a8c43/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e643b8b56123d81c30bda7c82d1b8a00e47a8c43", "patch": "@@ -193,20 +193,21 @@ pub(crate) fn codegen_const_value<'tcx>(\n                     place.to_cvalue(fx)\n                 }\n             }\n-            Scalar::Ptr(ptr) => {\n-                let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n+            Scalar::Ptr(ptr, _size) => {\n+                let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n+                let alloc_kind = fx.tcx.get_global_alloc(alloc_id);\n                 let base_addr = match alloc_kind {\n                     Some(GlobalAlloc::Memory(alloc)) => {\n                         let data_id = data_id_for_alloc_id(\n                             &mut fx.constants_cx,\n                             fx.module,\n-                            ptr.alloc_id,\n+                            alloc_id,\n                             alloc.mutability,\n                         );\n                         let local_data_id =\n                             fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                         if fx.clif_comments.enabled() {\n-                            fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", alloc_id));\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n@@ -226,10 +227,10 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         }\n                         fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                     }\n-                    None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n+                    None => bug!(\"missing allocation {:?}\", alloc_id),\n                 };\n-                let val = if ptr.offset.bytes() != 0 {\n-                    fx.bcx.ins().iadd_imm(base_addr, i64::try_from(ptr.offset.bytes()).unwrap())\n+                let val = if offset.bytes() != 0 {\n+                    fx.bcx.ins().iadd_imm(base_addr, i64::try_from(offset.bytes()).unwrap())\n                 } else {\n                     base_addr\n                 };\n@@ -406,7 +407,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n-        for &(offset, (_tag, reloc)) in alloc.relocations().iter() {\n+        for &(offset, alloc_id) in alloc.relocations().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;\n@@ -417,7 +418,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            let reloc_target_alloc = tcx.get_global_alloc(reloc).unwrap();\n+            let reloc_target_alloc = tcx.get_global_alloc(alloc_id).unwrap();\n             let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);\n@@ -427,7 +428,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n-                    data_id_for_alloc_id(cx, module, reloc, target_alloc.mutability)\n+                    data_id_for_alloc_id(cx, module, alloc_id, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)"}]}