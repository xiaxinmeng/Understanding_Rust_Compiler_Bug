{"sha": "9f91195e2a2f08006450cb5ff2c73336bfb3ae84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOTExOTVlMmEyZjA4MDA2NDUwY2I1ZmYyYzczMzM2YmZiM2FlODQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T15:18:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T15:18:31Z"}, "message": "Rollup merge of #52654 - alecmocatta:master, r=alexcrichton\n\nFormat linker args in a way that works for gcc and ld\n\nPass multiple linker arguments rather than concatenate with commas (fixes #52634).\n\n`-l library` -> `-llibrary` to work with apple's ld.\n\nTo build with apple's ld I'm currently also passing `-C link-args=\"-arch x86_64 -macosx_version_min 10.13.0\"`. I'll try and understand the latter flag better before PRing that.\n\nThis PR currently works for me. Hopefully CI will pick up any grievous ramifications in other toolchains?\n\nThanks to @alexcrichton for the pointer to the relevant code!", "tree": {"sha": "20c54a14a78e18bc6fd53d5afeea30c52ebcfca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c54a14a78e18bc6fd53d5afeea30c52ebcfca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f91195e2a2f08006450cb5ff2c73336bfb3ae84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWeZHCRBK7hj4Ov3rIwAAdHIIAD+k+7BrnO4HWZKmsWwZP822\n5hqs9HWv+V0MbhbWAOhzS3s1xpjYdEkyPcLPTkJLfx3zP4Z+Bj8mQa6ftYsbgC/d\nJHt9Wov2yWhnrEMpyu20/OOGKPP0p28qSHUzqvgY7oWialVtXHEJ+9FO4YsDr+9m\ntWZdUk/xa1Ehce7/Fw5xPiMihKDzVqO7C8WHwefQqJ+KOPriTmYAtghVDYf+YGs3\ngbJ2ZG46LsryOfn6k6L6xnkTcCJovarvm/j342GDL/3LWFauu57lrF5j/cJMQexk\nE1/s6SiGdt8eapODCVn9sX1mG5Z2QPF3jVT3qpadL5K7wCSg7OzJG/M3GCM3kZQ=\n=47Ae\n-----END PGP SIGNATURE-----\n", "payload": "tree 20c54a14a78e18bc6fd53d5afeea30c52ebcfca9\nparent 2aec4e882c6136ff34d931043fb16bd35abedc3e\nparent 296a179b1cf5fc79c77c79cfa56e6c57e50b4613\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532618311 -0600\ncommitter GitHub <noreply@github.com> 1532618311 -0600\n\nRollup merge of #52654 - alecmocatta:master, r=alexcrichton\n\nFormat linker args in a way that works for gcc and ld\n\nPass multiple linker arguments rather than concatenate with commas (fixes #52634).\n\n`-l library` -> `-llibrary` to work with apple's ld.\n\nTo build with apple's ld I'm currently also passing `-C link-args=\"-arch x86_64 -macosx_version_min 10.13.0\"`. I'll try and understand the latter flag better before PRing that.\n\nThis PR currently works for me. Hopefully CI will pick up any grievous ramifications in other toolchains?\n\nThanks to @alexcrichton for the pointer to the relevant code!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f91195e2a2f08006450cb5ff2c73336bfb3ae84", "html_url": "https://github.com/rust-lang/rust/commit/9f91195e2a2f08006450cb5ff2c73336bfb3ae84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f91195e2a2f08006450cb5ff2c73336bfb3ae84/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aec4e882c6136ff34d931043fb16bd35abedc3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aec4e882c6136ff34d931043fb16bd35abedc3e", "html_url": "https://github.com/rust-lang/rust/commit/2aec4e882c6136ff34d931043fb16bd35abedc3e"}, {"sha": "296a179b1cf5fc79c77c79cfa56e6c57e50b4613", "url": "https://api.github.com/repos/rust-lang/rust/commits/296a179b1cf5fc79c77c79cfa56e6c57e50b4613", "html_url": "https://github.com/rust-lang/rust/commit/296a179b1cf5fc79c77c79cfa56e6c57e50b4613"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "f5bd31a67e5ce8b16569a65710846915a8a3e0f4", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f91195e2a2f08006450cb5ff2c73336bfb3ae84/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91195e2a2f08006450cb5ff2c73336bfb3ae84/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=9f91195e2a2f08006450cb5ff2c73336bfb3ae84", "patch": "@@ -218,24 +218,26 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n-    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(\"-l\").arg(lib); }\n-    fn link_staticlib(&mut self, lib: &str) { self.hint_static(); self.cmd.arg(\"-l\").arg(lib); }\n+    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(format!(\"-l{}\",lib)); }\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.hint_static(); self.cmd.arg(format!(\"-l{}\",lib));\n+    }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n     fn include_path(&mut self, path: &Path) { self.cmd.arg(\"-L\").arg(path); }\n     fn framework_path(&mut self, path: &Path) { self.cmd.arg(\"-F\").arg(path); }\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n     fn no_position_independent_executable(&mut self) { self.cmd.arg(\"-no-pie\"); }\n-    fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n-    fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n-    fn no_relro(&mut self) { self.linker_arg(\"-z,norelro\"); }\n+    fn full_relro(&mut self) { self.linker_arg(\"-zrelro\"); self.linker_arg(\"-znow\"); }\n+    fn partial_relro(&mut self) { self.linker_arg(\"-zrelro\"); }\n+    fn no_relro(&mut self) { self.linker_arg(\"-znorelro\"); }\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.hint_dynamic();\n-        self.cmd.arg(\"-l\").arg(lib);\n+        self.cmd.arg(format!(\"-l{}\",lib));\n     }\n \n     fn link_framework(&mut self, framework: &str) {\n@@ -253,23 +255,22 @@ impl<'a> Linker for GccLinker<'a> {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n-            self.linker_arg(\"--whole-archive\").cmd.arg(\"-l\").arg(lib);\n+            self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\",lib));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(&archive::find_library(lib, search_path, &self.sess));\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            let lib = archive::find_library(lib, search_path, &self.sess);\n+            self.linker_arg(&lib);\n         }\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n         if self.sess.target.target.options.is_like_osx {\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(lib);\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            self.linker_arg(&lib);\n         } else {\n             self.linker_arg(\"--whole-archive\").cmd.arg(lib);\n             self.linker_arg(\"--no-whole-archive\");\n@@ -294,8 +295,7 @@ impl<'a> Linker for GccLinker<'a> {\n         if self.sess.target.target.options.is_like_osx {\n             self.linker_arg(\"-dead_strip\");\n         } else if self.sess.target.target.options.is_like_solaris {\n-            self.linker_arg(\"-z\");\n-            self.linker_arg(\"ignore\");\n+            self.linker_arg(\"-zignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to\n@@ -369,7 +369,8 @@ impl<'a> Linker for GccLinker<'a> {\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n             if self.sess.opts.cg.rpath ||\n                self.sess.opts.debugging_opts.osx_rpath_install_name {\n-                let mut v = OsString::from(\"-install_name,@rpath/\");\n+                self.linker_arg(\"-install_name\");\n+                let mut v = OsString::from(\"@rpath/\");\n                 v.push(out_filename.file_name().unwrap());\n                 self.linker_arg(&v);\n             }\n@@ -448,7 +449,8 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n-        self.linker_arg(&format!(\"--subsystem,{}\", subsystem));\n+        self.linker_arg(\"--subsystem\");\n+        self.linker_arg(&subsystem);\n     }\n \n     fn finalize(&mut self) -> Command {"}]}