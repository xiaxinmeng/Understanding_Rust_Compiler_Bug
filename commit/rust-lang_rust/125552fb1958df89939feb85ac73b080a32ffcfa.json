{"sha": "125552fb1958df89939feb85ac73b080a32ffcfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTU1MmZiMTk1OGRmODk5MzlmZWI4NWFjNzNiMDgwYTMyZmZjZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-06T01:41:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-07T06:39:56Z"}, "message": "rustc: Add frame_address intrinsic", "tree": {"sha": "0c7971a04d08299d5438b6c4beded94bc3b2f125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7971a04d08299d5438b6c4beded94bc3b2f125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125552fb1958df89939feb85ac73b080a32ffcfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125552fb1958df89939feb85ac73b080a32ffcfa", "html_url": "https://github.com/rust-lang/rust/commit/125552fb1958df89939feb85ac73b080a32ffcfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125552fb1958df89939feb85ac73b080a32ffcfa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c816eea000f56e250bb251dc1a1d357efd5a0438", "url": "https://api.github.com/repos/rust-lang/rust/commits/c816eea000f56e250bb251dc1a1d357efd5a0438", "html_url": "https://github.com/rust-lang/rust/commit/c816eea000f56e250bb251dc1a1d357efd5a0438"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "7c57c90a5a46e29930fa05cda7f1f74ecfc0ed8b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=125552fb1958df89939feb85ac73b080a32ffcfa", "patch": "@@ -5301,6 +5301,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap<str, ValueRef> {\n     let T_memset64_args: [TypeRef] =\n         [T_ptr(T_i8()), T_i8(), T_i64(), T_i32(), T_i1()];\n     let T_trap_args: [TypeRef] = [];\n+    let T_frameaddress_args: [TypeRef] = [T_i32()];\n     let gcroot =\n         decl_cdecl_fn(llmod, \"llvm.gcroot\",\n                       T_fn([T_ptr(T_ptr(T_i8())), T_ptr(T_i8())], T_void()));\n@@ -5320,6 +5321,9 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap<str, ValueRef> {\n         decl_cdecl_fn(llmod, \"llvm.memset.p0i8.i64\",\n                       T_fn(T_memset64_args, T_void()));\n     let trap = decl_cdecl_fn(llmod, \"llvm.trap\", T_fn(T_trap_args, T_void()));\n+    let frameaddress = decl_cdecl_fn(llmod, \"llvm.frameaddress\",\n+                                     T_fn(T_frameaddress_args,\n+                                          T_ptr(T_i8())));\n     let intrinsics = str_hash::<ValueRef>();\n     intrinsics.insert(\"llvm.gcroot\", gcroot);\n     intrinsics.insert(\"llvm.gcread\", gcread);\n@@ -5328,6 +5332,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap<str, ValueRef> {\n     intrinsics.insert(\"llvm.memset.p0i8.i32\", memset32);\n     intrinsics.insert(\"llvm.memset.p0i8.i64\", memset64);\n     intrinsics.insert(\"llvm.trap\", trap);\n+    intrinsics.insert(\"llvm.frameaddress\", frameaddress);\n     ret intrinsics;\n }\n "}, {"sha": "1f399343f135455da07d29a0279692accd8b40e7", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=125552fb1958df89939feb85ac73b080a32ffcfa", "patch": "@@ -755,22 +755,44 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n \n     let mut cc = alt abi {\n-      ast::native_abi_rust_intrinsic { ret; }\n+      ast::native_abi_rust_intrinsic |\n       ast::native_abi_cdecl { lib::llvm::CCallConv }\n       ast::native_abi_stdcall { lib::llvm::X86StdcallCallConv }\n     };\n \n     for vec::each(native_mod.items) {|native_item|\n       alt native_item.node {\n-        ast::native_item_fn(fn_decl, _) {\n+        ast::native_item_fn(fn_decl, typarams) {\n           let id = native_item.id;\n-          let llwrapfn = get_item_val(ccx, id);\n-          let tys = c_stack_tys(ccx, id);\n-          if attr::attrs_contains_name(native_item.attrs, \"rust_stack\") {\n-              build_direct_fn(ccx, llwrapfn, native_item, tys, cc);\n+          if abi != ast::native_abi_rust_intrinsic {\n+              let llwrapfn = get_item_val(ccx, id);\n+              let tys = c_stack_tys(ccx, id);\n+              if attr::attrs_contains_name(native_item.attrs, \"rust_stack\") {\n+                  build_direct_fn(ccx, llwrapfn, native_item, tys, cc);\n+              } else {\n+                  let llshimfn = build_shim_fn(ccx, native_item, tys, cc);\n+                  build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n+              }\n           } else {\n-              let llshimfn = build_shim_fn(ccx, native_item, tys, cc);\n-              build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n+              // Intrinsics with type parameters are emitted by\n+              // monomorphic_fn, but ones without are emitted here\n+              if typarams.is_empty() {\n+                  let llwrapfn = get_item_val(ccx, id);\n+                  let path = alt ccx.tcx.items.find(id) {\n+                      some(ast_map::node_native_item(_, _, pt)) { pt }\n+                      _ {\n+                          ccx.sess.span_bug(native_item.span,\n+                                            \"can't find intrinsic path\")\n+                      }\n+                  };\n+                  let psubsts = {\n+                      tys: [],\n+                      vtables: none,\n+                      bounds: @[]\n+                  };\n+                  trans_intrinsic(ccx, llwrapfn, native_item,\n+                                  *path, psubsts, none);\n+              }\n           }\n         }\n       }\n@@ -783,31 +805,41 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n     let fcx = new_fn_ctxt_w_id(ccx, path, decl, item.id,\n                                some(substs), some(item.span));\n     let mut bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n-    let tp_ty = substs.tys[0], lltp_ty = type_of::type_of(ccx, tp_ty);\n     alt check item.ident {\n       \"size_of\" {\n+        let tp_ty = substs.tys[0];\n+        let lltp_ty = type_of::type_of(ccx, tp_ty);\n         Store(bcx, C_uint(ccx, shape::llsize_of_real(ccx, lltp_ty)),\n               fcx.llretptr);\n       }\n       \"min_align_of\" {\n+        let tp_ty = substs.tys[0];\n+        let lltp_ty = type_of::type_of(ccx, tp_ty);\n         Store(bcx, C_uint(ccx, shape::llalign_of_min(ccx, lltp_ty)),\n               fcx.llretptr);\n       }\n       \"pref_align_of\" {\n+        let tp_ty = substs.tys[0];\n+        let lltp_ty = type_of::type_of(ccx, tp_ty);\n         Store(bcx, C_uint(ccx, shape::llalign_of_pref(ccx, lltp_ty)),\n               fcx.llretptr);\n       }\n       \"get_tydesc\" {\n+        let tp_ty = substs.tys[0];\n         let td = get_tydesc_simple(ccx, tp_ty);\n         Store(bcx, PointerCast(bcx, td, T_ptr(T_nil())), fcx.llretptr);\n       }\n       \"init\" {\n+        let tp_ty = substs.tys[0];\n+        let lltp_ty = type_of::type_of(ccx, tp_ty);\n         if !ty::type_is_nil(tp_ty) {\n             Store(bcx, C_null(lltp_ty), fcx.llretptr);\n         }\n       }\n       \"forget\" {}\n       \"reinterpret_cast\" {\n+        let tp_ty = substs.tys[0];\n+        let lltp_ty = type_of::type_of(ccx, tp_ty);\n         let llout_ty = type_of::type_of(ccx, substs.tys[1]);\n         let tp_sz = shape::llsize_of_real(ccx, lltp_ty),\n             out_sz = shape::llsize_of_real(ccx, llout_ty);\n@@ -831,6 +863,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n         Store(bcx, get_param(decl, first_real_arg), fcx.llretptr);\n       }\n       \"needs_drop\" {\n+        let tp_ty = substs.tys[0];\n         Store(bcx, C_bool(ty::type_needs_drop(ccx.tcx, tp_ty)),\n               fcx.llretptr);\n       }\n@@ -839,6 +872,11 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n         let visitor = get_param(decl, first_real_arg);\n         call_tydesc_glue(bcx, visitor, tp_ty, abi::tydesc_field_visit_glue);\n       }\n+      \"frame_address\" {\n+        let frameaddress = ccx.intrinsics.get(\"llvm.frameaddress\");\n+        let frameaddress_val = Call(bcx, frameaddress, [C_i32(0i32)]);\n+        Store(bcx, frameaddress_val, fcx.llretptr);\n+      }\n     }\n     build_return(bcx);\n     finish_fn(fcx, lltop);"}, {"sha": "a6bb333c34e2b2ce4789935d441429587e481a2c", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=125552fb1958df89939feb85ac73b080a32ffcfa", "patch": "@@ -2317,7 +2317,9 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n         let (_, visitor_iface) = ccx.tcx.intrinsic_ifaces.get(\"ty_visitor\");\n         (1u, [arg(ast::by_ref, visitor_iface)], ty::mk_nil(tcx))\n       }\n-\n+      \"frame_address\" {\n+        (0u, [], ty::mk_imm_ptr(tcx, ty::mk_mach_uint(tcx, ast::ty_u8)))\n+      }\n       other {\n         tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +\n                           other + \"`\");"}, {"sha": "072f5cf8e886036a2bf4829ec6bd07887fe82cc7", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125552fb1958df89939feb85ac73b080a32ffcfa/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=125552fb1958df89939feb85ac73b080a32ffcfa", "patch": "@@ -0,0 +1,8 @@\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n+    fn frame_address() -> *u8;\n+}\n+\n+fn main() {\n+    assert rusti::frame_address().is_not_null();\n+}"}]}