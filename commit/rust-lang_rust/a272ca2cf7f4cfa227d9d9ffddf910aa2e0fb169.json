{"sha": "a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169", "node_id": "C_kwDOAAsO6NoAKGEyNzJjYTJjZjdmNGNmYTIyN2Q5ZDlmZmRkZjkxMGFhMmUwZmIxNjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T00:18:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T01:50:19Z"}, "message": "add another weak mem consistency test", "tree": {"sha": "e1e61bedc02ff7fd9fcf8f04e5358a1b36e758e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1e61bedc02ff7fd9fcf8f04e5358a1b36e758e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169", "html_url": "https://github.com/rust-lang/rust/commit/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9de3117458aa5b7e249e1aaa2e3757eaad7834", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9de3117458aa5b7e249e1aaa2e3757eaad7834", "html_url": "https://github.com/rust-lang/rust/commit/4e9de3117458aa5b7e249e1aaa2e3757eaad7834"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "668635d7ff8ae495dbbc08844bd473c84ae2f66f", "filename": "tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169/tests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169/tests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0weak_memory_consistency.rs?ref=a272ca2cf7f4cfa227d9d9ffddf910aa2e0fb169", "patch": "@@ -20,8 +20,8 @@\n // \"Mathematizing C++ concurrency\", ACM SIGPLAN Notices, vol. 46, no. 1, pp. 55-66, 2011.\n // Available: https://ss265.host.cs.st-andrews.ac.uk/papers/n3132.pdf.\n \n-use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;\n+use std::sync::atomic::{fence, AtomicBool, AtomicI32};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -32,13 +32,17 @@ unsafe impl<T> Sync for EvilSend<T> {}\n \n // We can't create static items because we need to run each test\n // multiple times\n-fn static_atomic(val: usize) -> &'static AtomicUsize {\n-    let ret = Box::leak(Box::new(AtomicUsize::new(val)));\n+fn static_atomic(val: i32) -> &'static AtomicI32 {\n+    let ret = Box::leak(Box::new(AtomicI32::new(val)));\n+    ret\n+}\n+fn static_atomic_bool(val: bool) -> &'static AtomicBool {\n+    let ret = Box::leak(Box::new(AtomicBool::new(val)));\n     ret\n }\n \n // Spins until it acquires a pre-determined value.\n-fn acquires_value(loc: &AtomicUsize, val: usize) -> usize {\n+fn acquires_value(loc: &AtomicI32, val: i32) -> i32 {\n     while loc.load(Acquire) != val {\n         std::hint::spin_loop();\n     }\n@@ -207,7 +211,7 @@ fn test_sc_store_buffering() {\n }\n \n fn test_single_thread() {\n-    let x = AtomicUsize::new(42);\n+    let x = AtomicI32::new(42);\n \n     assert_eq!(x.load(Relaxed), 42);\n \n@@ -216,6 +220,42 @@ fn test_single_thread() {\n     assert_eq!(x.load(Relaxed), 43);\n }\n \n+fn test_sync_through_rmw_and_fences() {\n+    // Example from https://github.com/llvm/llvm-project/issues/56450#issuecomment-1183695905\n+    #[no_mangle]\n+    pub fn rdmw(storing: &AtomicI32, sync: &AtomicI32, loading: &AtomicI32) -> i32 {\n+        storing.store(1, Relaxed);\n+        fence(Release);\n+        sync.fetch_add(0, Relaxed);\n+        fence(Acquire);\n+        loading.load(Relaxed)\n+    }\n+\n+    let x = static_atomic(0);\n+    let y = static_atomic(0);\n+    let z = static_atomic(0);\n+\n+    // Since each thread is so short, we need to make sure that they truely run at the same time\n+    // Otherwise t1 will finish before t2 even starts\n+    let go = static_atomic_bool(false);\n+\n+    let t1 = spawn(move || {\n+        while !go.load(Relaxed) {}\n+        rdmw(y, x, z)\n+    });\n+\n+    let t2 = spawn(move || {\n+        while !go.load(Relaxed) {}\n+        rdmw(z, x, y)\n+    });\n+\n+    go.store(true, Relaxed);\n+\n+    let a = t1.join().unwrap();\n+    let b = t2.join().unwrap();\n+    assert_ne!((a, b), (0, 0));\n+}\n+\n pub fn main() {\n     for _ in 0..50 {\n         test_single_thread();\n@@ -225,5 +265,6 @@ pub fn main() {\n         test_wrc();\n         test_corr();\n         test_sc_store_buffering();\n+        test_sync_through_rmw_and_fences();\n     }\n }"}]}