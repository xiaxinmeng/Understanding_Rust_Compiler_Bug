{"sha": "105e90f8365e37df5c79b1a69db2f43ea420740f", "node_id": "C_kwDOAAsO6NoAKDEwNWU5MGY4MzY1ZTM3ZGY1Yzc5YjFhNjlkYjJmNDNlYTQyMDc0MGY", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-04T18:54:01Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-04T18:54:01Z"}, "message": "fixed error, made function leaner and tighter", "tree": {"sha": "04897ea10a620acfc2ce5bd7918c669e3f2f8aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04897ea10a620acfc2ce5bd7918c669e3f2f8aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105e90f8365e37df5c79b1a69db2f43ea420740f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105e90f8365e37df5c79b1a69db2f43ea420740f", "html_url": "https://github.com/rust-lang/rust/commit/105e90f8365e37df5c79b1a69db2f43ea420740f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105e90f8365e37df5c79b1a69db2f43ea420740f/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4332b5f90303ac2aa7a8c8f036962b72cd420ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4332b5f90303ac2aa7a8c8f036962b72cd420ac4", "html_url": "https://github.com/rust-lang/rust/commit/4332b5f90303ac2aa7a8c8f036962b72cd420ac4"}], "stats": {"total": 158, "additions": 69, "deletions": 89}, "files": [{"sha": "c6efe79caafb14b1a2a4bf6e8e5452916cbdfe8f", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -11,41 +11,46 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         for (i, stmt) in data.statements.iter_mut().enumerate() {\n             match stmt.kind {\n                 StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n-                    if borrow_knd == (BorrowKind::Mut { allow_two_phase_borrow: false }) {\n-                        for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n-                            if p_elem == ProjectionElem::Deref {\n-                                // The type that we are derefing\n-                                let ty = p_ref.ty(local_decl, tcx).ty;\n-                                let temp = patch.new_temp(ty, stmt.source_info.span);\n+                    for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n+                        if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n+                            // The type that we are derefing\n+                            let ty = p_ref.ty(local_decl, tcx).ty;\n+                            let temp = patch.new_temp(ty, stmt.source_info.span);\n \n-                                // Because we are assigning this right before original statement\n-                                // we are using index i of statement\n-                                let loc = Location { block: block, statement_index: i };\n-                                patch.add_statement(loc, StatementKind::StorageLive(temp));\n+                            // Because we are assigning this right before original statement\n+                            // we are using index i of statement\n+                            let loc = Location { block: block, statement_index: i };\n+                            patch.add_statement(loc, StatementKind::StorageLive(temp));\n \n-                                // We are adding current p_ref's projections to our\n-                                // temp value\n-                                let deref_place =\n-                                    Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n-                                patch.add_assign(\n-                                    loc,\n-                                    Place::from(temp),\n-                                    Rvalue::Use(Operand::Move(deref_place)),\n-                                );\n+                            // We are adding current p_ref's projections to our\n+                            // temp value\n+                            let deref_place =\n+                                Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n+                            patch.add_assign(\n+                                loc,\n+                                Place::from(temp),\n+                                Rvalue::Use(Operand::Move(deref_place)),\n+                            );\n \n-                                // We are creating a place by using our temp value's location\n-                                // and copying derefed values we need to it\n-                                let temp_place =\n-                                    Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n-                                patch.add_assign(\n-                                    loc,\n+                            // We are creating a place by using our temp value's location\n+                            // and copying derefed values which we need to create new statement\n+                            let temp_place =\n+                                Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n+                            patch.add_assign(\n+                                loc,\n+                                og_place,\n+                                Rvalue::Ref(region, borrow_knd, temp_place),\n+                            );\n+\n+                            let new_stmt = Statement {\n+                                source_info: stmt.source_info,\n+                                kind: StatementKind::Assign(Box::new((\n                                     og_place,\n                                     Rvalue::Ref(region, borrow_knd, temp_place),\n-                                );\n-                                // We have to delete the original statement since we just\n-                                // replaced it\n-                                stmt.make_nop();\n-                            }\n+                                ))),\n+                            };\n+                            // Replace current statement with newly created one\n+                            *stmt = new_stmt;\n                         }\n                     }\n                 }"}, {"sha": "018049519cf3bfecd11c86b153e39ce4a00d03dc", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -38,13 +38,13 @@\n +         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         _6 = move (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         nop;                             // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n           StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n -         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         _7 = move (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         nop;                             // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n           _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n           StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:7:1: 7:2\n           StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:7:1: 7:2"}, {"sha": "e9c02cf2c67674e90163770ed2ddb1ccb74fa72b", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -6,35 +6,23 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _2: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-    let mut _5: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-    let mut _6: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        let mut _7: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        let mut _8: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        let mut _9: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _8 = move _4;                    // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _7 = &mut (*_8);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _9 = move _7;                    // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _3 = &mut (*_9);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _5 = move _3;                    // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _2 = &mut (*_5);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _6 = move _2;                    // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _0 = &mut (*_6);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:1: 4:2\n         return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:4:2: 4:2"}, {"sha": "76a83972c65fc7f0662a53ea3cf6653f318fbed3", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -6,46 +6,31 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _2: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-    let mut _5: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-    let mut _6: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _7: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _8: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _9: &mut std::boxed::Box<T>; // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _10: std::boxed::Box<T>; // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _11: &mut T;             // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        let mut _12: &mut T;             // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _7: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_9);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _9 = move _4;                    // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _8 = &mut (*(*_9));              // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_10);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _10 = move (*_4);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _8 = &mut (*_10);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_11);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _11 = move _8;                   // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _7 = &mut (*_11);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_12);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _12 = move _7;                   // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _3 = &mut (*_12);                // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageDead(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        StorageLive(_5);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _5 = move _3;                    // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _2 = &mut (*_5);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _7 = move (*_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _6 = move _2;                    // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _0 = &mut (*_6);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:9:2: 9:2"}, {"sha": "433458ed924b2c1316338a255095e54dd5b1c007", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -7,13 +7,17 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        _2 = &(*(*_3));                  // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _4 = move (*_3);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}, {"sha": "06216efcec04e3127946cd4509af3b4f3ead63e5", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -5,17 +5,14 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:48:9: 48:9\n -     let _1: &mut u32;                    // in scope 0 at $DIR/simplify-locals.rs:50:14: 50:20\n -     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:50:19: 50:20\n--     let mut _3: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:50:14: 50:20\n       scope 1 {\n       }\n   \n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:5: 50:22\n -         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:50:19: 50:20\n -         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:50:19: 50:20\n--         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n--         _3 = move _2;                    // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n--         _1 = &mut (*_3);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n+-         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n           return;                          // scope 0 at $DIR/simplify-locals.rs:51:2: 51:2"}, {"sha": "ee9d2934afd4093dea5e0b59b63ba1bb0f77aa75", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -6,7 +6,6 @@\n -     let _1: u32;                         // in scope 0 at $DIR/simplify-locals.rs:56:14: 56:21\n -     let mut _2: &mut u32;                // in scope 0 at $DIR/simplify-locals.rs:56:15: 56:21\n -     let mut _3: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:56:20: 56:21\n--     let mut _4: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:56:15: 56:21\n       scope 1 {\n       }\n   \n@@ -15,9 +14,7 @@\n -         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n -         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:56:20: 56:21\n -         _3 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:56:20: 56:21\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n--         _4 = move _3;                    // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n--         _2 = &mut (*_4);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n+-         _2 = &mut (*_3);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n -         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:56:14: 56:21\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24"}, {"sha": "4e8936905c440a3fbd0b3f6f6163121c19543698", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/105e90f8365e37df5c79b1a69db2f43ea420740f/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=105e90f8365e37df5c79b1a69db2f43ea420740f", "patch": "@@ -23,6 +23,10 @@ fn foo() -> i32 {\n         _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n         return;                          // scope 0 at main.rs:6:2: 6:2\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at main.rs:4:1: 6:2\n+    }\n }\n \n fn main() -> () {"}]}