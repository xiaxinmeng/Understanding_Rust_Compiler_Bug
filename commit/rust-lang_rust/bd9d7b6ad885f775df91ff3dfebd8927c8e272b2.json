{"sha": "bd9d7b6ad885f775df91ff3dfebd8927c8e272b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOWQ3YjZhZDg4NWY3NzVkZjkxZmYzZGZlYmQ4OTI3YzhlMjcyYjI=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-05T12:26:46Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-05T12:26:46Z"}, "message": "Remove hover actions heavy tests.", "tree": {"sha": "538b04053020abd3bb91cb6466fbe6e9599b974b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/538b04053020abd3bb91cb6466fbe6e9599b974b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2", "html_url": "https://github.com/rust-lang/rust/commit/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c9223b7bd4bffe64b7ec69e5fee08604dc0057", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c9223b7bd4bffe64b7ec69e5fee08604dc0057", "html_url": "https://github.com/rust-lang/rust/commit/78c9223b7bd4bffe64b7ec69e5fee08604dc0057"}], "stats": {"total": 180, "additions": 0, "deletions": 180}, "files": [{"sha": "ad347631054b7f8ae6c1f4dd3ec0d7570c0970ab", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9d7b6ad885f775df91ff3dfebd8927c8e272b2/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=bd9d7b6ad885f775df91ff3dfebd8927c8e272b2", "patch": "@@ -715,183 +715,3 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n }\n-\n-#[test]\n-fn test_client_support_hover_actions() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let server = Project::with_fixture(\n-        r#\"\n-//- Cargo.toml\n-[package]\n-name = \"foo\"\n-version = \"0.0.0\"\n-\n-//- src/lib.rs\n-struct Foo(u32);\n-\n-struct NoImpl(u32);\n-\n-impl Foo {\n-    fn new() -> Self {\n-        Self(1)\n-    }\n-}\n-\"#,\n-    )\n-    .with_config(|config| {\n-        config.client_caps.hover_actions = true;\n-    })\n-    .server();\n-\n-    server.wait_until_workspace_is_loaded();\n-\n-    // has 1 implementation\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(0, 9),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!({\n-            \"actions\": [{\n-                \"commands\": [{\n-                    \"arguments\": [\n-                      \"file:///[..]src/lib.rs\",\n-                      {\n-                        \"character\": 7,\n-                        \"line\": 0\n-                      },\n-                      [{\n-                          \"range\": { \"end\": { \"character\": 1, \"line\": 8 }, \"start\": { \"character\": 0, \"line\": 4 } },\n-                          \"uri\": \"file:///[..]src/lib.rs\"\n-                      }]\n-                    ],\n-                    \"command\": \"rust-analyzer.showReferences\",\n-                    \"title\": \"1 implementation\",\n-                    \"tooltip\": \"Go to implementations\"\n-                }]\n-            }],\n-            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct Foo\\n```\" },\n-            \"range\": { \"end\": { \"character\": 10, \"line\": 0 }, \"start\": { \"character\": 7, \"line\": 0 } }\n-        })\n-    );\n-\n-    // no hover\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(1, 0),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!(null),\n-    );\n-\n-    // no implementations\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(2, 12),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!({\n-            \"actions\": [{\n-                \"commands\": [{\n-                    \"arguments\": [\n-                      \"file:///[..]src/lib.rs\",\n-                      { \"character\": 7, \"line\": 2 },\n-                      []\n-                    ],\n-                    \"command\": \"rust-analyzer.showReferences\",\n-                    \"title\": \"0 implementations\",\n-                    \"tooltip\": \"Go to implementations\"\n-                }]\n-            }],\n-            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct NoImpl\\n```\" },\n-            \"range\": { \"end\": { \"character\": 13, \"line\": 2 }, \"start\": { \"character\": 7, \"line\": 2 } }\n-        })\n-    );\n-}\n-\n-#[test]\n-fn test_client_does_not_support_hover_actions() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let server = Project::with_fixture(\n-        r#\"\n-//- Cargo.toml\n-[package]\n-name = \"foo\"\n-version = \"0.0.0\"\n-\n-//- src/lib.rs\n-struct Foo(u32);\n-\n-struct NoImpl(u32);\n-\n-impl Foo {\n-    fn new() -> Self {\n-        Self(1)\n-    }\n-}\n-\"#,\n-    )\n-    .with_config(|config| {\n-        config.client_caps.hover_actions = false;\n-    })\n-    .server();\n-\n-    server.wait_until_workspace_is_loaded();\n-\n-    // has 1 implementation\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(0, 9),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!({\n-            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct Foo\\n```\" },\n-            \"range\": { \"end\": { \"character\": 10, \"line\": 0 }, \"start\": { \"character\": 7, \"line\": 0 } }\n-        })\n-    );\n-\n-    // no hover\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(1, 0),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!(null),\n-    );\n-\n-    // no implementations\n-    server.request::<HoverRequest>(\n-        HoverParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/lib.rs\"),\n-                Position::new(2, 12),\n-            ),\n-            work_done_progress_params: Default::default(),\n-        },\n-        json!({\n-            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct NoImpl\\n```\" },\n-            \"range\": { \"end\": { \"character\": 13, \"line\": 2 }, \"start\": { \"character\": 7, \"line\": 2 } }\n-        })\n-    );\n-}"}]}