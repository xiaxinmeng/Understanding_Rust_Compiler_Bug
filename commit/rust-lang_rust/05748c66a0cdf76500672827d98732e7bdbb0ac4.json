{"sha": "05748c66a0cdf76500672827d98732e7bdbb0ac4", "node_id": "C_kwDOAAsO6NoAKDA1NzQ4YzY2YTBjZGY3NjUwMDY3MjgyN2Q5ODczMmU3YmRiYjBhYzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-08T17:32:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-08T17:32:41Z"}, "message": "Rollup merge of #107271 - Zeegomo:drop-rmw, r=oli-obk\n\nTreat Drop as a rmw operation\n\nPreviously, a Drop terminator was considered a move in MIR. This commit changes the behavior to only treat Drop as a mutable access to the dropped place.\n\nIn order for this change to be correct, we need to guarantee that\n\n1.  A dropped value won't be used again\n   2.  Places that appear in a drop won't be used again before a\n     subsequent initialization.\n\nWe can ensure this to be correct at MIR construction because Drop will only be emitted when a variable goes out of scope, thus having:\n*   (1) as there is no way of reaching the old value. drop-elaboration\n     will also remove any uninitialized drop.\n * (2) as the place can't be named following the end of the scope.\n\nHowever, the initialization status, previously tracked by moves, should also be tied to the execution of a Drop, hence the additional logic in the dataflow analyses.\n\nFrom discussion in [this thread](https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/.60DROP.60.20to.20.60DROP_IF.60.20compiler-team.23558), originating from https://github.com/rust-lang/compiler-team/issues/558.\nSee also https://github.com/rust-lang/rust/pull/104488#discussion_r1085556010", "tree": {"sha": "507c50cd9be02b3e3d951d7ed09fdc978ebd6b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507c50cd9be02b3e3d951d7ed09fdc978ebd6b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05748c66a0cdf76500672827d98732e7bdbb0ac4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj49y5CRBK7hj4Ov3rIwAApnwIAHVSlepewz1EpCKQ/zOovv8P\naBurXq1uq6+ptACJKx9pXSDq6UzRzx2XauipRHvNNdiJRCgWqgbEBfNLETlFZjlL\nyphZeZTsFI6IK1Kuz6ipc48OyF3q4TwwscKnlr7+FaCi+YtBfAcHIn0EiiSEQ9z9\nw2F8fnHjwcth4AOh1Td8px73neBTf84xRuem4xXnJrty5GniwbXpiFJ7e+zBEKI3\nQ5RgWGFkPPTshi//otIb34ahS6NHr74xBVp9SEbf5e9vPkrkg8joq/qCREZnhDrx\nZzUtYPFOEu5eExjdWx9L4eplfeC9i7Mi5KHZST+fnXuZkpKGgTGKqJ+wP5RyTWc=\n=rlFi\n-----END PGP SIGNATURE-----\n", "payload": "tree 507c50cd9be02b3e3d951d7ed09fdc978ebd6b6e\nparent 562581c2db7ae9294e16f84deeef1dcdaae18152\nparent 68c1e2fd484b430726881f822311b4e9aa9c044d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675877561 +0100\ncommitter GitHub <noreply@github.com> 1675877561 +0100\n\nRollup merge of #107271 - Zeegomo:drop-rmw, r=oli-obk\n\nTreat Drop as a rmw operation\n\nPreviously, a Drop terminator was considered a move in MIR. This commit changes the behavior to only treat Drop as a mutable access to the dropped place.\n\nIn order for this change to be correct, we need to guarantee that\n\n1.  A dropped value won't be used again\n   2.  Places that appear in a drop won't be used again before a\n     subsequent initialization.\n\nWe can ensure this to be correct at MIR construction because Drop will only be emitted when a variable goes out of scope, thus having:\n*   (1) as there is no way of reaching the old value. drop-elaboration\n     will also remove any uninitialized drop.\n * (2) as the place can't be named following the end of the scope.\n\nHowever, the initialization status, previously tracked by moves, should also be tied to the execution of a Drop, hence the additional logic in the dataflow analyses.\n\nFrom discussion in [this thread](https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/.60DROP.60.20to.20.60DROP_IF.60.20compiler-team.23558), originating from https://github.com/rust-lang/compiler-team/issues/558.\nSee also https://github.com/rust-lang/rust/pull/104488#discussion_r1085556010\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05748c66a0cdf76500672827d98732e7bdbb0ac4", "html_url": "https://github.com/rust-lang/rust/commit/05748c66a0cdf76500672827d98732e7bdbb0ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05748c66a0cdf76500672827d98732e7bdbb0ac4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562581c2db7ae9294e16f84deeef1dcdaae18152", "url": "https://api.github.com/repos/rust-lang/rust/commits/562581c2db7ae9294e16f84deeef1dcdaae18152", "html_url": "https://github.com/rust-lang/rust/commit/562581c2db7ae9294e16f84deeef1dcdaae18152"}, {"sha": "68c1e2fd484b430726881f822311b4e9aa9c044d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c1e2fd484b430726881f822311b4e9aa9c044d", "html_url": "https://github.com/rust-lang/rust/commit/68c1e2fd484b430726881f822311b4e9aa9c044d"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "0d466bbe56e01d82b7d5550ca8dc2688495c3a0c", "filename": "compiler/rustc_mir_dataflow/src/drop_flag_effects.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs?ref=05748c66a0cdf76500672827d98732e7bdbb0ac4", "patch": "@@ -1,5 +1,5 @@\n use crate::elaborate_drops::DropFlagState;\n-use rustc_middle::mir::{self, Body, Location};\n+use rustc_middle::mir::{self, Body, Location, Terminator, TerminatorKind};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n@@ -194,6 +194,17 @@ pub fn drop_flag_effects_for_location<'tcx, F>(\n         on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))\n     }\n \n+    // Drop does not count as a move but we should still consider the variable uninitialized.\n+    if let Some(Terminator { kind: TerminatorKind::Drop { place, .. }, .. }) =\n+        body.stmt_at(loc).right()\n+    {\n+        if let LookupResult::Exact(mpi) = move_data.rev_lookup.find(place.as_ref()) {\n+            on_all_children_bits(tcx, body, move_data, mpi, |mpi| {\n+                callback(mpi, DropFlagState::Absent)\n+            })\n+        }\n+    }\n+\n     debug!(\"drop_flag_effects: assignment for location({:?})\", loc);\n \n     for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));"}, {"sha": "115c8afcce0cf7c15964bd53b175366c0ac6b7fd", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=05748c66a0cdf76500672827d98732e7bdbb0ac4", "patch": "@@ -376,7 +376,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::Unreachable => {}\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Drop { .. } => {}\n \n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n@@ -391,10 +392,6 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.create_move_path(place);\n                 self.gather_init(place.as_ref(), InitKind::Deep);\n             }\n-\n-            TerminatorKind::Drop { place, target: _, unwind: _ } => {\n-                self.gather_move(place);\n-            }\n             TerminatorKind::DropAndReplace { place, ref value, .. } => {\n                 self.create_move_path(place);\n                 self.gather_operand(value);"}, {"sha": "a6ef2a742c8736219f84946e85a8e6e44ee2c544", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=05748c66a0cdf76500672827d98732e7bdbb0ac4", "patch": "@@ -223,13 +223,13 @@ pub trait ValueAnalysis<'tcx> {\n         self.super_terminator(terminator, state)\n     }\n \n-    fn super_terminator(&self, terminator: &Terminator<'tcx>, _state: &mut State<Self::Value>) {\n+    fn super_terminator(&self, terminator: &Terminator<'tcx>, state: &mut State<Self::Value>) {\n         match &terminator.kind {\n             TerminatorKind::Call { .. } | TerminatorKind::InlineAsm { .. } => {\n                 // Effect is applied by `handle_call_return`.\n             }\n-            TerminatorKind::Drop { .. } => {\n-                // We don't track dropped places.\n+            TerminatorKind::Drop { place, .. } => {\n+                state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n             }\n             TerminatorKind::DropAndReplace { .. } | TerminatorKind::Yield { .. } => {\n                 // They would have an effect, but are not allowed in this phase."}, {"sha": "c2ff8645635e01597ea6c0d55ece679df9e80f9f", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05748c66a0cdf76500672827d98732e7bdbb0ac4/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=05748c66a0cdf76500672827d98732e7bdbb0ac4", "patch": "@@ -18,6 +18,35 @@ use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use std::fmt;\n \n+/// During MIR building, Drop and DropAndReplace terminators are inserted in every place where a drop may occur.\n+/// However, in this phase, the presence of these terminators does not guarantee that a destructor will run,\n+/// as the target of the drop may be uninitialized.\n+/// In general, the compiler cannot determine at compile time whether a destructor will run or not.\n+///\n+/// At a high level, this pass refines Drop and DropAndReplace to only run the destructor if the\n+/// target is initialized. The way this is achievied is by inserting drop flags for every variable\n+/// that may be dropped, and then using those flags to determine whether a destructor should run.\n+/// This pass also removes DropAndReplace, replacing it with a Drop paired with an assign statement.\n+/// Once this is complete, Drop terminators in the MIR correspond to a call to the \"drop glue\" or\n+/// \"drop shim\" for the type of the dropped place.\n+///\n+/// This pass relies on dropped places having an associated move path, which is then used to determine\n+/// the initialization status of the place and its descendants.\n+/// It's worth noting that a MIR containing a Drop without an associated move path is probably ill formed,\n+/// as it would allow running a destructor on a place behind a reference:\n+///\n+/// ```text\n+// fn drop_term<T>(t: &mut T) {\n+//     mir!(\n+//         {\n+//             Drop(*t, exit)\n+//         }\n+//         exit = {\n+//             Return()\n+//         }\n+//     )\n+// }\n+/// ```\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {"}]}