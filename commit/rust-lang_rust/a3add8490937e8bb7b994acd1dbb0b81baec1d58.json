{"sha": "a3add8490937e8bb7b994acd1dbb0b81baec1d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYWRkODQ5MDkzN2U4YmI3Yjk5NGFjZDFkYmIwYjgxYmFlYzFkNTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-12T23:44:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-12T23:44:57Z"}, "message": "rustc: Remove some interior vectors from typestate and some useless vec-related imports", "tree": {"sha": "61a0ade076a9b62714f62a83042ccaf54681af10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a0ade076a9b62714f62a83042ccaf54681af10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3add8490937e8bb7b994acd1dbb0b81baec1d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3add8490937e8bb7b994acd1dbb0b81baec1d58", "html_url": "https://github.com/rust-lang/rust/commit/a3add8490937e8bb7b994acd1dbb0b81baec1d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3add8490937e8bb7b994acd1dbb0b81baec1d58/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd0fffcce5a0f47747bc30b31f8c2c37b3ef746", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd0fffcce5a0f47747bc30b31f8c2c37b3ef746", "html_url": "https://github.com/rust-lang/rust/commit/ccd0fffcce5a0f47747bc30b31f8c2c37b3ef746"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "3c259b87e278eb013cd26ccb9fb9c2a10f4d3c47", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -15,9 +15,7 @@\n import std::int;\n import std::str;\n import std::uint;\n-import std::vec;\n import std::str::rustrt::sbuf;\n-import std::vec::rustrt::vbuf;\n import std::map;\n import std::map::hashmap;\n import std::option;\n@@ -256,10 +254,10 @@ type fn_ctxt =\n         // Derived tydescs are tydescs created at runtime, for types that\n         // involve type parameters inside type constructors.  For example,\n         // suppose a function parameterized by T creates a vector of type\n-        // vec[T].  The function doesn't know what T is until runtime, and the\n+        // [T].  The function doesn't know what T is until runtime, and the\n         // function's caller knows T but doesn't know that a vector is\n-        // involved.  So a tydesc for vec[T] can't be created until runtime,\n-        // when information about both \"vec\" and \"T\" are available.  When such\n+        // involved.  So a tydesc for [T] can't be created until runtime,\n+        // when information about both \"[T]\" and \"T\" are available.  When such\n         // a tydesc is created, we cache it in the derived_tydescs table for\n         // the next time that such a tydesc is needed.\n         hashmap[ty::t, derived_tydesc_info] derived_tydescs,"}, {"sha": "ea9ae5ad5c37b772f5ddb78e876fb03dac2077e6", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -591,14 +591,10 @@ fn expr_to_constr(ty::ctxt tcx, &@expr e) -> constr {\n              expr_call(?operator, ?args)) {\n             alt (operator.node) {\n                 case (expr_path(?p)) {\n-                    // FIXME: Remove this vec->ivec conversion.\n-                    auto args_ivec = ~[];\n-                    for (@expr e in args) { args_ivec += ~[e]; }\n-\n                     ret respan(e.span,\n                                rec(id=node_id_for_constr(tcx, operator.id),\n                                    c=npred(p, exprs_to_constr_args(tcx,\n-                                        args_ivec))));\n+                                           args))));\n                 }\n                 case (_) {\n                     tcx.sess.span_fatal(operator.span,\n@@ -698,9 +694,9 @@ type inst = tup(ident, def_id);\n type subst = tup(inst, inst)[];\n \n fn find_instances(&fn_ctxt fcx, &subst subst, &constraint c)\n-    -> vec[tup(uint, uint)] {\n+        -> (tup(uint, uint))[] {\n    \n-    let vec[tup(uint, uint)] rslt = [];\n+    let (tup(uint, uint))[] rslt = ~[];\n     if (ivec::len(subst) == 0u) {\n         ret rslt;\n     }\n@@ -714,7 +710,7 @@ fn find_instances(&fn_ctxt fcx, &subst subst, &constraint c)\n                     auto new = replace(subst, d);\n                     alt (find_instance_(new, *descs)) {\n                         case (some(?d1)) {\n-                            rslt += [tup(old_bit_num, d1)];\n+                            rslt += ~[tup(old_bit_num, d1)];\n                         }\n                         case (_) { }\n                     }"}, {"sha": "e873fa7a9ff696902e5b865eedcce5dcc98b0c1a", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -1,7 +1,4 @@\n import std::ivec;\n-import std::vec;\n-import std::vec::plus_option;\n-import std::vec::cat_options;\n import std::option;\n import std::option::get;\n import std::option::is_none;"}, {"sha": "1ba90017bd8c536a46cca7364acb4356fb150468", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -1,5 +1,4 @@\n import std::ivec;\n-import std::vec;\n import std::option;\n import std::map::hashmap;\n import driver::session::session;"}, {"sha": "8c02d2e1e2f9c5a118a704604a63d2bb5289243e", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -7,7 +7,6 @@\n  */\n import std::ivec;\n import std::str;\n-import std::vec;\n import std::option;\n import std::generic_os;\n import base::*;"}, {"sha": "36fe252bf3ec9689e3bdc355ec8caf9fa3ab3925", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3add8490937e8bb7b994acd1dbb0b81baec1d58/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=a3add8490937e8bb7b994acd1dbb0b81baec1d58", "patch": "@@ -174,14 +174,6 @@ fn lit_eq(&@ast::lit l, &@ast::lit m) -> bool {\n     }\n }\n \n-// FIXME move to vec\n-fn any[T](&fn(&T) -> bool f, &vec[T] v) -> bool {\n-    for (T t in v) {\n-        if (f(t)) { ret true; } \n-    }\n-    ret false;\n-}\n-\n tag call_kind {\n     kind_call;\n     kind_spawn;"}]}