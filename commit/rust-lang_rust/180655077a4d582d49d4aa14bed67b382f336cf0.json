{"sha": "180655077a4d582d49d4aa14bed67b382f336cf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDY1NTA3N2E0ZDU4MmQ0OWQ0YWExNGJlZDY3YjM4MmYzMzZjZjA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-14T18:26:21Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-17T01:31:52Z"}, "message": "Fix 1099", "tree": {"sha": "c56007d36c734876481a5312bc79effd83f23bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56007d36c734876481a5312bc79effd83f23bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/180655077a4d582d49d4aa14bed67b382f336cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/180655077a4d582d49d4aa14bed67b382f336cf0", "html_url": "https://github.com/rust-lang/rust/commit/180655077a4d582d49d4aa14bed67b382f336cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/180655077a4d582d49d4aa14bed67b382f336cf0/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546d9be2a7bf7b3942c125f922a01321aea6ad26", "url": "https://api.github.com/repos/rust-lang/rust/commits/546d9be2a7bf7b3942c125f922a01321aea6ad26", "html_url": "https://github.com/rust-lang/rust/commit/546d9be2a7bf7b3942c125f922a01321aea6ad26"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "fe6553f793b61cad95c507007b92866d4312b9e4", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/180655077a4d582d49d4aa14bed67b382f336cf0/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180655077a4d582d49d4aa14bed67b382f336cf0/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=180655077a4d582d49d4aa14bed67b382f336cf0", "patch": "@@ -459,6 +459,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             if remaining_index.is_none() { def.take_values()? } else { def.take_types()? };\n \n         let remaining_index = remaining_index.unwrap_or(path.segments.len());\n+        let mut actual_def_ty: Option<Ty> = None;\n \n         // resolve intermediate segments\n         for segment in &path.segments[remaining_index..] {\n@@ -468,9 +469,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     let typable: Option<TypableDef> = def.into();\n                     let typable = typable?;\n \n-                    let substs =\n+                    let mut substs =\n                         Ty::substs_from_path_segment(self.db, &self.resolver, segment, typable);\n-                    self.db.type_for_def(typable, Namespace::Types).subst(&substs)\n+\n+                    if remaining_index > 0 {\n+                        substs = Ty::substs_from_path_segment(\n+                            self.db,\n+                            &self.resolver,\n+                            &path.segments[remaining_index - 1],\n+                            typable,\n+                        );\n+                    }\n+\n+                    let ty = self.db.type_for_def(typable, Namespace::Types);\n+                    ty.subst(&substs)\n                 }\n                 Resolution::LocalBinding(_) => {\n                     // can't have a local binding in an associated item path\n@@ -489,6 +501,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             // Attempt to find an impl_item for the type which has a name matching\n             // the current segment\n             log::debug!(\"looking for path segment: {:?}\", segment);\n+            actual_def_ty = Some(ty.clone());\n+\n             let item: crate::ModuleDef = ty.iterate_impl_items(self.db, |item| {\n                 let matching_def: Option<crate::ModuleDef> = match item {\n                     crate::ImplItem::Method(func) => {\n@@ -528,9 +542,40 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Resolution::Def(def) => {\n                 let typable: Option<TypableDef> = def.into();\n                 let typable = typable?;\n+\n+                let ty = self.db.type_for_def(typable, Namespace::Values);\n                 let substs = Ty::substs_from_path(self.db, &self.resolver, path, typable);\n-                let ty = self.db.type_for_def(typable, Namespace::Values).subst(&substs);\n+                let ty = ty.subst(&substs);\n                 let ty = self.insert_type_vars(ty);\n+\n+                // plug the old parent_ty in\n+                if let Some(actual_def_ty) = actual_def_ty {\n+                    if let crate::ModuleDef::Function(func) = def {\n+                        let gen = func.generic_params(self.db);\n+                        if let Some(target_ty) = func.impl_block(self.db) {\n+                            let target_ty = target_ty.target_ty(self.db);\n+                            let old_params = target_ty.substs().unwrap().clone();\n+\n+                            let target_ty = target_ty.subst(&substs);\n+                            let target_ty = self.insert_type_vars(target_ty);\n+\n+                            if gen.count_parent_params() > 0 {\n+                                self.unify(&target_ty, &actual_def_ty);\n+\n+                                if let Ty::Apply(ty) = &ty {\n+                                    for (param, pty) in\n+                                        old_params.iter().zip(target_ty.substs().unwrap().iter())\n+                                    {\n+                                        if let Ty::Param { idx, .. } = param {\n+                                            self.unify(pty, &ty.parameters.0[*idx as usize]);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 Some(ty)\n             }\n             Resolution::LocalBinding(pat) => {"}, {"sha": "8d8a0eaaa69e628ec81e2353b5ebdcf2dba6e724", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/180655077a4d582d49d4aa14bed67b382f336cf0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180655077a4d582d49d4aa14bed67b382f336cf0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=180655077a4d582d49d4aa14bed67b382f336cf0", "patch": "@@ -1426,6 +1426,65 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_associated_method_generics_without_args() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct Gen<T> {\n+    val: T\n+}\n+\n+impl<T> Gen<T> {\n+    pub fn make() -> Gen<T> {\n+        loop { }\n+    }\n+}\n+\n+fn test() {\n+    let a = Gen::<u32>::make();\n+}\n+\"#),\n+        @r###\"\n+[76; 100) '{     ...     }': !\n+[86; 94) 'loop { }': !\n+[91; 94) '{ }': ()\n+[114; 149) '{     ...e(); }': ()\n+[124; 125) 'a': Gen<u32>\n+[128; 144) 'Gen::<...::make': fn make<u32>() -> Gen<T>\n+[128; 146) 'Gen::<...make()': Gen<u32>\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_associated_method_generics_2_type_params_without_args() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct Gen<T, U> {\n+    val: T,\n+    val2: U,\n+}\n+\n+impl<T> Gen<u32, T> {\n+    pub fn make() -> Gen<u32,T> {\n+        loop { }\n+    }\n+}\n+\n+fn test() {\n+    let a = Gen::<u32, u64>::make();\n+}\n+\"#),\n+        @r###\"\n+[102; 126) '{     ...     }': !\n+[112; 120) 'loop { }': !\n+[117; 120) '{ }': ()\n+[140; 180) '{     ...e(); }': ()\n+[150; 151) 'a': Gen<u32, u64>\n+[154; 175) 'Gen::<...::make': fn make<u64>() -> Gen<u32, T>\n+[154; 177) 'Gen::<...make()': Gen<u32, u64>\"###\n+    );\n+}\n+\n #[test]\n fn infer_type_alias() {\n     assert_snapshot_matches!(\n@@ -1814,8 +1873,8 @@ pub fn main_loop() {\n     @r###\"\n [144; 146) '{}': ()\n [169; 198) '{     ...t(); }': ()\n-[175; 193) 'FxHash...efault': fn default<{unknown}, {unknown}>() -> HashSet<T, H>\n-[175; 195) 'FxHash...ault()': HashSet<{unknown}, {unknown}>\"###\n+[175; 193) 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<T, H>\n+[175; 195) 'FxHash...ault()': HashSet<{unknown}, FxHasher>\"###\n     );\n }\n "}]}