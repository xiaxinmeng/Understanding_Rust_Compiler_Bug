{"sha": "bb833ca0f0e878d381c3dc0c9afe958a810e4427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODMzY2EwZjBlODc4ZDM4MWMzZGMwYzlhZmU5NThhODEwZTQ0Mjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-15T05:17:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-16T00:59:56Z"}, "message": "librustc: Stop parsing `impl Type : Trait` and fix several declarations that slipped through. r=tjc", "tree": {"sha": "7766fd3354b2b0f0418c5ff317df0696b41dbcc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7766fd3354b2b0f0418c5ff317df0696b41dbcc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb833ca0f0e878d381c3dc0c9afe958a810e4427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb833ca0f0e878d381c3dc0c9afe958a810e4427", "html_url": "https://github.com/rust-lang/rust/commit/bb833ca0f0e878d381c3dc0c9afe958a810e4427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb833ca0f0e878d381c3dc0c9afe958a810e4427/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "566bcf2225634ee4d4698247fe89364440eb534c", "url": "https://api.github.com/repos/rust-lang/rust/commits/566bcf2225634ee4d4698247fe89364440eb534c", "html_url": "https://github.com/rust-lang/rust/commit/566bcf2225634ee4d4698247fe89364440eb534c"}], "stats": {"total": 751, "additions": 327, "deletions": 424}, "files": [{"sha": "dceeb96800fd19e4cabcc1ab8261ebf7a15d3410", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -71,7 +71,7 @@ pub struct Package {\n     versions: ~[(~str, ~str)]\n }\n \n-pub impl Package : cmp::Ord {\n+pub impl cmp::Ord for Package {\n     pure fn lt(&self, other: &Package) -> bool {\n         if (*self).name.lt(&(*other).name) { return true; }\n         if (*other).name.lt(&(*self).name) { return false; }"}, {"sha": "565fe11d3f4a8d2e484d158a629a961d683f0b84", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -173,7 +173,7 @@ pub mod traits {\n     use kinds::Copy;\n     use ops::Add;\n \n-    pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n+    pub impl<T: Copy> Add<&[const T],@[T]> for @[T] {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> @[T] {\n             append(*self, (*rhs))"}, {"sha": "59c4ce6b9dc574c6dcd0845273c12da79f461b53", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -282,7 +282,7 @@ impl num::One for f32 {\n     static pure fn one() -> f32 { 1.0 }\n }\n \n-pub impl f32: NumCast {\n+pub impl NumCast for f32 {\n     /**\n      * Cast `n` to an `f32`\n      */"}, {"sha": "b24c76a5e0a9509e1621270f48e72d93a367c54a", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -297,7 +297,7 @@ impl cmp::Ord for f64 {\n     pure fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n \n-pub impl f64: NumCast {\n+pub impl NumCast for f64 {\n     /**\n      * Cast `n` to an `f64`\n      */"}, {"sha": "51b115e84c3ec7330ffea79fd3e6bc6b2b7c1a3d", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -415,7 +415,7 @@ impl num::One for float {\n     static pure fn one() -> float { 1.0 }\n }\n \n-pub impl float: NumCast {\n+pub impl NumCast for float {\n     /**\n      * Cast `n` to a `float`\n      */"}, {"sha": "1352959306a039b1995b2bfe233a69df7a2da429", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u16::bits;\n }\n \n-pub impl i16: NumCast {\n+pub impl NumCast for i16 {\n     /**\n      * Cast `n` to a `i16`\n      */"}, {"sha": "e8dd603d507531d6b23485bd56cda5a12418201d", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u32::bits;\n }\n \n-pub impl i32: NumCast {\n+pub impl NumCast for i32 {\n     /**\n      * Cast `n` to a `i32`\n      */"}, {"sha": "6f1371f8ee221c0d2ab8927c35b893135883d91a", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u64::bits;\n }\n \n-pub impl i64: NumCast {\n+pub impl NumCast for i64 {\n     /**\n      * Cast `n` to a `i64`\n      */"}, {"sha": "46c734b95483e92c2d3b1ba74ed9256e95de2d94", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,7 +17,7 @@ mod inst {\n     pub const bits: uint = ::u8::bits;\n }\n \n-pub impl i8: NumCast {\n+pub impl NumCast for i8 {\n     /**\n      * Cast `n` to a `i8`\n      */"}, {"sha": "83ef421b705781f78b9e9128e6bba93881f69d5c", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -58,7 +58,7 @@ mod inst {\n     }\n }\n \n-pub impl int: NumCast {\n+pub impl NumCast for int {\n     /**\n      * Cast `n` to a `int`\n      */"}, {"sha": "315ff84cc234c462eae16dc11090ef637fa5cc3c", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 16;\n }\n \n-pub impl u16: NumCast {\n+pub impl NumCast for u16 {\n     /**\n      * Cast `n` to a `u16`\n      */"}, {"sha": "834feff292c597cbfc7d467a6454261ab02e5c52", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 32;\n }\n \n-pub impl u32: NumCast {\n+pub impl NumCast for u32 {\n     /**\n      * Cast `n` to a `u32`\n      */"}, {"sha": "b661b3b20b1cd53805c953fe06a7fc9c97a1c942", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ mod inst {\n     pub const bits: uint = 64;\n }\n \n-pub impl u64: num::NumCast {\n+pub impl NumCast for u64 {\n     /**\n      * Cast `n` to a `u64`\n      */"}, {"sha": "c2be9e252d9a1d245452b2d019ef686a4255be18", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -26,7 +26,7 @@ mod inst {\n     pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n }\n \n-pub impl u8: NumCast {\n+pub impl NumCast for u8 {\n     /**\n      * Cast `n` to a `u8`\n      */"}, {"sha": "475ae243915d9298e520734f03de212ed2a7a052", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -110,7 +110,7 @@ pub mod inst {\n         return true;\n     }\n \n-    pub impl uint: iter::Times {\n+    pub impl iter::Times for uint {\n         #[inline(always)]\n         /**\n         * A convenience form for basic iteration. Given a uint `x`,\n@@ -209,7 +209,7 @@ pub mod inst {\n     }\n }\n \n-pub impl uint: NumCast {\n+pub impl NumCast for uint {\n     /**\n      * Cast `n` to a `uint`\n      */"}, {"sha": "f0108fe85b7572f9808439de2acd6055b75f9472", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -1211,11 +1211,11 @@ pub trait Select2<T: Owned, U: Owned> {\n     fn select() -> Either<T, U>;\n }\n \n-impl<T: Owned, U: Owned,\n+impl<T: Owned,\n+     U: Owned,\n      Left: Selectable GenericPort<T>,\n      Right: Selectable GenericPort<U>>\n-    (Left, Right): Select2<T, U> {\n-\n+     Select2<T,U> for (Left, Right) {\n     fn select() -> Either<T, U> {\n         match self {\n           (ref lp, ref rp) => match select2i(lp, rp) {"}, {"sha": "3c15a89081d7f4ae37d7bd34201f1fdd55c657eb", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -2328,7 +2328,7 @@ pub trait OwnedStr {\n     fn push_char(&mut self, c: char);\n }\n \n-pub impl ~str : OwnedStr {\n+pub impl OwnedStr for ~str {\n     fn push_str(&mut self, v: &str) {\n         push_str(self, v);\n     }"}, {"sha": "10efa9196a7bb585ab6f07435b36870fa2f571ca", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -170,7 +170,7 @@ impl IterBytes for char {\n pub mod x32 {\n     use to_bytes::{Cb, IterBytes};\n \n-    pub impl uint: IterBytes {\n+    pub impl IterBytes for uint {\n         #[inline(always)]\n         pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n             (*self as u32).iter_bytes(lsb0, f)\n@@ -182,7 +182,7 @@ pub mod x32 {\n pub mod x64 {\n     use to_bytes::{Cb, IterBytes};\n \n-    pub impl uint: IterBytes {\n+    pub impl IterBytes for uint {\n         #[inline(always)]\n         pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n             (*self as u64).iter_bytes(lsb0, f)"}, {"sha": "f1712d05562d534ecc0ce0fca17d4fc4a62a5292", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -175,6 +175,7 @@ pub fn time<T>(do_it: bool, what: ~str, thunk: fn() -> T) -> T {\n     rv\n }\n \n+#[deriving_eq]\n pub enum compile_upto {\n     cu_parse,\n     cu_expand,\n@@ -183,13 +184,6 @@ pub enum compile_upto {\n     cu_everything,\n }\n \n-pub impl compile_upto : cmp::Eq {\n-    pure fn eq(&self, other: &compile_upto) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &compile_upto) -> bool { !(*self).eq(other) }\n-}\n-\n pub fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n                     input: input, upto: compile_upto,\n                     outputs: Option<output_filenames>)"}, {"sha": "1a299f22ec057ebcc952ee22f61c35726deb6ff2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -29,24 +29,12 @@ use syntax::parse::parse_sess;\n use syntax::{ast, codemap};\n use syntax;\n \n+#[deriving_eq]\n pub enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }\n \n-pub impl os : cmp::Eq {\n-    pure fn eq(&self, other: &os) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &os) -> bool { !(*self).eq(other) }\n-}\n-\n+#[deriving_eq]\n pub enum arch { arch_x86, arch_x86_64, arch_arm, }\n \n-pub impl arch : cmp::Eq {\n-    pure fn eq(&self, other: &arch) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &arch) -> bool { !(*self).eq(other) }\n-}\n-\n pub enum crate_type { bin_crate, lib_crate, unknown_crate, }\n \n pub type config =\n@@ -117,20 +105,14 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ]\n }\n \n+#[deriving_eq]\n pub enum OptLevel {\n     No, // -O0\n     Less, // -O1\n     Default, // -O2\n     Aggressive // -O3\n }\n \n-pub impl OptLevel : cmp::Eq {\n-    pure fn eq(&self, other: &OptLevel) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &OptLevel) -> bool { !(*self).eq(other) }\n-}\n-\n pub type options =\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process"}, {"sha": "c58ab494ed364fb5b6bfe9ce772fb7c323b3715b", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -132,6 +132,7 @@ pub enum RealPredicate {\n \n // enum for the LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n+#[deriving_eq]\n pub enum TypeKind {\n     Void      = 0,\n     Half      = 1,\n@@ -151,46 +152,6 @@ pub enum TypeKind {\n     X86_MMX   = 15\n }\n \n-pub impl TypeKind : cmp::Eq {\n-    pure fn eq(&self, other: &TypeKind) -> bool {\n-        match ((*self), (*other)) {\n-            (Void, Void) => true,\n-            (Half, Half) => true,\n-            (Float, Float) => true,\n-            (Double, Double) => true,\n-            (X86_FP80, X86_FP80) => true,\n-            (FP128, FP128) => true,\n-            (PPC_FP128, PPC_FP128) => true,\n-            (Label, Label) => true,\n-            (Integer, Integer) => true,\n-            (Function, Function) => true,\n-            (Struct, Struct) => true,\n-            (Array, Array) => true,\n-            (Pointer, Pointer) => true,\n-            (Vector, Vector) => true,\n-            (Metadata, Metadata) => true,\n-            (X86_MMX, X86_MMX) => true,\n-            (Void, _) => false,\n-            (Half, _) => false,\n-            (Float, _) => false,\n-            (Double, _) => false,\n-            (X86_FP80, _) => false,\n-            (FP128, _) => false,\n-            (PPC_FP128, _) => false,\n-            (Label, _) => false,\n-            (Integer, _) => false,\n-            (Function, _) => false,\n-            (Struct, _) => false,\n-            (Array, _) => false,\n-            (Pointer, _) => false,\n-            (Vector, _) => false,\n-            (Metadata, _) => false,\n-            (X86_MMX, _) => false,\n-        }\n-    }\n-    pure fn ne(&self, other: &TypeKind) -> bool { !(*self).eq(other) }\n-}\n-\n pub enum AtomicBinOp {\n     Xchg = 0,\n     Add  = 1,"}, {"sha": "a420faf1f1d96e3d9d8d54b42e2f47dcf8b06032", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -449,7 +449,7 @@ impl LoanKind {\n \n /// Creates and returns a new root_map\n \n-pub impl root_map_key : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for root_map_key {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.id, &self.derefs, lsb0, f);\n     }"}, {"sha": "da2c8965ba1c82132e75b8162aca9a8ead9c76e9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -281,12 +281,12 @@ pub trait ast_node {\n     fn span() -> span;\n }\n \n-pub impl @ast::expr: ast_node {\n+pub impl ast_node for @ast::expr {\n     fn id() -> ast::node_id { self.id }\n     fn span() -> span { self.span }\n }\n \n-pub impl @ast::pat: ast_node {\n+pub impl ast_node for @ast::pat {\n     fn id() -> ast::node_id { self.id }\n     fn span() -> span { self.span }\n }\n@@ -295,7 +295,7 @@ pub trait get_type_for_node {\n     fn ty<N: ast_node>(node: N) -> ty::t;\n }\n \n-pub impl ty::ctxt: get_type_for_node {\n+pub impl get_type_for_node for ty::ctxt {\n     fn ty<N: ast_node>(node: N) -> ty::t {\n         ty::node_id_to_type(self, node.id())\n     }"}, {"sha": "7110365034093d19d836688956128a353bfd5d72", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -108,7 +108,7 @@ pub trait get_insn_ctxt {\n     fn insn_ctxt(s: &str) -> icx_popper;\n }\n \n-pub impl @crate_ctxt: get_insn_ctxt {\n+pub impl get_insn_ctxt for @crate_ctxt {\n     fn insn_ctxt(s: &str) -> icx_popper {\n         debug!(\"new insn_ctxt: %s\", s);\n         if self.sess.count_llvm_insns() {\n@@ -118,13 +118,13 @@ pub impl @crate_ctxt: get_insn_ctxt {\n     }\n }\n \n-pub impl block: get_insn_ctxt {\n+pub impl get_insn_ctxt for block {\n     fn insn_ctxt(s: &str) -> icx_popper {\n         self.ccx().insn_ctxt(s)\n     }\n }\n \n-pub impl fn_ctxt: get_insn_ctxt {\n+pub impl get_insn_ctxt for fn_ctxt {\n     fn insn_ctxt(s: &str) -> icx_popper {\n         self.ccx.insn_ctxt(s)\n     }"}, {"sha": "13902be776be5666211fba431045beb0512cbd27", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -532,13 +532,13 @@ pub trait get_node_info {\n     fn info() -> Option<node_info>;\n }\n \n-pub impl @ast::expr: get_node_info {\n+pub impl get_node_info for @ast::expr {\n     fn info() -> Option<node_info> {\n         Some({id: self.id, span: self.span})\n     }\n }\n \n-pub impl ast::blk: get_node_info {\n+pub impl get_node_info for ast::blk {\n     fn info() -> Option<node_info> {\n         Some({id: self.node.id, span: self.span})\n     }\n@@ -547,7 +547,7 @@ pub impl ast::blk: get_node_info {\n // XXX: Work around a trait parsing bug. remove after snapshot\n pub type optional_boxed_ast_expr = Option<@ast::expr>;\n \n-pub impl optional_boxed_ast_expr: get_node_info {\n+pub impl get_node_info for optional_boxed_ast_expr {\n     fn info() -> Option<node_info> {\n         self.chain_ref(|s| s.info())\n     }\n@@ -1280,7 +1280,7 @@ pub struct mono_id_ {\n \n pub type mono_id = @mono_id_;\n \n-pub impl mono_param_id : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for mono_param_id {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match /*bad*/copy *self {\n           mono_precise(t, mids) =>\n@@ -1294,7 +1294,7 @@ pub impl mono_param_id : to_bytes::IterBytes {\n     }\n }\n \n-pub impl mono_id_ : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for mono_id_ {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f);\n     }"}, {"sha": "49779b9bbcc8b516479986ec1f27bd9b74bf6ffa", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -104,6 +104,7 @@ use core::uint;\n use core::vec;\n use syntax::parse::token::special_idents;\n \n+#[deriving_eq]\n pub enum CopyAction {\n     INIT,\n     DROP_EXISTING\n@@ -150,14 +151,14 @@ pub impl DatumMode {\n     }\n }\n \n-pub impl DatumMode: cmp::Eq {\n+pub impl cmp::Eq for DatumMode {\n     pure fn eq(&self, other: &DatumMode) -> bool {\n         (*self) as uint == (*other as uint)\n     }\n     pure fn ne(&self, other: &DatumMode) -> bool { !(*self).eq(other) }\n }\n \n-pub impl DatumMode: to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for DatumMode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n@@ -846,14 +847,3 @@ pub impl DatumBlock {\n     }\n }\n \n-pub impl CopyAction : cmp::Eq {\n-    pure fn eq(&self, other: &CopyAction) -> bool {\n-        match ((*self), (*other)) {\n-            (INIT, INIT) => true,\n-            (DROP_EXISTING, DROP_EXISTING) => true,\n-            (INIT, _) => false,\n-            (DROP_EXISTING, _) => false,\n-        }\n-    }\n-    pure fn ne(&self, other: &CopyAction) -> bool { !(*self).eq(other) }\n-}"}, {"sha": "c15010d7b7b2449e844fe28168ca1ef0a0447d7b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -657,46 +657,46 @@ pub trait Vid {\n     pure fn to_uint() -> uint;\n }\n \n-pub impl TyVid: Vid {\n+pub impl Vid for TyVid {\n     pure fn to_uint() -> uint { *self }\n }\n \n-pub impl TyVid: ToStr {\n+pub impl ToStr for TyVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<V%u>\", self.to_uint()) }\n }\n \n-pub impl IntVid: Vid {\n+pub impl Vid for IntVid {\n     pure fn to_uint() -> uint { *self }\n }\n \n-pub impl IntVid: ToStr {\n+pub impl ToStr for IntVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<VI%u>\", self.to_uint()) }\n }\n \n-pub impl FloatVid: Vid {\n+pub impl Vid for FloatVid {\n     pure fn to_uint() -> uint { *self }\n }\n \n-pub impl FloatVid: ToStr {\n+pub impl ToStr for FloatVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"<VF%u>\", self.to_uint()) }\n }\n \n-pub impl RegionVid: Vid {\n+pub impl Vid for RegionVid {\n     pure fn to_uint() -> uint { *self }\n }\n \n-pub impl RegionVid: ToStr {\n+pub impl ToStr for RegionVid {\n     pure fn to_str(&self) -> ~str { fmt!(\"%?\", self) }\n }\n \n-pub impl FnSig : ToStr {\n+pub impl ToStr for FnSig {\n     pure fn to_str(&self) -> ~str {\n         // grr, without tcx not much we can do.\n         return ~\"(...)\";\n     }\n }\n \n-pub impl InferTy: ToStr {\n+pub impl ToStr for InferTy {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             TyVar(ref v) => v.to_str(),\n@@ -706,7 +706,7 @@ pub impl InferTy: ToStr {\n     }\n }\n \n-pub impl IntVarValue : ToStr {\n+pub impl ToStr for IntVarValue {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             IntType(ref v) => v.to_str(),\n@@ -715,25 +715,25 @@ pub impl IntVarValue : ToStr {\n     }\n }\n \n-pub impl TyVid : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for TyVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl IntVid : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for IntVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl FloatVid : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for FloatVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl RegionVid : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for RegionVid {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.to_uint().iter_bytes(lsb0, f)\n     }"}, {"sha": "1ad3bd9cae6e1889b50f88677e15a8aea64eabf2", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -620,7 +620,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n     }\n }\n \n-pub impl FnCtxt: AstConv {\n+pub impl AstConv for FnCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.ccx.tcx }\n     fn ccx(@mut self) -> @mut CrateCtxt { self.ccx }\n \n@@ -654,7 +654,7 @@ pub impl FnCtxt {\n     }\n }\n \n-pub impl @mut FnCtxt: region_scope {\n+pub impl region_scope for @mut FnCtxt {\n     pure fn anon_region(span: span) -> Result<ty::Region, ~str> {\n         // XXX: Unsafe to work around purity\n         unsafe {"}, {"sha": "972d1b609454b515745aa2f354e536e75c8598b3", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -121,7 +121,7 @@ pub impl @mut CrateCtxt {\n     }\n }\n \n-pub impl CrateCtxt: AstConv {\n+pub impl AstConv for CrateCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.tcx }\n     fn ccx(@mut self) -> @mut CrateCtxt { self }\n "}, {"sha": "464a149a488ff3b6e2d77298b0e30d9d51b3d999", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -27,7 +27,7 @@ use std::list;\n \n pub enum Glb = CombineFields;  // \"greatest lower bound\" (common subtype)\n \n-pub impl Glb: Combine {\n+pub impl Combine for Glb {\n     fn infcx() -> @mut InferCtxt { self.infcx }\n     fn tag() -> ~str { ~\"glb\" }\n     fn a_is_expected() -> bool { self.a_is_expected }"}, {"sha": "df4bc46ba632b231edb50e7d2c5e941dc64aaae7", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -57,7 +57,7 @@ pub trait LatticeValue {\n \n pub type LatticeOp<T> = &fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n \n-pub impl ty::t: LatticeValue {\n+pub impl LatticeValue for ty::t {\n     static fn sub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n         Sub(*cf).tys(*a, *b).to_ures()\n     }\n@@ -301,29 +301,29 @@ pub trait TyLatticeDir {\n     fn ty_bot(t: ty::t) -> cres<ty::t>;\n }\n \n-pub impl Lub: LatticeDir {\n+pub impl LatticeDir for Lub {\n     fn combine_fields() -> CombineFields { *self }\n     fn bnd<T:Copy>(b: &Bounds<T>) -> Option<T> { b.ub }\n     fn with_bnd<T:Copy>(b: &Bounds<T>, +t: T) -> Bounds<T> {\n         {ub: Some(t), ..*b}\n     }\n }\n \n-pub impl Lub: TyLatticeDir {\n+pub impl TyLatticeDir for Lub {\n     fn ty_bot(t: ty::t) -> cres<ty::t> {\n         Ok(t)\n     }\n }\n \n-pub impl Glb: LatticeDir {\n+pub impl LatticeDir for Glb {\n     fn combine_fields() -> CombineFields { *self }\n     fn bnd<T:Copy>(b: &Bounds<T>) -> Option<T> { b.lb }\n     fn with_bnd<T:Copy>(b: &Bounds<T>, +t: T) -> Bounds<T> {\n         {lb: Some(t), ..*b}\n     }\n }\n \n-pub impl Glb: TyLatticeDir {\n+pub impl TyLatticeDir for Glb {\n     fn ty_bot(_t: ty::t) -> cres<ty::t> {\n         Ok(ty::mk_bot(self.infcx.tcx))\n     }"}, {"sha": "60f6cd40e0430f84ecffe3e40792b610dafce6be", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -36,7 +36,7 @@ pub impl Lub {\n     fn ty_bot(b: ty::t) -> cres<ty::t> { self.bot_ty(b) } // commutative\n }\n \n-pub impl Lub: Combine {\n+pub impl Combine for Lub {\n     fn infcx() -> @mut InferCtxt { self.infcx }\n     fn tag() -> ~str { ~\"lub\" }\n     fn a_is_expected() -> bool { self.a_is_expected }"}, {"sha": "8b37b668ff712cdac3890afc94e2565e7cd6053a", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -32,7 +32,7 @@ pub fn macros() {\n \n pub enum Sub = CombineFields;  // \"subtype\", \"subregion\" etc\n \n-pub impl Sub: Combine {\n+pub impl Combine for Sub {\n     fn infcx() -> @mut InferCtxt { self.infcx }\n     fn tag() -> ~str { ~\"sub\" }\n     fn a_is_expected() -> bool { self.a_is_expected }"}, {"sha": "89de219f7f638da21640f3ccf2f5b53a33794c34", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -28,33 +28,33 @@ pub trait InferStr {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str;\n }\n \n-pub impl ty::t : InferStr {\n+pub impl InferStr for ty::t {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         ty_to_str(cx.tcx, *self)\n     }\n }\n \n-pub impl FnSig : InferStr {\n+pub impl InferStr for FnSig {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"(%s) -> %s\",\n              str::connect(self.inputs.map(|a| a.ty.inf_str(cx)), \", \"),\n              self.output.inf_str(cx))\n     }\n }\n \n-pub impl ty::mt : InferStr {\n+pub impl InferStr for ty::mt {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         mt_to_str(cx.tcx, *self)\n     }\n }\n \n-pub impl ty::Region : InferStr {\n+pub impl InferStr for ty::Region {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         fmt!(\"%?\", *self)\n     }\n }\n \n-pub impl<V:InferStr> Bound<V> : InferStr {\n+pub impl<V:InferStr> InferStr for Bound<V> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         match *self {\n           Some(ref v) => v.inf_str(cx),\n@@ -63,15 +63,15 @@ pub impl<V:InferStr> Bound<V> : InferStr {\n     }\n }\n \n-pub impl<T:InferStr> Bounds<T> : InferStr {\n+pub impl<T:InferStr> InferStr for Bounds<T> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"{%s <: %s}\",\n              self.lb.inf_str(cx),\n              self.ub.inf_str(cx))\n     }\n }\n \n-pub impl<V:Vid ToStr, T:InferStr> VarValue<V, T> : InferStr {\n+pub impl<V:Vid ToStr, T:InferStr> InferStr for VarValue<V, T> {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         match *self {\n           Redirect(ref vid) => fmt!(\"Redirect(%s)\", vid.to_str()),\n@@ -81,13 +81,13 @@ pub impl<V:Vid ToStr, T:InferStr> VarValue<V, T> : InferStr {\n     }\n }\n \n-pub impl IntVarValue : InferStr {\n+pub impl InferStr for IntVarValue {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         self.to_str()\n     }\n }\n \n-pub impl ast::float_ty : InferStr {\n+pub impl InferStr for ast::float_ty {\n     fn inf_str(&self, _cx: &InferCtxt) -> ~str {\n         self.to_str()\n     }"}, {"sha": "b2aac9192f3058b5182ec2cd1831a14575afaff2", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -237,35 +237,35 @@ pub impl InferCtxt {\n \n // ______________________________________________________________________\n \n-pub impl ty::TyVid : UnifyVid<Bounds<ty::t>> {\n+pub impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n     static fn appropriate_vals_and_bindings(infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::TyVid, Bounds<ty::t>> {\n         return &mut infcx.ty_var_bindings;\n     }\n }\n \n-pub impl ty::IntVid : UnifyVid<Option<IntVarValue>> {\n+pub impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n     static fn appropriate_vals_and_bindings(infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::IntVid, Option<IntVarValue>> {\n         return &mut infcx.int_var_bindings;\n     }\n }\n \n-pub impl IntVarValue : SimplyUnifiable {\n+pub impl SimplyUnifiable for IntVarValue {\n     static fn to_type_err(err: expected_found<IntVarValue>)\n         -> ty::type_err {\n         return ty::terr_int_mismatch(err);\n     }\n }\n \n-pub impl ty::FloatVid : UnifyVid<Option<ast::float_ty>> {\n+pub impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n     static fn appropriate_vals_and_bindings(infcx: &v/mut InferCtxt)\n         -> &v/mut ValsAndBindings<ty::FloatVid, Option<ast::float_ty>> {\n         return &mut infcx.float_var_bindings;\n     }\n }\n \n-pub impl ast::float_ty : SimplyUnifiable {\n+pub impl SimplyUnifiable for ast::float_ty {\n     static fn to_type_err(err: expected_found<ast::float_ty>)\n         -> ty::type_err {\n         return ty::terr_float_mismatch(err);"}, {"sha": "4739a183cb884e0cd2307c3b32befc5b2d00f8dd", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -26,7 +26,7 @@ pub trait region_scope {\n }\n \n pub enum empty_rscope { empty_rscope }\n-pub impl empty_rscope: region_scope {\n+pub impl region_scope for empty_rscope {\n     pure fn anon_region(_span: span) -> Result<ty::Region, ~str> {\n         result::Ok(ty::re_static)\n     }\n@@ -40,7 +40,7 @@ pub impl empty_rscope: region_scope {\n }\n \n pub enum type_rscope = Option<ty::region_variance>;\n-pub impl type_rscope: region_scope {\n+pub impl region_scope for type_rscope {\n     pure fn anon_region(_span: span) -> Result<ty::Region, ~str> {\n         match *self {\n           Some(_) => result::Ok(ty::re_bound(ty::br_self)),\n@@ -73,7 +73,7 @@ pub fn in_anon_rscope<RS: region_scope Copy Durable>(self: RS, r: ty::Region)\n     -> @anon_rscope {\n     @anon_rscope({anon: r, base: self as region_scope})\n }\n-pub impl @anon_rscope: region_scope {\n+pub impl region_scope for @anon_rscope {\n     pure fn anon_region(_span: span) -> Result<ty::Region, ~str> {\n         result::Ok(self.anon)\n     }\n@@ -96,7 +96,7 @@ pub fn in_binding_rscope<RS: region_scope Copy Durable>(self: RS)\n     let base = self as region_scope;\n     @mut binding_rscope { base: base, anon_bindings: 0 }\n }\n-pub impl @mut binding_rscope: region_scope {\n+pub impl region_scope for @mut binding_rscope {\n     pure fn anon_region(_span: span) -> Result<ty::Region, ~str> {\n         // XXX: Unsafe to work around purity\n         unsafe {"}, {"sha": "b726ecacc4573427dad7fec2e216b8aa68285ae2", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -296,18 +296,12 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n     compile_input(sess, cfg, input, &odir, &ofile);\n }\n \n+#[deriving_eq]\n pub enum monitor_msg {\n     fatal,\n     done,\n }\n \n-pub impl monitor_msg : cmp::Eq {\n-    pure fn eq(&self, other: &monitor_msg) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    pure fn ne(&self, other: &monitor_msg) -> bool { !(*self).eq(other) }\n-}\n-\n /*\n This is a sanity check that any failure of the compiler is performed\n through the diagnostic module and reported properly - we shouldn't be calling"}, {"sha": "e904015e419f6c7cc2ed890f76d6426f05e8ce6a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -59,7 +59,7 @@ pub struct Config {\n     pandoc_cmd: Option<~str>\n }\n \n-pub impl Config: Clone {\n+pub impl Clone for Config {\n     fn clone(&self) -> Config { copy *self }\n }\n "}, {"sha": "ff9faabaec24ba8b41f49ec980adad3533cd3e80", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -761,7 +761,7 @@ fn should_write_impl_header() {\n \n #[test]\n fn should_write_impl_header_with_trait() {\n-    let markdown = test::render(~\"impl int: j { fn a() { } }\");\n+    let markdown = test::render(~\"impl j for int { fn a() { } }\");\n     assert str::contains(markdown, ~\"## Implementation of `j` for `int`\");\n }\n "}, {"sha": "42961e7bca613642a55d3e30b505c88d2eed0edd", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -297,7 +297,7 @@ fn fold_impl(\n \n #[test]\n fn should_add_impl_trait_types() {\n-    let doc = test::mk_doc(~\"impl int: j { fn a<T>() { } }\");\n+    let doc = test::mk_doc(~\"impl j for int { fn a<T>() { } }\");\n     assert doc.cratemod().impls()[0].trait_types[0] == ~\"j\";\n }\n "}, {"sha": "cff30587607f522f115530c0e0917a33ceb388d0", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -258,7 +258,7 @@ pub trait ByteChan {\n \n const CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n \n-pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n+pub impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n     fn recv() -> T {\n         match self.try_recv() {\n             Some(val) => val,\n@@ -358,7 +358,7 @@ pub mod flatteners {\n         bogus: ()\n     }\n \n-    pub impl<T: Copy Owned> PodUnflattener<T>: Unflattener<T> {\n+    pub impl<T: Copy Owned> Unflattener<T> for PodUnflattener<T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             assert size_of::<T>() != 0;\n             assert size_of::<T>() == buf.len();\n@@ -368,7 +368,7 @@ pub mod flatteners {\n         }\n     }\n \n-    pub impl<T: Copy Owned> PodFlattener<T>: Flattener<T> {\n+    pub impl<T: Copy Owned> Flattener<T> for PodFlattener<T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             assert size_of::<T>() != 0;\n             let val: *T = ptr::to_unsafe_ptr(&val);\n@@ -406,36 +406,32 @@ pub mod flatteners {\n         serialize_value: SerializeValue<T>\n     }\n \n-    pub impl<D: Decoder, T: Decodable<D>>\n-        DeserializingUnflattener<D, T>: Unflattener<T> {\n+    pub impl<D: Decoder, T: Decodable<D>> Unflattener<T>\n+            for DeserializingUnflattener<D, T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             (self.deserialize_buffer)(buf)\n         }\n     }\n \n-    pub impl<S: Encoder, T: Encodable<S>>\n-        SerializingFlattener<S, T>: Flattener<T> {\n+    pub impl<S: Encoder, T: Encodable<S>> Flattener<T>\n+            for SerializingFlattener<S, T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             (self.serialize_value)(&val)\n         }\n     }\n \n-    pub impl<D: Decoder, T: Decodable<D>>\n-        DeserializingUnflattener<D, T> {\n-\n-        static fn new(deserialize_buffer: DeserializeBuffer<T>\n-                     ) -> DeserializingUnflattener<D, T> {\n+    pub impl<D: Decoder, T: Decodable<D>> DeserializingUnflattener<D, T> {\n+        static fn new(deserialize_buffer: DeserializeBuffer<T>)\n+                   -> DeserializingUnflattener<D, T> {\n             DeserializingUnflattener {\n                 deserialize_buffer: deserialize_buffer\n             }\n         }\n     }\n \n-    pub impl<S: Encoder, T: Encodable<S>>\n-        SerializingFlattener<S, T> {\n-\n-        static fn new(serialize_value: SerializeValue<T>\n-                     ) -> SerializingFlattener<S, T> {\n+    pub impl<S: Encoder, T: Encodable<S>> SerializingFlattener<S, T> {\n+        static fn new(serialize_value: SerializeValue<T>)\n+                   -> SerializingFlattener<S, T> {\n             SerializingFlattener {\n                 serialize_value: serialize_value\n             }\n@@ -523,7 +519,7 @@ pub mod bytepipes {\n         writer: W\n     }\n \n-    pub impl<R: Reader> ReaderBytePort<R>: BytePort {\n+    pub impl<R: Reader> BytePort for ReaderBytePort<R> {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             let mut left = count;\n             let mut bytes = ~[];\n@@ -545,7 +541,7 @@ pub mod bytepipes {\n         }\n     }\n \n-    pub impl<W: Writer> WriterByteChan<W>: ByteChan {\n+    pub impl<W: Writer> ByteChan for WriterByteChan<W> {\n         fn send(&self, val: ~[u8]) {\n             self.writer.write(val);\n         }\n@@ -576,7 +572,7 @@ pub mod bytepipes {\n         chan: pipes::Chan<~[u8]>\n     }\n \n-    pub impl PipeBytePort: BytePort {\n+    pub impl BytePort for PipeBytePort {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             if self.buf.len() >= count {\n                 let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n@@ -608,7 +604,7 @@ pub mod bytepipes {\n         }\n     }\n \n-    pub impl PipeByteChan: ByteChan {\n+    pub impl ByteChan for PipeByteChan {\n         fn send(&self, val: ~[u8]) {\n             self.chan.send(val)\n         }"}, {"sha": "e8278bb1b356357c59e1440fdba03adcf1a46e6f", "filename": "src/libstd/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -82,7 +82,7 @@ pub fn Encoder(wr: io::Writer) -> Encoder {\n     Encoder { wr: wr }\n }\n \n-pub impl Encoder: serialize::Encoder {\n+pub impl serialize::Encoder for Encoder {\n     fn emit_nil(&self) { self.wr.write_str(\"null\") }\n \n     fn emit_uint(&self, v: uint) { self.emit_float(v as float); }\n@@ -217,7 +217,7 @@ pub fn PrettyEncoder(wr: io::Writer) -> PrettyEncoder {\n     PrettyEncoder { wr: wr, indent: 0 }\n }\n \n-pub impl PrettyEncoder: serialize::Encoder {\n+pub impl serialize::Encoder for PrettyEncoder {\n     fn emit_nil(&self) { self.wr.write_str(\"null\") }\n \n     fn emit_uint(&self, v: uint) { self.emit_float(v as float); }\n@@ -323,7 +323,7 @@ pub impl PrettyEncoder: serialize::Encoder {\n     }\n }\n \n-pub impl<S: serialize::Encoder> Json: serialize::Encodable<S> {\n+pub impl<S: serialize::Encoder> serialize::Encodable<S> for Json {\n     fn encode(&self, s: &S) {\n         match *self {\n             Number(v) => v.encode(s),\n@@ -768,7 +768,7 @@ priv impl Decoder {\n     }\n }\n \n-pub impl Decoder: serialize::Decoder {\n+pub impl serialize::Decoder for Decoder {\n     fn read_nil(&self) -> () {\n         debug!(\"read_nil\");\n         match *self.pop() {"}, {"sha": "cb9090225bf1cb1e5338d314c48577ab419573f0", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -22,7 +22,7 @@ pub fn Serializer(wr: io::Writer) -> Serializer {\n     Serializer { wr: wr }\n }\n \n-pub impl Serializer: serialize::Encoder {\n+pub impl serialize::Encoder for Serializer {\n     fn emit_nil(&self) {\n         self.wr.write_str(~\"()\")\n     }"}, {"sha": "9b7cf8adce553855c05a6483130165df2449534f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 59, "deletions": 65, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -113,210 +113,210 @@ pub trait Decodable<D: Decoder> {\n     static fn decode(&self, d: &D) -> Self;\n }\n \n-pub impl<S: Encoder> uint: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for uint {\n     fn encode(&self, s: &S) { s.emit_uint(*self) }\n }\n \n-pub impl<D: Decoder> uint: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for uint {\n     static fn decode(&self, d: &D) -> uint {\n         d.read_uint()\n     }\n }\n \n-pub impl<S: Encoder> u8: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for u8 {\n     fn encode(&self, s: &S) { s.emit_u8(*self) }\n }\n \n-pub impl<D: Decoder> u8: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for u8 {\n     static fn decode(&self, d: &D) -> u8 {\n         d.read_u8()\n     }\n }\n \n-pub impl<S: Encoder> u16: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for u16 {\n     fn encode(&self, s: &S) { s.emit_u16(*self) }\n }\n \n-pub impl<D: Decoder> u16: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for u16 {\n     static fn decode(&self, d: &D) -> u16 {\n         d.read_u16()\n     }\n }\n \n-pub impl<S: Encoder> u32: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for u32 {\n     fn encode(&self, s: &S) { s.emit_u32(*self) }\n }\n \n-pub impl<D: Decoder> u32: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for u32 {\n     static fn decode(&self, d: &D) -> u32 {\n         d.read_u32()\n     }\n }\n \n-pub impl<S: Encoder> u64: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for u64 {\n     fn encode(&self, s: &S) { s.emit_u64(*self) }\n }\n \n-pub impl<D: Decoder> u64: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for u64 {\n     static fn decode(&self, d: &D) -> u64 {\n         d.read_u64()\n     }\n }\n \n-pub impl<S: Encoder> int: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for int {\n     fn encode(&self, s: &S) { s.emit_int(*self) }\n }\n \n-pub impl<D: Decoder> int: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for int {\n     static fn decode(&self, d: &D) -> int {\n         d.read_int()\n     }\n }\n \n-pub impl<S: Encoder> i8: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for i8 {\n     fn encode(&self, s: &S) { s.emit_i8(*self) }\n }\n \n-pub impl<D: Decoder> i8: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for i8 {\n     static fn decode(&self, d: &D) -> i8 {\n         d.read_i8()\n     }\n }\n \n-pub impl<S: Encoder> i16: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for i16 {\n     fn encode(&self, s: &S) { s.emit_i16(*self) }\n }\n \n-pub impl<D: Decoder> i16: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for i16 {\n     static fn decode(&self, d: &D) -> i16 {\n         d.read_i16()\n     }\n }\n \n-pub impl<S: Encoder> i32: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for i32 {\n     fn encode(&self, s: &S) { s.emit_i32(*self) }\n }\n \n-pub impl<D: Decoder> i32: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for i32 {\n     static fn decode(&self, d: &D) -> i32 {\n         d.read_i32()\n     }\n }\n \n-pub impl<S: Encoder> i64: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for i64 {\n     fn encode(&self, s: &S) { s.emit_i64(*self) }\n }\n \n-pub impl<D: Decoder> i64: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for i64 {\n     static fn decode(&self, d: &D) -> i64 {\n         d.read_i64()\n     }\n }\n \n-pub impl<S: Encoder> &str: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for &str {\n     fn encode(&self, s: &S) { s.emit_borrowed_str(*self) }\n }\n \n-pub impl<S: Encoder> ~str: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for ~str {\n     fn encode(&self, s: &S) { s.emit_owned_str(*self) }\n }\n \n-pub impl<D: Decoder> ~str: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for ~str {\n     static fn decode(&self, d: &D) -> ~str {\n         d.read_owned_str()\n     }\n }\n \n-pub impl<S: Encoder> @str: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for @str {\n     fn encode(&self, s: &S) { s.emit_managed_str(*self) }\n }\n \n-pub impl<D: Decoder> @str: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for @str {\n     static fn decode(&self, d: &D) -> @str {\n         d.read_managed_str()\n     }\n }\n \n-pub impl<S: Encoder> float: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for float {\n     fn encode(&self, s: &S) { s.emit_float(*self) }\n }\n \n-pub impl<D: Decoder> float: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for float {\n     static fn decode(&self, d: &D) -> float {\n         d.read_float()\n     }\n }\n \n-pub impl<S: Encoder> f32: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for f32 {\n     fn encode(&self, s: &S) { s.emit_f32(*self) }\n }\n \n-pub impl<D: Decoder> f32: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for f32 {\n     static fn decode(&self, d: &D) -> f32 {\n         d.read_f32() }\n }\n \n-pub impl<S: Encoder> f64: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for f64 {\n     fn encode(&self, s: &S) { s.emit_f64(*self) }\n }\n \n-pub impl<D: Decoder> f64: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for f64 {\n     static fn decode(&self, d: &D) -> f64 {\n         d.read_f64()\n     }\n }\n \n-pub impl<S: Encoder> bool: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for bool {\n     fn encode(&self, s: &S) { s.emit_bool(*self) }\n }\n \n-pub impl<D: Decoder> bool: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for bool {\n     static fn decode(&self, d: &D) -> bool {\n         d.read_bool()\n     }\n }\n \n-pub impl<S: Encoder> (): Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for () {\n     fn encode(&self, s: &S) { s.emit_nil() }\n }\n \n-pub impl<D: Decoder> (): Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for () {\n     static fn decode(&self, d: &D) -> () {\n         d.read_nil()\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> &T: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for &T {\n     fn encode(&self, s: &S) {\n         s.emit_borrowed(|| (**self).encode(s))\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> ~T: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for ~T {\n     fn encode(&self, s: &S) {\n         s.emit_owned(|| (**self).encode(s))\n     }\n }\n \n-pub impl<D: Decoder, T: Decodable<D>> ~T: Decodable<D> {\n+pub impl<D: Decoder, T: Decodable<D>> Decodable<D> for ~T {\n     static fn decode(&self, d: &D) -> ~T {\n         d.read_owned(|| ~Decodable::decode(d))\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> @T: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for @T {\n     fn encode(&self, s: &S) {\n         s.emit_managed(|| (**self).encode(s))\n     }\n }\n \n-pub impl<D: Decoder, T: Decodable<D>> @T: Decodable<D> {\n+pub impl<D: Decoder, T: Decodable<D>> Decodable<D> for @T {\n     static fn decode(&self, d: &D) -> @T {\n         d.read_managed(|| @Decodable::decode(d))\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> &[T]: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for &[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_borrowed_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -326,7 +326,7 @@ pub impl<S: Encoder, T: Encodable<S>> &[T]: Encodable<S> {\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> ~[T]: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for ~[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_owned_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -336,7 +336,7 @@ pub impl<S: Encoder, T: Encodable<S>> ~[T]: Encodable<S> {\n     }\n }\n \n-pub impl<D: Decoder, T: Decodable<D>> ~[T]: Decodable<D> {\n+pub impl<D: Decoder, T: Decodable<D>> Decodable<D> for ~[T] {\n     static fn decode(&self, d: &D) -> ~[T] {\n         do d.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {\n@@ -346,7 +346,7 @@ pub impl<D: Decoder, T: Decodable<D>> ~[T]: Decodable<D> {\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> @[T]: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for @[T] {\n     fn encode(&self, s: &S) {\n         do s.emit_managed_vec(self.len()) {\n             for self.eachi |i, e| {\n@@ -356,7 +356,7 @@ pub impl<S: Encoder, T: Encodable<S>> @[T]: Encodable<S> {\n     }\n }\n \n-pub impl<D: Decoder, T: Decodable<D>> @[T]: Decodable<D> {\n+pub impl<D: Decoder, T: Decodable<D>> Decodable<D> for @[T] {\n     static fn decode(&self, d: &D) -> @[T] {\n         do d.read_managed_vec |len| {\n             do at_vec::from_fn(len) |i| {\n@@ -366,7 +366,7 @@ pub impl<D: Decoder, T: Decodable<D>> @[T]: Decodable<D> {\n     }\n }\n \n-pub impl<S: Encoder, T: Encodable<S>> Option<T>: Encodable<S> {\n+pub impl<S: Encoder, T: Encodable<S>> Encodable<S> for Option<T> {\n     fn encode(&self, s: &S) {\n         do s.emit_enum(~\"option\") {\n             match *self {\n@@ -381,7 +381,7 @@ pub impl<S: Encoder, T: Encodable<S>> Option<T>: Encodable<S> {\n     }\n }\n \n-pub impl<D: Decoder, T: Decodable<D>> Option<T>: Decodable<D> {\n+pub impl<D: Decoder, T: Decodable<D>> Decodable<D> for Option<T> {\n     static fn decode(&self, d: &D) -> Option<T> {\n         do d.read_enum(~\"option\") {\n             do d.read_enum_variant |i| {\n@@ -396,11 +396,8 @@ pub impl<D: Decoder, T: Decodable<D>> Option<T>: Decodable<D> {\n     }\n }\n \n-pub impl<\n-    S: Encoder,\n-    T0: Encodable<S>,\n-    T1: Encodable<S>\n-> (T0, T1): Encodable<S> {\n+pub impl<S: Encoder, T0: Encodable<S>, T1: Encodable<S>> Encodable<S>\n+        for (T0, T1) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1) => {\n@@ -413,11 +410,8 @@ pub impl<\n     }\n }\n \n-pub impl<\n-    D: Decoder,\n-    T0: Decodable<D>,\n-    T1: Decodable<D>\n-> (T0, T1): Decodable<D> {\n+pub impl<D: Decoder, T0: Decodable<D>, T1: Decodable<D>> Decodable<D>\n+        for (T0, T1) {\n     static fn decode(&self, d: &D) -> (T0, T1) {\n         do d.read_tup(2) {\n             (\n@@ -433,7 +427,7 @@ pub impl<\n     T0: Encodable<S>,\n     T1: Encodable<S>,\n     T2: Encodable<S>\n-> (T0, T1, T2): Encodable<S> {\n+> Encodable<S> for (T0, T1, T2) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2) => {\n@@ -452,7 +446,7 @@ pub impl<\n     T0: Decodable<D>,\n     T1: Decodable<D>,\n     T2: Decodable<D>\n-> (T0, T1, T2): Decodable<D> {\n+> Decodable<D> for (T0, T1, T2) {\n     static fn decode(&self, d: &D) -> (T0, T1, T2) {\n         do d.read_tup(3) {\n             (\n@@ -470,7 +464,7 @@ pub impl<\n     T1: Encodable<S>,\n     T2: Encodable<S>,\n     T3: Encodable<S>\n-> (T0, T1, T2, T3): Encodable<S> {\n+> Encodable<S> for (T0, T1, T2, T3) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2, ref t3) => {\n@@ -491,7 +485,7 @@ pub impl<\n     T1: Decodable<D>,\n     T2: Decodable<D>,\n     T3: Decodable<D>\n-> (T0, T1, T2, T3): Decodable<D> {\n+> Decodable<D> for (T0, T1, T2, T3) {\n     static fn decode(&self, d: &D) -> (T0, T1, T2, T3) {\n         do d.read_tup(4) {\n             (\n@@ -511,7 +505,7 @@ pub impl<\n     T2: Encodable<S>,\n     T3: Encodable<S>,\n     T4: Encodable<S>\n-> (T0, T1, T2, T3, T4): Encodable<S> {\n+> Encodable<S> for (T0, T1, T2, T3, T4) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2, ref t3, ref t4) => {\n@@ -534,7 +528,7 @@ pub impl<\n     T2: Decodable<D>,\n     T3: Decodable<D>,\n     T4: Decodable<D>\n-> (T0, T1, T2, T3, T4): Decodable<D> {\n+> Decodable<D> for (T0, T1, T2, T3, T4) {\n     static fn decode(&self, d: &D)\n       -> (T0, T1, T2, T3, T4) {\n         do d.read_tup(5) {\n@@ -558,7 +552,7 @@ pub trait EncoderHelpers {\n     fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T));\n }\n \n-pub impl<S: Encoder> S: EncoderHelpers {\n+pub impl<S: Encoder> EncoderHelpers for S {\n     fn emit_from_vec<T>(&self, v: &[T], f: fn(v: &T)) {\n         do self.emit_owned_vec(v.len()) {\n             for v.eachi |i, e| {\n@@ -574,7 +568,7 @@ pub trait DecoderHelpers {\n     fn read_to_vec<T>(&self, f: fn() -> T) -> ~[T];\n }\n \n-pub impl<D: Decoder> D: DecoderHelpers {\n+pub impl<D: Decoder> DecoderHelpers for D {\n     fn read_to_vec<T>(&self, f: fn() -> T) -> ~[T] {\n         do self.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {"}, {"sha": "70c03c69d2db3540018ebe4947ca4a1834e4874b", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -138,7 +138,7 @@ impl WorkKey {\n \n type WorkMap = LinearMap<WorkKey, ~str>;\n \n-pub impl<S: Encoder> WorkMap: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for WorkMap {\n     fn encode(&self, s: &S) {\n         let mut d = ~[];\n         for self.each |&(k, v)| {\n@@ -149,7 +149,7 @@ pub impl<S: Encoder> WorkMap: Encodable<S> {\n     }\n }\n \n-pub impl<D: Decoder> WorkMap: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for WorkMap {\n     static fn decode(&self, d: &D) -> WorkMap {\n         let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n         let mut w = LinearMap::new();"}, {"sha": "14a66a49df3bd869a75f1af67531a848e4aa28cb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -32,7 +32,7 @@ macro_rules! interner_key (\n #[deriving_eq]\n pub struct ident { repr: uint }\n \n-pub impl<S: Encoder> ident: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for ident {\n     fn encode(&self, s: &S) {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n@@ -45,7 +45,7 @@ pub impl<S: Encoder> ident: Encodable<S> {\n     }\n }\n \n-pub impl<D: Decoder> ident: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for ident {\n     static fn decode(d: &D) -> ident {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n@@ -58,7 +58,7 @@ pub impl<D: Decoder> ident: Decodable<D> {\n     }\n }\n \n-pub impl ident: to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for ident {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.repr.iter_bytes(lsb0, f)\n     }\n@@ -211,7 +211,7 @@ pub enum binding_mode {\n     bind_infer\n }\n \n-pub impl binding_mode : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for binding_mode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           bind_by_copy => 0u8.iter_bytes(lsb0, f),\n@@ -256,7 +256,7 @@ pub enum pat_ {\n #[deriving_eq]\n pub enum mutability { m_mutbl, m_imm, m_const, }\n \n-pub impl mutability : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for mutability {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -269,13 +269,13 @@ pub enum Abi {\n     RustAbi\n }\n \n-pub impl Abi : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for Abi {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl Abi : ToStr {\n+pub impl ToStr for Abi {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             RustAbi => ~\"\\\"rust\\\"\"\n@@ -292,13 +292,13 @@ pub enum Sigil {\n     ManagedSigil\n }\n \n-pub impl Sigil : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for Sigil {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl Sigil : ToStr {\n+pub impl ToStr for Sigil {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             BorrowedSigil => ~\"&\",\n@@ -377,7 +377,7 @@ pub enum inferable<T> {\n     infer(node_id)\n }\n \n-pub impl<T: to_bytes::IterBytes> inferable<T> : to_bytes::IterBytes {\n+pub impl<T: to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           expl(ref t) =>\n@@ -395,7 +395,7 @@ pub impl<T: to_bytes::IterBytes> inferable<T> : to_bytes::IterBytes {\n #[deriving_eq]\n pub enum rmode { by_ref, by_val, by_copy }\n \n-pub impl rmode : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for rmode {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -736,13 +736,13 @@ pub enum trait_method {\n #[deriving_eq]\n pub enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n-pub impl int_ty : ToStr {\n+pub impl ToStr for int_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::int_ty_to_str(*self)\n     }\n }\n \n-pub impl int_ty : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for int_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -753,13 +753,13 @@ pub impl int_ty : to_bytes::IterBytes {\n #[deriving_eq]\n pub enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n-pub impl uint_ty : ToStr {\n+pub impl ToStr for uint_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::uint_ty_to_str(*self)\n     }\n }\n \n-pub impl uint_ty : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for uint_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -770,13 +770,13 @@ pub impl uint_ty : to_bytes::IterBytes {\n #[deriving_eq]\n pub enum float_ty { ty_f, ty_f32, ty_f64, }\n \n-pub impl float_ty : ToStr {\n+pub impl ToStr for float_ty {\n     pure fn to_str(&self) -> ~str {\n         ::ast_util::float_ty_to_str(*self)\n     }\n }\n \n-pub impl float_ty : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for float_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -830,7 +830,7 @@ pub enum Onceness {\n     Many\n }\n \n-pub impl Onceness : ToStr {\n+pub impl ToStr for Onceness {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             Once => ~\"once\",\n@@ -839,7 +839,7 @@ pub impl Onceness : ToStr {\n     }\n }\n \n-pub impl Onceness : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for Onceness {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f);\n     }\n@@ -889,7 +889,7 @@ pub enum ty_ {\n     ty_infer,\n }\n \n-pub impl Ty : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for Ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.span.lo, &self.span.hi, lsb0, f);\n     }\n@@ -925,7 +925,7 @@ pub enum purity {\n     extern_fn, // declared with \"extern fn\"\n }\n \n-pub impl purity : ToStr {\n+pub impl ToStr for purity {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n             impure_fn => ~\"impure\",\n@@ -936,7 +936,7 @@ pub impl purity : ToStr {\n     }\n }\n \n-pub impl purity : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for purity {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -951,7 +951,7 @@ pub enum ret_style {\n     return_val, // everything else\n }\n \n-pub impl ret_style : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for ret_style {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n@@ -1232,7 +1232,7 @@ pub enum item_ {\n #[deriving_eq]\n pub enum struct_mutability { struct_mutable, struct_immutable }\n \n-pub impl struct_mutability : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for struct_mutability {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }"}, {"sha": "108a0dfc5e06058a76693aef0044efa4240e8ef9", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -34,7 +34,7 @@ pub enum path_elt {\n     path_name(ident)\n }\n \n-pub impl path_elt : cmp::Eq {\n+pub impl cmp::Eq for path_elt {\n     pure fn eq(&self, other: &path_elt) -> bool {\n         match (*self) {\n             path_mod(e0a) => {"}, {"sha": "f7ae2058095494537e84154be1b7fc364a96c1f1", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -198,7 +198,7 @@ pub pure fn is_call_expr(e: @expr) -> bool {\n }\n \n // This makes def_id hashable\n-pub impl def_id : to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for def_id {\n     #[inline(always)]\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f);\n@@ -303,7 +303,7 @@ pub trait inlined_item_utils {\n     fn accept<E>(&self, e: E, v: visit::vt<E>);\n }\n \n-pub impl inlined_item: inlined_item_utils {\n+pub impl inlined_item_utils for inlined_item {\n     fn ident(&self) -> ident {\n         match *self {\n             ii_item(i) => /* FIXME (#2543) */ copy i.ident,"}, {"sha": "851b35ca3bd3ff1f5555b9b16eb95eeeab43eada", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -46,71 +46,71 @@ pub enum CharPos = uint;\n // XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n-pub impl BytePos: Pos {\n+pub impl Pos for BytePos {\n     static pure fn from_uint(n: uint) -> BytePos { BytePos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl BytePos: cmp::Eq {\n+pub impl cmp::Eq for BytePos {\n     pure fn eq(&self, other: &BytePos) -> bool { **self == **other }\n     pure fn ne(&self, other: &BytePos) -> bool { !(*self).eq(other) }\n }\n \n-pub impl BytePos: cmp::Ord {\n+pub impl cmp::Ord for BytePos {\n     pure fn lt(&self, other: &BytePos) -> bool { **self < **other }\n     pure fn le(&self, other: &BytePos) -> bool { **self <= **other }\n     pure fn ge(&self, other: &BytePos) -> bool { **self >= **other }\n     pure fn gt(&self, other: &BytePos) -> bool { **self > **other }\n }\n \n-pub impl BytePos: Add<BytePos, BytePos> {\n+pub impl Add<BytePos, BytePos> for BytePos {\n     pure fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self + **rhs)\n     }\n }\n \n-pub impl BytePos: Sub<BytePos, BytePos> {\n+pub impl Sub<BytePos, BytePos> for BytePos {\n     pure fn sub(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self - **rhs)\n     }\n }\n \n-pub impl BytePos: to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for BytePos {\n     pure fn iter_bytes(&self, +lsb0: bool, &&f: to_bytes::Cb) {\n         (**self).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl CharPos: Pos {\n+pub impl Pos for CharPos {\n     static pure fn from_uint(n: uint) -> CharPos { CharPos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n-pub impl CharPos: cmp::Eq {\n+pub impl cmp::Eq for CharPos {\n     pure fn eq(&self, other: &CharPos) -> bool { **self == **other }\n     pure fn ne(&self, other: &CharPos) -> bool { !(*self).eq(other) }\n }\n \n-pub impl CharPos: cmp::Ord {\n+pub impl cmp::Ord for CharPos {\n     pure fn lt(&self, other: &CharPos) -> bool { **self < **other }\n     pure fn le(&self, other: &CharPos) -> bool { **self <= **other }\n     pure fn ge(&self, other: &CharPos) -> bool { **self >= **other }\n     pure fn gt(&self, other: &CharPos) -> bool { **self > **other }\n }\n \n-pub impl CharPos: to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for CharPos {\n     pure fn iter_bytes(&self, +lsb0: bool, &&f: to_bytes::Cb) {\n         (**self).iter_bytes(lsb0, f)\n     }\n }\n \n-pub impl CharPos: Add<CharPos, CharPos> {\n+pub impl Add<CharPos,CharPos> for CharPos {\n     pure fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self + **rhs)\n     }\n }\n \n-pub impl CharPos: Sub<CharPos, CharPos> {\n+pub impl Sub<CharPos,CharPos> for CharPos {\n     pure fn sub(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self - **rhs)\n     }\n@@ -133,19 +133,19 @@ pub struct span {\n #[deriving_eq]\n pub struct spanned<T> { node: T, span: span }\n \n-pub impl span : cmp::Eq {\n+pub impl cmp::Eq for span {\n     pure fn eq(&self, other: &span) -> bool {\n         return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n     }\n     pure fn ne(&self, other: &span) -> bool { !(*self).eq(other) }\n }\n \n-pub impl<S: Encoder> span: Encodable<S> {\n+pub impl<S: Encoder> Encodable<S> for span {\n     /* Note #1972 -- spans are encoded but not decoded */\n     fn encode(&self, _s: &S) { }\n }\n \n-pub impl<D: Decoder> span: Decodable<D> {\n+pub impl<D: Decoder> Decodable<D> for span {\n     static fn decode(_d: &D) -> span {\n         dummy_sp()\n     }"}, {"sha": "12e5f1891aa82f6e07e213abcf579bf0b1f022bc", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -54,7 +54,7 @@ pub trait append_types {\n     fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path;\n }\n \n-pub impl @ast::path: append_types {\n+pub impl append_types for @ast::path {\n     fn add_ty(ty: @ast::Ty) -> @ast::path {\n         @ast::path { types: vec::append_one(self.types, ty),\n                      .. *self}\n@@ -112,7 +112,7 @@ pub trait ext_ctxt_ast_builder {\n     fn strip_bounds(bounds: &[ast::ty_param]) -> ~[ast::ty_param];\n }\n \n-pub impl ext_ctxt: ext_ctxt_ast_builder {\n+pub impl ext_ctxt_ast_builder for ext_ctxt {\n     fn ty_option(ty: @ast::Ty) -> @ast::Ty {\n         self.ty_path_ast_builder(path_global(~[\n             self.ident_of(~\"core\"),"}, {"sha": "a8e0b3ba934dff2d188e15d54082b72f6bde9867", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -37,7 +37,7 @@ use ext::base::ext_ctxt;\n use ext::pipes::proto::{state, protocol, next_state};\n use ext::pipes::proto;\n \n-pub impl ext_ctxt: proto::visitor<(), (), ()>  {\n+pub impl proto::visitor<(), (), ()> for ext_ctxt {\n     fn visit_proto(_proto: protocol,\n                    _states: &[()]) { }\n "}, {"sha": "875610474703eae4956ea86ffed7ad4150e3a8f8", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -22,7 +22,7 @@ pub trait proto_parser {\n     fn parse_message(state: state);\n }\n \n-pub impl parser::Parser: proto_parser {\n+pub impl proto_parser for parser::Parser {\n     fn parse_proto(id: ~str) -> protocol {\n         let proto = protocol(id, self.span);\n "}, {"sha": "68d18a2937c432e39c1d3c118c3ec765f3b2b6d9", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -45,7 +45,7 @@ pub trait gen_init {\n     fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr;\n }\n \n-pub impl message: gen_send {\n+pub impl gen_send for message {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item {\n         debug!(\"pipec: gen_send\");\n         match self {\n@@ -201,7 +201,7 @@ pub impl message: gen_send {\n     }\n }\n \n-pub impl state: to_type_decls {\n+pub impl to_type_decls for state {\n     fn to_type_decls(cx: ext_ctxt) -> ~[@ast::item] {\n         debug!(\"pipec: to_type_decls\");\n         // This compiles into two different type declarations. Say the\n@@ -305,8 +305,7 @@ pub impl state: to_type_decls {\n     }\n }\n \n-pub impl protocol: gen_init {\n-\n+pub impl gen_init for protocol {\n     fn gen_init(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n "}, {"sha": "027375b6326bf6bffd103d3c607874575db90545", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -21,7 +21,7 @@ use core::to_str::ToStr;\n \n pub enum direction { send, recv }\n \n-pub impl direction : cmp::Eq {\n+pub impl cmp::Eq for direction {\n     pure fn eq(&self, other: &direction) -> bool {\n         match ((*self), (*other)) {\n             (send, send) => true,\n@@ -33,7 +33,7 @@ pub impl direction : cmp::Eq {\n     pure fn ne(&self, other: &direction) -> bool { !(*self).eq(other) }\n }\n \n-pub impl direction: ToStr {\n+pub impl ToStr for direction {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n           send => ~\"Send\",\n@@ -156,7 +156,6 @@ pub struct protocol_ {\n }\n \n pub impl protocol_ {\n-\n     /// Get a state.\n     fn get_state(name: ~str) -> state {\n         self.states.find(|i| i.name == name).get()"}, {"sha": "dc5d7916c7eee78c1389af70a80a8d1cd17590df", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -692,7 +692,7 @@ pub fn default_ast_fold() -> ast_fold_fns {\n           new_span: noop_span};\n }\n \n-pub impl ast_fold_fns: ast_fold {\n+pub impl ast_fold for ast_fold_fns {\n     /* naturally, a macro to write these would be nice */\n     fn fold_crate(c: crate) -> crate {\n         let (n, s) = (self.fold_crate)(c.node, c.span, self as ast_fold);"}, {"sha": "92c4f1e828f62f5a173a2a622a108c6c7f115fea", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -127,7 +127,7 @@ impl reader for StringReader {\n     fn dup(@mut self) -> reader { dup_string_reader(self) as reader }\n }\n \n-pub impl TtReader: reader {\n+pub impl reader for TtReader {\n     fn is_eof(@mut self) -> bool { self.cur_tok == token::EOF }\n     fn next_token(@mut self) -> TokenAndSpan { tt_next_token(self) }\n     fn fatal(@mut self, m: ~str) -> ! {"}, {"sha": "bf04996838cf8fb87d837e59fe114228889b323f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -45,10 +45,11 @@ pub enum ObsoleteSyntax {\n     ObsoleteMoveInit,\n     ObsoleteBinaryMove,\n     ObsoleteUnsafeBlock,\n-    ObsoleteUnenforcedBound\n+    ObsoleteUnenforcedBound,\n+    ObsoleteImplSyntax\n }\n \n-pub impl ObsoleteSyntax: to_bytes::IterBytes {\n+pub impl to_bytes::IterBytes for ObsoleteSyntax {\n     #[inline(always)]\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         (*self as uint).iter_bytes(lsb0, f);\n@@ -115,6 +116,10 @@ pub impl Parser {\n                 \"unenforced type parameter bound\",\n                 \"use trait bounds on the functions that take the type as \\\n                  arguments, not on the types themselves\"\n+            ),\n+            ObsoleteImplSyntax => (\n+                \"colon-separated impl syntax\",\n+                \"write `impl Trait for Type`\"\n             )\n         };\n "}, {"sha": "15258a6bbeef8980a1e5b5d8a1602e426d32ab97", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -74,7 +74,7 @@ use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n-use parse::obsolete::{ObsoleteUnsafeBlock};\n+use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -2829,16 +2829,11 @@ pub impl Parser {\n         // XXX: clownshoes\n         let ident = special_idents::clownshoes_extensions;\n \n-        // Parse the type. (If this is `impl trait for type`, however, this\n-        // actually parses the trait.)\n+        // Parse the trait.\n         let mut ty = self.parse_ty(false);\n \n         // Parse traits, if necessary.\n-        let opt_trait = if self.token == token::COLON {\n-            // Old-style trait.\n-            self.bump();\n-            Some(self.parse_trait_ref())\n-        } else if self.eat_keyword(~\"for\") {\n+        let opt_trait = if self.eat_keyword(~\"for\") {\n             // New-style trait. Reinterpret the type as a trait.\n             let opt_trait_ref = match ty.node {\n                 ty_path(path, node_id) => {\n@@ -2855,6 +2850,9 @@ pub impl Parser {\n \n             ty = self.parse_ty(false);\n             opt_trait_ref\n+        } else if self.eat(token::COLON) {\n+            self.obsolete(copy self.span, ObsoleteImplSyntax);\n+            Some(self.parse_trait_ref())\n         } else {\n             None\n         };"}, {"sha": "657e6ee59fa41df0d638b2ed0cc48bd27ff4f66a", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -42,7 +42,7 @@ pub trait Interner<T:Eq IterBytes Hash Const Copy> {\n     fn len() -> uint;\n }\n \n-pub impl <T:Eq IterBytes Hash Const Copy> hash_interner<T>: Interner<T> {\n+pub impl<T:Eq IterBytes Hash Const Copy> Interner<T> for hash_interner<T> {\n     fn intern(val: T) -> uint {\n         match self.map.find(&val) {\n           Some(idx) => return idx,"}, {"sha": "5256944b18ecb5246e462f8c81b1f29605a62835", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,7 +17,7 @@ pub mod kitty {\n       name : ~str,\n     }\n \n-    pub impl cat : ToStr {\n+    pub impl ToStr for cat {\n        pure fn to_str(&self) -> ~str { copy self.name }\n     }\n "}, {"sha": "2b3fd47e5bc49deb4e5854402ab2522918b12d21", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ pub mod name_pool {\n         fn add(s: ~str);\n     }\n \n-    pub impl name_pool: add {\n+    pub impl add for name_pool {\n         fn add(s: ~str) {\n         }\n     }\n@@ -34,7 +34,7 @@ pub mod rust {\n         fn cx();\n     }\n \n-    pub impl rt: cx {\n+    pub impl cx for rt {\n         fn cx() {\n         }\n     }"}, {"sha": "cbc1c4b2fec44d9b1762c2aafa28a64a0f91313c", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -16,7 +16,7 @@ pub mod socket {\n         sockfd: libc::c_int,\n     }\n \n-    pub impl socket_handle : Drop {\n+    pub impl Drop for socket_handle {\n         fn finalize(&self) {\n             /* c::close(self.sockfd); */\n         }"}, {"sha": "d664ad62edf1d9831ad5e3389975c85b8aa51937", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -15,7 +15,7 @@ pub struct rsrc {\n   x: i32,\n }\n \n-pub impl rsrc : Drop {\n+pub impl Drop for rsrc {\n     fn finalize(&self) {\n         foo(self.x);\n     }"}, {"sha": "2ed3b3b1f5c989b4bfaf44ac23d3a7c812a24056", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,25 +17,25 @@ pub struct MyInt {\n     val: int\n }\n \n-pub impl MyInt : Add<MyInt, MyInt> {\n+pub impl Add<MyInt, MyInt> for MyInt {\n     pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-pub impl MyInt : Sub<MyInt, MyInt> {\n+pub impl Sub<MyInt, MyInt> for MyInt {\n     pure fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n-pub impl MyInt : Mul<MyInt, MyInt> {\n+pub impl Mul<MyInt, MyInt> for MyInt {\n     pure fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n-pub impl MyInt : Eq {\n+pub impl Eq for MyInt {\n     pure fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n \n     pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-pub impl MyInt : MyNum;\n+pub impl MyNum for MyInt;\n \n pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n "}, {"sha": "227ea5c1521c0b11947b64b76686387f62e15ea3", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicat\n \n enum Lol = int;\n \n-pub impl Lol: Hahaha { }\n+pub impl Hahaha for Lol { }\n \n impl Eq for Lol {\n     pure fn eq(&self, other: &Lol) -> bool { **self != **other }"}, {"sha": "a003563928738f83358a8b2be36d43224b4f3278", "filename": "src/test/compile-fail/issue-3969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -16,7 +16,7 @@ trait BikeMethods {\n     fn woops(&const self) -> ~str;\n }\n \n-pub impl Bike : BikeMethods {\n+pub impl BikeMethods for Bike {\n     static fn woops(&const self) -> ~str { ~\"foo\" }\n     //~^ ERROR method `woops` is declared as static in its impl, but not in its trait\n }"}, {"sha": "057e6dbc06864afcf557c1bae203e6aaa3d9a009", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -20,7 +20,7 @@ impl MyEq for int {\n     pure fn eq(&self, other: &int) -> bool { *self == *other }\n }\n \n-impl A : MyEq;  //~ ERROR missing method\n+impl MyEq for A;  //~ ERROR missing method\n \n fn main() {\n }"}, {"sha": "8472f0158bb62d5c508bdecbd3e1a00971097715", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -20,20 +20,14 @@ pub mod pipes {\n         mut payload: Option<T>\n     }\n \n+    #[deriving_eq]\n     pub enum state {\n         empty,\n         full,\n         blocked,\n         terminated\n     }\n \n-    pub impl state : cmp::Eq {\n-        pure fn eq(&self, other: &state) -> bool {\n-            ((*self) as uint) == ((*other) as uint)\n-        }\n-        pure fn ne(&self, other: &state) -> bool { !(*self).eq(other) }\n-    }\n-\n     pub type packet<T> = {\n         mut state: state,\n         mut blocked_task: Option<task::Task>,\n@@ -161,7 +155,7 @@ pub mod pipes {\n         mut p: Option<*packet<T>>,\n     }\n \n-    pub impl<T: Owned> send_packet<T> : Drop {\n+    pub impl<T: Owned> Drop for send_packet<T> {\n         fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;\n@@ -189,7 +183,7 @@ pub mod pipes {\n         mut p: Option<*packet<T>>,\n     }\n \n-    pub impl<T: Owned> recv_packet<T> : Drop {\n+    pub impl<T: Owned> Drop for recv_packet<T> {\n         fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;"}, {"sha": "c4f4aa46a8a42b7691f0e2731aac10d498281677", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -23,8 +23,7 @@ extern mod std;\n use io::WriterUtil;\n \n // Represents a position on a canvas.\n-struct Point\n-{\n+struct Point {\n     x: int,\n     y: int,\n }\n@@ -108,8 +107,7 @@ impl AsciiArt\n \n // Allows AsciiArt to be converted to a string using the libcore ToStr trait.\n // Note that the %s fmt! specifier will not call this automatically.\n-impl AsciiArt : ToStr\n-{\n+impl ToStr for AsciiArt {\n     pure fn to_str(&self) -> ~str\n     {\n         // Convert each line into a string.\n@@ -139,8 +137,7 @@ trait Canvas\n // Here we provide an implementation of the Canvas methods for AsciiArt.\n // Other implementations could also be provided (e.g. for PDF or Apple's Quartz)\n // and code can use them polymorphically via the Canvas trait.\n-impl AsciiArt : Canvas\n-{\n+impl Canvas for AsciiArt {\n     fn add_point(&mut self, shape: Point)\n     {\n         self.add_pt(shape.x, shape.y);"}, {"sha": "5d48d1e72de1c830b0e3987e35385fae1fe7112f", "filename": "src/test/run-pass/issue-3979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -31,7 +31,7 @@ impl Positioned for Point {\n     }\n }\n \n-impl Point: Movable;\n+impl Movable for Point;\n \n pub fn main() {\n     let p = Point{ x: 1, y: 2};"}, {"sha": "7ac6337d1caa130d4ea60c127a340e164a9106d8", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -81,7 +81,7 @@ pub struct Buffer {\n \n }\n \n-pub impl Buffer : Drop {\n+pub impl Drop for Buffer {\n     fn finalize(&self) {}\n }\n "}, {"sha": "5e7785c2dbbe81c1f57e69f1ac7ed6955e3bcb6e", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -17,12 +17,12 @@ pub trait plus {\n \n mod a {\n     use plus;\n-    pub impl uint: plus { fn plus() -> int { self as int + 20 } }\n+    pub impl plus for uint { fn plus() -> int { self as int + 20 } }\n }\n \n mod b {\n     use plus;\n-    pub impl ~str: plus { fn plus() -> int { 200 } }\n+    pub impl plus for ~str { fn plus() -> int { 200 } }\n }\n \n trait uint_utils {"}, {"sha": "b4c28fd52a64cf2280eb526f9e6b358031faba5d", "filename": "src/test/run-pass/static-methods-in-traits2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -2,15 +2,15 @@ pub trait Number: NumConv {\n     static pure fn from<T:Number>(n: T) -> Self;\n }\n \n-pub impl float: Number {\n+pub impl Number for float {\n     static pure fn from<T:Number>(n: T) -> float { n.to_float() }\n }\n \n pub trait NumConv {\n     pure fn to_float(&self) -> float;\n }\n \n-pub impl float: NumConv {\n+pub impl NumConv for float {\n     pure fn to_float(&self) -> float { *self }\n }\n "}, {"sha": "64b30d71e1dffce1eb5466e4156775ad7d87fd8d", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -21,84 +21,84 @@ use std::cmp::FuzzyEq;\n pub trait TypeExt {}\n \n \n-pub impl u8: TypeExt {}\n-pub impl u16: TypeExt {}\n-pub impl u32: TypeExt {}\n-pub impl u64: TypeExt {}\n-pub impl uint: TypeExt {}\n+pub impl TypeExt for u8 {}\n+pub impl TypeExt for u16 {}\n+pub impl TypeExt for u32 {}\n+pub impl TypeExt for u64 {}\n+pub impl TypeExt for uint {}\n \n-pub impl i8: TypeExt {}\n-pub impl i16: TypeExt {}\n-pub impl i32: TypeExt {}\n-pub impl i64: TypeExt {}\n-pub impl int: TypeExt {}\n+pub impl TypeExt for i8 {}\n+pub impl TypeExt for i16 {}\n+pub impl TypeExt for i32 {}\n+pub impl TypeExt for i64 {}\n+pub impl TypeExt for int {}\n \n-pub impl f32: TypeExt {}\n-pub impl f64: TypeExt {}\n-pub impl float: TypeExt {}\n+pub impl TypeExt for f32 {}\n+pub impl TypeExt for f64 {}\n+pub impl TypeExt for float {}\n \n \n pub trait NumExt: TypeExt Eq Ord NumCast {}\n \n-pub impl u8: NumExt {}\n-pub impl u16: NumExt {}\n-pub impl u32: NumExt {}\n-pub impl u64: NumExt {}\n-pub impl uint: NumExt {}\n+pub impl NumExt for u8 {}\n+pub impl NumExt for u16 {}\n+pub impl NumExt for u32 {}\n+pub impl NumExt for u64 {}\n+pub impl NumExt for uint {}\n \n-pub impl i8: NumExt {}\n-pub impl i16: NumExt {}\n-pub impl i32: NumExt {}\n-pub impl i64: NumExt {}\n-pub impl int: NumExt {}\n+pub impl NumExt for i8 {}\n+pub impl NumExt for i16 {}\n+pub impl NumExt for i32 {}\n+pub impl NumExt for i64 {}\n+pub impl NumExt for int {}\n \n-pub impl f32: NumExt {}\n-pub impl f64: NumExt {}\n-pub impl float: NumExt {}\n+pub impl NumExt for f32 {}\n+pub impl NumExt for f64 {}\n+pub impl NumExt for float {}\n \n \n pub trait UnSignedExt: NumExt {}\n \n-pub impl u8: UnSignedExt {}\n-pub impl u16: UnSignedExt {}\n-pub impl u32: UnSignedExt {}\n-pub impl u64: UnSignedExt {}\n-pub impl uint: UnSignedExt {}\n+pub impl UnSignedExt for u8 {}\n+pub impl UnSignedExt for u16 {}\n+pub impl UnSignedExt for u32 {}\n+pub impl UnSignedExt for u64 {}\n+pub impl UnSignedExt for uint {}\n \n \n pub trait SignedExt: NumExt {}\n \n-pub impl i8: SignedExt {}\n-pub impl i16: SignedExt {}\n-pub impl i32: SignedExt {}\n-pub impl i64: SignedExt {}\n-pub impl int: SignedExt {}\n+pub impl SignedExt for i8 {}\n+pub impl SignedExt for i16 {}\n+pub impl SignedExt for i32 {}\n+pub impl SignedExt for i64 {}\n+pub impl SignedExt for int {}\n \n-pub impl f32: SignedExt {}\n-pub impl f64: SignedExt {}\n-pub impl float: SignedExt {}\n+pub impl SignedExt for f32 {}\n+pub impl SignedExt for f64 {}\n+pub impl SignedExt for float {}\n \n \n pub trait IntegerExt: NumExt {}\n \n-pub impl u8: IntegerExt {}\n-pub impl u16: IntegerExt {}\n-pub impl u32: IntegerExt {}\n-pub impl u64: IntegerExt {}\n-pub impl uint: IntegerExt {}\n+pub impl IntegerExt for u8 {}\n+pub impl IntegerExt for u16 {}\n+pub impl IntegerExt for u32 {}\n+pub impl IntegerExt for u64 {}\n+pub impl IntegerExt for uint {}\n \n-pub impl i8: IntegerExt {}\n-pub impl i16: IntegerExt {}\n-pub impl i32: IntegerExt {}\n-pub impl i64: IntegerExt {}\n-pub impl int: IntegerExt {}\n+pub impl IntegerExt for i8 {}\n+pub impl IntegerExt for i16 {}\n+pub impl IntegerExt for i32 {}\n+pub impl IntegerExt for i64 {}\n+pub impl IntegerExt for int {}\n \n \n pub trait FloatExt: NumExt FuzzyEq<Self> {}\n \n-pub impl f32: FloatExt {}\n-pub impl f64: FloatExt {}\n-pub impl float: FloatExt {}\n+pub impl FloatExt for f32 {}\n+pub impl FloatExt for f64 {}\n+pub impl FloatExt for float {}\n \n \n fn test_float_ext<T:FloatExt>(n: T) { io::println(fmt!(\"%?\", n < n)) }"}, {"sha": "f184ab2741a1d4c3cc48096941126824d2ae7ef8", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -13,7 +13,7 @@ use num::NumCast::from;\n \n pub trait NumExt: Eq Ord NumCast {}\n \n-pub impl f32: NumExt {}\n+pub impl NumExt for f32 {}\n \n fn num_eq_one<T:NumExt>(n: T) { io::println(fmt!(\"%?\", n == from(1))) }\n "}, {"sha": "692d50e541a97a83aa7db15ac33515624ab98542", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -13,8 +13,8 @@ use num::NumCast::from;\n \n pub trait NumExt: Eq NumCast {}\n \n-pub impl f32: NumExt {}\n-pub impl int: NumExt {}\n+pub impl NumExt for f32 {}\n+pub impl NumExt for int {}\n \n fn num_eq_one<T:NumExt>() -> T {\n     from(1)"}, {"sha": "b068d109ccfdb19e82bfa40a28cac4e198be18c5", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ impl Eq for MyInt {\n     pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-impl MyInt : MyNum;\n+impl MyNum for MyInt;\n \n fn f<T:MyNum>(x: T, y: T) -> bool {\n     return x == y;"}, {"sha": "f56a950f918ce2910b53a4b17d3817cb69258043", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -31,7 +31,7 @@ impl Eq for MyInt {\n     pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-impl MyInt : MyNum;\n+impl MyNum for MyInt;\n \n fn f<T:Copy MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);"}, {"sha": "ea3e75f3551853dd28334ebb0ab2d04ebb7d18fe", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -20,7 +20,7 @@ impl Add<MyInt, MyInt> for MyInt {\n     pure fn add(other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-impl MyInt : MyNum;\n+impl MyNum for MyInt;\n \n fn f<T:MyNum>(x: T, y: T) -> T {\n     return x.add(&y);"}, {"sha": "ab755da709969a426452377f95633974f2675bc7", "filename": "src/test/run-pass/trait-inheritance-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -30,7 +30,7 @@ impl Add<MyInt, MyInt> for MyInt {\n     fn add(other: &MyInt) -> MyInt { self.chomp(other) }\n }\n \n-impl MyInt : MyNum;\n+impl MyNum for MyInt;\n \n fn f<T:MyNum>(x: T, y: T) -> T {\n     return x.add(&y).chomp(&y);"}, {"sha": "08448a65ac805f39c9f2e4abbf586a42889430d8", "filename": "src/test/run-pass/trait-inheritance2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ struct A { x: int }\n impl Foo for A { fn f() -> int { 10 } }\n impl Bar for A { fn g() -> int { 20 } }\n impl Baz for A { fn h() -> int { 30 } }\n-impl A : Quux;\n+impl Quux for A;\n \n fn f<T: Quux Foo Bar Baz>(a: &T) {\n     assert a.f() == 10;"}, {"sha": "d416f3f6c910e47544255b21bb41e576da2ca289", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb833ca0f0e878d381c3dc0c9afe958a810e4427/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=bb833ca0f0e878d381c3dc0c9afe958a810e4427", "patch": "@@ -19,7 +19,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl Foo : ::base::HasNew<Foo> {\n+    pub impl ::base::HasNew<Foo> for Foo {\n         static pure fn new() -> Foo {\n \t\t\tunsafe { io::println(\"Foo\"); }\n             Foo { dummy: () }\n@@ -30,7 +30,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl Bar : ::base::HasNew<Bar> {\n+    pub impl ::base::HasNew<Bar> for Bar {\n         static pure fn new() -> Bar {\n \t\t\tunsafe { io::println(\"Bar\"); }\n             Bar { dummy: () }"}]}