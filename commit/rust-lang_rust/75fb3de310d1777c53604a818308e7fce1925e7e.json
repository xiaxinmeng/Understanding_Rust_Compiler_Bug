{"sha": "75fb3de310d1777c53604a818308e7fce1925e7e", "node_id": "C_kwDOAAsO6NoAKDc1ZmIzZGUzMTBkMTc3N2M1MzYwNGE4MTgzMDhlN2ZjZTE5MjVlN2U", "commit": {"author": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-07-06T16:43:59Z"}, "committer": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-07-06T16:45:22Z"}, "message": "Handle generic args per arg index\nAdd more test cases for generic args", "tree": {"sha": "e2637dc09f9eb455c5780964fb915e8bb357e838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2637dc09f9eb455c5780964fb915e8bb357e838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fb3de310d1777c53604a818308e7fce1925e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fb3de310d1777c53604a818308e7fce1925e7e", "html_url": "https://github.com/rust-lang/rust/commit/75fb3de310d1777c53604a818308e7fce1925e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fb3de310d1777c53604a818308e7fce1925e7e/comments", "author": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f2eba54db7a16d2790f621adec54daa3e829973", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2eba54db7a16d2790f621adec54daa3e829973", "html_url": "https://github.com/rust-lang/rust/commit/0f2eba54db7a16d2790f621adec54daa3e829973"}], "stats": {"total": 265, "additions": 220, "deletions": 45}, "files": [{"sha": "eec960aa7dd0066dc8762d37c24060fbbadacecc", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=75fb3de310d1777c53604a818308e7fce1925e7e", "patch": "@@ -47,6 +47,7 @@ pub struct LifetimeParamData {\n pub struct ConstParamData {\n     pub name: Name,\n     pub ty: Interned<TypeRef>,\n+    pub has_default: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n@@ -70,6 +71,13 @@ impl TypeOrConstParamData {\n         }\n     }\n \n+    pub fn has_default(&self) -> bool {\n+        match self {\n+            TypeOrConstParamData::TypeParamData(x) => x.default.is_some(),\n+            TypeOrConstParamData::ConstParamData(x) => x.has_default,\n+        }\n+    }\n+\n     pub fn type_param(&self) -> Option<&TypeParamData> {\n         match self {\n             TypeOrConstParamData::TypeParamData(x) => Some(x),\n@@ -232,7 +240,11 @@ impl GenericParams {\n                     let ty = const_param\n                         .ty()\n                         .map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n-                    let param = ConstParamData { name, ty: Interned::new(ty) };\n+                    let param = ConstParamData {\n+                        name,\n+                        ty: Interned::new(ty),\n+                        has_default: const_param.default_val().is_some(),\n+                    };\n                     self.type_or_consts.alloc(param.into());\n                 }\n             }"}, {"sha": "96424d087ef57701c8f5de8c1c0144131573960d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=75fb3de310d1777c53604a818308e7fce1925e7e", "patch": "@@ -1709,7 +1709,11 @@ impl Trait {\n         db.trait_data(self.id).is_unsafe\n     }\n \n-    pub fn type_parameters(&self, db: &dyn HirDatabase) -> Vec<TypeOrConstParamData> {\n+    pub fn type_or_const_param_count(\n+        &self,\n+        db: &dyn HirDatabase,\n+        count_required_only: bool,\n+    ) -> usize {\n         db.generic_params(GenericDefId::from(self.id))\n             .type_or_consts\n             .iter()\n@@ -1721,9 +1725,9 @@ impl Trait {\n                 }\n                 _ => true,\n             })\n-            .map(|(_, ty)|ty.clone())\n-            .collect()\n-        }\n+            .filter(|(_, ty)| !count_required_only || !ty.has_default())\n+            .count()\n+    }\n }\n \n impl HasVisibility for Trait {"}, {"sha": "b2d5b6f5bde80b0f2ff904a1b25b8070886956b0", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=75fb3de310d1777c53604a818308e7fce1925e7e", "patch": "@@ -1,8 +1,7 @@\n //! Completion of names from the current scope in type position.\n \n use hir::{HirDisplay, ScopeDef};\n-use itertools::Itertools;\n-use syntax::{ast, AstNode};\n+use syntax::{ast, AstNode, SyntaxKind};\n \n use crate::{\n     context::{PathCompletionCtx, Qualified, TypeAscriptionTarget, TypeLocation},\n@@ -141,34 +140,36 @@ pub(crate) fn complete_type_path(\n                     return;\n                 }\n                 TypeLocation::GenericArgList(Some(arg_list)) => {\n-                    // the current token is in which generic arg\n-                    let arg_pos = if let Some((pos, _)) =\n-                        arg_list.generic_args().find_position(|arg| {\n-                            arg.syntax()\n-                                .descendants_with_tokens()\n-                                .any(|t| t.as_token() == Some(&ctx.original_token))\n-                        }) {\n-                        pos\n-                    } else {\n-                        0\n-                    };\n+                    let in_assoc_type_arg = ctx\n+                        .original_token\n+                        .parent_ancestors()\n+                        .any(|node| node.kind() == SyntaxKind::ASSOC_TYPE_ARG);\n \n-                    match arg_list.generic_args().next() {\n-                        Some(ast::GenericArg::AssocTypeArg(_)) => {}\n-                        _ => {\n-                            if let Some(path_seg) =\n-                                arg_list.syntax().parent().and_then(ast::PathSegment::cast)\n+                    if !in_assoc_type_arg {\n+                        if let Some(path_seg) =\n+                            arg_list.syntax().parent().and_then(ast::PathSegment::cast)\n+                        {\n+                            if path_seg\n+                                .syntax()\n+                                .ancestors()\n+                                .find_map(ast::TypeBound::cast)\n+                                .is_some()\n                             {\n-                                if path_seg\n-                                    .syntax()\n-                                    .ancestors()\n-                                    .find_map(ast::TypeBound::cast)\n-                                    .is_some()\n+                                if let Some(hir::PathResolution::Def(hir::ModuleDef::Trait(\n+                                    trait_,\n+                                ))) = ctx.sema.resolve_path(&path_seg.parent_path())\n                                 {\n-                                    if let Some(hir::PathResolution::Def(hir::ModuleDef::Trait(\n-                                        trait_,\n-                                    ))) = ctx.sema.resolve_path(&path_seg.parent_path())\n-                                    {\n+                                    let arg_idx = arg_list\n+                                        .generic_args()\n+                                        .filter(|arg| {\n+                                            arg.syntax().text_range().end()\n+                                                < ctx.original_token.text_range().start()\n+                                        })\n+                                        .count();\n+\n+                                    let n_required_params =\n+                                        trait_.type_or_const_param_count(ctx.sema.db, true);\n+                                    if arg_idx >= n_required_params {\n                                         trait_\n                                             .items_with_supertraits(ctx.sema.db)\n                                             .into_iter()\n@@ -180,10 +181,12 @@ pub(crate) fn complete_type_path(\n                                                     acc.add_type_alias_with_eq(ctx, alias);\n                                                 }\n                                             });\n+                                    }\n \n-                                        if arg_pos >= trait_.type_parameters(ctx.sema.db).len() {\n-                                            return; // only AssocTypeArgs make sense\n-                                        }\n+                                    let n_params =\n+                                        trait_.type_or_const_param_count(ctx.sema.db, false);\n+                                    if arg_idx >= n_params {\n+                                        return; // only show assoc types\n                                     }\n                                 }\n                             }"}, {"sha": "d10fcb2ccea3b58ca5e882eff8235799bb29f8cd", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 166, "deletions": 10, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fb3de310d1777c53604a818308e7fce1925e7e/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=75fb3de310d1777c53604a818308e7fce1925e7e", "patch": "@@ -399,16 +399,14 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             ct CONST\n             cp CONST_PARAM\n             en Enum\n-            ma makro!(\u2026)            macro_rules! makro\n+            ma makro!(\u2026)   macro_rules! makro\n             md module\n             st Record\n             st Tuple\n             st Unit\n             tt Trait\n             tt Trait1\n             tt Trait2\n-            ta Foo =  (as Trait2)   type Foo\n-            ta Super =  (as Trait1) type Super\n             tp T\n             un Union\n             bt u32\n@@ -490,17 +488,147 @@ fn func(_: Enum::$0) {}\n }\n \n #[test]\n-fn completes_associated_type_only() {\n+fn completes_type_parameter_or_associated_type() {\n+    check(\n+        r#\"\n+trait MyTrait<T, U> {\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<u$0\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt MyTrait\n+            tt Trait\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+trait MyTrait<T, U> {\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<u8, u$0\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt MyTrait\n+            tt Trait\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+trait MyTrait<T, U> {\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<u8, u8, I$0\n+\"#,\n+        expect![[r#\"\n+            ta Item1 =  (as MyTrait) type Item1\n+            ta Item2 =  (as MyTrait) type Item2\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_type_parameter_or_associated_type_with_default_value() {\n+    check(\n+        r#\"\n+trait MyTrait<T = u8, U> {\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<u$0\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt MyTrait\n+            tt Trait\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+trait MyTrait<T = u8, U> {\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<u8, u$0\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            en Enum\n+            ma makro!(\u2026)             macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt MyTrait\n+            tt Trait\n+            ta Item1 =  (as MyTrait) type Item1\n+            ta Item2 =  (as MyTrait) type Item2\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+\n     check(\n         r#\"\n-trait MyTrait<T> {\n-    type Item;\n+trait MyTrait<T = u8, U> {\n+    type Item1;\n+    type Item2;\n };\n \n-fn f(t: impl MyTrait<u8,I$0\n+fn f(t: impl MyTrait<u8, u8, I$0\n \"#,\n         expect![[r#\"\n-            ta Item =  (as MyTrait) type Item\n+            ta Item1 =  (as MyTrait) type Item1\n+            ta Item2 =  (as MyTrait) type Item2\n         \"#]],\n     );\n }\n@@ -510,10 +638,38 @@ fn completes_types_after_associated_type() {\n     check(\n         r#\"\n trait MyTrait {\n-    type Item;\n+    type Item1;\n+    type Item2;\n+};\n+\n+fn f(t: impl MyTrait<Item1 = $0\n+\"#,\n+        expect![[r#\"\n+            ct CONST\n+            en Enum\n+            ma makro!(\u2026) macro_rules! makro\n+            md module\n+            st Record\n+            st Tuple\n+            st Unit\n+            tt MyTrait\n+            tt Trait\n+            un Union\n+            bt u32\n+            kw crate::\n+            kw self::\n+            kw super::\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+trait MyTrait {\n+    type Item1;\n+    type Item2;\n };\n \n-fn f(t: impl MyTrait<Item = $0\n+fn f(t: impl MyTrait<Item1 = u8, Item2 = $0\n \"#,\n         expect![[r#\"\n             ct CONST"}]}