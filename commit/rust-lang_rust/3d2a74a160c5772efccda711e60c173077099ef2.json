{"sha": "3d2a74a160c5772efccda711e60c173077099ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMmE3NGExNjBjNTc3MmVmY2NkYTcxMWU2MGMxNzMwNzcwOTllZjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T02:26:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T02:26:48Z"}, "message": "Reserve 'be' as a keyword", "tree": {"sha": "232a101ea013a8ead9633bd9a83c8a6e9c62798a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232a101ea013a8ead9633bd9a83c8a6e9c62798a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2a74a160c5772efccda711e60c173077099ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2a74a160c5772efccda711e60c173077099ef2", "html_url": "https://github.com/rust-lang/rust/commit/3d2a74a160c5772efccda711e60c173077099ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2a74a160c5772efccda711e60c173077099ef2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea01ee2e9e161a7028b98848c071e5fe9c30c7f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea01ee2e9e161a7028b98848c071e5fe9c30c7f7", "html_url": "https://github.com/rust-lang/rust/commit/ea01ee2e9e161a7028b98848c071e5fe9c30c7f7"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "a498b69527abe9636d64132d07cea13c61946490", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=3d2a74a160c5772efccda711e60c173077099ef2", "patch": "@@ -85,6 +85,7 @@ impl parser: parser_common {\n \n     fn parse_ident() -> ast::ident {\n         self.check_strict_keywords();\n+        self.check_reserved_keywords();\n         match copy self.token {\n           token::IDENT(i, _) => { self.bump(); return i; }\n           token::INTERPOLATED(token::nt_ident(*)) => { self.bug(\n@@ -204,6 +205,26 @@ impl parser: parser_common {\n         }\n     }\n \n+    fn is_reserved_keyword(word: ~str) -> bool {\n+        self.reserved_keywords.contains_key_ref(&word)\n+    }\n+\n+    fn check_reserved_keywords() {\n+        match self.token {\n+          token::IDENT(_, false) => {\n+            let w = token_to_str(self.reader, self.token);\n+            self.check_reserved_keywords_(w);\n+          }\n+          _ => ()\n+        }\n+    }\n+\n+    fn check_reserved_keywords_(w: ~str) {\n+        if self.is_reserved_keyword(w) {\n+            self.fatal(~\"`\" + w + ~\"` is a reserved keyword\");\n+        }\n+    }\n+\n     fn expect_gt() {\n         if self.token == token::GT {\n             self.bump();"}, {"sha": "ea824ea2fb612e88329998c871c722b3d7113eeb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3d2a74a160c5772efccda711e60c173077099ef2", "patch": "@@ -216,6 +216,7 @@ fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n         keywords: token::keyword_table(),\n         restricted_keywords: token::restricted_keyword_table(),\n         strict_keywords: token::strict_keyword_table(),\n+        reserved_keywords: token::reserved_keyword_table(),\n         obsolete_set: std::map::HashMap(),\n     }\n }\n@@ -237,6 +238,7 @@ struct parser {\n     keywords: HashMap<~str, ()>,\n     restricted_keywords: HashMap<~str, ()>,\n     strict_keywords: HashMap<~str, ()>,\n+    reserved_keywords: HashMap<~str, ()>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n     obsolete_set: HashMap<ObsoleteSyntax, ()>,"}, {"sha": "3e5abe557e2e0d8b117c0d5ad552b096017a34b3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2a74a160c5772efccda711e60c173077099ef2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3d2a74a160c5772efccda711e60c173077099ef2", "patch": "@@ -379,6 +379,9 @@ fn keyword_table() -> HashMap<~str, ()> {\n     for strict_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n     }\n+    for reserved_keyword_table().each_key |word| {\n+        keywords.insert(word, ());\n+    }\n     keywords\n }\n \n@@ -447,6 +450,17 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n     words\n }\n \n+fn reserved_keyword_table() -> HashMap<~str, ()> {\n+    let words = str_hash();\n+    let keys = ~[\n+        ~\"be\"\n+    ];\n+    for keys.each |word| {\n+        words.insert(word, ());\n+    }\n+    words\n+}\n+\n impl binop : cmp::Eq {\n     pure fn eq(&&other: binop) -> bool {\n         (self as uint) == (other as uint)"}, {"sha": "709124fe10cebde06c80657bbce42100a0b06698", "filename": "src/test/compile-fail/reserved-be.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d2a74a160c5772efccda711e60c173077099ef2/src%2Ftest%2Fcompile-fail%2Freserved-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2a74a160c5772efccda711e60c173077099ef2/src%2Ftest%2Fcompile-fail%2Freserved-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freserved-be.rs?ref=3d2a74a160c5772efccda711e60c173077099ef2", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let be = 0;\n+    //~^ ERROR `be` is a reserved keyword\n+}\n\\ No newline at end of file"}]}