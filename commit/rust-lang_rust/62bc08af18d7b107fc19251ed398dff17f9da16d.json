{"sha": "62bc08af18d7b107fc19251ed398dff17f9da16d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmMwOGFmMThkN2IxMDdmYzE5MjUxZWQzOThkZmYxN2Y5ZGExNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-19T10:17:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-19T10:17:32Z"}, "message": "Auto merge of #1180 - RalfJung:fs-refact, r=RalfJung\n\nSlight refactoring of FS test", "tree": {"sha": "ab013fe51837c1e1d027c68d109423ca20be4590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab013fe51837c1e1d027c68d109423ca20be4590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bc08af18d7b107fc19251ed398dff17f9da16d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bc08af18d7b107fc19251ed398dff17f9da16d", "html_url": "https://github.com/rust-lang/rust/commit/62bc08af18d7b107fc19251ed398dff17f9da16d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bc08af18d7b107fc19251ed398dff17f9da16d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12170f10d8e149d62db0924849623bf1a5a38429", "url": "https://api.github.com/repos/rust-lang/rust/commits/12170f10d8e149d62db0924849623bf1a5a38429", "html_url": "https://github.com/rust-lang/rust/commit/12170f10d8e149d62db0924849623bf1a5a38429"}, {"sha": "3cd13cb1746193f077766985273b144beba01480", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd13cb1746193f077766985273b144beba01480", "html_url": "https://github.com/rust-lang/rust/commit/3cd13cb1746193f077766985273b144beba01480"}], "stats": {"total": 84, "additions": 31, "deletions": 53}, "files": [{"sha": "453432f64f10570e260bd504b4bd3d09bd5962df", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 31, "deletions": 53, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/62bc08af18d7b107fc19251ed398dff17f9da16d/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc08af18d7b107fc19251ed398dff17f9da16d/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=62bc08af18d7b107fc19251ed398dff17f9da16d", "patch": "@@ -15,13 +15,26 @@ fn main() {\n     test_rename();\n }\n \n-fn test_file() {\n+/// Prepare: compute filename and make sure the file does not exist.\n+fn prepare(filename: &str) -> PathBuf {\n     let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_file.txt\");\n-    let path = tmp.join(&filename);\n-    let bytes = b\"Hello, World!\\n\";\n+    let path = tmp.join(filename);\n     // Clean the paths for robustness.\n     remove_file(&path).ok();\n+    path\n+}\n+\n+/// Prepare like above, and also write some initial content to the file.\n+fn prepare_with_content(filename: &str, content: &[u8]) -> PathBuf {\n+    let path = prepare(filename);\n+    let mut file = File::create(&path).unwrap();\n+    file.write(content).unwrap();\n+    path\n+}\n+\n+fn test_file() {\n+    let bytes = b\"Hello, World!\\n\";\n+    let path = prepare(\"miri_test_fs_file.txt\");\n \n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n     let mut file = File::create(&path).unwrap();\n@@ -45,15 +58,8 @@ fn test_file() {\n }\n \n fn test_file_clone() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_file_clone.txt\");\n-    let path = tmp.join(&filename);\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let path = prepare_with_content(\"miri_test_fs_file_clone.txt\", bytes);\n \n     // Cloning a file should be successful.\n     let file = File::open(&path).unwrap();\n@@ -68,19 +74,13 @@ fn test_file_clone() {\n }\n \n fn test_seek() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_seek.txt\");\n-    let path = tmp.join(&filename);\n-    let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let bytes = b\"Hello, entire World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_seek.txt\", bytes);\n \n     let mut file = File::open(&path).unwrap();\n     let mut contents = Vec::new();\n     file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(bytes, contents.as_slice());\n     // Test that seeking to the beginning and reading until EOF gets the text again.\n     file.seek(SeekFrom::Start(0)).unwrap();\n     let mut contents = Vec::new();\n@@ -113,38 +113,23 @@ fn check_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n }\n \n fn test_metadata() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_metadata.txt\");\n-    let path = tmp.join(&filename);\n-    let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let bytes = b\"Hello, meta-World!\\n\";\n+    let path = prepare_with_content(\"miri_test_fs_metadata.txt\", bytes);\n \n     // Test that metadata of an absolute path is correct.\n     check_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct.\n-    std::env::set_current_dir(&tmp).unwrap();\n-    check_metadata(bytes, &filename).unwrap();\n+    std::env::set_current_dir(path.parent().unwrap()).unwrap();\n+    check_metadata(bytes, Path::new(path.file_name().unwrap())).unwrap();\n \n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n }\n \n fn test_symlink() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_link_target.txt\");\n-    let path = tmp.join(&filename);\n-    let symlink_path = tmp.join(\"miri_test_fs_symlink.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n-    remove_file(&symlink_path).ok();\n-\n-    let mut file = File::create(&path).unwrap();\n-    file.write(bytes).unwrap();\n+    let path = prepare_with_content(\"miri_test_fs_link_target.txt\", bytes);\n+    let symlink_path = prepare(\"miri_test_fs_symlink.txt\");\n \n     // Creating a symbolic link should succeed.\n     std::os::unix::fs::symlink(&path, &symlink_path).unwrap();\n@@ -165,12 +150,8 @@ fn test_symlink() {\n }\n \n fn test_errors() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_errors.txt\");\n-    let path = tmp.join(&filename);\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n+    let path = prepare(\"miri_test_fs_errors.txt\");\n \n     // The following tests also check that the `__errno_location()` shim is working properly.\n     // Opening a non-existing file should fail with a \"not found\" error.\n@@ -182,13 +163,10 @@ fn test_errors() {\n }\n \n fn test_rename() {\n-    let tmp = std::env::temp_dir();\n     // Renaming a file should succeed.\n-    let path1 = tmp.join(\"miri_test_fs_rename_source.txt\");\n-    let path2 = tmp.join(\"miri_test_fs_rename_destination.txt\");\n-    // Clean files for robustness.\n-    remove_file(&path1).ok();\n-    remove_file(&path2).ok();\n+    let path1 = prepare(\"miri_test_fs_rename_source.txt\");\n+    let path2 = prepare(\"miri_test_fs_rename_destination.txt\");\n+\n     let file = File::create(&path1).unwrap();\n     drop(file);\n     rename(&path1, &path2).unwrap();"}]}