{"sha": "50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMDM1ZThkODRjMDU1YWU5YzU0YTBkYTYzOGM0YzAyZjRjMGVmMGE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-05T13:37:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-05T13:37:05Z"}, "message": "Rollup merge of #66053 - RalfJung:miri-toolstate, r=pietroalbini\n\nwhen Miri tests are not passing, do not add Miri component\n\nSecond attempt, this time based on the JSON files that exist since https://github.com/rust-lang/rust/pull/65274.\n\nFixes https://github.com/rust-lang/rust/issues/60301\nr? @pietroalbini @alexcrichton", "tree": {"sha": "0168f7750eb6b456146cab2852614b55844002fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0168f7750eb6b456146cab2852614b55844002fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwXsBCRBK7hj4Ov3rIwAAdHIIABkm4A7oTuJ28eIpgA8zin87\nOB2hF9MMi5v+xtRqRbJ9HNlTh9Kyfn7ezpeq73K2bkMRKwfw5VX/oxQ3sjlmAvgg\nF3YZHALxSS6jqjRBkhi7SfZHcBtNt+RVuhAGhM/Fn7FyLOywRq4i7Ad6jEytEoRj\nHiH3rrRBi22XJNlDHzbAVlOygcFufR8oc8lHwKJZac8YNTSAPzO19eg9hn8XB4Bb\nlt2MVTNv1aRyM0c0tdsyckNg9eZ/3Ru3Mw1Byd1TpkrZ0s69OF939P3xMfuBUx1m\n1KIK50HdkbReygtBoPuyiY9MiWgugVV+NEXqAhAxrU0CnLQGc+ZOBGdLFOScdXE=\n=xcb1\n-----END PGP SIGNATURE-----\n", "payload": "tree 0168f7750eb6b456146cab2852614b55844002fb\nparent 80404bf088f1a0b40ac580047a175dad285569c3\nparent 224378cc6addb0b3f3d40b4fbad5a7f031fbf57b\nauthor Pietro Albini <pietro@pietroalbini.org> 1572961025 +0100\ncommitter GitHub <noreply@github.com> 1572961025 +0100\n\nRollup merge of #66053 - RalfJung:miri-toolstate, r=pietroalbini\n\nwhen Miri tests are not passing, do not add Miri component\n\nSecond attempt, this time based on the JSON files that exist since https://github.com/rust-lang/rust/pull/65274.\n\nFixes https://github.com/rust-lang/rust/issues/60301\nr? @pietroalbini @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "html_url": "https://github.com/rust-lang/rust/commit/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80404bf088f1a0b40ac580047a175dad285569c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/80404bf088f1a0b40ac580047a175dad285569c3", "html_url": "https://github.com/rust-lang/rust/commit/80404bf088f1a0b40ac580047a175dad285569c3"}, {"sha": "224378cc6addb0b3f3d40b4fbad5a7f031fbf57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/224378cc6addb0b3f3d40b4fbad5a7f031fbf57b", "html_url": "https://github.com/rust-lang/rust/commit/224378cc6addb0b3f3d40b4fbad5a7f031fbf57b"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "873f5da0537872ab96b6201b267aef47c70ca812", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "patch": "@@ -208,6 +208,7 @@ name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n  \"serde\",\n+ \"serde_json\",\n  \"toml\",\n ]\n "}, {"sha": "0bbbabd29989ebce3b5c749a1272be2b9bb5d6ff", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "patch": "@@ -7,3 +7,4 @@ edition = \"2018\"\n [dependencies]\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n+serde_json = \"1.0\""}, {"sha": "d92924085e7c785694f42f69fc2ebb1aafc99845", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50035e8d84c055ae9c54a0da638c4c02f4c0ef0a/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=50035e8d84c055ae9c54a0da638c4c02f4c0ef0a", "patch": "@@ -11,10 +11,11 @@ use serde::Serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n-use std::fs;\n+use std::fs::{self, File};\n use std::io::{self, Read, Write};\n use std::path::{PathBuf, Path};\n use std::process::{Command, Stdio};\n+use std::collections::HashMap;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n@@ -366,6 +367,7 @@ impl Builder {\n         self.lldb_git_commit_hash = self.git_commit_hash(\"lldb\", \"x86_64-unknown-linux-gnu\");\n         self.miri_git_commit_hash = self.git_commit_hash(\"miri\", \"x86_64-unknown-linux-gnu\");\n \n+        self.check_toolstate();\n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n         self.write_channel_files(&self.rust_release, &manifest);\n@@ -375,6 +377,25 @@ impl Builder {\n         }\n     }\n \n+    /// If a tool does not pass its tests, don't ship it.\n+    /// Right now, we do this only for Miri.\n+    fn check_toolstate(&mut self) {\n+        let toolstates: Option<HashMap<String, String>> =\n+            File::open(self.input.join(\"toolstates-linux.json\")).ok()\n+                .and_then(|f| serde_json::from_reader(&f).ok());\n+        let toolstates = toolstates.unwrap_or_else(|| {\n+            println!(\"WARNING: `toolstates-linux.json` missing/malformed; \\\n+                assuming all tools failed\");\n+            HashMap::default() // Use empty map if anything went wrong.\n+        });\n+        // Mark some tools as missing based on toolstate.\n+        if toolstates.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n+            println!(\"Miri tests are not passing, removing component\");\n+            self.miri_version = None;\n+            self.miri_git_commit_hash = None;\n+        }\n+    }\n+\n     /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {"}]}