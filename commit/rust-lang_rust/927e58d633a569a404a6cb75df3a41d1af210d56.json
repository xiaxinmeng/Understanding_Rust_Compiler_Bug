{"sha": "927e58d633a569a404a6cb75df3a41d1af210d56", "node_id": "C_kwDOAAsO6NoAKDkyN2U1OGQ2MzNhNTY5YTQwNGE2Y2I3NWRmM2E0MWQxYWYyMTBkNTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-08T18:59:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:04:49Z"}, "message": "Move VariantData to a metadata table.", "tree": {"sha": "2db1b01282f7ddd1bdec5d57308ff2416af84449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db1b01282f7ddd1bdec5d57308ff2416af84449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927e58d633a569a404a6cb75df3a41d1af210d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927e58d633a569a404a6cb75df3a41d1af210d56", "html_url": "https://github.com/rust-lang/rust/commit/927e58d633a569a404a6cb75df3a41d1af210d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927e58d633a569a404a6cb75df3a41d1af210d56/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd25c37c5246e082aadd3e110bc88282cd13ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd25c37c5246e082aadd3e110bc88282cd13ca5", "html_url": "https://github.com/rust-lang/rust/commit/edd25c37c5246e082aadd3e110bc88282cd13ca5"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "d04bcbfc4b0eba41e7e0f90ecb50e64f808a6596", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=927e58d633a569a404a6cb75df3a41d1af210d56", "patch": "@@ -858,20 +858,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_variant(self, kind: &EntryKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n-        let data = match kind {\n-            EntryKind::Variant(data) | EntryKind::Struct(data) | EntryKind::Union(data) => {\n-                data.decode(self)\n-            }\n-            _ => bug!(),\n-        };\n-\n         let adt_kind = match kind {\n-            EntryKind::Variant(_) => ty::AdtKind::Enum,\n-            EntryKind::Struct(..) => ty::AdtKind::Struct,\n-            EntryKind::Union(..) => ty::AdtKind::Union,\n+            EntryKind::Variant => ty::AdtKind::Enum,\n+            EntryKind::Struct => ty::AdtKind::Struct,\n+            EntryKind::Union => ty::AdtKind::Union,\n             _ => bug!(),\n         };\n \n+        let data = self.root.tables.variant_data.get(self, index).unwrap().decode(self);\n+\n         let variant_did =\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n         let ctor_did = data.ctor.map(|index| self.local_def_id(index));\n@@ -907,8 +902,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         let adt_kind = match kind {\n             EntryKind::Enum => ty::AdtKind::Enum,\n-            EntryKind::Struct(_) => ty::AdtKind::Struct,\n-            EntryKind::Union(_) => ty::AdtKind::Union,\n+            EntryKind::Struct => ty::AdtKind::Struct,\n+            EntryKind::Union => ty::AdtKind::Union,\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n         let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n@@ -1158,8 +1153,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {\n         match self.kind(node_id) {\n-            EntryKind::Struct(data) | EntryKind::Variant(data) => {\n-                let vdata = data.decode(self);\n+            EntryKind::Struct | EntryKind::Variant => {\n+                let vdata = self.root.tables.variant_data.get(self, node_id).unwrap().decode(self);\n                 vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))\n             }\n             _ => None,"}, {"sha": "fa410821f3155218e30259ab0bb6851e5838fbb3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=927e58d633a569a404a6cb75df3a41d1af210d56", "patch": "@@ -1206,7 +1206,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n+        record!(self.tables.variant_data[def_id] <- data);\n+        record!(self.tables.kind[def_id] <- EntryKind::Variant);\n         self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n@@ -1234,7 +1235,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n+        record!(self.tables.variant_data[def_id] <- data);\n+        record!(self.tables.kind[def_id] <- EntryKind::Variant);\n         self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1301,8 +1303,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+        record!(self.tables.variant_data[def_id] <- data);\n+        record!(self.tables.kind[def_id] <- EntryKind::Struct);\n         self.tables.constness.set(def_id.index, hir::Constness::Const);\n-        record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1541,24 +1544,26 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);\n \n                 let variant = adt_def.non_enum_variant();\n-                EntryKind::Struct(self.lazy(VariantData {\n+                record!(self.tables.variant_data[def_id] <- VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor,\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n-                }))\n+                });\n+                EntryKind::Struct\n             }\n             hir::ItemKind::Union(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n \n                 let variant = adt_def.non_enum_variant();\n-                EntryKind::Union(self.lazy(VariantData {\n+                record!(self.tables.variant_data[def_id] <- VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor: None,\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n-                }))\n+                });\n+                EntryKind::Union\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);"}, {"sha": "6353e04316b1a03a2f47cc4909061e007edf31b9", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927e58d633a569a404a6cb75df3a41d1af210d56/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=927e58d633a569a404a6cb75df3a41d1af210d56", "patch": "@@ -393,6 +393,7 @@ define_tables! {\n     proc_macro_quoted_spans: Table<usize, LazyValue<Span>>,\n     generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'static>>>,\n     may_have_doc_links: Table<DefIndex, ()>,\n+    variant_data: Table<DefIndex, LazyValue<VariantData>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n@@ -410,9 +411,9 @@ enum EntryKind {\n     OpaqueTy,\n     Enum,\n     Field,\n-    Variant(LazyValue<VariantData>),\n-    Struct(LazyValue<VariantData>),\n-    Union(LazyValue<VariantData>),\n+    Variant,\n+    Struct,\n+    Union,\n     Fn,\n     ForeignFn,\n     Mod(LazyArray<ModChild>),"}]}