{"sha": "c61e8face090e2b8a0a8eca535e8b58feee25625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWU4ZmFjZTA5MGUyYjhhMGE4ZWNhNTM1ZThiNThmZWVlMjU2MjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-12T15:08:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-13T13:01:09Z"}, "message": "fix test suite", "tree": {"sha": "ba293e68a0d133f9241346bafadb647d7ef0aaaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba293e68a0d133f9241346bafadb647d7ef0aaaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61e8face090e2b8a0a8eca535e8b58feee25625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61e8face090e2b8a0a8eca535e8b58feee25625", "html_url": "https://github.com/rust-lang/rust/commit/c61e8face090e2b8a0a8eca535e8b58feee25625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61e8face090e2b8a0a8eca535e8b58feee25625/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a245e0226c387c39d35723f0091cbaa7b49386e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a245e0226c387c39d35723f0091cbaa7b49386e", "html_url": "https://github.com/rust-lang/rust/commit/2a245e0226c387c39d35723f0091cbaa7b49386e"}], "stats": {"total": 129, "additions": 59, "deletions": 70}, "files": [{"sha": "edb3d60ba3f894372d0a76936d5f4ada45072fea", "filename": "src/test/incremental/issue-61530.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fincremental%2Fissue-61530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fincremental%2Fissue-61530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61530.rs?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -11,7 +11,8 @@ extern \"platform-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n-        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n+        const IDX: [u32; 2] = [0, 0];\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), IDX);\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), IDX);\n     }\n }"}, {"sha": "214d6752cef1d0407f8f4ac07d3b0aaf1312d83c", "filename": "src/test/ui/issues/issue-38074.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a245e0226c387c39d35723f0091cbaa7b49386e/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a245e0226c387c39d35723f0091cbaa7b49386e/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs?ref=2a245e0226c387c39d35723f0091cbaa7b49386e", "patch": "@@ -1,20 +0,0 @@\n-// run-pass\n-// ignore-emscripten FIXME(#45351)\n-\n-#![feature(platform_intrinsics, repr_simd)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-}\n-\n-#[repr(simd)]\n-#[derive(Clone, Copy)]\n-#[allow(non_camel_case_types)]\n-struct u64x2(u64, u64);\n-\n-fn main() {\n-    let a = u64x2(1, 2);\n-    let r: u64x2 = unsafe { simd_shuffle2(a, a, [0-0, 0-0]) };\n-    assert_eq!(r.0, 1);\n-    assert_eq!(r.1, 1);\n-}"}, {"sha": "abde69163bd4eb1e95e4b39b26030788ad3c9f17", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -50,25 +50,28 @@ fn main() {\n         simd_extract::<_, f32>(x, 0);\n         //~^ ERROR expected return type `i32` (element of input `i32x4`), found `f32`\n \n-        simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n+        const IDX2: [u32; 2] = [0; 2];\n+        simd_shuffle2::<i32, i32>(0, 0, IDX2);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n-        simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n+        const IDX4: [u32; 4] = [0; 4];\n+        simd_shuffle4::<i32, i32>(0, 0, IDX4);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n-        simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n+        const IDX8: [u32; 8] = [0; 8];\n+        simd_shuffle8::<i32, i32>(0, 0, IDX8);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n-        simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n+        simd_shuffle2::<_, f32x2>(x, x, IDX2);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-        simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n+        simd_shuffle4::<_, f32x4>(x, x, IDX4);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-        simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n+        simd_shuffle8::<_, f32x8>(x, x, IDX8);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n \n-        simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n+        simd_shuffle2::<_, i32x8>(x, x, IDX2);\n         //~^ ERROR expected return type of length 2, found `i32x8` with length 8\n-        simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n+        simd_shuffle4::<_, i32x8>(x, x, IDX4);\n         //~^ ERROR expected return type of length 4, found `i32x8` with length 8\n-        simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n+        simd_shuffle8::<_, i32x2>(x, x, IDX8);\n         //~^ ERROR expected return type of length 8, found `i32x2` with length 2\n     }\n }"}, {"sha": "4220411114efd6d4dcc728d540a407c7039902bc", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -17,58 +17,58 @@ LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:53:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:54:9\n    |\n-LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<i32, i32>(0, 0, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n    |\n-LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<i32, i32>(0, 0, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n    |\n-LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<i32, i32>(0, 0, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n    |\n-LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<_, f32x2>(x, x, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:65:9\n    |\n-LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<_, f32x4>(x, x, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n    |\n-LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<_, f32x8>(x, x, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n    |\n-LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle2::<_, i32x8>(x, x, IDX2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:69:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n    |\n-LL |         simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle4::<_, i32x8>(x, x, IDX4);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:74:9\n    |\n-LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         simd_shuffle8::<_, i32x2>(x, x, IDX8);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "7221b3ab769db460c8be8dc1836479cee74401f6", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557-ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -21,5 +21,6 @@ fn main() {\n \n #[inline(always)]\n unsafe fn inline_me() -> Simd2 {\n-    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 3])\n+    const IDX: [u32; 2] = [0, 3];\n+    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX)\n }"}, {"sha": "0d15427095a749d69964a5c8246ab596aa2c86e6", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -15,7 +15,8 @@ struct Simd2(u8, u8);\n \n fn main() {\n     unsafe {\n-        let p_res: Simd2 = simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 1]);\n+        const IDX: [u32; 2] = [0, 1];\n+        let p_res: Simd2 = simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX);\n         let a_res: Simd2 = inline_me();\n \n         assert_10_11(p_res);\n@@ -36,5 +37,6 @@ fn assert_10_13(x: Simd2) {\n \n #[inline(always)]\n unsafe fn inline_me() -> Simd2 {\n-    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), [0, 3])\n+    const IDX: [u32; 2] = [0, 3];\n+    simd_shuffle2(Simd2(10, 11), Simd2(12, 13), IDX)\n }"}, {"sha": "08544bce45db97dca47c604f50a2b0073337edff", "filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8face090e2b8a0a8eca535e8b58feee25625/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs?ref=c61e8face090e2b8a0a8eca535e8b58feee25625", "patch": "@@ -2,6 +2,8 @@\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n #![feature(repr_simd, platform_intrinsics)]\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -82,19 +84,19 @@ fn main() {\n     let y4 = i32x4(140, 141, 142, 143);\n     let y8 = i32x8(180, 181, 182, 183, 184, 185, 186, 187);\n     unsafe {\n-        all_eq!(simd_shuffle2(x2, y2, [3, 0]), i32x2(121, 20));\n-        all_eq!(simd_shuffle4(x2, y2, [3, 0, 1, 2]), i32x4(121, 20, 21, 120));\n-        all_eq!(simd_shuffle8(x2, y2, [3, 0, 1, 2, 1, 2, 3, 0]),\n+        all_eq!(simd_shuffle2(x2, y2, const { [3u32, 0] }), i32x2(121, 20));\n+        all_eq!(simd_shuffle4(x2, y2, const { [3u32, 0, 1, 2] }), i32x4(121, 20, 21, 120));\n+        all_eq!(simd_shuffle8(x2, y2, const { [3u32, 0, 1, 2, 1, 2, 3, 0] }),\n                 i32x8(121, 20, 21, 120, 21, 120, 121, 20));\n \n-        all_eq!(simd_shuffle2(x4, y4, [7, 2]), i32x2(143, 42));\n-        all_eq!(simd_shuffle4(x4, y4, [7, 2, 5, 0]), i32x4(143, 42, 141, 40));\n-        all_eq!(simd_shuffle8(x4, y4, [7, 2, 5, 0, 3, 6, 4, 1]),\n+        all_eq!(simd_shuffle2(x4, y4, const { [7u32, 2] }), i32x2(143, 42));\n+        all_eq!(simd_shuffle4(x4, y4, const { [7u32, 2, 5, 0] }), i32x4(143, 42, 141, 40));\n+        all_eq!(simd_shuffle8(x4, y4, const { [7u32, 2, 5, 0, 3, 6, 4, 1] }),\n                 i32x8(143, 42, 141, 40, 43, 142, 140, 41));\n \n-        all_eq!(simd_shuffle2(x8, y8, [11, 5]), i32x2(183, 85));\n-        all_eq!(simd_shuffle4(x8, y8, [11, 5, 15, 0]), i32x4(183, 85, 187, 80));\n-        all_eq!(simd_shuffle8(x8, y8, [11, 5, 15, 0, 3, 8, 12, 1]),\n+        all_eq!(simd_shuffle2(x8, y8, const { [11u32, 5] }), i32x2(183, 85));\n+        all_eq!(simd_shuffle4(x8, y8, const { [11u32, 5, 15, 0] }), i32x4(183, 85, 187, 80));\n+        all_eq!(simd_shuffle8(x8, y8, const { [11u32, 5, 15, 0, 3, 8, 12, 1] }),\n                 i32x8(183, 85, 187, 80, 83, 180, 184, 81));\n     }\n "}]}