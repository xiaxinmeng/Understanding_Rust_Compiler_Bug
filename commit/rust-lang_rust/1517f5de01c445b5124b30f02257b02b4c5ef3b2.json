{"sha": "1517f5de01c445b5124b30f02257b02b4c5ef3b2", "node_id": "C_kwDOAAsO6NoAKDE1MTdmNWRlMDFjNDQ1YjUxMjRiMzBmMDIyNTdiMDJiNGM1ZWYzYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T20:55:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T20:55:34Z"}, "message": "Auto merge of #99024 - matthiaskrgr:rollup-8ygpcpg, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #97917 (Implement ExitCodeExt for Windows)\n - #98844 (Reword comments and rename HIR visiting methods.)\n - #98979 (interpret: use AllocRange in UninitByteAccess)\n - #98986 (Fix missing word in comment)\n - #98994 (replace process exit with more detailed exit in src/bootstrap/*.rs)\n - #98995 (Add a test for #80471)\n - #99002 (suggest adding a derive for #[default] applied to variants)\n - #99004 (Add a test for #70408)\n - #99017 (Replace boolean argument for print_where_clause with an enum to make code more clear)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cd18ab49889e14418f1604fc8dfaa99ad78d23d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd18ab49889e14418f1604fc8dfaa99ad78d23d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1517f5de01c445b5124b30f02257b02b4c5ef3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1517f5de01c445b5124b30f02257b02b4c5ef3b2", "html_url": "https://github.com/rust-lang/rust/commit/1517f5de01c445b5124b30f02257b02b4c5ef3b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1517f5de01c445b5124b30f02257b02b4c5ef3b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f573a0c5474ad65bc9f0b0fd3a94d1b06dcfdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f573a0c5474ad65bc9f0b0fd3a94d1b06dcfdfa", "html_url": "https://github.com/rust-lang/rust/commit/0f573a0c5474ad65bc9f0b0fd3a94d1b06dcfdfa"}, {"sha": "ec0c1560be5486ece4c80d007d467d00a3962a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c1560be5486ece4c80d007d467d00a3962a24", "html_url": "https://github.com/rust-lang/rust/commit/ec0c1560be5486ece4c80d007d467d00a3962a24"}], "stats": {"total": 579, "additions": 343, "deletions": 236}, "files": [{"sha": "08102585a7b743342e526dbecd5ec94145105e7b", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -427,7 +427,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             err_ub!(DanglingIntPointer(0, _)) =>\n                 { \"a null {kind}\" },\n             err_ub!(DanglingIntPointer(i, _)) =>\n-                { \"a dangling {kind} (address 0x{i:x} is unallocated)\" },\n+                { \"a dangling {kind} (address {i:#x} is unallocated)\" },\n             err_ub!(PointerOutOfBounds { .. }) =>\n                 { \"a dangling {kind} (going beyond the bounds of its allocation)\" },\n             // This cannot happen during const-eval (because interning already detects\n@@ -941,7 +941,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n                                 let i = usize::try_from(\n-                                    access.uninit_offset.bytes() / layout.size.bytes(),\n+                                    access.uninit.start.bytes() / layout.size.bytes(),\n                                 )\n                                 .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));"}, {"sha": "531d9f14040217c86c2580c1fe08ae187a561665", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -19,7 +19,7 @@\n //!    - Example: Examine each expression to look for its type and do some check or other.\n //!    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n //!      `nested_filter::OnlyBodies` (and implement `nested_visit_map`), and use\n-//!      `tcx.hir().deep_visit_all_item_likes(&mut visitor)`. Within your\n+//!      `tcx.hir().visit_all_item_likes_in_crate(&mut visitor)`. Within your\n //!      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n //!      `intravisit::walk_expr()` to keep walking the subparts).\n //!    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n@@ -190,7 +190,7 @@ use nested_filter::NestedFilter;\n /// (this is why the module is called `intravisit`, to distinguish it\n /// from the AST's `visit` module, which acts differently). If you\n /// simply want to visit all items in the crate in some order, you\n-/// should call `Crate::visit_all_items`. Otherwise, see the comment\n+/// should call `tcx.hir().visit_all_item_likes_in_crate`. Otherwise, see the comment\n /// on `visit_nested_item` for details on how to visit nested items.\n ///\n /// If you want to ensure that your code handles every variant"}, {"sha": "93528b4514b56ed250f5af5cbab4353a7dbda7a9", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -75,7 +75,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n             visitor.process_attrs(hir::CRATE_HIR_ID);\n-            tcx.hir().deep_visit_all_item_likes(&mut visitor);\n+            tcx.hir().visit_all_item_likes_in_crate(&mut visitor);\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n "}, {"sha": "caf5965c3a4927114d73f13735f68df6459f3ce6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.hir().deep_visit_all_item_likes(self);\n+        self.tcx.hir().visit_all_item_likes_in_crate(self);\n     }\n \n     fn encode_def_path_table(&mut self) {"}, {"sha": "cc831f7b03bf9e28561c09a6d539a6936b80d97e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -561,7 +561,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n+    /// Walks the contents of the local crate. See also `visit_all_item_likes_in_crate`.\n     pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {\n         let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);\n         visitor.visit_mod(top_mod, span, hir_id);\n@@ -581,53 +581,61 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Visits all items in the crate in some deterministic (but\n-    /// unspecified) order. If you need to process every item,\n-    /// and care about nesting -- usually because your algorithm\n-    /// follows lexical scoping rules -- then this method is the best choice.\n-    /// If you don't care about nesting, you should use the `tcx.hir_crate_items()` query\n-    /// or `items()` instead.\n+    /// Visits all item-likes in the crate in some deterministic (but unspecified) order. If you\n+    /// need to process every item-like, and don't care about visiting nested items in a particular\n+    /// order then this method is the best choice.  If you do care about this nesting, you should\n+    /// use the `tcx.hir().walk_toplevel_module`.\n+    ///\n+    /// Note that this function will access HIR for all the item-likes in the crate.  If you only\n+    /// need to access some of them, it is usually better to manually loop on the iterators\n+    /// provided by `tcx.hir_crate_items(())`.\n     ///\n     /// Please see the notes in `intravisit.rs` for more information.\n-    pub fn deep_visit_all_item_likes<V>(self, visitor: &mut V)\n+    pub fn visit_all_item_likes_in_crate<V>(self, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {\n-        let krate = self.krate();\n-        for owner in krate.owners.iter().filter_map(|i| i.as_owner()) {\n-            match owner.node() {\n-                OwnerNode::Item(item) => visitor.visit_item(item),\n-                OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n-                OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n-                OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n-                OwnerNode::Crate(_) => {}\n-            }\n+        let krate = self.tcx.hir_crate_items(());\n+\n+        for id in krate.items() {\n+            visitor.visit_item(self.item(id));\n+        }\n+\n+        for id in krate.trait_items() {\n+            visitor.visit_trait_item(self.trait_item(id));\n+        }\n+\n+        for id in krate.impl_items() {\n+            visitor.visit_impl_item(self.impl_item(id));\n+        }\n+\n+        for id in krate.foreign_items() {\n+            visitor.visit_foreign_item(self.foreign_item(id));\n         }\n     }\n \n-    /// If you don't care about nesting, you should use the\n-    /// `tcx.hir_module_items()` query or `module_items()` instead.\n-    /// Please see notes in `deep_visit_all_item_likes`.\n-    pub fn deep_visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n+    /// This method is the equivalent of `visit_all_item_likes_in_crate` but restricted to\n+    /// item-likes in a single module.\n+    pub fn visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {\n         let module = self.tcx.hir_module_items(module);\n \n-        for id in module.items.iter() {\n-            visitor.visit_item(self.item(*id));\n+        for id in module.items() {\n+            visitor.visit_item(self.item(id));\n         }\n \n-        for id in module.trait_items.iter() {\n-            visitor.visit_trait_item(self.trait_item(*id));\n+        for id in module.trait_items() {\n+            visitor.visit_trait_item(self.trait_item(id));\n         }\n \n-        for id in module.impl_items.iter() {\n-            visitor.visit_impl_item(self.impl_item(*id));\n+        for id in module.impl_items() {\n+            visitor.visit_impl_item(self.impl_item(id));\n         }\n \n-        for id in module.foreign_items.iter() {\n-            visitor.visit_foreign_item(self.foreign_item(*id));\n+        for id in module.foreign_items() {\n+            visitor.visit_foreign_item(self.foreign_item(id));\n         }\n     }\n "}, {"sha": "6896837aa910966677d84e094b80954da807ee87", "filename": "compiler/rustc_middle/src/hir/nested_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::intravisit::nested_filter::NestedFilter;\n /// constant arguments of types, e.g. in `let _: [(); /* HERE */];`.\n ///\n /// **This is the most common choice.** A very common pattern is\n-/// to use `deep_visit_all_item_likes()` as an outer loop,\n+/// to use `visit_all_item_likes_in_crate()` as an outer loop,\n /// and to have the visitor that visits the contents of each item\n /// using this setting.\n pub struct OnlyBodies(());"}, {"sha": "ae333846f067c73fce5f891d9831ed27fc5c28a8", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -179,6 +179,11 @@ pub fn alloc_range(start: Size, size: Size) -> AllocRange {\n }\n \n impl AllocRange {\n+    #[inline]\n+    pub fn from(r: Range<Size>) -> Self {\n+        alloc_range(r.start, r.end - r.start) // `Size` subtraction (overflow-checked)\n+    }\n+\n     #[inline(always)]\n     pub fn end(self) -> Size {\n         self.start + self.size // This does overflow checking.\n@@ -1095,17 +1100,17 @@ impl InitMask {\n     /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte\n     /// indexes for the first contiguous span of the uninitialized access.\n     #[inline]\n-    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {\n+    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), AllocRange> {\n         if end > self.len {\n-            return Err(self.len..end);\n+            return Err(AllocRange::from(self.len..end));\n         }\n \n         let uninit_start = self.find_bit(start, end, false);\n \n         match uninit_start {\n             Some(uninit_start) => {\n                 let uninit_end = self.find_bit(uninit_start, end, true).unwrap_or(end);\n-                Err(uninit_start..uninit_end)\n+                Err(AllocRange::from(uninit_start..uninit_end))\n             }\n             None => Ok(()),\n         }\n@@ -1176,19 +1181,17 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     ///\n     /// Returns `Ok(())` if it's initialized. Otherwise returns the range of byte\n     /// indexes of the first contiguous uninitialized access.\n-    fn is_init(&self, range: AllocRange) -> Result<(), Range<Size>> {\n+    fn is_init(&self, range: AllocRange) -> Result<(), AllocRange> {\n         self.init_mask.is_range_initialized(range.start, range.end()) // `Size` addition\n     }\n \n     /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, range: AllocRange) -> AllocResult {\n-        self.is_init(range).map_err(|idx_range| {\n+        self.is_init(range).map_err(|uninit_range| {\n             AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n-                access_offset: range.start,\n-                access_size: range.size,\n-                uninit_offset: idx_range.start,\n-                uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n+                access: range,\n+                uninit: uninit_range,\n             }))\n         })\n     }"}, {"sha": "795f23edb318641df48bdf93fcaafa027b27676e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 39, "deletions": 51, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, ConstAlloc, Pointer, Scalar};\n+use super::{AllocId, AllocRange, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::{layout, query::TyCtxtAt, tls, FnSig, Ty, ValTree};\n@@ -162,9 +162,9 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             AlreadyReported(ErrorGuaranteed { .. }) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n-            Layout(ref err) => write!(f, \"{}\", err),\n-            FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{}\", err),\n-            SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{}`\", ty),\n+            Layout(ref err) => write!(f, \"{err}\"),\n+            FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),\n+            SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{ty}`\"),\n         }\n     }\n }\n@@ -205,14 +205,10 @@ impl fmt::Display for CheckInAllocMsg {\n /// Details of an access to uninitialized bytes where it is not allowed.\n #[derive(Debug)]\n pub struct UninitBytesAccess {\n-    /// Location of the original memory access.\n-    pub access_offset: Size,\n-    /// Size of the original memory access.\n-    pub access_size: Size,\n-    /// Location of the first uninitialized byte that was accessed.\n-    pub uninit_offset: Size,\n-    /// Number of consecutive uninitialized bytes that were accessed.\n-    pub uninit_size: Size,\n+    /// Range of the original memory access.\n+    pub access: AllocRange,\n+    /// Range of the uninit memory that was encountered. (Might not be maximal.)\n+    pub uninit: AllocRange,\n }\n \n /// Information about a size mismatch.\n@@ -308,30 +304,28 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(msg) => write!(f, \"{}\", msg),\n+            Ub(msg) => write!(f, \"{msg}\"),\n             Unreachable => write!(f, \"entering unreachable code\"),\n             BoundsCheckFailed { ref len, ref index } => {\n-                write!(f, \"indexing out of bounds: the len is {} but the index is {}\", len, index)\n+                write!(f, \"indexing out of bounds: the len is {len} but the index is {index}\")\n             }\n             DivisionByZero => write!(f, \"dividing by zero\"),\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             DivisionOverflow => write!(f, \"overflow in signed division (dividing MIN by -1)\"),\n             RemainderOverflow => write!(f, \"overflow in signed remainder (dividing MIN by -1)\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n-            InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n+            InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {msg}\"),\n             InvalidVtableDropFn(sig) => write!(\n                 f,\n-                \"invalid drop function signature: got {}, expected exactly one argument which must be a pointer type\",\n-                sig\n+                \"invalid drop function signature: got {sig}, expected exactly one argument which must be a pointer type\",\n             ),\n             InvalidVtableSize => {\n                 write!(f, \"invalid vtable: size is bigger than largest supported object\")\n             }\n-            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {}\", msg),\n+            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {msg}\"),\n             UnterminatedCString(p) => write!(\n                 f,\n-                \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n-                p,\n+                \"reading a null-terminated string starting at {p:?} with no null found before end of allocation\",\n             ),\n             PointerUseAfterFree(a) => {\n                 write!(f, \"pointer to {a:?} was dereferenced after this allocation got freed\")\n@@ -359,41 +353,36 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,\n-                \"accessing memory with alignment {}, but alignment {} is required\",\n-                has.bytes(),\n-                required.bytes()\n+                \"accessing memory with alignment {has}, but alignment {required} is required\",\n+                has = has.bytes(),\n+                required = required.bytes()\n             ),\n             WriteToReadOnly(a) => write!(f, \"writing to {a:?} which is read-only\"),\n             DerefFunctionPointer(a) => write!(f, \"accessing {a:?} which contains a function\"),\n             ValidationFailure { path: None, msg } => {\n-                write!(f, \"constructing invalid value: {}\", msg)\n+                write!(f, \"constructing invalid value: {msg}\")\n             }\n             ValidationFailure { path: Some(path), msg } => {\n-                write!(f, \"constructing invalid value at {}: {}\", path, msg)\n+                write!(f, \"constructing invalid value at {path}: {msg}\")\n             }\n             InvalidBool(b) => {\n-                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:02x}\", b)\n+                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{b:02x}\")\n             }\n             InvalidChar(c) => {\n-                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:08x}\", c)\n+                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{c:08x}\")\n             }\n-            InvalidTag(val) => write!(f, \"enum value has invalid tag: {:x}\", val),\n+            InvalidTag(val) => write!(f, \"enum value has invalid tag: {val:x}\"),\n             InvalidFunctionPointer(p) => {\n-                write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n+                write!(f, \"using {p:?} as function pointer but it does not point to a function\")\n             }\n-            InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {}\", err),\n-            InvalidUninitBytes(Some((alloc, access))) => write!(\n+            InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {err}\"),\n+            InvalidUninitBytes(Some((alloc, info))) => write!(\n                 f,\n-                \"reading {} byte{} of memory starting at {:?}, \\\n-                 but {} byte{} {} uninitialized starting at {:?}, \\\n+                \"reading memory at {alloc:?}{access:?}, \\\n+                 but memory is uninitialized at {uninit:?}, \\\n                  and this operation requires initialized memory\",\n-                access.access_size.bytes(),\n-                pluralize!(access.access_size.bytes()),\n-                Pointer::new(*alloc, access.access_offset),\n-                access.uninit_size.bytes(),\n-                pluralize!(access.uninit_size.bytes()),\n-                pluralize!(\"is\", access.uninit_size.bytes()),\n-                Pointer::new(*alloc, access.uninit_offset),\n+                access = info.access,\n+                uninit = info.uninit,\n             ),\n             InvalidUninitBytes(None) => write!(\n                 f,\n@@ -402,8 +391,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n             ScalarSizeMismatch(self::ScalarSizeMismatch { target_size, data_size }) => write!(\n                 f,\n-                \"scalar size mismatch: expected {} bytes but got {} bytes instead\",\n-                target_size, data_size\n+                \"scalar size mismatch: expected {target_size} bytes but got {data_size} bytes instead\",\n             ),\n             UninhabitedEnumVariantWritten => {\n                 write!(f, \"writing discriminant of an uninhabited enum\")\n@@ -437,13 +425,13 @@ impl fmt::Display for UnsupportedOpInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UnsupportedOpInfo::*;\n         match self {\n-            Unsupported(ref msg) => write!(f, \"{}\", msg),\n+            Unsupported(ref msg) => write!(f, \"{msg}\"),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\"),\n             PartialPointerOverwrite(ptr) => {\n-                write!(f, \"unable to overwrite parts of a pointer in memory at {:?}\", ptr)\n+                write!(f, \"unable to overwrite parts of a pointer in memory at {ptr:?}\")\n             }\n-            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n-            ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n+            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({did:?})\"),\n+            ReadExternStatic(did) => write!(f, \"cannot read from extern static ({did:?})\"),\n         }\n     }\n }\n@@ -526,11 +514,11 @@ impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use InterpError::*;\n         match *self {\n-            Unsupported(ref msg) => write!(f, \"{}\", msg),\n-            InvalidProgram(ref msg) => write!(f, \"{}\", msg),\n-            UndefinedBehavior(ref msg) => write!(f, \"{}\", msg),\n-            ResourceExhaustion(ref msg) => write!(f, \"{}\", msg),\n-            MachineStop(ref msg) => write!(f, \"{}\", msg),\n+            Unsupported(ref msg) => write!(f, \"{msg}\"),\n+            InvalidProgram(ref msg) => write!(f, \"{msg}\"),\n+            UndefinedBehavior(ref msg) => write!(f, \"{msg}\"),\n+            ResourceExhaustion(ref msg) => write!(f, \"{msg}\"),\n+            MachineStop(ref msg) => write!(f, \"{msg}\"),\n         }\n     }\n }"}, {"sha": "f6b5af90a85c8e6e97300a7b5d35633397711b75", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -153,7 +153,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n         _: &mir::Statement<'tcx>,\n         loc: Location,\n     ) {\n-        // If we move from a place then only stops needing storage *after*\n+        // If we move from a place then it only stops needing storage *after*\n         // that statement.\n         self.check_for_move(trans, loc);\n     }"}, {"sha": "0887775aae5ede857061e273182d92cfa010fad8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -173,7 +173,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().deep_visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set });\n+    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { tcx, set: &mut set });\n \n     set\n }"}, {"sha": "d0723c68a77e8158269a0f0831359d9d7fea4804", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -2428,7 +2428,7 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, check_attr_visitor);\n+    tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());"}, {"sha": "31c159c1f75621d3ab9bc8d2fad4f7f0f0a92bc3", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -56,7 +56,7 @@ impl NonConstExpr {\n \n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut vis);\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis);\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "9deb0042ff3608c52053238212985fdda7d048dc", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -28,7 +28,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n                 errors: &errors,\n             };\n \n-            tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n+            tcx.hir().visit_item_likes_in_module(module_id, &mut v);\n         });\n \n         let errors = errors.into_inner();"}, {"sha": "0070c0699a4aa765365107733a509b17f1e8638e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -140,7 +140,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "68b2a052391fa60e8cb0be0dfdaeb1bf04f186ed", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -31,7 +31,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n }\n \n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(\n+    tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal },\n     );"}, {"sha": "20765abf392803f414e18093e03edfec990b1790", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -14,7 +14,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "12050dceb60a60a84e8f950ed878a87422caba58", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -660,7 +660,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n@@ -890,7 +890,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n-        tcx.hir().deep_visit_all_item_likes(&mut missing);\n+        tcx.hir().visit_all_item_likes_in_crate(&mut missing);\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;"}, {"sha": "ec9ae63ca366abac87c4bb6eaff3c180bb2b5b81", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -1499,10 +1499,16 @@ impl<'a> Resolver<'a> {\n             && let ModuleKind::Def(DefKind::Enum, def_id, _) = parent_scope.module.kind\n             && let Some(span) = self.opt_span(def_id)\n         {\n-            err.span_help(\n-                self.session.source_map().guess_head_span(span),\n-                \"consider adding `#[derive(Default)]` to this enum\",\n-            );\n+            let source_map = self.session.source_map();\n+            let head_span = source_map.guess_head_span(span);\n+            if let Ok(head) = source_map.span_to_snippet(head_span) {\n+                err.span_suggestion(head_span, \"consider adding a derive\", format!(\"#[derive(Default)]\\n{head}\"), Applicability::MaybeIncorrect);\n+            } else {\n+                err.span_help(\n+                    head_span,\n+                    \"consider adding `#[derive(Default)]` to this enum\",\n+                );\n+            }\n         }\n         for ns in [Namespace::MacroNS, Namespace::TypeNS, Namespace::ValueNS] {\n             if let Ok(binding) = self.early_resolve_ident_in_lexical_scope("}, {"sha": "44b9c8392f86bfb64cf7aefe0d2ee2a6e6898c20", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -59,7 +59,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "073168cf2d2091620206638420286a77c37ab324", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -234,3 +234,26 @@ impl ChildExt for process::Child {\n         self.handle.main_thread_handle()\n     }\n }\n+\n+/// Windows-specific extensions to [`process::ExitCode`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n+#[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+pub trait ExitCodeExt: Sealed {\n+    /// Creates a new `ExitCode` from the raw underlying `u32` return value of\n+    /// a process.\n+    ///\n+    /// The exit code should not be 259, as this conflicts with the `STILL_ACTIVE`\n+    /// macro returned from the `GetExitCodeProcess` function to signal that the\n+    /// process has yet to run to completion.\n+    #[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+    fn from_raw(raw: u32) -> Self;\n+}\n+\n+#[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+impl ExitCodeExt for process::ExitCode {\n+    fn from_raw(raw: u32) -> Self {\n+        process::ExitCode::from_inner(From::from(raw))\n+    }\n+}"}, {"sha": "d6cba7e7598f682be946c0446fcbc42f67ce2186", "filename": "library/std/src/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -1724,6 +1724,10 @@ impl crate::error::Error for ExitStatusError {}\n #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for ExitCode {}\n+\n #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n impl ExitCode {\n     /// The canonical `ExitCode` for successful termination on this platform.\n@@ -1814,6 +1818,18 @@ impl From<u8> for ExitCode {\n     }\n }\n \n+impl AsInner<imp::ExitCode> for ExitCode {\n+    fn as_inner(&self) -> &imp::ExitCode {\n+        &self.0\n+    }\n+}\n+\n+impl FromInner<imp::ExitCode> for ExitCode {\n+    fn from_inner(s: imp::ExitCode) -> ExitCode {\n+        ExitCode(s)\n+    }\n+}\n+\n impl Child {\n     /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n     /// error is returned."}, {"sha": "02d5af4719ae8fda9b72311724ce67bf3cf0342a", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -707,6 +707,12 @@ impl From<u8> for ExitCode {\n     }\n }\n \n+impl From<u32> for ExitCode {\n+    fn from(code: u32) -> Self {\n+        ExitCode(c::DWORD::from(code))\n+    }\n+}\n+\n fn zeroed_startupinfo() -> c::STARTUPINFO {\n     c::STARTUPINFO {\n         cb: 0,"}, {"sha": "2e89abe202cf6690cd0ee5059dd5ad42f4b896b0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -346,11 +346,7 @@ impl StepDescription {\n             eprintln!(\n                 \"note: if you are adding a new Step to bootstrap itself, make sure you register it with `describe!`\"\n             );\n-            #[cfg(not(test))]\n-            std::process::exit(1);\n-            #[cfg(test)]\n-            // so we can use #[should_panic]\n-            panic!()\n+            crate::detail_exit(1);\n         }\n     }\n }\n@@ -1008,7 +1004,7 @@ impl<'a> Builder<'a> {\n             if !help_on_error.is_empty() {\n                 eprintln!(\"{}\", help_on_error);\n             }\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n \n@@ -1437,7 +1433,7 @@ impl<'a> Builder<'a> {\n                         \"error: `x.py clippy` requires a host `rustc` toolchain with the `clippy` component\"\n                     );\n                     eprintln!(\"help: try `rustup component add clippy`\");\n-                    std::process::exit(1);\n+                    crate::detail_exit(1);\n                 });\n                 if !t!(std::str::from_utf8(&output.stdout)).contains(\"nightly\") {\n                     rustflags.arg(\"--cfg=bootstrap\");"}, {"sha": "ed5023ac61b0fdbf57923680cc21fa061ddbdd1e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -13,7 +13,7 @@ use std::fs;\n use std::io::prelude::*;\n use std::io::BufReader;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command, Stdio};\n+use std::process::{Command, Stdio};\n use std::str;\n \n use serde::Deserialize;\n@@ -1377,7 +1377,7 @@ pub fn run_cargo(\n     });\n \n     if !ok {\n-        exit(1);\n+        crate::detail_exit(1);\n     }\n \n     // Ok now we need to actually find all the files listed in `toplevel`. We've"}, {"sha": "e71fbff14dd121ed0b7cefe154a93b28abf19cc1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -11,7 +11,7 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::process::Command;\n use std::str::FromStr;\n \n use crate::builder::{Builder, TaskPath};\n@@ -805,8 +805,6 @@ impl Config {\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n         let get_toml = |file: &Path| {\n-            use std::process;\n-\n             let contents =\n                 t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n             // Deserialize to Value and then TomlConfig to prevent the Deserialize impl of\n@@ -817,7 +815,7 @@ impl Config {\n                 Ok(table) => table,\n                 Err(err) => {\n                     eprintln!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n-                    process::exit(2);\n+                    crate::detail_exit(2);\n                 }\n             }\n         };\n@@ -1487,7 +1485,7 @@ fn download_ci_rustc_commit(\n         println!(\"help: maybe your repository history is too shallow?\");\n         println!(\"help: consider disabling `download-rustc`\");\n         println!(\"help: or fetch enough history to include one upstream commit\");\n-        exit(1);\n+        crate::detail_exit(1);\n     }\n \n     // Warn if there were changes to the compiler or standard library since the ancestor commit."}, {"sha": "eec19ab4fc90f3e8eaeef10e371a725921ec61e6", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -4,7 +4,6 @@\n //! has various flags to configure how it's run.\n \n use std::path::PathBuf;\n-use std::process;\n \n use getopts::Options;\n \n@@ -261,7 +260,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 // subcommand.\n                 println!(\"{}\\n\", subcommand_help);\n                 let exit_code = if args.is_empty() { 0 } else { 1 };\n-                process::exit(exit_code);\n+                crate::detail_exit(exit_code);\n             }\n         };\n \n@@ -347,7 +346,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             } else if verbose {\n                 panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n             }\n-            process::exit(exit_code);\n+            crate::detail_exit(exit_code);\n         };\n \n         // Done specifying what options are possible, so do the getopts parsing\n@@ -379,7 +378,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 \"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n                  You may need to move some options to after the subcommand.\\n\"\n             );\n-            process::exit(1);\n+            crate::detail_exit(1);\n         }\n         // Extra help text for some commands\n         match subcommand {\n@@ -600,7 +599,7 @@ Arguments:\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n                         eprint!(\"{}\", Profile::all_for_help(\"- \"));\n-                        std::process::exit(1);\n+                        crate::detail_exit(1);\n                     })\n                 } else {\n                     t!(crate::setup::interactive_path())\n@@ -614,7 +613,7 @@ Arguments:\n                 || matches.opt_str(\"keep-stage-std\").is_some()\n             {\n                 eprintln!(\"--keep-stage not yet supported for x.py check\");\n-                process::exit(1);\n+                crate::detail_exit(1);\n             }\n         }\n \n@@ -805,7 +804,7 @@ fn parse_deny_warnings(matches: &getopts::Matches) -> Option<bool> {\n         Some(\"warn\") => Some(false),\n         Some(value) => {\n             eprintln!(r#\"invalid value for --warnings: {:?}, expected \"warn\" or \"deny\"\"#, value,);\n-            process::exit(1);\n+            crate::detail_exit(1);\n         }\n         None => None,\n     }"}, {"sha": "f25977c1d4636bfe4d073b858cce5849bd7c39eb", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -32,7 +32,7 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n                         code, run `./x.py fmt` instead.\",\n                 cmd_debug,\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n }\n@@ -114,7 +114,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n \n     let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {\n         eprintln!(\"./x.py fmt is not supported on this channel\");\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     });\n     assert!(rustfmt_path.exists(), \"{}\", rustfmt_path.display());\n     let src = build.src.clone();"}, {"sha": "82025efcbe0e5f599ff959b8643cd889cc15b19e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -109,7 +109,7 @@ use std::env;\n use std::fs::{self, File};\n use std::io;\n use std::path::{Path, PathBuf};\n-use std::process::{self, Command};\n+use std::process::Command;\n use std::str;\n \n use filetime::FileTime;\n@@ -711,7 +711,7 @@ impl Build {\n             for failure in failures.iter() {\n                 eprintln!(\"  - {}\\n\", failure);\n             }\n-            process::exit(1);\n+            detail_exit(1);\n         }\n \n         #[cfg(feature = \"build-metrics\")]\n@@ -1617,7 +1617,7 @@ Alternatively, set `download-ci-llvm = true` in that `[llvm]` section\n to download LLVM rather than building it.\n \"\n                 );\n-                std::process::exit(1);\n+                detail_exit(1);\n             }\n         }\n \n@@ -1646,6 +1646,20 @@ fn chmod(path: &Path, perms: u32) {\n #[cfg(windows)]\n fn chmod(_path: &Path, _perms: u32) {}\n \n+/// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n+/// If the test is running and code is an error code, it will cause a panic.\n+fn detail_exit(code: i32) -> ! {\n+    // Successful exit\n+    if code == 0 {\n+        std::process::exit(0);\n+    }\n+    if cfg!(test) {\n+        panic!(\"status code: {}\", code);\n+    } else {\n+        std::panic::resume_unwind(Box::new(code));\n+    }\n+}\n+\n impl Compiler {\n     pub fn with_stage(mut self, stage: u32) -> Compiler {\n         self.stage = stage;"}, {"sha": "cae41286f0871168f482844e570fc78e25455e6d", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -104,7 +104,7 @@ You should install cmake, or set `download-ci-llvm = true` in the\n than building it.\n \"\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n "}, {"sha": "740c12ed725e1ee8e61d54b766e04da9a7c97fd1", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -94,7 +94,7 @@ pub fn setup(config: &Config, profile: Profile) {\n             \"note: this will use the configuration in {}\",\n             profile.include_path(&config.src).display()\n         );\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n \n     let settings = format!(\n@@ -287,7 +287,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n         io::stdin().read_line(&mut input)?;\n         if input.is_empty() {\n             eprintln!(\"EOF on stdin, when expecting answer to question.  Giving up.\");\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n         break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,"}, {"sha": "4c6b5ba0afc085c16761a2f56691eaa047a24ed8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -673,7 +673,7 @@ impl Step for Clippy {\n         }\n \n         if !builder.config.cmd.bless() {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         let mut cargo = builder.cargo(compiler, Mode::ToolRustc, SourceType::InTree, host, \"run\");\n@@ -1021,7 +1021,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                     PATH = inferred_rustfmt_dir.display(),\n                     CHAN = builder.config.channel,\n                 );\n-                std::process::exit(1);\n+                crate::detail_exit(1);\n             }\n             crate::format::format(&builder, !builder.config.cmd.bless(), &[]);\n         }\n@@ -1251,7 +1251,7 @@ help: to test the compiler, use `--stage 1` instead\n help: to test the standard library, use `--stage 0 library/std` instead\n note: if you're sure you want to do this, please open an issue as to why. In the meantime, you can override this with `COMPILETEST_FORCE_STAGE0=1`.\"\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         let compiler = self.compiler;"}, {"sha": "23832b6c43e4216db4f5605080fedbf5515fae8f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -2,7 +2,7 @@ use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::process::Command;\n \n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n use crate::channel::GitInfo;\n@@ -204,7 +204,7 @@ impl Step for ToolBuild {\n \n         if !is_expected {\n             if !is_optional_tool {\n-                exit(1);\n+                crate::detail_exit(1);\n             } else {\n                 None\n             }"}, {"sha": "2cfeae7dc785852cf344d7772a6ffdc8be650e59", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -93,7 +93,7 @@ fn print_error(tool: &str, submodule: &str) {\n     eprintln!(\"If you do NOT intend to update '{}', please ensure you did not accidentally\", tool);\n     eprintln!(\"change the submodule at '{}'. You may ask your reviewer for the\", submodule);\n     eprintln!(\"proper steps.\");\n-    std::process::exit(3);\n+    crate::detail_exit(3);\n }\n \n fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n@@ -108,7 +108,7 @@ fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n         Ok(o) => o,\n         Err(e) => {\n             eprintln!(\"Failed to get changed files: {:?}\", e);\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     };\n \n@@ -179,7 +179,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         check_changed_files(&toolstates);\n@@ -225,7 +225,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {"}, {"sha": "b627e50378994b1dbe64d6fedc4cfe3b076406d1", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -336,7 +336,7 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n \n pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n     if !try_run(cmd, print_cmd_on_fail) {\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n }\n \n@@ -375,7 +375,7 @@ pub fn check_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n \n pub fn run_suppressed(cmd: &mut Command) {\n     if !try_run_suppressed(cmd) {\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n }\n \n@@ -465,7 +465,7 @@ fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n \n fn fail(s: &str) -> ! {\n     eprintln!(\"\\n\\n{}\\n\\n\", s);\n-    std::process::exit(1);\n+    crate::detail_exit(1);\n }\n \n /// Copied from `std::path::absolute` until it stabilizes."}, {"sha": "84ab8d988bdb43303d595c587dac0bc86e8e1c24", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -268,14 +268,20 @@ impl clean::Generics {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub(crate) enum Ending {\n+    Newline,\n+    NoNewline,\n+}\n+\n /// * The Generics from which to emit a where-clause.\n /// * The number of spaces to indent each line with.\n /// * Whether the where-clause needs to add a comma and newline after the last bound.\n pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n     gens: &'a clean::Generics,\n     cx: &'a Context<'tcx>,\n     indent: usize,\n-    end_newline: bool,\n+    ending: Ending,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     use fmt::Write;\n \n@@ -342,7 +348,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n \n         let where_preds = comma_sep(where_predicates, false);\n         let clause = if f.alternate() {\n-            if end_newline {\n+            if ending == Ending::Newline {\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 format!(\" where{where_preds}, \")\n             } else {\n@@ -356,7 +362,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             }\n             let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n \n-            if end_newline {\n+            if ending == Ending::Newline {\n                 let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 write!(\n@@ -1167,7 +1173,7 @@ impl clean::Impl {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;\n             }\n \n-            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, true), f)?;\n+            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, Ending::Newline), f)?;\n             Ok(())\n         })\n     }"}, {"sha": "459b0fed6e872ddb34bace7d1fa30b2646dbaeb5", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -70,7 +70,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     href, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n-    print_default_space, print_generic_bounds, print_where_clause, Buffer, HrefError,\n+    print_default_space, print_generic_bounds, print_where_clause, Buffer, Ending, HrefError,\n     PrintWithSpace,\n };\n use crate::html::highlight;\n@@ -747,7 +747,7 @@ fn assoc_type(\n     if !bounds.is_empty() {\n         write!(w, \": {}\", print_generic_bounds(bounds, cx))\n     }\n-    write!(w, \"{}\", print_where_clause(generics, cx, indent, false));\n+    write!(w, \"{}\", print_where_clause(generics, cx, indent, Ending::NoNewline));\n     if let Some(default) = default {\n         write!(w, \" = {}\", default.print(cx))\n     }\n@@ -796,10 +796,10 @@ fn assoc_method(\n         header_len += 4;\n         let indent_str = \"    \";\n         render_attributes_in_pre(w, meth, indent_str);\n-        (4, indent_str, false)\n+        (4, indent_str, Ending::NoNewline)\n     } else {\n         render_attributes_in_code(w, meth);\n-        (0, \"\", true)\n+        (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n     write!("}, {"sha": "daacc57a55a3ad5d925d9a1ba43ab7d7830a76b5", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -29,7 +29,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    Buffer, Ending, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n@@ -69,7 +69,7 @@ fn print_where_clause_and_check<'a, 'tcx: 'a>(\n     cx: &'a Context<'tcx>,\n ) -> bool {\n     let len_before = buffer.len();\n-    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, true));\n+    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, Ending::Newline));\n     len_before != buffer.len()\n }\n \n@@ -519,7 +519,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n                 abi = abi,\n                 name = name,\n                 generics = f.generics.print(cx),\n-                where_clause = print_where_clause(&f.generics, cx, 0, true),\n+                where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n                 decl = f.decl.full_print(header_len, 0, header.asyncness, cx),\n                 notable_traits = notable_traits_decl(&f.decl, cx),\n             );\n@@ -556,7 +556,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             );\n \n             if !t.generics.where_predicates.is_empty() {\n-                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, true));\n+                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n             } else {\n                 w.write_str(\" \");\n             }\n@@ -1025,7 +1025,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n                 \"trait {}{}{} = {};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                print_where_clause(&t.generics, cx, 0, true),\n+                print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds(&t.bounds, true, cx)\n             );\n         });\n@@ -1049,7 +1049,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n                 \"type {}{}{where_clause} = impl {bounds};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds = bounds(&t.bounds, false, cx),\n             );\n         });\n@@ -1074,7 +1074,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 \"type {}{}{where_clause} = {type_};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n             );\n         });\n@@ -1784,7 +1784,7 @@ fn render_struct(\n             }\n             w.write_str(\")\");\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n             if structhead {\n@@ -1794,7 +1794,7 @@ fn render_struct(\n         CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             w.write_str(\";\");\n         }"}, {"sha": "c0fe8b49cfd1ba1357f9b989b98aafb9259b18fb", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -303,7 +303,7 @@ pub(crate) fn run(\n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n         let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n-        tcx.hir().deep_visit_all_item_likes(&mut finder);\n+        tcx.hir().visit_all_item_likes_in_crate(&mut finder);\n \n         // Sort call locations within a given file in document order\n         for fn_calls in calls.values_mut() {"}, {"sha": "f7557cb492c065ad86bfbe3c15ee956314b32f9f", "filename": "src/test/ui/const-generics/issue-70408.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70408.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -0,0 +1,13 @@\n+// build-pass\n+\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+pub fn function_with_bytes<const BYTES: &'static [u8; 4]>() -> &'static [u8] {\n+    BYTES\n+}\n+\n+pub fn main() {\n+    assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n+    assert_eq!(function_with_bytes::<{ &[0x41, 0x41, 0x41, 0x41] }>(), b\"AAAA\");\n+}"}, {"sha": "d0af8a5eaa89fc4b40216c6d5e43511463a2ed94", "filename": "src/test/ui/const-generics/issue-80471.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -0,0 +1,13 @@\n+#![feature(adt_const_params)]\n+//~^ WARN the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+\n+#[derive(PartialEq, Eq)]\n+enum Nat {\n+    Z,\n+    S(Box<Nat>),\n+}\n+\n+fn foo<const N: Nat>() {}\n+//~^ ERROR `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+\n+fn main() {}"}, {"sha": "dbcc0b7b6007c2e6c110459d43d789f9496f7b50", "filename": "src/test/ui/const-generics/issue-80471.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-80471.rs:1:12\n+   |\n+LL | #![feature(adt_const_params)]\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+\n+error[E0741]: `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-80471.rs:10:17\n+   |\n+LL | fn foo<const N: Nat>() {}\n+   |                 ^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "cfe1e62d9318fd59b605b917215d27f02dfe6087", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -16,12 +16,6 @@ error: no path from `WillChange` to `trait_def`\n LL |     #[rustc_then_this_would_need(trait_def)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:32:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:36:5\n    |\n@@ -52,36 +46,12 @@ error: OK\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:48:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:49:9\n-   |\n-LL |         #[rustc_then_this_would_need(typeck)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:53:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:55:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:56:9\n-   |\n-LL |         #[rustc_then_this_would_need(typeck)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:61:9\n    |\n@@ -106,12 +76,6 @@ error: no path from `WillChange` to `type_of`\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `fn_sig`\n-  --> $DIR/dep-graph-struct-signature.rs:77:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: no path from `WillChange` to `fn_sig`\n   --> $DIR/dep-graph-struct-signature.rs:81:5\n    |\n@@ -130,5 +94,41 @@ error: no path from `WillChange` to `typeck`\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:32:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: no path from `WillChange` to `fn_sig`\n+  --> $DIR/dep-graph-struct-signature.rs:77:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:48:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:49:9\n+   |\n+LL |         #[rustc_then_this_would_need(typeck)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:55:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:56:9\n+   |\n+LL |         #[rustc_then_this_would_need(typeck)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 22 previous errors\n "}, {"sha": "42ac803b22ece2b36eb37d65231a6320430da7f1", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -28,30 +28,12 @@ error: no path from `TypeAlias` to `type_of`\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:36:5\n-   |\n-LL |     #[rustc_then_this_would_need(fn_sig)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:42:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:44:5\n-   |\n-LL |     #[rustc_then_this_would_need(fn_sig)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:45:5\n-   |\n-LL |     #[rustc_then_this_would_need(typeck)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-type-alias.rs:49:1\n    |\n@@ -70,5 +52,23 @@ error: OK\n LL | #[rustc_then_this_would_need(typeck)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:36:5\n+   |\n+LL |     #[rustc_then_this_would_need(fn_sig)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:44:5\n+   |\n+LL |     #[rustc_then_this_would_need(fn_sig)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:45:5\n+   |\n+LL |     #[rustc_then_this_would_need(typeck)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 12 previous errors\n "}, {"sha": "1d7567e60a57c0a2629875de6c5d8f8e87fad820", "filename": "src/test/ui/enum/suggest-default-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.rs?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -1,4 +1,4 @@\n-pub enum Test { //~ HELP consider adding `#[derive(Default)]` to this enum\n+pub enum Test { //~ HELP consider adding a derive\n     #[default]\n     //~^ ERROR cannot find attribute `default` in this scope\n     First,"}, {"sha": "fb830d3f78b64db1dd11330eab5b4dd38c1d1736", "filename": "src/test/ui/enum/suggest-default-attribute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fsuggest-default-attribute.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -4,11 +4,11 @@ error: cannot find attribute `default` in this scope\n LL |     #[default]\n    |       ^^^^^^^\n    |\n-help: consider adding `#[derive(Default)]` to this enum\n-  --> $DIR/suggest-default-attribute.rs:1:1\n+help: consider adding a derive\n+   |\n+LL + #[derive(Default)]\n+LL ~ pub enum Test {\n    |\n-LL | pub enum Test {\n-   | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9322654b2928b3e14c81696cb126e6e84a2a2ac3", "filename": "src/test/ui/intrinsics/intrinsic-raw_eq-const-padding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/intrinsic-raw_eq-const-padding.rs:6:5\n    |\n LL |     std::intrinsics::raw_eq(&(1_u8, 2_u16), &(1_u8, 2_u16))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading 4 bytes of memory starting at alloc3, but 1 byte is uninitialized starting at alloc3+0x1, and this operation requires initialized memory\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading memory at alloc3[0x0..0x4], but memory is uninitialized at [0x1..0x2], and this operation requires initialized memory\n \n error: aborting due to previous error\n "}, {"sha": "10978728fa365bf766d55f63e94c6a077c38521c", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1517f5de01c445b5124b30f02257b02b4c5ef3b2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=1517f5de01c445b5124b30f02257b02b4c5ef3b2", "patch": "@@ -4,12 +4,6 @@ error: function has missing const stability attribute\n LL | pub const fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: associated function has missing const stability attribute\n-  --> $DIR/missing-const-stability.rs:15:5\n-   |\n-LL |     pub const fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n error: implementation has missing const stability attribute\n   --> $DIR/missing-const-stability.rs:27:1\n    |\n@@ -19,5 +13,11 @@ LL | |     fn fun() {}\n LL | | }\n    | |_^\n \n+error: associated function has missing const stability attribute\n+  --> $DIR/missing-const-stability.rs:15:5\n+   |\n+LL |     pub const fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 3 previous errors\n "}]}