{"sha": "d7bb01eb52d6b3b40084450d99eb928d74d25d6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YmIwMWViNTJkNmIzYjQwMDg0NDUwZDk5ZWI5MjhkNzRkMjVkNmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-16T12:10:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-17T19:25:11Z"}, "message": "Use the quick reject mechanism during trait matching as well. Seems to\nyield an incremental improvement (type-checking rustc drops from ~9s\nto ~8s).", "tree": {"sha": "d6191611ad5b572f9a4185b1d09a00e901135419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6191611ad5b572f9a4185b1d09a00e901135419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7bb01eb52d6b3b40084450d99eb928d74d25d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bb01eb52d6b3b40084450d99eb928d74d25d6e", "html_url": "https://github.com/rust-lang/rust/commit/d7bb01eb52d6b3b40084450d99eb928d74d25d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7bb01eb52d6b3b40084450d99eb928d74d25d6e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93921b348f37d10850c5f9b077300158a623e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93921b348f37d10850c5f9b077300158a623e35", "html_url": "https://github.com/rust-lang/rust/commit/d93921b348f37d10850c5f9b077300158a623e35"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "3dbb7307dd63f8bcd49ae461f50cebb7702b03b5", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d7bb01eb52d6b3b40084450d99eb928d74d25d6e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bb01eb52d6b3b40084450d99eb928d74d25d6e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d7bb01eb52d6b3b40084450d99eb928d74d25d6e", "patch": "@@ -27,6 +27,7 @@ use super::{VtableBuiltin, VtableImpl, VtableParam, VtableUnboxedClosure};\n use super::{VtableImplData, VtableParamData, VtableBuiltinData};\n use super::{util};\n \n+use middle::fast_reject;\n use middle::mem_categorization::Typer;\n use middle::subst::{Subst, Substs, VecPerParamSpace};\n use middle::ty;\n@@ -1767,12 +1768,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                   obligation: &Obligation)\n                   -> Result<Substs, ()>\n     {\n+        let impl_trait_ref = ty::impl_trait_ref(self.tcx(),\n+                                                impl_def_id).unwrap();\n+\n+        // Before we create the substitutions and everything, first\n+        // consider a \"quick reject\". This avoids creating more types\n+        // and so forth that we need to.\n+        if self.fast_reject_trait_refs(obligation, &*impl_trait_ref) {\n+            return Err(());\n+        }\n+\n         let impl_substs = util::fresh_substs_for_impl(self.infcx,\n                                                       obligation.cause.span,\n                                                       impl_def_id);\n \n-        let impl_trait_ref = ty::impl_trait_ref(self.tcx(),\n-                                                impl_def_id).unwrap();\n         let impl_trait_ref = impl_trait_ref.subst(self.tcx(),\n                                                   &impl_substs);\n \n@@ -1782,6 +1791,29 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    fn fast_reject_trait_refs(&mut self,\n+                              obligation: &Obligation,\n+                              impl_trait_ref: &ty::TraitRef)\n+                              -> bool\n+    {\n+        // We can avoid creating type variables and doing the full\n+        // substitution if we find that any of the input types, when\n+        // simplified, do not match.\n+\n+        obligation.trait_ref.input_types().iter()\n+            .zip(impl_trait_ref.input_types().iter())\n+            .any(|(&obligation_ty, &impl_ty)| {\n+                let simplified_obligation_ty =\n+                    fast_reject::simplify_type(self.tcx(), obligation_ty, true);\n+                let simplified_impl_ty =\n+                    fast_reject::simplify_type(self.tcx(), impl_ty, false);\n+\n+                simplified_obligation_ty.is_some() &&\n+                    simplified_impl_ty.is_some() &&\n+                    simplified_obligation_ty != simplified_impl_ty\n+            })\n+    }\n+\n     fn match_trait_refs(&mut self,\n                         obligation: &Obligation,\n                         trait_ref: Rc<ty::TraitRef>)"}]}