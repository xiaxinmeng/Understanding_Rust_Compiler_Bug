{"sha": "69e705564d54ffed9ab36ec9f0d3183daab72039", "node_id": "C_kwDOAAsO6NoAKDY5ZTcwNTU2NGQ1NGZmZWQ5YWIzNmVjOWYwZDMxODNkYWFiNzIwMzk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-02T00:00:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-02T00:00:38Z"}, "message": "Rollup merge of #103575 - Xiretza:suggestions-style-attr, r=davidtwco\n\nChange #[suggestion_*] attributes to use style=\"...\"\n\nAs discussed [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20tool_only_span_suggestion), this changes `#[(multipart_)suggestion_{short,verbose,hidden}(...)]` attributes to plain `#[(multipart_)suggestion(...)]` attributes with a `style = \"{short,verbose,hidden}\"` parameter.\n\nIt also adds a new style, `tool-only`, that corresponds to `tool_only_span_suggestion`/`tool_only_multipart_suggestion` and causes the suggestion to not be shown in human-readable output at all.\n\nBest reviewed commit-by-commit, there's a bit of noise in there.\n\ncc #100717 `@compiler-errors`\nr? `@davidtwco`", "tree": {"sha": "ab91d8d2811ae16b03137600aefa480397e80026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab91d8d2811ae16b03137600aefa480397e80026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e705564d54ffed9ab36ec9f0d3183daab72039", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYbMmCRBK7hj4Ov3rIwAAb/8IAKM0JJtwYEmp5yF1KAKpwSiX\ncCSyxXspkFItYJ2sa1WFxgeXytQzDzEbM/P44BVQRF+A9ev2z6DifSovinzi70Nu\n0IFV/iGYsYhWU7PnGQr8aiV7T26FNRELL8GwTz8VRUw3TtP+MpnZdpDV+iW9IL6c\ntCkCpISm0P74FSCpmbCqFKW9lxAt0AJ7mG33zXAcEm23XffqfagNLZiOnGoNWT8x\nZaNrUGmj9uVCp7aOMEcZlUNvaeD/mZxiLi/y58kWOTI3E6C7NCMhpHzbzYgSDHYA\nl5zyYejpl+JNw719geSDJyeQkTk+fmV9G31BCBkmzLMzp7rMMhdADNEqT75ayfw=\n=m74i\n-----END PGP SIGNATURE-----\n", "payload": "tree ab91d8d2811ae16b03137600aefa480397e80026\nparent d4bd794f5e8c63dd22c3e7876eef026af4b93e1e\nparent 2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1667347238 -0400\ncommitter GitHub <noreply@github.com> 1667347238 -0400\n\nRollup merge of #103575 - Xiretza:suggestions-style-attr, r=davidtwco\n\nChange #[suggestion_*] attributes to use style=\"...\"\n\nAs discussed [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20tool_only_span_suggestion), this changes `#[(multipart_)suggestion_{short,verbose,hidden}(...)]` attributes to plain `#[(multipart_)suggestion(...)]` attributes with a `style = \"{short,verbose,hidden}\"` parameter.\n\nIt also adds a new style, `tool-only`, that corresponds to `tool_only_span_suggestion`/`tool_only_multipart_suggestion` and causes the suggestion to not be shown in human-readable output at all.\n\nBest reviewed commit-by-commit, there's a bit of noise in there.\n\ncc #100717 `@compiler-errors`\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e705564d54ffed9ab36ec9f0d3183daab72039", "html_url": "https://github.com/rust-lang/rust/commit/69e705564d54ffed9ab36ec9f0d3183daab72039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e705564d54ffed9ab36ec9f0d3183daab72039/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bd794f5e8c63dd22c3e7876eef026af4b93e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bd794f5e8c63dd22c3e7876eef026af4b93e1e", "html_url": "https://github.com/rust-lang/rust/commit/d4bd794f5e8c63dd22c3e7876eef026af4b93e1e"}, {"sha": "2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "html_url": "https://github.com/rust-lang/rust/commit/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e"}], "stats": {"total": 540, "additions": 405, "deletions": 135}, "files": [{"sha": "21c6a2d26f4c2e54f95ba1e0b99c6c8ac0dac71e", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -277,8 +277,9 @@ pub struct RegisterConflict<'a> {\n pub struct SubTupleBinding<'a> {\n     #[primary_span]\n     #[label]\n-    #[suggestion_verbose(\n+    #[suggestion(\n         ast_lowering_sub_tuple_binding_suggestion,\n+        style = \"verbose\",\n         code = \"..\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "fe24f85fae10a53545d1f0183f0326bb1381b632", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -49,7 +49,7 @@ pub(crate) struct GenericDoesNotLiveLongEnough {\n #[derive(LintDiagnostic)]\n #[diag(borrowck_var_does_not_need_mut)]\n pub(crate) struct VarNeedNotMut {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub span: Span,\n }\n #[derive(Diagnostic)]"}, {"sha": "afbb27155a2f59f7deb2c49acf44acc590e7c376", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -120,7 +120,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"{ty}\")]\n+    #[suggestion(style = \"verbose\", code = \"{ty}\")]\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n@@ -239,7 +239,11 @@ pub struct UnusedExternCrate {\n #[derive(LintDiagnostic)]\n #[diag(hir_analysis_extern_crate_not_idiomatic)]\n pub struct ExternCrateNotIdiomatic {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n+    #[suggestion(\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{suggestion_code}\"\n+    )]\n     pub span: Span,\n     pub msg_code: String,\n     pub suggestion_code: String,"}, {"sha": "cfb408396da05e4d0e55b42ce4b7a3981559e82d", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -113,8 +113,9 @@ pub struct MissingParentheseInRange {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion_verbose(\n+#[multipart_suggestion(\n     hir_analysis_add_missing_parentheses_in_range,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\"\n )]\n pub struct AddMissingParenthesesInRange {"}, {"sha": "bb04e1c49baea08c6492b1f1467424c09142029b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -109,8 +109,9 @@ pub struct InferenceBadError<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindSubdiag<'a> {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_let,\n+        style = \"verbose\",\n         code = \": {type_name}\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -135,8 +136,9 @@ pub enum SourceKindSubdiag<'a> {\n         parent_prefix: String,\n         parent_name: String,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_generic_suggestion,\n+        style = \"verbose\",\n         code = \"::<{args}>\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -150,8 +152,9 @@ pub enum SourceKindSubdiag<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_fully_qualified,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     FullyQualified {\n@@ -163,8 +166,9 @@ pub enum SourceKindMultiSuggestion<'a> {\n         adjustment: &'a str,\n         successor_pos: &'a str,\n     },\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_closure_return,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     ClosureReturn {\n@@ -478,8 +482,9 @@ pub enum ImplicitStaticLifetimeSubdiag {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_implicit_static_lifetime_suggestion,\n+        style = \"verbose\",\n         code = \" + '_\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "1a769893f5520aa8771274b624907953b2004c5c", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -83,7 +83,7 @@ pub struct UnknownToolInScopedLint {\n pub struct BuiltinEllpisisInclusiveRangePatterns {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"{replace}\", applicability = \"machine-applicable\")]\n     pub suggestion: Span,\n     pub replace: String,\n }"}, {"sha": "7443d131c64dc315c8f278059fe488e498b54a0e", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -150,8 +150,9 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     lint_opaque_hidden_inferred_bound_sugg,\n+    style = \"verbose\",\n     applicability = \"machine-applicable\",\n     code = \" + {trait_ref}\"\n )]"}, {"sha": "78df0cd1d341ae7d05df7e783833a0e6efa5ce82", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -129,7 +129,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// }\n ///\n /// #[derive(Subdiagnostic)]\n-/// #[suggestion_verbose(parser::raw_identifier)]\n+/// #[suggestion(style = \"verbose\",parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n ///     span: Span,"}, {"sha": "ba06f61299f37d22a18d86fd291b21757bc60e3a", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 103, "deletions": 19, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -12,7 +12,7 @@ use syn::{spanned::Spanned, Attribute, Field, Meta, Type, TypeTuple};\n use syn::{MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, VariantInfo};\n \n-use super::error::invalid_nested_attr;\n+use super::error::{invalid_attr, invalid_nested_attr};\n \n thread_local! {\n     pub static CODE_IDENT_COUNT: RefCell<u32> = RefCell::new(0);\n@@ -472,32 +472,42 @@ pub(super) fn build_suggestion_code(\n }\n \n /// Possible styles for suggestion subdiagnostics.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub(super) enum SuggestionKind {\n-    /// `#[suggestion]`\n     Normal,\n-    /// `#[suggestion_short]`\n     Short,\n-    /// `#[suggestion_hidden]`\n     Hidden,\n-    /// `#[suggestion_verbose]`\n     Verbose,\n+    ToolOnly,\n }\n \n impl FromStr for SuggestionKind {\n     type Err = ();\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"\" => Ok(SuggestionKind::Normal),\n-            \"_short\" => Ok(SuggestionKind::Short),\n-            \"_hidden\" => Ok(SuggestionKind::Hidden),\n-            \"_verbose\" => Ok(SuggestionKind::Verbose),\n+            \"normal\" => Ok(SuggestionKind::Normal),\n+            \"short\" => Ok(SuggestionKind::Short),\n+            \"hidden\" => Ok(SuggestionKind::Hidden),\n+            \"verbose\" => Ok(SuggestionKind::Verbose),\n+            \"tool-only\" => Ok(SuggestionKind::ToolOnly),\n             _ => Err(()),\n         }\n     }\n }\n \n+impl fmt::Display for SuggestionKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            SuggestionKind::Normal => write!(f, \"normal\"),\n+            SuggestionKind::Short => write!(f, \"short\"),\n+            SuggestionKind::Hidden => write!(f, \"hidden\"),\n+            SuggestionKind::Verbose => write!(f, \"verbose\"),\n+            SuggestionKind::ToolOnly => write!(f, \"tool-only\"),\n+        }\n+    }\n+}\n+\n impl SuggestionKind {\n     pub fn to_suggestion_style(&self) -> TokenStream {\n         match self {\n@@ -513,6 +523,19 @@ impl SuggestionKind {\n             SuggestionKind::Verbose => {\n                 quote! { rustc_errors::SuggestionStyle::ShowAlways }\n             }\n+            SuggestionKind::ToolOnly => {\n+                quote! { rustc_errors::SuggestionStyle::CompletelyHidden }\n+            }\n+        }\n+    }\n+\n+    fn from_suffix(s: &str) -> Option<Self> {\n+        match s {\n+            \"\" => Some(SuggestionKind::Normal),\n+            \"_short\" => Some(SuggestionKind::Short),\n+            \"_hidden\" => Some(SuggestionKind::Hidden),\n+            \"_verbose\" => Some(SuggestionKind::Verbose),\n+            _ => None,\n         }\n     }\n }\n@@ -565,25 +588,49 @@ impl SubdiagnosticKind {\n         let name = name.as_str();\n \n         let meta = attr.parse_meta()?;\n+\n         let mut kind = match name {\n             \"label\" => SubdiagnosticKind::Label,\n             \"note\" => SubdiagnosticKind::Note,\n             \"help\" => SubdiagnosticKind::Help,\n             \"warning\" => SubdiagnosticKind::Warn,\n             _ => {\n+                // Recover old `#[(multipart_)suggestion_*]` syntaxes\n+                // FIXME(#100717): remove\n                 if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n+                    }\n+\n                     SubdiagnosticKind::Suggestion {\n-                        suggestion_kind,\n+                        suggestion_kind: SuggestionKind::Normal,\n                         applicability: None,\n                         code_field: new_code_ident(),\n                         code_init: TokenStream::new(),\n                     }\n                 } else if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"multipart_suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n-                    SubdiagnosticKind::MultipartSuggestion { suggestion_kind, applicability: None }\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[multipart_suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n+                    }\n+\n+                    SubdiagnosticKind::MultipartSuggestion {\n+                        suggestion_kind: SuggestionKind::Normal,\n+                        applicability: None,\n+                    }\n                 } else {\n                     throw_invalid_attr!(attr, &meta);\n                 }\n@@ -621,6 +668,7 @@ impl SubdiagnosticKind {\n         };\n \n         let mut code = None;\n+        let mut suggestion_kind = None;\n \n         let mut nested_iter = nested.into_iter().peekable();\n \n@@ -682,16 +730,37 @@ impl SubdiagnosticKind {\n                     });\n                     applicability.set_once(value, span);\n                 }\n+                (\n+                    \"style\",\n+                    SubdiagnosticKind::Suggestion { .. }\n+                    | SubdiagnosticKind::MultipartSuggestion { .. },\n+                ) => {\n+                    let Some(value) = string_value else {\n+                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        continue;\n+                    };\n+\n+                    let value = value.value().parse().unwrap_or_else(|()| {\n+                        span_err(value.span().unwrap(), \"invalid suggestion style\")\n+                            .help(\"valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\")\n+                            .emit();\n+                        SuggestionKind::Normal\n+                    });\n+\n+                    suggestion_kind.set_once(value, span);\n+                }\n \n                 // Invalid nested attribute\n                 (_, SubdiagnosticKind::Suggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `code` and `applicability` are valid nested attributes\")\n+                        .help(\n+                            \"only `style`, `code` and `applicability` are valid nested attributes\",\n+                        )\n                         .emit();\n                 }\n                 (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `applicability` is a valid nested attributes\")\n+                        .help(\"only `style` and `applicability` are valid nested attributes\")\n                         .emit()\n                 }\n                 _ => {\n@@ -701,19 +770,34 @@ impl SubdiagnosticKind {\n         }\n \n         match kind {\n-            SubdiagnosticKind::Suggestion { ref code_field, ref mut code_init, .. } => {\n+            SubdiagnosticKind::Suggestion {\n+                ref code_field,\n+                ref mut code_init,\n+                suggestion_kind: ref mut kind_field,\n+                ..\n+            } => {\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n+                }\n+\n                 *code_init = if let Some(init) = code.value() {\n                     init\n                 } else {\n                     span_err(span, \"suggestion without `code = \\\"...\\\"`\").emit();\n                     quote! { let #code_field = std::iter::empty(); }\n                 };\n             }\n+            SubdiagnosticKind::MultipartSuggestion {\n+                suggestion_kind: ref mut kind_field, ..\n+            } => {\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n+                }\n+            }\n             SubdiagnosticKind::Label\n             | SubdiagnosticKind::Note\n             | SubdiagnosticKind::Help\n-            | SubdiagnosticKind::Warn\n-            | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n+            | SubdiagnosticKind::Warn => {}\n         }\n \n         Ok(Some((kind, slug)))"}, {"sha": "dc2049028429367100d42c6873efa35e610e0522", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -64,7 +64,7 @@ pub(crate) struct BadQPathStage2 {\n #[diag(parser_incorrect_semicolon)]\n pub(crate) struct IncorrectSemicolon<'a> {\n     #[primary_span]\n-    #[suggestion_short(code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n     #[help]\n     pub opt_help: Option<()>,\n@@ -136,7 +136,12 @@ pub(crate) struct InvalidComparisonOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n-    #[suggestion_short(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n+    #[suggestion(\n+        use_instead,\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{correct}\"\n+    )]\n     Correctable {\n         #[primary_span]\n         span: Span,\n@@ -160,14 +165,16 @@ pub(crate) struct InvalidLogicalOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         use_amp_amp_for_conjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"&&\"\n     )]\n     Conjunction(#[primary_span] Span),\n-    #[suggestion_short(\n+    #[suggestion(\n         use_pipe_pipe_for_disjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"||\"\n     )]\n@@ -178,7 +185,7 @@ pub(crate) enum InvalidLogicalOperatorSub {\n #[diag(parser_tilde_is_not_unary_operator)]\n pub(crate) struct TildeAsUnaryOperator(\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"!\")]\n     pub Span,\n );\n \n@@ -194,22 +201,25 @@ pub(crate) struct NotAsNegationOperator {\n \n #[derive(Subdiagnostic)]\n pub enum NotAsNegationOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_default,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotDefault(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_bitwise,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotBitwise(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_logical,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n@@ -249,7 +259,7 @@ pub(crate) struct UnexpectedTokenAfterLabel {\n     #[primary_span]\n     #[label(parser_unexpected_token_after_label)]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_label, code = \"\")]\n+    #[suggestion(suggestion_remove_label, style = \"verbose\", code = \"\")]\n     pub remove_label: Option<Span>,\n     #[subdiagnostic]\n     pub enclose_in_block: Option<UnexpectedTokenAfterLabelSugg>,\n@@ -272,7 +282,7 @@ pub(crate) struct RequireColonAfterLabeledExpression {\n     pub span: Span,\n     #[label]\n     pub label: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \": \")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \": \")]\n     pub label_end: Span,\n }\n \n@@ -354,7 +364,7 @@ pub(crate) struct IntLiteralTooLarge {\n pub(crate) struct MissingSemicolonBeforeArray {\n     #[primary_span]\n     pub open_delim: Span,\n-    #[suggestion_verbose(applicability = \"maybe-incorrect\", code = \";\")]\n+    #[suggestion(style = \"verbose\", applicability = \"maybe-incorrect\", code = \";\")]\n     pub semicolon: Span,\n }\n \n@@ -442,9 +452,9 @@ pub(crate) struct MissingInInForLoop {\n #[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n-    #[suggestion_short(use_in_not_of, applicability = \"maybe-incorrect\", code = \"in\")]\n+    #[suggestion(use_in_not_of, style = \"short\", applicability = \"maybe-incorrect\", code = \"in\")]\n     InNotOf(#[primary_span] Span),\n-    #[suggestion_short(add_in, applicability = \"maybe-incorrect\", code = \" in \")]\n+    #[suggestion(add_in, style = \"short\", applicability = \"maybe-incorrect\", code = \" in \")]\n     AddIn(#[primary_span] Span),\n }\n \n@@ -470,7 +480,7 @@ pub(crate) struct CatchAfterTry {\n pub(crate) struct CommaAfterBaseStruct {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub comma: Span,\n }\n \n@@ -512,15 +522,15 @@ pub(crate) struct RemoveLet {\n #[diag(parser_use_eq_instead)]\n pub(crate) struct UseEqInstead {\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"=\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"=\")]\n     pub span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_use_empty_block_not_semi)]\n pub(crate) struct UseEmptyBlockNotSemi {\n     #[primary_span]\n-    #[suggestion_hidden(applicability = \"machine-applicable\", code = \"{{}}\")]\n+    #[suggestion(style = \"hidden\", applicability = \"machine-applicable\", code = \"{{}}\")]\n     pub span: Span,\n }\n \n@@ -576,7 +586,12 @@ pub(crate) struct LeadingPlusNotSupported {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_plus, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        suggestion_remove_plus,\n+        style = \"verbose\",\n+        code = \"\",\n+        applicability = \"machine-applicable\"\n+    )]\n     pub remove_plus: Option<Span>,\n     #[subdiagnostic]\n     pub add_parentheses: Option<ExprParenthesesNeeded>,\n@@ -843,7 +858,7 @@ pub(crate) struct InvalidCurlyInLetElse {\n #[help]\n pub(crate) struct CompoundAssignmentExpressionInLet {\n     #[primary_span]\n-    #[suggestion_short(code = \"=\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"short\", code = \"=\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n \n@@ -864,8 +879,9 @@ pub(crate) struct InvalidMetaItem {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     parser_sugg_escape_to_use_as_identifier,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\",\n     code = \"r#\"\n )]\n@@ -1005,7 +1021,12 @@ pub(crate) enum ExpectedSemiSugg {\n         applicability = \"machine-applicable\"\n     )]\n     ChangeToSemi(#[primary_span] Span),\n-    #[suggestion_short(parser_sugg_add_semi, code = \";\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        parser_sugg_add_semi,\n+        style = \"short\",\n+        code = \";\",\n+        applicability = \"machine-applicable\"\n+    )]\n     AddSemi(#[primary_span] Span),\n }\n \n@@ -1059,8 +1080,9 @@ pub(crate) struct GenericParamsWithoutAngleBracketsSugg {\n pub(crate) struct ComparisonOperatorsCannotBeChained {\n     #[primary_span]\n     pub span: Vec<Span>,\n-    #[suggestion_verbose(\n+    #[suggestion(\n         parser_sugg_turbofish_syntax,\n+        style = \"verbose\",\n         code = \"::\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1074,8 +1096,9 @@ pub(crate) struct ComparisonOperatorsCannotBeChained {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum ComparisonOperatorsCannotBeChainedSugg {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         sugg_split_comparison,\n+        style = \"verbose\",\n         code = \" && {middle_term}\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1217,15 +1240,15 @@ pub(crate) enum UnexpectedConstParamDeclarationSugg {\n pub(crate) struct UnexpectedConstInGenericParam {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"\", applicability = \"maybe-incorrect\")]\n     pub to_remove: Option<Span>,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_async_move_order_incorrect)]\n pub(crate) struct AsyncMoveOrderIncorrect {\n     #[primary_span]\n-    #[suggestion_verbose(code = \"async move\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"async move\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n "}, {"sha": "fb883ae2ed0a76fc6896768d42f040a1b0a52bfb", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -291,7 +291,7 @@ pub struct DocTestUnknownAny {\n #[note(no_op_note)]\n pub struct DocTestUnknownSpotlight {\n     pub path: String,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"notable_trait\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"notable_trait\")]\n     pub span: Span,\n }\n "}, {"sha": "411eb3fba483aa507b01f0298aec79c1972d43b2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -40,9 +40,9 @@ struct HelloWarn {}\n //~^ ERROR unsupported type attribute for diagnostic derive enum\n enum DiagnosticOnEnum {\n     Foo,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n     Bar,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n }\n \n #[derive(Diagnostic)]\n@@ -211,9 +211,10 @@ struct LabelOnNonSpan {\n #[diag(compiletest_example, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_short(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_hidden(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_verbose(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"normal\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"short\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"hidden\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"verbose\")]\n     suggestion: (Span, Applicability),\n }\n \n@@ -536,8 +537,7 @@ struct LabelWithTrailingList {\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n-struct LintsGood {\n-}\n+struct LintsGood {}\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n@@ -683,39 +683,39 @@ struct RawIdentDiagnosticArg {\n #[diag(compiletest_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n-//~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadStr {\n     #[subdiagnostic = \"bad\"]\n-//~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n-//~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticEagerLint {\n     #[subdiagnostic(eager)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n@@ -731,11 +731,7 @@ struct SubdiagnosticEagerCorrect {\n // after the `span_suggestion` call - which breaks eager translation.\n \n #[derive(Subdiagnostic)]\n-#[suggestion_short(\n-    use_instead,\n-    applicability = \"machine-applicable\",\n-    code = \"{correct}\"\n-)]\n+#[suggestion(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n pub(crate) struct SubdiagnosticWithSuggestion {\n     #[primary_span]\n     span: Span,\n@@ -796,3 +792,10 @@ struct SuggestionsInvalidLiteral {\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n     sub: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionStyleGood {\n+    #[suggestion(code = \"\", style = \"hidden\")]\n+    sub: Span,\n+}"}, {"sha": "b4c211db47cd9e090bdc8e6f5fc3e8be399628d9", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -261,41 +261,41 @@ LL |     #[label(label)]\n    |     ^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:223:5\n+  --> $DIR/diagnostic-derive.rs:224:5\n    |\n LL |     #[suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:231:18\n+  --> $DIR/diagnostic-derive.rs:232:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:231:5\n+  --> $DIR/diagnostic-derive.rs:232:5\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:240:18\n+  --> $DIR/diagnostic-derive.rs:241:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:240:5\n+  --> $DIR/diagnostic-derive.rs:241:5\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:263:5\n+  --> $DIR/diagnostic-derive.rs:264:5\n    |\n LL | /     #[suggestion(suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -305,69 +305,69 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:279:24\n+  --> $DIR/diagnostic-derive.rs:280:24\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                        ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:279:18\n+  --> $DIR/diagnostic-derive.rs:280:18\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                  ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:287:33\n+  --> $DIR/diagnostic-derive.rs:288:33\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                                 ^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:287:18\n+  --> $DIR/diagnostic-derive.rs:288:18\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:294:5\n+  --> $DIR/diagnostic-derive.rs:295:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:445:44\n+  --> $DIR/diagnostic-derive.rs:446:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:447:24\n+  --> $DIR/diagnostic-derive.rs:448:24\n    |\n LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:453:44\n+  --> $DIR/diagnostic-derive.rs:454:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:516:20\n+  --> $DIR/diagnostic-derive.rs:517:20\n    |\n LL |     #[label(label, foo)]\n    |                    ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:524:20\n+  --> $DIR/diagnostic-derive.rs:525:20\n    |\n LL |     #[label(label, foo = \"...\")]\n    |                    ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:20\n+  --> $DIR/diagnostic-derive.rs:533:20\n    |\n LL |     #[label(label, foo(\"...\"))]\n    |                    ^^^^^^^^^^\n@@ -574,19 +574,19 @@ LL |     #[subdiagnostic(eager)]\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:779:18\n+  --> $DIR/diagnostic-derive.rs:775:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:787:23\n+  --> $DIR/diagnostic-derive.rs:783:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:795:18\n+  --> $DIR/diagnostic-derive.rs:791:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n@@ -652,7 +652,7 @@ LL | #[diag(nonsense, code = \"E0123\")]\n    |        ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:338:10\n+  --> $DIR/diagnostic-derive.rs:339:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`"}, {"sha": "078ec3baac9fc71f359b45062f80c40bebae95bc", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 118, "deletions": 26, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -11,13 +11,13 @@\n #![crate_type = \"lib\"]\n \n extern crate rustc_errors;\n+extern crate rustc_macros;\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate rustc_macros;\n \n use rustc_errors::Applicability;\n-use rustc_span::Span;\n use rustc_macros::Subdiagnostic;\n+use rustc_span::Span;\n \n #[derive(Subdiagnostic)]\n #[label(parser_add_paren)]\n@@ -40,7 +40,7 @@ enum B {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -165,7 +165,7 @@ enum P {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -177,7 +177,7 @@ enum Q {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -189,7 +189,7 @@ enum R {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -201,7 +201,7 @@ enum S {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -213,7 +213,7 @@ enum T {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -225,7 +225,7 @@ enum U {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -240,7 +240,7 @@ enum V {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -301,14 +301,14 @@ struct AB {\n     #[primary_span]\n     span: Span,\n     #[skip_arg]\n-    z: Z\n+    z: Z,\n }\n \n #[derive(Subdiagnostic)]\n union AC {\n-//~^ ERROR unexpected unsupported untagged union\n+    //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n-    b: u64\n+    b: u64,\n }\n \n #[derive(Subdiagnostic)]\n@@ -372,7 +372,7 @@ enum AI {\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -427,7 +427,7 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n@@ -437,7 +437,7 @@ struct AO {\n #[derive(Subdiagnostic)]\n #[help(parser_add_paren)]\n struct AP {\n-    var: String\n+    var: String,\n }\n \n #[derive(Subdiagnostic)]\n@@ -452,7 +452,7 @@ struct AR {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -467,19 +467,19 @@ enum AT {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,22 +488,22 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-//~^ ERROR `var` doesn't refer to a field on this type\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -659,7 +659,7 @@ enum BL {\n         /// ..and the field\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -706,3 +706,95 @@ struct BQ {\n     span: Span,\n     r#type: String,\n }\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\")]\n+struct SuggestionStyleDefault {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"short\")]\n+struct SuggestionStyleShort {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\")]\n+struct SuggestionStyleHidden {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"verbose\")]\n+struct SuggestionStyleVerbose {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"tool-only\")]\n+struct SuggestionStyleToolOnly {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+//~^ ERROR specified multiple times\n+//~| NOTE previously specified here\n+struct SuggestionStyleTwice {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\")]\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldSyntax {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldAndNewSyntax {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+//~^ ERROR invalid suggestion style\n+struct SuggestionStyleInvalid1 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = 42)]\n+//~^ ERROR `#[suggestion(style = ...)]` is not a valid attribute\n+struct SuggestionStyleInvalid2 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style)]\n+//~^ ERROR `#[suggestion(style)]` is not a valid attribute\n+struct SuggestionStyleInvalid3 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+//~^ ERROR `#[suggestion(style(...))]` is not a valid attribute\n+struct SuggestionStyleInvalid4 {\n+    #[primary_span]\n+    sub: Span,\n+}"}, {"sha": "8e06c43e6d0ad79ee48988234182c5b4a1470ce9", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e705564d54ffed9ab36ec9f0d3183daab72039/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=69e705564d54ffed9ab36ec9f0d3183daab72039", "patch": "@@ -186,7 +186,7 @@ error: unexpected unsupported untagged union\n LL | / union AC {\n LL | |\n LL | |     span: u32,\n-LL | |     b: u64\n+LL | |     b: u64,\n LL | | }\n    | |_^\n \n@@ -253,10 +253,10 @@ LL | #[suggestion(parser_add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:45\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n-LL | #[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:448:1\n@@ -275,16 +275,16 @@ LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:38\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n-LL | #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:42\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n-LL |     #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^\n+LL |     #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:524:5\n@@ -320,7 +320,7 @@ error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n LL | #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                          ^^^^^^^^^^^^\n    |\n-   = help: only `applicability` is a valid nested attributes\n+   = help: only `style` and `applicability` are valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:536:1\n@@ -445,6 +445,62 @@ error: `code = \"...\"`/`code(...)` must contain only string literals\n LL |     #[suggestion_part(code = 3)]\n    |                       ^^^^^^^^\n \n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:746:61\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:746:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                           ^^^^^^^^^^^^^^^^\n+\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:755:1\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n+\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:763:1\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n+\n+error: invalid suggestion style\n+  --> $DIR/subdiagnostic-derive.rs:771:51\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+   |                                                   ^^^^^\n+   |\n+   = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n+\n+error: `#[suggestion(style = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:779:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = 42)]\n+   |                                           ^^^^^^^^^^\n+\n+error: `#[suggestion(style)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:787:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style)]\n+   |                                           ^^^^^\n+   |\n+   = help: a diagnostic slug must be the first argument to the attribute\n+\n+error: `#[suggestion(style(...))]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:795:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+   |                                           ^^^^^^^^^^^^\n+\n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n    |\n@@ -505,6 +561,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 72 previous errors\n+error: aborting due to 79 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}