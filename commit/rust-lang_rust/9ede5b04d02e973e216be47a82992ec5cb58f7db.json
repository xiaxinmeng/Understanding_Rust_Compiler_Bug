{"sha": "9ede5b04d02e973e216be47a82992ec5cb58f7db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZGU1YjA0ZDAyZTk3M2UyMTZiZTQ3YTgyOTkyZWM1Y2I1OGY3ZGI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-14T01:37:06Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-14T01:37:06Z"}, "message": "Remove the last remnant of unsigned Neg\n\nIt's been gone since #23945, before Rust 1.0. The former wrapping\nsemantics have also been available as inherent methods for a long time\nnow. There's no reason to keep this unused macro around.", "tree": {"sha": "aacdd1490a2f482ee744bffdb45ce42ca831525f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacdd1490a2f482ee744bffdb45ce42ca831525f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ede5b04d02e973e216be47a82992ec5cb58f7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ede5b04d02e973e216be47a82992ec5cb58f7db", "html_url": "https://github.com/rust-lang/rust/commit/9ede5b04d02e973e216be47a82992ec5cb58f7db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ede5b04d02e973e216be47a82992ec5cb58f7db/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e18e26f12b1e8b3e913b15278bf6185f0f61add", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e18e26f12b1e8b3e913b15278bf6185f0f61add", "html_url": "https://github.com/rust-lang/rust/commit/8e18e26f12b1e8b3e913b15278bf6185f0f61add"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "622a138abe9d19cae5ff0945563469b166a1da82", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ede5b04d02e973e216be47a82992ec5cb58f7db/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ede5b04d02e973e216be47a82992ec5cb58f7db/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=9ede5b04d02e973e216be47a82992ec5cb58f7db", "patch": "@@ -617,35 +617,22 @@ pub trait Neg {\n     fn neg(self) -> Self::Output;\n }\n \n-macro_rules! neg_impl_core {\n-    ($id:ident => $body:expr, $($t:ty)*) => ($(\n+macro_rules! neg_impl {\n+    ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Neg for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            fn neg(self) -> $t { let $id = self; $body }\n+            fn neg(self) -> $t { -self }\n         }\n \n         forward_ref_unop! { impl Neg, neg for $t }\n     )*)\n }\n \n-macro_rules! neg_impl_numeric {\n-    ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n-}\n-\n-#[allow(unused_macros)]\n-macro_rules! neg_impl_unsigned {\n-    ($($t:ty)*) => {\n-        neg_impl_core!{ x => {\n-            !x.wrapping_add(1)\n-        }, $($t)*} }\n-}\n-\n-// neg_impl_unsigned! { usize u8 u16 u32 u64 }\n-neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n+neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The addition assignment operator `+=`.\n ///"}]}