{"sha": "be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzc0MDJlZTNjYTZhNGNhYjE2YjQ1YzhjMzViYWExM2E5ZDVhMDU=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-05T20:16:24Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:56Z"}, "message": "More pattern testcases", "tree": {"sha": "652de15dc4857543cd2ed8cc5bdb698dbae6d6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652de15dc4857543cd2ed8cc5bdb698dbae6d6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "html_url": "https://github.com/rust-lang/rust/commit/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa381600dcf4a5279e3222b48b4a1363d71ac7a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa381600dcf4a5279e3222b48b4a1363d71ac7a9", "html_url": "https://github.com/rust-lang/rust/commit/fa381600dcf4a5279e3222b48b4a1363d71ac7a9"}], "stats": {"total": 377, "additions": 314, "deletions": 63}, "files": [{"sha": "36f258f950f4f3b8afef74331e9567fd07ef038f", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs?ref=be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "patch": "@@ -0,0 +1,66 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+// Test to ensure Index projections are handled properly during capture analysis\n+// The array should be moved in entirety, even though only some elements are used.\n+fn arrays() {\n+    let arr: [String; 5] = [format!(\"A\"), format!(\"B\"), format!(\"C\"), format!(\"D\"), format!(\"E\")];\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        let [a, b, .., e] = arr;\n+        //~^ ERROR: Capturing arr[Index] -> ByValue\n+        //~^^ ERROR: Min Capture arr[] -> ByValue\n+        assert_eq!(a, \"A\");\n+        assert_eq!(b, \"B\");\n+        assert_eq!(e, \"E\");\n+    };\n+\n+    c();\n+}\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+    id: String,\n+}\n+\n+fn structs() {\n+    let mut p = Point { x: 10, y: 10, id: String::new() };\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        let Point { x: ref mut x, y: _, id: moved_id } = p;\n+        //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n+        //~^^ ERROR: Capturing p[(2, 0)] -> ByValue\n+        //~^^^ ERROR: Min Capture p[(0, 0)] -> MutBorrow\n+        //~^^^^ ERROR: Min Capture p[(2, 0)] -> ByValue\n+\n+        println!(\"{}, {}\", x, moved_id);\n+    };\n+    c();\n+}\n+\n+fn tuples() {\n+    let mut t = (10, String::new(), (String::new(), 42));\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+        //~^ ERROR: Capturing t[(0, 0)] -> MutBorrow\n+        //~^^ ERROR: Capturing t[(1, 0)] -> ImmBorrow\n+        //~^^^ ERROR: Capturing t[(2, 0),(0, 0)] -> ByValue\n+        //~^^^^ ERROR: Min Capture t[(0, 0)] -> MutBorrow\n+        //~^^^^^ ERROR: Min Capture t[(1, 0)] -> ImmBorrow\n+        //~^^^^^^ ERROR: Min Capture t[(2, 0),(0, 0)] -> ByValue\n+\n+        println!(\"{}, {} {}\", x, ref_str, moved_s);\n+    };\n+    c();\n+}\n+\n+fn main() {}"}, {"sha": "388cfd3da92c86190df7f95c13ea19dfcd8d077b", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr?ref=be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "patch": "@@ -0,0 +1,111 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure_patterns.rs:10:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure_patterns.rs:33:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/destructure_patterns.rs:50:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/destructure_patterns.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: Capturing arr[Index] -> ByValue\n+  --> $DIR/destructure_patterns.rs:13:29\n+   |\n+LL |         let [a, b, .., e] = arr;\n+   |                             ^^^\n+\n+error: Min Capture arr[] -> ByValue\n+  --> $DIR/destructure_patterns.rs:13:29\n+   |\n+LL |         let [a, b, .., e] = arr;\n+   |                             ^^^\n+\n+error: Capturing p[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:36:58\n+   |\n+LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+   |                                                          ^\n+\n+error: Capturing p[(2, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:36:58\n+   |\n+LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+   |                                                          ^\n+\n+error: Min Capture p[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:36:58\n+   |\n+LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+   |                                                          ^\n+\n+error: Min Capture p[(2, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:36:58\n+   |\n+LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+   |                                                          ^\n+\n+error: Capturing t[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: Capturing t[(1, 0)] -> ImmBorrow\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: Capturing t[(2, 0),(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: Min Capture t[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: Min Capture t[(1, 0)] -> ImmBorrow\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: Min Capture t[(2, 0),(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:53:54\n+   |\n+LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+   |                                                      ^\n+\n+error: aborting due to 15 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4e30194b17e480659b365d9c7b78c248bc5b90ca", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa381600dcf4a5279e3222b48b4a1363d71ac7a9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa381600dcf4a5279e3222b48b4a1363d71ac7a9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs?ref=fa381600dcf4a5279e3222b48b4a1363d71ac7a9", "patch": "@@ -1,30 +0,0 @@\n-#![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n-#![feature(rustc_attrs)]\n-\n-// Test to ensure Index projections are handled properly during capture analysis\n-//\n-// The array should be moved in entirety, even though only some elements are used.\n-\n-fn main() {\n-    let arr : [String; 5] = [\n-        format!(\"A\"),\n-        format!(\"B\"),\n-        format!(\"C\"),\n-        format!(\"D\"),\n-        format!(\"E\")\n-    ];\n-\n-    let c = #[rustc_capture_analysis]\n-    //~^ ERROR: attributes on expressions are experimental\n-        || {\n-            let [a, b, .., e] = arr;\n-            //~^ ERROR: Capturing arr[Index] -> ByValue\n-            //~^^ ERROR: Min Capture arr[] -> ByValue\n-            assert_eq!(a, \"A\");\n-            assert_eq!(b, \"B\");\n-            assert_eq!(e, \"E\");\n-        };\n-\n-    c();\n-}"}, {"sha": "2547322a8abf25948dc5270dcbbff6e01b7bddd6", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fa381600dcf4a5279e3222b48b4a1363d71ac7a9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa381600dcf4a5279e3222b48b4a1363d71ac7a9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr?ref=fa381600dcf4a5279e3222b48b4a1363d71ac7a9", "patch": "@@ -1,33 +0,0 @@\n-error[E0658]: attributes on expressions are experimental\n-  --> $DIR/slice-pat.rs:18:13\n-   |\n-LL |     let c = #[rustc_capture_analysis]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n-   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n-\n-warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/slice-pat.rs:1:12\n-   |\n-LL | #![feature(capture_disjoint_fields)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n-\n-error: Capturing arr[Index] -> ByValue\n-  --> $DIR/slice-pat.rs:21:33\n-   |\n-LL |             let [a, b, .., e] = arr;\n-   |                                 ^^^\n-\n-error: Min Capture arr[] -> ByValue\n-  --> $DIR/slice-pat.rs:21:33\n-   |\n-LL |             let [a, b, .., e] = arr;\n-   |                                 ^^^\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d17af7cc79a471459171473b43b4a5d7354ad3bc", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs?ref=be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "patch": "@@ -0,0 +1,62 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+// Test to ensure that we can handle cases where\n+// let statements create no bindings are intialized\n+// using a Place expression\n+//\n+// Note: Currently when feature `capture_disjoint_fields` is enabled\n+// we can't handle such cases. So the test so the test\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn wild_struct() {\n+    let p = Point { x: 10, y: 20 };\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        // FIXME(arora-aman): Change `_x` to `_`\n+        let Point { x: _x, y: _ } = p;\n+        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n+        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+    };\n+\n+    c();\n+}\n+\n+fn wild_tuple() {\n+    let t = (String::new(), 10);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        // FIXME(arora-aman): Change `_x` to `_`\n+        let (_x, _) = t;\n+        //~^ ERROR: Capturing t[(0, 0)] -> ByValue\n+        //~^^ ERROR: Min Capture t[(0, 0)] -> ByValue\n+    };\n+\n+    c();\n+}\n+\n+fn wild_arr() {\n+    let arr = [String::new(), String::new()];\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        // FIXME(arora-aman): Change `_x` to `_`\n+        let [_x, _] = arr;\n+        //~^ ERROR: Capturing arr[Index] -> ByValue\n+        //~^^ ERROR: Min Capture arr[] -> ByValue\n+    };\n+\n+    c();\n+}\n+\n+fn main() {}"}, {"sha": "621c8aeb790f95818c4102e14d994467a404b812", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be77402ee3ca6a4cab16b45c8c35baa13a9d5a05/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr?ref=be77402ee3ca6a4cab16b45c8c35baa13a9d5a05", "patch": "@@ -0,0 +1,75 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/wild_patterns.rs:20:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/wild_patterns.rs:35:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/wild_patterns.rs:50:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/wild_patterns.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/wild_patterns.rs:24:37\n+   |\n+LL |         let Point { x: _x, y: _ } = p;\n+   |                                     ^\n+\n+error: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/wild_patterns.rs:24:37\n+   |\n+LL |         let Point { x: _x, y: _ } = p;\n+   |                                     ^\n+\n+error: Capturing t[(0, 0)] -> ByValue\n+  --> $DIR/wild_patterns.rs:39:23\n+   |\n+LL |         let (_x, _) = t;\n+   |                       ^\n+\n+error: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/wild_patterns.rs:39:23\n+   |\n+LL |         let (_x, _) = t;\n+   |                       ^\n+\n+error: Capturing arr[Index] -> ByValue\n+  --> $DIR/wild_patterns.rs:54:23\n+   |\n+LL |         let [_x, _] = arr;\n+   |                       ^^^\n+\n+error: Min Capture arr[] -> ByValue\n+  --> $DIR/wild_patterns.rs:54:23\n+   |\n+LL |         let [_x, _] = arr;\n+   |                       ^^^\n+\n+error: aborting due to 9 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}]}