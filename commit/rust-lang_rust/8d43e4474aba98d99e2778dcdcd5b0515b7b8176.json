{"sha": "8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNDNlNDQ3NGFiYTk4ZDk5ZTI3NzhkY2RjZDViMDUxNWI3YjgxNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-22T07:16:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-22T07:16:17Z"}, "message": "auto merge of #15867 : cmr/rust/rewrite-lexer4, r=alexcrichton", "tree": {"sha": "6fb6f271ba16b79fdd6b1edd30bed9a88664f10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb6f271ba16b79fdd6b1edd30bed9a88664f10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "html_url": "https://github.com/rust-lang/rust/commit/8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f4d996ea2bea69fe363dca4e6e09b91bbd83f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f4d996ea2bea69fe363dca4e6e09b91bbd83f3", "html_url": "https://github.com/rust-lang/rust/commit/32f4d996ea2bea69fe363dca4e6e09b91bbd83f3"}, {"sha": "95a1ce6f3f3a31d4e64b04637cd252cc02b623dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a1ce6f3f3a31d4e64b04637cd252cc02b623dd", "html_url": "https://github.com/rust-lang/rust/commit/95a1ce6f3f3a31d4e64b04637cd252cc02b623dd"}], "stats": {"total": 746, "additions": 735, "deletions": 11}, "files": [{"sha": "5683eb7ba06af964def14409de5347f4872ffe3c", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -216,6 +216,7 @@ ifneq ($(strip $(findstring check,$(MAKECMDGOALS)) \\\n                $(findstring tidy,$(MAKECMDGOALS))),)\n   CFG_INFO := $(info cfg: including test rules)\n   include $(CFG_SRC_DIR)mk/tests.mk\n+  include $(CFG_SRC_DIR)mk/grammar.mk\n endif\n \n # Performance and benchmarking"}, {"sha": "b6513cb0f74c6424a6f00ea6d2556bcf5baade55", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -493,6 +493,9 @@ probe CFG_VALGRIND         valgrind\n probe CFG_PERF             perf\n probe CFG_ISCC             iscc\n probe CFG_LLNEXTGEN        LLnextgen\n+probe CFG_JAVAC            javac\n+probe CFG_ANTLR4           antlr4\n+probe CFG_GRUN             grun\n probe CFG_PANDOC           pandoc\n probe CFG_PDFLATEX         pdflatex\n probe CFG_XELATEX          xelatex"}, {"sha": "c0afa3eb769461853346cc7b031c4fa4b2c7d59b", "filename": "mk/grammar.mk", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,55 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+BG = $(CFG_BUILD_DIR)/grammar/\n+SG = $(S)src/grammar/\n+B = $(CFG_BUILD_DIR)/$(CFG_BUILD)/stage2/\n+L = $(B)lib/rustlib/$(CFG_BUILD)/lib\n+LD = $(CFG_BUILD)/stage2/lib/rustlib/$(CFG_BUILD)/lib/\n+RUSTC = $(B)bin/rustc\n+\n+# Run the reference lexer against libsyntax and compare the tokens and spans.\n+# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n+#\n+# $(1) is the file to test.\n+define LEXER_TEST\n+grep \"// ignore-lexer-test\" $(1) ; \\\n+  if [ $$? -eq 1 ]; then \\\n+   CLASSPATH=$(B)grammar $(CFG_GRUN) RustLexer tokens -tokens < $(1) \\\n+   | $(B)grammar/verify $(1) ; \\\n+  fi\n+endef\n+\n+$(BG):\n+\t$(Q)mkdir -p $(BG)\n+\n+$(BG)RustLexer.class: $(SG)RustLexer.g4\n+\t$(Q)$(CFG_ANTLR4) -o $(B)grammar $(SG)RustLexer.g4\n+\t$(Q)$(CFG_JAVAC) -d $(BG) $(BG)RustLexer.java\n+\n+$(BG)verify: $(SG)verify.rs rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.regex_macros $(LD)stamp.rustc\n+\t$(Q)$(RUSTC) -O --out-dir $(BG) -L $(L) $(SG)verify.rs\n+\n+check-lexer: $(BG) $(BG)RustLexer.class $(BG)verify\n+ifdef CFG_JAVAC\n+ifdef CFG_ANTLR4\n+ifdef CFG_GRUN\n+\t$(info Verifying libsyntax against the reference lexer ...)\n+\t$(Q)$(SG)check.sh $(S) \"$(BG)\" \\\n+\t\t\"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\"\n+else\n+$(info grun not available, skipping lexer test...)\n+endif\n+else\n+$(info antlr4 not available, skipping lexer test...)\n+endif\n+else\n+$(info javac not available, skipping lexer test...)\n+endif"}, {"sha": "2e500ffeb0a5057e5cff35027c7f21360a44c245", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -192,6 +192,8 @@ check-docs: cleantestlibs cleantmptestlogs check-stage2-docs\n # NOTE: Remove after reprogramming windows bots\n check-fast: check-lite\n \n+check-syntax: check-lexer\n+\n .PHONY: cleantmptestlogs cleantestlibs\n \n cleantmptestlogs:"}, {"sha": "e77db28967e336b9474caad94b3276cd4508d970", "filename": "src/grammar/.gitignore", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2F.gitignore?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,4 @@\n+verify\n+*.class\n+*.java\n+*.tokens"}, {"sha": "f5b872cdc7f679511b8acafda9b3620e49e5c02f", "filename": "src/grammar/README.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FREADME.md?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,20 @@\n+Reference grammar.\n+\n+Uses [antlr4](http://www.antlr.org/) and a custom Rust tool to compare\n+ASTs/token streams generated. You can use the `check-syntax` make target to\n+run all of the available tests.\n+\n+To use manually:\n+\n+```\n+antlr4 RustLexer.g4\n+javac *.java\n+rustc -O verify.rs\n+for file in ../*/**.rs; do\n+    echo $file;\n+    grun RustLexer tokens -tokens < $file | ./verify $file || break\n+done\n+```\n+\n+Note That the `../*/**.rs` glob will match every `*.rs` file in the above\n+directory and all of its recursive children. This is a zsh extension."}, {"sha": "f2705e5421b9b02637fcf70ee8d6b33ca50d910f", "filename": "src/grammar/RustLexer.g4", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,170 @@\n+lexer grammar RustLexer;\n+\n+tokens {\n+    EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUT,\n+    MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n+    BINOPEQ, AT, DOT, DOTDOT, DOTDOTDOT, COMMA, SEMI, COLON,\n+    MOD_SEP, RARROW, FAT_ARROW, LPAREN, RPAREN, LBRACKET, RBRACKET,\n+    LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR,\n+    LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BINARY,\n+    LIT_BINARY_RAW, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n+    COMMENT\n+}\n+\n+/* Note: due to antlr limitations, we can't represent XID_start and\n+ * XID_continue properly. ASCII-only substitute. */\n+\n+fragment XID_start : [_a-zA-Z] ;\n+fragment XID_continue : [_a-zA-Z0-9] ;\n+\n+\n+/* Expression-operator symbols */\n+\n+EQ      : '=' ;\n+LT      : '<' ;\n+LE      : '<=' ;\n+EQEQ    : '==' ;\n+NE      : '!=' ;\n+GE      : '>=' ;\n+GT      : '>' ;\n+ANDAND  : '&&' ;\n+OROR    : '||' ;\n+NOT     : '!' ;\n+TILDE   : '~' ;\n+PLUS    : '+' ;\n+MINUS   : '-' ;\n+STAR    : '*' ;\n+SLASH   : '/' ;\n+PERCENT : '%' ;\n+CARET   : '^' ;\n+AND     : '&' ;\n+OR      : '|' ;\n+SHL     : '<<' ;\n+SHR     : '>>' ;\n+\n+BINOP\n+    : PLUS\n+    | SLASH\n+    | MINUS\n+    | STAR\n+    | PERCENT\n+    | CARET\n+    | AND\n+    | OR\n+    | SHL\n+    | SHR\n+    ;\n+\n+BINOPEQ : BINOP EQ ;\n+\n+/* \"Structural symbols\" */\n+\n+AT         : '@' ;\n+DOT        : '.' ;\n+DOTDOT     : '..' ;\n+DOTDOTDOT  : '...' ;\n+COMMA      : ',' ;\n+SEMI       : ';' ;\n+COLON      : ':' ;\n+MOD_SEP    : '::' ;\n+RARROW     : '->' ;\n+FAT_ARROW  : '=>' ;\n+LPAREN     : '(' ;\n+RPAREN     : ')' ;\n+LBRACKET   : '[' ;\n+RBRACKET   : ']' ;\n+LBRACE     : '{' ;\n+RBRACE     : '}' ;\n+POUND      : '#';\n+DOLLAR     : '$' ;\n+UNDERSCORE : '_' ;\n+\n+// Literals\n+\n+fragment HEXIT\n+  : [0-9a-fA-F]\n+  ;\n+\n+fragment CHAR_ESCAPE\n+  : [nrt\\\\'\"0]\n+  | [xX] HEXIT HEXIT\n+  | 'u' HEXIT HEXIT HEXIT HEXIT\n+  | 'U' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT\n+  ;\n+\n+LIT_CHAR\n+  : '\\'' ( '\\\\' CHAR_ESCAPE | ~[\\\\'\\n\\t\\r] ) '\\''\n+  ;\n+\n+LIT_BYTE\n+  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT | [nrt\\\\'\"0] ) | ~[\\\\'\\n\\t\\r] ) '\\''\n+  ;\n+\n+fragment INT_SUFFIX\n+  : 'i'\n+  | 'i8'\n+  | 'i16'\n+  | 'i32'\n+  | 'i64'\n+  | 'u'\n+  | 'u8'\n+  | 'u16'\n+  | 'u32'\n+  | 'u64'\n+  ;\n+\n+LIT_INTEGER\n+  : [0-9][0-9_]* INT_SUFFIX?\n+  | '0b' [01][01_]* INT_SUFFIX?\n+  | '0o' [0-7][0-7_]* INT_SUFFIX?\n+  | '0x' [0-9a-fA-F][0-9a-fA-F_]* INT_SUFFIX?\n+  ;\n+\n+FLOAT_SUFFIX\n+  : 'f32'\n+  | 'f64'\n+  | 'f128'\n+  ;\n+\n+LIT_FLOAT\n+  : [0-9][0-9_]* ('.' | ('.' [0-9][0-9_]*)? ([eE] [-+]? [0-9][0-9_]*)? FLOAT_SUFFIX?)\n+  ;\n+\n+LIT_STR\n+  : '\"' ('\\\\\\n' | '\\\\\\r\\n' | '\\\\' CHAR_ESCAPE | .)*? '\"'\n+  ;\n+\n+LIT_BINARY : 'b' LIT_STR ;\n+LIT_BINARY_RAW : 'rb' LIT_STR_RAW ;\n+\n+/* this is a bit messy */\n+\n+fragment LIT_STR_RAW_INNER\n+  : '\"' .*? '\"'\n+  | LIT_STR_RAW_INNER2\n+  ;\n+\n+fragment LIT_STR_RAW_INNER2\n+  : POUND LIT_STR_RAW_INNER POUND\n+  ;\n+\n+LIT_STR_RAW\n+  : 'r' LIT_STR_RAW_INNER\n+  ;\n+\n+IDENT : XID_start XID_continue* ;\n+\n+LIFETIME : '\\'' IDENT ;\n+\n+WHITESPACE : [ \\r\\n\\t]+ ;\n+\n+UNDOC_COMMENT     : '////' ~[\\r\\n]* -> type(COMMENT) ;\n+YESDOC_COMMENT    : '///' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n+OUTER_DOC_COMMENT : '//!' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n+LINE_COMMENT      : '//' ~[\\r\\n]* -> type(COMMENT) ;\n+\n+DOC_BLOCK_COMMENT\n+  : ('/**' ~[*] | '/*!') (DOC_BLOCK_COMMENT | .)*? '*/' -> type(DOC_COMMENT)\n+  ;\n+\n+BLOCK_COMMENT : '/*' (BLOCK_COMMENT | .)*? '*/' -> type(COMMENT) ;"}, {"sha": "f2836312437c9af80e9f3750561f2fa5c5b2f1d2", "filename": "src/grammar/check.sh", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,34 @@\n+#!/bin/sh\n+\n+# Run the reference lexer against libsyntax and compare the tokens and spans.\n+# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n+\n+\n+# Argument $1 is the file to check, $2 is the classpath to use, $3 is the path\n+# to the grun binary, $4 is the path to the verify binary, $5 is the path to\n+# RustLexer.tokens\n+if [ \"${VERBOSE}\" == \"1\" ]; then\n+    set -x\n+fi\n+\n+check() {\n+    grep --silent \"// ignore-lexer-test\" $1;\n+\n+    # if it's *not* found...\n+    if [ $? -eq 1 ]; then\n+        cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n+        # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n+        # seem to have anny effect.\n+        if $3 RustLexer tokens -tokens < $1 | $4 $1 $5; then\n+            echo \"pass: $1\"\n+        else\n+            echo \"fail: $1\"\n+        fi\n+    else\n+        echo \"skip: $1\"\n+    fi\n+}\n+\n+for file in $(find $1 -iname '*.rs' ! -path '*/test/compile-fail*'); do\n+    check $file $2 $3 $4 $5\n+done"}, {"sha": "6b63bbcb4f067c923e43c49c70701c40aa1bc544", "filename": "src/grammar/raw-string-literal-ambiguity.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fraw-string-literal-ambiguity.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fraw-string-literal-ambiguity.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fraw-string-literal-ambiguity.md?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,29 @@\n+Rust's lexical grammar is not context-free. Raw string literals are the source\n+of the problem. Informally, a raw string literal is an `r`, followed by `N`\n+hashes (where N can be zero), a quote, any characters, then a quote followed\n+by `N` hashes. This grammar describes this as best possible:\n+\n+    R -> 'r' S\n+    S -> '\"' B '\"'\n+    S -> '#' S '#'\n+    B -> . B\n+    B -> \u03b5\n+\n+Where `.` represents any character, and `\u03b5` the empty string. Consider the\n+string `r#\"\"#\"#`. This string is not a valid raw string literal, but can be\n+accepted as one by the above grammar, using the derivation:\n+\n+    R : #\"\"#\"#\n+    S : \"\"#\"\n+    S : \"#\n+    B : #\n+    B : \u03b5\n+\n+(Where `T : U` means the rule `T` is applied, and `U` is the remainder of the\n+string.) The difficulty arises from the fact that it is fundamentally\n+context-sensitive. In particular, the context needed is the number of hashes.\n+I know of no way to resolve this, but also have not come up with a proof that\n+it is not context sensitive. Such a proof would probably use the pumping lemma\n+for context-free languages, but I (cmr) could not come up with a proof after\n+spending a few hours on it, and decided my time best spent elsewhere. Pull\n+request welcome!"}, {"sha": "f2ae5a1ea4e518739a9c74ff5fbde65b4424d71e", "filename": "src/grammar/verify.rs", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -0,0 +1,299 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(globs, phase, macro_rules)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+#[phase(link)]\n+extern crate regex;\n+\n+#[phase(link, plugin)]\n+extern crate log;\n+\n+#[phase(plugin)] extern crate regex_macros;\n+\n+use std::collections::HashMap;\n+use std::io::File;\n+\n+use syntax::parse;\n+use syntax::parse::lexer;\n+use rustc::driver::{session, config};\n+\n+use syntax::ast;\n+use syntax::ast::Name;\n+use syntax::parse::token::*;\n+use syntax::parse::lexer::TokenAndSpan;\n+\n+fn parse_token_list(file: &str) -> HashMap<String, Token> {\n+    fn id() -> Token {\n+        IDENT(ast::Ident { name: Name(0), ctxt: 0, }, false)\n+    }\n+\n+    let mut res = HashMap::new();\n+\n+    res.insert(\"-1\".to_string(), EOF);\n+\n+    for line in file.split('\\n') {\n+        let eq = match line.trim().rfind('=') {\n+            Some(val) => val,\n+            None => continue\n+        };\n+\n+        let val = line.slice_to(eq);\n+        let num = line.slice_from(eq + 1);\n+\n+        let tok = match val {\n+            \"SHR\" => BINOP(SHR),\n+            \"DOLLAR\" => DOLLAR,\n+            \"LT\" => LT,\n+            \"STAR\" => BINOP(STAR),\n+            \"FLOAT_SUFFIX\" => id(),\n+            \"INT_SUFFIX\" => id(),\n+            \"SHL\" => BINOP(SHL),\n+            \"LBRACE\" => LBRACE,\n+            \"RARROW\" => RARROW,\n+            \"LIT_STR\" => LIT_STR(Name(0)),\n+            \"DOTDOT\" => DOTDOT,\n+            \"MOD_SEP\" => MOD_SEP,\n+            \"DOTDOTDOT\" => DOTDOTDOT,\n+            \"NOT\" => NOT,\n+            \"AND\" => BINOP(AND),\n+            \"LPAREN\" => LPAREN,\n+            \"ANDAND\" => ANDAND,\n+            \"AT\" => AT,\n+            \"LBRACKET\" => LBRACKET,\n+            \"LIT_STR_RAW\" => LIT_STR_RAW(Name(0), 0),\n+            \"RPAREN\" => RPAREN,\n+            \"SLASH\" => BINOP(SLASH),\n+            \"COMMA\" => COMMA,\n+            \"LIFETIME\" => LIFETIME(ast::Ident { name: Name(0), ctxt: 0 }),\n+            \"CARET\" => BINOP(CARET),\n+            \"TILDE\" => TILDE,\n+            \"IDENT\" => id(),\n+            \"PLUS\" => BINOP(PLUS),\n+            \"LIT_CHAR\" => LIT_CHAR(Name(0)),\n+            \"LIT_BYTE\" => LIT_BYTE(Name(0)),\n+            \"EQ\" => EQ,\n+            \"RBRACKET\" => RBRACKET,\n+            \"COMMENT\" => COMMENT,\n+            \"DOC_COMMENT\" => DOC_COMMENT(Name(0)),\n+            \"DOT\" => DOT,\n+            \"EQEQ\" => EQEQ,\n+            \"NE\" => NE,\n+            \"GE\" => GE,\n+            \"PERCENT\" => BINOP(PERCENT),\n+            \"RBRACE\" => RBRACE,\n+            \"BINOP\" => BINOP(PLUS),\n+            \"POUND\" => POUND,\n+            \"OROR\" => OROR,\n+            \"LIT_INTEGER\" => LIT_INTEGER(Name(0)),\n+            \"BINOPEQ\" => BINOPEQ(PLUS),\n+            \"LIT_FLOAT\" => LIT_FLOAT(Name(0)),\n+            \"WHITESPACE\" => WS,\n+            \"UNDERSCORE\" => UNDERSCORE,\n+            \"MINUS\" => BINOP(MINUS),\n+            \"SEMI\" => SEMI,\n+            \"COLON\" => COLON,\n+            \"FAT_ARROW\" => FAT_ARROW,\n+            \"OR\" => BINOP(OR),\n+            \"GT\" => GT,\n+            \"LE\" => LE,\n+            \"LIT_BINARY\" => LIT_BINARY(Name(0)),\n+            \"LIT_BINARY_RAW\" => LIT_BINARY_RAW(Name(0), 0),\n+            _ => continue\n+        };\n+\n+        res.insert(num.to_string(), tok);\n+    }\n+\n+    debug!(\"Token map: {}\", res);\n+    res\n+}\n+\n+fn str_to_binop(s: &str) -> BinOp {\n+    match s {\n+        \"+\" => PLUS,\n+        \"/\" => SLASH,\n+        \"-\" => MINUS,\n+        \"*\" => STAR,\n+        \"%\" => PERCENT,\n+        \"^\" => CARET,\n+        \"&\" => AND,\n+        \"|\" => OR,\n+        \"<<\" => SHL,\n+        \">>\" => SHR,\n+        _ => fail!(\"Bad binop str `{}`\", s)\n+    }\n+}\n+\n+/// Assuming a string/binary literal, strip out the leading/trailing\n+/// hashes and surrounding quotes/raw/binary prefix.\n+fn fix(mut lit: &str) -> ast::Name {\n+    if lit.char_at(0) == 'r' {\n+        if lit.char_at(1) == 'b' {\n+            lit = lit.slice_from(2)\n+        } else {\n+            lit = lit.slice_from(1);\n+        }\n+    } else if lit.char_at(0) == 'b' {\n+        lit = lit.slice_from(1);\n+    }\n+\n+    let leading_hashes = count(lit);\n+\n+    // +1/-1 to adjust for single quotes\n+    parse::token::intern(lit.slice(leading_hashes + 1, lit.len() - leading_hashes - 1))\n+}\n+\n+/// Assuming a char/byte literal, strip the 'b' prefix and the single quotes.\n+fn fixchar(mut lit: &str) -> ast::Name {\n+    if lit.char_at(0) == 'b' {\n+        lit = lit.slice_from(1);\n+    }\n+\n+    parse::token::intern(lit.slice(1, lit.len() - 1))\n+}\n+\n+fn count(lit: &str) -> uint {\n+    lit.chars().take_while(|c| *c == '#').count()\n+}\n+\n+fn parse_antlr_token(s: &str, tokens: &HashMap<String, Token>) -> TokenAndSpan {\n+    let re = regex!(\n+      r\"\\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\"\n+    );\n+\n+    let m = re.captures(s).expect(format!(\"The regex didn't match {}\", s).as_slice());\n+    let start = m.name(\"start\");\n+    let end = m.name(\"end\");\n+    let toknum = m.name(\"toknum\");\n+    let content = m.name(\"content\");\n+\n+    let proto_tok = tokens.find_equiv(&toknum).expect(format!(\"didn't find token {} in the map\",\n+                                                              toknum).as_slice());\n+\n+    let nm = parse::token::intern(content);\n+\n+    debug!(\"What we got: content (`{}`), proto: {}\", content, proto_tok);\n+\n+    let real_tok = match *proto_tok {\n+        BINOP(..) => BINOP(str_to_binop(content)),\n+        BINOPEQ(..) => BINOPEQ(str_to_binop(content.slice_to(content.len() - 1))),\n+        LIT_STR(..) => LIT_STR(fix(content)),\n+        LIT_STR_RAW(..) => LIT_STR_RAW(fix(content), count(content)),\n+        LIT_CHAR(..) => LIT_CHAR(fixchar(content)),\n+        LIT_BYTE(..) => LIT_BYTE(fixchar(content)),\n+        DOC_COMMENT(..) => DOC_COMMENT(nm),\n+        LIT_INTEGER(..) => LIT_INTEGER(nm),\n+        LIT_FLOAT(..) => LIT_FLOAT(nm),\n+        LIT_BINARY(..) => LIT_BINARY(nm),\n+        LIT_BINARY_RAW(..) => LIT_BINARY_RAW(fix(content), count(content)),\n+        IDENT(..) => IDENT(ast::Ident { name: nm, ctxt: 0 }, true),\n+        LIFETIME(..) => LIFETIME(ast::Ident { name: nm, ctxt: 0 }),\n+        ref t => t.clone()\n+    };\n+\n+    let offset = if real_tok == EOF {\n+        1\n+    } else {\n+        0\n+    };\n+\n+    let sp = syntax::codemap::Span {\n+        lo: syntax::codemap::BytePos(from_str::<u32>(start).unwrap() - offset),\n+        hi: syntax::codemap::BytePos(from_str::<u32>(end).unwrap() + 1),\n+        expn_info: None\n+    };\n+\n+    TokenAndSpan {\n+        tok: real_tok,\n+        sp: sp\n+    }\n+}\n+\n+fn tok_cmp(a: &Token, b: &Token) -> bool {\n+    match a {\n+        &IDENT(id, _) => match b {\n+                &IDENT(id2, _) => id == id2,\n+                _ => false\n+        },\n+        _ => a == b\n+    }\n+}\n+\n+fn main() {\n+    fn next(r: &mut lexer::StringReader) -> TokenAndSpan {\n+        use syntax::parse::lexer::Reader;\n+        r.next_token()\n+    }\n+\n+    let args = std::os::args();\n+\n+    let mut token_file = File::open(&Path::new(args.get(2).as_slice()));\n+    let token_map = parse_token_list(token_file.read_to_string().unwrap().as_slice());\n+\n+    let mut stdin = std::io::stdin();\n+    let mut antlr_tokens = stdin.lines().map(|l| parse_antlr_token(l.unwrap().as_slice().trim(),\n+                                                                   &token_map));\n+\n+    let code = File::open(&Path::new(args.get(1).as_slice())).unwrap().read_to_string().unwrap();\n+    let options = config::basic_options();\n+    let session = session::build_session(options, None,\n+                                         syntax::diagnostics::registry::Registry::new([]));\n+    let filemap = parse::string_to_filemap(&session.parse_sess,\n+                                           code,\n+                                           String::from_str(\"<n/a>\"));\n+    let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n+\n+    for antlr_tok in antlr_tokens {\n+        let rustc_tok = next(&mut lexer);\n+        if rustc_tok.tok == EOF && antlr_tok.tok == EOF {\n+            continue\n+        }\n+\n+        assert!(rustc_tok.sp == antlr_tok.sp, \"{} and {} have different spans\", rustc_tok,\n+                antlr_tok);\n+\n+        macro_rules! matches (\n+            ( $($x:pat),+ ) => (\n+                match rustc_tok.tok {\n+                    $($x => match antlr_tok.tok {\n+                        $x => {\n+                            if !tok_cmp(&rustc_tok.tok, &antlr_tok.tok) {\n+                                // FIXME #15677: needs more robust escaping in\n+                                // antlr\n+                                warn!(\"Different names for {} and {}\", rustc_tok, antlr_tok);\n+                            }\n+                        }\n+                        _ => fail!(\"{} is not {}\", antlr_tok, rustc_tok)\n+                    },)*\n+                    ref c => assert!(c == &antlr_tok.tok, \"{} is not {}\", rustc_tok, antlr_tok)\n+                }\n+            )\n+        )\n+\n+        matches!(LIT_BYTE(..),\n+            LIT_CHAR(..),\n+            LIT_INTEGER(..),\n+            LIT_FLOAT(..),\n+            LIT_STR(..),\n+            LIT_STR_RAW(..),\n+            LIT_BINARY(..),\n+            LIT_BINARY_RAW(..),\n+            IDENT(..),\n+            LIFETIME(..),\n+            INTERPOLATED(..),\n+            DOC_COMMENT(..),\n+            SHEBANG(..)\n+        );\n+    }\n+}"}, {"sha": "7168af89b59ea36f600068c14b75ee559bd28299", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n /*!\n  * Implementation of SipHash 2-4"}, {"sha": "6c3c8437e255a6c8845700a3c522c3163cfc77c3", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -155,7 +155,7 @@ impl<'a, T: Clone, V: Vector<T>> VectorVector<T> for &'a [V] {\n /// a sequence of all possible permutations for an indexed sequence of\n /// elements. Each permutation is only a single swap apart.\n ///\n-/// The Steinhaus\u2013Johnson\u2013Trotter algorithm is used.\n+/// The Steinhaus-Johnson-Trotter algorithm is used.\n ///\n /// Generates even and odd permutations alternately.\n ///"}, {"sha": "48bc492e25ce4d591ed6af22fa8d52ba6ad7d2c9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n /*!\n "}, {"sha": "b19bef685901fdea57a3e136bcade71c34e18646", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! An owned, growable string that enforces that its contents are valid UTF-8.\n "}, {"sha": "3ffc1d5e11c7371dfe41667fe788a11900ad2e4b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! Numeric traits and functions for generic mathematics\n "}, {"sha": "37af64d74d414334b82129995f1d9c0c43ac6222", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! String manipulation\n //!"}, {"sha": "ebc6e9862288090408db96e27825f8e65aec56a2", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n use core::char::{escape_unicode, escape_default};\n "}, {"sha": "96b9a6a13923cf94e14baec68a516181fffaa799", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15677\n \n //! Simple getopt alternative.\n //!"}, {"sha": "4cce430d88a8d3522e1e75e776a64ab1a29cd97b", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // FIXME: this file probably shouldn't exist\n+// ignore-lexer-test FIXME #15677\n \n #![macro_escape]\n "}, {"sha": "e98fe1e20b19e7be92cf6a9266e5103abf964fb7", "filename": "src/libnative/io/tty_win32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibnative%2Fio%2Ftty_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibnative%2Fio%2Ftty_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftty_win32.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-lexer-test FIXME #15877\n+\n //! Windows specific console TTY implementation\n //!\n //! This module contains the implementation of a Windows specific console TTY."}, {"sha": "7b6e94eaa92092ab5af560e8040bce1f56ea2778", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! The Gamma and derived distributions.\n "}, {"sha": "fae3e5986806d6ce0431f83257c08e73768c2a65", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! This crate provides a native implementation of regular expressions that is\n //! heavily based on RE2 both in syntax and in implementation. Notably,"}, {"sha": "48065992bb050f525dd7133f54402f23d8546f5c", "filename": "src/libregex/test/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibregex%2Ftest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibregex%2Ftest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Ftests.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n+// ignore-lexer-test FIXME #15679\n \n use regex::{Regex, NoExpand};\n "}, {"sha": "1334000ed1f5c7ffb59bc619dc2a8a31557b00c9", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15677\n \n use core::prelude::*;\n "}, {"sha": "5e8648d355ebfd025fcd35a69d0492a009c2a167", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! Base64 binary-to-text encoding\n use std::str;"}, {"sha": "d6a029c583cd25e896554f9d1fd9f9c75dc39bcd", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! Hex binary-to-text encoding\n use std::str;"}, {"sha": "02cb5dd245b7cbdf3b852f43e9d0be60523899ed", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! Operations on ASCII strings and characters\n "}, {"sha": "a05fad3705dd54ce28b367d1325b9bca36492679", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n //! Unordered containers, implemented as hash-tables (`HashSet` and `HashMap` types)\n "}, {"sha": "2182c43d4a0c2b9209479663950d804bba0aea96", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n /*!\n "}, {"sha": "e25006a7b39521889e320ef5f99723b520beee47", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n //! Buffering wrappers for I/O traits\n "}, {"sha": "afd88ee0ed91b05d93369480c508eb5e1ae7a08d", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n /*! Synchronous File I/O\n "}, {"sha": "b93b84b7d63f3a6dc5eedb524f8bf6f5629e88ac", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! Readers and Writers for in-memory buffers\n "}, {"sha": "4277b509962cca1bdd14df052d03c2c0ab71cc4f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n // FIXME: cover these topics:\n //        path, reader, writer, stream, raii (close not needed),"}, {"sha": "cc30acf064b8257fac2db9f8b0907684d0c5a6f0", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n #![allow(missing_doc)]\n "}, {"sha": "4a6ed5612334c5bf9c4ebd87d928bf79fdf28410", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n //! Windows file path handling\n "}, {"sha": "2f30108c27bd118bc9f955760443665aebeff0c0", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n /*!\n "}, {"sha": "509d5bd442182e78b1c1cc3b1c7032ffe57bea54", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n //! This is an Earley-like parser, without support for in-grammar nonterminals,\n //! only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "53e6bdc5641bb62580b6ddd25b5357387ee23d04", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -205,28 +205,28 @@ pub fn tzset() {\n /// also called a broken-down time value.\n #[deriving(Clone, PartialEq, Show)]\n pub struct Tm {\n-    /// Seconds after the minute \u2013 [0, 60]\n+    /// Seconds after the minute - [0, 60]\n     pub tm_sec: i32,\n \n-    /// Minutes after the hour \u2013 [0, 59]\n+    /// Minutes after the hour - [0, 59]\n     pub tm_min: i32,\n \n-    /// Hours after midnight \u2013 [0, 23]\n+    /// Hours after midnight - [0, 23]\n     pub tm_hour: i32,\n \n-    /// Day of the month \u2013 [1, 31]\n+    /// Day of the month - [1, 31]\n     pub tm_mday: i32,\n \n-    /// Months since January \u2013 [0, 11]\n+    /// Months since January - [0, 11]\n     pub tm_mon: i32,\n \n     /// Years since 1900\n     pub tm_year: i32,\n \n-    /// Days since Sunday \u2013 [0, 6]. 0 = Sunday, 1 = Monday, \u2026, 6 = Saturday.\n+    /// Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.\n     pub tm_wday: i32,\n \n-    /// Days since January 1 \u2013 [0, 365]\n+    /// Days since January 1 - [0, 365]\n     pub tm_yday: i32,\n \n     /// Daylight Saving Time flag.\n@@ -240,7 +240,7 @@ pub struct Tm {\n     /// for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.\n     pub tm_gmtoff: i32,\n \n-    /// Nanoseconds after the second \u2013 [0, 10<sup>9</sup> - 1]\n+    /// Nanoseconds after the second - [0, 10<sup>9</sup> - 1]\n     pub tm_nsec: i32,\n }\n "}, {"sha": "2e656a5a420d340d4fee7ca83eedb3caaad23b44", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n /*!\n  * Unicode-intensive string manipulations."}, {"sha": "9af3c0c6c8c1a8eaa27cbf765e3509cee164aac3", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-lexer-test FIXME #15679\n // Microbenchmarks for various functions in std and extra\n \n #![feature(macro_rules)]"}, {"sha": "a0ff7736b5c7f8ec8a15b7512b9e094dccd8d8d6", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -16,6 +16,7 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n // no-pretty-expanded FIXME #15189\n+// ignore-lexer-test FIXME #15679\n \n extern crate time;\n "}, {"sha": "6512ecfb3e26063e618a6bbf4b9d2a15e4331c62", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -16,6 +16,7 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n // no-pretty-expanded FIXME #15189\n+// ignore-lexer-test FIXME #15679\n \n extern crate time;\n "}, {"sha": "bdca03490369ac200e3b5cedefe096b07d02216c", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -10,6 +10,7 @@\n \n // Multi-language Perlin noise benchmark.\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n+// ignore-lexer-test FIXME #15679\n \n use std::f32::consts::PI;\n use std::rand::{Rng, StdRng};"}, {"sha": "ef908fdd016f994ba862146e4398f317af2039ee", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -14,6 +14,7 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n+// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "06ee3715eb0440353d395dc547c5c991e408191b", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -14,6 +14,7 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n+// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "7fd7e3dbf0045a502bb7718b3726c5f68a1af131", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n \n static FOO: u8 = b'\\xF0';"}, {"sha": "1b2b17f99171bc6731ca5f56b00e23fd5a5d5ee0", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n \n // Tests that we can call a function bounded over a supertrait from"}, {"sha": "fabcfc5ff3347966c7e492f69871a0713615a397", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // no-pretty-expanded unnecessary unsafe block generated\n+// ignore-lexer-test FIXME #15679\n \n #![feature(macro_rules, managed_boxes)]\n #![deny(warnings)]"}, {"sha": "f68ba5dab8ae2756d45c25677b13057075fddbe5", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     let x = 1i;"}, {"sha": "0efe64448c3d04f4ba27c7e35c6ef14703b8b63c", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n // Tests that match expression handles overlapped literal and range\n // properly in the presence of guard function."}, {"sha": "974905487fe2dd09bb36c4a491dd28a53c79281a", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-test\n+// ignore-lexer-test FIXME #15881\n \n // notes on this test case:\n // On Thu, Apr 18, 2013-2014 at 6:30 PM, John Clements <clements@brinckerhoff.org> wrote:"}, {"sha": "c52dd5ce5e4e34aca6dbb7f81d517e4588413237", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -8,6 +8,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n #![feature(unsafe_destructor)]\n "}, {"sha": "e6c816666e798247c1c506720060f7969c5dbb3f", "filename": "src/test/run-pass/issue-3683.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3683.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n \n trait Foo {"}, {"sha": "ce2f488b90c7b6adf7bde9917ce62b05cdc1b26a", "filename": "src/test/run-pass/issue-4759-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n trait U { fn f(self); }\n impl U for int { fn f(self) {} }"}, {"sha": "bd892465054693419c406a0e2d936d12d7a108b8", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n type FontTableTag = u32;\n "}, {"sha": "511b8a9683060279c66d555a905731b1372c54a8", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n trait Fooable {\n     fn yes(self);"}, {"sha": "421ae8e94972e8c68d6a2c9643af31a694cb6d6f", "filename": "src/test/run-pass/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -16,6 +16,7 @@\n // this directory should enforce it.\r\n \r\n // ignore-pretty\r\n+// ignore-lexer-test FIXME #15882\r\n \r\n /// Doc comment that ends in CRLF\r\n pub fn foo() {}\r"}, {"sha": "36c663fc847463b6c116dea8bd2e14020ca22b2b", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n \n #![forbid(non_camel_case_types)]"}, {"sha": "8b782520536a0138b61df97dd447e79db6ca8975", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     match 5u {"}, {"sha": "77084836408aa199af670910c757d767d9d6156e", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n // Test that multibyte characters don't crash the compiler\n pub fn main() {"}, {"sha": "35e863d05a177dd06262b4d4302b5f40886ed0aa", "filename": "src/test/run-pass/raw-str.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fraw-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fraw-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-str.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176"}, {"sha": "bd3181842ec5dded890fa8b2a98bd7e9f777e1ac", "filename": "src/test/run-pass/shebang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fshebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fshebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshebang.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -10,5 +10,7 @@\n // except according to those terms.\n \n // ignore-pretty: `expand` addes some preludes before shebang\n+//\n+// ignore-lexer-test FIXME #15878\n \n pub fn main() { println!(\"Hello World\"); }"}, {"sha": "3e41b6d806cdc0fdec1936a5e94b6aae681ee9f3", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15883\n \n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n pub struct Floats { a: f64, b: u8, c: f64 }"}, {"sha": "9b910d24bdc5fec1d872af8c4d50516f1be9e6a6", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,7 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+//\n+// ignore-lexer-test FIXME #15883\n \n \n trait to_str {"}, {"sha": "ec9f666eb198dbd8db3f3adc7c416de9d0a75d85", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n pub trait Clone2 {\n     /// Returns a copy of the value. The contents of owned pointers"}, {"sha": "270b95452187a309da9a009ca4ac3cbdb327a9c9", "filename": "src/test/run-pass/traits-default-method-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "474632a7ffa58028e80bd8d5100ebc4013c15ac0", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "0530c8a6ab3dd48fd0b816357631e7604f07c6ec", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15879\n \n // Test syntax checks for `Sized?` syntax.\n "}, {"sha": "ada4da37ba11376ffaed1fc303aabee38bbffebc", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15879\n #![feature(struct_variant)]\n \n "}, {"sha": "baa4e941ff097432389c287c30131ffee1533f2a", "filename": "src/test/run-pass/utf8-bom.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8-bom.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n // This file has utf-8 BOM, it should be compiled normally without error.\n "}, {"sha": "a52828387bf9245e05df717655af58eb1f313a46", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,7 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+//\n+// ignore-lexer-test FIXME #15679\n // no-pretty-expanded FIXME #15189\n \n pub fn main() {"}, {"sha": "30f6f4b464e4c9d9c1567bb11bb1adca7e3d6f49", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n use std::str;\n "}, {"sha": "f6c4776a11cc810eb9c2845cc4063e008db8b499", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d43e4474aba98d99e2778dcdcd5b0515b7b8176/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=8d43e4474aba98d99e2778dcdcd5b0515b7b8176", "patch": "@@ -7,6 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n \n \n #![feature(non_ascii_idents)]"}]}