{"sha": "9a44448a252a94bf6b99388cab82aa9cd4595207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDQ0NDhhMjUyYTk0YmY2Yjk5Mzg4Y2FiODJhYTljZDQ1OTUyMDc=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-18T17:33:36Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-18T17:33:36Z"}, "message": "add simd_select intrinsic", "tree": {"sha": "20f91c521cbb24aa198dfffa7a21e7ad2a54272d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f91c521cbb24aa198dfffa7a21e7ad2a54272d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a44448a252a94bf6b99388cab82aa9cd4595207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a44448a252a94bf6b99388cab82aa9cd4595207", "html_url": "https://github.com/rust-lang/rust/commit/9a44448a252a94bf6b99388cab82aa9cd4595207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a44448a252a94bf6b99388cab82aa9cd4595207/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa27ee30972f16320ae4a8887c8f54616fff819", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa27ee30972f16320ae4a8887c8f54616fff819", "html_url": "https://github.com/rust-lang/rust/commit/8aa27ee30972f16320ae4a8887c8f54616fff819"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "76c5bf56daa9fca74a4eafc3dd52400e893fc7d0", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=9a44448a252a94bf6b99388cab82aa9cd4595207", "patch": "@@ -1153,6 +1153,27 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n         return Ok(bx.extract_element(args[0].immediate(), args[1].immediate()))\n     }\n \n+    if name == \"simd_select\" {\n+        let m_elem_ty = in_elem;\n+        let m_len = in_len;\n+        let v_len = arg_tys[1].simd_size(tcx);\n+        require!(m_len == v_len,\n+                 \"mismatched lengths: mask length `{}` != other vector length `{}`\",\n+                 m_len, v_len\n+        );\n+        match m_elem_ty.sty {\n+            ty::TyInt(_) => {},\n+            _ => {\n+                return_error!(\"mask element type is `{}`, expected `i_`\", m_elem_ty);\n+            }\n+        }\n+        // truncate the mask to a vector of i1s\n+        let i1 = Type::i1(bx.cx);\n+        let i1xn = Type::vector(&i1, m_len as u64);\n+        let m_i1s = bx.trunc(args[0].immediate(), i1xn);\n+        return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n+    }\n+\n     macro_rules! arith_red {\n         ($name:tt : $integer_reduce:ident, $float_reduce:ident, $ordered:expr) => {\n             if name == $name {"}, {"sha": "84c9339be0ad41bbda2a1af45b36cbb324ac1298", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=9a44448a252a94bf6b99388cab82aa9cd4595207", "patch": "@@ -361,6 +361,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         \"simd_extract\" => (2, vec![param(0), tcx.types.u32], param(1)),\n         \"simd_cast\" => (2, vec![param(0)], param(1)),\n+        \"simd_select\" => (2, vec![param(0), param(1), param(1)], param(1)),\n         \"simd_reduce_all\" | \"simd_reduce_any\" => (1, vec![param(0)], tcx.types.bool),\n         \"simd_reduce_add_ordered\" | \"simd_reduce_mul_ordered\"\n             => (2, vec![param(0), param(1)], param(1)),"}, {"sha": "d74d6815d5f5e282645d97d4275484e6ba2cc397", "filename": "src/test/compile-fail/simd-intrinsic-generic-select.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs?ref=9a44448a252a94bf6b99388cab82aa9cd4595207", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the simd_select intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq)]\n+struct b8x4(pub i8, pub i8, pub i8, pub i8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq)]\n+struct b8x8(pub i8, pub i8, pub i8, pub i8,\n+            pub i8, pub i8, pub i8, pub i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+}\n+\n+fn main() {\n+    let m4 = b8x4(0, 0, 0, 0);\n+    let m8 = b8x8(0, 0, 0, 0, 0, 0, 0, 0);\n+    let x = u32x4(0, 0, 0, 0);\n+    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n+\n+    unsafe {\n+        simd_select(m4, x, x);\n+\n+        simd_select(m8, x, x);\n+        //~^ ERROR mismatched lengths: mask length `8` != other vector length `4`\n+\n+        simd_select(x, x, x);\n+        //~^ ERROR mask element type is `u32`, expected `i_`\n+\n+        simd_select(z, z, z);\n+        //~^ ERROR mask element type is `f32`, expected `i_`\n+    }\n+}"}, {"sha": "bf0a59309ca297d7c687e6029de4918442556a84", "filename": "src/test/run-pass/simd-intrinsic-generic-select.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a44448a252a94bf6b99388cab82aa9cd4595207/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs?ref=9a44448a252a94bf6b99388cab82aa9cd4595207", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the simd_select intrinsics produces correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct i32x4(pub i32, pub i32, pub i32, pub i32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct b8x4(pub i8, pub i8, pub i8, pub i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+}\n+\n+fn main() {\n+    let m0 = b8x4(!0, !0, !0, !0);\n+    let m1 = b8x4(0, 0, 0, 0);\n+    let m2 = b8x4(!0, !0, 0, 0);\n+    let m3 = b8x4(0, 0, !0, !0);\n+    let m4 = b8x4(!0, 0, !0, 0);\n+\n+    unsafe {\n+        let a = i32x4(1, -2, 3, 4);\n+        let b = i32x4(5, 6, -7, 8);\n+\n+        let r: i32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m2, a, b);\n+        let e = i32x4(1, -2, -7, 8);\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m3, a, b);\n+        let e = i32x4(5, 6, 3, 4);\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m4, a, b);\n+        let e = i32x4(1, 6, 3, 8);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let a = u32x4(1, 2, 3, 4);\n+        let b = u32x4(5, 6, 7, 8);\n+\n+        let r: u32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m2, a, b);\n+        let e = u32x4(1, 2, 7, 8);\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m3, a, b);\n+        let e = u32x4(5, 6, 3, 4);\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m4, a, b);\n+        let e = u32x4(1, 6, 3, 8);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let a = f32x4(1., 2., 3., 4.);\n+        let b = f32x4(5., 6., 7., 8.);\n+\n+        let r: f32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m2, a, b);\n+        let e = f32x4(1., 2., 7., 8.);\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m3, a, b);\n+        let e = f32x4(5., 6., 3., 4.);\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m4, a, b);\n+        let e = f32x4(1., 6., 3., 8.);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let t = !0 as i8;\n+        let f = 0 as i8;\n+        let a = b8x4(t, f, t, f);\n+        let b = b8x4(f, f, f, t);\n+\n+        let r: b8x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m2, a, b);\n+        let e = b8x4(t, f, f, t);\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m3, a, b);\n+        let e = b8x4(f, f, t, f);\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m4, a, b);\n+        let e = b8x4(t, f, t, t);\n+        assert_eq!(r, e);\n+    }\n+}"}]}