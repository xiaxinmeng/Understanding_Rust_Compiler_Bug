{"sha": "add9ee24db86ea25a286fbd604f1ba8aadf90969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDllZTI0ZGI4NmVhMjVhMjg2ZmJkNjA0ZjFiYThhYWRmOTA5Njk=", "commit": {"author": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-08-26T17:34:40Z"}, "committer": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-09-03T18:02:35Z"}, "message": "Keep lines shorter than 100 characters", "tree": {"sha": "7e8671f3634aeb12bf7899be32acbae8d7a39ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8671f3634aeb12bf7899be32acbae8d7a39ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add9ee24db86ea25a286fbd604f1ba8aadf90969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add9ee24db86ea25a286fbd604f1ba8aadf90969", "html_url": "https://github.com/rust-lang/rust/commit/add9ee24db86ea25a286fbd604f1ba8aadf90969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add9ee24db86ea25a286fbd604f1ba8aadf90969/comments", "author": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb8d94cd99856f44c24e65b8ebc7ce3bde9a4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb8d94cd99856f44c24e65b8ebc7ce3bde9a4ea", "html_url": "https://github.com/rust-lang/rust/commit/4eb8d94cd99856f44c24e65b8ebc7ce3bde9a4ea"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "ac34de490bba2546d42b3e035dc3bd2afc1b0037", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=add9ee24db86ea25a286fbd604f1ba8aadf90969", "patch": "@@ -112,7 +112,11 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n }\n \n impl<'a, 'mir, 'tcx: 'mir> HashStable<StableHashingContext<'a>> for Frame<'mir, 'tcx> {\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher<W>) {\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>) {\n+\n         let Frame {\n             mir,\n             instance,\n@@ -142,7 +146,10 @@ pub enum StackPopCleanup {\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for StackPopCleanup {\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'b>, hasher: &mut StableHasher<W>) {\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>) {\n         match self {\n             StackPopCleanup::Goto(ref block) => block.hash_stable(hcx, hasher),\n             StackPopCleanup::None { cleanup } => cleanup.hash_stable(hcx, hasher),"}, {"sha": "0d165ef4803e764d3b5b1ab274a9deef55ce3131", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=add9ee24db86ea25a286fbd604f1ba8aadf90969", "patch": "@@ -59,7 +59,10 @@ pub enum Place<Id=AllocId> {\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for Place {\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher<W>) {\n+    fn hash_stable<W: StableHasherResult>(\n+        &self, hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>) {\n+\n         match self {\n             Place::Ptr(mem_place) => mem_place.hash_stable(hcx, hasher),\n "}, {"sha": "72cc6220470da761a93b6761379a9b250c433661", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add9ee24db86ea25a286fbd604f1ba8aadf90969/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=add9ee24db86ea25a286fbd604f1ba8aadf90969", "patch": "@@ -2,7 +2,10 @@ use std::hash::{Hash, Hasher};\n \n use rustc::ich::{StableHashingContext, StableHashingContextProvider};\n use rustc::mir;\n-use rustc::mir::interpret::{AllocId, Pointer, Scalar, ScalarMaybeUndef, Relocations, Allocation, UndefMask};\n+use rustc::mir::interpret::{\n+    AllocId, Pointer, Scalar, ScalarMaybeUndef, Relocations, Allocation, UndefMask\n+};\n+\n use rustc::ty;\n use rustc::ty::layout::Align;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -29,7 +32,10 @@ macro_rules! __impl_snapshot_field {\n \n macro_rules! impl_snapshot_for {\n     // FIXME(mark-i-m): Some of these should be `?` rather than `*`.\n-    (enum $enum_name:ident { $( $variant:ident $( ( $($field:ident $(-> $delegate:expr)*),* ) )* ),* $(,)* }) => {\n+    (enum $enum_name:ident {\n+        $( $variant:ident $( ( $($field:ident $(-> $delegate:expr)*),* ) )* ),* $(,)*\n+    }) => {\n+\n         impl<'a, Ctx> self::Snapshot<'a, Ctx> for $enum_name\n             where Ctx: self::SnapshotContext<'a>,\n         {\n@@ -40,7 +46,9 @@ macro_rules! impl_snapshot_for {\n                 match *self {\n                     $(\n                         $enum_name::$variant $( ( $(ref $field),* ) )* =>\n-                            $enum_name::$variant $( ( $( __impl_snapshot_field!($field, __ctx $(, $delegate)*) ),* ), )*\n+                            $enum_name::$variant $(\n+                                ( $( __impl_snapshot_field!($field, __ctx $(, $delegate)*) ),* ),\n+                            )*\n                     )*\n                 }\n             }\n@@ -165,7 +173,9 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Relocations\n     type Item = Relocations<AllocIdSnapshot<'a>>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n-        Relocations::from_presorted(self.iter().map(|(size, id)| (*size, id.snapshot(ctx))).collect())\n+        Relocations::from_presorted(self.iter()\n+            .map(|(size, id)| (*size, id.snapshot(ctx)))\n+            .collect())\n     }\n }\n \n@@ -268,15 +278,20 @@ pub struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n {\n-    pub fn new(machine: &M, memory: &Memory<'a, 'mir, 'tcx, M>, stack: &[Frame<'mir, 'tcx>]) -> Self {\n+    pub fn new(\n+        machine: &M,\n+        memory: &Memory<'a, 'mir, 'tcx, M>,\n+        stack: &[Frame<'mir, 'tcx>]) -> Self {\n+\n         EvalSnapshot {\n             machine: machine.clone(),\n             memory: memory.clone(),\n             stack: stack.into(),\n         }\n     }\n \n-    fn snapshot<'b: 'a>(&'b self) -> (&'b M, MemorySnapshot<'b, 'mir, 'tcx, M>, Vec<FrameSnapshot<'a, 'tcx>>) {\n+    fn snapshot<'b: 'a>(&'b self)\n+        -> (&'b M, MemorySnapshot<'b, 'mir, 'tcx, M>, Vec<FrameSnapshot<'a, 'tcx>>) {\n         let EvalSnapshot{ machine, memory, stack } = self;\n         (&machine, memory.snapshot(), stack.iter().map(|frame| frame.snapshot(memory)).collect())\n     }\n@@ -294,10 +309,15 @@ impl<'a, 'mir, 'tcx, M> Hash for EvalSnapshot<'a, 'mir, 'tcx, M>\n     }\n }\n \n-impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>> for EvalSnapshot<'a, 'mir, 'tcx, M>\n+impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>>\n+    for EvalSnapshot<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n {\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'b>, hasher: &mut StableHasher<W>) {\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'b>,\n+        hasher: &mut StableHasher<W>) {\n+\n         let EvalSnapshot{ machine, memory, stack } = self;\n         (machine, &memory.data, stack).hash_stable(hcx, hasher);\n     }"}]}