{"sha": "4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDI1Nzk1MzNiODFlM2U1ZGQwYjQ4ZDIyY2I4NTBjNWZkOWFiYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-24T08:27:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-24T08:27:38Z"}, "message": "Auto merge of #1019 - RalfJung:rustup, r=RalfJung\n\nrustup: more flexible write_bytes\n\navoids allocations and removes itertools dependency", "tree": {"sha": "6b530886b8372c356065462837c58c26834f290a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b530886b8372c356065462837c58c26834f290a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "html_url": "https://github.com/rust-lang/rust/commit/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05f2aa3ab6caddd2fde2a823bcee63a16b6dd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05f2aa3ab6caddd2fde2a823bcee63a16b6dd6c", "html_url": "https://github.com/rust-lang/rust/commit/a05f2aa3ab6caddd2fde2a823bcee63a16b6dd6c"}, {"sha": "c87f106cacf70611b37edd31c44fa133034b22ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87f106cacf70611b37edd31c44fa133034b22ed", "html_url": "https://github.com/rust-lang/rust/commit/c87f106cacf70611b37edd31c44fa133034b22ed"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "1aa15f8b6846a50f421b1e1164341a55c2b13914", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -215,11 +215,6 @@ dependencies = [\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"either\"\n-version = \"1.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n@@ -299,14 +294,6 @@ dependencies = [\n  \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"itertools\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"itoa\"\n version = \"0.4.4\"\n@@ -365,7 +352,6 @@ dependencies = [\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -849,7 +835,6 @@ dependencies = [\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum directories 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"551a778172a450d7fc12e629ca3b0428d00f6afa9a43da1b630d54604e97371c\"\n \"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n-\"checksum either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n \"checksum failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n@@ -859,7 +844,6 @@ dependencies = [\n \"checksum getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n-\"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\""}, {"sha": "6e317ce9459704460419664c95813efb0ea2d637", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -40,7 +40,6 @@ log = \"0.4\"\n shell-escape = \"0.1.4\"\n hex = \"0.3.2\"\n rand = \"0.7\"\n-itertools = \"0.8\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "543d4e269d410c996b0ef876ad567f8b3d59bcc8", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -1 +1 @@\n-f466f52c1bf8f2e4454e31c683a88625ad4b4033\n+55e00631e5bc5b16d40232914e57deeea197a8e4"}, {"sha": "dd0530cf48b4e7970dbed0f3fdb681ca004879b9", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -1,4 +1,4 @@\n-use std::mem;\n+use std::{mem, iter};\n use std::ffi::{OsStr, OsString};\n \n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -379,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 _ => throw_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n             })?\n         } else {\n-            // FIXME: we have to implement the windows' equivalent of this.\n+            // FIXME: we have to implement the Windows equivalent of this.\n             throw_unsup_format!(\"Setting the last OS error from an io::Error is unsupported for {}.\", target.target_os)\n         };\n         this.set_last_error(last_error)\n@@ -390,7 +390,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// `Ok(-1)` and sets the last OS error accordingly.\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n+    /// functions return different integer types (like `read`, that returns an `i64`).\n     fn try_unwrap_io_result<T: From<i32>>(\n         &mut self,\n         result: std::io::Result<T>,\n@@ -423,12 +423,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n-        // terminator to memory using the `ptr` pointer would cause an overflow.\n+        // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         if size <= bytes.len() as u64 {\n             return Ok(false);\n         }\n-        // FIXME: We should use `Iterator::chain` instead when rust-lang/rust#65704 lands.\n-        self.eval_context_mut().memory.write_bytes(scalar, [bytes, &[0]].concat())?;\n+        self.eval_context_mut().memory.write_bytes(scalar, bytes.iter().copied().chain(iter::once(0u8)))?;\n         Ok(true)\n     }\n }"}, {"sha": "a60bc8c0b13d16df1c81d4c0f8166e0d9d985d99", "filename": "src/operator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryFrom;\n+\n use rustc::ty::{Ty, layout::LayoutOf};\n use rustc::mir;\n \n@@ -117,8 +119,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         pointee_ty: Ty<'tcx>,\n         offset: i64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n-        // FIXME: assuming here that type size is less than `i64::max_value()`.\n-        let pointee_size = self.layout_of(pointee_ty)?.size.bytes() as i64;\n+        let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n         let offset = offset\n             .checked_mul(pointee_size)\n             .ok_or_else(|| err_panic!(Overflow(mir::BinOp::Mul)))?;"}, {"sha": "dea01c63a05b9fb61052c4636d75235f7585c427", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -1,4 +1,4 @@\n-use std::convert::TryInto;\n+use std::{iter, convert::TryInto};\n \n use rustc::hir::def_id::DefId;\n use rustc::mir;\n@@ -52,7 +52,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if zero_init {\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n-                    .write_bytes(ptr.into(), itertools::repeat_n(0u8, size as usize))\n+                    .write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize))\n                     .unwrap();\n             }\n             Scalar::Ptr(ptr)\n@@ -227,7 +227,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 );\n                 // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n-                    .write_bytes(ptr.into(), itertools::repeat_n(0u8, size as usize))\n+                    .write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize))\n                     .unwrap();\n                 this.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n@@ -839,7 +839,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let system_info = this.deref_operand(args[0])?;\n                 // Initialize with `0`.\n                 this.memory\n-                    .write_bytes(system_info.ptr, itertools::repeat_n(0, system_info.layout.size.bytes() as usize))?;\n+                    .write_bytes(system_info.ptr, iter::repeat(0u8).take(system_info.layout.size.bytes() as usize))?;\n                 // Set number of processors.\n                 let dword_size = Size::from_bytes(4);\n                 let num_cpus = this.mplace_field(system_info, 6)?;"}, {"sha": "c484795d8fec71773ddb71c79b71afa982d0bc78", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -95,7 +95,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path: std::path::PathBuf = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?.into();\n+        let path = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;"}, {"sha": "5ef7fba7f59083b093902b40a094b4b2fe851d95", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42579533b81e3e5dd0b48d22cb850c5fd9abbb/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=4b42579533b81e3e5dd0b48d22cb850c5fd9abbb", "patch": "@@ -1,3 +1,5 @@\n+use std::iter;\n+\n use rustc_apfloat::Float;\n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n@@ -357,7 +359,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n                             mplace.meta.unwrap_none(); // must be sized\n-                            this.memory.write_bytes(mplace.ptr, itertools::repeat_n(0, dest.layout.size.bytes() as usize))?;\n+                            this.memory.write_bytes(mplace.ptr, iter::repeat(0u8).take(dest.layout.size.bytes() as usize))?;\n                         }\n                     }\n                 }\n@@ -562,7 +564,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let count = this.read_scalar(args[2])?.to_usize(this)?;\n                 let byte_count = ty_layout.size * count;\n-                this.memory.write_bytes(ptr, itertools::repeat_n(val_byte, byte_count.bytes() as usize))?;\n+                this.memory.write_bytes(ptr, iter::repeat(val_byte).take(byte_count.bytes() as usize))?;\n             }\n \n             name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),"}]}