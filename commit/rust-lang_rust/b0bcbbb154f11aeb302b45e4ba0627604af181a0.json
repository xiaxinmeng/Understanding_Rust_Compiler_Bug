{"sha": "b0bcbbb154f11aeb302b45e4ba0627604af181a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYmNiYmIxNTRmMTFhZWIzMDJiNDVlNGJhMDYyNzYwNGFmMTgxYTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T05:34:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T05:34:14Z"}, "message": "extra: fix spelling in docs.", "tree": {"sha": "b42fdcf4c2e8e3510d2d3d49964f9e85f0f92d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b42fdcf4c2e8e3510d2d3d49964f9e85f0f92d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0bcbbb154f11aeb302b45e4ba0627604af181a0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bcbbb154f11aeb302b45e4ba0627604af181a0", "html_url": "https://github.com/rust-lang/rust/commit/b0bcbbb154f11aeb302b45e4ba0627604af181a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0bcbbb154f11aeb302b45e4ba0627604af181a0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c126aa56924ceec46557eb66420482f854145c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/c126aa56924ceec46557eb66420482f854145c87", "html_url": "https://github.com/rust-lang/rust/commit/c126aa56924ceec46557eb66420482f854145c87"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5700a299945923c2fa473b15f64a4d1db0d7a8a0", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b0bcbbb154f11aeb302b45e4ba0627604af181a0", "patch": "@@ -276,7 +276,7 @@ impl<T:Freeze + Send> MutexArc<T> {\n      * might contain nested MutexArcs inside.\n      *\n      * The purpose of this is to offer a safe implementation of MutexArc to be\n-     * used instead of RWArc in cases where no readers are needed and sightly\n+     * used instead of RWArc in cases where no readers are needed and slightly\n      * better performance is required.\n      *\n      * Both methods have the same failure behaviour as unsafe_access and"}, {"sha": "11afff168259c70dd0d007dccde68c105346e084", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=b0bcbbb154f11aeb302b45e4ba0627604af181a0", "patch": "@@ -30,7 +30,7 @@\n //! file name following `-o`, and accepts both `-h` and `--help` as optional flags.\n //!\n //! ~~~{.rust}\n-//! exter mod extra;\n+//! extern mod extra;\n //! use extra::getopts::*;\n //! use std::os;\n //!\n@@ -114,7 +114,7 @@ pub enum Occur {\n pub struct Opt {\n     /// Name of the option\n     name: Name,\n-    /// Wheter it has an argument\n+    /// Whether it has an argument\n     hasarg: HasArg,\n     /// How often it can occur\n     occur: Occur,\n@@ -154,7 +154,7 @@ pub enum Fail_ {\n     UnexpectedArgument(~str),\n }\n \n-/// The type of failure that occured.\n+/// The type of failure that occurred.\n #[deriving(Eq)]\n #[allow(missing_doc)]\n pub enum FailType {"}, {"sha": "c9ea556f23a50e85ec541bdcf58724a3d596ec9e", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=b0bcbbb154f11aeb302b45e4ba0627604af181a0", "patch": "@@ -18,7 +18,7 @@ use std::io;\n use std::io::fs;\n \n /// A wrapper for a path to temporary directory implementing automatic\n-/// scope-pased deletion.\n+/// scope-based deletion.\n pub struct TempDir {\n     priv path: Option<Path>\n }"}, {"sha": "3af76a1e3d89cf3bc6ddce53021de2e3430ee9e1", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bcbbb154f11aeb302b45e4ba0627604af181a0/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=b0bcbbb154f11aeb302b45e4ba0627604af181a0", "patch": "@@ -17,7 +17,7 @@ identifiers to entities without requiring a central allocating authority.\n \n They are particularly useful in distributed systems, though can be used in\n disparate areas, such as databases and network protocols.  Typically a UUID is\n-displayed in a readable string form as a sequence of hexadecimals digits,\n+displayed in a readable string form as a sequence of hexadecimal digits,\n separated into groups by hyphens.\n \n The uniqueness property is not strictly guaranteed, however for all practical\n@@ -89,11 +89,11 @@ pub enum UuidVersion {\n /// The reserved variants of UUIDs\n #[deriving(Eq)]\n pub enum UuidVariant {\n-    /// Reserved by the NCS for backward compatability\n+    /// Reserved by the NCS for backward compatibility\n     VariantNCS,\n     /// As described in the RFC4122 Specification (default)\n     VariantRFC4122,\n-    /// Resreved by Microsoft for backward compatability\n+    /// Reserved by Microsoft for backward compatibility\n     VariantMicrosoft,\n     /// Reserved for future expansion\n     VariantFuture,\n@@ -313,7 +313,7 @@ impl Uuid {\n         str::from_utf8_owned(s)\n     }\n \n-    /// Returns a string of hexadecimal digits, separated into groups with a hypen\n+    /// Returns a string of hexadecimal digits, separated into groups with a hyphen.\n     ///\n     /// Example: `550e8400-e29b-41d4-a716-446655440000`\n     pub fn to_hyphenated_str(&self) -> ~str {"}]}