{"sha": "6827ac2f37908f328305bae91d2e5387975da64e", "node_id": "C_kwDOAAsO6NoAKDY4MjdhYzJmMzc5MDhmMzI4MzA1YmFlOTFkMmU1Mzg3OTc1ZGE2NGU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:38:02Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:46:09Z"}, "message": "Format tests with rustfmt (225-275 of 300)", "tree": {"sha": "4caba1866134fd26152a5d1d657d06512cbc1e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4caba1866134fd26152a5d1d657d06512cbc1e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6827ac2f37908f328305bae91d2e5387975da64e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKyEfEACgkQ+boUO5X/\nbYLR1w/+IGSIfqRaRVx/1IAuMl11HDB/9WcvXl5c/TAZ2NA/tR1SOYE6qPTpTztA\nvH0kq2XgSG3shEV7L5NUkWtWAsnIieuuAIrfIrdJbJiNV1CrhsTJpdZyfM2z0Bw9\nduSRUDwyAoVDVzuIYZY0E9nL3wAkwksETOhfLdxexaKmyESgH1aRYQ0Y2lWf+yFi\nXwS/OdiBJxNAO70EeHhGl9Rd0x4ulzQvl8A23WNs0YA0W7jHnkXkIAMAydtyOwDG\nivCxfHb1kladBJnw31sv2SztQ3BWNruU2ZdFYGk0JxVrVJE3eES/zrVn7Zxra21t\nASn1rl9TKSaOLDASFJqcFu04T9AC6AYjowdpqSX3UJPevQ+HY80JTI04DCFnh3Oz\nRGrnYgryGBHLiVgWudSXG5mTK+SGKackQzImNPwalculmrFX/5xqIdocZ4cQCSKQ\nA9LfVQNlBiWI7e2BIE/eu3KJObhqQisLehrA7QMs+zJmDJIWEvE2oyOXcBv8aYXm\nPyt/DAMuWyZ+mn+1ON+7a9WSJpBkrjJq1fCRtyr3a/dgEJDHwgZQrOslRB0ZigX/\nH1VU009+zZYxKw9c+52GGUXDhewF046wE2aducosqlYxbzqIwRIcrJ6kUxplmJ6J\nOOXOD2ITrJAM197VTnKS19b0dfSKTaKuGlpkbsaEUKHIci5zV1I=\n=Q7v5\n-----END PGP SIGNATURE-----", "payload": "tree 4caba1866134fd26152a5d1d657d06512cbc1e16\nparent cbb649adfe172a9ef4b1b91688c14b57c6c3b839\nauthor David Tolnay <dtolnay@gmail.com> 1655836682 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655837169 -0700\n\nFormat tests with rustfmt (225-275 of 300)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6827ac2f37908f328305bae91d2e5387975da64e", "html_url": "https://github.com/rust-lang/rust/commit/6827ac2f37908f328305bae91d2e5387975da64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6827ac2f37908f328305bae91d2e5387975da64e/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "html_url": "https://github.com/rust-lang/rust/commit/cbb649adfe172a9ef4b1b91688c14b57c6c3b839"}], "stats": {"total": 226, "additions": 167, "deletions": 59}, "files": [{"sha": "ffda1033d44bffd546e056d87532cf8557d3a327", "filename": "tests/fail/box-cell-alias.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,7 +6,9 @@ use std::cell::Cell;\n \n fn helper(val: Box<Cell<u8>>, ptr: *const Cell<u8>) -> u8 {\n     val.set(10);\n-    unsafe { (*ptr).set(20); } //~ ERROR does not exist in the borrow stack\n+    unsafe {\n+        (*ptr).set(20);\n+    } //~ ERROR does not exist in the borrow stack\n     val.get()\n }\n "}, {"sha": "78384502337c7d66d004c64e153cec5fa0fe0440", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -7,5 +7,7 @@ fn main() {\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n-    unsafe { *ptr = zst_val; } //~ ERROR out-of-bounds\n+    unsafe {\n+        *ptr = zst_val;\n+    } //~ ERROR out-of-bounds\n }"}, {"sha": "1e572fe4a85595302864a566000939b159c4ed21", "filename": "tests/fail/intrinsics/copy_null.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -9,5 +9,7 @@ fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: memory access failed: null pointer is not a valid pointer\n+    unsafe {\n+        copy_nonoverlapping(std::ptr::null(), ptr, 0);\n+    } //~ ERROR: memory access failed: null pointer is not a valid pointer\n }"}, {"sha": "d7097bb91d3a63cee771a443713e98756d47e384", "filename": "tests/fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -9,5 +9,7 @@ fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n+    unsafe {\n+        copy_nonoverlapping(&data[5], ptr, 0);\n+    } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n }"}, {"sha": "5d2185f1ee1b5f301b05d0ef133c54e910a7f8ee", "filename": "tests/fail/intrinsics/exact_div1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison by 0\n-    unsafe { std::intrinsics::exact_div(2, 0); } //~ ERROR divisor of zero\n+    unsafe {\n+        std::intrinsics::exact_div(2, 0);\n+    } //~ ERROR divisor of zero\n }"}, {"sha": "e0301fbd73e23358202cfaecc2d955256f7447e9", "filename": "tests/fail/intrinsics/exact_div2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison with a remainder\n-    unsafe { std::intrinsics::exact_div(2u16, 3); } //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n+    unsafe {\n+        std::intrinsics::exact_div(2u16, 3);\n+    } //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n }"}, {"sha": "5f74b2dfa818b310f6ee08c5a718d71837cd74fb", "filename": "tests/fail/intrinsics/exact_div3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // signed divison with a remainder\n-    unsafe { std::intrinsics::exact_div(-19i8, 2); } //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n+    unsafe {\n+        std::intrinsics::exact_div(-19i8, 2);\n+    } //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n }"}, {"sha": "f70746d2a1164cfa31b805d4fa67def0472810af", "filename": "tests/fail/intrinsics/exact_div4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison of MIN by -1\n-    unsafe { std::intrinsics::exact_div(i64::MIN, -1); } //~ ERROR overflow in signed remainder (dividing MIN by -1)\n+    unsafe {\n+        std::intrinsics::exact_div(i64::MIN, -1);\n+    } //~ ERROR overflow in signed remainder (dividing MIN by -1)\n }"}, {"sha": "32c2e09b53a3e0a22f1146f04d38039d00f82e57", "filename": "tests/fail/intrinsics/float_to_int_32_inf1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, i32>(f32::INFINITY); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, i32>(f32::INFINITY);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "e1ba2224a088c9104732043e58e55a7d51ef44f8", "filename": "tests/fail/intrinsics/float_to_int_32_infneg1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "6c128d94a87f82703a20667abec0e62a287a5291", "filename": "tests/fail/intrinsics/float_to_int_32_nan.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, u32>(f32::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, u32>(f32::NAN);\n+    } //~ ERROR: cannot be represented in target type `u32`\n }"}, {"sha": "9bc628e9db924dc1f0237b17123177e11850d26c", "filename": "tests/fail/intrinsics/float_to_int_32_nanneg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, u32>(-f32::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, u32>(-f32::NAN);\n+    } //~ ERROR: cannot be represented in target type `u32`\n }"}, {"sha": "188a9256db7ed813c4e52d3745377a85e33e8232", "filename": "tests/fail/intrinsics/float_to_int_32_neg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, u32>(-1.000000001f32); } //~ ERROR: cannot be represented in target type `u32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, u32>(-1.000000001f32);\n+    } //~ ERROR: cannot be represented in target type `u32`\n }"}, {"sha": "787941e63e2ba8f01b2f53fb73a2222dbc5a17dd", "filename": "tests/fail/intrinsics/float_to_int_32_too_big1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, i32>(2147483648.0f32); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, i32>(2147483648.0f32);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "39b74cb048691fc30934fde814b6fb40a8675ae4", "filename": "tests/fail/intrinsics/float_to_int_32_too_big2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, u32>((u32::MAX-127) as f32); } //~ ERROR: cannot be represented in target type `u32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32);\n+    } //~ ERROR: cannot be represented in target type `u32`\n }"}, {"sha": "a96738214bd016e644c33c3ff63c92588567509a", "filename": "tests/fail/intrinsics/float_to_int_32_too_small1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f32, i32>(-2147483904.0f32); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f32, i32>(-2147483904.0f32);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "259ec883f6caade7e690c9ff88030057aecd9b23", "filename": "tests/fail/intrinsics/float_to_int_64_inf1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u128>(f64::INFINITY); } //~ ERROR: cannot be represented in target type `u128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u128>(f64::INFINITY);\n+    } //~ ERROR: cannot be represented in target type `u128`\n }"}, {"sha": "3bc5ac710e974d386420c366990db43ca1f42cf4", "filename": "tests/fail/intrinsics/float_to_int_64_infneg1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `u128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY);\n+    } //~ ERROR: cannot be represented in target type `u128`\n }"}, {"sha": "81a79c4d2116a4d991bd6a63b5ca54c8868860db", "filename": "tests/fail/intrinsics/float_to_int_64_infneg2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY); } //~ ERROR: cannot be represented in target type `i128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY);\n+    } //~ ERROR: cannot be represented in target type `i128`\n }"}, {"sha": "47580ad5b2a00fc8c53bd686fb8369c156178f20", "filename": "tests/fail/intrinsics/float_to_int_64_nan.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u32>(f64::NAN); } //~ ERROR: cannot be represented in target type `u32`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u32>(f64::NAN);\n+    } //~ ERROR: cannot be represented in target type `u32`\n }"}, {"sha": "0e97c2f26bb3afde3877ce624437f0fa3885d4ce", "filename": "tests/fail/intrinsics/float_to_int_64_neg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u128>(-1.0000000000001f64); } //~ ERROR: cannot be represented in target type `u128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u128>(-1.0000000000001f64);\n+    } //~ ERROR: cannot be represented in target type `u128`\n }"}, {"sha": "fb75a793ded42410b76c7f40cdd2ba5e6284d22f", "filename": "tests/fail/intrinsics/float_to_int_64_too_big1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i32>(2147483648.0f64); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i32>(2147483648.0f64);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "0c039ff8493e01fd9776d823e45345bb7b5f3f0e", "filename": "tests/fail/intrinsics/float_to_int_64_too_big2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64); } //~ ERROR: cannot be represented in target type `i64`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64);\n+    } //~ ERROR: cannot be represented in target type `i64`\n }"}, {"sha": "b9d2775f0325d3fe7fe127d6c23e3e704952552f", "filename": "tests/fail/intrinsics/float_to_int_64_too_big3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64); } //~ ERROR: cannot be represented in target type `u64`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64);\n+    } //~ ERROR: cannot be represented in target type `u64`\n }"}, {"sha": "4a2dc7822f78c1d9afb48c8afe3188ef9025bece", "filename": "tests/fail/intrinsics/float_to_int_64_too_big4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u128>(u128::MAX as f64); } //~ ERROR: cannot be represented in target type `u128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u128>(u128::MAX as f64);\n+    } //~ ERROR: cannot be represented in target type `u128`\n }"}, {"sha": "bf1f797a0003e95749c8251628d6e763b499a78e", "filename": "tests/fail/intrinsics/float_to_int_64_too_big5.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64); } //~ ERROR: cannot be represented in target type `i128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64);\n+    } //~ ERROR: cannot be represented in target type `i128`\n }"}, {"sha": "2b6d6359c9a8158d3f643bf2c29374a61af645d1", "filename": "tests/fail/intrinsics/float_to_int_64_too_big6.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, u128>(f64::MAX); } //~ ERROR: cannot be represented in target type `u128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, u128>(f64::MAX);\n+    } //~ ERROR: cannot be represented in target type `u128`\n }"}, {"sha": "e9b1333232c0ac5f5b674d05a513385c7e537b3b", "filename": "tests/fail/intrinsics/float_to_int_64_too_big7.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i128>(f64::MIN); } //~ ERROR: cannot be represented in target type `i128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i128>(f64::MIN);\n+    } //~ ERROR: cannot be represented in target type `i128`\n }"}, {"sha": "652edf1931b3ed7bf389a77f18df49baba586dcb", "filename": "tests/fail/intrinsics/float_to_int_64_too_small1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i32>(-2147483649.0f64); } //~ ERROR: cannot be represented in target type `i32`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i32>(-2147483649.0f64);\n+    } //~ ERROR: cannot be represented in target type `i32`\n }"}, {"sha": "d3d5559291b3a09bf96e1824e79ca2bb8bf44bce", "filename": "tests/fail/intrinsics/float_to_int_64_too_small2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64); } //~ ERROR: cannot be represented in target type `i64`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64);\n+    } //~ ERROR: cannot be represented in target type `i64`\n }"}, {"sha": "0e22951a45cdbbd9ee23adc0d4935e6fc868e2b2", "filename": "tests/fail/intrinsics/float_to_int_64_too_small3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -6,5 +6,7 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64); } //~ ERROR: cannot be represented in target type `i128`\n+    unsafe {\n+        float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64);\n+    } //~ ERROR: cannot be represented in target type `i128`\n }"}, {"sha": "90d0a3d01236fbee40ca1434d94087430e76a804", "filename": "tests/fail/intrinsics/unchecked_add1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MAX overflow\n-    unsafe { std::intrinsics::unchecked_add(40000u16, 30000); } //~ ERROR overflow executing `unchecked_add`\n+    unsafe {\n+        std::intrinsics::unchecked_add(40000u16, 30000);\n+    } //~ ERROR overflow executing `unchecked_add`\n }"}, {"sha": "68e9fb4563e7e5303d97c96a5975cd659b408ee9", "filename": "tests/fail/intrinsics/unchecked_add2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MIN overflow\n-    unsafe { std::intrinsics::unchecked_add(-30000i16, -8000); } //~ ERROR overflow executing `unchecked_add`\n+    unsafe {\n+        std::intrinsics::unchecked_add(-30000i16, -8000);\n+    } //~ ERROR overflow executing `unchecked_add`\n }"}, {"sha": "23fc1514f1a18c297cae360ed02a2096056100ba", "filename": "tests/fail/intrinsics/unchecked_div1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MIN/-1 cannot be represented\n-    unsafe { std::intrinsics::unchecked_div(i16::MIN, -1); } //~ ERROR overflow in signed division (dividing MIN by -1)\n+    unsafe {\n+        std::intrinsics::unchecked_div(i16::MIN, -1);\n+    } //~ ERROR overflow in signed division (dividing MIN by -1)\n }"}, {"sha": "f26d4d3d213f8bb2b567382a8ff21ca2282748b5", "filename": "tests/fail/intrinsics/unchecked_mul1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MAX overflow\n-    unsafe { std::intrinsics::unchecked_mul(300u16, 250u16); } //~ ERROR overflow executing `unchecked_mul`\n+    unsafe {\n+        std::intrinsics::unchecked_mul(300u16, 250u16);\n+    } //~ ERROR overflow executing `unchecked_mul`\n }"}, {"sha": "f3e20e8c295d99d472f54390b0b186f4b61767ee", "filename": "tests/fail/intrinsics/unchecked_mul2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MIN overflow\n-    unsafe { std::intrinsics::unchecked_mul(1_000_000_000i32, -4); } //~ ERROR overflow executing `unchecked_mul`\n+    unsafe {\n+        std::intrinsics::unchecked_mul(1_000_000_000i32, -4);\n+    } //~ ERROR overflow executing `unchecked_mul`\n }"}, {"sha": "3ea5e618074cc92114fcbb5f85db325312fd6309", "filename": "tests/fail/intrinsics/unchecked_sub1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MIN overflow\n-    unsafe { std::intrinsics::unchecked_sub(14u32, 22); } //~ ERROR overflow executing `unchecked_sub`\n+    unsafe {\n+        std::intrinsics::unchecked_sub(14u32, 22);\n+    } //~ ERROR overflow executing `unchecked_sub`\n }"}, {"sha": "0e9892e58a52d691e1ea3f27fc5b7c8d99c2eaee", "filename": "tests/fail/intrinsics/unchecked_sub2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,5 +1,7 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MAX overflow\n-    unsafe { std::intrinsics::unchecked_sub(30000i16, -7000); } //~ ERROR overflow executing `unchecked_sub`\n+    unsafe {\n+        std::intrinsics::unchecked_sub(30000i16, -7000);\n+    } //~ ERROR overflow executing `unchecked_sub`\n }"}, {"sha": "7cb0c7b0279914d3aad654ead0bcc70afd90cd89", "filename": "tests/fail/panic/unwind_panic_abort.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -7,5 +7,7 @@ extern \"Rust\" {\n }\n \n fn main() {\n-    unsafe { miri_start_panic(&mut 0); } //~ ERROR unwinding past a stack frame that does not allow unwinding\n+    unsafe {\n+        miri_start_panic(&mut 0);\n+    } //~ ERROR unwinding past a stack frame that does not allow unwinding\n }"}, {"sha": "5bdd4ef1f052af97d2ae124b285bca2e5208e62d", "filename": "tests/fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -2,8 +2,10 @@ fn main() {\n     let target = Box::new(42); // has an implicit raw\n     let xref = &*target;\n     {\n-        let x : *mut u32 = xref as *const _ as *mut _;\n-        unsafe { *x = 42; } // invalidates shared ref, activates raw\n+        let x: *mut u32 = xref as *const _ as *mut _;\n+        unsafe {\n+            *x = 42;\n+        } // invalidates shared ref, activates raw\n     }\n     let _x = *xref; //~ ERROR borrow stack\n }"}, {"sha": "25a9cc4012ba3bc517b24b80fcbee4cd15e53d0c", "filename": "tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -3,6 +3,8 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13; } //~ ERROR borrow stack\n+    unsafe {\n+        *target2 = 13;\n+    } //~ ERROR borrow stack\n     let _val = *target;\n }"}, {"sha": "4bbd1e56a747daec9320f11e471c6a77c9d96267", "filename": "tests/fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -3,6 +3,8 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42; } //~ ERROR only grants SharedReadOnly permission\n+    unsafe {\n+        *ptr = 42;\n+    } //~ ERROR only grants SharedReadOnly permission\n     let _val = *r#ref;\n }"}, {"sha": "49ffb9a8604ba09bb26a75991a0a5f382905f16e", "filename": "tests/fail/stacked_borrows/illegal_write6.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -7,6 +7,8 @@ fn main() {\n fn foo(a: &mut u32, y: *mut u32) -> u32 {\n     *a = 1;\n     let _b = &*a;\n-    unsafe { *y = 2; } //~ ERROR: not granting access to tag\n+    unsafe {\n+        *y = 2;\n+    } //~ ERROR: not granting access to tag\n     return *a;\n }"}, {"sha": "22898483bf19602dd7a7b17de826e9a932e6f2d7", "filename": "tests/fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -7,6 +7,10 @@ fn main() {\n     let raw2 = &mut l as *mut _; // invalidates raw1\n     // Without raw pointer tracking, Stacked Borrows cannot distinguish raw1 and raw2, and thus\n     // fails to realize that raw1 should not be used any more.\n-    unsafe { *raw1 = 13; } //~ ERROR does not exist in the borrow stack\n-    unsafe { *raw2 = 13; }\n+    unsafe {\n+        *raw1 = 13;\n+    } //~ ERROR does not exist in the borrow stack\n+    unsafe {\n+        *raw2 = 13;\n+    }\n }"}, {"sha": "803e8c6eb101301a217e281122ae7a9c52d13a62", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,13 +1,15 @@\n fn foo(x: &mut i32) -> i32 {\n-  *x = 5;\n-  unknown_code(&*x);\n-  *x // must return 5\n+    *x = 5;\n+    unknown_code(&*x);\n+    *x // must return 5\n }\n \n fn main() {\n     println!(\"{}\", foo(&mut 0));\n }\n \n fn unknown_code(x: &i32) {\n-    unsafe { *(x as *const i32 as *mut i32) = 7; } //~ ERROR only grants SharedReadOnly permission\n+    unsafe {\n+        *(x as *const i32 as *mut i32) = 7;\n+    } //~ ERROR only grants SharedReadOnly permission\n }"}, {"sha": "2a766d2c1b7caa0eb494443db3a56f86412ce0c6", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -10,5 +10,7 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13; } //~ ERROR borrow stack\n+    unsafe {\n+        *raw = 13;\n+    } //~ ERROR borrow stack\n }"}, {"sha": "c807f936d121f458a9f2a1533734a0ee8604b088", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -4,5 +4,7 @@ fn main() {\n     let mut x = 42;\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n-    unsafe { *raw = 13; } //~ ERROR borrow stack\n+    unsafe {\n+        *raw = 13;\n+    } //~ ERROR borrow stack\n }"}, {"sha": "ca892f8320920a8e1a0a8d48ada09cd5fff301cf", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -10,8 +10,10 @@ fn main() {\n     let x = &mut [0u8; 3];\n     let base_addr = x as *mut _ as usize;\n     // Manually make sure the pointer is properly aligned.\n-    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr + 1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment 1, but alignment 2 is required\n+    unsafe {\n+        *u16_ptr = 2;\n+    } //~ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "23da1ba12572a71eb0911dd95ed345a1dfb5e0ca", "filename": "tests/fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -1,10 +1,14 @@\n #[repr(u32)]\n #[derive(Debug)]\n-enum Bool { True }\n+enum Bool {\n+    True,\n+}\n \n fn evil(x: &mut Bool) {\n     let x = x as *mut _ as *mut u32;\n-    unsafe { *x = 44; } // out-of-bounds enum tag\n+    unsafe {\n+        *x = 44;\n+    } // out-of-bounds enum tag\n }\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391"}, {"sha": "cd9cf3618d254c8df93f942addfc1952f636724f", "filename": "tests/fail/zst2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -11,5 +11,7 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = &mut *x_box as *mut _ as *mut [u8; 0];\n     drop(x_box);\n-    unsafe { *x = zst_val; } //~ ERROR dereferenced after this allocation got freed\n+    unsafe {\n+        *x = zst_val;\n+    } //~ ERROR dereferenced after this allocation got freed\n }"}, {"sha": "defb5a626ba55a27c4129e3526ee2251738e879d", "filename": "tests/fail/zst3.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6827ac2f37908f328305bae91d2e5387975da64e/tests%2Ffail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.rs?ref=6827ac2f37908f328305bae91d2e5387975da64e", "patch": "@@ -11,8 +11,12 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = (&mut *x_box as *mut u8).wrapping_offset(1);\n     // This one is just \"at the edge\", but still okay\n-    unsafe { *(x as *mut [u8; 0]) = zst_val; }\n+    unsafe {\n+        *(x as *mut [u8; 0]) = zst_val;\n+    }\n     // One byte further is OOB.\n     let x = x.wrapping_offset(1);\n-    unsafe { *(x as *mut [u8; 0]) = zst_val; } //~ ERROR out-of-bounds\n+    unsafe {\n+        *(x as *mut [u8; 0]) = zst_val;\n+    } //~ ERROR out-of-bounds\n }"}]}