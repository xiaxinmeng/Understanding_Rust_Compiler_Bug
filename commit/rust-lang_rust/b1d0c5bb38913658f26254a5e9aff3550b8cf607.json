{"sha": "b1d0c5bb38913658f26254a5e9aff3550b8cf607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDBjNWJiMzg5MTM2NThmMjYyNTRhNWU5YWZmMzU1MGI4Y2Y2MDc=", "commit": {"author": {"name": "Trotter Cashion", "email": "cashion@gmail.com", "date": "2016-10-23T22:14:53Z"}, "committer": {"name": "Trotter Cashion", "email": "cashion@gmail.com", "date": "2016-11-08T15:04:12Z"}, "message": "Update testing.md to reflect changes to cargo new\n\n`cargo new` now creates a `src/lib.rs` with a `tests` module by default. I've updated the earlier examples in this doc to reflect this. However, I don't know how we want to approach the \"introduction\" to idiomatic testing that follows in \"the tests module\" section. I _think_ it should be broken apart, with the module concept being introduced early on, and the `super` concept being addressed when we hit the `add_two` example. I'd like to get agreement on that being the right approach before I do it though.\r\n\r\nI _also_ removed the `#fn main() {}` hidden at the beginning of each example, as these cause Rust Playground to not treat the file as a set of tests that it can run. Removing it _should_ cause Rust Playground to display a \"Test >\" button in the top left when a user runs the code, which will allow them to see the test runner output.", "tree": {"sha": "95e7f358ea96b8a861c78ce15a62a37bc89485ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e7f358ea96b8a861c78ce15a62a37bc89485ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d0c5bb38913658f26254a5e9aff3550b8cf607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d0c5bb38913658f26254a5e9aff3550b8cf607", "html_url": "https://github.com/rust-lang/rust/commit/b1d0c5bb38913658f26254a5e9aff3550b8cf607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d0c5bb38913658f26254a5e9aff3550b8cf607/comments", "author": {"login": "trotter", "id": 413, "node_id": "MDQ6VXNlcjQxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trotter", "html_url": "https://github.com/trotter", "followers_url": "https://api.github.com/users/trotter/followers", "following_url": "https://api.github.com/users/trotter/following{/other_user}", "gists_url": "https://api.github.com/users/trotter/gists{/gist_id}", "starred_url": "https://api.github.com/users/trotter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trotter/subscriptions", "organizations_url": "https://api.github.com/users/trotter/orgs", "repos_url": "https://api.github.com/users/trotter/repos", "events_url": "https://api.github.com/users/trotter/events{/privacy}", "received_events_url": "https://api.github.com/users/trotter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trotter", "id": 413, "node_id": "MDQ6VXNlcjQxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trotter", "html_url": "https://github.com/trotter", "followers_url": "https://api.github.com/users/trotter/followers", "following_url": "https://api.github.com/users/trotter/following{/other_user}", "gists_url": "https://api.github.com/users/trotter/gists{/gist_id}", "starred_url": "https://api.github.com/users/trotter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trotter/subscriptions", "organizations_url": "https://api.github.com/users/trotter/orgs", "repos_url": "https://api.github.com/users/trotter/repos", "events_url": "https://api.github.com/users/trotter/events{/privacy}", "received_events_url": "https://api.github.com/users/trotter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a959a543dfc70a67e64f7d369ed6c9e12fc806", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a959a543dfc70a67e64f7d369ed6c9e12fc806", "html_url": "https://github.com/rust-lang/rust/commit/38a959a543dfc70a67e64f7d369ed6c9e12fc806"}], "stats": {"total": 126, "additions": 76, "deletions": 50}, "files": [{"sha": "1ae093afafe8babf124801be28895e50ab830b28", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 76, "deletions": 50, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b1d0c5bb38913658f26254a5e9aff3550b8cf607/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1d0c5bb38913658f26254a5e9aff3550b8cf607/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=b1d0c5bb38913658f26254a5e9aff3550b8cf607", "patch": "@@ -38,8 +38,9 @@ currently has no body. That's good enough to pass! We can run the tests with\n \n ```bash\n $ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+   Compiling adder v0.1.0 (file:///private/tmp/adder)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.15 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n test tests::it_works ... ok\n@@ -61,11 +62,11 @@ those later. For now, see this line:\n test tests::it_works ... ok\n ```\n \n-Note the `it_works`. This comes from the name of our function:\n+Note the `tests::it_works`. This comes from the name of our module and function:\n \n ```rust\n fn it_works() {\n-# }\n+}\n ```\n \n We also get a summary line:\n@@ -78,10 +79,12 @@ So why does our do-nothing test pass? Any test which doesn't `panic!` passes,\n and any test that does `panic!` fails. Let's make our test fail:\n \n ```rust\n-# fn main() {}\n-#[test]\n-fn it_works() {\n-    assert!(false);\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn it_works() {\n+        assert!(false);\n+    }\n }\n ```\n \n@@ -91,16 +94,18 @@ run our tests again:\n \n ```bash\n $ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+   Compiling adder v0.1.0 (file:///private/tmp/adder)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n test tests::it_works ... FAILED\n \n failures:\n \n----- test::it_works stdout ----\n+---- tests::it_works stdout ----\n         thread 'tests::it_works' panicked at 'assertion failed: false', src/lib.rs:5\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n \n \n failures:\n@@ -148,20 +153,24 @@ This is useful if you want to integrate `cargo test` into other tooling.\n We can invert our test's failure with another attribute: `should_panic`:\n \n ```rust\n-# fn main() {}\n-#[test]\n-#[should_panic]\n-fn it_works() {\n-    assert!(false);\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    #[should_panic]\n+    fn it_works() {\n+        assert!(false);\n+    }\n }\n+\n ```\n \n This test will now succeed if we `panic!` and fail if we complete. Let's try it:\n \n ```bash\n $ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+   Compiling adder v0.1.0 (file:///private/tmp/adder)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n test tests::it_works ... ok\n@@ -179,11 +188,13 @@ Rust provides another macro, `assert_eq!`, that compares two arguments for\n equality:\n \n ```rust\n-# fn main() {}\n-#[test]\n-#[should_panic]\n-fn it_works() {\n-    assert_eq!(\"Hello\", \"world\");\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    #[should_panic]\n+    fn it_works() {\n+        assert_eq!(\"Hello\", \"world\");\n+    }\n }\n ```\n \n@@ -192,8 +203,9 @@ passes:\n \n ```bash\n $ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+   Compiling adder v0.1.0 (file:///private/tmp/adder)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.21 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n test tests::it_works ... ok\n@@ -214,25 +226,31 @@ make sure that the failure message contains the provided text. A safer version\n of the example above would be:\n \n ```rust\n-# fn main() {}\n-#[test]\n-#[should_panic(expected = \"assertion failed\")]\n-fn it_works() {\n-    assert_eq!(\"Hello\", \"world\");\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    #[should_panic(expected = \"assertion failed\")]\n+    fn it_works() {\n+        assert_eq!(\"Hello\", \"world\");\n+    }\n }\n ```\n \n That's all there is to the basics! Let's write one 'real' test:\n \n ```rust,ignore\n-# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n \n-#[test]\n-fn it_works() {\n-    assert_eq!(4, add_two(2));\n+#[cfg(test)]\n+mod tests {\n+    use super::add_two;\n+    \n+    #[test]\n+    fn it_works() {\n+        assert_eq!(4, add_two(2));\n+    }\n }\n ```\n \n@@ -245,16 +263,24 @@ Sometimes a few specific tests can be very time-consuming to execute. These\n can be disabled by default by using the `ignore` attribute:\n \n ```rust\n-# fn main() {}\n-#[test]\n-fn it_works() {\n-    assert_eq!(4, add_two(2));\n+pub fn add_two(a: i32) -> i32 {\n+    a + 2\n }\n \n-#[test]\n-#[ignore]\n-fn expensive_test() {\n-    // code that takes an hour to run\n+#[cfg(test)]\n+mod tests {\n+    use super::add_two;\n+    \n+    #[test]\n+    fn it_works() {\n+        assert_eq!(4, add_two(2));\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn expensive_test() {\n+        // code that takes an hour to run\n+    }\n }\n ```\n \n@@ -263,12 +289,13 @@ not:\n \n ```bash\n $ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+   Compiling adder v0.1.0 (file:///private/tmp/adder)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.20 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 2 tests\n-test expensive_test ... ignored\n-test it_works ... ok\n+test tests::expensive_test ... ignored\n+test tests::it_works ... ok\n \n test result: ok. 1 passed; 0 failed; 1 ignored; 0 measured\n \n@@ -283,10 +310,11 @@ The expensive tests can be run explicitly using `cargo test -- --ignored`:\n \n ```bash\n $ cargo test -- --ignored\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n+     Running target/debug/deps/adder-941f01916ca4a642\n \n running 1 test\n-test expensive_test ... ok\n+test tests::expensive_test ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n \n@@ -310,7 +338,6 @@ was missing from our last example. Let's explain what this does.\n The idiomatic way of writing our example looks like this:\n \n ```rust,ignore\n-# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -339,7 +366,6 @@ a large module, and so this is a common use of globs. Let's change our\n `src/lib.rs` to make use of it:\n \n ```rust,ignore\n-# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }"}]}