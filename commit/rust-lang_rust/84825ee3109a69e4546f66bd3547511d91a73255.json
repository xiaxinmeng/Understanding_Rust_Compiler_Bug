{"sha": "84825ee3109a69e4546f66bd3547511d91a73255", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODI1ZWUzMTA5YTY5ZTQ1NDZmNjZiZDM1NDc1MTFkOTFhNzMyNTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-16T00:33:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-16T01:57:45Z"}, "message": "librustc: Make the default sigil for block lambdas `&` instead of `@`.", "tree": {"sha": "ebfb22e356d1e942140e788dbe6e4c91146691c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebfb22e356d1e942140e788dbe6e4c91146691c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84825ee3109a69e4546f66bd3547511d91a73255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84825ee3109a69e4546f66bd3547511d91a73255", "html_url": "https://github.com/rust-lang/rust/commit/84825ee3109a69e4546f66bd3547511d91a73255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84825ee3109a69e4546f66bd3547511d91a73255/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6536f8687b1b4fb166594ed5cf79db0ec1436d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6536f8687b1b4fb166594ed5cf79db0ec1436d", "html_url": "https://github.com/rust-lang/rust/commit/bd6536f8687b1b4fb166594ed5cf79db0ec1436d"}], "stats": {"total": 142, "additions": 70, "deletions": 72}, "files": [{"sha": "1c5531303e1412d10a06e0230cb8ec1ee9ea0ae0", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -608,7 +608,7 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n                 };\n             if result {\n                 // Unwinding function in case any ancestral enlisting fails\n-                let bail = |tg: TaskGroupInner| {\n+                let bail: @fn(TaskGroupInner) = |tg| {\n                     leave_taskgroup(tg, child, false)\n                 };\n                 // Attempt to join every ancestor group."}, {"sha": "65002ff891b053459cf5b60bde747a06ce3abb45", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -66,10 +66,10 @@ export encode_def_id;\n \n type abbrev_map = map::HashMap<ty::t, tyencode::ty_abbrev>;\n \n-type encode_inlined_item = fn@(ecx: @encode_ctxt,\n-                               ebml_w: writer::Encoder,\n-                               path: ast_map::path,\n-                               ii: ast::inlined_item);\n+pub type encode_inlined_item = fn@(ecx: @encode_ctxt,\n+                                   ebml_w: writer::Encoder,\n+                                   path: ast_map::path,\n+                                   ii: ast::inlined_item);\n \n type encode_parms = {\n     diag: span_handler,\n@@ -572,7 +572,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                      index: @mut ~[entry<int>]) {\n         index.push({val: item.id, pos: ebml_w.writer.tell()});\n     }\n-    let add_to_index = |copy ebml_w| add_to_index_(item, ebml_w, index);\n+    let add_to_index: &fn() = || add_to_index_(item, ebml_w, index);\n \n     debug!(\"encoding info for item at %s\",\n            ecx.tcx.sess.codemap.span_to_str(item.span));"}, {"sha": "1e23dbbc51a15c388be07f056a8ec7a9989375da", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -30,14 +30,15 @@ use syntax::ast_map::{node_item, node_method};\n use syntax::ast_map;\n use syntax::ast_util::{Private, Public, has_legacy_export_attr, is_local};\n use syntax::ast_util::{visibility_to_privacy};\n+use syntax::codemap::span;\n use syntax::visit;\n \n fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     let privileged_items = @DVec();\n     let legacy_exports = has_legacy_export_attr(crate.node.attrs);\n \n     // Adds structs that are privileged to this scope.\n-    let add_privileged_items = |items: &[@ast::item]| {\n+    let add_privileged_items: @fn(&[@ast::item]) -> int = |items| {\n         let mut count = 0;\n         for items.each |item| {\n             match item.node {\n@@ -53,7 +54,8 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     };\n \n     // Checks that an enum variant is in scope\n-    let check_variant = |span, enum_id| {\n+    let check_variant: @fn(span: span, enum_id: ast::def_id) =\n+            |span, enum_id| {\n         let variant_info = ty::enum_variants(tcx, enum_id)[0];\n         let parental_privacy = if is_local(enum_id) {\n             let parent_vis = ast_map::node_item_query(tcx.items, enum_id.node,\n@@ -81,7 +83,8 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     };\n \n     // Checks that a private field is in scope.\n-    let check_field = |span, id, ident| {\n+    let check_field: @fn(span: span, id: ast::def_id, ident: ast::ident) =\n+            |span, id, ident| {\n         let fields = ty::lookup_struct_fields(tcx, id);\n         for fields.each |field| {\n             if field.ident != ident { loop; }\n@@ -95,7 +98,8 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     };\n \n     // Checks that a private method is in scope.\n-    let check_method = |span, origin: &method_origin| {\n+    let check_method: @fn(span: span, origin: &method_origin) =\n+            |span, origin| {\n         match *origin {\n             method_static(method_id) => {\n                 if method_id.crate == local_crate {"}, {"sha": "a059a2bfa9071a8481295e16c1052d06a0d82d60", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -1610,8 +1610,9 @@ fn trans_match_inner(scope_cx: block,\n         if ty::type_is_empty(tcx, t) {\n             // Special case for empty types\n             let fail_cx = @mut None;\n-            Some(|| mk_fail(scope_cx, discr_expr.span,\n-                            ~\"scrutinizing value that can't exist\", fail_cx))\n+            let f: mk_fail = || mk_fail(scope_cx, discr_expr.span,\n+                            ~\"scrutinizing value that can't exist\", fail_cx);\n+            Some(f)\n         } else {\n             None\n         }"}, {"sha": "9d363416be396d9e4456b7b04a9fe1bdbaaaa9b8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -2867,7 +2867,7 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n \n fn crate_ctxt_to_encode_parms(cx: @crate_ctxt) -> encoder::encode_parms {\n     // XXX: Bad copy of `c`, whatever it is.\n-    let encode_inlined_item =\n+    let encode_inlined_item: encoder::encode_inlined_item =\n         |a,b,c,d| astencode::encode_inlined_item(a, b, copy c, d, cx.maps);\n \n     return {"}, {"sha": "a3f07431bc8e8d2e2fff1181e785569b5903b4ff", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -427,24 +427,23 @@ fn trans_expr_fn(bcx: block,\n                                                  ~\"expr_fn\");\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n-    // XXX: Bad copies.\n-    let trans_closure_env = |proto, copy body, copy sub_path, copy decl| {\n+    let trans_closure_env: &fn(ast::Proto) -> Result = |proto| {\n         let cap_vars = capture::compute_capture_vars(ccx.tcx, user_id, proto,\n                                                      cap_clause);\n         let ret_handle = match is_loop_body { Some(x) => x, None => None };\n         // XXX: Bad copy.\n         let {llbox, cdata_ty, bcx} = build_closure(bcx, copy cap_vars, proto,\n                                                    ret_handle);\n-        trans_closure(ccx, /*bad*/copy sub_path, decl, body, llfn, no_self,\n-                      /*bad*/copy bcx.fcx.param_substs, user_id, None,\n-                      |fcx| {\n-            load_environment(fcx, cdata_ty, copy cap_vars,\n-                             ret_handle.is_some(), proto);\n+        trans_closure(ccx, /*bad*/copy sub_path, decl, /*bad*/copy body,\n+                      llfn, no_self, /*bad*/copy bcx.fcx.param_substs,\n+                      user_id, None, |fcx| {\n+                          load_environment(fcx, cdata_ty, copy cap_vars,\n+                                           ret_handle.is_some(), proto);\n                       }, |bcx| {\n-            if is_loop_body.is_some() {\n-                Store(bcx, C_bool(true), bcx.fcx.llretptr);\n-            }\n-        });\n+                          if is_loop_body.is_some() {\n+                              Store(bcx, C_bool(true), bcx.fcx.llretptr);\n+                          }\n+                      });\n         rslt(bcx, llbox)\n     };\n "}, {"sha": "2af96f17f7dedcad497ddb0347111a044bee042c", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -444,8 +444,14 @@ fn add_clean_temp_mem(bcx: block, val: ValueRef, t: ty::t) {\n }\n fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n     let free_fn = match heap {\n-      heap_shared => |a| glue::trans_free(a, ptr),\n-      heap_exchange => |a| glue::trans_unique_free(a, ptr)\n+      heap_shared => {\n+        let f: @fn(block) -> block = |a| glue::trans_free(a, ptr);\n+        f\n+      }\n+      heap_exchange => {\n+        let f: @fn(block) -> block = |a| glue::trans_unique_free(a, ptr);\n+        f\n+      }\n     };\n     do in_scope_cx(cx) |scope_info| {\n         scope_info.cleanups.push(clean_temp(ptr, free_fn,"}, {"sha": "5aad902681497ded2557c4660358ef0ed05e4a8f", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -153,7 +153,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n                          ~[path_name((ccx.names)(ccx.sess.str_of(name)))]);\n     let s = mangle_exported_name(ccx, /*bad*/copy pt, mono_ty);\n \n-    let mk_lldecl = |/*bad*/copy s| {\n+    let mk_lldecl = || {\n         let lldecl = decl_internal_cdecl_fn(ccx.llmod, /*bad*/copy s, llfty);\n         ccx.monomorphized.insert(hash_id, lldecl);\n         lldecl"}, {"sha": "2205eb77ef0bae62341bb12562acbb88fd110ca9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -1561,7 +1561,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                      fn_ty.meta.onceness)\n                 }\n                 _ => {\n-                    (None, ast::impure_fn, ast::ProtoBox, ast::Many)\n+                    (None, ast::impure_fn, ast::ProtoBorrowed, ast::Many)\n                 }\n             }\n         };"}, {"sha": "7dbaf1a75280bbf1580040662d929d5dcec94c6f", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -58,8 +58,9 @@ fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n // of b -- skipping any inner loops (loop, while, loop_body)\n fn loop_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n     let rs = @mut false;\n-    let visit_expr =\n-        |e: @ast::expr, &&flag: @mut bool, v: visit::vt<@mut bool>| {\n+    let visit_expr: @fn(@ast::expr,\n+                        &&flag: @mut bool,\n+                        v: visit::vt<@mut bool>) = |e, &&flag, v| {\n         *flag |= p(e.node);\n         match e.node {\n           // Skip inner loops, since a break in the inner loop isn't a\n@@ -80,8 +81,9 @@ fn loop_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n // of b -- skipping any inner loops (loop, while, loop_body)\n fn block_query(b: ast::blk, p: fn@(@ast::expr) -> bool) -> bool {\n     let rs = @mut false;\n-    let visit_expr =\n-        |e: @ast::expr, &&flag: @mut bool, v: visit::vt<@mut bool>| {\n+    let visit_expr: @fn(@ast::expr,\n+                        &&flag: @mut bool,\n+                        v: visit::vt<@mut bool>) = |e, &&flag, v| {\n         *flag |= p(e);\n         visit::visit_expr(e, flag, v)\n     };"}, {"sha": "6e335c318ddc660e678d8f210a788771a0170740", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -213,7 +213,9 @@ fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n fn collect(messages: @DVec<~str>)\n     -> fn@(Option<(@codemap::CodeMap, span)>, &str, level)\n {\n-    |_o, msg: &str, _l| { messages.push(msg.to_str()); }\n+    let f: @fn(Option<(@codemap::CodeMap, span)>, &str, level) =\n+        |_o, msg: &str, _l| { messages.push(msg.to_str()); };\n+    f\n }\n \n fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level) {"}, {"sha": "d68e5a34fbc1e4357d150b85f80fc5a220fc1e51", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -136,8 +136,8 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n         cx.span_fatal(best_fail_spot, best_fail_msg);\n     }\n \n-    let exp = |cx, sp, arg| generic_extension(cx, sp, name,\n-                                              arg, lhses, rhses);\n+    let exp: @fn(ext_ctxt, span, ~[ast::token_tree]) -> mac_result =\n+        |cx, sp, arg| generic_extension(cx, sp, name, arg, lhses, rhses);\n \n     return mr_def({\n         name: *cx.parse_sess().interner.get(name),"}, {"sha": "4d68c982d061b3a7b0812f4f77e54e78a87455bc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -641,7 +641,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(fk, decl, body, sp, id);\n         visit_fn(fk, decl, body, sp, id, e, v);\n     }\n-    let visit_ty = |a,b,c| v_ty(v.visit_ty, a, b, c);\n+    let visit_ty: @fn(@Ty, &&x: (), vt<()>) =\n+        |a,b,c| v_ty(v.visit_ty, a, b, c);\n     fn v_struct_field(f: fn@(@struct_field), sf: @struct_field, &&e: (),\n                       v: vt<()>) {\n         f(sf);"}, {"sha": "0671e8046016d53c583bd7925f0abd9793fba144", "filename": "src/test/compile-fail/block-arg-used-as-lambda-with-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -13,7 +13,7 @@ fn to_lambda1(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n }\n \n fn to_lambda2(b: fn(uint) -> uint) -> fn@(uint) -> uint {\n-    return to_lambda1({|x| b(x)}); //~ ERROR illegal move from argument `b`\n+    return to_lambda1(|x| b(x)); //~ ERROR illegal move from argument `b`\n }\n \n fn main() {"}, {"sha": "2aaffe5e6849cf35697426aba01b54fc6ab7ab1b", "filename": "src/test/compile-fail/issue-1896.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd6536f8687b1b4fb166594ed5cf79db0ec1436d/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6536f8687b1b4fb166594ed5cf79db0ec1436d/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896.rs?ref=bd6536f8687b1b4fb166594ed5cf79db0ec1436d", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type t<T> = { f: fn() -> T };\n-\n-fn f<T>(_x: t<T>) {}\n-\n-fn main() {\n-    let x: t<()> = { f: { || () } }; //~ ERROR expected & closure, found @ closure\n-    //~^ ERROR in field `f`, expected & closure, found @ closure\n-    f(x);\n-}\n\\ No newline at end of file"}, {"sha": "f29afabf5565e0fdfccf0d635c336d9126094287", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -21,5 +21,7 @@ impl<A> ~[A]: vec_monad<A> {\n    }\n }\n fn main() {\n-    [\"hi\"].bind({|x| [x] }); //~ ERROR type `[&static/str]/1` does not implement any method in scope named `bind`\n+    [\"hi\"].bind(|x| [x] );\n+    //~^ ERROR type `[&static/str]/1` does not implement any method in scope named `bind`\n+    //~^^ ERROR Unconstrained region variable\n }"}, {"sha": "5d0f6bb3e04f67ee6774970a60186b018ca61e7e", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -16,6 +16,6 @@ fn f(a: @int) {\n \n fn main() {\n     let b = @0;\n-    let g = {|move b|f(b)};\n+    let g : fn@() = |move b|f(b);\n     g();\n }\n\\ No newline at end of file"}, {"sha": "69f2995df30c90cb69c30b95d565e0fc5e1fdd80", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type foo = { mut z : fn@() };\n+struct foo { mut z : fn@() }\n \n fn nop() { }\n fn nop_foo(_x : @foo) { }\n \n fn main() {\n-    let w = @{ mut z: {||nop()} };\n-    let x = {||nop_foo(w)};\n+    let w = @foo{ mut z: || nop() };\n+    let x : fn@() = || nop_foo(w);\n     w.z = x;\n }\n\\ No newline at end of file"}, {"sha": "f7c7cdc76f5fc13c5eb8a85e8c92565ab7146c5d", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type foo = { mut z : fn@() };\n+struct foo { mut z : fn@() }\n \n fn nop() { }\n fn nop_foo(_y: ~[int], _x : @foo) { }\n \n fn main() {\n-    let w = @{ mut z: {||nop()} };\n-    let x = {||nop_foo(~[], w)};\n+    let w = @foo{ z: || nop() };\n+    let x : fn@() = || nop_foo(~[], w);\n     w.z = x;\n }\n\\ No newline at end of file"}, {"sha": "2d05de2d4fdd4b27d307f7e5a0c5c6661de4107d", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type foo = { mut z : fn@() };\n+struct foo { mut z : fn@() }\n \n fn nop() { }\n fn nop_foo(_y: @int, _x : @foo) { }\n \n fn o() -> @int { @10 }\n \n fn main() {\n-    let w = @{ mut z: {||nop()} };\n-    let x = {||nop_foo(o(), w)};\n+    let w = @foo { mut z: || nop() };\n+    let x : fn@() = || nop_foo(o(), w);\n     w.z = x;\n }\n\\ No newline at end of file"}, {"sha": "d906ea6f91e1455b71d322c15dd553d2a8b3b28f", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -12,11 +12,11 @@\n #[legacy_modes];\n \n fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n-    return f({|a|fix_help(f, a)}, x);\n+    return f( |a| fix_help(f, a), x);\n }\n \n fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n-    return {|a|fix_help(f, a)};\n+    return |a| fix_help(f, a);\n }\n \n fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {"}, {"sha": "06f01a67453e15ef699f967a6261c7e2479577de", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -12,11 +12,11 @@\n #[legacy_modes];\n \n fn fix_help<A: &static, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n-    return f({|a|fix_help(f, a)}, x);\n+    return f(|a| fix_help(f, a), x);\n }\n \n fn fix<A: &static, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n-    return {|a|fix_help(f, a)};\n+    return |a| fix_help(f, a);\n }\n \n fn fact_(f: fn@(&&v: int) -> int, &&n: int) -> int {"}, {"sha": "190177e53cbdd48513b6c396bf8ce8cca8f956e9", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84825ee3109a69e4546f66bd3547511d91a73255/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=84825ee3109a69e4546f66bd3547511d91a73255", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     // Ensure function arguments and box arguments interact sanely.\n     fn call_me(x: fn() -> int, y: ~int) { assert x() == *y; }\n     let q = ~30;\n-    call_me({|copy q| *q}, q);\n+    call_me(|| *q, q);\n \n     // Check that no false positives are found in loops.\n     let mut q = ~40, p = 10;"}]}