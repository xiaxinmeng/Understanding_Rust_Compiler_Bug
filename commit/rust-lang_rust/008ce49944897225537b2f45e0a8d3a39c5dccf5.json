{"sha": "008ce49944897225537b2f45e0a8d3a39c5dccf5", "node_id": "C_kwDOAAsO6NoAKDAwOGNlNDk5NDQ4OTcyMjU1MzdiMmY0NWUwYThkM2EzOWM1ZGNjZjU", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2022-08-07T18:41:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-07T18:41:38Z"}, "message": "Create armv4t_none_eabi.md", "tree": {"sha": "1557af70026d4971cb39eb930d01ca3caa973796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1557af70026d4971cb39eb930d01ca3caa973796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/008ce49944897225537b2f45e0a8d3a39c5dccf5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8AdiCRBK7hj4Ov3rIwAArH0IAFuPM1wViILZ7UTy6BS6iyL3\nn4Pj5iguufnBP/mJudD6WvmkUtIP0mM1IQRDPyBi8/RYojgGxebfkQY1zO9vux9X\ntpOBngBQxG/sJaMCAptl5BkyJj3v0VJ3w4bWgHw7T6j8a1eBVUokH5Ntu8r+M+M/\nsVmLEThoWgwiAkGFJxvbDBxKDxCfxOKY156DeqsltsF1OZGDauIv/eu8ur6N294/\nqKkoo3qQEnsQAPUIJo2quamblzxdt6zLWyHKikT8IkNdlxYzV+nU3lBqq+pjHCjE\n+jt9nnxQrrLzTbDtoVpGjXSNqilqeC8A79mTr/pU8rsZRbc5SZSRkIz/0NwXB+k=\n=Eqrd\n-----END PGP SIGNATURE-----\n", "payload": "tree 1557af70026d4971cb39eb930d01ca3caa973796\nparent a8b445404769fab8c4497e13a00e03c55e5928ef\nauthor Lokathor <zefria@gmail.com> 1659897698 -0600\ncommitter GitHub <noreply@github.com> 1659897698 -0600\n\nCreate armv4t_none_eabi.md"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/008ce49944897225537b2f45e0a8d3a39c5dccf5", "html_url": "https://github.com/rust-lang/rust/commit/008ce49944897225537b2f45e0a8d3a39c5dccf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/008ce49944897225537b2f45e0a8d3a39c5dccf5/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b445404769fab8c4497e13a00e03c55e5928ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b445404769fab8c4497e13a00e03c55e5928ef", "html_url": "https://github.com/rust-lang/rust/commit/a8b445404769fab8c4497e13a00e03c55e5928ef"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "cf831e1595e40eae131d6cfa640009c2cec7d104", "filename": "src/doc/rustc/src/platform-support/armv4t_none_eabi.md", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/008ce49944897225537b2f45e0a8d3a39c5dccf5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/008ce49944897225537b2f45e0a8d3a39c5dccf5/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t_none_eabi.md?ref=008ce49944897225537b2f45e0a8d3a39c5dccf5", "patch": "@@ -0,0 +1,70 @@\n+# armv4t-none-eabi\n+\n+Tier 3\n+\n+Bare-metal target for any cpu in the ARMv4T architecture family, supporting\n+ARM/Thumb code interworking (aka `a32`/`t32`), with ARM code as the default code\n+generation.\n+\n+In particular this supports the Gameboy Advance (GBA), but there's nothing GBA\n+specific with this target, so any ARMv4T device should work fine.\n+\n+## Target Maintainers\n+\n+* [@Lokathor](https://github.com/lokathor)\n+\n+## Requirements\n+\n+The target is cross-compiled, and uses static linking.\n+\n+The linker that comes with rustc cannot link for this platform (the platform is\n+too old). You will need the `arm-none-eabi-ld` linker from a GNU Binutils\n+targeting ARM. This can be obtained for Windows/Mac/Linux from the [ARM\n+Developer Website][arm-dev], or possibly from your OS's package manager.\n+\n+[arm-dev]: https://developer.arm.com/Tools%20and%20Software/GNU%20Toolchain\n+\n+This target doesn't provide a linker script, you'll need to bring your own\n+according to the specific device you want to target. Pass\n+`-Clink-arg=-Tyour_script.ld` as a rustc argument to make the linker use\n+`your_script.ld` during linking.\n+\n+## Building Rust Programs\n+\n+Because it is Tier 3, rust does not yet ship pre-compiled artifacts for this target.\n+\n+Just use the `build-std` nightly cargo feature to build the `core` library. You\n+can pass this as a command line argument to cargo, or your `.cargo/config.toml`\n+file might include the following lines:\n+\n+```toml\n+[unstable]\n+build-std = [\"core\"]\n+```\n+\n+Most of `core` should work as expected, with the following notes:\n+* the target is \"soft float\", so `f32` and `f64` operations are emulated in\n+  software.\n+* integer division is also emulated in software.\n+* the target is old enough that it doesn't have atomic instructions.\n+\n+Rust programs are output as ELF files.\n+\n+For running on hardware, you'll generally need to extract the \"raw\" program code\n+out of the ELF and into a file of its own. The `objcopy` program provided as\n+part of the GNU Binutils can do this:\n+\n+```shell\n+arm-none-eabi-objcopy --output-target binary [in_file] [out_file]\n+```\n+\n+## Testing\n+\n+This is a cross-compiled target that you will need to emulate during testing.\n+\n+Because this is a device-agnostic target, and the exact emulator that you'll\n+need depends on the specific device you want to run your code on.\n+\n+For example, when programming for the Gameboy Advance, the\n+[mgba-test-runner](https://github.com/agbrs/agb) program could be used to make a\n+normal set of rust tests be run within the `mgba` emulator."}]}