{"sha": "72d65019c789138f555c7cf7139508d2f9f0dffe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDY1MDE5Yzc4OTEzOGY1NTVjN2NmNzEzOTUwOGQyZjlmMGRmZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-09T14:00:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-09T14:00:12Z"}, "message": "Auto merge of #45075 - alexcrichton:inline-less, r=michaelwoerister\n\nrustc: Don't inline in CGUs at -O0\n\nThis commit tweaks the behavior of inlining functions into multiple codegen\nunits when rustc is compiling in debug mode. Today rustc will unconditionally\ntreat `#[inline]` functions by translating them into all codegen units that\nthey're needed within, marking the linkage as `internal`. This commit changes\nthe behavior so that in debug mode (compiling at `-O0`) rustc will instead only\ntranslate `#[inline]` functions into *one* codegen unit, forcing all other\ncodegen units to reference this one copy.\n\nThe goal here is to improve debug compile times by reducing the amount of\ntranslation that happens on behalf of multiple codegen units. It was discovered\nin #44941 that increasing the number of codegen units had the adverse side\neffect of increasing the overal work done by the compiler, and the suspicion\nhere was that the compiler was inlining, translating, and codegen'ing more\nfunctions with more codegen units (for example `String` would be basically\ninlined into all codegen units if used). The strategy in this commit should\nreduce the cost of `#[inline]` functions to being equivalent to one codegen\nunit, which is only translating and codegen'ing inline functions once.\n\nCollected [data] shows that this does indeed improve the situation from [before]\nas the overall cpu-clock time increases at a much slower rate and when pinned to\none core rustc does not consume significantly more wall clock time than with one\ncodegen unit.\n\nOne caveat of this commit is that the symbol names for inlined functions that\nare only translated once needed some slight tweaking. These inline functions\ncould be translated into multiple crates and we need to make sure the symbols\ndon't collideA so the crate name/disambiguator is mixed in to the symbol name\nhash in these situations.\n\n[data]: https://github.com/rust-lang/rust/issues/44941#issuecomment-334880911\n[before]: https://github.com/rust-lang/rust/issues/44941#issuecomment-334583384", "tree": {"sha": "fce9e609e391a55b5d4a51a91ab50cc1af670b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce9e609e391a55b5d4a51a91ab50cc1af670b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d65019c789138f555c7cf7139508d2f9f0dffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d65019c789138f555c7cf7139508d2f9f0dffe", "html_url": "https://github.com/rust-lang/rust/commit/72d65019c789138f555c7cf7139508d2f9f0dffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d65019c789138f555c7cf7139508d2f9f0dffe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7acd29ad5a49f6123185502d8ca92822c477f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7acd29ad5a49f6123185502d8ca92822c477f55", "html_url": "https://github.com/rust-lang/rust/commit/d7acd29ad5a49f6123185502d8ca92822c477f55"}, {"sha": "4b2bdf7b543df0ae28ce27db700ad46d9be59eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2bdf7b543df0ae28ce27db700ad46d9be59eed", "html_url": "https://github.com/rust-lang/rust/commit/4b2bdf7b543df0ae28ce27db700ad46d9be59eed"}], "stats": {"total": 285, "additions": 202, "deletions": 83}, "files": [{"sha": "fc1c5e187ecc7b79d95d67dcd4df548b66f0ad44", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -1100,6 +1100,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n     thinlto: bool = (false, parse_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n+    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether #[inline] functions are in all cgus\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "66a27f1c4a9b1d91e6365d02baf98d2a57d65295", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -98,8 +98,10 @@\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n use monomorphize::Instance;\n+use trans_item::{TransItemExt, InstantiationMode};\n \n use rustc::middle::weak_lang_items;\n+use rustc::middle::trans::TransItem;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -150,7 +152,10 @@ pub fn provide(providers: &mut Providers) {\n fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                              // the DefId of the item this name is for\n-                             def_id: Option<DefId>,\n+                             def_id: DefId,\n+\n+                             // instance this name will be for\n+                             instance: Instance<'tcx>,\n \n                              // type of the item, without any generic\n                              // parameters substituted; this is\n@@ -160,7 +165,7 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                              // values for generic type parameters,\n                              // if any.\n-                             substs: Option<&'tcx Substs<'tcx>>)\n+                             substs: &'tcx Substs<'tcx>)\n                              -> u64 {\n     debug!(\"get_symbol_hash(def_id={:?}, parameters={:?})\", def_id, substs);\n \n@@ -170,7 +175,7 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // the main symbol name is not necessarily unique; hash in the\n         // compiler's internal def-path, guaranteeing each symbol has a\n         // truly unique path\n-        hasher.hash(def_id.map(|def_id| tcx.def_path_hash(def_id)));\n+        hasher.hash(tcx.def_path_hash(def_id));\n \n         // Include the main item-type. Note that, in this case, the\n         // assertions about `needs_subst` may not hold, but this item-type\n@@ -186,19 +191,36 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         // also include any type parameters (for generic items)\n-        if let Some(substs) = substs {\n-            assert!(!substs.has_erasable_regions());\n-            assert!(!substs.needs_subst());\n-            substs.visit_with(&mut hasher);\n-\n-            // If this is an instance of a generic function, we also hash in\n-            // the ID of the instantiating crate. This avoids symbol conflicts\n-            // in case the same instances is emitted in two crates of the same\n-            // project.\n-            if substs.types().next().is_some() {\n-                hasher.hash(tcx.crate_name.as_str());\n-                hasher.hash(tcx.sess.local_crate_disambiguator().as_str());\n+        assert!(!substs.has_erasable_regions());\n+        assert!(!substs.needs_subst());\n+        substs.visit_with(&mut hasher);\n+\n+        let mut avoid_cross_crate_conflicts = false;\n+\n+        // If this is an instance of a generic function, we also hash in\n+        // the ID of the instantiating crate. This avoids symbol conflicts\n+        // in case the same instances is emitted in two crates of the same\n+        // project.\n+        if substs.types().next().is_some() {\n+            avoid_cross_crate_conflicts = true;\n+        }\n+\n+        // If we're dealing with an instance of a function that's inlined from\n+        // another crate but we're marking it as globally shared to our\n+        // compliation (aka we're not making an internal copy in each of our\n+        // codegen units) then this symbol may become an exported (but hidden\n+        // visibility) symbol. This means that multiple crates may do the same\n+        // and we want to be sure to avoid any symbol conflicts here.\n+        match TransItem::Fn(instance).instantiation_mode(tcx) {\n+            InstantiationMode::GloballyShared { may_conflict: true } => {\n+                avoid_cross_crate_conflicts = true;\n             }\n+            _ => {}\n+        }\n+\n+        if avoid_cross_crate_conflicts {\n+            hasher.hash(tcx.crate_name.as_str());\n+            hasher.hash(tcx.sess.local_crate_disambiguator().as_str());\n         }\n     });\n \n@@ -309,7 +331,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n     // and should not matter anyhow.\n     let instance_ty = tcx.erase_regions(&instance_ty);\n \n-    let hash = get_symbol_hash(tcx, Some(def_id), instance_ty, Some(substs));\n+    let hash = get_symbol_hash(tcx, def_id, instance, instance_ty, substs);\n \n     SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id)).finish(hash)\n }"}, {"sha": "9d1e36fa581061e79bc624f2cadc9e28a021d616", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -401,9 +401,9 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        caller: TransItem<'tcx>,\n-                                        callees: &[TransItem<'tcx>],\n-                                        inlining_map: &mut InliningMap<'tcx>) {\n+                             caller: TransItem<'tcx>,\n+                             callees: &[TransItem<'tcx>],\n+                             inlining_map: &mut InliningMap<'tcx>) {\n     let is_inlining_candidate = |trans_item: &TransItem<'tcx>| {\n         trans_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };"}, {"sha": "0d46ea64f9f7f8b45f15b6848b6e8563af7ff28f", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 56, "deletions": 57, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -279,75 +279,74 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut internalization_candidates = FxHashSet();\n \n     for trans_item in trans_items {\n-        let is_root = trans_item.instantiation_mode(tcx) == InstantiationMode::GloballyShared;\n+        match trans_item.instantiation_mode(tcx) {\n+            InstantiationMode::GloballyShared { .. } => {}\n+            InstantiationMode::LocalCopy => continue,\n+        }\n \n-        if is_root {\n-            let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n-            let is_volatile = is_incremental_build &&\n-                              trans_item.is_generic_fn();\n+        let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n+        let is_volatile = is_incremental_build &&\n+                          trans_item.is_generic_fn();\n \n-            let codegen_unit_name = match characteristic_def_id {\n-                Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n-                None => Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str(),\n-            };\n+        let codegen_unit_name = match characteristic_def_id {\n+            Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n+            None => Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str(),\n+        };\n \n-            let make_codegen_unit = || {\n-                CodegenUnit::new(codegen_unit_name.clone())\n-            };\n+        let make_codegen_unit = || {\n+            CodegenUnit::new(codegen_unit_name.clone())\n+        };\n \n-            let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n-                                                .or_insert_with(make_codegen_unit);\n-\n-            let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n-                Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n-                None => {\n-                    match trans_item {\n-                        TransItem::Fn(ref instance) => {\n-                            let visibility = match instance.def {\n-                                InstanceDef::Item(def_id) => {\n-                                    if def_id.is_local() {\n-                                        if tcx.is_exported_symbol(def_id) {\n-                                            Visibility::Default\n-                                        } else {\n-                                            internalization_candidates.insert(trans_item);\n-                                            Visibility::Hidden\n-                                        }\n+        let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n+                                            .or_insert_with(make_codegen_unit);\n+\n+        let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n+            Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n+            None => {\n+                match trans_item {\n+                    TransItem::Fn(ref instance) => {\n+                        let visibility = match instance.def {\n+                            InstanceDef::Item(def_id) => {\n+                                if def_id.is_local() {\n+                                    if tcx.is_exported_symbol(def_id) {\n+                                        Visibility::Default\n                                     } else {\n-                                        internalization_candidates.insert(trans_item);\n                                         Visibility::Hidden\n                                     }\n+                                } else {\n+                                    Visibility::Hidden\n                                 }\n-                                InstanceDef::FnPtrShim(..) |\n-                                InstanceDef::Virtual(..) |\n-                                InstanceDef::Intrinsic(..) |\n-                                InstanceDef::ClosureOnceShim { .. } |\n-                                InstanceDef::DropGlue(..) |\n-                                InstanceDef::CloneShim(..) => {\n-                                    bug!(\"partitioning: Encountered unexpected\n-                                          root translation item: {:?}\",\n-                                          trans_item)\n-                                }\n-                            };\n-                            (Linkage::External, visibility)\n-                        }\n-                        TransItem::Static(node_id) |\n-                        TransItem::GlobalAsm(node_id) => {\n-                            let def_id = tcx.hir.local_def_id(node_id);\n-                            let visibility = if tcx.is_exported_symbol(def_id) {\n-                                Visibility::Default\n-                            } else {\n-                                internalization_candidates.insert(trans_item);\n+                            }\n+                            InstanceDef::FnPtrShim(..) |\n+                            InstanceDef::Virtual(..) |\n+                            InstanceDef::Intrinsic(..) |\n+                            InstanceDef::ClosureOnceShim { .. } |\n+                            InstanceDef::DropGlue(..) |\n+                            InstanceDef::CloneShim(..) => {\n                                 Visibility::Hidden\n-                            };\n-                            (Linkage::External, visibility)\n-                        }\n+                            }\n+                        };\n+                        (Linkage::External, visibility)\n+                    }\n+                    TransItem::Static(node_id) |\n+                    TransItem::GlobalAsm(node_id) => {\n+                        let def_id = tcx.hir.local_def_id(node_id);\n+                        let visibility = if tcx.is_exported_symbol(def_id) {\n+                            Visibility::Default\n+                        } else {\n+                            Visibility::Hidden\n+                        };\n+                        (Linkage::External, visibility)\n                     }\n                 }\n-            };\n-\n-            codegen_unit.items_mut().insert(trans_item, (linkage, visibility));\n-            roots.insert(trans_item);\n+            }\n+        };\n+        if visibility == Visibility::Hidden {\n+            internalization_candidates.insert(trans_item);\n         }\n+\n+        codegen_unit.items_mut().insert(trans_item, (linkage, visibility));\n+        roots.insert(trans_item);\n     }\n \n     // always ensure we have at least one CGU; otherwise, if we have a"}, {"sha": "e40b1617d0a01d12ba9b631514e62d4af9c15123", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -26,6 +26,7 @@ use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::trans::{Linkage, Visibility};\n+use rustc::session::config::OptLevel;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n@@ -44,7 +45,20 @@ pub use rustc::middle::trans::TransItem;\n pub enum InstantiationMode {\n     /// There will be exactly one instance of the given TransItem. It will have\n     /// external linkage so that it can be linked to from other codegen units.\n-    GloballyShared,\n+    GloballyShared {\n+        /// In some compilation scenarios we may decide to take functions that\n+        /// are typically `LocalCopy` and instead move them to `GloballyShared`\n+        /// to avoid translating them a bunch of times. In this situation,\n+        /// however, our local copy may conflict with other crates also\n+        /// inlining the same function.\n+        ///\n+        /// This flag indicates that this situation is occuring, and informs\n+        /// symbol name calculation that some extra mangling is needed to\n+        /// avoid conflicts. Note that this may eventually go away entirely if\n+        /// ThinLTO enables us to *always* have a globally shared instance of a\n+        /// function within one crate's compilation.\n+        may_conflict: bool,\n+    },\n \n     /// Each codegen unit containing a reference to the given TransItem will\n     /// have its own private copy of the function (with internal linkage).\n@@ -154,18 +168,31 @@ pub trait TransItemExt<'a, 'tcx>: fmt::Debug {\n     fn instantiation_mode(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                           -> InstantiationMode {\n+        let inline_in_all_cgus =\n+            tcx.sess.opts.debugging_opts.inline_in_all_cgus.unwrap_or_else(|| {\n+                tcx.sess.opts.optimize != OptLevel::No\n+            });\n+\n         match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => {\n                 if self.explicit_linkage(tcx).is_none() &&\n                     common::requests_inline(tcx, instance)\n                 {\n-                    InstantiationMode::LocalCopy\n+                    if inline_in_all_cgus {\n+                        InstantiationMode::LocalCopy\n+                    } else {\n+                        InstantiationMode::GloballyShared  { may_conflict: true }\n+                    }\n                 } else {\n-                    InstantiationMode::GloballyShared\n+                    InstantiationMode::GloballyShared  { may_conflict: false }\n                 }\n             }\n-            TransItem::Static(..) => InstantiationMode::GloballyShared,\n-            TransItem::GlobalAsm(..) => InstantiationMode::GloballyShared,\n+            TransItem::Static(..) => {\n+                InstantiationMode::GloballyShared { may_conflict: false }\n+            }\n+            TransItem::GlobalAsm(..) => {\n+                InstantiationMode::GloballyShared { may_conflict: false }\n+            }\n         }\n     }\n "}, {"sha": "b8033b88fb75eaec0b2d81ea031821bb8baa1dec", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<drop_in_place_intrinsic::StructWithDtor[0]> @@ drop_in_place_intrinsic0[Internal]\n struct StructWithDtor(u32);"}, {"sha": "65936d12e316fde81392057ffbaeb02f1309d9ed", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "e32366d15c33718c82a64b88b9713ab6c131de38", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "5765f230e8bd4331336bd9fb7235595dc449a4ed", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "be560690e51903563fb616c20cd51430c353c804", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "ad1475a73f7cc58aad6987f8625673112f1bba07", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "d7e457cde8a9092c15fd3fe97ef32328ac9a09e7", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n #![feature(coerce_unsized)]"}, {"sha": "29528644ed0a055c714fe8ea7082e9dd27c7f46a", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -13,6 +13,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/extern-drop-glue\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "4bfd35b59bc120a7c20ad86f8ed4c1195d9f2422", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/inlining-from-extern-crate\n+// compile-flags:-Zinline-in-all-cgus\n \n #![crate_type=\"lib\"]\n "}, {"sha": "65e91343ccfcf2c957678d49949fb4f2be65ec3a", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-drop-glue\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "ccc8f03a40ffebb2e6678e0b8f15a42c32be732a", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// We specify -Z incremental here because we want to test the partitioning for\n+// incremental compilation\n+// compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-inlining-but-not-all\n+// compile-flags:-Zinline-in-all-cgus=no\n+\n+#![allow(dead_code)]\n+#![crate_type=\"lib\"]\n+\n+mod inline {\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::inline[0]::inlined_function[0] @@ local_inlining_but_not_all-inline[External]\n+    #[inline(always)]\n+    pub fn inlined_function()\n+    {\n+\n+    }\n+}\n+\n+mod user1 {\n+    use super::inline;\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user1[0]::foo[0] @@ local_inlining_but_not_all-user1[Internal]\n+    fn foo() {\n+        inline::inlined_function();\n+    }\n+}\n+\n+mod user2 {\n+    use super::inline;\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user2[0]::bar[0] @@ local_inlining_but_not_all-user2[Internal]\n+    fn bar() {\n+        inline::inlined_function();\n+    }\n+}\n+\n+mod non_user {\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::non_user[0]::baz[0] @@ local_inlining_but_not_all-non_user[Internal]\n+    fn baz() {\n+\n+    }\n+}"}, {"sha": "f31761912412e270191e1707614cb658c8117a48", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-inlining\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "bda76a8789f0f07790e6b9c20462627a584fb391", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-transitive-inlining\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "302f9312b57095ef125cd5f27fd9e7aa9454fe2d", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -13,6 +13,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/vtable-through-const\n+// compile-flags:-Zinline-in-all-cgus\n \n // This test case makes sure, that references made through constants are\n // recorded properly in the InliningMap."}, {"sha": "ccd4e1b0e715a9f72cbabc15bedcf8aea1159fb5", "filename": "src/test/run-make/sepcomp-cci-copies/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -5,5 +5,6 @@\n \n all:\n \t$(RUSTC) cci_lib.rs\n-\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3 \\\n+\t\t-Z inline-in-all-cgus\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ .*cci_fn)\" -eq \"2\" ]"}, {"sha": "1d20d940000f4d4e4f17f18257bff61dd4a040d8", "filename": "src/test/run-make/sepcomp-inlining/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72d65019c789138f555c7cf7139508d2f9f0dffe/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile?ref=72d65019c789138f555c7cf7139508d2f9f0dffe", "patch": "@@ -7,7 +7,8 @@\n # in only one compilation unit.\n \n all:\n-\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3 \\\n+\t\t-Z inline-in-all-cgus\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ i32\\ .*inlined)\" -eq \"0\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ internal\\ i32\\ .*inlined)\" -eq \"2\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ hidden\\ i32\\ .*normal)\" -eq \"1\" ]"}]}