{"sha": "e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNGJhZWQwZGI1YWE4ODBmMGI5ZmNkZmNmOTI5NTE1OWRkM2VlMDE=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-05-23T06:33:09Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-05-23T06:33:09Z"}, "message": "Fix ice-72487", "tree": {"sha": "d64cfd119e4a3d1fc1969c54c11d678d6fbac709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64cfd119e4a3d1fc1969c54c11d678d6fbac709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "html_url": "https://github.com/rust-lang/rust/commit/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "774146a679ab8aecb1e1dd58821e01b25aeaf65a", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04baed0db5aa880f0b9fcdfcf9295159dd3ee01/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=e04baed0db5aa880f0b9fcdfcf9295159dd3ee01", "patch": "@@ -223,19 +223,19 @@ impl InlineAsmReg {\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n-        name.with(|name| {\n-            Ok(match arch {\n-                InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                    Self::X86(X86InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, name)?),\n-                InlineAsmArch::AArch64 => {\n-                    Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                    Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-            })\n+        // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n+        let name = name.as_str();\n+        Ok(match arch {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, &name)?),\n+            InlineAsmArch::AArch64 => {\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n         })\n     }\n "}]}