{"sha": "96ad4a486381497da00ad12413bfc0fbac201189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YWQ0YTQ4NjM4MTQ5N2RhMDBhZDEyNDEzYmZjMGZiYWMyMDExODk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-15T02:31:01Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:18:43Z"}, "message": "rustc: use Repr and UserString instead of ppaux::ty_to_string.", "tree": {"sha": "f1f43183b3e82331d7f8b927226b580274423ce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f43183b3e82331d7f8b927226b580274423ce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ad4a486381497da00ad12413bfc0fbac201189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ad4a486381497da00ad12413bfc0fbac201189", "html_url": "https://github.com/rust-lang/rust/commit/96ad4a486381497da00ad12413bfc0fbac201189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ad4a486381497da00ad12413bfc0fbac201189/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0cb86a5c173096b08819af37f57970ac332561", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0cb86a5c173096b08819af37f57970ac332561", "html_url": "https://github.com/rust-lang/rust/commit/4e0cb86a5c173096b08819af37f57970ac332561"}], "stats": {"total": 285, "additions": 133, "deletions": 152}, "files": [{"sha": "4aa73d871d162954f5173bddcc4dba1dac682f86", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -31,7 +31,7 @@ use middle::privacy::{AllPublic, LastMod};\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::{self, Ty, MethodCall, MethodCallee, MethodOrigin};\n-use util::ppaux::ty_to_string;\n+use util::ppaux::Repr;\n \n use syntax::{ast, ast_util, codemap, fold};\n use syntax::codemap::Span;\n@@ -1624,7 +1624,7 @@ fn decode_side_tables(dcx: &DecodeContext,\n                     c::tag_table_node_type => {\n                         let ty = val_dsr.read_ty(dcx);\n                         debug!(\"inserting ty for node {}: {}\",\n-                               id, ty_to_string(dcx.tcx, ty));\n+                               id,  ty.repr(dcx.tcx));\n                         dcx.tcx.node_type_insert(id, ty);\n                     }\n                     c::tag_table_item_subst => {"}, {"sha": "11a1a1582c835e1aec9ae9d61bc37ba904375aef", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -36,7 +36,7 @@ use syntax::print::pprust::pat_to_string;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::visit::{self, Visitor, FnKind};\n-use util::ppaux::ty_to_string;\n+use util::ppaux::UserString;\n use util::nodemap::FnvHashMap;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n@@ -209,9 +209,8 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &ast::Expr) {\n                 if !type_is_empty(cx.tcx, pat_ty) {\n                     // We know the type is inhabited, so this must be wrong\n                     span_err!(cx.tcx.sess, ex.span, E0002,\n-                        \"non-exhaustive patterns: type {} is non-empty\",\n-                        ty_to_string(cx.tcx, pat_ty)\n-                    );\n+                              \"non-exhaustive patterns: type {} is non-empty\",\n+                              pat_ty.user_string(cx.tcx));\n                 }\n                 // If the type *is* empty, it's vacuously exhaustive\n                 return;\n@@ -244,11 +243,11 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                             span_warn!(cx.tcx.sess, p.span, E0170,\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n-                                &token::get_ident(ident.node), ty_to_string(cx.tcx, pat_ty));\n+                                &token::get_ident(ident.node), pat_ty.user_string(cx.tcx));\n                             fileline_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\",\n-                                ty_to_string(cx.tcx, pat_ty), &token::get_ident(ident.node));\n+                                pat_ty.user_string(cx.tcx), &token::get_ident(ident.node));\n                         }\n                     }\n                 }"}, {"sha": "bd3829cc395e91b7f18ab56141a3b3c1b9f0e43f", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -15,7 +15,7 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::ty::ParameterEnvironment;\n use middle::ty;\n-use util::ppaux::ty_to_string;\n+use util::ppaux::{Repr, UserString};\n \n use syntax::ast;\n use syntax::codemap::Span;\n@@ -59,11 +59,11 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'tcx> {\n                span: Span,\n                cmt: mc::cmt<'tcx>,\n                _: euv::ConsumeMode) {\n-        debug!(\"consume; cmt: {:?}; type: {}\", *cmt, ty_to_string(self.tcx, cmt.ty));\n+        debug!(\"consume; cmt: {:?}; type: {}\", *cmt, cmt.ty.repr(self.tcx));\n         if !ty::type_is_sized(Some(self.param_env), self.tcx, span, cmt.ty) {\n             span_err!(self.tcx.sess, span, E0161,\n                 \"cannot move a value of type {0}: the size of {0} cannot be statically determined\",\n-                ty_to_string(self.tcx, cmt.ty));\n+                cmt.ty.user_string(self.tcx));\n         }\n     }\n "}, {"sha": "c1a33c3387cde5ca25b6f0d674df5bdbc478373e", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -15,7 +15,7 @@ use self::UnsafeContext::*;\n use middle::def;\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n-use util::ppaux;\n+use util::ppaux::Repr;\n \n use syntax::ast;\n use syntax::codemap::Span;\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n             _ => return\n         };\n         debug!(\"effect: checking index with base type {}\",\n-                ppaux::ty_to_string(self.tcx, base_type));\n+                 base_type.repr(self.tcx));\n         match base_type.sty {\n             ty::TyBox(ty) | ty::TyRef(_, ty::mt{ty, ..}) => if ty::TyStr == ty.sty {\n                 span_err!(self.tcx.sess, e.span, E0134,\n@@ -143,7 +143,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 let method_call = MethodCall::expr(expr.id);\n                 let base_type = self.tcx.method_map.borrow().get(&method_call).unwrap().ty;\n                 debug!(\"effect: method call case, base type is {}\",\n-                       ppaux::ty_to_string(self.tcx, base_type));\n+                        base_type.repr(self.tcx));\n                 if type_is_unsafe_function(base_type) {\n                     self.require_unsafe(expr.span,\n                                         \"invocation of unsafe method\")\n@@ -152,15 +152,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             ast::ExprCall(ref base, _) => {\n                 let base_type = ty::node_id_to_type(self.tcx, base.id);\n                 debug!(\"effect: call case, base type is {}\",\n-                       ppaux::ty_to_string(self.tcx, base_type));\n+                        base_type.repr(self.tcx));\n                 if type_is_unsafe_function(base_type) {\n                     self.require_unsafe(expr.span, \"call to unsafe function\")\n                 }\n             }\n             ast::ExprUnary(ast::UnDeref, ref base) => {\n                 let base_type = ty::node_id_to_type(self.tcx, base.id);\n                 debug!(\"effect: unary case, base type is {}\",\n-                       ppaux::ty_to_string(self.tcx, base_type));\n+                        base_type.repr(self.tcx));\n                 if let ty::TyRawPtr(_) = base_type.sty {\n                     self.require_unsafe(expr.span, \"dereference of raw pointer\")\n                 }"}, {"sha": "aef2712105874854b4cf0eb36f0a0def0abb2260", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -36,7 +36,6 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;\n use util::nodemap::FnvHashMap;\n-use util::ppaux::ty_to_string;\n use util::ppaux::{Repr, UserString};\n \n use self::combine::CombineFields;\n@@ -862,8 +861,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {\n-        ty_to_string(self.tcx,\n-                     self.resolve_type_vars_if_possible(&t))\n+        self.resolve_type_vars_if_possible(&t).user_string(self.tcx)\n     }\n \n     pub fn tys_to_string(&self, ts: &[Ty<'tcx>]) -> String {"}, {"sha": "9006777eee37e37dc170aa53d8c1588592d074b2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -62,7 +62,6 @@ use middle::ty;\n use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n use middle::ty_walk::{self, TypeWalker};\n use util::ppaux::note_and_explain_region;\n-use util::ppaux::ty_to_string;\n use util::ppaux::{Repr, UserString};\n use util::common::{memoized, ErrorReported};\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n@@ -3568,7 +3567,7 @@ pub fn sequence_element_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         TyArray(ty, _) | TySlice(ty) => ty,\n         TyStr => mk_mach_uint(cx, ast::TyU8),\n         _ => cx.sess.bug(&format!(\"sequence_element_type called on non-sequence value: {}\",\n-                                 ty_to_string(cx, ty))),\n+                                  ty.user_string(cx))),\n     }\n }\n \n@@ -4139,24 +4138,20 @@ pub fn is_ffi_safe<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n     fn type_requires<'tcx>(cx: &ctxt<'tcx>, seen: &mut Vec<DefId>,\n                            r_ty: Ty<'tcx>, ty: Ty<'tcx>) -> bool {\n-        debug!(\"type_requires({:?}, {:?})?\",\n-               ::util::ppaux::ty_to_string(cx, r_ty),\n-               ::util::ppaux::ty_to_string(cx, ty));\n+        debug!(\"type_requires({}, {})?\",\n+               r_ty.repr(cx), ty.repr(cx));\n \n         let r = r_ty == ty || subtypes_require(cx, seen, r_ty, ty);\n \n-        debug!(\"type_requires({:?}, {:?})? {:?}\",\n-               ::util::ppaux::ty_to_string(cx, r_ty),\n-               ::util::ppaux::ty_to_string(cx, ty),\n-               r);\n+        debug!(\"type_requires({}, {})? {:?}\",\n+               r_ty.repr(cx), ty.repr(cx), r);\n         return r;\n     }\n \n     fn subtypes_require<'tcx>(cx: &ctxt<'tcx>, seen: &mut Vec<DefId>,\n                               r_ty: Ty<'tcx>, ty: Ty<'tcx>) -> bool {\n-        debug!(\"subtypes_require({:?}, {:?})?\",\n-               ::util::ppaux::ty_to_string(cx, r_ty),\n-               ::util::ppaux::ty_to_string(cx, ty));\n+        debug!(\"subtypes_require({}, {})?\",\n+               r_ty.repr(cx), ty.repr(cx));\n \n         let r = match ty.sty {\n             // fixed length vectors need special treatment compared to\n@@ -4234,10 +4229,8 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             }\n         };\n \n-        debug!(\"subtypes_require({:?}, {:?})? {:?}\",\n-               ::util::ppaux::ty_to_string(cx, r_ty),\n-               ::util::ppaux::ty_to_string(cx, ty),\n-               r);\n+        debug!(\"subtypes_require({}, {})? {:?}\",\n+               r_ty.repr(cx), ty.repr(cx), r);\n \n         return r;\n     }\n@@ -4343,8 +4336,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n     fn is_type_structurally_recursive<'tcx>(cx: &ctxt<'tcx>, sp: Span,\n                                             seen: &mut Vec<Ty<'tcx>>,\n                                             ty: Ty<'tcx>) -> Representability {\n-        debug!(\"is_type_structurally_recursive: {:?}\",\n-               ::util::ppaux::ty_to_string(cx, ty));\n+        debug!(\"is_type_structurally_recursive: {}\", ty.repr(cx));\n \n         match ty.sty {\n             TyStruct(did, _) | TyEnum(did, _) => {\n@@ -4363,9 +4355,9 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                     match iter.next() {\n                         Some(&seen_type) => {\n                             if same_struct_or_enum_def_id(seen_type, did) {\n-                                debug!(\"SelfRecursive: {:?} contains {:?}\",\n-                                       ::util::ppaux::ty_to_string(cx, seen_type),\n-                                       ::util::ppaux::ty_to_string(cx, ty));\n+                                debug!(\"SelfRecursive: {} contains {}\",\n+                                       seen_type.repr(cx),\n+                                       ty.repr(cx));\n                                 return SelfRecursive;\n                             }\n                         }\n@@ -4383,9 +4375,9 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n \n                     for &seen_type in iter {\n                         if same_type(ty, seen_type) {\n-                            debug!(\"ContainsRecursive: {:?} contains {:?}\",\n-                                   ::util::ppaux::ty_to_string(cx, seen_type),\n-                                   ::util::ppaux::ty_to_string(cx, ty));\n+                            debug!(\"ContainsRecursive: {} contains {}\",\n+                                   seen_type.repr(cx),\n+                                   ty.repr(cx));\n                             return ContainsRecursive;\n                         }\n                     }\n@@ -4405,16 +4397,14 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n         }\n     }\n \n-    debug!(\"is_type_representable: {:?}\",\n-           ::util::ppaux::ty_to_string(cx, ty));\n+    debug!(\"is_type_representable: {}\", ty.repr(cx));\n \n     // To avoid a stack overflow when checking an enum variant or struct that\n     // contains a different, structurally recursive type, maintain a stack\n     // of seen types and check recursion for each of them (issues #3008, #3779).\n     let mut seen: Vec<Ty> = Vec::new();\n     let r = is_type_structurally_recursive(cx, sp, &mut seen, ty);\n-    debug!(\"is_type_representable: {:?} is {:?}\",\n-           ::util::ppaux::ty_to_string(cx, ty), r);\n+    debug!(\"is_type_representable: {} is {:?}\", ty.repr(cx), r);\n     r\n }\n \n@@ -4857,7 +4847,7 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n                                         span,\n                                         &format!(\"the {}th autoderef failed: {}\",\n                                                 i,\n-                                                ty_to_string(cx, adjusted_ty))\n+                                                 adjusted_ty.user_string(cx))\n                                         );\n                                 }\n                             }\n@@ -5102,10 +5092,8 @@ pub fn impl_or_trait_item_idx(id: ast::Name, trait_items: &[ImplOrTraitItem])\n pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n     match ty.sty {\n         TyBool | TyChar | TyInt(_) |\n-        TyUint(_) | TyFloat(_) | TyStr => {\n-            ::util::ppaux::ty_to_string(cx, ty)\n-        }\n-        TyTuple(ref tys) if tys.is_empty() => ::util::ppaux::ty_to_string(cx, ty),\n+        TyUint(_) | TyFloat(_) | TyStr => ty.user_string(cx),\n+        TyTuple(ref tys) if tys.is_empty() => ty.user_string(cx),\n \n         TyEnum(id, _) => format!(\"enum `{}`\", item_path_str(cx, id)),\n         TyBox(_) => \"box\".to_string(),"}, {"sha": "8eaf19eb4741536fbcd4e1e1126840be40ce3f22", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -186,7 +186,7 @@ pub fn mutability_to_string(m: ast::Mutability) -> String {\n pub fn mt_to_string<'tcx>(cx: &ctxt<'tcx>, m: &mt<'tcx>) -> String {\n     format!(\"{}{}\",\n         mutability_to_string(m.mutbl),\n-        ty_to_string(cx, m.ty))\n+         m.ty.user_string(cx))\n }\n \n pub fn vec_map_to_string<T, F>(ts: &[T], f: F) -> String where\n@@ -196,7 +196,7 @@ pub fn vec_map_to_string<T, F>(ts: &[T], f: F) -> String where\n     format!(\"[{}]\", tstrs.connect(\", \"))\n }\n \n-pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n+fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n     fn bare_fn_to_string<'tcx>(cx: &ctxt<'tcx>,\n                                opt_def_id: Option<ast::DefId>,\n                                unsafety: ast::Unsafety,\n@@ -266,7 +266,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         s.push(bra);\n         let strs = sig.0.inputs\n             .iter()\n-            .map(|a| ty_to_string(cx, *a))\n+            .map(|a| a.user_string(cx))\n             .collect::<Vec<_>>();\n         s.push_str(&strs.connect(\", \"));\n         if sig.0.variadic {\n@@ -278,7 +278,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             ty::FnConverging(t) => {\n                 if !ty::type_is_nil(t) {\n                    s.push_str(\" -> \");\n-                   s.push_str(&ty_to_string(cx, t));\n+                   s.push_str(& t.user_string(cx));\n                 }\n             }\n             ty::FnDiverging => {\n@@ -307,12 +307,12 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         TyInt(t) => ast_util::int_ty_to_string(t, None).to_string(),\n         TyUint(t) => ast_util::uint_ty_to_string(t, None).to_string(),\n         TyFloat(t) => ast_util::float_ty_to_string(t).to_string(),\n-        TyBox(typ) => format!(\"Box<{}>\", ty_to_string(cx, typ)),\n+        TyBox(typ) => format!(\"Box<{}>\",  typ.user_string(cx)),\n         TyRawPtr(ref tm) => {\n             format!(\"*{} {}\", match tm.mutbl {\n                 ast::MutMutable => \"mut\",\n                 ast::MutImmutable => \"const\",\n-            }, ty_to_string(cx, tm.ty))\n+            },  tm.ty.user_string(cx))\n         }\n         TyRef(r, ref tm) => {\n             let mut buf = \"&\".to_owned();\n@@ -326,7 +326,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         TyTuple(ref elems) => {\n             let strs = elems\n                 .iter()\n-                .map(|elem| ty_to_string(cx, *elem))\n+                .map(|elem| elem.user_string(cx))\n                 .collect::<Vec<_>>();\n             match &strs[..] {\n                 [ref string] => format!(\"({},)\", string),\n@@ -375,10 +375,10 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             })\n         }\n         TyArray(t, sz) => {\n-            format!(\"[{}; {}]\", ty_to_string(cx, t), sz)\n+            format!(\"[{}; {}]\",  t.user_string(cx), sz)\n         }\n         TySlice(t) => {\n-            format!(\"[{}]\", ty_to_string(cx, t))\n+            format!(\"[{}]\",  t.user_string(cx))\n         }\n     }\n }\n@@ -475,7 +475,7 @@ fn parameterized<'tcx, GG>(cx: &ctxt<'tcx>,\n     };\n \n     for t in &tps[..tps.len() - num_defaults] {\n-        strs.push(ty_to_string(cx, *t))\n+        strs.push(t.user_string(cx))\n     }\n \n     for projection in projections {\n@@ -581,6 +581,12 @@ impl<'tcx, T:Repr<'tcx>> Repr<'tcx> for Vec<T> {\n     }\n }\n \n+impl<'a, 'tcx, T: ?Sized +UserString<'tcx>> UserString<'tcx> for &'a T {\n+    fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n+        UserString::user_string(*self, tcx)\n+    }\n+}\n+\n impl<'tcx, T:UserString<'tcx>> UserString<'tcx> for Vec<T> {\n     fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n         let strs: Vec<String> =\n@@ -672,7 +678,7 @@ impl<'tcx> Repr<'tcx> for ty::RegionParameterDef {\n \n impl<'tcx> Repr<'tcx> for ty::TyS<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        ty_to_string(tcx, self)\n+        self.user_string(tcx)\n     }\n }\n \n@@ -1290,9 +1296,9 @@ impl<'tcx> UserString<'tcx> for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> UserString<'tcx> for Ty<'tcx> {\n+impl<'tcx> UserString<'tcx> for ty::TyS<'tcx> {\n     fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n-        ty_to_string(tcx, *self)\n+        ty_to_string(tcx, self)\n     }\n }\n "}, {"sha": "597682c89eee821b009d6bc614428c4bbc78ccc1", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -25,7 +25,7 @@ use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n use rustc::session::config::Input;\n-use rustc::util::ppaux;\n+use rustc::util::ppaux::UserString;\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n use rustc_resolve as resolve;\n@@ -318,9 +318,7 @@ impl<'a, 'tcx> pprust::PpAnn for TypedAnnotation<'a, 'tcx> {\n                 try!(pp::word(&mut s.s, \"as\"));\n                 try!(pp::space(&mut s.s));\n                 try!(pp::word(&mut s.s,\n-                              &ppaux::ty_to_string(\n-                                  &self.tcx,\n-                                  ty::expr_ty(&self.tcx, expr))));\n+                              &ty::expr_ty(self.tcx, expr).user_string(self.tcx)));\n                 s.pclose()\n             }\n             _ => Ok(())"}, {"sha": "c3f5dc084fd8344546eac979e887f094f3267085", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -28,7 +28,7 @@ use rustc_typeck::middle::infer;\n use rustc_typeck::middle::infer::lub::Lub;\n use rustc_typeck::middle::infer::glb::Glb;\n use rustc_typeck::middle::infer::sub::Sub;\n-use rustc_typeck::util::ppaux::{ty_to_string, Repr, UserString};\n+use rustc_typeck::util::ppaux::{Repr, UserString};\n use rustc::ast_map;\n use rustc::session::{self,config};\n use syntax::{abi, ast};\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n     }\n \n     pub fn ty_to_string(&self, a: Ty<'tcx>) -> String {\n-        ty_to_string(self.infcx.tcx, a)\n+         a.user_string(self.infcx.tcx)\n     }\n \n     pub fn t_fn(&self,"}, {"sha": "755d7af9d4f63602d4edc0936e77f0942e6d9995", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -36,8 +36,8 @@ use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use middle::cfg;\n use rustc::ast_map;\n-use util::ppaux::ty_to_string;\n use util::nodemap::{FnvHashMap, NodeSet};\n+use util::ppaux::UserString;\n use lint::{Level, Context, LintPass, LintArray, Lint};\n \n use std::collections::{HashSet, BitSet};\n@@ -495,7 +495,7 @@ impl BoxPointers {\n         });\n \n         if n_uniq > 0 {\n-            let s = ty_to_string(cx.tcx, ty);\n+            let s =  ty.user_string(cx.tcx);\n             let m = format!(\"type uses owned (Box type) pointers: {}\", s);\n             cx.span_lint(BOX_POINTERS, span, &m[..]);\n         }"}, {"sha": "a5bca132e02d0431d0fa8e47f781a626aeb5891b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -25,7 +25,7 @@ use middle::ty::{self, Ty};\n use rustc::ast_map::{PathElem, PathElems, PathName};\n use trans::{CrateContext, CrateTranslation, gensym_name};\n use util::common::time;\n-use util::ppaux;\n+use util::ppaux::UserString;\n use util::sha2::{Digest, Sha256};\n use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;\n@@ -347,8 +347,7 @@ pub fn mangle_exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, path: PathEl\n pub fn mangle_internal_name_by_type_and_seq<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                       t: Ty<'tcx>,\n                                                       name: &str) -> String {\n-    let s = ppaux::ty_to_string(ccx.tcx(), t);\n-    let path = [PathName(token::intern(&s[..])),\n+    let path = [PathName(token::intern(&t.user_string(ccx.tcx()))),\n                 gensym_name(name)];\n     let hash = get_symbol_hash(ccx, t);\n     mangle(path.iter().cloned(), Some(&hash[..]))"}, {"sha": "6ec58337e723e28fddfb258be92de4243217802d", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -52,7 +52,7 @@ use syntax::ptr::P;\n use super::span_utils::SpanUtils;\n use super::recorder::{Recorder, FmtStrs};\n \n-use util::ppaux;\n+use util::ppaux::UserString;\n \n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $this:ident, $sp:expr) => {\n@@ -287,10 +287,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             collector.visit_pat(&arg.pat);\n             let span_utils = self.span.clone();\n             for &(id, ref p, _, _) in &collector.collected_paths {\n-                let typ =\n-                    ppaux::ty_to_string(\n-                        self.tcx,\n-                        *self.tcx.node_types().get(&id).unwrap());\n+                let typ = self.tcx.node_types().get(&id).unwrap().user_string(self.tcx);\n                 // get the span only for the name of the variable (I hope the path is only ever a\n                 // variable name, but who knows?)\n                 self.fmt.formal_str(p.span,\n@@ -1395,7 +1392,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 \"<mutable>\".to_string()\n             };\n             let types = self.tcx.node_types();\n-            let typ = ppaux::ty_to_string(self.tcx, *types.get(&id).unwrap());\n+            let typ = types.get(&id).unwrap().user_string(self.tcx);\n             // Get the span only for the name of the variable (I hope the path\n             // is only ever a variable name, but who knows?).\n             let sub_span = self.span.span_for_last_ident(p.span);"}, {"sha": "4116e6637aea69bc72e2a0086cd4ba01b7e8956c", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -23,7 +23,7 @@ use syntax::parse::token::{self, get_ident, keywords};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::ty_to_string;\n \n-use util::ppaux;\n+use util::ppaux::UserString;\n \n use self::span_utils::SpanUtils;\n \n@@ -292,9 +292,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 let qualname = format!(\"::{}::{}\",\n                                        self.tcx.map.path_to_string(parent),\n                                        name);\n-                let typ = ppaux::ty_to_string(&self.tcx,\n-                                              *self.tcx.node_types()\n-                                                  .get(&field.node.id).unwrap());\n+                let typ = self.tcx.node_types().get(&field.node.id).unwrap()\n+                                               .user_string(self.tcx);\n                 let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n                 Some(Data::VariableData(VariableData {\n                     id: field.node.id,"}, {"sha": "5b8986878c7abca4bd69b974e0933d2c6a6b2718", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -66,7 +66,7 @@ use trans::machine;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use util::ppaux::ty_to_string;\n+use util::ppaux::Repr as PrettyPrintRepr;\n \n type Hint = attr::ReprAttr;\n \n@@ -143,7 +143,7 @@ pub fn represent_node<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n pub fn represent_type<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 t: Ty<'tcx>)\n                                 -> Rc<Repr<'tcx>> {\n-    debug!(\"Representing: {}\", ty_to_string(cx.tcx(), t));\n+    debug!(\"Representing: {}\", t.repr(cx.tcx()));\n     match cx.adt_reprs().borrow().get(&t) {\n         Some(repr) => return repr.clone(),\n         None => {}\n@@ -382,7 +382,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             General(ity, fields, dtor_to_init_u8(dtor))\n         }\n         _ => cx.sess().bug(&format!(\"adt::represent_type called on non-ADT type: {}\",\n-                           ty_to_string(cx.tcx(), t)))\n+                           t.repr(cx.tcx())))\n     }\n }\n "}, {"sha": "f66188dcfb0c82bbcd4a37743972264afee493cb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -80,7 +80,7 @@ use trans::type_of;\n use trans::type_of::*;\n use trans::value::Value;\n use util::common::indenter;\n-use util::ppaux::{Repr, ty_to_string};\n+use util::ppaux::Repr;\n use util::sha2::Sha256;\n use util::nodemap::NodeMap;\n \n@@ -531,7 +531,7 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n       }\n       _ => {\n           cx.sess().unimpl(&format!(\"type in iter_structural_ty: {}\",\n-                                   ty_to_string(cx.tcx(), t)))\n+                                    t.repr(cx.tcx())))\n       }\n     }\n     return cx;\n@@ -641,7 +641,7 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n         }\n         _ => {\n             cx.sess().bug(&format!(\"fail-if-zero on unexpected type: {}\",\n-                                  ty_to_string(cx.tcx(), rhs_t)));\n+                                   rhs_t.repr(cx.tcx())));\n         }\n     };\n     let bcx = with_cond(cx, is_zero, |bcx| {\n@@ -1554,7 +1554,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     };\n     for monomorphized_arg_type in &monomorphized_arg_types {\n         debug!(\"trans_closure: monomorphized_arg_type: {}\",\n-               ty_to_string(ccx.tcx(), *monomorphized_arg_type));\n+               monomorphized_arg_type.repr(ccx.tcx()));\n     }\n     debug!(\"trans_closure: function lltype: {}\",\n            bcx.fcx.ccx.tn().val_to_string(bcx.fcx.llfn));\n@@ -1758,7 +1758,7 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n         _ => ccx.sess().bug(\n             &format!(\"trans_enum_variant_or_tuple_like_struct: \\\n                      unexpected ctor return type {}\",\n-                    ty_to_string(ccx.tcx(), ctor_ty)))\n+                    ctor_ty.repr(ccx.tcx())))\n     };\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);"}, {"sha": "610ac6a113bd66c2d6de1f72626ce596296c10eb", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -55,7 +55,6 @@ use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use rustc::ast_map;\n use util::ppaux::Repr;\n-use util::ppaux::ty_to_string;\n \n use syntax::abi as synabi;\n use syntax::ast;\n@@ -1166,8 +1165,8 @@ pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let llformal_arg_ty = type_of::type_of_explicit_arg(ccx, formal_arg_ty);\n         debug!(\"casting actual type ({}) to match formal ({})\",\n                bcx.val_to_string(val), bcx.llty_str(llformal_arg_ty));\n-        debug!(\"Rust types: {}; {}\", ty_to_string(bcx.tcx(), arg_datum_ty),\n-                                     ty_to_string(bcx.tcx(), formal_arg_ty));\n+        debug!(\"Rust types: {}; {}\", arg_datum_ty.repr(bcx.tcx()),\n+                                     formal_arg_ty.repr(bcx.tcx()));\n         val = PointerCast(bcx, val, llformal_arg_ty);\n     }\n "}, {"sha": "54f7e381f5e5cf19bf60486b2912b6e6f1571016", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -32,7 +32,7 @@ use trans::type_of;\n use middle::cast::{CastTy,IntTy};\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n-use util::ppaux::{Repr, ty_to_string};\n+use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n \n use std::iter::repeat;\n@@ -68,7 +68,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: &ast::Lit)\n                 _ => cx.sess().span_bug(lit.span,\n                         &format!(\"integer literal has type {} (expected int \\\n                                  or usize)\",\n-                                ty_to_string(cx.tcx(), lit_int_ty)))\n+                                lit_int_ty.repr(cx.tcx())))\n             }\n         }\n         ast::LitFloat(ref fs, t) => {\n@@ -161,7 +161,7 @@ fn const_deref<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         None => {\n             cx.sess().bug(&format!(\"unexpected dereferenceable type {}\",\n-                                   ty_to_string(cx.tcx(), ty)))\n+                                   ty.repr(cx.tcx())))\n         }\n     }\n }\n@@ -369,7 +369,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             llvm::LLVMDumpValue(C_undef(llty));\n         }\n         cx.sess().bug(&format!(\"const {} of type {} has size {} instead of {}\",\n-                         e.repr(cx.tcx()), ty_to_string(cx.tcx(), ety_adjusted),\n+                         e.repr(cx.tcx()), ety_adjusted.repr(cx.tcx()),\n                          csize, tsize));\n     }\n     (llconst, ety_adjusted)\n@@ -621,12 +621,12 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                       _ => cx.sess().span_bug(base.span,\n                                               &format!(\"index-expr base must be a vector \\\n                                                        or string type, found {}\",\n-                                                      ty_to_string(cx.tcx(), bt)))\n+                                                      bt.repr(cx.tcx())))\n                   },\n                   _ => cx.sess().span_bug(base.span,\n                                           &format!(\"index-expr base must be a vector \\\n                                                    or string type, found {}\",\n-                                                  ty_to_string(cx.tcx(), bt)))\n+                                                  bt.repr(cx.tcx())))\n               };\n \n               let len = llvm::LLVMConstIntGetZExtValue(len) as u64;"}, {"sha": "d73bc28ba196776ad53d94230c3e4177caed3c45", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -102,7 +102,7 @@ use trans::expr;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{self, Ty};\n-use util::ppaux::ty_to_string;\n+use util::ppaux::Repr;\n \n use std::fmt;\n use syntax::ast;\n@@ -616,7 +616,7 @@ impl<'tcx, K: KindOps + fmt::Debug> Datum<'tcx, K> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"Datum({}, {}, {:?})\",\n                 ccx.tn().val_to_string(self.val),\n-                ty_to_string(ccx.tcx(), self.ty),\n+                self.ty.repr(ccx.tcx()),\n                 self.kind)\n     }\n "}, {"sha": "842631ed94031e11376c6317dff779f051a4ea1e", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -34,7 +34,7 @@ use trans::type_::Type;\n use middle::ty::{self, Ty, ClosureTyper};\n use session::config::{self, FullDebugInfo};\n use util::nodemap::FnvHashMap;\n-use util::ppaux;\n+use util::ppaux::{Repr, UserString};\n use util::common::path2cstr;\n \n use libc::{c_uint, c_longlong};\n@@ -105,7 +105,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                        metadata: DIType) {\n         if self.type_to_metadata.insert(type_, metadata).is_some() {\n             cx.sess().bug(&format!(\"Type metadata for Ty '{}' is already in the TypeMap!\",\n-                                   ppaux::ty_to_string(cx.tcx(), type_)));\n+                                   type_.repr(cx.tcx())));\n         }\n     }\n \n@@ -298,8 +298,7 @@ impl<'tcx> TypeMap<'tcx> {\n             },\n             _ => {\n                 cx.sess().bug(&format!(\"get_unique_type_id_of_type() - unexpected type: {}, {:?}\",\n-                                      &ppaux::ty_to_string(cx.tcx(), type_),\n-                                      type_.sty))\n+                                       type_.repr(cx.tcx()), type_.sty))\n             }\n         };\n \n@@ -490,7 +489,7 @@ impl<'tcx> RecursiveTypeDescription<'tcx> {\n                        type_map.find_metadata_for_type(unfinished_type).is_none() {\n                         cx.sess().bug(&format!(\"Forward declaration of potentially recursive type \\\n                                               '{}' was not found in TypeMap!\",\n-                                              ppaux::ty_to_string(cx.tcx(), unfinished_type))\n+                                              unfinished_type.repr(cx.tcx()))\n                                       );\n                     }\n                 }\n@@ -676,10 +675,9 @@ fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let def_id = match trait_type.sty {\n         ty::TyTrait(ref data) => data.principal_def_id(),\n         _ => {\n-            let pp_type_name = ppaux::ty_to_string(cx.tcx(), trait_type);\n             cx.sess().bug(&format!(\"debuginfo: Unexpected trait-object type in \\\n                                    trait_pointer_metadata(): {}\",\n-                                   &pp_type_name[..]));\n+                                   trait_type.repr(cx.tcx())));\n         }\n     };\n \n@@ -841,7 +839,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                  the debuginfo::TypeMap but it \\\n                                                  was not. (Ty = {})\",\n                                                 &unique_type_id_str[..],\n-                                                ppaux::ty_to_string(cx.tcx(), t));\n+                                                t.user_string(cx.tcx()));\n                     cx.sess().span_bug(usage_site_span, &error_message[..]);\n                 }\n             };\n@@ -856,7 +854,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                      debuginfo::TypeMap. \\\n                                                      UniqueTypeId={}, Ty={}\",\n                             &unique_type_id_str[..],\n-                            ppaux::ty_to_string(cx.tcx(), t));\n+                            t.user_string(cx.tcx()));\n                         cx.sess().span_bug(usage_site_span, &error_message[..]);\n                     }\n                 }"}, {"sha": "c5dd2c17822d38ed6a11fc6daf0686907e6ddfc4", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -15,9 +15,10 @@ use super::namespace::crate_root_namespace;\n use trans::common::CrateContext;\n use middle::subst::{self, Substs};\n use middle::ty::{self, Ty, ClosureTyper};\n+use util::ppaux::Repr;\n+\n use syntax::ast;\n use syntax::parse::token;\n-use util::ppaux;\n \n \n // Compute the name of the type as it should be stored in debuginfo. Does not do\n@@ -162,7 +163,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyProjection(..) |\n         ty::TyParam(_) => {\n             cx.sess().bug(&format!(\"debuginfo: Trying to create type name for \\\n-                unexpected type: {}\", ppaux::ty_to_string(cx.tcx(), t)));\n+                unexpected type: {}\", t.repr(cx.tcx())));\n         }\n     }\n "}, {"sha": "a8e4783fbdd291d30233a2a1cefafa2dd12e5e4d", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -39,7 +39,7 @@ use trans::machine::*;\n use trans::monomorphize;\n use trans::type_of::{type_of, type_of_dtor, sizing_type_of, align_of};\n use trans::type_::Type;\n-use util::ppaux::{self, Repr};\n+use util::ppaux::Repr;\n \n use arena::TypedArena;\n use libc::c_uint;\n@@ -205,10 +205,13 @@ impl<'tcx> DropGlueKind<'tcx> {\n     }\n \n     fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n-        let t_str = ppaux::ty_to_string(ccx.tcx(), self.ty());\n         match *self {\n-            DropGlueKind::Ty(_) => format!(\"DropGlueKind::Ty({})\", t_str),\n-            DropGlueKind::TyContents(_) => format!(\"DropGlueKind::TyContents({})\", t_str),\n+            DropGlueKind::Ty(ty) => {\n+                format!(\"DropGlueKind::Ty({})\", ty.repr(ccx.tcx()))\n+            }\n+            DropGlueKind::TyContents(ty) => {\n+                format!(\"DropGlueKind::TyContents({})\", ty.repr(ccx.tcx()))\n+            }\n         }\n     }\n }"}, {"sha": "41780e08b909a4697ecd8b5bcd27c751be4a55e7", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -34,7 +34,7 @@ use middle::ty::{self, Ty};\n use syntax::abi::RustIntrinsic;\n use syntax::ast;\n use syntax::parse::token;\n-use util::ppaux::{Repr, ty_to_string};\n+use util::ppaux::{Repr, UserString};\n \n pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> {\n     let name = match &token::get_ident(item.ident)[..] {\n@@ -121,21 +121,21 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n                     transmute_restriction.span,\n                     &format!(\"transmute called on types with potentially different sizes: \\\n                               {} (could be {} bit{}) to {} (could be {} bit{})\",\n-                             ty_to_string(ccx.tcx(), transmute_restriction.original_from),\n+                             transmute_restriction.original_from.user_string(ccx.tcx()),\n                              from_type_size as usize,\n                              if from_type_size == 1 {\"\"} else {\"s\"},\n-                             ty_to_string(ccx.tcx(), transmute_restriction.original_to),\n+                             transmute_restriction.original_to.user_string(ccx.tcx()),\n                              to_type_size as usize,\n                              if to_type_size == 1 {\"\"} else {\"s\"}));\n             } else {\n                 ccx.sess().span_err(\n                     transmute_restriction.span,\n                     &format!(\"transmute called on types with different sizes: \\\n                               {} ({} bit{}) to {} ({} bit{})\",\n-                             ty_to_string(ccx.tcx(), transmute_restriction.original_from),\n+                             transmute_restriction.original_from.user_string(ccx.tcx()),\n                              from_type_size as usize,\n                              if from_type_size == 1 {\"\"} else {\"s\"},\n-                             ty_to_string(ccx.tcx(), transmute_restriction.original_to),\n+                             transmute_restriction.original_to.user_string(ccx.tcx()),\n                              to_type_size as usize,\n                              if to_type_size == 1 {\"\"} else {\"s\"}));\n             }\n@@ -405,7 +405,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n         (_, \"type_name\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n-            let ty_name = token::intern_and_get_ident(&ty_to_string(ccx.tcx(), tp_ty));\n+            let ty_name = token::intern_and_get_ident(&tp_ty.user_string(ccx.tcx()));\n             C_str_slice(ccx, ty_name)\n         }\n         (_, \"type_id\") => {"}, {"sha": "df3fd72cc462390bd8a1e85f61af88b4ad43e3f2", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -28,7 +28,7 @@ use trans::machine::llsize_of_alloc;\n use trans::type_::Type;\n use trans::type_of;\n use middle::ty::{self, Ty};\n-use util::ppaux::ty_to_string;\n+use util::ppaux::UserString;\n \n use syntax::ast;\n use syntax::parse::token::InternedString;\n@@ -42,7 +42,7 @@ struct VecTypes<'tcx> {\n impl<'tcx> VecTypes<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"VecTypes {{unit_ty={}, llunit_ty={}}}\",\n-                ty_to_string(ccx.tcx(), self.unit_ty),\n+                self.unit_ty.user_string(ccx.tcx()),\n                 ccx.tn().type_to_string(self.llunit_ty))\n     }\n }"}, {"sha": "ecbeb714b4a9446f69e48484895ac49d0aeeb45c", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -16,7 +16,6 @@ use trans::common::*;\n use trans::foreign;\n use trans::machine;\n use middle::ty::{self, RegionEscape, Ty};\n-use util::ppaux;\n use util::ppaux::Repr;\n \n use trans::type_::Type;\n@@ -230,7 +229,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n \n         ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) | ty::TyError(..) => {\n             cx.sess().bug(&format!(\"fictitious type {} in sizing_type_of()\",\n-                                  ppaux::ty_to_string(cx.tcx(), t)))\n+                                   t.repr(cx.tcx())))\n         }\n         ty::TySlice(_) | ty::TyTrait(..) | ty::TyStr => unreachable!()\n     };"}, {"sha": "41dcb123952591889a859e63d51e9d5ba2793a2b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -106,7 +106,7 @@ use {CrateCtxt, lookup_full_def, require_same_types};\n use TypeAndSubsts;\n use lint;\n use util::common::{block_query, ErrorReported, indenter, loop_query};\n-use util::ppaux::{self, Repr};\n+use util::ppaux::{Repr, UserString};\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n use util::lev_distance::lev_distance;\n \n@@ -1396,7 +1396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[inline]\n     pub fn write_ty(&self, node_id: ast::NodeId, ty: Ty<'tcx>) {\n         debug!(\"write_ty({}, {}) in fcx {}\",\n-               node_id, ppaux::ty_to_string(self.tcx(), ty), self.tag());\n+               node_id, ty.repr(self.tcx()), self.tag());\n         self.inh.node_types.borrow_mut().insert(node_id, ty);\n     }\n \n@@ -2746,7 +2746,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                   |base_t, _| {\n                 match base_t.sty {\n                     ty::TyStruct(base_id, substs) => {\n-                        debug!(\"struct named {}\", ppaux::ty_to_string(tcx, base_t));\n+                        debug!(\"struct named {}\",  base_t.repr(tcx));\n                         let fields = ty::lookup_struct_fields(tcx, base_id);\n                         fcx.lookup_field_ty(expr.span, base_id, &fields[..],\n                                             field.node.name, &(*substs))\n@@ -2850,7 +2850,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                     ty::TyStruct(base_id, substs) => {\n                         tuple_like = ty::is_tuple_struct(tcx, base_id);\n                         if tuple_like {\n-                            debug!(\"tuple struct named {}\", ppaux::ty_to_string(tcx, base_t));\n+                            debug!(\"tuple struct named {}\",  base_t.repr(tcx));\n                             let fields = ty::lookup_struct_fields(tcx, base_id);\n                             fcx.lookup_tup_field_ty(expr.span, base_id, &fields[..],\n                                                     idx.node, &(*substs))\n@@ -3749,7 +3749,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n     debug!(\"type of expr({}) {} is...\", expr.id,\n            syntax::print::pprust::expr_to_string(expr));\n     debug!(\"... {}, expected is {}\",\n-           ppaux::ty_to_string(tcx, fcx.expr_ty(expr)),\n+           fcx.expr_ty(expr).repr(tcx),\n            expected.repr(tcx));\n \n     unifier();\n@@ -4198,7 +4198,7 @@ pub fn check_instantiable(tcx: &ty::ctxt,\n             \"this type cannot be instantiated without an \\\n              instance of itself\");\n         fileline_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n-            ppaux::ty_to_string(tcx, item_ty));\n+             item_ty.repr(tcx));\n         false\n     } else {\n         true\n@@ -4950,7 +4950,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                        tps: &OwnedSlice<ast::TyParam>,\n                                        ty: Ty<'tcx>) {\n     debug!(\"check_bounds_are_used(n_tps={}, ty={})\",\n-           tps.len(), ppaux::ty_to_string(ccx.tcx, ty));\n+           tps.len(),  ty.repr(ccx.tcx));\n \n     // make a vector of booleans initially false, set to true when used\n     if tps.is_empty() { return; }\n@@ -5273,7 +5273,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                            fty,\n                            || {\n                 format!(\"intrinsic has wrong type: expected `{}`\",\n-                        ppaux::ty_to_string(ccx.tcx, fty))\n+                         fty.user_string(ccx.tcx))\n             });\n     }\n }"}, {"sha": "04dd7f46b834b0abc4a88363927c4996e5b04e58", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -94,7 +94,7 @@ use middle::traits;\n use middle::ty::{self, ClosureTyper, ReScope, Ty, MethodCall};\n use middle::infer::{self, GenericKind};\n use middle::pat_util;\n-use util::ppaux::{ty_to_string, Repr};\n+use util::ppaux::{Repr, UserString};\n \n use std::mem;\n use syntax::{ast, ast_util};\n@@ -1025,7 +1025,7 @@ fn type_of_node_must_outlive<'a, 'tcx>(\n                            |method_call| rcx.resolve_method_type(method_call));\n     debug!(\"constrain_regions_in_type_of_node(\\\n             ty={}, ty0={}, id={}, minimum_lifetime={:?})\",\n-           ty_to_string(tcx, ty), ty_to_string(tcx, ty0),\n+            ty.user_string(tcx),  ty0.user_string(tcx),\n            id, minimum_lifetime);\n     type_must_outlive(rcx, origin, ty, minimum_lifetime);\n }\n@@ -1178,7 +1178,7 @@ fn link_region_from_node_type<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n     let rptr_ty = rcx.resolve_node_type(id);\n     if !ty::type_is_error(rptr_ty) {\n         let tcx = rcx.fcx.ccx.tcx;\n-        debug!(\"rptr_ty={}\", ty_to_string(tcx, rptr_ty));\n+        debug!(\"rptr_ty={}\",  rptr_ty.user_string(tcx));\n         let r = ty::ty_region(tcx, span, rptr_ty);\n         link_region(rcx, span, &r, ty::BorrowKind::from_mutbl(mutbl),\n                     cmt_borrowed);"}, {"sha": "03a0c2f5b62e5884a83975a76f79b714ff9eda01", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -80,8 +80,7 @@ use rscope::*;\n use rustc::ast_map;\n use util::common::{ErrorReported, memoized};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n-use util::ppaux;\n-use util::ppaux::{Repr,UserString};\n+use util::ppaux::{Repr, UserString};\n use write_ty_to_tcx;\n \n use std::cell::{Cell, RefCell};\n@@ -2217,7 +2216,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n                                   required_type_free,\n                                   || {\n                 format!(\"mismatched self type: expected `{}`\",\n-                        ppaux::ty_to_string(tcx, required_type))\n+                         required_type.user_string(tcx))\n         }));\n \n         // We could conceviably add more free-region relations here,"}, {"sha": "0ea5073bb2490a7a3c56e743e1376ca5215ad5ca", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad4a486381497da00ad12413bfc0fbac201189/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=96ad4a486381497da00ad12413bfc0fbac201189", "patch": "@@ -109,8 +109,7 @@ use middle::ty::{self, Ty};\n use rustc::ast_map;\n use session::config;\n use util::common::time;\n-use util::ppaux::Repr;\n-use util::ppaux;\n+use util::ppaux::{Repr, UserString};\n \n use syntax::codemap::Span;\n use syntax::print::pprust::*;\n@@ -149,7 +148,7 @@ pub struct CrateCtxt<'a, 'tcx: 'a> {\n \n // Functions that write types into the node type table\n fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n-    debug!(\"write_ty_to_tcx({}, {})\", node_id, ppaux::ty_to_string(tcx, ty));\n+    debug!(\"write_ty_to_tcx({}, {})\", node_id,  ty.repr(tcx));\n     assert!(!ty::type_needs_infer(ty));\n     tcx.node_type_insert(node_id, ty);\n }\n@@ -245,15 +244,14 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             require_same_types(tcx, None, false, main_span, main_t, se_ty,\n                 || {\n                     format!(\"main function expects type: `{}`\",\n-                            ppaux::ty_to_string(ccx.tcx, se_ty))\n+                             se_ty.user_string(ccx.tcx))\n                 });\n         }\n         _ => {\n             tcx.sess.span_bug(main_span,\n                               &format!(\"main has a non-function type: found \\\n                                        `{}`\",\n-                                      ppaux::ty_to_string(tcx,\n-                                                       main_t)));\n+                                      main_t.repr(tcx)));\n         }\n     }\n }\n@@ -296,15 +294,15 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             require_same_types(tcx, None, false, start_span, start_t, se_ty,\n                 || {\n                     format!(\"start function expects type: `{}`\",\n-                            ppaux::ty_to_string(ccx.tcx, se_ty))\n+                             se_ty.user_string(ccx.tcx))\n                 });\n \n         }\n         _ => {\n             tcx.sess.span_bug(start_span,\n                               &format!(\"start has a non-function type: found \\\n                                        `{}`\",\n-                                      ppaux::ty_to_string(tcx, start_t)));\n+                                       start_t.repr(tcx)));\n         }\n     }\n }"}]}