{"sha": "95b9d538b8bda04e222c95d478b97c19d77bb5c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YjlkNTM4YjhiZGEwNGUyMjJjOTVkNDc4Yjk3YzE5ZDc3YmI1YzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-08T04:38:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-08T05:28:00Z"}, "message": "Use #[cfg(unix)] and #[cfg(windows)] everywhere", "tree": {"sha": "819961fab6287b7b174879c1bddff7159487bdc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/819961fab6287b7b174879c1bddff7159487bdc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b9d538b8bda04e222c95d478b97c19d77bb5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b9d538b8bda04e222c95d478b97c19d77bb5c6", "html_url": "https://github.com/rust-lang/rust/commit/95b9d538b8bda04e222c95d478b97c19d77bb5c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b9d538b8bda04e222c95d478b97c19d77bb5c6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ef825bb607c4e934c92bd0b73ecbc4c24f3286b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef825bb607c4e934c92bd0b73ecbc4c24f3286b", "html_url": "https://github.com/rust-lang/rust/commit/7ef825bb607c4e934c92bd0b73ecbc4c24f3286b"}], "stats": {"total": 290, "additions": 103, "deletions": 187}, "files": [{"sha": "f0b346e32a39d371f501207ab3a33f5abc43216c", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -48,12 +48,10 @@ native mod c_double {\n     pure fn frexp(n: c_double, &value: c_int) -> c_double;\n     pure fn hypot(x: c_double, y: c_double) -> c_double;\n     pure fn ldexp(x: c_double, n: c_int) -> c_double;\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     #[link_name=\"lgamma_r\"] pure fn lgamma(n: c_double,\n                                            &sign: c_int) -> c_double;\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     #[link_name=\"__lgamma_r\"] pure fn lgamma(n: c_double,\n                                              &sign: c_int) -> c_double;\n     // renamed: log is a reserved keyword; ln seems more natural, too\n@@ -131,13 +129,11 @@ native mod c_float {\n     #[link_name=\"hypotf\"] pure fn hypot(x: c_float, y: c_float) -> c_float;\n     #[link_name=\"ldexpf\"] pure fn ldexp(x: c_float, n: c_int) -> c_float;\n \n-    #[cfg(target_os=\"linux\")]\n-    #[cfg(target_os=\"macos\")]\n-    #[cfg(target_os=\"freebsd\")]\n+    #[cfg(unix)]\n     #[link_name=\"lgammaf_r\"] pure fn lgamma(n: c_float,\n                                             &sign: c_int) -> c_float;\n \n-    #[cfg(target_os=\"win32\")]\n+    #[cfg(windows)]\n     #[link_name=\"__lgammaf_r\"] pure fn lgamma(n: c_float,\n                                               &sign: c_int) -> c_float;\n "}, {"sha": "7836d05c818cf867e511053c35511a2f8602a2eb", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -420,15 +420,15 @@ fn test_recv_chan() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_recv_chan_dead() {\n     let ch = chan(port());\n     send(ch, \"flower\");\n     recv_chan(ch);\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_recv_chan_wrong_task() {\n     let po = port();\n     let ch = chan(po);\n@@ -464,7 +464,7 @@ fn test_listen() {\n }\n \n #[test]\n-#[ignore(cfg(target_os=\"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_port_detach_fail() {\n     iter::repeat(100u) {||\n         let builder = task::builder();"}, {"sha": "077a178546e8bc0ab32b84f92d7b6bfa5b613742", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -398,12 +398,10 @@ fn fd_writer(fd: fd_t, cleanup: bool) -> writer {\n fn mk_file_writer(path: str, flags: [fileflag])\n     -> result<writer, str> {\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn wb() -> c_int { (O_WRONLY | O_BINARY) as c_int }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn wb() -> c_int { O_WRONLY as c_int }\n \n     let mut fflags: c_int = wb();"}, {"sha": "cf903c3bebe9858e0ed907244f02e4ab9c6ce15f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -229,7 +229,7 @@ fn test_min() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_min_empty() {\n     min::<int, [int]>([]);\n }\n@@ -241,7 +241,7 @@ fn test_max() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_max_empty() {\n     max::<int, [int]>([]);\n }"}, {"sha": "8ebb946af216b6b31924832c24c82a2b63f837d7", "filename": "src/libcore/os.rs", "status": "modified", "additions": 35, "deletions": 61, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -79,7 +79,7 @@ fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n mod win32 {\n     import dword = libc::types::os::arch::extra::DWORD;\n \n@@ -200,9 +200,7 @@ mod global_env {\n \n     mod impl {\n \n-        #[cfg(target_os = \"linux\")]\n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"freebsd\")]\n+        #[cfg(unix)]\n         fn getenv(n: str) -> option<str> unsafe {\n             let s = str::as_c_str(n, libc::getenv);\n             ret if unsafe::reinterpret_cast(s) == 0 {\n@@ -213,7 +211,7 @@ mod global_env {\n             };\n         }\n \n-        #[cfg(target_os = \"win32\")]\n+        #[cfg(windows)]\n         fn getenv(n: str) -> option<str> unsafe {\n             import libc::types::os::arch::extra::*;\n             import libc::funcs::extra::kernel32::*;\n@@ -226,9 +224,7 @@ mod global_env {\n         }\n \n \n-        #[cfg(target_os = \"linux\")]\n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"freebsd\")]\n+        #[cfg(unix)]\n         fn setenv(n: str, v: str) {\n \n             // FIXME: remove this when export globs work properly.\n@@ -241,7 +237,7 @@ mod global_env {\n         }\n \n \n-        #[cfg(target_os = \"win32\")]\n+        #[cfg(windows)]\n         fn setenv(n: str, v: str) {\n             // FIXME: remove imports when export globs work properly.\n             import libc::funcs::extra::kernel32::*;\n@@ -265,7 +261,7 @@ fn fdopen(fd: c_int) -> *FILE {\n \n // fsync related\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn fsync_fd(fd: c_int, _level: io::fsync::level) -> c_int {\n     import libc::funcs::extra::msvcrt::*;\n     ret commit(fd);\n@@ -305,14 +301,12 @@ fn fsync_fd(fd: c_int, _l: io::fsync::level) -> c_int {\n }\n \n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn waitpid(pid: pid_t) -> c_int {\n     ret rustrt::rust_process_wait(pid);\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"macos\")]\n+#[cfg(unix)]\n fn waitpid(pid: pid_t) -> c_int {\n     import libc::funcs::posix01::wait::*;\n     let status = 0 as c_int;\n@@ -323,9 +317,7 @@ fn waitpid(pid: pid_t) -> c_int {\n }\n \n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"macos\")]\n+#[cfg(unix)]\n fn pipe() -> {in: c_int, out: c_int} {\n     let fds = {mut in: 0 as c_int,\n                mut out: 0 as c_int };\n@@ -335,7 +327,7 @@ fn pipe() -> {in: c_int, out: c_int} {\n \n \n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn pipe() -> {in: c_int, out: c_int} {\n     // FIXME: remove this when export globs work properly.\n     import libc::consts::os::extra::*;\n@@ -359,12 +351,10 @@ fn pipe() -> {in: c_int, out: c_int} {\n fn dll_filename(base: str) -> str {\n     ret pre() + base + dll_suffix();\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn pre() -> str { \"lib\" }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn pre() -> str { \"\" }\n }\n \n@@ -405,7 +395,7 @@ fn self_exe_path() -> option<path> {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn load_self() -> option<path> unsafe {\n         // FIXME: remove imports when export globs work properly.\n         import libc::types::os::arch::extra::*;\n@@ -449,14 +439,12 @@ fn homedir() -> option<path> {\n         }\n     };\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn secondary() -> option<path> {\n         none\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn secondary() -> option<path> {\n         option::chain(getenv(\"USERPROFILE\")) {|p|\n             if !str::is_empty(p) {\n@@ -536,7 +524,7 @@ fn make_absolute(p: path) -> path {\n fn make_dir(p: path, mode: c_int) -> bool {\n     ret mkdir(p, mode);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn mkdir(p: path, _mode: c_int) -> bool unsafe {\n         // FIXME: remove imports when export globs work properly.\n         import libc::types::os::arch::extra::*;\n@@ -549,9 +537,7 @@ fn make_dir(p: path, mode: c_int) -> bool {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn mkdir(p: path, mode: c_int) -> bool {\n         as_c_charp(p) {|c|\n             libc::mkdir(c, mode as mode_t) == (0 as c_int)\n@@ -562,12 +548,10 @@ fn make_dir(p: path, mode: c_int) -> bool {\n #[doc = \"Lists the contents of a directory\"]\n fn list_dir(p: path) -> [str] {\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn star(p: str) -> str { p }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn star(p: str) -> str {\n         let pl = str::len(p);\n         if pl == 0u || (p[pl - 1u] as char != path::consts::path_sep\n@@ -602,7 +586,7 @@ fn list_dir_path(p: path) -> [str] {\n fn remove_dir(p: path) -> bool {\n    ret rmdir(p);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn rmdir(p: path) -> bool {\n         // FIXME: remove imports when export globs work properly.\n         import libc::funcs::extra::kernel32::*;\n@@ -613,9 +597,7 @@ fn remove_dir(p: path) -> bool {\n         };\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn rmdir(p: path) -> bool {\n         ret as_c_charp(p) {|buf|\n             libc::rmdir(buf) == (0 as c_int)\n@@ -626,7 +608,7 @@ fn remove_dir(p: path) -> bool {\n fn change_dir(p: path) -> bool {\n     ret chdir(p);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn chdir(p: path) -> bool {\n         // FIXME: remove imports when export globs work properly.\n         import libc::funcs::extra::kernel32::*;\n@@ -637,9 +619,7 @@ fn change_dir(p: path) -> bool {\n         };\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn chdir(p: path) -> bool {\n         ret as_c_charp(p) {|buf|\n             libc::chdir(buf) == (0 as c_int)\n@@ -651,7 +631,7 @@ fn change_dir(p: path) -> bool {\n fn copy_file(from: path, to: path) -> bool {\n     ret do_copy_file(from, to);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn do_copy_file(from: path, to: path) -> bool {\n         // FIXME: remove imports when export globs work properly.\n         import libc::funcs::extra::kernel32::*;\n@@ -664,9 +644,7 @@ fn copy_file(from: path, to: path) -> bool {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn do_copy_file(from: path, to: path) -> bool unsafe {\n         let istream = as_c_charp(from) {|fromp|\n             as_c_charp(\"rb\") {|modebuf|\n@@ -716,7 +694,7 @@ fn copy_file(from: path, to: path) -> bool {\n fn remove_file(p: path) -> bool {\n     ret unlink(p);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn unlink(p: path) -> bool {\n         // FIXME: remove imports when export globs work properly.\n         // (similar to Issue #2006)\n@@ -728,9 +706,7 @@ fn remove_file(p: path) -> bool {\n         };\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn unlink(p: path) -> bool {\n         ret as_c_charp(p) {|buf|\n             libc::unlink(buf) == (0 as c_int)\n@@ -755,12 +731,10 @@ fn set_exit_status(code: int) {\n     rustrt::rust_set_exit_status(code as libc::intptr_t);\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n fn family() -> str { \"unix\" }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn family() -> str { \"windows\" }\n \n #[cfg(target_os = \"macos\")]\n@@ -824,7 +798,8 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cgf(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n+    #[ignore]\n     fn test_setenv_overwrite() {\n         let n = make_rand_name();\n         setenv(n, \"1\");\n@@ -837,7 +812,8 @@ mod tests {\n     // Windows GetEnvironmentVariable requires some extra work to make sure\n     // the buffer the variable is copied into is the right size\n     #[test]\n-    #[ignore(cgf(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n+    #[ignore]\n     fn test_getenv_big() {\n         let mut s = \"\";\n         let mut i = 0;\n@@ -902,9 +878,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn homedir() {\n         let oldhome = getenv(\"HOME\");\n \n@@ -918,7 +892,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn homedir() {\n \n         let oldhome = getenv(\"HOME\");"}, {"sha": "2e62b73063d9d23335dad9fb1f5e1835bd7120fa", "filename": "src/libcore/path.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -16,9 +16,7 @@ export normalize;\n #[doc = \"A path or fragment of a filesystem path\"]\n type path = str;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(unix)]\n mod consts {\n     #[doc = \"\n     The primary path seperator character for the platform\n@@ -34,7 +32,7 @@ mod consts {\n     const alt_path_sep: char = '/';\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n mod consts {\n     const path_sep: char = '/';\n     const alt_path_sep: char = '\\\\';\n@@ -46,14 +44,12 @@ Indicates whether a path is absolute.\n A path is considered absolute if it begins at the filesystem root (\\\"/\\\") or,\n on Windows, begins with a drive letter.\n \"]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(unix)]\n fn path_is_absolute(p: path) -> bool {\n     str::char_at(p, 0u) == '/'\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn path_is_absolute(p: str) -> bool {\n     ret str::char_at(p, 0u) == '/' ||\n         str::char_at(p, 1u) == ':'\n@@ -271,9 +267,7 @@ fn normalize(p: path) -> path {\n         ret t;\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn reabsolute(orig: path, n: path) -> path {\n         if path_is_absolute(orig) {\n             path_sep() + n\n@@ -282,7 +276,7 @@ fn normalize(p: path) -> path {\n         }\n     }\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn reabsolute(orig: path, newp: path) -> path {\n        if path_is_absolute(orig) && orig[0] == consts::path_sep as u8 {\n            str::from_char(consts::path_sep) + newp\n@@ -427,7 +421,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn normalize12() {\n         let actual = normalize(\"C:/whatever\");\n         let expected = \"C:/whatever\";\n@@ -436,7 +430,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn path_is_absolute_win32() {\n         assert path_is_absolute(\"C:/whatever\");\n     }"}, {"sha": "fc1e547ebde9c772804a44ace72c47e531e45a1c", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -225,7 +225,7 @@ fn test_weaken_task_stress() unsafe {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_weaken_task_fail() unsafe {\n     let res = task::try {||\n         weaken_task {|_po|"}, {"sha": "f5e404712b98e249a20fd68c0297a8c1d4a44c38", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -325,7 +325,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn gen_int_from_fail() {\n         rand::rng().gen_int_range(5, -2);\n     }\n@@ -341,7 +341,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn gen_uint_range_fail() {\n         rand::rng().gen_uint_range(5u, 2u);\n     }"}, {"sha": "7ffbd24d42ff95a8945ec246639b9ee17a2ec02b", "filename": "src/libcore/run.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -90,9 +90,7 @@ fn with_argv<T>(prog: str, args: [str],\n     vec::as_buf(argptrs, cb)\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n fn with_envp<T>(env: option<[(str,str)]>,\n                 cb: fn(*c_void) -> T) -> T unsafe {\n     // On posixy systems we can pass a char** for envp, which is\n@@ -117,7 +115,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n fn with_envp<T>(env: option<[(str,str)]>,\n                 cb: fn(*c_void) -> T) -> T unsafe {\n     // On win32 we pass an \"environment block\" which is not a char**, but\n@@ -278,14 +276,12 @@ fn program_output(prog: str, args: [str]) ->\n fn waitpid(pid: pid_t) -> int {\n     ret waitpid_os(pid);\n \n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn waitpid_os(pid: pid_t) -> int {\n         os::waitpid(pid) as int\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn waitpid_os(pid: pid_t) -> int {\n         #[cfg(target_os = \"linux\")]\n         fn WIFEXITED(status: i32) -> bool {\n@@ -324,7 +320,7 @@ mod tests {\n     import io::writer_util;\n \n     // Regression test for memory leaks\n-    #[ignore(cfg(target_os = \"win32\"))] // FIXME\n+    #[ignore(cfg(windows))] // FIXME\n     fn test_leaks() {\n         run::run_program(\"echo\", []);\n         run::start_program(\"echo\", []);"}, {"sha": "af2062f4b1d0ce82fbded0c88fdf27d2ecfb1864", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -1998,7 +1998,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_pop_char_fail() {\n         let mut data = \"\";\n         let _cc3 = pop_char(data);\n@@ -2419,7 +2419,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_slice_fail() {\n         slice(\"\u4e2d\u534eVi\u1ec7t Nam\", 0u, 2u);\n     }\n@@ -2512,7 +2512,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_from_bytes_fail() {\n         let bb = [0xff_u8, 0xb8_u8, 0xa8_u8,\n                   0xe0_u8, 0xb9_u8, 0x84_u8,\n@@ -2537,7 +2537,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         // Don't double free"}, {"sha": "654d0e92bd6f7b4c0c21b19db81b9d02febacae7", "filename": "src/libcore/task.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -605,7 +605,7 @@ fn test_spawn_raw_simple() {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n     let opts = {\n         supervise: false\n@@ -617,7 +617,7 @@ fn test_spawn_raw_unsupervise() {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_spawn_raw_notify() {\n     let task_po = comm::port();\n     let task_ch = comm::chan(task_po);\n@@ -674,7 +674,7 @@ fn test_add_wrapper() {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_future_result() {\n     let buildr = builder();\n     let result = future_result(buildr);\n@@ -726,7 +726,7 @@ fn test_try_success() {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_try_fail() {\n     alt try {||\n         fail\n@@ -738,7 +738,7 @@ fn test_try_fail() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn test_spawn_sched_no_threads() {\n     spawn_sched(manual_threads(0u)) {|| };\n }\n@@ -957,7 +957,7 @@ fn test_osmain() {\n }\n \n #[test]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable() unsafe {\n     import comm::methods;"}, {"sha": "1a14ddc1d8f031e91cea3581b2bdc14c4c9a1047", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -247,14 +247,14 @@ fn test_parse_buf() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn to_str_radix1() {\n     uint::to_str(100u, 1u);\n }\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(target_os = \"win32\"))]\n+#[ignore(cfg(windows))]\n fn to_str_radix17() {\n     uint::to_str(100u, 17u);\n }"}, {"sha": "eef841118752a525b02e1ab618b41cd8f0845aa0", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -2040,7 +2040,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_init_empty() {\n         init::<int>([]);\n     }\n@@ -2070,7 +2070,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_windowed_() {\n         let _x = windowed (0u, [1u,2u,3u,4u,5u,6u]);\n     }"}, {"sha": "d60d0c8c84ef5919b07d4a632db65942a3169dfb", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -152,7 +152,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_overrun_get() {\n         let cv = malloc(16u as size_t);\n \n@@ -161,7 +161,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_overrun_set() {\n         let cv = malloc(16u as size_t);\n "}, {"sha": "e693ec2a1acde20bbfecd1a9f74e3d28bc9b8c0b", "filename": "src/libstd/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -314,12 +314,10 @@ fn run_tests(opts: test_opts, tests: [test_desc],\n }\n \n // Windows tends to dislike being overloaded with threads.\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n const sched_overcommit : uint = 1u;\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"macos\")]\n+#[cfg(unix)]\n const sched_overcommit : uint = 4u;\n \n fn get_concurrency() -> uint {\n@@ -449,7 +447,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_os = \"win32\"))]\n+    #[ignore(cfg(windows))]\n     fn test_should_fail() {\n         fn f() { fail; }\n         let desc = {"}, {"sha": "e882eba5d6b79058f939ca17bc429be06f366363", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 19, "deletions": 53, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -67,18 +67,12 @@ type uv_err_t = {\n // in other types as a pointer to be used in other\n // operations (so mostly treat it as opaque, once you\n // have it in this form..)\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type uv_stream_t = {\n     fields: uv_handle_fields\n };\n \n // 64bit unix size: 272\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n type uv_tcp_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -104,7 +98,7 @@ type uv_tcp_t_32bit_unix_riders = {\n };\n \n // 32bit win32 size: 240 (120)\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n type uv_tcp_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -117,26 +111,20 @@ type uv_tcp_t = {\n };\n \n // unix size: 48\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n type uv_connect_t = {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8\n };\n // win32 size: 88 (44)\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n type uv_connect_t = {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n     a08: *u8, a09: *u8, a10: *u8\n };\n \n // unix size: 16\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type uv_buf_t = {\n     base: *u8,\n     len: libc::size_t\n@@ -145,9 +133,7 @@ type uv_buf_t = {\n // it via uv::direct::buf_init()\n \n // unix size: 144\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n type uv_write_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -165,7 +151,7 @@ type uv_write_t_32bit_unix_riders = {\n     a13: *u8, a14: *u8\n };\n // win32 size: 136 (68)\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n type uv_write_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -175,9 +161,7 @@ type uv_write_t = {\n };\n // 64bit unix size: 120\n // 32bit unix size: 152 (76)\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n type uv_async_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -194,7 +178,7 @@ type uv_async_t_32bit_unix_riders = {\n     a10: *u8, a11: *u8, a12: *u8, a13: *u8\n };\n // win32 size 132 (68)\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n type uv_async_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -205,9 +189,7 @@ type uv_async_t = {\n \n // 64bit unix size: 128\n // 32bit unix size: 84\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n type uv_timer_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -225,7 +207,7 @@ type uv_timer_t_32bit_unix_riders = {\n     a14: *u8, a15: *u8, a16: *u8\n };\n // win32 size: 64\n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n type uv_timer_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n@@ -234,10 +216,6 @@ type uv_timer_t = {\n };\n \n // unix size: 16\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type sockaddr_in = {\n     mut sin_family: u16,\n     mut sin_port: u16,\n@@ -246,10 +224,6 @@ type sockaddr_in = {\n };\n \n // unix size: 28 .. make due w/ 32\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"win32\")]\n type sockaddr_in6 = {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: (u8, u8, u8, u8)\n@@ -316,7 +290,7 @@ mod uv_ll_struct_stubgen {\n                 };\n             }\n         }\n-        #[cfg(target_os = \"win32\")]\n+        #[cfg(windows)]\n         fn gen_stub_os() -> uv_tcp_t {\n             ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                             close_cb: ptr::null(),\n@@ -337,17 +311,15 @@ mod uv_ll_struct_stubgen {\n             };\n         }\n     }\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn gen_stub_uv_connect_t() -> uv_connect_t {\n         ret {\n             a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n             a03: 0 as *u8,\n             a04: 0 as *u8, a05: 0 as *u8\n         };\n     }\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn gen_stub_uv_connect_t() -> uv_connect_t {\n         ret {\n             a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n@@ -357,9 +329,7 @@ mod uv_ll_struct_stubgen {\n             a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8\n         };\n     }\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn gen_stub_uv_async_t() -> uv_async_t {\n         ret gen_stub_arch();\n         #[cfg(target_arch = \"x86_64\")]\n@@ -394,7 +364,7 @@ mod uv_ll_struct_stubgen {\n             };\n         }\n     }\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn gen_stub_uv_async_t() -> uv_async_t {\n         ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                         close_cb: ptr::null(),\n@@ -408,9 +378,7 @@ mod uv_ll_struct_stubgen {\n             a12: 0 as *u8\n         };\n     }\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn gen_stub_uv_timer_t() -> uv_timer_t {\n         ret gen_stub_arch();\n         #[cfg(target_arch = \"x86_64\")]\n@@ -447,7 +415,7 @@ mod uv_ll_struct_stubgen {\n             };\n         }\n     }\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn gen_stub_uv_timer_t() -> uv_timer_t {\n         ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                         close_cb: ptr::null(),\n@@ -460,9 +428,7 @@ mod uv_ll_struct_stubgen {\n             a11: 0 as *u8\n         };\n     }\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(unix)]\n     fn gen_stub_uv_write_t() -> uv_write_t {\n         ret gen_stub_arch();\n         #[cfg(target_arch=\"x86_64\")]\n@@ -494,7 +460,7 @@ mod uv_ll_struct_stubgen {\n             };\n         }\n     }\n-    #[cfg(target_os = \"win32\")]\n+    #[cfg(windows)]\n     fn gen_stub_uv_write_t() -> uv_write_t {\n         ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n                         close_cb: ptr::null(),"}, {"sha": "06376c18cb042269633f708c782e114ac07e3c4c", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -188,9 +188,7 @@ fn minimize_rpaths(rpaths: [str]) -> [str] {\n     ret minimized;\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(unix)]\n mod test {\n     #[test]\n     fn test_rpaths_to_flags() {"}, {"sha": "208e05de8862c87a02d7ba55e3ce71a1c20d7aa9", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b9d538b8bda04e222c95d478b97c19d77bb5c6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=95b9d538b8bda04e222c95d478b97c19d77bb5c6", "patch": "@@ -5061,13 +5061,9 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n     }\n \n     fn create_entry_fn(ccx: @crate_ctxt, rust_main: ValueRef) {\n-        #[cfg(target_os = \"win32\")]\n+        #[cfg(windows)]\n         fn main_name() -> str { ret \"WinMain@16\"; }\n-        #[cfg(target_os = \"macos\")]\n-        fn main_name() -> str { ret \"main\"; }\n-        #[cfg(target_os = \"linux\")]\n-        fn main_name() -> str { ret \"main\"; }\n-        #[cfg(target_os = \"freebsd\")]\n+        #[cfg(unix)]\n         fn main_name() -> str { ret \"main\"; }\n         let llfty = T_fn([ccx.int_type, ccx.int_type], ccx.int_type);\n         let llfn = decl_cdecl_fn(ccx.llmod, main_name(), llfty);"}]}