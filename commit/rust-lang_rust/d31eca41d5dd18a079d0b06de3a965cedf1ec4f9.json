{"sha": "d31eca41d5dd18a079d0b06de3a965cedf1ec4f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMWVjYTQxZDVkZDE4YTA3OWQwYjA2ZGUzYTk2NWNlZGYxZWM0Zjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-27T20:43:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-27T20:43:53Z"}, "message": "First linkable and executable translation from rustc. Upcalls to log, passes wrong arg, crashes. Baby steps.", "tree": {"sha": "ead293996f87cc4069e738ea962c1116a9e4f0eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead293996f87cc4069e738ea962c1116a9e4f0eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9", "html_url": "https://github.com/rust-lang/rust/commit/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53209c9277be20991ed2e6b80fbacb1bf5be424", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53209c9277be20991ed2e6b80fbacb1bf5be424", "html_url": "https://github.com/rust-lang/rust/commit/d53209c9277be20991ed2e6b80fbacb1bf5be424"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "c56fcef375a72c73a3f5bd55f9828faf9c685651", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31eca41d5dd18a079d0b06de3a965cedf1ec4f9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d31eca41d5dd18a079d0b06de3a965cedf1ec4f9", "patch": "@@ -30,6 +30,7 @@ type glue_fns = rec(ValueRef activate_glue,\n type trans_ctxt = rec(session.session sess,\n                       ModuleRef llmod,\n                       hashmap[str,ValueRef] upcalls,\n+                      hashmap[str,ValueRef] fns,\n                       @glue_fns glues,\n                       str path);\n \n@@ -233,13 +234,17 @@ fn default_terminate(@fn_ctxt cx, builder build) {\n     build.RetVoid();\n }\n \n+fn new_builder(BasicBlockRef llbb) -> builder {\n+    let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n+    llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n+    ret builder(llbuild);\n+}\n+\n fn trans_block(@fn_ctxt cx, &ast.block b, terminator term) {\n     let BasicBlockRef llbb =\n         llvm.LLVMAppendBasicBlock(cx.llfn, _str.buf(\"\"));\n-    let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n-    llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n     auto bcx = @rec(llbb=llbb,\n-                    build=builder(llbuild),\n+                    build=new_builder(llbb),\n                     term=term,\n                     fcx=cx);\n     for (@ast.stmt s in b) {\n@@ -253,6 +258,7 @@ fn trans_fn(@trans_ctxt cx, &ast._fn f) {\n                                 T_taskptr()     // taskptr\n                                 );\n     let ValueRef llfn = decl_cdecl_fn(cx.llmod, cx.path, args, T_nil());\n+    cx.fns.insert(cx.path, llfn);\n     let ValueRef lloutptr = llvm.LLVMGetParam(llfn, 0u);\n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 1u);\n     auto fcx = @rec(llfn=llfn,\n@@ -281,16 +287,17 @@ fn trans_mod(@trans_ctxt cx, &ast._mod m) {\n     }\n }\n \n+\n+fn p2i(ValueRef v) -> ValueRef {\n+    ret llvm.LLVMConstPtrToInt(v, T_int());\n+}\n+\n fn crate_constant(@trans_ctxt cx) -> ValueRef {\n \n     let ValueRef crate_ptr =\n-        llvm.LLVMAddGlobal(cx.llmod, T_ptr(T_crate()),\n+        llvm.LLVMAddGlobal(cx.llmod, T_crate(),\n                            _str.buf(\"rust_crate\"));\n \n-    fn p2i(ValueRef v) -> ValueRef {\n-        ret llvm.LLVMConstPtrToInt(v, T_int());\n-    }\n-\n     let ValueRef crate_addr = p2i(crate_ptr);\n \n     let ValueRef activate_glue_off =\n@@ -305,7 +312,7 @@ fn crate_constant(@trans_ctxt cx) -> ValueRef {\n \n     let ValueRef crate_val =\n         C_struct(vec(C_null(T_int()),     // ptrdiff_t image_base_off\n-                     crate_ptr,           // uintptr_t self_addr\n+                     p2i(crate_ptr),      // uintptr_t self_addr\n                      C_null(T_int()),     // ptrdiff_t debug_abbrev_off\n                      C_null(T_int()),     // size_t debug_abbrev_sz\n                      C_null(T_int()),     // ptrdiff_t debug_info_off\n@@ -324,6 +331,38 @@ fn crate_constant(@trans_ctxt cx) -> ValueRef {\n     ret crate_ptr;\n }\n \n+fn trans_main_fn(@trans_ctxt cx, ValueRef llcrate) {\n+    auto T_main_args = vec(T_int(), T_int());\n+    auto T_rust_start_args = vec(T_int(), T_int(), T_int(), T_int());\n+\n+    auto llmain =\n+        decl_cdecl_fn(cx.llmod, \"main\", T_main_args, T_int());\n+\n+    auto llrust_start =\n+        decl_cdecl_fn(cx.llmod, \"rust_start\", T_rust_start_args, T_int());\n+\n+    auto llargc = llvm.LLVMGetParam(llmain, 0u);\n+    auto llargv = llvm.LLVMGetParam(llmain, 1u);\n+    auto llrust_main = cx.fns.get(\"_rust.main\");\n+\n+    //\n+    // Emit the moral equivalent of:\n+    //\n+    // main(int argc, char **argv) {\n+    //     rust_start(&_rust.main, &crate, argc, argv);\n+    // }\n+    //\n+\n+    let BasicBlockRef llbb =\n+        llvm.LLVMAppendBasicBlock(llmain, _str.buf(\"\"));\n+    auto b = new_builder(llbb);\n+\n+    auto start_args = vec(p2i(llrust_main), p2i(llcrate), llargc, llargv);\n+\n+    b.Ret(b.Call(llrust_start, start_args));\n+\n+}\n+\n fn trans_crate(session.session sess, ast.crate crate) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n@@ -341,11 +380,14 @@ fn trans_crate(session.session sess, ast.crate crate) {\n     auto cx = @rec(sess = sess,\n                    llmod = llmod,\n                    upcalls = new_str_hash[ValueRef](),\n+                   fns = new_str_hash[ValueRef](),\n                    glues = glues,\n                    path = \"_rust\");\n \n     trans_mod(cx, crate.module);\n \n+    trans_main_fn(cx, crate_constant(cx));\n+\n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));\n     llvm.LLVMDisposeModule(llmod);\n }"}]}