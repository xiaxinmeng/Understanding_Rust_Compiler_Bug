{"sha": "0fddc2f780b7d075797364386a77b5f2f3bf909b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZGRjMmY3ODBiN2QwNzU3OTczNjQzODZhNzdiNWYyZjNiZjkwOWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-20T21:46:29Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-02-19T16:52:57Z"}, "message": "Support `pub` on `macro_rules`", "tree": {"sha": "5dc1c7b23926cb67136373736b4b09bb802b5b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dc1c7b23926cb67136373736b4b09bb802b5b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fddc2f780b7d075797364386a77b5f2f3bf909b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmAv7OsACgkQgTGiTgx5\n76/odhAAmCi3tXkHIAmKwXnqKz7AtLjtE/t+QqUyW5JaRlsR0pTCKUrm1AfwqAff\nD6gCACodiatCYbl4IQBt7EcXOCwosUvgixIsmUhHaJo68Ywd6O2lGJrSV6cauPrL\nObMfKKrPQTN8E5ON+fijwRK4yqdMiajMWlEH4n3Bav10XySCFYxJ8fq1C5Av+uLx\n5aK8Dki1uZ5heSHJi5VkLLtNgiZcwd9Iub/FvCx5T4HBHBh/3ZlkovIqJCqPTJ5L\nXbEUbLmyyXi9MD+wLDbBzPi70afqv+womPqfiua49ftlK6t47A0eflg3uIrLmV0D\nkB7YNPwWP2gnatizaPGZ3WqktPaSmPrqEaDF673n1ctoiMG7i06iPwSGAyksXd9x\nm/oqUoVqgGYrq+0s6dmv4DMGed1kmGCCe5+/LNE6gjxq2sjHh3YI2wAn/Z+8xIPa\ntYL93S34sjlOQgDsxP8hUPUK614GFAsB+T+NGfzNC1pjhDafwX2z/n3x/xICdqJe\ns4dH5DXaBS9kVSNsKhstIe2AKGk0b654NVxSE4Ox0RgwLUBh8ecx7KaRbx4otypQ\nhB+W/3L1paR21j69r+PeELNHq7jt2//xPOae/SFmTyvpBO5D3rpzM6mZvCibCzIY\nbzf9voiFKjSlxJ2iaVnISnFgQsaBIIk7EZ+E+CQ6X7u2oeRnlCQ=\n=BoMg\n-----END PGP SIGNATURE-----", "payload": "tree 5dc1c7b23926cb67136373736b4b09bb802b5b9e\nparent 25a2c13e9d19c18d5f3c2656e3d2dda086cb023b\nauthor Vadim Petrochenkov <vadim.petrochenkov@gmail.com> 1603230389 +0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1613753577 -0300\n\nSupport `pub` on `macro_rules`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fddc2f780b7d075797364386a77b5f2f3bf909b", "html_url": "https://github.com/rust-lang/rust/commit/0fddc2f780b7d075797364386a77b5f2f3bf909b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fddc2f780b7d075797364386a77b5f2f3bf909b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "html_url": "https://github.com/rust-lang/rust/commit/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b"}], "stats": {"total": 218, "additions": 183, "deletions": 35}, "files": [{"sha": "474ec2b589b71496f240513fac1e74daba61e240", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -665,6 +665,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         // involved, so we only emit errors where there are no other parsing errors.\n         gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n     }\n+    gate_all!(pub_macro_rules, \"`pub` on `macro_rules` items is unstable\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "56f5c3b79bef97cc76809e1a50c66b638f8d18a4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -638,6 +638,9 @@ declare_features! (\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (active, macro_attributes_in_derive_output, \"1.51.0\", Some(81119), None),\n \n+    /// Allows `pub` on `macro_rules` items.\n+    (active, pub_macro_rules, \"1.49.0\", Some(78855), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "45f6dbca9f04817a6dffa47d7d21b67423381825", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -1488,15 +1488,7 @@ impl<'a> Parser<'a> {\n         let vstr = pprust::vis_to_string(vis);\n         let vstr = vstr.trim_end();\n         if macro_rules {\n-            let msg = format!(\"can't qualify macro_rules invocation with `{}`\", vstr);\n-            self.struct_span_err(vis.span, &msg)\n-                .span_suggestion(\n-                    vis.span,\n-                    \"try exporting the macro\",\n-                    \"#[macro_export]\".to_owned(),\n-                    Applicability::MaybeIncorrect, // speculative\n-                )\n-                .emit();\n+            self.sess.gated_spans.gate(sym::pub_macro_rules, vis.span);\n         } else {\n             self.struct_span_err(vis.span, \"can't qualify macro invocation with `pub`\")\n                 .span_suggestion("}, {"sha": "65e5b0dddea30f9a175f003ca67d03c1242a69cf", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -1230,13 +1230,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n+        let is_macro_export = self.r.session.contains_name(&item.attrs, sym::macro_export);\n         self.r.macro_map.insert(def_id.to_def_id(), ext);\n         self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n-        if macro_rules {\n+        if macro_rules && matches!(item.vis.kind, ast::VisibilityKind::Inherited) {\n             let ident = ident.normalize_to_macros_2_0();\n             self.r.macro_names.insert(ident);\n-            let is_macro_export = self.r.session.contains_name(&item.attrs, sym::macro_export);\n             let vis = if is_macro_export {\n                 ty::Visibility::Public\n             } else {\n@@ -1261,6 +1261,11 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }),\n             ))\n         } else {\n+            if is_macro_export {\n+                let what = if macro_rules { \"`macro_rules` with `pub`\" } else { \"`macro` items\" };\n+                let msg = format!(\"`#[macro_export]` cannot be used on {what}\");\n+                self.r.session.span_err(item.span, &msg);\n+            }\n             let module = parent_scope.module;\n             let vis = match item.kind {\n                 // Visibilities must not be resolved non-speculatively twice"}, {"sha": "d4a0f968eee1ef490bc3cf7e08b4c63976923bef", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -874,6 +874,7 @@ symbols! {\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n         ptr_offset_from,\n+        pub_macro_rules,\n         pub_restricted,\n         pure,\n         pushpop_unsafe,"}, {"sha": "c5393703f70919687a92b223d99b6bb6f244453c", "filename": "src/test/ui/did_you_mean/pub-macro-rules.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -1,16 +0,0 @@\n-#[macro_use] mod bleh {\n-    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation\n-        ($n:ident) => (\n-            fn $n () -> i32 {\n-                1\n-            }\n-        )\n-    }\n-\n-}\n-\n-foo!(meh);\n-\n-fn main() {\n-    println!(\"{}\", meh());\n-}"}, {"sha": "0bde5783b8cc615e1784c6f31e491dbbeb1882b5", "filename": "src/test/ui/did_you_mean/pub-macro-rules.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a2c13e9d19c18d5f3c2656e3d2dda086cb023b/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr?ref=25a2c13e9d19c18d5f3c2656e3d2dda086cb023b", "patch": "@@ -1,8 +0,0 @@\n-error: can't qualify macro_rules invocation with `pub`\n-  --> $DIR/pub-macro-rules.rs:2:5\n-   |\n-LL |     pub macro_rules! foo {\n-   |     ^^^ help: try exporting the macro: `#[macro_export]`\n-\n-error: aborting due to previous error\n-"}, {"sha": "5504ec317ae59d597ff40b03308b645a6ce0b492", "filename": "src/test/ui/feature-gates/feature-gate-pub_macro_rules.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,10 @@\n+pub macro_rules! m1 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n+\n+#[cfg(FALSE)]\n+pub macro_rules! m2 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n+\n+pub(crate) macro_rules! m3 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n+\n+pub(in self) macro_rules! m4 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n+\n+fn main() {}"}, {"sha": "bfaec398d9a976fc58587b6aec8d4350a392abc2", "filename": "src/test/ui/feature-gates/feature-gate-pub_macro_rules.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: `pub` on `macro_rules` items is unstable\n+  --> $DIR/feature-gate-pub_macro_rules.rs:1:1\n+   |\n+LL | pub macro_rules! m1 { () => {} }\n+   | ^^^\n+   |\n+   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n+   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n+\n+error[E0658]: `pub` on `macro_rules` items is unstable\n+  --> $DIR/feature-gate-pub_macro_rules.rs:4:1\n+   |\n+LL | pub macro_rules! m2 { () => {} }\n+   | ^^^\n+   |\n+   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n+   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n+\n+error[E0658]: `pub` on `macro_rules` items is unstable\n+  --> $DIR/feature-gate-pub_macro_rules.rs:6:1\n+   |\n+LL | pub(crate) macro_rules! m3 { () => {} }\n+   | ^^^^^^^^^^\n+   |\n+   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n+   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n+\n+error[E0658]: `pub` on `macro_rules` items is unstable\n+  --> $DIR/feature-gate-pub_macro_rules.rs:8:1\n+   |\n+LL | pub(in self) macro_rules! m4 { () => {} }\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n+   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "467c6ba7b78e4caa60eaf32ea917dc6f0b00cf91", "filename": "src/test/ui/macros/macro-export-on-modularized-macros.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,11 @@\n+#![feature(decl_macro)]\n+#![feature(pub_macro_rules)]\n+\n+#[macro_export]\n+macro m1() {} //~ ERROR `#[macro_export]` cannot be used on `macro` items\n+\n+#[macro_export]\n+pub macro_rules! m2 { () => {} }\n+//~^ ERROR `#[macro_export]` cannot be used on `macro_rules` with `pub`\n+\n+fn main() {}"}, {"sha": "8bb031e12cba2c54e54a490328bfb2750b797fc0", "filename": "src/test/ui/macros/macro-export-on-modularized-macros.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,14 @@\n+error: `#[macro_export]` cannot be used on `macro` items\n+  --> $DIR/macro-export-on-modularized-macros.rs:5:1\n+   |\n+LL | macro m1() {}\n+   | ^^^^^^^^^^^^^\n+\n+error: `#[macro_export]` cannot be used on `macro_rules` with `pub`\n+  --> $DIR/macro-export-on-modularized-macros.rs:8:1\n+   |\n+LL | pub macro_rules! m2 { () => {} }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bdb4c73f18b1878ff4d0a94eeccf9db4fbad8651", "filename": "src/test/ui/macros/pub-macro-rules-fail.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,28 @@\n+#![feature(pub_macro_rules)]\n+\n+#[macro_use]\n+mod m {\n+    pub macro_rules! mac { () => {} }\n+\n+    // `pub` `macro_rules` cannot be redefined in the same module.\n+    pub macro_rules! mac { () => {} } //~ ERROR the name `mac` is defined multiple times\n+\n+    pub(self) macro_rules! private_mac { () => {} }\n+}\n+\n+const _: () = {\n+    pub macro_rules! block_mac { () => {} }\n+};\n+\n+mod n {\n+    // Scope of `pub` `macro_rules` is not extended by `#[macro_use]`.\n+    mac!(); //~ ERROR cannot find macro `mac` in this scope\n+\n+    // `pub` `macro_rules` doesn't put the macro into the root module, unlike `#[macro_export]`.\n+    crate::mac!(); //~ ERROR failed to resolve: maybe a missing crate `mac`\n+    crate::block_mac!(); //~ ERROR failed to resolve: maybe a missing crate `block_mac`\n+\n+    crate::m::private_mac!(); //~ ERROR macro `private_mac` is private\n+}\n+\n+fn main() {}"}, {"sha": "588d79dd76a4b9c76b1a1176304df7001c1244c5", "filename": "src/test/ui/macros/pub-macro-rules-fail.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,48 @@\n+error[E0428]: the name `mac` is defined multiple times\n+  --> $DIR/pub-macro-rules-fail.rs:8:5\n+   |\n+LL |     pub macro_rules! mac { () => {} }\n+   |     -------------------- previous definition of the macro `mac` here\n+...\n+LL |     pub macro_rules! mac { () => {} }\n+   |     ^^^^^^^^^^^^^^^^^^^^ `mac` redefined here\n+   |\n+   = note: `mac` must be defined only once in the macro namespace of this module\n+\n+error[E0433]: failed to resolve: maybe a missing crate `mac`?\n+  --> $DIR/pub-macro-rules-fail.rs:22:12\n+   |\n+LL |     crate::mac!();\n+   |            ^^^ maybe a missing crate `mac`?\n+\n+error[E0433]: failed to resolve: maybe a missing crate `block_mac`?\n+  --> $DIR/pub-macro-rules-fail.rs:23:12\n+   |\n+LL |     crate::block_mac!();\n+   |            ^^^^^^^^^ maybe a missing crate `block_mac`?\n+\n+error: cannot find macro `mac` in this scope\n+  --> $DIR/pub-macro-rules-fail.rs:19:5\n+   |\n+LL |     mac!();\n+   |     ^^^\n+   |\n+   = note: consider importing this macro:\n+           m::mac\n+\n+error[E0603]: macro `private_mac` is private\n+  --> $DIR/pub-macro-rules-fail.rs:25:15\n+   |\n+LL |     crate::m::private_mac!();\n+   |               ^^^^^^^^^^^ private macro\n+   |\n+note: the macro `private_mac` is defined here\n+  --> $DIR/pub-macro-rules-fail.rs:10:5\n+   |\n+LL |     pub(self) macro_rules! private_mac { () => {} }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0428, E0433, E0603.\n+For more information about an error, try `rustc --explain E0428`."}, {"sha": "cd4a845f7c07dd3cc8bd6a834612b36772980566", "filename": "src/test/ui/macros/pub-macro-rules.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fddc2f780b7d075797364386a77b5f2f3bf909b/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs?ref=0fddc2f780b7d075797364386a77b5f2f3bf909b", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(pub_macro_rules)]\n+\n+mod m {\n+    // `pub` `macro_rules` can be used earlier in item order than they are defined.\n+    foo!();\n+\n+    pub macro_rules! foo { () => {} }\n+\n+    // `pub(...)` works too.\n+    pub(super) macro_rules! bar { () => {} }\n+}\n+\n+// `pub` `macro_rules` are available by module path.\n+m::foo!();\n+\n+m::bar!();\n+\n+fn main() {}"}]}