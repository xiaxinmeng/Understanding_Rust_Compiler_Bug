{"sha": "2e3b079836823446eb014c69866d6a0f8cca4ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlM2IwNzk4MzY4MjM0NDZlYjAxNGM2OTg2NmQ2YTBmOGNjYTRlZjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-09T02:40:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-09T04:20:24Z"}, "message": "Shrink `ObligationCauseCode` by boxing `IfExpression`.\n\nThe reduction in `memcpy` calls outweighs the cost of the extra\nallocations, for a net performance win.", "tree": {"sha": "89005b8caa30791b9e6858899ec31c43e4feeb36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89005b8caa30791b9e6858899ec31c43e4feeb36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e3b079836823446eb014c69866d6a0f8cca4ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3b079836823446eb014c69866d6a0f8cca4ef2", "html_url": "https://github.com/rust-lang/rust/commit/2e3b079836823446eb014c69866d6a0f8cca4ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e3b079836823446eb014c69866d6a0f8cca4ef2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b972ac818c98373b6d045956b049dc34932c41be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b972ac818c98373b6d045956b049dc34932c41be", "html_url": "https://github.com/rust-lang/rust/commit/b972ac818c98373b6d045956b049dc34932c41be"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "ab24b3f2f059f1b953a5b5befa982e9630090ff0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2e3b079836823446eb014c69866d6a0f8cca4ef2", "patch": "@@ -55,7 +55,8 @@ use crate::hir::def_id::DefId;\n use crate::hir::Node;\n use crate::infer::opaque_types;\n use crate::middle::region;\n-use crate::traits::{MatchExpressionArmCause, ObligationCause, ObligationCauseCode};\n+use crate::traits::{IfExpressionCause, MatchExpressionArmCause, ObligationCause};\n+use crate::traits::{ObligationCauseCode};\n use crate::ty::error::TypeError;\n use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n@@ -681,7 +682,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             },\n-            ObligationCauseCode::IfExpression { then, outer, semicolon } => {\n+            ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {\n                 err.span_label(then, \"expected because of this\");\n                 outer.map(|sp| err.span_label(sp, \"if and else have incompatible types\"));\n                 if let Some(sp) = semicolon {"}, {"sha": "4494c034d51e2e087a3564bb086845ddb0f064c2", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=2e3b079836823446eb014c69866d6a0f8cca4ef2", "patch": "@@ -70,7 +70,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 144);\n+static_assert_size!(PendingPredicateObligation<'_>, 136);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "d2683090add4031e4790eb118756a00d7d471c71", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2e3b079836823446eb014c69866d6a0f8cca4ef2", "patch": "@@ -125,7 +125,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 120);\n+static_assert_size!(PredicateObligation<'_>, 112);\n \n /// The reason why we incurred this obligation; used for error reporting.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n@@ -234,11 +234,7 @@ pub enum ObligationCauseCode<'tcx> {\n     MatchExpressionArmPattern { span: Span, ty: Ty<'tcx> },\n \n     /// Computing common supertype in an if expression\n-    IfExpression {\n-        then: Span,\n-        outer: Option<Span>,\n-        semicolon: Option<Span>,\n-    },\n+    IfExpression(Box<IfExpressionCause>),\n \n     /// Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse,\n@@ -270,7 +266,7 @@ pub enum ObligationCauseCode<'tcx> {\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(ObligationCauseCode<'_>, 40);\n+static_assert_size!(ObligationCauseCode<'_>, 32);\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct MatchExpressionArmCause<'tcx> {\n@@ -281,6 +277,13 @@ pub struct MatchExpressionArmCause<'tcx> {\n     pub discrim_hir_id: hir::HirId,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct IfExpressionCause {\n+    pub then: Span,\n+    pub outer: Option<Span>,\n+    pub semicolon: Option<Span>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait reference of the parent obligation that led to the"}, {"sha": "6930c9368282b8b9cfb0b2e79c7a2449a2ec2f69", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=2e3b079836823446eb014c69866d6a0f8cca4ef2", "patch": "@@ -528,11 +528,13 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MatchExpressionArmPattern { span, ty } => {\n                 tcx.lift(&ty).map(|ty| super::MatchExpressionArmPattern { span, ty })\n             }\n-            super::IfExpression { then, outer, semicolon } => Some(super::IfExpression {\n-                then,\n-                outer,\n-                semicolon,\n-            }),\n+            super::IfExpression(box super::IfExpressionCause { then, outer, semicolon }) => {\n+                Some(super::IfExpression(box super::IfExpressionCause {\n+                    then,\n+                    outer,\n+                    semicolon,\n+                }))\n+            }\n             super::IfExpressionWithNoElse => Some(super::IfExpressionWithNoElse),\n             super::MainFunctionType => Some(super::MainFunctionType),\n             super::StartFunctionType => Some(super::StartFunctionType),"}, {"sha": "308a3d8ebc2cfd4a88fa291d5d2978f81845c7f5", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3b079836823446eb014c69866d6a0f8cca4ef2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2e3b079836823446eb014c69866d6a0f8cca4ef2", "patch": "@@ -2,7 +2,8 @@ use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n use crate::check::coercion::CoerceMany;\n use rustc::hir::{self, ExprKind};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::traits::{MatchExpressionArmCause, ObligationCause, ObligationCauseCode};\n+use rustc::traits::{IfExpressionCause, MatchExpressionArmCause, ObligationCause};\n+use rustc::traits::{ObligationCauseCode};\n use rustc::ty::Ty;\n use syntax_pos::Span;\n \n@@ -347,11 +348,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // Finally construct the cause:\n-        self.cause(error_sp, ObligationCauseCode::IfExpression {\n+        self.cause(error_sp, ObligationCauseCode::IfExpression(box IfExpressionCause {\n             then: then_sp,\n             outer: outer_sp,\n             semicolon: remove_semicolon,\n-        })\n+        }))\n     }\n \n     fn demand_discriminant_type("}]}