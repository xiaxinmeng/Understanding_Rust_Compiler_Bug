{"sha": "42c5473d005c39e2d0262ba38e4ea6e1e0469455", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzU0NzNkMDA1YzM5ZTJkMDI2MmJhMzhlNGVhNmUxZTA0Njk0NTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T00:35:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:59:01Z"}, "message": "librustc_incremental: Unconfigure tests during normal build", "tree": {"sha": "f85a4b33ce559987c77c9bf5423b59c82a091acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85a4b33ce559987c77c9bf5423b59c82a091acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c5473d005c39e2d0262ba38e4ea6e1e0469455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c5473d005c39e2d0262ba38e4ea6e1e0469455", "html_url": "https://github.com/rust-lang/rust/commit/42c5473d005c39e2d0262ba38e4ea6e1e0469455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c5473d005c39e2d0262ba38e4ea6e1e0469455/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "html_url": "https://github.com/rust-lang/rust/commit/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "511175de5d8d1c043509f9ed4239ef2769e00896", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=42c5473d005c39e2d0262ba38e4ea6e1e0469455", "patch": "@@ -117,6 +117,9 @@ use std::time::{UNIX_EPOCH, SystemTime, Duration};\n \n use rand::{RngCore, thread_rng};\n \n+#[cfg(test)]\n+mod tests;\n+\n const LOCK_FILE_EXT: &str = \".lock\";\n const DEP_GRAPH_FILENAME: &str = \"dep-graph.bin\";\n const WORK_PRODUCTS_FILENAME: &str = \"work-products.bin\";\n@@ -894,67 +897,3 @@ fn safe_remove_file(p: &Path) -> io::Result<()> {\n         Ok(())\n     }\n }\n-\n-#[test]\n-fn test_all_except_most_recent() {\n-    assert_eq!(all_except_most_recent(\n-        vec![\n-            (UNIX_EPOCH + Duration::new(4, 0), PathBuf::from(\"4\"), None),\n-            (UNIX_EPOCH + Duration::new(1, 0), PathBuf::from(\"1\"), None),\n-            (UNIX_EPOCH + Duration::new(5, 0), PathBuf::from(\"5\"), None),\n-            (UNIX_EPOCH + Duration::new(3, 0), PathBuf::from(\"3\"), None),\n-            (UNIX_EPOCH + Duration::new(2, 0), PathBuf::from(\"2\"), None),\n-        ]).keys().cloned().collect::<FxHashSet<PathBuf>>(),\n-        vec![\n-            PathBuf::from(\"1\"),\n-            PathBuf::from(\"2\"),\n-            PathBuf::from(\"3\"),\n-            PathBuf::from(\"4\"),\n-        ].into_iter().collect::<FxHashSet<PathBuf>>()\n-    );\n-\n-    assert_eq!(all_except_most_recent(\n-        vec![\n-        ]).keys().cloned().collect::<FxHashSet<PathBuf>>(),\n-        FxHashSet::default()\n-    );\n-}\n-\n-#[test]\n-fn test_timestamp_serialization() {\n-    for i in 0 .. 1_000u64 {\n-        let time = UNIX_EPOCH + Duration::new(i * 1_434_578, (i as u32) * 239_000);\n-        let s = timestamp_to_string(time);\n-        assert_eq!(Ok(time), string_to_timestamp(&s));\n-    }\n-}\n-\n-#[test]\n-fn test_find_source_directory_in_iter() {\n-    let already_visited = FxHashSet::default();\n-\n-    // Find newest\n-    assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/s-3234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n-        Some(PathBuf::from(\"crate-dir/s-3234-0000-svh\")));\n-\n-    // Filter out \"-working\"\n-    assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n-             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n-        Some(PathBuf::from(\"crate-dir/s-2234-0000-svh\")));\n-\n-    // Handle empty\n-    assert_eq!(find_source_directory_in_iter(vec![].into_iter(), &already_visited),\n-               None);\n-\n-    // Handle only working\n-    assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n-             PathBuf::from(\"crate-dir/s-2234-0000-working\"),\n-             PathBuf::from(\"crate-dir/s-1234-0000-working\")].into_iter(), &already_visited),\n-        None);\n-}"}, {"sha": "09c2fc146383623c2d4544a2d4688a6bdc4b4496", "filename": "src/librustc_incremental/persist/fs/tests.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Flibrustc_incremental%2Fpersist%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Flibrustc_incremental%2Fpersist%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs%2Ftests.rs?ref=42c5473d005c39e2d0262ba38e4ea6e1e0469455", "patch": "@@ -0,0 +1,65 @@\n+use super::*;\n+\n+#[test]\n+fn test_all_except_most_recent() {\n+    assert_eq!(all_except_most_recent(\n+        vec![\n+            (UNIX_EPOCH + Duration::new(4, 0), PathBuf::from(\"4\"), None),\n+            (UNIX_EPOCH + Duration::new(1, 0), PathBuf::from(\"1\"), None),\n+            (UNIX_EPOCH + Duration::new(5, 0), PathBuf::from(\"5\"), None),\n+            (UNIX_EPOCH + Duration::new(3, 0), PathBuf::from(\"3\"), None),\n+            (UNIX_EPOCH + Duration::new(2, 0), PathBuf::from(\"2\"), None),\n+        ]).keys().cloned().collect::<FxHashSet<PathBuf>>(),\n+        vec![\n+            PathBuf::from(\"1\"),\n+            PathBuf::from(\"2\"),\n+            PathBuf::from(\"3\"),\n+            PathBuf::from(\"4\"),\n+        ].into_iter().collect::<FxHashSet<PathBuf>>()\n+    );\n+\n+    assert_eq!(all_except_most_recent(\n+        vec![\n+        ]).keys().cloned().collect::<FxHashSet<PathBuf>>(),\n+        FxHashSet::default()\n+    );\n+}\n+\n+#[test]\n+fn test_timestamp_serialization() {\n+    for i in 0 .. 1_000u64 {\n+        let time = UNIX_EPOCH + Duration::new(i * 1_434_578, (i as u32) * 239_000);\n+        let s = timestamp_to_string(time);\n+        assert_eq!(Ok(time), string_to_timestamp(&s));\n+    }\n+}\n+\n+#[test]\n+fn test_find_source_directory_in_iter() {\n+    let already_visited = FxHashSet::default();\n+\n+    // Find newest\n+    assert_eq!(find_source_directory_in_iter(\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n+        Some(PathBuf::from(\"crate-dir/s-3234-0000-svh\")));\n+\n+    // Filter out \"-working\"\n+    assert_eq!(find_source_directory_in_iter(\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n+        Some(PathBuf::from(\"crate-dir/s-2234-0000-svh\")));\n+\n+    // Handle empty\n+    assert_eq!(find_source_directory_in_iter(vec![].into_iter(), &already_visited),\n+               None);\n+\n+    // Handle only working\n+    assert_eq!(find_source_directory_in_iter(\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-working\")].into_iter(), &already_visited),\n+        None);\n+}"}, {"sha": "79ccc11a69ad319c494f45c22857ee634353a805", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5473d005c39e2d0262ba38e4ea6e1e0469455/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=42c5473d005c39e2d0262ba38e4ea6e1e0469455", "patch": "@@ -29,7 +29,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         \"liballoc\",\n         \"librustc\",\n         \"librustc_data_structures\",\n-        \"librustc_incremental/persist\",\n         \"librustdoc\",\n         \"libstd\",\n         \"libsyntax\","}]}