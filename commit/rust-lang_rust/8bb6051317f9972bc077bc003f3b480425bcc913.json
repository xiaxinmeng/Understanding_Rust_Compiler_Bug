{"sha": "8bb6051317f9972bc077bc003f3b480425bcc913", "node_id": "C_kwDOAAsO6NoAKDhiYjYwNTEzMTdmOTk3MmJjMDc3YmMwMDNmM2I0ODA0MjViY2M5MTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-23T11:26:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-23T11:26:41Z"}, "message": "Rollup merge of #94137 - aDotInTheVoid:abi-enum, r=CraftSpider\n\nrustdoc-json: Better Header Type\n\n- Make ABI an enum, instead of being stringly typed\n- Replace Qualifier HashSet with 3 bools\n- Merge ABI field into header, as they always occor together\n\nr? ``@CraftSpider``\n\n``@rustbot`` modify labels: +A-rustdoc-json +T-rustdoc", "tree": {"sha": "c8b0ea441ea2de8d2845a2ac43847ca528fd43ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b0ea441ea2de8d2845a2ac43847ca528fd43ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb6051317f9972bc077bc003f3b480425bcc913", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFhnxCRBK7hj4Ov3rIwAA8csIAFl0lf24deDBRDEr6DMnKQ0D\n3HrjQbE1Fy84uMAjWF48AeKZArCEr3UI8Av1dTLmmvQo8WhSVHaBWSu2zcGNvFDr\nTIPzTTDQcvmWC8tRklDX4V10x7iYNC3R/yXyGU0sa/JmexwqJpXK3EY7r5jGkD3o\nQQeKotFq2Dsj0Z3ABVZPoR6DCMNDZ9xU9ypFzxNK+MFklxs04z6DKy4u/Piyw5YZ\nv0Ppo7AIdwqi5OF94FDXt5xhr4j3tTDKusvdzqyAysr+jXuhzrv6hfF5NBc5tXJL\nC8sfUyAyFrI6crco6xob7Z8asbHTo7CmN+39X3HU/ThyM/pUsmsEiHbCYesGrec=\n=DrbZ\n-----END PGP SIGNATURE-----\n", "payload": "tree c8b0ea441ea2de8d2845a2ac43847ca528fd43ef\nparent 0c676a8a8475f9b702a4d1ed7e5569c7eee6c799\nparent fd5adefce11c820b5ee1045058a435aa174bccf4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645615601 +0100\ncommitter GitHub <noreply@github.com> 1645615601 +0100\n\nRollup merge of #94137 - aDotInTheVoid:abi-enum, r=CraftSpider\n\nrustdoc-json: Better Header Type\n\n- Make ABI an enum, instead of being stringly typed\n- Replace Qualifier HashSet with 3 bools\n- Merge ABI field into header, as they always occor together\n\nr? ``@CraftSpider``\n\n``@rustbot`` modify labels: +A-rustdoc-json +T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb6051317f9972bc077bc003f3b480425bcc913", "html_url": "https://github.com/rust-lang/rust/commit/8bb6051317f9972bc077bc003f3b480425bcc913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb6051317f9972bc077bc003f3b480425bcc913/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "html_url": "https://github.com/rust-lang/rust/commit/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799"}, {"sha": "fd5adefce11c820b5ee1045058a435aa174bccf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5adefce11c820b5ee1045058a435aa174bccf4", "html_url": "https://github.com/rust-lang/rust/commit/fd5adefce11c820b5ee1045058a435aa174bccf4"}], "stats": {"total": 357, "additions": 242, "deletions": 115}, "files": [{"sha": "d48c8e81f540f9bb20915f56d955d344492a839a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -2776,6 +2776,10 @@ impl FnHeader {\n     pub fn is_const(&self) -> bool {\n         matches!(&self.constness, Constness::Const)\n     }\n+\n+    pub fn is_unsafe(&self) -> bool {\n+        matches!(&self.unsafety, Unsafety::Unsafe)\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "d4aedb41ddb18e8f459895d4f403b4be02080720", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -12,14 +12,14 @@ use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::Pos;\n+use rustc_target::spec::abi::Abi as RustcAbi;\n \n use rustdoc_json_types::*;\n \n use crate::clean::utils::print_const_expr;\n use crate::clean::{self, ItemId};\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n-use std::collections::HashSet;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n@@ -271,22 +271,28 @@ crate fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n     }\n }\n \n-crate fn from_fn_header(header: &rustc_hir::FnHeader) -> HashSet<Qualifiers> {\n-    let mut v = HashSet::new();\n-\n-    if let rustc_hir::Unsafety::Unsafe = header.unsafety {\n-        v.insert(Qualifiers::Unsafe);\n-    }\n-\n-    if let rustc_hir::IsAsync::Async = header.asyncness {\n-        v.insert(Qualifiers::Async);\n+crate fn from_fn_header(header: &rustc_hir::FnHeader) -> Header {\n+    Header {\n+        async_: header.is_async(),\n+        const_: header.is_const(),\n+        unsafe_: header.is_unsafe(),\n+        abi: convert_abi(header.abi),\n     }\n+}\n \n-    if let rustc_hir::Constness::Const = header.constness {\n-        v.insert(Qualifiers::Const);\n+fn convert_abi(a: RustcAbi) -> Abi {\n+    match a {\n+        RustcAbi::Rust => Abi::Rust,\n+        RustcAbi::C { unwind } => Abi::C { unwind },\n+        RustcAbi::Cdecl { unwind } => Abi::Cdecl { unwind },\n+        RustcAbi::Stdcall { unwind } => Abi::Stdcall { unwind },\n+        RustcAbi::Fastcall { unwind } => Abi::Fastcall { unwind },\n+        RustcAbi::Aapcs { unwind } => Abi::Aapcs { unwind },\n+        RustcAbi::Win64 { unwind } => Abi::Win64 { unwind },\n+        RustcAbi::SysV64 { unwind } => Abi::SysV64 { unwind },\n+        RustcAbi::System { unwind } => Abi::System { unwind },\n+        _ => Abi::Other(a.to_string()),\n     }\n-\n-    v\n }\n \n impl FromWithTcx<clean::Function> for Function {\n@@ -296,7 +302,6 @@ impl FromWithTcx<clean::Function> for Function {\n             decl: decl.into_tcx(tcx),\n             generics: generics.into_tcx(tcx),\n             header: from_fn_header(&header),\n-            abi: header.abi.to_string(),\n         }\n     }\n }\n@@ -465,16 +470,14 @@ impl FromWithTcx<clean::BareFunctionDecl> for FunctionPointer {\n     fn from_tcx(bare_decl: clean::BareFunctionDecl, tcx: TyCtxt<'_>) -> Self {\n         let clean::BareFunctionDecl { unsafety, generic_params, decl, abi } = bare_decl;\n         FunctionPointer {\n-            header: if let rustc_hir::Unsafety::Unsafe = unsafety {\n-                let mut hs = HashSet::new();\n-                hs.insert(Qualifiers::Unsafe);\n-                hs\n-            } else {\n-                HashSet::new()\n+            header: Header {\n+                unsafe_: matches!(unsafety, rustc_hir::Unsafety::Unsafe),\n+                const_: false,\n+                async_: false,\n+                abi: convert_abi(abi),\n             },\n             generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             decl: decl.into_tcx(tcx),\n-            abi: abi.to_string(),\n         }\n     }\n }\n@@ -554,7 +557,6 @@ crate fn from_function_method(\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),\n         header: from_fn_header(&header),\n-        abi: header.abi.to_string(),\n         has_body,\n     }\n }"}, {"sha": "be9bbc7391d752a9d7a631a3f5e6308e853ac018", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -3,13 +3,13 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n-use std::collections::{HashMap, HashSet};\n+use std::collections::HashMap;\n use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 10;\n+pub const FORMAT_VERSION: u32 = 11;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -287,29 +287,45 @@ pub enum StructType {\n     Unit,\n }\n \n-#[non_exhaustive]\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n-#[serde(rename_all = \"snake_case\")]\n-pub enum Qualifiers {\n-    Const,\n-    Unsafe,\n-    Async,\n+pub struct Header {\n+    #[serde(rename = \"const\")]\n+    pub const_: bool,\n+    #[serde(rename = \"unsafe\")]\n+    pub unsafe_: bool,\n+    #[serde(rename = \"async\")]\n+    pub async_: bool,\n+    pub abi: Abi,\n+}\n+\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+pub enum Abi {\n+    // We only have a concrete listing here for stable ABI's because their are so many\n+    // See rustc_ast_passes::feature_gate::PostExpansionVisitor::check_abi for the list\n+    Rust,\n+    C { unwind: bool },\n+    Cdecl { unwind: bool },\n+    Stdcall { unwind: bool },\n+    Fastcall { unwind: bool },\n+    Aapcs { unwind: bool },\n+    Win64 { unwind: bool },\n+    SysV64 { unwind: bool },\n+    System { unwind: bool },\n+    Other(String),\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n     pub has_body: bool,\n }\n \n@@ -426,8 +442,7 @@ pub enum Type {\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     pub generic_params: Vec<GenericParamDef>,\n-    pub header: HashSet<Qualifiers>,\n-    pub abi: String,\n+    pub header: Header,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "eef20e60a6a466d8232b62845f3281f8bb06d3bb", "filename": "src/test/rustdoc-json/fn_pointer/abi.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,25 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+\n+// @is abi.json \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n+pub type AbiRust = fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiC')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+pub type AbiC = extern \"C\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiSystem')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+pub type AbiSystem = extern \"system\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiCUnwind')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+pub type AbiCUnwind = extern \"C-unwind\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+pub type AbiSystemUnwind = extern \"system-unwind\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiVecorcall')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+pub type AbiVecorcall = extern \"vectorcall\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+pub type AbiVecorcallUnwind = extern \"vectorcall-unwind\" fn();"}, {"sha": "a5038e0cd2aa86e6dfe72294514d0bd75ea974ff", "filename": "src/test/rustdoc-json/fn_pointer/header.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -1,5 +0,0 @@\n-// @has header.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header\" \"[]\"\n-pub type FnPointer = fn();\n-\n-// @has - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header\" '[\"unsafe\"]'\n-pub type UnsafePointer = unsafe fn();"}, {"sha": "38192208536395673400506be4ab49d1a360834a", "filename": "src/test/rustdoc-json/fn_pointer/qualifiers.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,9 @@\n+// @is qualifiers.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.unsafe\" false\n+// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.const\" false\n+// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.async\" false\n+pub type FnPointer = fn();\n+\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.unsafe\" true\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.const\" false\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.async\" false\n+pub type UnsafePointer = unsafe fn();"}, {"sha": "16b579130656a9b910095e5d12bb6d5585c941c7", "filename": "src/test/rustdoc-json/fns/abi.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,25 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+\n+// @is abi.json \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+pub fn abi_rust() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+pub extern \"C\" fn abi_c() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+pub extern \"system\" fn abi_system() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+pub extern \"C-unwind\" fn abi_c_unwind() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+pub extern \"system-unwind\" fn abi_system_unwind() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+pub extern \"vectorcall\" fn abi_vectorcall() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}"}, {"sha": "29741dd50dadc927e5a3b7696b317233c14b5cdc", "filename": "src/test/rustdoc-json/fns/header.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -1,22 +0,0 @@\n-// edition:2018\n-\n-// @has header.json \"$.index[*][?(@.name=='nothing_fn')].inner.header\" \"[]\"\n-pub fn nothing_fn() {}\n-\n-// @has - \"$.index[*][?(@.name=='const_fn')].inner.header\" '[\"const\"]'\n-pub const fn const_fn() {}\n-\n-// @has - \"$.index[*][?(@.name=='async_fn')].inner.header\" '[\"async\"]'\n-pub async fn async_fn() {}\n-\n-// @count - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" 2\n-// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"async\"'\n-// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n-pub async unsafe fn async_unsafe_fn() {}\n-\n-// @count - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" 2\n-// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"const\"'\n-// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n-pub const unsafe fn const_unsafe_fn() {}\n-\n-// It's impossible for a function to be both const and async, so no test for that"}, {"sha": "5cb3b43e66a964ca35ceda30fe24b20e260eb847", "filename": "src/test/rustdoc-json/fns/qualifiers.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,33 @@\n+// edition:2018\n+\n+// @is qualifiers.json \"$.index[*][?(@.name=='nothing_fn')].inner.header.async\" false\n+// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.unsafe\" false\n+pub fn nothing_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.unsafe\" true\n+pub unsafe fn unsafe_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.const\"  true\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.unsafe\" false\n+pub const fn const_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.async\"  true\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.unsafe\" false\n+pub async fn async_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.async\"  true\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.unsafe\" true\n+pub async unsafe fn async_unsafe_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.const\"  true\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.unsafe\" true\n+pub const unsafe fn const_unsafe_fn() {}\n+\n+// It's impossible for a function to be both const and async, so no test for that"}, {"sha": "6fabbc836117ba7232baa87cad103a3e0fec977a", "filename": "src/test/rustdoc-json/method_abi.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -1,25 +0,0 @@\n-// @has method_abi.json \"$.index[*][?(@.name=='Foo')]\"\n-pub struct Foo;\n-\n-impl Foo {\n-    // @has - \"$.index[*][?(@.name=='abi_rust')].inner.abi\" '\"\\\"Rust\\\"\"'\n-    pub fn abi_rust() {}\n-\n-    // @has - \"$.index[*][?(@.name=='abi_c')].inner.abi\" '\"\\\"C\\\"\"'\n-    pub extern \"C\" fn abi_c() {}\n-\n-    // @has - \"$.index[*][?(@.name=='abi_system')].inner.abi\" '\"\\\"system\\\"\"'\n-    pub extern \"system\" fn abi_system() {}\n-}\n-\n-// @has method_abi.json \"$.index[*][?(@.name=='Bar')]\"\n-pub trait Bar {\n-    // @has - \"$.index[*][?(@.name=='trait_abi_rust')].inner.abi\" '\"\\\"Rust\\\"\"'\n-    fn trait_abi_rust();\n-\n-    // @has - \"$.index[*][?(@.name=='trait_abi_c')].inner.abi\" '\"\\\"C\\\"\"'\n-    extern \"C\" fn trait_abi_c();\n-\n-    // @has - \"$.index[*][?(@.name=='trait_abi_system')].inner.abi\" '\"\\\"system\\\"\"'\n-    extern \"system\" fn trait_abi_system();\n-}"}, {"sha": "07b01d03bf6e30aa17506692e0e01adc2343dc95", "filename": "src/test/rustdoc-json/methods/abi.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,55 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @has abi.json \"$.index[*][?(@.name=='Foo')]\"\n+pub struct Foo;\n+\n+impl Foo {\n+    // @is - \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    pub fn abi_rust() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    pub extern \"C\" fn abi_c() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    pub extern \"system\" fn abi_system() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    pub extern \"C-unwind\" fn abi_c_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    pub extern \"system-unwind\" fn abi_system_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    pub extern \"vectorcall\" fn abi_vectorcall() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}\n+}\n+\n+pub trait Bar {\n+    // @is - \"$.index[*][?(@.name=='trait_abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    fn trait_abi_rust() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    extern \"C\" fn trait_abi_c() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    extern \"system\" fn trait_abi_system() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    extern \"C-unwind\" fn trait_abi_c_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    extern \"system-unwind\" fn trait_abi_system_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    extern \"vectorcall\" fn trait_abi_vectorcall() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    extern \"vectorcall-unwind\" fn trait_abi_vectorcall_unwind() {}\n+}"}, {"sha": "50a3db75ef395a14c315d7f88e4e1b13f77c88e2", "filename": "src/test/rustdoc-json/methods/header.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -1,26 +0,0 @@\n-// edition:2018\n-\n-pub struct Foo;\n-\n-impl Foo {\n-    // @has header.json \"$.index[*][?(@.name=='nothing_meth')].inner.header\" \"[]\"\n-    pub fn nothing_meth() {}\n-\n-    // @has - \"$.index[*][?(@.name=='const_meth')].inner.header\" '[\"const\"]'\n-    pub const fn const_meth() {}\n-\n-    // @has - \"$.index[*][?(@.name=='async_meth')].inner.header\" '[\"async\"]'\n-    pub async fn async_meth() {}\n-\n-    // @count - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" 2\n-    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"async\"'\n-    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n-    pub async unsafe fn async_unsafe_meth() {}\n-\n-    // @count - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" 2\n-    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"const\"'\n-    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n-    pub const unsafe fn const_unsafe_meth() {}\n-\n-    // It's impossible for a method to be both const and async, so no test for that\n-}"}, {"sha": "af36d36b6607d9bcfe0f8226f29ec8327ca6e6f9", "filename": "src/test/rustdoc-json/methods/qualifiers.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb6051317f9972bc077bc003f3b480425bcc913/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs?ref=8bb6051317f9972bc077bc003f3b480425bcc913", "patch": "@@ -0,0 +1,37 @@\n+// edition:2018\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @is qualifiers.json \"$.index[*][?(@.name=='const_meth')].inner.header.async\" false\n+    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.const\"  true\n+    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.unsafe\" false\n+    pub const fn const_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.unsafe\" false\n+    pub fn nothing_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.unsafe\" true\n+    pub unsafe fn unsafe_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.async\"  true\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.unsafe\" false\n+    pub async fn async_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.async\"  true\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.unsafe\" true\n+    pub async unsafe fn async_unsafe_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.const\"  true\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.unsafe\" true\n+    pub const unsafe fn const_unsafe_meth() {}\n+\n+    // It's impossible for a method to be both const and async, so no test for that\n+}"}]}