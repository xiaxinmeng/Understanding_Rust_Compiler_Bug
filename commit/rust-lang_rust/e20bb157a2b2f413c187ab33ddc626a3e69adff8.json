{"sha": "e20bb157a2b2f413c187ab33ddc626a3e69adff8", "node_id": "C_kwDOAAsO6NoAKGUyMGJiMTU3YTJiMmY0MTNjMTg3YWIzM2RkYzYyNmEzZTY5YWRmZjg", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T00:36:48Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-30T20:52:58Z"}, "message": "Remove unnecessary `Box` in `Type::QPath`", "tree": {"sha": "240083f3dc9734e3eedd4d5099b1462dd9c3fcec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240083f3dc9734e3eedd4d5099b1462dd9c3fcec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20bb157a2b2f413c187ab33ddc626a3e69adff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20bb157a2b2f413c187ab33ddc626a3e69adff8", "html_url": "https://github.com/rust-lang/rust/commit/e20bb157a2b2f413c187ab33ddc626a3e69adff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20bb157a2b2f413c187ab33ddc626a3e69adff8/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8351c30e4c96e7cea91edc169a404c3c66ebff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8351c30e4c96e7cea91edc169a404c3c66ebff7", "html_url": "https://github.com/rust-lang/rust/commit/b8351c30e4c96e7cea91edc169a404c3c66ebff7"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "20fb91eba39a1cf84a1814f7cc5794358b50a558", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e20bb157a2b2f413c187ab33ddc626a3e69adff8", "patch": "@@ -545,7 +545,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     match lhs {\n                         Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n-                            let mut new_trait = *trait_.clone();\n+                            let mut new_trait = trait_.clone();\n \n                             if self.is_fn_trait(trait_) && left_name == sym::Output {\n                                 ty_to_fn\n@@ -592,12 +592,12 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             // duplicate bound like `T: Iterator + Iterator<Item=u8>`\n                             // on the docs page.\n                             bounds.remove(&GenericBound::TraitBound(\n-                                PolyTrait { trait_: *trait_.clone(), generic_params: Vec::new() },\n+                                PolyTrait { trait_: trait_.clone(), generic_params: Vec::new() },\n                                 hir::TraitBoundModifier::None,\n                             ));\n                             // Avoid creating any new duplicate bounds later in the outer\n                             // loop\n-                            ty_to_traits.entry(*ty.clone()).or_default().insert(*trait_.clone());\n+                            ty_to_traits.entry(*ty.clone()).or_default().insert(trait_.clone());\n                         }\n                         _ => panic!(\"Unexpected LHS {:?} for {:?}\", lhs, item_def_id),\n                     }"}, {"sha": "73e56a610fbb3aa4ea280e2ef42b73ef97e2e75c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e20bb157a2b2f413c187ab33ddc626a3e69adff8", "patch": "@@ -387,7 +387,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n             self_def_id: self_type.def_id(),\n             self_type: box self_type,\n-            trait_: box trait_,\n+            trait_,\n         }\n     }\n }\n@@ -1277,16 +1277,16 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n             let trait_segments = &segments[..segments.len() - 1];\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n-            let trait_path = self::Path {\n+            let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n                 segments: trait_segments.clean(cx),\n             };\n-            register_res(cx, trait_path.res);\n+            register_res(cx, trait_.res);\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n                 self_type: box qself.clean(cx),\n-                trait_: box trait_path,\n+                trait_,\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1297,13 +1297,13 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 ty::Error(_) => return Type::Infer,\n                 _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n             };\n-            let trait_path = hir::Path { span, res, segments: &[] }.clean(cx);\n-            register_res(cx, trait_path.res);\n+            let trait_ = hir::Path { span, res, segments: &[] }.clean(cx);\n+            register_res(cx, trait_.res);\n             Type::QPath {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n                 self_type: box qself.clean(cx),\n-                trait_: box trait_path,\n+                trait_,\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),"}, {"sha": "b57e8a0ed2aa8aca53290a2267e6ecfd681c2696", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e20bb157a2b2f413c187ab33ddc626a3e69adff8", "patch": "@@ -1408,8 +1408,7 @@ crate enum Type {\n         name: Symbol,\n         self_type: Box<Type>,\n         self_def_id: Option<DefId>,\n-        // FIXME: remove this `Box`; it's unnecessary\n-        trait_: Box<Path>,\n+        trait_: Path,\n     },\n \n     // `_`"}, {"sha": "fda540aa186b08924974fd9a4d383aae4e4a7ffe", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20bb157a2b2f413c187ab33ddc626a3e69adff8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e20bb157a2b2f413c187ab33ddc626a3e69adff8", "patch": "@@ -436,7 +436,7 @@ impl FromWithTcx<clean::Type> for Type {\n             },\n             QPath { name, self_type, trait_, .. } => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = ResolvedPath { did: trait_.res.def_id(), path: *trait_ }.into_tcx(tcx);\n+                let trait_ = ResolvedPath { did: trait_.res.def_id(), path: trait_ }.into_tcx(tcx);\n                 Type::QualifiedPath {\n                     name: name.to_string(),\n                     self_type: Box::new((*self_type).into_tcx(tcx)),"}]}