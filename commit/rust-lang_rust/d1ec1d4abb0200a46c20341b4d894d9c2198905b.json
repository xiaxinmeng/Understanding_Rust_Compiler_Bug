{"sha": "d1ec1d4abb0200a46c20341b4d894d9c2198905b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWMxZDRhYmIwMjAwYTQ2YzIwMzQxYjRkODk0ZDljMjE5ODkwNWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-12T19:05:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-12T21:30:14Z"}, "message": "Treat enums with one variant specially in borrowck: #2573", "tree": {"sha": "f7cbdcca8237b8f8ae9d5f162cff19fe8ce0dd22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cbdcca8237b8f8ae9d5f162cff19fe8ce0dd22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ec1d4abb0200a46c20341b4d894d9c2198905b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec1d4abb0200a46c20341b4d894d9c2198905b", "html_url": "https://github.com/rust-lang/rust/commit/d1ec1d4abb0200a46c20341b4d894d9c2198905b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec1d4abb0200a46c20341b4d894d9c2198905b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1655c1a825e6170a735d185a9f181061c429821d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1655c1a825e6170a735d185a9f181061c429821d", "html_url": "https://github.com/rust-lang/rust/commit/1655c1a825e6170a735d185a9f181061c429821d"}], "stats": {"total": 153, "additions": 120, "deletions": 33}, "files": [{"sha": "66118dbc38c3abc087650996ed36af96d8f11489", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -238,11 +238,13 @@ enum ptr_kind {uniq_ptr, gc_ptr, region_ptr, unsafe_ptr}\n // I am coining the term \"components\" to mean \"pieces of a data\n // structure accessible without a dereference\":\n enum comp_kind {\n-    comp_tuple, comp_res, comp_variant,\n-    comp_field(str, // name of field\n+    comp_tuple,                  // elt in a tuple\n+    comp_res,                    // data for a resource\n+    comp_variant(ast::def_id),   // internals to a variant of given enum\n+    comp_field(str,              // name of field\n                ast::mutability), // declared mutability of field\n-    comp_index(ty::t, // type of vec/str/etc being deref'd\n-               ast::mutability) // mutability of vec content\n+    comp_index(ty::t,            // type of vec/str/etc being deref'd\n+               ast::mutability)  // mutability of vec content\n }\n \n // We pun on *T to mean both actual deref of a ptr as well\n@@ -411,7 +413,7 @@ impl to_str_methods for borrowck_ctxt {\n           comp_index(*) { \"[]\" }\n           comp_tuple { \"()\" }\n           comp_res { \"<res>\" }\n-          comp_variant { \"<enum>\" }\n+          comp_variant(_) { \"<enum>\" }\n         }\n     }\n \n@@ -468,7 +470,7 @@ impl to_str_methods for borrowck_ctxt {\n           cat_comp(_, comp_field(*)) { mut_str + \" field\" }\n           cat_comp(_, comp_tuple) { \"tuple content\" }\n           cat_comp(_, comp_res) { \"resource content\" }\n-          cat_comp(_, comp_variant) { \"enum content\" }\n+          cat_comp(_, comp_variant(_)) { \"enum content\" }\n           cat_comp(_, comp_index(t, _)) {\n             alt ty::get(t).struct {\n               ty::ty_vec(*) | ty::ty_evec(*) {\n@@ -514,7 +516,7 @@ impl to_str_methods for borrowck_ctxt {\n // mutable structure.\n fn inherent_mutability(ck: comp_kind) -> mutability {\n     alt ck {\n-      comp_tuple | comp_res | comp_variant {m_imm}\n+      comp_tuple | comp_res | comp_variant(_) {m_imm}\n       comp_field(_, m) | comp_index(_, m) {m}\n     }\n }\n\\ No newline at end of file"}, {"sha": "db22f880941b6b2709eefc9977430148c299d82a", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -67,8 +67,8 @@ fn opt_deref_kind(t: ty::t) -> option<deref_kind> {\n         some(deref_ptr(unsafe_ptr))\n       }\n \n-      ty::ty_enum(*) {\n-        some(deref_comp(comp_variant))\n+      ty::ty_enum(did, _) {\n+        some(deref_comp(comp_variant(did)))\n       }\n \n       ty::ty_res(*) {\n@@ -275,10 +275,12 @@ impl public_methods for borrowck_ctxt {\n         }\n     }\n \n-    fn cat_variant<N: ast_node>(arg: N, cmt: cmt) -> cmt {\n+    fn cat_variant<N: ast_node>(arg: N,\n+                                enum_did: ast::def_id,\n+                                cmt: cmt) -> cmt {\n         @{id: arg.id(), span: arg.span(),\n-          cat: cat_comp(cmt, comp_variant),\n-          lp: cmt.lp.map { |l| @lp_comp(l, comp_variant) },\n+          cat: cat_comp(cmt, comp_variant(enum_did)),\n+          lp: cmt.lp.map { |l| @lp_comp(l, comp_variant(enum_did)) },\n           mutbl: cmt.mutbl, // imm iff in an immutable context\n           ty: self.tcx.ty(arg)}\n     }"}, {"sha": "87980bf7248171a7da5a6f154023027b3eef4054", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -338,8 +338,16 @@ impl methods for gather_loan_ctxt {\n           }\n           ast::pat_enum(_, some(subpats)) {\n             // variant(x, y, z)\n+            let enum_did = alt self.bccx.tcx.def_map\n+.find(pat.id) {\n+              some(ast::def_variant(enum_did, _)) {enum_did}\n+              e {tcx.sess.span_bug(pat.span,\n+                                   #fmt[\"resolved to %?, \\\n+                                         not variant\", e])}\n+            };\n+\n             for subpats.each { |subpat|\n-                let subcmt = self.bccx.cat_variant(subpat, cmt);\n+                let subcmt = self.bccx.cat_variant(subpat, enum_did, cmt);\n                 self.gather_pat(subcmt, subpat, arm_id, alt_id);\n             }\n           }"}, {"sha": "ee61dd9f0cf6866f750131214d5934942a3c5516", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -65,24 +65,23 @@ impl loan_methods for loan_ctxt {\n             // that case, it must also be embedded in an immutable\n             // location, or else the whole structure could be\n             // overwritten and the component along with it.\n-            let base_mutbl = alt req_mutbl {\n-              m_imm { m_imm }\n-              m_const | m_mutbl { m_const }\n-            };\n-\n-            self.loan(cmt_base, base_mutbl);\n-            self.ok_with_loan_of(cmt, req_mutbl)\n+            self.loan_stable_comp(cmt, cmt_base, req_mutbl)\n           }\n-          cat_comp(cmt1, comp_variant) |\n-          cat_deref(cmt1, _, uniq_ptr) {\n-            // Variant components: the base must be immutable, because\n-            // if it is overwritten, the types of the embedded data\n-            // could change.\n-            //\n-            // Unique pointers: the base must be immutable, because if\n-            // it is overwritten, the unique content will be freed.\n-            self.loan(cmt1, m_imm);\n-            self.ok_with_loan_of(cmt, req_mutbl)\n+          cat_comp(cmt_base, comp_variant(enum_did)) {\n+            // For enums, the memory is unstable if there are multiple\n+            // variants, because if the enum value is overwritten then\n+            // the memory changes type.\n+            if ty::enum_is_univariant(self.bccx.tcx, enum_did) {\n+                self.loan_stable_comp(cmt, cmt_base, req_mutbl)\n+            } else {\n+                self.loan_unstable_deref(cmt, cmt_base, req_mutbl)\n+            }\n+          }\n+          cat_deref(cmt_base, _, uniq_ptr) {\n+            // For unique pointers, the memory being pointed out is\n+            // unstable because if the unique pointer is overwritten\n+            // then the memory is freed.\n+            self.loan_unstable_deref(cmt, cmt_base, req_mutbl)\n           }\n           cat_deref(cmt1, _, unsafe_ptr) |\n           cat_deref(cmt1, _, gc_ptr) |\n@@ -94,4 +93,32 @@ impl loan_methods for loan_ctxt {\n           }\n         }\n     }\n+\n+    // A \"stable component\" is one where assigning the base of the\n+    // component cannot cause the component itself to change types.\n+    // Example: record fields.\n+    fn loan_stable_comp(cmt: cmt,\n+                        cmt_base: cmt,\n+                        req_mutbl: ast::mutability) {\n+        let base_mutbl = alt req_mutbl {\n+          m_imm { m_imm }\n+          m_const | m_mutbl { m_const }\n+        };\n+\n+        self.loan(cmt_base, base_mutbl);\n+        self.ok_with_loan_of(cmt, req_mutbl)\n+    }\n+\n+    // An \"unstable deref\" means a deref of a ptr/comp where, if the\n+    // base of the deref is assigned to, pointers into the result of the\n+    // deref would be invalidated. Examples: interior of variants, uniques.\n+    fn loan_unstable_deref(cmt: cmt,\n+                           cmt_base: cmt,\n+                           req_mutbl: ast::mutability) {\n+        // Variant components: the base must be immutable, because\n+        // if it is overwritten, the types of the embedded data\n+        // could change.\n+        self.loan(cmt_base, m_imm);\n+        self.ok_with_loan_of(cmt, req_mutbl)\n+    }\n }"}, {"sha": "d4e2b3cbe60f7e9fcde6de1c2006edae7e17f7b5", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -43,10 +43,19 @@ impl public_methods for borrowck_ctxt {\n             // type never changes.\n             self.preserve(cmt_base, opt_scope_id)\n           }\n-          cat_comp(cmt_base, comp_variant) {\n-            self.require_imm(cmt, cmt_base, opt_scope_id, err_mut_variant)\n+          cat_comp(cmt_base, comp_variant(enum_did)) {\n+            if ty::enum_is_univariant(self.tcx, enum_did) {\n+                self.preserve(cmt_base, opt_scope_id)\n+            } else {\n+                // If there are multiple variants: overwriting the\n+                // base could cause the type of this memory to change,\n+                // so require imm.\n+                self.require_imm(cmt, cmt_base, opt_scope_id, err_mut_variant)\n+            }\n           }\n           cat_deref(cmt_base, _, uniq_ptr) {\n+            // Overwriting the base could cause this memory to be\n+            // freed, so require imm.\n             self.require_imm(cmt, cmt_base, opt_scope_id, err_mut_uniq)\n           }\n           cat_deref(_, _, region_ptr) {"}, {"sha": "972c6c7e708a7b2ee3839cc0c2b5ccdbbbbf4ec4", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -68,7 +68,7 @@ export sty;\n export subst, subst_tps, substs_is_noop, substs_to_str, substs;\n export t;\n export new_ty_hash;\n-export enum_variants, substd_enum_variants;\n+export enum_variants, substd_enum_variants, enum_is_univariant;\n export iface_methods, store_iface_methods, impl_iface;\n export enum_variant_with_id;\n export ty_dtor;\n@@ -2663,6 +2663,10 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n     }\n }\n \n+fn enum_is_univariant(cx: ctxt, id: ast::def_id) -> bool {\n+    vec::len(*enum_variants(cx, id)) == 1u\n+}\n+\n fn enum_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n     alt cx.enum_var_cache.find(id) {\n       some(variants) { ret variants; }"}, {"sha": "5ca39da8cb3c20a72dff67559667cc0ba3ebdc18", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -0,0 +1,16 @@\n+enum foo = {mut bar: baz};\n+\n+enum baz = @{mut baz: int};\n+\n+impl quuux for foo {\n+    fn frob() {\n+        really_impure(self.bar);\n+    }\n+}\n+\n+// Override default mode so that we are passing by value\n+fn really_impure(++bar: baz) {\n+    bar.baz = 3;\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "3b01c4aa076bc8cad6bb26f96f6ac68551b81497", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ec1d4abb0200a46c20341b4d894d9c2198905b/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=d1ec1d4abb0200a46c20341b4d894d9c2198905b", "patch": "@@ -0,0 +1,19 @@\n+enum newtype {\n+    newtype(int)\n+}\n+\n+fn main() {\n+\n+    // Test that borrowck treats enums with a single variant\n+    // specially.\n+\n+    let x = @mut 5;\n+    let y = @mut newtype(3);\n+    let z = alt *y {\n+      newtype(b) {\n+        *x += 1;\n+        *x * b\n+      }\n+    };\n+    assert z == 18;\n+}\n\\ No newline at end of file"}]}