{"sha": "34f03c01f688c0653b080914d4ab83461e1cfae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjAzYzAxZjY4OGMwNjUzYjA4MDkxNGQ0YWI4MzQ2MWUxY2ZhZTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-19T05:00:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-22T03:24:31Z"}, "message": "Point at type in `let` assignment on type errors", "tree": {"sha": "a0322297f13c69be893336c0bfc17ec84824f452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0322297f13c69be893336c0bfc17ec84824f452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f03c01f688c0653b080914d4ab83461e1cfae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f03c01f688c0653b080914d4ab83461e1cfae2", "html_url": "https://github.com/rust-lang/rust/commit/34f03c01f688c0653b080914d4ab83461e1cfae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f03c01f688c0653b080914d4ab83461e1cfae2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11759d38c70d3df67135f88a682701c1cf9762a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11759d38c70d3df67135f88a682701c1cf9762a", "html_url": "https://github.com/rust-lang/rust/commit/f11759d38c70d3df67135f88a682701c1cf9762a"}], "stats": {"total": 1038, "additions": 684, "deletions": 354}, "files": [{"sha": "6a7cf4dd328785278d69e38df2f5254aec65e377", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -102,12 +102,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // N.B., this code relies on `self.diverges` to be accurate. In\n     // particular, assignments to `!` will be permitted if the\n     // diverges flag is currently \"always\".\n-    pub fn demand_coerce_diag(&self,\n-                              expr: &hir::Expr,\n-                              checked_ty: Ty<'tcx>,\n-                              expected: Ty<'tcx>,\n-                              allow_two_phase: AllowTwoPhase)\n-                              -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n+    pub fn demand_coerce_diag(\n+        &self,\n+        expr: &hir::Expr,\n+        checked_ty: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+        allow_two_phase: AllowTwoPhase,\n+    ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n         let expected = self.resolve_vars_with_obligations(expected);\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase) {\n@@ -126,6 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return (expected, None)\n         }\n \n+        self.annotate_expected_due_to_let_ty(&mut err, expr);\n         self.suggest_compatible_variants(&mut err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(&mut err, expr, expected, expr_ty);\n         self.suggest_boxing_when_appropriate(&mut err, expr, expected, expr_ty);\n@@ -134,6 +136,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         (expected, Some(err))\n     }\n \n+    fn annotate_expected_due_to_let_ty(&self, err: &mut DiagnosticBuilder<'_>, expr: &hir::Expr) {\n+        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        if let Some(hir::Node::Local(hir::Local {\n+            ty: Some(ty),\n+            init: Some(init),\n+            ..\n+        })) = self.tcx.hir().find(parent) {\n+            if init.hir_id == expr.hir_id {\n+                // Point at `let` assignment type.\n+                err.span_label(ty.span, \"expected due to this\");\n+            }\n+        }\n+    }\n+\n     /// Returns whether the expected type is `bool` and the expression is `x = y`.\n     pub fn is_assign_to_bool(&self, expr: &hir::Expr, expected: Ty<'tcx>) -> bool {\n         if let hir::ExprKind::Assign(..) = expr.kind {"}, {"sha": "e4ed4622322322dc41c1262a28d6c4a3ec6b47db", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -9,7 +9,9 @@ error[E0308]: mismatched types\n   --> $DIR/failed-doctest-missing-codes.rs:9:13\n    |\n LL | let x: () = 5i32;\n-   |             ^^^^ expected `()`, found `i32`\n+   |        --   ^^^^ expected `()`, found `i32`\n+   |        |\n+   |        expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "0e187d9072a8a512a51cf0cb439d7c1f4284b9e5", "filename": "src/test/ui/array-not-vector.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |                   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n+   |             ---   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n+   |             |\n+   |             expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |                    ^ expected `i32`, found slice `[i32]`\n+   |             ----   ^ expected `i32`, found slice `[i32]`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected reference `&i32`\n               found reference `&[i32]`"}, {"sha": "d4e6bed82321b92ad1f5c9f92b2fe51f6b354aab", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-eq-3.rs:23:18\n    |\n LL |     let _: Bar = x.boo();\n-   |                  ^^^^^^^ expected struct `Bar`, found associated type\n+   |            ---   ^^^^^^^ expected struct `Bar`, found associated type\n+   |            |\n+   |            expected due to this\n    |\n    = note:       expected struct `Bar`\n            found associated type `<I as Foo>::A`"}, {"sha": "ec24260ec7548f8c6c9dcc8008578f1d6a8dc049", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -43,7 +43,9 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18\n    |\n LL |     let _: i32 = f2(2i32);\n-   |                  ^^^^^^^^ expected `i32`, found `u32`\n+   |            ---   ^^^^^^^^ expected `i32`, found `u32`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "39217cc89c81a0999a8fa6f78a25d77f4f479d64", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -26,7 +26,9 @@ error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:19:56\n    |\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n-   |                                                        ^^^ expected non-variadic fn, found variadic function\n+   |                -------------------------------------   ^^^ expected non-variadic fn, found variadic function\n+   |                |\n+   |                expected due to this\n    |\n    = note: expected fn pointer `unsafe extern \"C\" fn(isize, u8)`\n                  found fn item `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n@@ -35,7 +37,9 @@ error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n-   |                                                      ^^^ expected variadic fn, found non-variadic function\n+   |                -----------------------------------   ^^^ expected variadic fn, found non-variadic function\n+   |                |\n+   |                expected due to this\n    |\n    = note: expected fn pointer `extern \"C\" fn(isize, u8, ...)`\n                  found fn item `extern \"C\" fn(isize, u8) {bar}`"}, {"sha": "5e76ee5a9a56dcc01897738bc2742a52696e22ba", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/closure-no-fn-1.rs:6:29\n    |\n LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n-   |                             ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              ------------   ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`"}, {"sha": "07ffd6e5c9931f0373903faf6f896c54996f3d9e", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/closure-no-fn-2.rs:6:27\n    |\n LL |     let bar: fn() -> u8 = || { b };\n-   |                           ^^^^^^^^ expected fn pointer, found closure\n+   |              ----------   ^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n    |\n    = note: expected fn pointer `fn() -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`"}, {"sha": "ca4270597375099949b590b121e1212345e059e9", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -47,7 +47,9 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:48:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n-   |                     ^^^^^^^^^^^^ expected `!`, found integer\n+   |            ------   ^^^^^^^^^^^^ expected `!`, found integer\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected array `[!; 2]`\n               found array `[{integer}; 2]`"}, {"sha": "42dc954ffd5e7c454d7b6e810fb94a1cd4b48efc", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,10 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-slice.rs:4:21\n    |\n LL |     let _: &[i32] = [0];\n-   |                     ^^^\n-   |                     |\n-   |                     expected `&[i32]`, found array `[{integer}; 1]`\n-   |                     help: consider borrowing here: `&[0]`\n+   |            ------   ^^^\n+   |            |        |\n+   |            |        expected `&[i32]`, found array `[{integer}; 1]`\n+   |            |        help: consider borrowing here: `&[0]`\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "3f53b91541cb1bbb38a44a39670ba6aaa8a689c9", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:16:31\n    |\n LL |     let _: Checked<not_one> = Checked::<not_two>;\n-   |                               ^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n+   |            ----------------   ^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Checked<not_one>`\n               found struct `Checked<not_two>`\n@@ -34,7 +36,9 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40\n    |\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n+   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Checked<generic::<u32>>`\n               found struct `Checked<generic::<u16>>`"}, {"sha": "9cd39b61dc9367accff286bf3b9ef31cfb0f7444", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/raw-ptr-const-param.rs:7:38\n    |\n LL |     let _: Const<{15 as *const _}> = Const::<{10 as *const _}>;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{pointer}`, found `{pointer}`\n+   |            -----------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{pointer}`, found `{pointer}`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Const<{pointer}>`\n               found struct `Const<{pointer}>`"}, {"sha": "a588d82318b94934fbc70083cb5b3afc4bee3f4e", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:9:35\n    |\n LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n+   |            --------------------   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `ConstString<\"Hello\">`\n               found struct `ConstString<\"World\">`\n@@ -19,7 +21,9 @@ error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:11:33\n    |\n LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n+   |            -------------------   ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `ConstString<\"\u2107\u31c8\u21a6\">`\n               found struct `ConstString<\"\u2107\u31c8\u21a5\">`\n@@ -28,7 +32,9 @@ error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:13:33\n    |\n LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n+   |            ------------------   ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `ConstBytes<b\"AAA\">`\n               found struct `ConstBytes<b\"BBB\">`"}, {"sha": "4266fd250b0570214a37a6732299c05c410e48a3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:13:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `A<'_, _, 2u32, _>`\n               found struct `A<'_, _, 4u32, _>`\n@@ -19,7 +21,9 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `A<'a, u16, _, _>`\n               found struct `A<'b, u32, _, _>`"}, {"sha": "b3621a27acb716e2666691dee71e8ba6a5d7c14a", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,37 +2,41 @@ error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:5:41\n    |\n LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^\n-   |                                         |\n-   |                                         expected struct `std::string::String`, found `&str`\n-   |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n+   |                                ------   ^^^^^^^^^^^^^^^^^^^^^\n+   |                                |        |\n+   |                                |        expected struct `std::string::String`, found `&str`\n+   |                                |        help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n+   |                                expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:6:40\n    |\n LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                        |\n-   |                                        expected struct `std::path::PathBuf`, found `&std::path::Path`\n-   |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n+   |                              -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              |         |\n+   |                              |         expected struct `std::path::PathBuf`, found `&std::path::Path`\n+   |                              |         help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n+   |                              expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:9:40\n    |\n LL |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we suggest .to_string() here\n-   |                                        ^\n-   |                                        |\n-   |                                        expected struct `std::string::String`, found integer\n-   |                                        help: try using a conversion method: `2.to_string()`\n+   |                               ------   ^\n+   |                               |        |\n+   |                               |        expected struct `std::string::String`, found integer\n+   |                               |        help: try using a conversion method: `2.to_string()`\n+   |                               expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:12:47\n    |\n LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n-   |                                               ^^^^^^^^^^\n-   |                                               |\n-   |                                               expected struct `std::vec::Vec`, found `&[{integer}; 3]`\n-   |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n+   |                                  ----------   ^^^^^^^^^^\n+   |                                  |            |\n+   |                                  |            expected struct `std::vec::Vec`, found `&[{integer}; 3]`\n+   |                                  |            help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n+   |                                  expected due to this\n    |\n    = note: expected struct `std::vec::Vec<usize>`\n            found reference `&[{integer}; 3]`"}, {"sha": "618f6595d41d02f3f98374fdfb0dbff9b2d5e9d2", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,10 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |                          ^\n-   |                          |\n-   |                          expected `&dyn Trait`, found struct `std::boxed::Box`\n-   |                          help: consider borrowing here: `&x`\n+   |             ----------   ^\n+   |             |            |\n+   |             |            expected `&dyn Trait`, found struct `std::boxed::Box`\n+   |             |            help: consider borrowing here: `&x`\n+   |             expected due to this\n    |\n    = note: expected reference `&dyn Trait`\n                  found struct `std::boxed::Box<dyn Trait>`"}, {"sha": "6f853ccab378ae7ee33dcde1fc531616c033b4c9", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,40 +2,47 @@ error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:2:24\n    |\n LL |     let sixteen: f32 = 16;\n-   |                        ^^\n-   |                        |\n-   |                        expected `f32`, found integer\n-   |                        help: use a float literal: `16.0`\n+   |                  ---   ^^\n+   |                  |     |\n+   |                  |     expected `f32`, found integer\n+   |                  |     help: use a float literal: `16.0`\n+   |                  expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:5:38\n    |\n LL |     let a_million_and_seventy: f64 = 1_000_070;\n-   |                                      ^^^^^^^^^\n-   |                                      |\n-   |                                      expected `f64`, found integer\n-   |                                      help: use a float literal: `1_000_070.0`\n+   |                                ---   ^^^^^^^^^\n+   |                                |     |\n+   |                                |     expected `f64`, found integer\n+   |                                |     help: use a float literal: `1_000_070.0`\n+   |                                expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:8:30\n    |\n LL |     let negative_nine: f32 = -9;\n-   |                              ^^\n-   |                              |\n-   |                              expected `f32`, found integer\n-   |                              help: use a float literal: `-9.0`\n+   |                        ---   ^^\n+   |                        |     |\n+   |                        |     expected `f32`, found integer\n+   |                        |     help: use a float literal: `-9.0`\n+   |                        expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:15:30\n    |\n LL |     let sixteen_again: f64 = 0x10;\n-   |                              ^^^^ expected `f64`, found integer\n+   |                        ---   ^^^^ expected `f64`, found integer\n+   |                        |\n+   |                        expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:17:30\n    |\n LL |     let and_once_more: f32 = 0o20;\n-   |                              ^^^^ expected `f32`, found integer\n+   |                        ---   ^^^^ expected `f32`, found integer\n+   |                        |\n+   |                        expected due to this\n \n error: aborting due to 5 previous errors\n "}, {"sha": "fdbb5af9b3243614c229b5a826d0be5b93c52303", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:50:22\n    |\n LL |     let x: &Bottom = &t;\n-   |                      ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&Bottom`\n               found reference `&Top`"}, {"sha": "121c76a01a5de19b83e5ae4dd8644d45cbed8431", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:16:29\n    |\n LL |     let f3: &Fat<[usize]> = f2;\n-   |                             ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -------------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected reference `&Fat<[usize]>`\n               found reference `&Fat<[isize; 3]>`\n@@ -19,7 +21,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n    |\n LL |     let f3: &([usize],) = f2;\n-   |                           ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -----------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected reference `&([usize],)`\n               found reference `&([isize; 3],)`"}, {"sha": "3ded96cfb61486d2ccf1e6a26df9db39bb8c984d", "filename": "src/test/ui/dst/dst-bad-coerce2.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:15:33\n    |\n LL |     let f3: &mut Fat<[isize]> = f2;\n-   |                                 ^^ types differ in mutability\n+   |             -----------------   ^^ types differ in mutability\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected mutable reference `&mut Fat<[isize]>`\n                       found reference `&Fat<[isize; 3]>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:20:33\n    |\n LL |     let f3: &mut Fat<dyn Bar> = f2;\n-   |                                 ^^ types differ in mutability\n+   |             -----------------   ^^ types differ in mutability\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected mutable reference `&mut Fat<dyn Bar>`\n                       found reference `&Fat<Foo>`\n@@ -20,7 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:25:31\n    |\n LL |     let f3: &mut ([isize],) = f2;\n-   |                               ^^ types differ in mutability\n+   |             ---------------   ^^ types differ in mutability\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected mutable reference `&mut ([isize],)`\n                       found reference `&([isize; 3],)`\n@@ -29,7 +35,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:30:31\n    |\n LL |     let f3: &mut (dyn Bar,) = f2;\n-   |                               ^^ types differ in mutability\n+   |             ---------------   ^^ types differ in mutability\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected mutable reference `&mut (dyn Bar,)`\n                       found reference `&(Foo,)`"}, {"sha": "4c9954f35208bf87152daf65a4e1ca5a6d658c92", "filename": "src/test/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:12:32\n    |\n LL |     let f2: &Fat<[isize; 3]> = f1;\n-   |                                ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             ----------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected reference `&Fat<[isize; 3]>`\n               found reference `&Fat<[isize]>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n-   |                              ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             --------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected reference `&([isize; 3],)`\n               found reference `&([isize],)`"}, {"sha": "3e23c5f5c7443f96e0a9ca9a1d60f9a09c6a9d44", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:14:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected `&S`, found *-ptr\n+   |            --   ^ expected `&S`, found *-ptr\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&S`\n             found raw pointer `*const S`\n@@ -11,10 +13,11 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n    |\n LL |     let y: &dyn T = x;\n-   |                     ^\n-   |                     |\n-   |                     expected `&dyn T`, found *-ptr\n-   |                     help: consider borrowing here: `&x`\n+   |            ------   ^\n+   |            |        |\n+   |            |        expected `&dyn T`, found *-ptr\n+   |            |        help: consider borrowing here: `&x`\n+   |            expected due to this\n    |\n    = note: expected reference `&dyn T`\n             found raw pointer `*const S`\n@@ -23,7 +26,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:19:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected `&S`, found *-ptr\n+   |            --   ^ expected `&S`, found *-ptr\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&S`\n             found raw pointer `*mut S`\n@@ -32,10 +37,11 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n    |\n LL |     let y: &dyn T = x;\n-   |                     ^\n-   |                     |\n-   |                     expected `&dyn T`, found *-ptr\n-   |                     help: consider borrowing here: `&x`\n+   |            ------   ^\n+   |            |        |\n+   |            |        expected `&dyn T`, found *-ptr\n+   |            |        help: consider borrowing here: `&x`\n+   |            expected due to this\n    |\n    = note: expected reference `&dyn T`\n             found raw pointer `*mut S`\n@@ -44,7 +50,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:23:25\n    |\n LL |     let x: &mut dyn T = &S;\n-   |                         ^^ types differ in mutability\n+   |            ----------   ^^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected mutable reference `&mut dyn T`\n                       found reference `&S`\n@@ -53,7 +61,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:24:25\n    |\n LL |     let x: *mut dyn T = &S;\n-   |                         ^^ types differ in mutability\n+   |            ----------   ^^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected raw pointer `*mut dyn T`\n                 found reference `&S`\n@@ -62,7 +72,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:25:21\n    |\n LL |     let x: *mut S = &S;\n-   |                     ^^ types differ in mutability\n+   |            ------   ^^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected raw pointer `*mut S`\n                 found reference `&S`"}, {"sha": "62ca8dc77294b446fe6fc0f583df9f46ce02d80a", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,16 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/float-literal-inference-restrictions.rs:2:18\n    |\n LL |     let x: f32 = 1;\n-   |                  ^\n-   |                  |\n-   |                  expected `f32`, found integer\n-   |                  help: use a float literal: `1.0`\n+   |            ---   ^\n+   |            |     |\n+   |            |     expected `f32`, found integer\n+   |            |     help: use a float literal: `1.0`\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/float-literal-inference-restrictions.rs:3:18\n    |\n LL |     let y: f32 = 1f64;\n-   |                  ^^^^ expected `f32`, found `f64`\n+   |            ---   ^^^^ expected `f32`, found `f64`\n+   |            |\n+   |            expected due to this\n    |\n help: change the type of the numeric literal from `f64` to `f32`\n    |"}, {"sha": "7d4de63759b8881cbe615f394613245d6ebb91b3", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n@@ -20,7 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`"}, {"sha": "141807661199e80971d32fec7ed7942ffcaa1e88", "filename": "src/test/ui/generic/generic-type-params-name-repr.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:13:25\n    |\n LL |     let _: Foo<isize> = ();\n-   |                         ^^ expected struct `Foo`, found `()`\n+   |            ----------   ^^ expected struct `Foo`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo<isize>`\n            found unit type `()`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n-   |                               ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo<isize>`\n            found unit type `()`\n@@ -20,7 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n-   |                                     ^^ expected struct `HashMap`, found `()`\n+   |            ----------------------   ^^ expected struct `HashMap`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n            found unit type `()`\n@@ -29,7 +35,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n-   |                                                   ^^ expected struct `HashMap`, found `()`\n+   |            ------------------------------------   ^^ expected struct `HashMap`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n            found unit type `()`\n@@ -38,7 +46,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n-   |                               ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo<A, isize>`\n            found unit type `()`\n@@ -47,7 +57,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n-   |                           ^^ expected struct `Foo`, found `()`\n+   |            ------------   ^^ expected struct `Foo`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo`\n            found unit type `()`"}, {"sha": "328e98657effb179aa1f90cc61ec76274c533b00", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |                                  ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n+   |            -------------------   ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n               found fn pointer `fn(&u32)`"}, {"sha": "312976b72d20e26d29e055b5d9bcea2624cd177b", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n LL |     let _: u32 = hide(0_u32);\n-   |                  ^^^^^^^^^^^ expected `u32`, found opaque type\n+   |            ---   ^^^^^^^^^^^ expected `u32`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note:     expected type `u32`\n            found opaque type `impl Foo`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n+   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n+   |            |\n+   |            expected due to this\n    |\n    = note:         expected type `i32`\n            found associated type `<impl Foo as Leak>::T`"}, {"sha": "efe1f58a6f43dd04eb71ae9eb894c749b69c1a2e", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n+   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`"}, {"sha": "6fc2b99a11a4de3c2ee75c2facdf9279930ead39", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1362.rs:4:16\n    |\n LL |   let x: u32 = 20i32;\n-   |                ^^^^^ expected `u32`, found `i32`\n+   |          ---   ^^^^^ expected `u32`, found `i32`\n+   |          |\n+   |          expected due to this\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |"}, {"sha": "2407ece5e4f7d1f6e0c77e64d7f1d1860b5774ee", "filename": "src/test/ui/issues/issue-22684.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-22684.rs:17:17\n    |\n LL |     let _: () = foo::Foo.bar();\n-   |                 ^^^^^^^^^^^^^^ expected `()`, found `bool`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found `bool`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "1a4fab165405d88dc39158cb3e7e342e57c396a4", "filename": "src/test/ui/issues/issue-24322.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24322.rs:8:29\n    |\n LL |     let x: &fn(&B) -> u32 = &B::func;\n-   |                             ^^^^^^^^ expected fn pointer, found fn item\n+   |            --------------   ^^^^^^^^ expected fn pointer, found fn item\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&for<'r> fn(&'r B) -> u32`\n               found reference `&for<'r> fn(&'r B) -> u32 {B::func}`"}, {"sha": "69c452b88f315409196034ce69f682b7ef973e31", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -20,6 +20,8 @@ LL |         loop { break };\n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9\n    |\n+LL |       let _: i32 =\n+   |              --- expected due to this\n LL | /         'b:\n LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n@@ -35,6 +37,8 @@ LL | |         for _ in None { break }; // but here we cite the whole loop\n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:15:9\n    |\n+LL |       let _: i32 =\n+   |              --- expected due to this\n LL | /         'd:\n LL | |         while let Some(_) = None { break };\n    | |__________________________________________^ expected `i32`, found `()`"}, {"sha": "fd5f7dcf6e66a5ef9cd39e3749eaea6a4abcee64", "filename": "src/test/ui/issues/issue-3477.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-3477.rs:2:20\n    |\n LL |     let _p: char = 100;\n-   |                    ^^^ expected `char`, found `u8`\n+   |             ----   ^^^ expected `char`, found `u8`\n+   |             |\n+   |             expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "1e191a620af02525bd1ffdc28e7c80e70a52501d", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37665.rs:10:17\n    |\n LL |     let x: () = 0;\n-   |                 ^ expected `()`, found integer\n+   |            --   ^ expected `()`, found integer\n+   |            |\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "f60387f841aed9766c50f78d3fac3815fc70a04b", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:43:22\n    |\n LL |     let x: &Bottom = &t;\n-   |                      ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&Bottom`\n               found reference `&Top`"}, {"sha": "9e1011496c45dc7c16d19551ad3832f78988a634", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -57,7 +57,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:55:19\n    |\n LL |     let x: char = true;\n-   |                   ^^^^ expected `char`, found `bool`\n+   |            ----   ^^^^ expected `char`, found `bool`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 7 previous errors\n "}, {"sha": "b83fb346b14ef503cd831b93c2128787bd2495c9", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,10 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/issue-53692.rs:4:37\n    |\n LL |         let items_clone: Vec<i32> = ref_items.clone();\n-   |                                     ^^^^^^^^^^^^^^^^^\n-   |                                     |\n-   |                                     expected struct `std::vec::Vec`, found `&[i32]`\n-   |                                     help: try using a conversion method: `ref_items.to_vec()`\n+   |                          --------   ^^^^^^^^^^^^^^^^^\n+   |                          |          |\n+   |                          |          expected struct `std::vec::Vec`, found `&[i32]`\n+   |                          |          help: try using a conversion method: `ref_items.to_vec()`\n+   |                          expected due to this\n    |\n    = note: expected struct `std::vec::Vec<i32>`\n            found reference `&[i32]`\n@@ -14,10 +15,11 @@ error[E0308]: mismatched types\n   --> $DIR/issue-53692.rs:11:30\n    |\n LL |         let string: String = s.clone();\n-   |                              ^^^^^^^^^\n-   |                              |\n-   |                              expected struct `std::string::String`, found `&str`\n-   |                              help: try using a conversion method: `s.to_string()`\n+   |                     ------   ^^^^^^^^^\n+   |                     |        |\n+   |                     |        expected struct `std::string::String`, found `&str`\n+   |                     |        help: try using a conversion method: `s.to_string()`\n+   |                     expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6caf974809e761f7fb786bb64197c5f85aa02b27", "filename": "src/test/ui/issues/issue-56943.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-56943.rs:6:29\n    |\n LL |     let _: issue_56943::S = issue_56943::S2;\n-   |                             ^^^^^^^^^^^^^^^ expected struct `issue_56943::S`, found struct `issue_56943::S2`\n+   |            --------------   ^^^^^^^^^^^^^^^ expected struct `issue_56943::S`, found struct `issue_56943::S2`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "ab0feb3c451adb4b0497b7f51705213c99017188", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -15,7 +15,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -34,7 +34,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -53,7 +53,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -72,7 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "a6217f86879f6a3ff11dafab4dd0b6d2fa944573", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -15,7 +15,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -34,7 +34,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -53,7 +53,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -72,7 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "5e6980a9dd1f7aec72b98ad585900638a22725fe", "filename": "src/test/ui/meta-expected-error-correct-rev.a.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/meta-expected-error-correct-rev.rs:7:18\n    |\n LL |     let x: u32 = 22_usize;\n-   |                  ^^^^^^^^ expected `u32`, found `usize`\n+   |            ---   ^^^^^^^^ expected `u32`, found `usize`\n+   |            |\n+   |            expected due to this\n    |\n help: change the type of the numeric literal from `usize` to `u32`\n    |"}, {"sha": "fcd976475686f2bb102a3cf530888849acfb5a16", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20\n    |\n LL |     let y: usize = x.foo();\n-   |                    ^^^^^^^ expected `usize`, found `isize`\n+   |            -----   ^^^^^^^ expected `usize`, found `isize`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "c9d7da84e09f421b3c85c8b6a958938aae03f0b2", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:85:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected `()`, found `u32`\n+   |                   --   ^ expected `()`, found `u32`\n+   |                   |\n+   |                   expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected `()`, found `u64`\n+   |                   --   ^ expected `()`, found `u64`\n+   |                   |\n+   |                   expected due to this\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n@@ -39,19 +43,25 @@ error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:137:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected `()`, found `u8`\n+   |                   --   ^ expected `()`, found `u8`\n+   |                   |\n+   |                   expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected `()`, found `u32`\n+   |                   --   ^ expected `()`, found `u32`\n+   |                   |\n+   |                   expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected `()`, found `u32`\n+   |                   --   ^ expected `()`, found `u32`\n+   |                   |\n+   |                   expected due to this\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3808f8583b8362b4552b347b96a81b4116dd2ff7", "filename": "src/test/ui/mir-unpretty.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-unpretty.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/mir-unpretty.rs:4:17\n    |\n LL |     let x: () = 0;\n-   |                 ^ expected `()`, found integer\n+   |            --   ^ expected `()`, found integer\n+   |            |\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "a662741afcd9cea5d79fed2048c3dbdfac7e72a2", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/main.rs:2:18\n    |\n LL |       let x: u32 = (\n-   |  __________________^\n+   |  ____________---___^\n+   | |            |\n+   | |            expected due to this\n LL | |     );\n    | |_____^ expected `u32`, found `()`\n "}, {"sha": "4349d98029eaf13800d728110c1975c9eef46e94", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/never-assign-wrong-type.rs:6:16\n    |\n LL |     let x: ! = \"hello\";\n-   |                ^^^^^^^ expected `!`, found `&str`\n+   |            -   ^^^^^^^ expected `!`, found `&str`\n+   |            |\n+   |            expected due to this\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "e80fcd13685b658f26ad7bb97b754a27da675ec3", "filename": "src/test/ui/noexporttypeexe.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/noexporttypeexe.rs:10:18\n    |\n LL |   let x: isize = noexporttypelib::foo();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `std::option::Option`\n+   |          -----   ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `std::option::Option`\n+   |          |\n+   |          expected due to this\n    |\n    = note: expected type `isize`\n               found enum `std::option::Option<isize>`"}, {"sha": "6e1990e3a722255b1c7da020713f219942944c2c", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -14,19 +14,25 @@ error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:5:18\n    |\n LL |     let c: i32 = 1i8;\n-   |                  ^^^ expected `i32`, found `i8`\n+   |            ---   ^^^ expected `i32`, found `i8`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:6:17\n    |\n LL |     let d: i8 = c;\n-   |                 ^ expected `i8`, found `i32`\n+   |            --   ^ expected `i8`, found `i32`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:10:18\n    |\n LL |     let c: i32 = 1i8;\n-   |                  ^^^ expected `i32`, found `i8`\n+   |            ---   ^^^ expected `i32`, found `i8`\n+   |            |\n+   |            expected due to this\n    |\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n@@ -37,7 +43,9 @@ error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:11:17\n    |\n LL |     let d: i8 = c;\n-   |                 ^ expected `i8`, found `i32`\n+   |            --   ^ expected `i8`, found `i32`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |"}, {"sha": "465b507b788fd96d53f8adb9f4811b9b1208bb44", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:5:18\n    |\n LL |     let x: u16 = foo();\n-   |                  ^^^^^ expected `u16`, found `i32`\n+   |            ---   ^^^^^ expected `u16`, found `i32`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +15,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |                  ^^^^^ expected `i64`, found `u16`\n+   |            ---   ^^^^^ expected `i64`, found `u16`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -24,7 +28,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |                  ^^^^^ expected `i32`, found `u16`\n+   |            ---   ^^^^^ expected `i32`, found `u16`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "9b827794f5be52f5cfba4de60ab878ac4d23fb02", "filename": "src/test/ui/or-patterns/issue-64879-trailing-before-guard.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-64879-trailing-before-guard.rs:12:42\n    |\n LL |             let recovery_witness: bool = 0;\n-   |                                          ^ expected `bool`, found integer\n+   |                                   ----   ^ expected `bool`, found integer\n+   |                                   |\n+   |                                   expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6ff39d64d6dbb4997820db24725350e0f54eb99", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -118,10 +118,11 @@ error[E0308]: mismatched types\n   --> $DIR/or-patterns-syntactic-fail.rs:52:36\n    |\n LL |     let recovery_witness: String = 0;\n-   |                                    ^\n-   |                                    |\n-   |                                    expected struct `std::string::String`, found integer\n-   |                                    help: try using a conversion method: `0.to_string()`\n+   |                           ------   ^\n+   |                           |        |\n+   |                           |        expected struct `std::string::String`, found integer\n+   |                           |        help: try using a conversion method: `0.to_string()`\n+   |                           expected due to this\n \n error: aborting due to 16 previous errors\n "}, {"sha": "82c46ad82c7e427d94907ee170523628c356baed", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -43,7 +43,9 @@ error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n    |\n LL |     let a: usize = \"\";\n-   |                    ^^ expected `usize`, found `&str`\n+   |            -----   ^^ expected `usize`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error[E0277]: can't compare `&str` with `char`\n   --> $DIR/lex-bad-char-literals-6.rs:12:10"}, {"sha": "73a828952b2a65ee4d65a693e5348f1c26d1e0b7", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -14,7 +14,9 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-lifetime.rs:6:20\n    |\n LL |     let x: usize = \"\";\n-   |                    ^^ expected `usize`, found `&str`\n+   |            -----   ^^ expected `usize`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c807931beee1901f7595ccee7887212051935245", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -13,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-from-homoglyph.rs:3:20\n    |\n LL |     let x: usize = ();\n-   |                    ^^ expected `usize`, found `()`\n+   |            -----   ^^ expected `usize`, found `()`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2f2464d3629c6b0fbd3ee527853d8ef199565fec", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -20,13 +20,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:2:20\n    |\n LL |     let _: usize = ()\n-   |                    ^^ expected `usize`, found `()`\n+   |            -----   ^^ expected `usize`, found `()`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:9:20\n    |\n LL |     let _: usize = ()\n-   |                    ^^ expected `usize`, found `()`\n+   |            -----   ^^ expected `usize`, found `()`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 4 previous errors\n "}, {"sha": "88891b54bb20c26e2a21cc1e3ebe266790c96e6a", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -8,7 +8,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-tuple.rs:6:20\n    |\n LL |     let y: usize = \"\";\n-   |                    ^^ expected `usize`, found `&str`\n+   |            -----   ^^ expected `usize`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bda59d4dea644f7185a9c9b502e0dafa0bd12edd", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -13,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n    |\n LL |     let _: usize = unclosed_delim_mod::new();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `std::result::Result`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `std::result::Result`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n               found enum `std::result::Result<unclosed_delim_mod::Value, ()>`"}, {"sha": "193482a42ab7226a67fe7e8a63e0b1005cda25dd", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:7:23\n    |\n LL | #[ foo ( let y: u32 = \"z\"; ) ]\n-   |                       ^^^ expected `u32`, found `&str`\n+   |                 ---   ^^^ expected `u32`, found `&str`\n+   |                 |\n+   |                 expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:8:23\n    |\n LL | #[ bar { let x: u32 = \"y\"; } ]\n-   |                       ^^^ expected `u32`, found `&str`\n+   |                 ---   ^^^ expected `u32`, found `&str`\n+   |                 |\n+   |                 expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7f3a7e670b9b75b8c5727f55502d9b03c985a8a1", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,25 +2,33 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n LL |     let a: i32 = \"foo\";\n-   |                  ^^^^^ expected `i32`, found `&str`\n+   |            ---   ^^^^^ expected `i32`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:12:18\n    |\n LL |     let b: i32 = \"f'oo\";\n-   |                  ^^^^^^ expected `i32`, found `&str`\n+   |            ---   ^^^^^^ expected `i32`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:25:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected `i32`, found `&str`\n+   |                ---   ^^^^^ expected `i32`, found `&str`\n+   |                |\n+   |                expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected `i32`, found `&str`\n+   |                ---   ^^^^^ expected `i32`, found `&str`\n+   |                |\n+   |                expected due to this\n \n error: aborting due to 4 previous errors\n "}, {"sha": "44b338fa62215a78f567f35811b1cdb182a61fd7", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:9:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected `u32`, found `&str`\n+   |                ---   ^^^ expected `u32`, found `&str`\n+   |                |\n+   |                expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:18:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected `u32`, found `&str`\n+   |                ---   ^^^ expected `u32`, found `&str`\n+   |                |\n+   |                expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd6f0ea10eac90d96677084eba264de488eedbc3", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:11:20\n    |\n LL |     let x: usize = \"hello\";\n-   |                    ^^^^^^^ expected `usize`, found `&str`\n+   |            -----   ^^^^^^^ expected `usize`, found `&str`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:17:29"}, {"sha": "29b7e5da849d43ec112f61e91d00446ef083fe78", "filename": "src/test/ui/ptr-coercion.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fptr-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fptr-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr-coercion.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/ptr-coercion.rs:7:25\n    |\n LL |     let x: *mut isize = x;\n-   |                         ^ types differ in mutability\n+   |            ----------   ^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected raw pointer `*mut isize`\n               found raw pointer `*const isize`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/ptr-coercion.rs:13:25\n    |\n LL |     let x: *mut isize = &42;\n-   |                         ^^^ types differ in mutability\n+   |            ----------   ^^^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected raw pointer `*mut isize`\n                 found reference `&isize`\n@@ -20,7 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/ptr-coercion.rs:19:25\n    |\n LL |     let x: *mut isize = x;\n-   |                         ^ types differ in mutability\n+   |            ----------   ^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected raw pointer `*mut isize`\n               found raw pointer `*const isize`"}, {"sha": "c3e8789a903b16446fa43f720c2d278f5a597aa4", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n                  found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`"}, {"sha": "159d32b50b03c5da035e3f52cf88871689c55935", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -20,7 +20,9 @@ error[E0308]: mismatched types\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n                  found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`"}, {"sha": "2aadd8f4f8c7ed550742175169dabd8db5a0150e", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n+   |            -----------------------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n                  found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`"}, {"sha": "dda6129e195369e1848b738f139dc3032407865d", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -31,7 +31,9 @@ error[E0308]: mismatched types\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n+   |            -----------------------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n                  found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`"}, {"sha": "434a3e47b492a6b51fb73685d2db658136eaa5c3", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n                  found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`"}, {"sha": "01f43aeebaf7cb3a77a051efd20bd81149cf9082", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -20,7 +20,9 @@ error[E0308]: mismatched types\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+   |            ----------------------------   ^ expected concrete lifetime, found bound lifetime parameter\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n                  found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`"}, {"sha": "4defe12b1b37b58ba9d760603e601b25755d6925", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,10 +2,11 @@ error[E0308]: cannot coerce intrinsics to function pointers\n   --> $DIR/reify-intrinsic.rs:6:64\n    |\n LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n-   |                                                                ^^^^^^^^^^^^^^^^^^^\n-   |                                                                |\n-   |                                                                cannot coerce intrinsics to function pointers\n-   |                                                                help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^\n+   |            |                                                   |\n+   |            |                                                   cannot coerce intrinsics to function pointers\n+   |            |                                                   help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |            expected due to this\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}`"}, {"sha": "688720e8cd3885e9a96a2f6f6042ef2cd0e93dc4", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -280,10 +280,11 @@ LL |             Fn(u8),\n    |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n-   |                    ^^^^^\n-   |                    |\n-   |                    expected enum `m::n::Z`, found fn item\n-   |                    help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n+   |                -   ^^^^^\n+   |                |   |\n+   |                |   expected enum `m::n::Z`, found fn item\n+   |                |   help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n+   |                expected due to this\n    |\n    = note: expected enum `m::n::Z`\n            found fn item `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -311,10 +312,11 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n-   |                ^^^^^^^^\n-   |                |\n-   |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n+   |            -   ^^^^^^^^\n+   |            |   |\n+   |            |   expected enum `m::E`, found fn item\n+   |            |   help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n+   |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n@@ -342,10 +344,11 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n-   |                ^^^^^\n-   |                |\n-   |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n+   |            -   ^^^^^\n+   |            |   |\n+   |            |   expected enum `m::E`, found fn item\n+   |            |   help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n+   |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "91f8b0e630901868c0748408d70900e7e609b053", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -26,7 +26,9 @@ error[E0308]: mismatched types\n   --> $DIR/shift-various-bad-types.rs:25:18\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n-   |                  ^^^^^^^^^^^^^^^ expected `i32`, found `i64`\n+   |            ---   ^^^^^^^^^^^^^^^ expected `i32`, found `i64`\n+   |            |\n+   |            expected due to this\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "7d34defc1d577dcdb467291c4fbf8ab611fb5a8c", "filename": "src/test/ui/slice-mut.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fslice-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fslice-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslice-mut.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/slice-mut.rs:7:22\n    |\n LL |     let y: &mut[_] = &x[2..4];\n-   |                      ^^^^^^^^ types differ in mutability\n+   |            -------   ^^^^^^^^ types differ in mutability\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected mutable reference `&mut [_]`\n                       found reference `&[isize]`"}, {"sha": "343644006b15383d4821dd2b94e46517d0c0f895", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,16 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:7:20\n    |\n LL |     let x: usize = String::new();\n-   |                    ^^^^^^^^^^^^^ expected `usize`, found struct `std::string::String`\n+   |            -----   ^^^^^^^^^^^^^ expected `usize`, found struct `std::string::String`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:9:19\n    |\n LL |     let x: &str = String::new();\n-   |                   ^^^^^^^^^^^^^\n-   |                   |\n-   |                   expected `&str`, found struct `std::string::String`\n-   |                   help: consider borrowing here: `&String::new()`\n+   |            ----   ^^^^^^^^^^^^^\n+   |            |      |\n+   |            |      expected `&str`, found struct `std::string::String`\n+   |            |      help: consider borrowing here: `&String::new()`\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:12:10"}, {"sha": "ded581dc4968e1604a143b78f801bbbc2ac3fc95", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/move-closure.rs:5:17\n    |\n LL |     let x: () = move || ();\n-   |                 ^^^^^^^^^^ expected `()`, found closure\n+   |            --   ^^^^^^^^^^ expected `()`, found closure\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`"}, {"sha": "a133c69eeefc84b8dd5bda8af420407dc5f0395c", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -32,10 +32,11 @@ error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:9:17\n    |\n LL |   let w: &str = s[..2];\n-   |                 ^^^^^^\n-   |                 |\n-   |                 expected `&str`, found `str`\n-   |                 help: consider borrowing here: `&s[..2]`\n+   |          ----   ^^^^^^\n+   |          |      |\n+   |          |      expected `&str`, found `str`\n+   |          |      help: consider borrowing here: `&s[..2]`\n+   |          expected due to this\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64ddfcc9b476505897f7e515714d77f78aa6e1e1", "filename": "src/test/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,10 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:2:20\n    |\n LL |     let x: &[u8] = \"foo\";\n-   |                    ^^^^^\n-   |                    |\n-   |                    expected slice `[u8]`, found `str`\n-   |                    help: consider adding a leading `b`: `b\"foo\"`\n+   |            -----   ^^^^^\n+   |            |       |\n+   |            |       expected slice `[u8]`, found `str`\n+   |            |       help: consider adding a leading `b`: `b\"foo\"`\n+   |            expected due to this\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n@@ -14,10 +15,11 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:3:23\n    |\n LL |     let y: &[u8; 4] = \"baaa\";\n-   |                       ^^^^^^\n-   |                       |\n-   |                       expected array `[u8; 4]`, found `str`\n-   |                       help: consider adding a leading `b`: `b\"baaa\"`\n+   |            --------   ^^^^^^\n+   |            |          |\n+   |            |          expected array `[u8; 4]`, found `str`\n+   |            |          help: consider adding a leading `b`: `b\"baaa\"`\n+   |            expected due to this\n    |\n    = note: expected reference `&[u8; 4]`\n               found reference `&'static str`\n@@ -26,10 +28,11 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:4:19\n    |\n LL |     let z: &str = b\"foo\";\n-   |                   ^^^^^^\n-   |                   |\n-   |                   expected `str`, found array `[u8; 3]`\n-   |                   help: consider removing the leading `b`: `\"foo\"`\n+   |            ----   ^^^^^^\n+   |            |      |\n+   |            |      expected `str`, found array `[u8; 3]`\n+   |            |      help: consider removing the leading `b`: `\"foo\"`\n+   |            expected due to this\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 3]`"}, {"sha": "d232a46f8ec29b1b3b4651d39954e8c387b5bc8c", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -63,7 +63,9 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:21:20\n    |\n LL |     let y: usize = ();\n-   |                    ^^ expected `usize`, found `()`\n+   |            -----   ^^ expected `usize`, found `()`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 7 previous errors\n "}, {"sha": "4423f3c130e2a31ddf562d1cd65b362e264c6efe", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -5,10 +5,11 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n@@ -20,10 +21,11 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n@@ -35,10 +37,11 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n@@ -50,10 +53,11 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<'static>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<'static>}`"}, {"sha": "2aebdebee72c1e1ccf5fb663a1f965a0fa72145e", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -5,10 +5,11 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n@@ -20,10 +21,11 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n@@ -35,10 +37,11 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n@@ -50,10 +53,11 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<ReStatic>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^\n-   |                 |\n-   |                 expected `()`, found fn item\n-   |                 help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^\n+   |            |    |\n+   |            |    expected `()`, found fn item\n+   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<ReStatic>}`"}, {"sha": "8445a706f4306c67f48bab203c0abd47bb689d63", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -34,10 +34,11 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:16:27\n    |\n LL |   let y: Option<&usize> = x;\n-   |                           ^\n-   |                           |\n-   |                           expected enum `std::option::Option`, found reference\n-   |                           help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n+   |          --------------   ^\n+   |          |                |\n+   |          |                expected enum `std::option::Option`, found reference\n+   |          |                help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n+   |          expected due to this\n    |\n    = note:   expected enum `std::option::Option<&usize>`\n            found reference `&std::option::Option<usize>`\n@@ -46,7 +47,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:19:35\n    |\n LL |   let y: Result<&usize, &usize> = x;\n-   |                                   ^ expected enum `std::result::Result`, found reference\n+   |          ----------------------   ^ expected enum `std::result::Result`, found reference\n+   |          |\n+   |          expected due to this\n    |\n    = note:   expected enum `std::result::Result<&usize, &usize>`\n            found reference `&std::result::Result<usize, usize>`\n@@ -59,7 +62,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:23:34\n    |\n LL |   let y: Result<&usize, usize> = x;\n-   |                                  ^ expected enum `std::result::Result`, found reference\n+   |          ---------------------   ^ expected enum `std::result::Result`, found reference\n+   |          |\n+   |          expected due to this\n    |\n    = note:   expected enum `std::result::Result<&usize, usize>`\n            found reference `&std::result::Result<usize, usize>`"}, {"sha": "2f0a457a795946d49ba39dc72ec8a8eb0b295ac2", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 70, "deletions": 56, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -19,10 +19,11 @@ LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n ...\n LL |     let _: usize = foo;\n-   |                    ^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `foo(a, b)`\n+   |            -----   ^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `foo(a, b)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {foo}`\n@@ -34,10 +35,11 @@ LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n ...\n LL |     let _: S = S;\n-   |                ^\n-   |                |\n-   |                expected struct `S`, found fn item\n-   |                help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |            -   ^\n+   |            |   |\n+   |            |   expected struct `S`, found fn item\n+   |            |   help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |            expected due to this\n    |\n    = note: expected struct `S`\n              found fn item `fn(usize, usize) -> S {S}`\n@@ -49,10 +51,11 @@ LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n ...\n LL |     let _: usize = bar;\n-   |                    ^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `bar()`\n+   |            -----   ^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `bar()`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn() -> usize {bar}`\n@@ -64,10 +67,11 @@ LL | struct V();\n    | ----------- fn() -> V {V} defined here\n ...\n LL |     let _: V = V;\n-   |                ^\n-   |                |\n-   |                expected struct `V`, found fn item\n-   |                help: use parentheses to instantiate this tuple struct: `V()`\n+   |            -   ^\n+   |            |   |\n+   |            |   expected struct `V`, found fn item\n+   |            |   help: use parentheses to instantiate this tuple struct: `V()`\n+   |            expected due to this\n    |\n    = note: expected struct `V`\n              found fn item `fn() -> V {V}`\n@@ -79,10 +83,11 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n ...\n LL |     let _: usize = T::baz;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `T::baz(x, y)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `T::baz(x, y)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n@@ -94,10 +99,11 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n ...\n LL |     let _: usize = T::bat;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `T::bat(x)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `T::bat(x)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n@@ -109,10 +115,11 @@ LL |     A(usize),\n    |     -------- fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n-   |                ^^^^\n-   |                |\n-   |                expected enum `E`, found fn item\n-   |                help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |            -   ^^^^\n+   |            |   |\n+   |            |   expected enum `E`, found fn item\n+   |            |   help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |            expected due to this\n    |\n    = note: expected enum `E`\n            found fn item `fn(usize) -> E {E::A}`\n@@ -124,10 +131,11 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n ...\n LL |     let _: usize = X::baz;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::baz(x, y)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::baz(x, y)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n@@ -139,10 +147,11 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n ...\n LL |     let _: usize = X::bat;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::bat(x)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::bat(x)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n@@ -154,10 +163,11 @@ LL |     fn bax(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n ...\n LL |     let _: usize = X::bax;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::bax(x)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::bax(x)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n@@ -169,10 +179,11 @@ LL |     fn bach(x: usize) -> usize;\n    |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n ...\n LL |     let _: usize = X::bach;\n-   |                    ^^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::bach(x)`\n+   |            -----   ^^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::bach(x)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n@@ -184,10 +195,11 @@ LL |     fn ban(&self) -> usize { 42 }\n    |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n ...\n LL |     let _: usize = X::ban;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::ban(_)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::ban(_)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n@@ -199,10 +211,11 @@ LL |     fn bal(&self) -> usize;\n    |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n ...\n LL |     let _: usize = X::bal;\n-   |                    ^^^^^^\n-   |                    |\n-   |                    expected `usize`, found fn item\n-   |                    help: use parentheses to call this function: `X::bal(_)`\n+   |            -----   ^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found fn item\n+   |            |       help: use parentheses to call this function: `X::bal(_)`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n@@ -225,10 +238,11 @@ error[E0308]: mismatched types\n LL |     let closure = || 42;\n    |                   -- closure defined here\n LL |     let _: usize = closure;\n-   |                    ^^^^^^^\n-   |                    |\n-   |                    expected `usize`, found closure\n-   |                    help: use parentheses to call this closure: `closure()`\n+   |            -----   ^^^^^^^\n+   |            |       |\n+   |            |       expected `usize`, found closure\n+   |            |       help: use parentheses to call this closure: `closure()`\n+   |            expected due to this\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`"}, {"sha": "44fac16260afc8f551adcc1413a09bbe152f1058", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,19 +2,21 @@ error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:2:21\n    |\n LL |     let a: String = &String::from(\"a\");\n-   |                     ^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     expected struct `std::string::String`, found `&std::string::String`\n-   |                     help: consider removing the borrow: `String::from(\"a\")`\n+   |            ------   ^^^^^^^^^^^^^^^^^^\n+   |            |        |\n+   |            |        expected struct `std::string::String`, found `&std::string::String`\n+   |            |        help: consider removing the borrow: `String::from(\"a\")`\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:4:21\n    |\n LL |     let b: String = &format!(\"b\");\n-   |                     ^^^^^^^^^^^^^\n-   |                     |\n-   |                     expected struct `std::string::String`, found `&std::string::String`\n-   |                     help: consider removing the borrow: `format!(\"b\")`\n+   |            ------   ^^^^^^^^^^^^^\n+   |            |        |\n+   |            |        expected struct `std::string::String`, found `&std::string::String`\n+   |            |        help: consider removing the borrow: `format!(\"b\")`\n+   |            expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b20327a9ff83318049c2234e928ac097d3affe50", "filename": "src/test/ui/suggestions/issue-59819.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-59819.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,28 +2,31 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:28:18\n    |\n LL |     let y: i32 = x;\n-   |                  ^\n-   |                  |\n-   |                  expected `i32`, found struct `Foo`\n-   |                  help: consider dereferencing the type: `*x`\n+   |            ---   ^\n+   |            |     |\n+   |            |     expected `i32`, found struct `Foo`\n+   |            |     help: consider dereferencing the type: `*x`\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:30:18\n    |\n LL |     let b: i32 = a;\n-   |                  ^\n-   |                  |\n-   |                  expected `i32`, found `&{integer}`\n-   |                  help: consider dereferencing the borrow: `*a`\n+   |            ---   ^\n+   |            |     |\n+   |            |     expected `i32`, found `&{integer}`\n+   |            |     help: consider dereferencing the borrow: `*a`\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59819.rs:34:21\n    |\n LL |     let g: String = f;\n-   |                     ^\n-   |                     |\n-   |                     expected struct `std::string::String`, found struct `Bar`\n-   |                     help: try using a conversion method: `f.to_string()`\n+   |            ------   ^\n+   |            |        |\n+   |            |        expected struct `std::string::String`, found struct `Bar`\n+   |            |        help: try using a conversion method: `f.to_string()`\n+   |            expected due to this\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4d44d893a86d9a20a818dc0cb3c056ac2de1e3e2", "filename": "src/test/ui/suggestions/mismatched-types-numeric-from.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fmismatched-types-numeric-from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fmismatched-types-numeric-from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmismatched-types-numeric-from.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types-numeric-from.rs:2:18\n    |\n LL |     let _: u32 = i32::from(0_u8);\n-   |                  ^^^^^^^^^^^^^^^ expected `u32`, found `i32`\n+   |            ---   ^^^^^^^^^^^^^^^ expected `u32`, found `i32`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "163be4cfce7a1baec21cabc99b28c8be359e7a47", "filename": "src/test/ui/suggestions/recover-from-semicolon-trailing-item.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-from-semicolon-trailing-item.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -22,13 +22,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:10:20\n    |\n LL |     let _: usize = S {};\n-   |                    ^^^^ expected `usize`, found struct `S`\n+   |            -----   ^^^^ expected `usize`, found struct `S`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:12:20\n    |\n LL |     let _: usize = X {};\n-   |                    ^^^^ expected `usize`, found struct `main::X`\n+   |            -----   ^^^^ expected `usize`, found struct `main::X`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/recover-from-semicolon-trailing-item.rs:14:9"}, {"sha": "19786bee9cb29d7e2263cff811146ed956ac0626", "filename": "src/test/ui/suggestions/suggest-box.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-box.rs:4:47\n    |\n LL |       let _x: Box<dyn Fn() -> Result<(), ()>> = || {\n-   |  _______________________________________________^\n+   |  _____________-------------------------------___^\n+   | |             |\n+   | |             expected due to this\n LL | |         Err(())?;\n LL | |         Ok(())\n LL | |     };"}, {"sha": "cafb6d2d288eeed903ee92c5c402e2032f3ed38f", "filename": "src/test/ui/tag-that-dare-not-speak-its-name.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftag-that-dare-not-speak-its-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftag-that-dare-not-speak-its-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-that-dare-not-speak-its-name.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/tag-that-dare-not-speak-its-name.rs:11:20\n    |\n LL |     let x : char = last(y);\n-   |                    ^^^^^^^ expected `char`, found enum `std::option::Option`\n+   |             ----   ^^^^^^^ expected `char`, found enum `std::option::Option`\n+   |             |\n+   |             expected due to this\n    |\n    = note: expected type `char`\n               found enum `std::option::Option<_>`"}, {"sha": "5dbb9ce45ee9e7b929756560f532e2cab7eb68c2", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/non-whitespace-trimming-2.rs:4:311\n    |\n-LL | ... let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _: ...\n-   |                                                       ^^ expected `()`, found integer\n+LL | ...13; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let ...\n+   |                                                     --   ^^ expected `()`, found integer\n+   |                                                     |\n+   |                                                     expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "d4993fad15c9796b490b2f2d95610f217a32423f", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/non-whitespace-trimming-unicode.rs:4:415\n    |\n-LL | ...\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646...\n-   |                                              ^^ expected `()`, found integer\n+LL | ...\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644...\n+   |                                            --   ^^ expected `()`, found integer\n+   |                                                     |\n+   |                                            expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "c4ff0e16890b23e94fe26b237ef4f80eb7da6f3a", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n   --> $DIR/non-whitespace-trimming.rs:4:241\n    |\n-LL | ... = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();...\n-   |                                                       ^^ expected `()`, found integer\n+LL | ... () = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ...\n+   |                                                     --   ^^ expected `()`, found integer\n+   |                                                     |\n+   |                                                     expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "e296d48893cdac7b50f0df5f0bbb296351a35ce1", "filename": "src/test/ui/terminal-width/whitespace-trimming.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/whitespace-trimming.rs:4:193\n    |\n LL | ...                   let _: () = 42;\n-   |                                   ^^ expected `()`, found integer\n+   |                              --   ^^ expected `()`, found integer\n+   |                              |\n+   |                              expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "95c3a08c04aa80a6955659e48150b26bd06925b3", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -11,7 +11,9 @@ error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17\n    |\n LL |     let _: u8 = <E2>::V;\n-   |                 ^^^^^^^ expected `u8`, found enum `E2`\n+   |            --   ^^^^^^^ expected `u8`, found enum `E2`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dc41cbc5fe3f8d5634f1a134e5eb3c4bbb3eba3b", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -8,7 +8,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;\n-   |                  ^ expected `i32`, found opaque type\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "24d23de797690362f04e644e93886271972936a0", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -8,7 +8,9 @@ error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;\n-   |                  ^ expected `i32`, found opaque type\n+   |            ---   ^ expected `i32`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "07962e36da1e66905187e1574575389e0e197e85", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n LL |     let _: &'static str = x;\n-   |                           ^ expected `&str`, found opaque type\n+   |            ------------   ^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&'static str`\n             found opaque type `NoReveal`"}, {"sha": "a2081424ab497d241fa09b07ae46fcad62a62974", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:15:19\n    |\n LL |     let _: &str = bomp();\n-   |                   ^^^^^^ expected `&str`, found opaque type\n+   |            ----   ^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected reference `&str`\n             found opaque type `Boo`"}, {"sha": "9a1cf5b25625ccb6df818b5a4e011d242801b4c2", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -107,7 +107,9 @@ error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:31:20\n    |\n LL |     let _: usize = 0 = 0;\n-   |                    ^^^^^ expected `usize`, found `()`\n+   |            -----   ^^^^^ expected `usize`, found `()`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 13 previous errors\n "}, {"sha": "2e8654d319640f6eebf7bcc373f813a69776cb3c", "filename": "src/test/ui/type/type-mismatch-multiple.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-multiple.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-multiple.rs:3:27\n    |\n LL | fn main() { let a: bool = 1; let b: i32 = true; }\n-   |                           ^ expected `bool`, found integer\n+   |                    ----   ^ expected `bool`, found integer\n+   |                    |\n+   |                    expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-multiple.rs:3:43\n    |\n LL | fn main() { let a: bool = 1; let b: i32 = true; }\n-   |                                           ^^^^ expected `i32`, found `bool`\n+   |                                     ---   ^^^^ expected `i32`, found `bool`\n+   |                                     |\n+   |                                     expected due to this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "25b4bff4d9aaa7453849322748392e27d87e7146", "filename": "src/test/ui/type/type-shadow.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-shadow.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/type-shadow.rs:6:20\n    |\n LL |         let y: Y = \"hello\";\n-   |                    ^^^^^^^ expected `isize`, found `&str`\n+   |                -   ^^^^^^^ expected `isize`, found `&str`\n+   |                |\n+   |                expected due to this\n \n error: aborting due to previous error\n "}, {"sha": "867412a24b282c24b3055db8f8420101ed52b0df", "filename": "src/test/ui/typeck/typeck_type_placeholder_mismatch.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_mismatch.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck_type_placeholder_mismatch.rs:13:21\n    |\n LL |     let x: Foo<_> = Bar::<usize>(PhantomData);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found struct `Bar`\n+   |            ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found struct `Bar`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo<_>`\n               found struct `Bar<usize>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck_type_placeholder_mismatch.rs:22:21\n    |\n LL |     let x: Foo<_> = Bar::<usize>(PhantomData);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found struct `Bar`\n+   |            ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found struct `Bar`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Foo<_>`\n               found struct `Bar<usize>`"}, {"sha": "23645759c04b0fadaf0ab10310936ee7ff6e6dca", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34f03c01f688c0653b080914d4ab83461e1cfae2/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=34f03c01f688c0653b080914d4ab83461e1cfae2", "patch": "@@ -35,7 +35,9 @@ error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:19\n    |\n LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found `f64`\n+   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found `f64`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 5 previous errors\n "}]}