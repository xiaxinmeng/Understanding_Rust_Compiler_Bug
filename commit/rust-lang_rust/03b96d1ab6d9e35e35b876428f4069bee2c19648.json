{"sha": "03b96d1ab6d9e35e35b876428f4069bee2c19648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYjk2ZDFhYjZkOWUzNWUzNWI4NzY0MjhmNDA2OWJlZTJjMTk2NDg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-22T20:43:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-25T00:35:33Z"}, "message": "Beef up Default documentation", "tree": {"sha": "ab4983e4fa5a5e14a2403050519f904d8f19fa4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab4983e4fa5a5e14a2403050519f904d8f19fa4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03b96d1ab6d9e35e35b876428f4069bee2c19648", "comment_count": 18, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03b96d1ab6d9e35e35b876428f4069bee2c19648", "html_url": "https://github.com/rust-lang/rust/commit/03b96d1ab6d9e35e35b876428f4069bee2c19648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03b96d1ab6d9e35e35b876428f4069bee2c19648/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3907a13f697feb007ab4824ee26f998d56a1311f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3907a13f697feb007ab4824ee26f998d56a1311f", "html_url": "https://github.com/rust-lang/rust/commit/3907a13f697feb007ab4824ee26f998d56a1311f"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "44a39aa265b99c658cc2ec62a035424e7abc45a6", "filename": "src/libcore/default.rs", "status": "modified", "additions": 108, "deletions": 3, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/03b96d1ab6d9e35e35b876428f4069bee2c19648/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b96d1ab6d9e35e35b876428f4069bee2c19648/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=03b96d1ab6d9e35e35b876428f4069bee2c19648", "patch": "@@ -8,15 +8,104 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The `Default` trait for types which may have meaningful default values\n+//! The `Default` trait for types which may have meaningful default values.\n+//!\n+//! Sometimes, you want to fall back to some kind of default value, and\n+//! don't particularly care what it is. This comes up often with `struct`s\n+//! that define a set of options:\n+//!\n+//! ```\n+//! struct SomeOptions {\n+//!     foo: int,\n+//!     bar: f32,\n+//! }\n+//! ```\n+//!\n+//! How can we define some default values? You can use `Default`:\n+//!\n+//! ```\n+//! use std::default::Default;\n+//!\n+//! #[deriving(Default)]\n+//! struct SomeOptions {\n+//!     foo: int,\n+//!     bar: f32,\n+//! }\n+//!\n+//!\n+//! fn main() {\n+//!     let options: SomeOptions = Default::default();\n+//! }\n+//! ```\n+//!\n+//! Now, you get all of the default values. Rust implements `Default` for various primitives types.\n+//! If you have your own type, you need to implement `Default` yourself:\n+//!\n+//! ```\n+//! use std::default::Default;\n+//!\n+//! enum Kind {\n+//!     A,\n+//!     B,\n+//!     C,\n+//! }\n+//!\n+//! impl Default for Kind {\n+//!     fn default() -> Kind { A }\n+//! }\n+//!\n+//! #[deriving(Default)]\n+//! struct SomeOptions {\n+//!     foo: int,\n+//!     bar: f32,\n+//!     baz: Kind,\n+//! }\n+//!\n+//!\n+//! fn main() {\n+//!     let options: SomeOptions = Default::default();\n+//! }\n+//! ```\n+//!\n+//! If you want to override a particular option, but still retain the other defaults:\n+//!\n+//! ```\n+//! # use std::default::Default;\n+//! # #[deriving(Default)]\n+//! # struct SomeOptions {\n+//! #     foo: int,\n+//! #     bar: f32,\n+//! # }\n+//! fn main() {\n+//!     let options = SomeOptions { foo: 42, ..Default::default() };\n+//! }\n+//! ```\n \n #![stable]\n \n /// A trait that types which have a useful default value should implement.\n+///\n+/// A struct can derive default implementations of `Default` for basic types using\n+/// `#[deriving(Default)]`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #[deriving(Default)]\n+/// struct SomeOptions {\n+///     foo: int,\n+///     bar: f32,\n+/// }\n+/// ```\n pub trait Default {\n-    /// Return the \"default value\" for a type.\n+    /// Returns the \"default value\" for a type.\n     ///\n-    /// # Example\n+    /// Default values are often some kind of initial value, identity value, or anything else that\n+    /// may make sense as a default.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Using built-in default values:\n     ///\n     /// ```\n     /// use std::default::Default;\n@@ -25,6 +114,22 @@ pub trait Default {\n     /// let (x, y): (Option<String>, f64) = Default::default();\n     /// let (a, b, (c, d)): (int, uint, (bool, bool)) = Default::default();\n     /// ```\n+    ///\n+    /// Making your own:\n+    ///\n+    /// ```\n+    /// use std::default::Default;\n+    ///\n+    /// enum Kind {\n+    ///     A,\n+    ///     B,\n+    ///     C,\n+    /// }\n+    ///\n+    /// impl Default for Kind {\n+    ///     fn default() -> Kind { A }\n+    /// }\n+    /// ```\n     fn default() -> Self;\n }\n "}]}