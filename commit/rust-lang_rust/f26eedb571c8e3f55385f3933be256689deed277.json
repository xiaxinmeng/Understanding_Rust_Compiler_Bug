{"sha": "f26eedb571c8e3f55385f3933be256689deed277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNmVlZGI1NzFjOGUzZjU1Mzg1ZjM5MzNiZTI1NjY4OWRlZWQyNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-31T17:56:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T17:56:25Z"}, "message": "Auto merge of #37191 - zackmdavis:we_heard_you_the_first_time_really, r=nikomatsakis\n\nintroing one-time diagnostics: only emit \"lint level defined here\" once\n\nThis is a revised resubmission of PR #34084 (which was closed due to inactivity on account of time constraints on the author's part).\n---\n\nWe introduce a new `one_time_diagnostics` field on\n`rustc::session::Session` to hold a hashset of diagnostic messages we've\nset once but don't want to see again (as uniquified by span and message\ntext), \"lint level defined here\" being the motivating example dealt with\nhere.\n\nThis is in the matter of #24690.\n---\n\nr? @nikomatsakis", "tree": {"sha": "3ecbcebf7c5c6fddb41bbe2b341c264bf9accd04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecbcebf7c5c6fddb41bbe2b341c264bf9accd04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26eedb571c8e3f55385f3933be256689deed277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26eedb571c8e3f55385f3933be256689deed277", "html_url": "https://github.com/rust-lang/rust/commit/f26eedb571c8e3f55385f3933be256689deed277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26eedb571c8e3f55385f3933be256689deed277/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "html_url": "https://github.com/rust-lang/rust/commit/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01"}, {"sha": "ef6a07221d66bff1ef8edac4f9ffc39013abf256", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a07221d66bff1ef8edac4f9ffc39013abf256", "html_url": "https://github.com/rust-lang/rust/commit/ef6a07221d66bff1ef8edac4f9ffc39013abf256"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "cf4115e37cd9860de65c733156451098f4c607dd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f26eedb571c8e3f55385f3933be256689deed277/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26eedb571c8e3f55385f3933be256689deed277/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f26eedb571c8e3f55385f3933be256689deed277", "patch": "@@ -452,8 +452,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     }\n \n     if let Some(span) = def {\n-        let explanation = \"lint level defined here\";\n-        err.span_note(span, &explanation);\n+        sess.diag_span_note_once(&mut err, lint, span, \"lint level defined here\");\n     }\n \n     err"}, {"sha": "ce3f2be54b2d5d327d959ef955ae22e3088cabf4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f26eedb571c8e3f55385f3933be256689deed277/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26eedb571c8e3f55385f3933be256689deed277/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f26eedb571c8e3f55385f3933be256689deed277", "patch": "@@ -17,7 +17,7 @@ use middle::dependency_format;\n use session::search_paths::PathKind;\n use session::config::DebugInfoLevel;\n use ty::tls;\n-use util::nodemap::{NodeMap, FnvHashMap};\n+use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n use util::common::duration_to_secs_str;\n use mir::transform as mir_pass;\n \n@@ -75,6 +75,10 @@ pub struct Session {\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n+    /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n+    /// that have been set once, but should not be set again, in order to avoid\n+    /// redundantly verbose output (Issue #24690).\n+    pub one_time_diagnostics: RefCell<FnvHashSet<(lint::LintId, Span, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub mir_passes: RefCell<mir_pass::Passes>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n@@ -288,6 +292,35 @@ impl Session {\n     pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n+\n+    /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n+    /// deduplicates on lint ID, span, and message for this `Session` if we're\n+    /// not outputting in JSON mode.\n+    //\n+    // FIXME: if the need arises for one-time diagnostics other than\n+    // `span_note`, we almost certainly want to generalize this\n+    // \"check/insert-into the one-time diagnostics map, then set message if\n+    // it's not already there\" code to accomodate all of them\n+    pub fn diag_span_note_once<'a, 'b>(&'a self,\n+                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                       lint: &'static lint::Lint, span: Span, message: &str) {\n+        match self.opts.error_format {\n+            // when outputting JSON for tool consumption, the tool might want\n+            // the duplicates\n+            config::ErrorOutputType::Json => {\n+                diag_builder.span_note(span, &message);\n+            },\n+            _ => {\n+                let lint_id = lint::LintId::of(lint);\n+                let id_span_message = (lint_id, span, message.to_owned());\n+                let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n+                if fresh {\n+                    diag_builder.span_note(span, &message);\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         self.parse_sess.codemap()\n     }\n@@ -561,6 +594,7 @@ pub fn build_session_(sopts: config::Options,\n         working_dir: env::current_dir().unwrap(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n+        one_time_diagnostics: RefCell::new(FnvHashSet()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n         mir_passes: RefCell::new(mir_pass::Passes::new()),\n         plugin_attributes: RefCell::new(Vec::new()),"}, {"sha": "def0d9aced3c3e664447329d9bd52a898aa2ef7c", "filename": "src/test/ui/span/issue-24690.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f26eedb571c8e3f55385f3933be256689deed277/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26eedb571c8e3f55385f3933be256689deed277/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs?ref=f26eedb571c8e3f55385f3933be256689deed277", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A test to ensure that helpful `note` messages aren't emitted more often\n+//! than necessary.\n+\n+// Although there are three errors, we should only get two \"lint level defined\n+// here\" notes pointing at the `warnings` span, one for each error type.\n+#![deny(warnings)]\n+\n+fn main() {\n+    let theTwo = 2;\n+    let theOtherTwo = 2;\n+    println!(\"{}\", theTwo);\n+}"}, {"sha": "0d2a2ef751666adbd5ad98171f5b55994bef5227", "filename": "src/test/ui/span/issue-24690.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f26eedb571c8e3f55385f3933be256689deed277/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f26eedb571c8e3f55385f3933be256689deed277/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=f26eedb571c8e3f55385f3933be256689deed277", "patch": "@@ -0,0 +1,32 @@\n+error: unused variable: `theOtherTwo`\n+  --> $DIR/issue-24690.rs:20:9\n+   |\n+20 |     let theOtherTwo = 2;\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-24690.rs:16:9\n+   |\n+16 | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: variable `theTwo` should have a snake case name such as `the_two`\n+  --> $DIR/issue-24690.rs:19:9\n+   |\n+19 |     let theTwo = 2;\n+   |         ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-24690.rs:16:9\n+   |\n+16 | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n+  --> $DIR/issue-24690.rs:20:9\n+   |\n+20 |     let theOtherTwo = 2;\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}