{"sha": "7328f4cc12cc271d458a03786ff7ec6c2f37b3cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjhmNGNjMTJjYzI3MWQ0NThhMDM3ODZmZjdlYzZjMmYzN2IzY2I=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-13T13:31:07Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:09:19Z"}, "message": "port type_use.rs from oldvisit to <V:Visitor> trait.", "tree": {"sha": "61b94a094cdf8ff37c394b4b9a126b95c0796a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b94a094cdf8ff37c394b4b9a126b95c0796a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb", "html_url": "https://github.com/rust-lang/rust/commit/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ce08a4cde573f3ab5e3f57a7c5142a472595ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ce08a4cde573f3ab5e3f57a7c5142a472595ff", "html_url": "https://github.com/rust-lang/rust/commit/23ce08a4cde573f3ab5e3f57a7c5142a472595ff"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "c67035021a3aab9f282abac4491cfefbd450a661", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7328f4cc12cc271d458a03786ff7ec6c2f37b3cb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=7328f4cc12cc271d458a03786ff7ec6c2f37b3cb", "patch": "@@ -42,15 +42,16 @@ use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;\n use syntax::parse::token;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n pub type type_uses = uint; // Bitmask\n pub static use_repr: uint = 1;   /* Dependency on size/alignment/mode and\n                                      take/drop glue */\n pub static use_tydesc: uint = 2; /* Takes the tydesc, or compares */\n pub static use_all: uint = use_repr|use_tydesc;\n \n-\n+#[deriving(Clone)]\n pub struct Context {\n     ccx: @mut CrateContext,\n     uses: @mut ~[type_uses]\n@@ -416,28 +417,39 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n     }\n }\n \n-pub fn handle_body(cx: &Context, body: &Block) {\n-    let v = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: |e, (cx, v)| {\n-            oldvisit::visit_expr(e, (cx, v));\n+struct TypeUseVisitor;\n+\n+impl<'self> Visitor<&'self Context> for TypeUseVisitor {\n+\n+    fn visit_expr<'a>(&mut self, e:@expr, cx: &'a Context) {\n+            visit::walk_expr(self, e, cx);\n             mark_for_expr(cx, e);\n-        },\n-        visit_local: |l, (cx, v)| {\n-            oldvisit::visit_local(l, (cx, v));\n+    }\n+\n+    fn visit_local<'a>(&mut self, l:@Local, cx: &'a Context) {\n+            visit::walk_local(self, l, cx);\n             node_type_needs(cx, use_repr, l.id);\n-        },\n-        visit_pat: |p, (cx, v)| {\n-            oldvisit::visit_pat(p, (cx, v));\n+    }\n+\n+    fn visit_pat<'a>(&mut self, p:@pat, cx: &'a Context) {\n+            visit::walk_pat(self, p, cx);\n             node_type_needs(cx, use_repr, p.id);\n-        },\n-        visit_block: |b, (cx, v)| {\n-            oldvisit::visit_block(b, (cx, v));\n+    }\n+\n+    fn visit_block<'a>(&mut self, b:&Block, cx: &'a Context) {\n+            visit::walk_block(self, b, cx);\n             for e in b.expr.iter() {\n                 node_type_needs(cx, use_repr, e.id);\n             }\n-        },\n-        visit_item: |_i, (_cx, _v)| { },\n-        ..*oldvisit::default_visitor()\n-    });\n-    (v.visit_block)(body, (cx, v));\n+    }\n+\n+    fn visit_item<'a>(&mut self, _:@item, _: &'a Context) {\n+        // do nothing\n+    }\n+\n+}\n+\n+pub fn handle_body(cx: &Context, body: &Block) {\n+    let mut v = TypeUseVisitor;\n+    v.visit_block(body, cx);\n }"}]}