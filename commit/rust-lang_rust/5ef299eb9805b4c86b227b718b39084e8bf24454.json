{"sha": "5ef299eb9805b4c86b227b718b39084e8bf24454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjI5OWViOTgwNWI0Yzg2YjIyN2I3MThiMzkwODRlOGJmMjQ0NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T22:00:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-24T22:00:23Z"}, "message": "Auto merge of #74681 - RalfJung:miri-extern-fn, r=oli-obk\n\n Miri: use extern fn to expose interpreter operations to program; fix leak checker on Windows\n\nThis PR realizes an idea that @oli-obk has been suggesting for a while: to use Miri-specific `extern` functions to provide some extra capabilities to the program. Initially, we have two of these methods, which libstd itself needs:\n* `miri_start_panic`, which replaces the intrinsic of the same name (mostly for consistency, to avoid having multiple mechanisms for Miri-specific functionality).\n* `miri_static_root`, which adds an allocation to a list of static \"roots\" that Miri considers as not having leaked (including all memory reachable through them). This is needed for https://github.com/rust-lang/miri/issues/1302.\n\nWe use `extern` functions instead of intrinsics for this so that user code can more easily call these Miri hoolks -- e.g. `miri_static_root` should be useful for https://github.com/rust-lang/miri/issues/1318.\n\nThe Miri side of this is at https://github.com/rust-lang/miri/pull/1485.\n\nr? @oli-obk", "tree": {"sha": "3e2e397069a66471fe17991bbdcdef37bf4ef489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2e397069a66471fe17991bbdcdef37bf4ef489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef299eb9805b4c86b227b718b39084e8bf24454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef299eb9805b4c86b227b718b39084e8bf24454", "html_url": "https://github.com/rust-lang/rust/commit/5ef299eb9805b4c86b227b718b39084e8bf24454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef299eb9805b4c86b227b718b39084e8bf24454/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8cf749570c87a4dcf05071bb5b280febb7f6657", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8cf749570c87a4dcf05071bb5b280febb7f6657", "html_url": "https://github.com/rust-lang/rust/commit/d8cf749570c87a4dcf05071bb5b280febb7f6657"}, {"sha": "67b4f3b1482971f6eaecec0c5e01f8be467c491a", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b4f3b1482971f6eaecec0c5e01f8be467c491a", "html_url": "https://github.com/rust-lang/rust/commit/67b4f3b1482971f6eaecec0c5e01f8be467c491a"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "71780361d298e87c54d8ed20e86cded29a1ca5ee", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -1947,14 +1947,6 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n-    /// Internal hook used by Miri to implement unwinding.\n-    /// ICEs when encountered during non-Miri codegen.\n-    ///\n-    /// The `payload` ptr here will be exactly the one `do_catch` gets passed by `try`.\n-    ///\n-    /// Perma-unstable: do not use.\n-    pub fn miri_start_panic(payload: *mut u8) -> !;\n-\n     /// Internal placeholder for injecting code coverage counters when the \"instrument-coverage\"\n     /// option is enabled. The placeholder is replaced with `llvm.instrprof.increment` during code\n     /// generation."}, {"sha": "d941b73b5fac10d4d870cf04d9329a7bc6f54d52", "filename": "src/libpanic_unwind/miri.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -6,11 +6,16 @@ use core::any::Any;\n // Must be pointer-sized.\n type Payload = Box<Box<dyn Any + Send>>;\n \n+extern \"Rust\" {\n+    /// Miri-provided extern function to begin unwinding.\n+    fn miri_start_panic(payload: *mut u8) -> !;\n+}\n+\n pub unsafe fn panic(payload: Box<dyn Any + Send>) -> u32 {\n     // The payload we pass to `miri_start_panic` will be exactly the argument we get\n     // in `cleanup` below. So we just box it up once, to get something pointer-sized.\n     let payload_box: Payload = Box::new(payload);\n-    core::intrinsics::miri_start_panic(Box::into_raw(payload_box) as *mut u8)\n+    miri_start_panic(Box::into_raw(payload_box) as *mut u8)\n }\n \n pub unsafe fn cleanup(payload_box: *mut u8) -> Box<dyn Any + Send> {"}, {"sha": "f9e1094ff7304862d51db844cbb850a0e96a169e", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -606,11 +606,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // For normal codegen, this Miri-specific intrinsic should never occur.\n-        if intrinsic == Some(sym::miri_start_panic) {\n-            bug!(\"`miri_start_panic` should never end up in compiled code\");\n-        }\n-\n         if self.codegen_panic_intrinsic(\n             &helper,\n             &mut bx,"}, {"sha": "ae837f8e16533618989f6220893bda61e281db29", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -716,14 +716,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn leak_report(&self) -> usize {\n+    /// Print leaked memory. Allocations reachable from `static_roots` or a `Global` allocation\n+    /// are not considered leaked. Leaks whose kind `may_leak()` returns true are not reported.\n+    pub fn leak_report(&self, static_roots: &[AllocId]) -> usize {\n         // Collect the set of allocations that are *reachable* from `Global` allocations.\n         let reachable = {\n             let mut reachable = FxHashSet::default();\n             let global_kind = M::GLOBAL_KIND.map(MemoryKind::Machine);\n             let mut todo: Vec<_> = self.alloc_map.filter_map_collect(move |&id, &(kind, _)| {\n                 if Some(kind) == global_kind { Some(id) } else { None }\n             });\n+            todo.extend(static_roots);\n             while let Some(id) = todo.pop() {\n                 if reachable.insert(id) {\n                     // This is a new allocation, add its relocations to `todo`."}, {"sha": "dadf040304d4683b81d22cad0295ae3650dc12f6", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -677,7 +677,6 @@ symbols! {\n         minnumf32,\n         minnumf64,\n         mips_target_feature,\n-        miri_start_panic,\n         mmx_target_feature,\n         module,\n         module_path,"}, {"sha": "dc2172650e574d298b1196f0eecdf2999f64f4fb", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -379,12 +379,6 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n-            sym::miri_start_panic => {\n-                // FIXME - the relevant types aren't lang items,\n-                // so it's not trivial to check this\n-                return;\n-            }\n-\n             sym::count_code_region => {\n                 (0, vec![tcx.types.u64, tcx.types.u32, tcx.types.u32, tcx.types.u32], tcx.mk_unit())\n             }"}, {"sha": "82901871e78ae25d68abdc50948af105064251af", "filename": "src/libstd/sys/windows/thread_local_key.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef299eb9805b4c86b227b718b39084e8bf24454/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=5ef299eb9805b4c86b227b718b39084e8bf24454", "patch": "@@ -110,14 +110,30 @@ struct Node {\n     next: *mut Node,\n }\n \n+#[cfg(miri)]\n+extern \"Rust\" {\n+    /// Miri-provided extern function to mark the block `ptr` points to as a \"root\"\n+    /// for some static memory. This memory and everything reachable by it is not\n+    /// considered leaking even if it still exists when the program terminates.\n+    ///\n+    /// `ptr` has to point to the beginning of an allocated block.\n+    fn miri_static_root(ptr: *const u8);\n+}\n+\n unsafe fn register_dtor(key: Key, dtor: Dtor) {\n     let mut node = Box::new(Node { key, dtor, next: ptr::null_mut() });\n \n     let mut head = DTORS.load(SeqCst);\n     loop {\n         node.next = head;\n         match DTORS.compare_exchange(head, &mut *node, SeqCst, SeqCst) {\n-            Ok(_) => return mem::forget(node),\n+            Ok(_) => {\n+                #[cfg(miri)]\n+                miri_static_root(&*node as *const _ as *const u8);\n+\n+                mem::forget(node);\n+                return;\n+            }\n             Err(cur) => head = cur,\n         }\n     }"}]}