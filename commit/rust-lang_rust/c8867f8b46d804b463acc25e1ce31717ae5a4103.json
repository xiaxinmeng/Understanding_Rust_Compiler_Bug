{"sha": "c8867f8b46d804b463acc25e1ce31717ae5a4103", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODY3ZjhiNDZkODA0YjQ2M2FjYzI1ZTFjZTMxNzE3YWU1YTQxMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-15T09:27:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-15T09:27:47Z"}, "message": "Auto merge of #37672 - japaric:msp430, r=alexcrichton\n\nenable the MSP430 LLVM backend\n\nto let people experiment with this target out of tree.\n\nThe MSP430 architecture is used in 16-bit microcontrollers commonly used\nin Digital Signal Processing applications.\n\n---\n\nHow this was tested:\n\nDeclaring a custom target with the following specification:\n\n``` json\n{\n  \"arch\": \"msp430\",\n  \"data-layout\": \"e-m:e-p:16:16-i32:16:32-a:16-n8:16\",\n  \"executables\": true,\n  \"linker\": \"msp430-gcc\",\n  \"llvm-target\": \"msp430\",\n  \"max-atomic-width\": 0,\n  \"no-integrated-as\": true,\n  \"os\": \"none\",\n  \"panic-strategy\": \"abort\",\n  \"relocation-model\": \"static\",\n  \"target-endian\": \"little\",\n  \"target-pointer-width\": \"16\"\n}\n```\n\nAnd this minimal file:\n\n``` rust\n\npub fn start() -> ! {\n    loop {}\n}\n\ntrait Copy {}\n\ntrait Sized {}\n```\n\nProduces the following object files:\n\n```\n$ rustc --target=msp430 --emit=obj foo.rs\n\n$ msp430-objdump -Cd foo.o\n\nfoo.o:     file format elf32-msp430\n\nDisassembly of section .text.start:\n\n00000000 <start>:\n   0:   21 83           decd    r1\n   2:   00 3c           jmp     $+2             ;abs 0x4\n   4:   00 3c           jmp     $+2             ;abs 0x6\n   6:   ff 3f           jmp     $+0             ;abs 0x6\n\n$ rustc --target=msp430 --emit=obj foo.rs -O\n\n$ msp430-objdump -Cd foo.o\n\nfoo.o:     file format elf32-msp430\n\nDisassembly of section .text.start:\n\n00000000 <start>:\n   0:   ff 3f           jmp     $+0             ;abs 0x0\n```\n\n---\n\nr? @alexcrichton\n~~TODO get this working with Makefiles so nightly releases include this backend~~\n~~TODO measure the increase in binary size~~ +187KiB (+0.47%)\n~~FIXME --emit=obj produces empty object files~~", "tree": {"sha": "5dc1f06b0f6b9ce44c67ff6e6fd2ce56518c2835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dc1f06b0f6b9ce44c67ff6e6fd2ce56518c2835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8867f8b46d804b463acc25e1ce31717ae5a4103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8867f8b46d804b463acc25e1ce31717ae5a4103", "html_url": "https://github.com/rust-lang/rust/commit/c8867f8b46d804b463acc25e1ce31717ae5a4103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8867f8b46d804b463acc25e1ce31717ae5a4103/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed951993fb5721a303ca5fa743543dd9f3f6b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed951993fb5721a303ca5fa743543dd9f3f6b10", "html_url": "https://github.com/rust-lang/rust/commit/0ed951993fb5721a303ca5fa743543dd9f3f6b10"}, {"sha": "80ca1e1251b634b8b9831aa999f3f7435ccfdd16", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ca1e1251b634b8b9831aa999f3f7435ccfdd16", "html_url": "https://github.com/rust-lang/rust/commit/80ca1e1251b634b8b9831aa999f3f7435ccfdd16"}], "stats": {"total": 112, "additions": 106, "deletions": 6}, "files": [{"sha": "16d6a90bf391d07715eaac159e19b659a1d2ebfc", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -1782,7 +1782,7 @@ do\n         CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n     fi\n \n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend'\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430'\"\n     CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n     CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n "}, {"sha": "9936c5b59be5c4c8f26a817e72eba3e59b09a0cf", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -285,7 +285,7 @@ endif\n # LLVM macros\n ######################################################################\n \n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend\n+LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend msp430\n LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n "}, {"sha": "96d1b695dd7075c77c124ba82ed4bdb0b02dc390", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -79,7 +79,8 @@ pub fn llvm(build: &Build, target: &str) {\n        .out_dir(&dst)\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n-       .define(\"LLVM_TARGETS_TO_BUILD\", \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend\")\n+       .define(\"LLVM_TARGETS_TO_BUILD\",\n+               \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430\")\n        .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n        .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n        .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")"}, {"sha": "cc04582b19e28cf35a6ec277f46138a105726291", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -359,6 +359,11 @@ pub struct TargetOptions {\n     // will 'just work'.\n     pub obj_is_bitcode: bool,\n \n+    // LLVM can't produce object files for this target. Instead, we'll make LLVM\n+    // emit assembly and then use `gcc` to turn that assembly into an object\n+    // file\n+    pub no_integrated_as: bool,\n+\n     /// Don't use this field; instead use the `.max_atomic_width()` method.\n     pub max_atomic_width: Option<u64>,\n \n@@ -416,6 +421,7 @@ impl Default for TargetOptions {\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n+            no_integrated_as: false,\n             max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n@@ -576,6 +582,7 @@ impl Target {\n         key!(exe_allocation_crate);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n+        key!(no_integrated_as, bool);\n         key!(max_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n \n@@ -735,6 +742,7 @@ impl ToJson for Target {\n         target_option_val!(exe_allocation_crate);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n+        target_option_val!(no_integrated_as);\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n "}, {"sha": "2dd83f70823592dc34a96ff77e200422a3125172", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -1056,14 +1056,29 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn phase_5_run_llvm_passes(sess: &Session,\n                                trans: &trans::CrateTranslation,\n                                outputs: &OutputFilenames) -> CompileResult {\n-    if sess.opts.cg.no_integrated_as {\n+    if sess.opts.cg.no_integrated_as ||\n+        (sess.target.target.options.no_integrated_as &&\n+         (outputs.outputs.contains_key(&OutputType::Object) ||\n+          outputs.outputs.contains_key(&OutputType::Exe)))\n+    {\n         let output_types = OutputTypes::new(&[(OutputType::Assembly, None)]);\n         time(sess.time_passes(),\n              \"LLVM passes\",\n              || write::run_passes(sess, trans, &output_types, outputs));\n \n         write::run_assembler(sess, outputs);\n \n+        // HACK the linker expects the object file to be named foo.0.o but\n+        // `run_assembler` produces an object named just foo.o. Rename it if we\n+        // are going to build an executable\n+        if sess.opts.output_types.contains_key(&OutputType::Exe) {\n+            let f = outputs.path(OutputType::Object);\n+            fs::copy(&f,\n+                     f.with_file_name(format!(\"{}.0.o\",\n+                                              f.file_stem().unwrap().to_string_lossy()))).unwrap();\n+            fs::remove_file(f).unwrap();\n+        }\n+\n         // Remove assembly source, unless --save-temps was specified\n         if !sess.opts.cg.save_temps {\n             fs::remove_file(&outputs.temp_path(OutputType::Assembly, None)).unwrap();"}, {"sha": "ca80a5269c95a66680002e2e3fece30d79bbe9e3", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let is_crossed = target != host;\n \n     let optional_components =\n-        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\"];\n+        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "65e0dbcad3a6a8eb7615a08f53fa498bd5de2c8c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -413,6 +413,11 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeJSBackendTargetInfo,\n                  LLVMInitializeJSBackendTarget,\n                  LLVMInitializeJSBackendTargetMC);\n+    init_target!(llvm_component = \"msp430\",\n+                 LLVMInitializeMSP430TargetInfo,\n+                 LLVMInitializeMSP430Target,\n+                 LLVMInitializeMSP430TargetMC,\n+                 LLVMInitializeMSP430AsmPrinter);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "f2e15a8973c910ca83eda7b7d4c1fcd09195b2c2", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -24,6 +24,7 @@ use cabi_s390x;\n use cabi_mips;\n use cabi_mips64;\n use cabi_asmjs;\n+use cabi_msp430;\n use machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n use type_::Type;\n use type_of;\n@@ -520,6 +521,7 @@ impl FnType {\n             \"s390x\" => cabi_s390x::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n+            \"msp430\" => cabi_msp430::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "aa90bb7ab753ad706b7f437f035bed2f1274fe7a", "filename": "src/librustc_trans/cabi_msp430.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fcabi_msp430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fcabi_msp430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_msp430.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Reference: MSP430 Embedded Application Binary Interface\n+// http://www.ti.com/lit/an/slaa534/slaa534.pdf\n+\n+#![allow(non_upper_case_globals)]\n+\n+use llvm::Struct;\n+\n+use abi::{self, ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_size(ty: Type) -> usize {\n+    abi::ty_size(ty, 2)\n+}\n+\n+// 3.5 Structures or Unions Passed and Returned by Reference\n+//\n+// \"Structures (including classes) and unions larger than 32 bits are passed and\n+// returned by reference. To pass a structure or union by reference, the caller\n+// places its address in the appropriate location: either in a register or on\n+// the stack, according to its position in the argument list. (..)\"\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if ret.ty.kind() == Struct && ty_size(ret.ty) > 32 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(16);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n+    if arg.ty.kind() == Struct && ty_size(arg.ty) > 32 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(16);\n+    }\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "611b93d2de118b80e0d312d149fd9318304cb5f1", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -101,6 +101,7 @@ mod cabi_arm;\n mod cabi_asmjs;\n mod cabi_mips;\n mod cabi_mips64;\n+mod cabi_msp430;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_s390x;"}, {"sha": "15cbbc720d6d40989d5adb7abdd1b70d77d2941f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -720,11 +720,13 @@ fn get_overflow_intrinsic(oop: OverflowOp, bcx: &BlockAndBuilder, ty: Ty) -> Val\n \n     let new_sty = match ty.sty {\n         TyInt(Is) => match &tcx.sess.target.target.target_pointer_width[..] {\n+            \"16\" => TyInt(I16),\n             \"32\" => TyInt(I32),\n             \"64\" => TyInt(I64),\n             _ => panic!(\"unsupported target word size\")\n         },\n         TyUint(Us) => match &tcx.sess.target.target.target_pointer_width[..] {\n+            \"16\" => TyUint(U16),\n             \"32\" => TyUint(U32),\n             \"64\" => TyUint(U64),\n             _ => panic!(\"unsupported target word size\")"}, {"sha": "a5ba1d219c369facd880704562ecc5b971294fb2", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c8867f8b46d804b463acc25e1ce31717ae5a4103/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=c8867f8b46d804b463acc25e1ce31717ae5a4103", "patch": "@@ -137,13 +137,20 @@ LLVMRustAddPass(LLVMPassManagerRef PM, LLVMPassRef rust_pass) {\n #define SUBTARGET_SYSTEMZ\n #endif\n \n+#ifdef LLVM_COMPONENT_MSP430\n+#define SUBTARGET_MSP430 SUBTARGET(MSP430)\n+#else\n+#define SUBTARGET_MSP430\n+#endif\n+\n #define GEN_SUBTARGETS    \\\n         SUBTARGET_X86     \\\n         SUBTARGET_ARM     \\\n         SUBTARGET_AARCH64 \\\n         SUBTARGET_MIPS    \\\n         SUBTARGET_PPC     \\\n-        SUBTARGET_SYSTEMZ\n+        SUBTARGET_SYSTEMZ \\\n+        SUBTARGET_MSP430\n \n #define SUBTARGET(x) namespace llvm {                \\\n     extern const SubtargetFeatureKV x##FeatureKV[];  \\"}]}