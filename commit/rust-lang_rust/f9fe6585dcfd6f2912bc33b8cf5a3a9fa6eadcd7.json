{"sha": "f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZmU2NTg1ZGNmZDZmMjkxMmJjMzNiOGNmNWEzYTlmYTZlYWRjZDc=", "commit": {"author": {"name": "Dirk Gadsden", "email": "dirk@esherido.com", "date": "2016-02-15T01:00:46Z"}, "committer": {"name": "Dirk Gadsden", "email": "dirk@esherido.com", "date": "2016-02-15T01:10:18Z"}, "message": "Clarify contiguous memory array structure of vectors in documentation\n\nCloses #31554.\n\nContributes to #29380.", "tree": {"sha": "afab8807eba7b082a4ba7c59e4314d2c2f2a279f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afab8807eba7b082a4ba7c59e4314d2c2f2a279f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "html_url": "https://github.com/rust-lang/rust/commit/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7/comments", "author": {"login": "dirk", "id": 7081, "node_id": "MDQ6VXNlcjcwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/7081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirk", "html_url": "https://github.com/dirk", "followers_url": "https://api.github.com/users/dirk/followers", "following_url": "https://api.github.com/users/dirk/following{/other_user}", "gists_url": "https://api.github.com/users/dirk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirk/subscriptions", "organizations_url": "https://api.github.com/users/dirk/orgs", "repos_url": "https://api.github.com/users/dirk/repos", "events_url": "https://api.github.com/users/dirk/events{/privacy}", "received_events_url": "https://api.github.com/users/dirk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dirk", "id": 7081, "node_id": "MDQ6VXNlcjcwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/7081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirk", "html_url": "https://github.com/dirk", "followers_url": "https://api.github.com/users/dirk/followers", "following_url": "https://api.github.com/users/dirk/following{/other_user}", "gists_url": "https://api.github.com/users/dirk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirk/subscriptions", "organizations_url": "https://api.github.com/users/dirk/orgs", "repos_url": "https://api.github.com/users/dirk/repos", "events_url": "https://api.github.com/users/dirk/events{/privacy}", "received_events_url": "https://api.github.com/users/dirk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "url": "https://api.github.com/repos/rust-lang/rust/commits/a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "html_url": "https://github.com/rust-lang/rust/commit/a888333ea6acad7e289fa3f0f9e6c1058aa2a011"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "f5a543d75b1b40baecb74f5605172b36157a4c0c", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "patch": "@@ -11,15 +11,21 @@ let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>\n ```\n \n (Notice that unlike the `println!` macro we\u2019ve used in the past, we use square\n-brackets `[]` with `vec!` macro. Rust allows you to use either in either situation,\n-this is just convention.)\n+brackets `[]` with `vec!` macro. Rust allows you to use either in either\n+situation, this is just convention.)\n \n There\u2019s an alternate form of `vec!` for repeating an initial value:\n \n ```rust\n let v = vec![0; 10]; // ten zeroes\n ```\n \n+Vectors store their contents as contiguous arrays of `T` on the heap. This means\n+that they must be able to know the size of `T` at compile time (that is, how\n+many bytes are needed to store a `T`?). The size of some things can't be known\n+at compile time. For these you'll have to store a pointer to that thing:\n+thankfully, the [`Box`][box] type works perfectly for this.\n+\n ## Accessing elements\n \n To get the value at a particular index in the vector, we use `[]`s:\n@@ -113,6 +119,7 @@ Vectors have many more useful methods, which you can read about in [their\n API documentation][vec].\n \n [vec]: ../std/vec/index.html\n+[box]: ../std/boxed/index.html\n [generic]: generics.html\n [panic]: concurrency.html#panics\n [get]: http://doc.rust-lang.org/std/vec/struct.Vec.html#method.get"}, {"sha": "270a01014c14b0051523f0ce2c2800e1317113ca", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f9fe6585dcfd6f2912bc33b8cf5a3a9fa6eadcd7", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A growable list type with heap-allocated contents, written `Vec<T>` but\n-//! pronounced 'vector.'\n+//! A contiguous growable array type with heap-allocated contents, written\n+//! `Vec<T>` but pronounced 'vector.'\n //!\n //! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and\n //! `O(1)` pop (from the end).\n@@ -78,7 +78,7 @@ use borrow::{Cow, IntoCow};\n \n use super::range::RangeArgument;\n \n-/// A growable list type, written `Vec<T>` but pronounced 'vector.'\n+/// A contiguous growable array type, written `Vec<T>` but pronounced 'vector.'\n ///\n /// # Examples\n ///"}]}