{"sha": "56087074c655bc17af048ad6483ecf7c32ce1762", "node_id": "C_kwDOAAsO6NoAKDU2MDg3MDc0YzY1NWJjMTdhZjA0OGFkNjQ4M2VjZjdjMzJjZTE3NjI", "commit": {"author": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2022-06-09T10:34:23Z"}, "committer": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2022-06-14T15:48:55Z"}, "message": "Stabilize `Path::try_exists()` and improve doc\n\nThis stabilizes the `Path::try_exists()` method which returns\n`Result<bool, io::Error>` instead of `bool` allowing handling of errors\nunrelated to the file not existing. (e.g permission errors)\n\nAlong with the stabilization it also:\n\n* Warns that the `exists()` method is error-prone and suggests to use\n  the newly stabilized one.\n* Suggests it instead of `metadata()` to handle errors.\n* Mentions TOCTOU bugs to avoid false assumption that `try_exists()` is\n  completely safe fixed version of `exists()`.\n* Renames the feature of still-unstable `std::fs::try_exists()` to\n  `fs_try_exists` to avoid name conflict.\n\nThe tracking issue #83186 remains open to track `fs_try_exists`.", "tree": {"sha": "c00b07a20adb9782b637db413feae58de7b8a1be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00b07a20adb9782b637db413feae58de7b8a1be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56087074c655bc17af048ad6483ecf7c32ce1762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56087074c655bc17af048ad6483ecf7c32ce1762", "html_url": "https://github.com/rust-lang/rust/commit/56087074c655bc17af048ad6483ecf7c32ce1762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56087074c655bc17af048ad6483ecf7c32ce1762/comments", "author": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "html_url": "https://github.com/rust-lang/rust/commit/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b21ff0e90836d3ece90bcc0b1840a4ec3c9a49a0", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56087074c655bc17af048ad6483ecf7c32ce1762/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56087074c655bc17af048ad6483ecf7c32ce1762/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=56087074c655bc17af048ad6483ecf7c32ce1762", "patch": "@@ -1,6 +1,5 @@\n #![feature(let_chains)]\n #![feature(once_cell)]\n-#![feature(path_try_exists)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n "}, {"sha": "f46997b807ab230653d361ab92de59d16cc7ddef", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56087074c655bc17af048ad6483ecf7c32ce1762/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56087074c655bc17af048ad6483ecf7c32ce1762/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=56087074c655bc17af048ad6483ecf7c32ce1762", "patch": "@@ -2317,10 +2317,14 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n /// denied on some of the parent directories.)\n ///\n+/// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n+/// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\n+/// where those bugs are not an issue.\n+///\n /// # Examples\n ///\n /// ```no_run\n-/// #![feature(path_try_exists)]\n+/// #![feature(fs_try_exists)]\n /// use std::fs;\n ///\n /// assert!(!fs::try_exists(\"does_not_exist.txt\").expect(\"Can't check existence of file does_not_exist.txt\"));\n@@ -2330,7 +2334,7 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n /// [`Path::exists`]: crate::path::Path::exists\n // FIXME: stabilization should modify documentation of `exists()` to recommend this method\n // instead.\n-#[unstable(feature = \"path_try_exists\", issue = \"83186\")]\n+#[unstable(feature = \"fs_try_exists\", issue = \"83186\")]\n #[inline]\n pub fn try_exists<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n     fs_imp::try_exists(path.as_ref())"}, {"sha": "c56d5aa9b2e8d008c238623cea73958d64ba557e", "filename": "library/std/src/path.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56087074c655bc17af048ad6483ecf7c32ce1762/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56087074c655bc17af048ad6483ecf7c32ce1762/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=56087074c655bc17af048ad6483ecf7c32ce1762", "patch": "@@ -2705,6 +2705,9 @@ impl Path {\n \n     /// Returns `true` if the path points at an existing entity.\n     ///\n+    /// Warning: this method may be error-prone, consider using [`try_exists()`] instead!\n+    /// It also has a risk of introducing time-of-check to time-of-use (TOCTOU) bugs.\n+    ///\n     /// This function will traverse symbolic links to query information about the\n     /// destination file.\n     ///\n@@ -2721,7 +2724,9 @@ impl Path {\n     /// # See Also\n     ///\n     /// This is a convenience function that coerces errors to false. If you want to\n-    /// check errors, call [`fs::metadata`].\n+    /// check errors, call [`Path::try_exists`].\n+    ///\n+    /// [`try_exists()`]: Self::try_exists\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     #[must_use]\n     #[inline]\n@@ -2738,20 +2743,20 @@ impl Path {\n     /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n     /// denied on some of the parent directories.)\n     ///\n+    /// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n+    /// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\n+    /// where those bugs are not an issue.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(path_try_exists)]\n-    ///\n     /// use std::path::Path;\n     /// assert!(!Path::new(\"does_not_exist.txt\").try_exists().expect(\"Can't check existence of file does_not_exist.txt\"));\n     /// assert!(Path::new(\"/root/secret_file.txt\").try_exists().is_err());\n     /// ```\n     ///\n     /// [`exists()`]: Self::exists\n-    // FIXME: stabilization should modify documentation of `exists()` to recommend this method\n-    // instead.\n-    #[unstable(feature = \"path_try_exists\", issue = \"83186\")]\n+    #[stable(feature = \"path_try_exists\", since = \"1.63.0\")]\n     #[inline]\n     pub fn try_exists(&self) -> io::Result<bool> {\n         fs::try_exists(self)"}]}