{"sha": "bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMjVjN2QwZjczYTViNmJmODg4NTkzZTcxN2JlMzkxZWFlYjNlNTg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-07T21:25:48Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-07T21:25:48Z"}, "message": "Cargo fmt", "tree": {"sha": "77148bc05fd4b71315ed8ea92f15850472b954e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77148bc05fd4b71315ed8ea92f15850472b954e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "html_url": "https://github.com/rust-lang/rust/commit/bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec311ee078bea2e0d91f0f0cf821173a246110b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec311ee078bea2e0d91f0f0cf821173a246110b", "html_url": "https://github.com/rust-lang/rust/commit/0ec311ee078bea2e0d91f0f0cf821173a246110b"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "a411f904fe919f910aaf3381621388872c4f0451", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -156,7 +156,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let last_subexpr = &subexpr_list[suffix_try_num];\n     let subexpr_list = &subexpr_list[suffix_try_num..subexpr_num - prefix_try_num];\n     let iter = subexpr_list.iter().skip(1).rev().zip(child_shape_iter);\n-    let mut rewrites = iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n+    let mut rewrites = iter\n+        .map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n         .collect::<Option<Vec<_>>>()?;\n \n     // Total of all items excluding the last."}, {"sha": "0d5cf63a19754505da23c37dd8c1ca812835ab66", "filename": "src/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -50,7 +50,8 @@ pub fn rewrite_closure(\n     if let ast::ExprKind::Block(ref block) = body.node {\n         // The body of the closure is an empty block.\n         if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n-            return body.rewrite(context, shape)\n+            return body\n+                .rewrite(context, shape)\n                 .map(|s| format!(\"{} {}\", prefix, s));\n         }\n "}, {"sha": "0b6c818e59ed1054e3a33fe5cc7a821a1936849b", "filename": "src/comment.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -249,7 +249,8 @@ fn _rewrite_comment(\n     // If there are lines without a starting sigil, we won't format them correctly\n     // so in that case we won't even re-align (if !config.normalize_comments()) and\n     // we should stop now.\n-    let num_bare_lines = orig.lines()\n+    let num_bare_lines = orig\n+        .lines()\n         .map(|line| line.trim())\n         .filter(|l| !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\")))\n         .count();\n@@ -271,11 +272,13 @@ fn identify_comment(\n     is_doc_comment: bool,\n ) -> Option<String> {\n     let style = comment_style(orig, false);\n-    let first_group = orig.lines()\n+    let first_group = orig\n+        .lines()\n         .take_while(|l| style.line_with_same_comment_style(l, false))\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n-    let rest = orig.lines()\n+    let rest = orig\n+        .lines()\n         .skip(first_group.lines().count())\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n@@ -333,7 +336,8 @@ fn rewrite_comment_inner(\n     };\n \n     let line_breaks = count_newlines(orig.trim_right());\n-    let lines = orig.lines()\n+    let lines = orig\n+        .lines()\n         .enumerate()\n         .map(|(i, mut line)| {\n             line = trim_right_unless_two_whitespaces(line.trim_left(), is_doc_comment);\n@@ -553,7 +557,8 @@ fn light_rewrite_comment(\n     config: &Config,\n     is_doc_comment: bool,\n ) -> Option<String> {\n-    let lines: Vec<&str> = orig.lines()\n+    let lines: Vec<&str> = orig\n+        .lines()\n         .map(|l| {\n             // This is basically just l.trim(), but in the case that a line starts\n             // with `*` we want to leave one space before it, so it aligns with the"}, {"sha": "bd8823f9ce41679bc0d1cd34c62f64bf486294ac", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -282,7 +282,8 @@ pub struct IgnoreList(HashSet<PathBuf>);\n \n impl IgnoreList {\n     pub fn add_prefix(&mut self, dir: &Path) {\n-        self.0 = self.0\n+        self.0 = self\n+            .0\n             .iter()\n             .map(|s| {\n                 if s.has_root() {"}, {"sha": "429fbc3cf9ae06598a0c5cefd94e6f0efb38d05d", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -455,7 +455,8 @@ where\n         width: context.budget(lhs_overhead),\n         ..shape\n     };\n-    let lhs_result = lhs.rewrite(context, lhs_shape)\n+    let lhs_result = lhs\n+        .rewrite(context, lhs_shape)\n         .map(|lhs_str| format!(\"{}{}\", pp.prefix, lhs_str))?;\n \n     // Try to put both lhs and rhs on the same line.\n@@ -1036,7 +1037,8 @@ impl<'a> ControlFlow<'a> {\n \n         // `for event in event`\n         // Do not include label in the span.\n-        let lo = self.label\n+        let lo = self\n+            .label\n             .map_or(self.span.lo(), |label| label.ident.span.hi());\n         let between_kwd_cond = mk_sp(\n             context\n@@ -1295,11 +1297,13 @@ pub fn rewrite_multiple_patterns(\n     pats: &[&ast::Pat],\n     shape: Shape,\n ) -> Option<String> {\n-    let pat_strs = pats.iter()\n+    let pat_strs = pats\n+        .iter()\n         .map(|p| p.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?;\n \n-    let use_mixed_layout = pats.iter()\n+    let use_mixed_layout = pats\n+        .iter()\n         .zip(pat_strs.iter())\n         .all(|(pat, pat_str)| is_short_pattern(pat, pat_str));\n     let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();"}, {"sha": "41b16969dc236145696ff04f52acba2efb616886", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -170,7 +170,8 @@ fn main() {\n     env_logger::init();\n \n     let opts = make_opts();\n-    let matches = opts.parse(env::args().skip(1))\n+    let matches = opts\n+        .parse(env::args().skip(1))\n         .expect(\"Couldn't parse command line\");\n     let config = Config::from_args(&matches, &opts);\n "}, {"sha": "83121b0421365340beea9be715ddbd7c8fe91121", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -231,10 +231,12 @@ impl fmt::Display for UseTree {\n impl UseTree {\n     // Rewrite use tree with `use ` and a trailing `;`.\n     pub fn rewrite_top_level(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let vis = self.visibility\n+        let vis = self\n+            .visibility\n             .as_ref()\n             .map_or(Cow::from(\"\"), |vis| ::utils::format_visibility(&vis));\n-        let use_str = self.rewrite(context, shape.offset_left(vis.len())?)\n+        let use_str = self\n+            .rewrite(context, shape.offset_left(vis.len())?)\n             .map(|s| {\n                 if s.is_empty() {\n                     s.to_owned()\n@@ -448,7 +450,8 @@ impl UseTree {\n \n         // Recursively normalize elements of a list use (including sorting the list).\n         if let UseSegment::List(list) = last {\n-            let mut list = list.into_iter()\n+            let mut list = list\n+                .into_iter()\n                 .map(|ut| ut.normalize())\n                 .collect::<Vec<_>>();\n             list.sort();\n@@ -530,7 +533,8 @@ impl UseTree {\n \n     fn merge(&mut self, other: UseTree) {\n         let mut new_path = vec![];\n-        for (mut a, b) in self.path\n+        for (mut a, b) in self\n+            .path\n             .clone()\n             .iter_mut()\n             .zip(other.path.clone().into_iter())"}, {"sha": "bd1a83d5a66a792151318ba9190ca19fa51a326b", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -142,7 +142,8 @@ impl<'a> Item<'a> {\n             keyword: \"\",\n             abi: format_abi(fm.abi, config.force_explicit_abi(), true),\n             vis: None,\n-            body: fm.items\n+            body: fm\n+                .items\n                 .iter()\n                 .map(|i| BodyElement::ForeignItem(i))\n                 .collect(),\n@@ -1725,7 +1726,8 @@ fn is_empty_infer(context: &RewriteContext, ty: &ast::Ty) -> bool {\n impl Rewrite for ast::Arg {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         if is_named_arg(self) {\n-            let mut result = self.pat\n+            let mut result = self\n+                .pat\n                 .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n \n             if !is_empty_infer(context, &*self.ty) {\n@@ -1738,7 +1740,8 @@ impl Rewrite for ast::Arg {\n                 }\n                 let overhead = last_line_width(&result);\n                 let max_width = shape.width.checked_sub(overhead)?;\n-                let ty_str = self.ty\n+                let ty_str = self\n+                    .ty\n                     .rewrite(context, Shape::legacy(max_width, shape.indent))?;\n                 result.push_str(&ty_str);\n             }\n@@ -1876,7 +1879,8 @@ fn rewrite_fn_base(\n \n     // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway.\n-    let ret_str = fd.output\n+    let ret_str = fd\n+        .output\n         .rewrite(context, Shape::indented(indent, context.config))?;\n \n     let multi_line_ret_str = ret_str.contains('\\n');\n@@ -2034,7 +2038,8 @@ fn rewrite_fn_base(\n         if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-            let ret_str = fd.output\n+            let ret_str = fd\n+                .output\n                 .rewrite(context, Shape::indented(ret_indent, context.config))?;\n             result.push_str(&ret_str);\n         } else {\n@@ -2151,7 +2156,8 @@ fn rewrite_args(\n     variadic: bool,\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n-    let mut arg_item_strs = args.iter()\n+    let mut arg_item_strs = args\n+        .iter()\n         .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n         .collect::<Option<Vec<_>>>()?;\n "}, {"sha": "73c3fdd48c2038f1c6fd8e56a5377254bd599d9a", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -165,7 +165,8 @@ impl FormattingError {\n         match self.kind {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n             ErrorKind::TrailingWhitespace => {\n-                let trailing_ws_start = self.line_buffer\n+                let trailing_ws_start = self\n+                    .line_buffer\n                     .rfind(|c: char| !c.is_whitespace())\n                     .map(|pos| pos + 1)\n                     .unwrap_or(0);"}, {"sha": "b3264487cfeb395eebb12de1e223954701ef1886", "filename": "src/lists.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -96,17 +96,20 @@ impl ListItem {\n \n     pub fn is_different_group(&self) -> bool {\n         self.inner_as_ref().contains('\\n') || self.pre_comment.is_some()\n-            || self.post_comment\n+            || self\n+                .post_comment\n                 .as_ref()\n                 .map_or(false, |s| s.contains('\\n'))\n     }\n \n     pub fn is_multiline(&self) -> bool {\n         self.inner_as_ref().contains('\\n')\n-            || self.pre_comment\n+            || self\n+                .pre_comment\n                 .as_ref()\n                 .map_or(false, |s| s.contains('\\n'))\n-            || self.post_comment\n+            || self\n+                .post_comment\n                 .as_ref()\n                 .map_or(false, |s| s.contains('\\n'))\n     }\n@@ -115,7 +118,8 @@ impl ListItem {\n         self.pre_comment\n             .as_ref()\n             .map_or(false, |comment| comment.trim_left().starts_with(\"//\"))\n-            || self.post_comment\n+            || self\n+                .post_comment\n                 .as_ref()\n                 .map_or(false, |comment| comment.trim_left().starts_with(\"//\"))\n     }\n@@ -517,7 +521,8 @@ where\n         self.inner.next().map(|item| {\n             let mut new_lines = false;\n             // Pre-comment\n-            let pre_snippet = self.snippet_provider\n+            let pre_snippet = self\n+                .snippet_provider\n                 .span_to_snippet(mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n                 .unwrap();\n             let trimmed_pre_snippet = pre_snippet.trim();\n@@ -555,7 +560,8 @@ where\n                 Some(next_item) => (self.get_lo)(next_item),\n                 None => self.next_span_start,\n             };\n-            let post_snippet = self.snippet_provider\n+            let post_snippet = self\n+                .snippet_provider\n                 .span_to_snippet(mk_sp((self.get_hi)(&item), next_start))\n                 .unwrap();\n "}, {"sha": "1a5c6d4f2e6ca504778872f4fb5c150e2d30063b", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -291,7 +291,8 @@ impl<'a> FmtVisitor<'a> {\n             i += offset;\n \n             if c == '\\n' {\n-                let skip_this_line = !self.config\n+                let skip_this_line = !self\n+                    .config\n                     .file_lines()\n                     .contains_line(file_name, status.cur_line);\n                 if skip_this_line {"}, {"sha": "a8ef66b0e3c3b0743da53860fd54bf8b7af23125", "filename": "src/overflow.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -184,7 +184,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n     }\n \n     fn items_span(&self) -> Span {\n-        let span_lo = self.context\n+        let span_lo = self\n+            .context\n             .snippet_provider\n             .span_after(self.span, self.prefix);\n         mk_sp(span_lo, self.span.hi())\n@@ -288,7 +289,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                 // formatted code, where a prefix or a suffix being left on its own\n                 // line. Here we explicitlly check those cases.\n                 if count_newlines(overflowed) == 1 {\n-                    let rw = self.items\n+                    let rw = self\n+                        .items\n                         .last()\n                         .and_then(|last_item| last_item.rewrite(self.context, self.nested_shape));\n                     let no_newline = rw.as_ref().map_or(false, |s| !s.contains('\\n'));\n@@ -305,7 +307,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                 list_items[self.items.len() - 1].item = placeholder;\n             }\n             _ if self.items.len() >= 1 => {\n-                list_items[self.items.len() - 1].item = self.items\n+                list_items[self.items.len() - 1].item = self\n+                    .items\n                     .last()\n                     .and_then(|last_item| last_item.rewrite(self.context, self.nested_shape));\n \n@@ -427,7 +430,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         } else {\n             first_line_width(items_str) + (paren_overhead / 2)\n         };\n-        let nested_indent_str = self.nested_shape\n+        let nested_indent_str = self\n+            .nested_shape\n             .indent\n             .to_string_with_newline(self.context.config);\n         let indent_str = shape"}, {"sha": "99edf9ba774ce7fd15eb2b2d05597a577a0e1e59", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -167,7 +167,8 @@ impl Rewrite for Pat {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::Mac(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n-            PatKind::Paren(ref pat) => pat.rewrite(context, shape.offset_left(1)?.sub_width(1)?)\n+            PatKind::Paren(ref pat) => pat\n+                .rewrite(context, shape.offset_left(1)?.sub_width(1)?)\n                 .map(|inner_pat| format!(\"({})\", inner_pat)),\n         }\n     }"}, {"sha": "e57a94af8c39b7d0c6207fd55f6d4cea723dd147", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -628,7 +628,8 @@ impl ConfigurationSection {\n                 Some((i, line)) => {\n                     if line.starts_with(\"```rust\") {\n                         // Get the lines of the code block.\n-                        let lines: Vec<String> = file.map(|(_i, l)| l)\n+                        let lines: Vec<String> = file\n+                            .map(|(_i, l)| l)\n                             .take_while(|l| !l.starts_with(\"```\"))\n                             .collect();\n                         let block = format!(\"{}\\n\", lines.join(\"\\n\"));\n@@ -699,7 +700,8 @@ impl ConfigCodeBlock {\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n         // See if code block begins with #![rustfmt_skip].\n-        let fmt_skip = self.code_block\n+        let fmt_skip = self\n+            .code_block\n             .as_ref()\n             .unwrap()\n             .split('\\n')"}, {"sha": "47a52281e28d061f3cf4adcc5796113c7e11d365", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -234,7 +234,8 @@ fn rewrite_segment(\n                     || !data.types.is_empty()\n                     || !data.bindings.is_empty() =>\n             {\n-                let param_list = data.lifetimes\n+                let param_list = data\n+                    .lifetimes\n                     .iter()\n                     .map(SegmentParam::LifeTime)\n                     .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n@@ -574,7 +575,8 @@ impl Rewrite for ast::PolyTraitRef {\n         {\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n-            let path_str = self.trait_ref\n+            let path_str = self\n+                .trait_ref\n                 .rewrite(context, shape.offset_left(extra_offset)?)?;\n \n             Some(\n@@ -717,7 +719,8 @@ impl Rewrite for ast::Ty {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n             }\n             ast::TyKind::ImplicitSelf => Some(String::from(\"\")),\n-            ast::TyKind::ImplTrait(ref it) => it.rewrite(context, shape)\n+            ast::TyKind::ImplTrait(ref it) => it\n+                .rewrite(context, shape)\n                 .map(|it_str| format!(\"impl {}\", it_str)),\n             ast::TyKind::Err | ast::TyKind::Typeof(..) => unreachable!(),\n         }"}, {"sha": "ca8a7ad78144629923bf05475e8564a61478f70d", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -29,7 +29,8 @@ const SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n pub fn extra_offset(text: &str, shape: Shape) -> usize {\n     match text.rfind('\\n') {\n         // 1 for newline character\n-        Some(idx) => text.len()\n+        Some(idx) => text\n+            .len()\n             .checked_sub(idx + 1 + shape.used_width())\n             .unwrap_or(0),\n         None => text.len(),"}, {"sha": "7f042b1a11bf60e2a320c8cbef7aa8783c4c877d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd25c7d0f73a5b6bf888593e717be391eaeb3e58/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bd25c7d0f73a5b6bf888593e717be391eaeb3e58", "patch": "@@ -687,7 +687,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     pub fn skip_empty_lines(&mut self, end_pos: BytePos) {\n-        while let Some(pos) = self.snippet_provider\n+        while let Some(pos) = self\n+            .snippet_provider\n             .opt_span_after(mk_sp(self.last_pos, end_pos), \"\\n\")\n         {\n             if let Some(snippet) = self.opt_snippet(mk_sp(self.last_pos, pos)) {"}]}