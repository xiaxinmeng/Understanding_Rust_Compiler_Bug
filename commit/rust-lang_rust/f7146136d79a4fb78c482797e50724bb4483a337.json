{"sha": "f7146136d79a4fb78c482797e50724bb4483a337", "node_id": "C_kwDOAAsO6NoAKGY3MTQ2MTM2ZDc5YTRmYjc4YzQ4Mjc5N2U1MDcyNGJiNDQ4M2EzMzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T20:52:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T20:52:06Z"}, "message": "Bail in combine if consts have different types", "tree": {"sha": "3481b962b345398ec7073d8accce35b99a3bb76c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3481b962b345398ec7073d8accce35b99a3bb76c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7146136d79a4fb78c482797e50724bb4483a337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7146136d79a4fb78c482797e50724bb4483a337", "html_url": "https://github.com/rust-lang/rust/commit/f7146136d79a4fb78c482797e50724bb4483a337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7146136d79a4fb78c482797e50724bb4483a337/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9574f39c2dc6312223fe562c1e04e4344eada316", "url": "https://api.github.com/repos/rust-lang/rust/commits/9574f39c2dc6312223fe562c1e04e4344eada316", "html_url": "https://github.com/rust-lang/rust/commit/9574f39c2dc6312223fe562c1e04e4344eada316"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "adbd91f436caa956842621af5bd57157e1742bdc", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7146136d79a4fb78c482797e50724bb4483a337/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7146136d79a4fb78c482797e50724bb4483a337/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=f7146136d79a4fb78c482797e50724bb4483a337", "patch": "@@ -34,7 +34,6 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -161,9 +160,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         //\n         // This probe is probably not strictly necessary but it seems better to be safe and not accidentally find\n         // ourselves with a check to find bugs being required for code to compile because it made inference progress.\n-        self.probe(|_| {\n+        let compatible_types = self.probe(|_| {\n             if a.ty() == b.ty() {\n-                return;\n+                return Ok(());\n             }\n \n             // We don't have access to trait solving machinery in `rustc_infer` so the logic for determining if the\n@@ -173,15 +172,24 @@ impl<'tcx> InferCtxt<'tcx> {\n                 (relation.param_env(), a.ty(), b.ty()),\n                 &mut OriginalQueryValues::default(),\n             );\n-\n-            if let Err(NoSolution) = self.tcx.check_tys_might_be_eq(canonical) {\n+            self.tcx.check_tys_might_be_eq(canonical).map_err(|_| {\n                 self.tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n                     &format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),\n-                );\n-            }\n+                )\n+            })\n         });\n \n+        // If the consts have differing types, just bail with a const error with\n+        // the expected const's type. Specifically, we don't want const infer vars\n+        // to do any type shapeshifting before and after resolution.\n+        if let Err(guar) = compatible_types {\n+            return Ok(self.tcx.const_error_with_guaranteed(\n+                if relation.a_is_expected() { a.ty() } else { b.ty() },\n+                guar,\n+            ));\n+        }\n+\n         match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),"}]}