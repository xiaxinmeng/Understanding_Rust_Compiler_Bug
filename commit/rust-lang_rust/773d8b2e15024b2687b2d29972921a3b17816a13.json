{"sha": "773d8b2e15024b2687b2d29972921a3b17816a13", "node_id": "C_kwDOAAsO6NoAKDc3M2Q4YjJlMTUwMjRiMjY4N2IyZDI5OTcyOTIxYTNiMTc4MTZhMTM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-03T18:42:35Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T14:11:27Z"}, "message": "address review", "tree": {"sha": "da7c1cd2ba5441aeda00ab7a43350c749f94f375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7c1cd2ba5441aeda00ab7a43350c749f94f375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773d8b2e15024b2687b2d29972921a3b17816a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773d8b2e15024b2687b2d29972921a3b17816a13", "html_url": "https://github.com/rust-lang/rust/commit/773d8b2e15024b2687b2d29972921a3b17816a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773d8b2e15024b2687b2d29972921a3b17816a13/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6815a924448b6e4b93adb8645d6903cbbc47eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6815a924448b6e4b93adb8645d6903cbbc47eb", "html_url": "https://github.com/rust-lang/rust/commit/0a6815a924448b6e4b93adb8645d6903cbbc47eb"}], "stats": {"total": 277, "additions": 116, "deletions": 161}, "files": [{"sha": "5716ee2fc14997eb86be068105865e84b56dc507", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -358,6 +358,7 @@ dependencies = [\n  \"libgit2-sys\",\n  \"log\",\n  \"memchr\",\n+ \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n  \"os_info\","}, {"sha": "5f32f0d5e89febbe4ebabfc375a2865c889785bb", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -11,9 +11,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n     /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n     /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n-    ///\n-    /// Note: Returns a `ConstValue`, which isn't supposed to be used in the type system. In order to\n-    /// evaluate to a type-system level constant value use `const_eval_poly_for_typeck`.\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn const_eval_poly(self, def_id: DefId) -> EvalToConstValueResult<'tcx> {\n         // In some situations def_id will have substitutions within scope, but they aren't allowed\n@@ -26,23 +23,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let param_env = self.param_env(def_id).with_reveal_all_normalized(self);\n         self.const_eval_global_id(param_env, cid, None)\n     }\n-\n-    /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n-    /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n-    /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n-    #[instrument(skip(self), level = \"debug\")]\n-    pub fn const_eval_poly_for_typeck(self, def_id: DefId) -> EvalToValTreeResult<'tcx> {\n-        // In some situations def_id will have substitutions within scope, but they aren't allowed\n-        // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n-        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n-        // encountered.\n-        let substs = InternalSubsts::identity_for_item(self, def_id);\n-        let instance = ty::Instance::new(def_id, substs);\n-        let cid = GlobalId { instance, promoted: None };\n-        let param_env = self.param_env(def_id).with_reveal_all_normalized(self);\n-        self.const_eval_global_id_for_typeck(param_env, cid, None)\n-    }\n-\n     /// Resolves and evaluates a constant.\n     ///\n     /// The constant can be located on a trait like `<A as B>::C`, in which case the given"}, {"sha": "e80918d5e5d032228ee7d329f9611a742d36471a", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -111,6 +111,10 @@ impl<'tcx> ConstValue<'tcx> {\n     pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         ConstValue::Scalar(Scalar::from_machine_usize(i, cx))\n     }\n+\n+    pub fn zst() -> Self {\n+        Self::Scalar(Scalar::ZST)\n+    }\n }\n \n /// A `Scalar` represents an immediate, primitive value existing outside of a"}, {"sha": "b3cf8cdde0ea62f65bf8fb951113d6793c01daf7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -2405,7 +2405,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantKind::Ty(ty::Const::zero_sized(tcx, ty)),\n+            literal: ConstantKind::Val(ConstValue::zst(), ty),\n         }))\n     }\n \n@@ -2981,16 +2981,6 @@ impl<'tcx> ConstantKind<'tcx> {\n         }\n     }\n \n-    pub fn try_val(&self, tcx: TyCtxt<'tcx>) -> Option<ConstValue<'tcx>> {\n-        match self {\n-            ConstantKind::Ty(c) => match c.kind() {\n-                ty::ConstKind::Value(v) => Some(tcx.valtree_to_const_val((c.ty(), v))),\n-                _ => None,\n-            },\n-            ConstantKind::Val(v, _) => Some(*v),\n-        }\n-    }\n-\n     #[inline]\n     pub fn try_to_value(self, tcx: TyCtxt<'tcx>) -> Option<interpret::ConstValue<'tcx>> {\n         match self {\n@@ -3548,6 +3538,7 @@ fn comma_sep<'tcx>(fmt: &mut Formatter<'_>, elems: Vec<ConstantKind<'tcx>>) -> f\n     Ok(())\n }\n \n+// FIXME: Move that into `mir/pretty.rs`.\n fn pretty_print_const_value<'tcx>(\n     ct: ConstValue<'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "129d2051c19e778a3d2f7ad737621c740eae28ed", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -1530,7 +1530,9 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         // fallback\n-        if valtree != ty::ValTree::zst() {\n+        if valtree == ty::ValTree::zst() {\n+            p!(write(\"<ZST>\"));\n+        } else {\n             p!(write(\"{:?}\", valtree));\n         }\n         if print_ty {"}, {"sha": "8d14a37676d2c8c48b6aa841396d65dc470d8963", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -2,9 +2,9 @@ use crate::build;\n pub(crate) use crate::build::expr::as_constant::lit_to_mir_constant;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n-use crate::thir::constant::parse_float_into_scalar;\n use crate::thir::pattern::pat_from_hir;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_apfloat::ieee::{Double, Single};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -15,6 +15,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n@@ -1093,6 +1094,62 @@ fn parse_float_into_constval<'tcx>(\n     parse_float_into_scalar(num, float_ty, neg).map(ConstValue::Scalar)\n }\n \n+pub(crate) fn parse_float_into_scalar(\n+    num: Symbol,\n+    float_ty: ty::FloatTy,\n+    neg: bool,\n+) -> Option<Scalar> {\n+    let num = num.as_str();\n+    match float_ty {\n+        ty::FloatTy::F32 => {\n+            let Ok(rust_f) = num.parse::<f32>() else { return None };\n+            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n+\n+            assert!(\n+                u128::from(rust_f.to_bits()) == f.to_bits(),\n+                \"apfloat::ieee::Single gave different result for `{}`: \\\n+                 {}({:#x}) vs Rust's {}({:#x})\",\n+                rust_f,\n+                f,\n+                f.to_bits(),\n+                Single::from_bits(rust_f.to_bits().into()),\n+                rust_f.to_bits()\n+            );\n+\n+            if neg {\n+                f = -f;\n+            }\n+\n+            Some(Scalar::from_f32(f))\n+        }\n+        ty::FloatTy::F64 => {\n+            let Ok(rust_f) = num.parse::<f64>() else { return None };\n+            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n+            });\n+\n+            assert!(\n+                u128::from(rust_f.to_bits()) == f.to_bits(),\n+                \"apfloat::ieee::Double gave different result for `{}`: \\\n+                 {}({:#x}) vs Rust's {}({:#x})\",\n+                rust_f,\n+                f,\n+                f.to_bits(),\n+                Double::from_bits(rust_f.to_bits().into()),\n+                rust_f.to_bits()\n+            );\n+\n+            if neg {\n+                f = -f;\n+            }\n+\n+            Some(Scalar::from_f64(f))\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Builder methods are broken up into modules, depending on what kind\n // of thing is being lowered. Note that they use the `unpack` macro"}, {"sha": "a7e4403a242e103efca8f5589b757d1b1ae5de72", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 71, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -1,9 +1,6 @@\n-use rustc_apfloat::ieee::{Double, Single};\n-use rustc_apfloat::Float;\n use rustc_ast as ast;\n-use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput, Scalar};\n+use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::ty::{self, ParamEnv, ScalarInt, TyCtxt};\n-use rustc_span::symbol::Symbol;\n \n pub(crate) fn lit_to_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -45,9 +42,6 @@ pub(crate) fn lit_to_const<'tcx>(\n                 trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?;\n             ty::ValTree::from_scalar_int(scalar_int)\n         }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n-            parse_float_into_valtree(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n-        }\n         (ast::LitKind::Bool(b), ty::Bool) => ty::ValTree::from_scalar_int((*b).into()),\n         (ast::LitKind::Char(c), ty::Char) => ty::ValTree::from_scalar_int((*c).into()),\n         (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n@@ -56,67 +50,3 @@ pub(crate) fn lit_to_const<'tcx>(\n \n     Ok(ty::Const::from_value(tcx, valtree, ty))\n }\n-\n-pub(crate) fn parse_float_into_scalar(\n-    num: Symbol,\n-    float_ty: ty::FloatTy,\n-    neg: bool,\n-) -> Option<Scalar> {\n-    let num = num.as_str();\n-    match float_ty {\n-        ty::FloatTy::F32 => {\n-            let Ok(rust_f) = num.parse::<f32>() else { return None };\n-            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            });\n-\n-            assert!(\n-                u128::from(rust_f.to_bits()) == f.to_bits(),\n-                \"apfloat::ieee::Single gave different result for `{}`: \\\n-                 {}({:#x}) vs Rust's {}({:#x})\",\n-                rust_f,\n-                f,\n-                f.to_bits(),\n-                Single::from_bits(rust_f.to_bits().into()),\n-                rust_f.to_bits()\n-            );\n-\n-            if neg {\n-                f = -f;\n-            }\n-\n-            Some(Scalar::from_f32(f))\n-        }\n-        ty::FloatTy::F64 => {\n-            let Ok(rust_f) = num.parse::<f64>() else { return None };\n-            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n-            });\n-\n-            assert!(\n-                u128::from(rust_f.to_bits()) == f.to_bits(),\n-                \"apfloat::ieee::Double gave different result for `{}`: \\\n-                 {}({:#x}) vs Rust's {}({:#x})\",\n-                rust_f,\n-                f,\n-                f.to_bits(),\n-                Double::from_bits(rust_f.to_bits().into()),\n-                rust_f.to_bits()\n-            );\n-\n-            if neg {\n-                f = -f;\n-            }\n-\n-            Some(Scalar::from_f64(f))\n-        }\n-    }\n-}\n-\n-fn parse_float_into_valtree<'tcx>(\n-    num: Symbol,\n-    float_ty: ty::FloatTy,\n-    neg: bool,\n-) -> Option<ty::ValTree<'tcx>> {\n-    parse_float_into_scalar(num, float_ty, neg).map(|s| ty::ValTree::Leaf(s.try_to_int().unwrap()))\n-}"}, {"sha": "3cd521833302f1ebcfd3d297f9a90fb5324cf6e3", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -626,9 +626,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 let _ = write!(self.out, \"{:x}_\", bits);\n             }\n \n-            // HACK(eddyb) because `ty::Const` only supports sized values (for now),\n-            // we can't use dereference the const + supporting `str`, we have to specially\n-            // handle `&str` and include both `&` (\"R\") and `str` (\"e\") prefixes.\n+            // FIXME(valtrees): Remove the special case for `str`\n+            // here and fully support unsized constants.\n             ty::Ref(_, inner_ty, mutbl) => {\n                 self.push(match mutbl {\n                     hir::Mutability::Not => \"R\","}, {"sha": "41ab0e9377df6d12445d8c37acbf2b21ece47d8c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -15,6 +15,8 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_middle::mir;\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -263,13 +265,13 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n }\n \n pub(crate) fn print_evaluated_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<String> {\n-    tcx.const_eval_poly_for_typeck(def_id).ok().and_then(|val| {\n+    tcx.const_eval_poly(def_id).ok().and_then(|val| {\n         let ty = tcx.type_of(def_id);\n         match (val, ty.kind()) {\n             (_, &ty::Ref(..)) => None,\n-            (Some(ty::ValTree::Branch(_)), &ty::Adt(_, _)) => None,\n-            (Some(ty::ValTree::Leaf(_)), _) => {\n-                let const_ = ty::Const::from_value(tcx, val.unwrap(), ty);\n+            (ConstValue::Scalar(_), &ty::Adt(_, _)) => None,\n+            (ConstValue::Scalar(_), _) => {\n+                let const_ = mir::ConstantKind::from_value(val, ty);\n                 Some(print_const_with_custom_print_scalar(tcx, const_))\n             }\n             _ => None,\n@@ -303,19 +305,18 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: ty::Const<'_>) -> String {\n+fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: mir::ConstantKind<'_>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n-    match (ct.kind(), ct.ty().kind()) {\n-        (ty::ConstKind::Value(ty::ValTree::Leaf(int)), ty::Uint(ui)) => {\n+    match (ct, ct.ty().kind()) {\n+        (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Uint(ui)) => {\n             format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n         }\n-        (ty::ConstKind::Value(ty::ValTree::Leaf(int)), ty::Int(i)) => {\n+        (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Int(i)) => {\n             let ty = tcx.lift(ct.ty()).unwrap();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;\n-\n             format!(\n                 \"{}{}\",\n                 format_integer_with_underscore_sep(&sign_extended_data.to_string()),"}, {"sha": "5b1ffc76fe5b3ebb1296d90935af34f4423a5543", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -19,10 +19,10 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n         _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n-        _4 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:13: 7:25\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "342c987343eac911b82231fad01546734c2c1a35", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -22,13 +22,13 @@\n           StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n -         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:12:14: 12:22\n -         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:12:14: 12:22\n--         _6 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+-         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n +         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n +         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n-+         _6 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:12:14: 12:22\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "e131adae2b683c731c91f0195d5d672c71874caf", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -16,10 +16,10 @@\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n           _2 = SizeOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n           _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          _4 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:5: 10:12\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n@@ -56,10 +56,10 @@\n       }\n   \n       bb7 (cleanup): {\n-          _6 = : unsafe fn(Unique::<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}(move (_5.0: std::ptr::Unique<std::boxed::Box<u32>>), move (_5.1: std::alloc::Global)) -> bb6; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          _6 = alloc::alloc::box_free::<Box<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::boxed::Box<u32>>), move (_5.1: std::alloc::Global)) -> bb6; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:11: 10:12\n-                                           // + literal: Const { ty: unsafe fn(Unique<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}, val: Value(ValTree::Branch(..)) }\n+                                           // + literal: Const { ty: unsafe fn(Unique<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb8 (cleanup): {"}, {"sha": "5b2b9f7e3a9ff7c67c8a0f232f97d72ccbf46bb4", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -23,10 +23,10 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _4 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n@@ -71,10 +71,10 @@\n -     }\n - \n -     bb5 (cleanup): {\n--         _6 = : unsafe fn(Unique::<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(ValTree::Branch(..)) }\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n       }\n   }\n   "}, {"sha": "4d06b91e6dc61a87733919cc49623c77a3b93ca2", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -31,10 +31,10 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n         _2 = SizeOf(u32);                // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n         _3 = AlignOf(u32);               // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n-        _4 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:10: 9:21\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "09cf06cacd92085b4e10349c68cf3fe404fa206b", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -8,10 +8,10 @@ fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n     bb0: {\n         Retag([raw] _1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = : for<'r> fn(&'r mut Test) {<Test as Drop>::drop}(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "d7d2cdf9b0c7577c76c0f828b9af23e2b7db1695", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -30,10 +30,10 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        _5 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:14: 11:19\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -49,10 +49,10 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        _10 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:11:21: 11:26\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {"}, {"sha": "18bc1a17c1b50abe24a283d5b59c88e73a2b3c8e", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -30,10 +30,10 @@ fn move_out_from_end() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        _5 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:14: 5:19\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -49,10 +49,10 @@ fn move_out_from_end() -> () {\n         StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        _10 = : unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:5:21: 5:26\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {"}, {"sha": "5dc81b787a9fadab5d3242f6b398c50481a0edc0", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -31,9 +31,9 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n \n     bb6: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = : for<'r> fn(&'r mut Vec::<i32>) {<Vec<i32> as Drop>::drop}(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(ValTree::Branch(..)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n     }\n }"}, {"sha": "0566b802e75b68a010971e5099ce75403508b1ce", "filename": "src/test/ui/consts/issue-77062-large-zst-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n \n fn main() {\n     let _ = &[(); usize::MAX];"}, {"sha": "3277df69c028521e1dd3d0025db6a653c0993ab9", "filename": "src/test/ui/issues/issue-68010-large-zst-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n \n fn main() {\n     println!(\"{}\", [(); usize::MAX].len());"}, {"sha": "da67888827d199a31de66d410b2e5e0c8a4f27ca", "filename": "src/tools/clippy/clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())\n                         .ok()\n-                        .and_then(|val| Some(rustc_middle::mir::ConstantKind::from_value(val, ty)));\n+                        .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty));\n                     if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, c)) {\n                         if let ty::Adt(adt, _) = ty.kind() {\n                             if adt.is_enum() {"}, {"sha": "6709ac13a432f6a2271f7d94dab9fb0747527f53", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773d8b2e15024b2687b2d29972921a3b17816a13/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=773d8b2e15024b2687b2d29972921a3b17816a13", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                         None,\n                     )\n                     .ok()\n-                    .and_then(|val| Some(rustc_middle::mir::ConstantKind::from_value(val, ty)))?;\n+                    .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n                 let result = miri_to_const(self.lcx.tcx, result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n@@ -581,16 +581,6 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-fn try_const_to_constant<'tcx>(tcx: TyCtxt<'tcx>, c: ty::Const<'tcx>) -> Option<Constant> {\n-    match c.kind() {\n-        ty::ConstKind::Value(valtree) => {\n-            let const_val = tcx.valtree_to_const_val((c.ty(), valtree));\n-            miri_to_const(tcx, mir::ConstantKind::from_value(const_val, c.ty()))\n-        },\n-        _ => None,\n-    }\n-}\n-\n pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n     match result {\n@@ -629,8 +619,8 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n         },\n         mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match try_const_to_constant(tcx, *len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F32) => match len.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n+                    Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n@@ -644,8 +634,8 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match try_const_to_constant(tcx, *len) {\n-                    Some(Constant::Int(len)) => alloc\n+                ty::Float(FloatTy::F64) => match len.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n+                    Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()"}]}