{"sha": "8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTRlYzhmNGJkZDg4ZmUzNTkxMWFhMjM2ZWQ2N2RlZWY2YmQ1MjE=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T12:02:55Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T12:06:45Z"}, "message": "doc: Normalize example style\n\nRemove unnecessary `use std::vec::Vec`. Use ``` code blocks\nwith rust as default instead of spelling it out.", "tree": {"sha": "6a94beb5f6d8d295c14457d3fb837a17b398861d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a94beb5f6d8d295c14457d3fb837a17b398861d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "html_url": "https://github.com/rust-lang/rust/commit/8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ec8f4bdd88fe35911aa236ed67deef6bd521/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "url": "https://api.github.com/repos/rust-lang/rust/commits/eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "html_url": "https://github.com/rust-lang/rust/commit/eafcf6ba417973c0d8658b9cfe8c21d809aaa381"}], "stats": {"total": 115, "additions": 53, "deletions": 62}, "files": [{"sha": "0002867495c78b9825263c08a24da25be3f0a05d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 53, "deletions": 62, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ec8f4bdd88fe35911aa236ed67deef6bd521/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ec8f4bdd88fe35911aa236ed67deef6bd521/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "patch": "@@ -35,8 +35,7 @@ pub static PTR_MARKER: u8 = 0;\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// # use std::vec::Vec;\n+/// ```\n /// let mut vec = Vec::new();\n /// vec.push(1i);\n /// vec.push(2i);\n@@ -60,7 +59,7 @@ pub static PTR_MARKER: u8 = 0;\n ///\n /// The `vec!` macro is provided to make initialization more convenient:\n ///\n-/// ```rust\n+/// ```\n /// let mut vec = vec![1i, 2i, 3i];\n /// vec.push(4);\n /// assert_eq!(vec, vec![1, 2, 3, 4]);\n@@ -115,8 +114,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::new();\n     /// ```\n     #[inline]\n@@ -141,8 +139,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n@@ -177,8 +174,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec = Vec::from_fn(3, |idx| idx * 2);\n     /// assert_eq!(vec, vec![0, 2, 4]);\n     /// ```\n@@ -248,7 +244,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2i, 3i, 4i];\n     /// let (even, odd) = vec.partition(|&n| n % 2 == 0);\n     /// assert_eq!(even, vec![2, 4]);\n@@ -277,7 +273,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2i];\n     /// let vec = vec.append([3i, 4i]);\n     /// assert_eq!(vec, vec![1, 2, 3, 4]);\n@@ -292,8 +288,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let slice = [1i, 2, 3];\n     /// let vec = Vec::from_slice(slice);\n     /// ```\n@@ -309,8 +304,7 @@ impl<T: Clone> Vec<T> {\n     /// Creates a `Vec` with `length` copies of `value`.\n     ///\n     /// # Example\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec = Vec::from_elem(3, \"hi\");\n     /// println!(\"{}\", vec); // prints [hi, hi, hi]\n     /// ```\n@@ -335,7 +329,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i];\n     /// vec.push_all([2i, 3, 4]);\n     /// assert_eq!(vec, vec![1, 2, 3, 4]);\n@@ -365,7 +359,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![\"hello\"];\n     /// vec.grow(2, &(\"world\"));\n     /// assert_eq!(vec, vec![\"hello\", \"world\", \"world\"]);\n@@ -389,7 +383,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![\"a\", \"b\", \"c\"];\n     /// vec.grow_set(1, &(\"fill\"), \"d\");\n     /// vec.grow_set(4, &(\"fill\"), \"e\");\n@@ -411,7 +405,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3, 4];\n     /// let (even, odd) = vec.partitioned(|&n| n % 2 == 0);\n     /// assert_eq!(even, vec![2i, 4]);\n@@ -561,8 +555,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n     /// assert_eq!(vec.capacity(), 10);\n     /// ```\n@@ -580,8 +573,7 @@ impl<T> Vec<T> {\n      ///\n      /// # Example\n      ///\n-     /// ```rust\n-     /// # use std::vec::Vec;\n+     /// ```\n      /// let mut vec: Vec<int> = vec![1i];\n      /// vec.reserve_additional(10);\n      /// assert!(vec.capacity() >= 11);\n@@ -606,7 +598,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.reserve(10);\n     /// assert!(vec.capacity() >= 10);\n@@ -624,8 +616,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n     /// vec.reserve_exact(11);\n     /// assert_eq!(vec.capacity(), 11);\n@@ -648,7 +639,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.shrink_to_fit();\n     /// ```\n@@ -680,7 +671,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// assert_eq!(vec.pop(), Some(3));\n     /// assert_eq!(vec, vec![1, 2]);\n@@ -705,7 +696,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2];\n     /// vec.push(3);\n     /// assert_eq!(vec, vec![1, 2, 3]);\n@@ -741,7 +732,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2];\n     /// let vec = vec.append_one(3);\n     /// assert_eq!(vec, vec![1, 2, 3]);\n@@ -759,7 +750,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, vec![1, 2]);\n@@ -780,7 +771,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// fn foo(slice: &mut [int]) {}\n     ///\n     /// let mut vec = vec![1i, 2];\n@@ -802,7 +793,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.move_iter() {\n     ///     // s has type String, not &String\n@@ -848,7 +839,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// #![allow(deprecated)]\n     ///\n     /// let vec = vec![1i, 2, 3];\n@@ -868,7 +859,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// *vec.get_mut(1) = 4;\n     /// assert_eq!(vec, vec![1i, 4, 3]);\n@@ -883,7 +874,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3];\n     /// for num in vec.iter() {\n     ///     println!(\"{}\", *num);\n@@ -900,7 +891,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// for num in vec.mut_iter() {\n     ///     *num = 0;\n@@ -918,7 +909,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = vec![5i, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n     /// assert_eq!(v, vec![1i, 2, 3, 4, 5]);\n@@ -941,7 +932,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice(0, 2) == [1, 2]);\n     /// ```\n@@ -958,7 +949,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.tail() == [2, 3]);\n     /// ```\n@@ -975,7 +966,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.tailn(2) == [3, 4]);\n     /// ```\n@@ -989,7 +980,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.last() == Some(&3));\n     /// ```\n@@ -1003,7 +994,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// *vec.mut_last().unwrap() = 4;\n     /// assert_eq!(vec, vec![1i, 2, 4]);\n@@ -1019,7 +1010,7 @@ impl<T> Vec<T> {\n     /// Returns `None` if `index` is out of bounds.\n     ///\n     /// # Example\n-    /// ```rust\n+    /// ```\n     /// let mut v = vec![\"foo\".to_string(), \"bar\".to_string(),\n     ///                  \"baz\".to_string(), \"qux\".to_string()];\n     ///\n@@ -1051,7 +1042,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.unshift(4);\n     /// assert_eq!(vec, vec![4, 1, 2, 3]);\n@@ -1071,7 +1062,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// assert!(vec.shift() == Some(1));\n     /// assert_eq!(vec, vec![2, 3]);\n@@ -1091,7 +1082,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3];\n     /// vec.insert(1, 4);\n     /// assert_eq!(vec, vec![1, 4, 2, 3]);\n@@ -1125,7 +1116,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = vec![1i, 2, 3];\n     /// assert_eq!(v.remove(1), Some(2));\n     /// assert_eq!(v, vec![1, 3]);\n@@ -1164,7 +1155,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![box 1i];\n     /// vec.push_all_move(vec![box 2, box 3, box 4]);\n     /// assert_eq!(vec, vec![box 1, box 2, box 3, box 4]);\n@@ -1183,7 +1174,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice(0, 2) == [1, 2]);\n     /// ```\n@@ -1201,7 +1192,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_from(2) == [3, 4]);\n     /// ```\n@@ -1218,7 +1209,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_to(2) == [1, 2]);\n     /// ```\n@@ -1239,7 +1230,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n@@ -1270,7 +1261,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = vec![1i, 2, 3];\n     /// v.reverse();\n     /// assert_eq!(v, vec![3i, 2, 1]);\n@@ -1288,7 +1279,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.slice_from(1) == [2, 3]);\n     /// ```\n@@ -1305,7 +1296,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice_to(2) == [1, 2]);\n     /// ```\n@@ -1390,7 +1381,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.retain(|x| x%2 == 0);\n     /// assert_eq!(vec, vec![2, 4]);\n@@ -1421,7 +1412,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![0u, 1];\n     /// vec.grow_fn(3, |i| i);\n     /// assert_eq!(vec, vec![0, 1, 0, 1, 2]);\n@@ -1442,7 +1433,7 @@ impl<T:Ord> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![3i, 1, 2];\n     /// vec.sort();\n     /// assert_eq!(vec, vec![1, 2, 3]);\n@@ -1464,7 +1455,7 @@ impl<T:PartialEq> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.contains(&1));\n     /// ```\n@@ -1479,7 +1470,7 @@ impl<T:PartialEq> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1i, 2, 2, 3, 2];\n     /// vec.dedup();\n     /// assert_eq!(vec, vec![1i, 2, 3, 2]);\n@@ -1574,7 +1565,7 @@ impl<T> Vector<T> for Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// fn foo(slice: &[int]) {}\n     ///\n     /// let vec = vec![1i, 2];"}]}