{"sha": "bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDc5Yjg0OWU5ZGIzMDI0YzhiNWEwNDI2ZTZhMDhhZjIwZWRkMmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-04T19:23:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-04T19:23:05Z"}, "message": "tweak output and tests", "tree": {"sha": "3c6b95222daaed6ecc4430b5b4448009df9b66ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6b95222daaed6ecc4430b5b4448009df9b66ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "html_url": "https://github.com/rust-lang/rust/commit/bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387dcff796406eb55624c61e9f14a3b5c27ad5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/387dcff796406eb55624c61e9f14a3b5c27ad5ff", "html_url": "https://github.com/rust-lang/rust/commit/387dcff796406eb55624c61e9f14a3b5c27ad5ff"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "b875977658794a009f8430d35e14a4a6635ce88a", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -165,7 +165,9 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         } else {\n             struct_error(tcx, message)\n         };\n-        err.span_label(self.span, self.error.to_string());\n+        if !must_error {\n+            err.span_label(self.span, self.error.to_string());\n+        }\n         // Skip the last, which is just the environment of the constant.  The stacktrace\n         // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n         // on constant values."}, {"sha": "a2aaaddf0931c2e4135a76d675a43a3b7ee97c30", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -867,10 +867,7 @@ impl LayoutOf for CodegenCx<'ll, 'tcx> {\n     fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::TyLayout {\n         self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n             .unwrap_or_else(|e| if let LayoutError::SizeOverflow(_) = e {\n-                match span {\n-                    Some(span) => self.sess().span_fatal(span, &e.to_string()),\n-                    None => self.sess().fatal(&e.to_string()),\n-                }\n+                self.sess().span_fatal(span, &e.to_string())\n             } else {\n                 bug!(\"failed to get layout for `{}`: {}\", ty, e)\n             })"}, {"sha": "cc0c733c224103e077e92c5250a8129a1dd7b4ab", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -9,6 +9,7 @@ use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUs\n use rustc::mir::traversal;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n+use syntax_pos::DUMMY_SP;\n use super::FunctionCx;\n use crate::traits::*;\n \n@@ -20,10 +21,13 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     analyzer.visit_body(mir);\n \n-    for (index, ty) in mir.local_decls.iter().map(|l| l.ty).enumerate() {\n+    for (index, (ty, span)) in mir.local_decls.iter()\n+        .map(|l| (l.ty, l.source_info.span))\n+        .enumerate()\n+    {\n         let ty = fx.monomorphize(&ty);\n         debug!(\"local {} has type {:?}\", index, ty);\n-        let layout = fx.cx.layout_of(ty);\n+        let layout = fx.cx.spanned_layout_of(ty, span);\n         if fx.cx.is_backend_immediate(layout) {\n             // These sorts of types are immediates that we can store\n             // in an Value without an alloca.\n@@ -93,10 +97,12 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn process_place(&mut self,\n-                     place_ref: &mir::PlaceRef<'_, 'tcx>,\n-                     context: PlaceContext,\n-                     location: Location) {\n+    fn process_place(\n+        &mut self,\n+        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         let cx = self.fx.cx;\n \n         if let Some(proj) = place_ref.projection {\n@@ -116,12 +122,17 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                     .projection_ty(cx.tcx(), &proj.elem)\n                     .ty;\n                 let elem_ty = self.fx.monomorphize(&elem_ty);\n-                if cx.layout_of(elem_ty).is_zst() {\n+                let span = if let mir::PlaceBase::Local(index) = place_ref.base {\n+                    self.fx.mir.local_decls[*index].source_info.span\n+                } else {\n+                    DUMMY_SP\n+                };\n+                if cx.spanned_layout_of(elem_ty, span).is_zst() {\n                     return;\n                 }\n \n                 if let mir::ProjectionElem::Field(..) = proj.elem {\n-                    let layout = cx.layout_of(base_ty.ty);\n+                    let layout = cx.spanned_layout_of(base_ty.ty, span);\n                     if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n                         // Recurse with the same context, instead of `Projection`,\n                         // potentially stopping at non-operand projections,"}, {"sha": "aa4dfb719f905538f489120340708807353cdd58", "filename": "src/test/ui/consts/issue-55878.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -2,7 +2,7 @@ error[E0080]: the type `[u8; 18446744073709551615]` is too big for the current a\n   --> $SRC_DIR/libcore/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the type `[u8; 18446744073709551615]` is too big for the current architecture\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | \n   ::: $DIR/issue-55878.rs:3:26\n    |"}, {"sha": "8ac15f3156bfdf469bc4fbcc4364ce86ca09f472", "filename": "src/test/ui/huge-enum.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.rs?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -1,16 +1,14 @@\n-// normalize-stderr-test \"std::option::Option<\\[u32; \\d+\\]>\" -> \"TYPE\"\n-// normalize-stderr-test \"\\[u32; \\d+\\]\" -> \"TYPE\"\n-\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n \n #[cfg(target_pointer_width = \"32\")]\n-fn main() {\n-    let big: Option<[u32; (1<<29)-1]> = None;\n-}\n+type BIG = Option<[u32; (1<<29)-1]>;\n \n #[cfg(target_pointer_width = \"64\")]\n+type BIG = Option<[u32; (1<<45)-1]>;\n+\n fn main() {\n-    let big: Option<[u32; (1<<45)-1]> = None;\n+    let big: BIG = None;\n+    //~^ ERROR is too big for the current architecture\n }"}, {"sha": "94349f475e9be5be260786ecae50985d74cd0811", "filename": "src/test/ui/huge-enum.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.stderr?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -1,4 +1,8 @@\n-error: the type `TYPE` is too big for the current architecture\n+error: the type `std::option::Option<[u32; 35184372088831]>` is too big for the current architecture\n+  --> $DIR/huge-enum.rs:12:9\n+   |\n+LL |     let big: BIG = None;\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e120cae7fdd148a822c2b6855de49206d6bb716f", "filename": "src/test/ui/huge-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.rs?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -47,4 +47,6 @@ struct S1M<T> { val: S1k<S1k<T>> }\n \n fn main() {\n     let fat: Option<S1M<S1M<S1M<u32>>>> = None;\n+    //~^ ERROR the type `S32<S1M<S1M<u32>>>` is too big for the current architecture\n+\n }"}, {"sha": "5c2140df481262a1ca1e7637d5b9992b825c7619", "filename": "src/test/ui/huge-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fhuge-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.stderr?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -1,4 +1,8 @@\n error: the type `SXX<SXX<SXX<u32>>>` is too big for the current architecture\n+  --> $DIR/huge-struct.rs:49:9\n+   |\n+LL |     let fat: Option<SXX<SXX<SXX<u32>>>> = None;\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "69626d4bc7a9e73b0090597f1f1c9ee25d51daea", "filename": "src/test/ui/issues/issue-56762.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdd79b849e9db3024c8b5a0426e6a08af20edd2d/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr?ref=bdd79b849e9db3024c8b5a0426e6a08af20edd2d", "patch": "@@ -2,13 +2,13 @@ error[E0080]: the type `[u8; 2305843009213693951]` is too big for the current ar\n   --> $DIR/issue-56762.rs:19:1\n    |\n LL | static MY_TOO_BIG_ARRAY_1: TooBigArray = TooBigArray::new();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the type `[u8; 2305843009213693951]` is too big for the current architecture\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: the type `[u8; 2305843009213693951]` is too big for the current architecture\n   --> $DIR/issue-56762.rs:21:1\n    |\n LL | static MY_TOO_BIG_ARRAY_2: [u8; HUGE_SIZE] = [0x00; HUGE_SIZE];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the type `[u8; 2305843009213693951]` is too big for the current architecture\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}