{"sha": "58d685ecb3d4711cf3d21af502ccf51e63ae289c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDY4NWVjYjNkNDcxMWNmM2QyMWFmNTAyY2NmNTFlNjNhZTI4OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-15T10:56:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-15T10:56:35Z"}, "message": "Auto merge of #86692 - dns2utf8:parallelize_rustdoc-gui_tests, r=GuillaumeGomez\n\nRun rustdoc-gui tests in parallel\n\nI hid the passing tests and only show the failed ones in alphabetical order:\n![image](https://user-images.githubusercontent.com/739070/123663020-84e63100-d825-11eb-9b35-0a8c30cd219c.png)\n\nAlso this PR cuts down the execution time from ~40 to ~9 seconds", "tree": {"sha": "6dfa0efa5a81265f929e49becfdf8b55e936c9bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dfa0efa5a81265f929e49becfdf8b55e936c9bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d685ecb3d4711cf3d21af502ccf51e63ae289c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d685ecb3d4711cf3d21af502ccf51e63ae289c", "html_url": "https://github.com/rust-lang/rust/commit/58d685ecb3d4711cf3d21af502ccf51e63ae289c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d685ecb3d4711cf3d21af502ccf51e63ae289c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe5fd0902b55546dc38a15f01effbb248e8b222", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe5fd0902b55546dc38a15f01effbb248e8b222", "html_url": "https://github.com/rust-lang/rust/commit/dfe5fd0902b55546dc38a15f01effbb248e8b222"}, {"sha": "7f2b52b1d6b7d8bc1accf5dbb99d5281dc69ae07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2b52b1d6b7d8bc1accf5dbb99d5281dc69ae07", "html_url": "https://github.com/rust-lang/rust/commit/7f2b52b1d6b7d8bc1accf5dbb99d5281dc69ae07"}], "stats": {"total": 126, "additions": 113, "deletions": 13}, "files": [{"sha": "4e77d27d399c2065d26c33e0403e88c102735f32", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 113, "deletions": 13, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/58d685ecb3d4711cf3d21af502ccf51e63ae289c/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/58d685ecb3d4711cf3d21af502ccf51e63ae289c/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=58d685ecb3d4711cf3d21af502ccf51e63ae289c", "patch": "@@ -5,6 +5,7 @@\n // ```\n const fs = require(\"fs\");\n const path = require(\"path\");\n+const os = require('os');\n const {Options, runTest} = require('browser-ui-test');\n \n function showHelp() {\n@@ -70,12 +71,49 @@ function parseOptions(args) {\n     return null;\n }\n \n+/// Print single char status information without \\n\n+function char_printer(n_tests) {\n+    const max_per_line = 10;\n+    let current = 0;\n+    return {\n+        successful: function() {\n+            current += 1;\n+            if (current % max_per_line === 0) {\n+                process.stdout.write(`. (${current}/${n_tests})${os.EOL}`);\n+            } else {\n+                process.stdout.write(\".\");\n+            }\n+        },\n+        erroneous: function() {\n+            current += 1;\n+            if (current % max_per_line === 0) {\n+                process.stderr.write(`F (${current}/${n_tests})${os.EOL}`);\n+            } else {\n+                process.stderr.write(\"F\");\n+            }\n+        },\n+        finish: function() {\n+            const spaces = \" \".repeat(max_per_line - (current % max_per_line));\n+            process.stdout.write(`${spaces} (${current}/${n_tests})${os.EOL}${os.EOL}`);\n+        },\n+    };\n+}\n+\n+/// Sort array by .file_name property\n+function by_filename(a, b) {\n+    return a.file_name - b.file_name;\n+}\n+\n async function main(argv) {\n     let opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         process.exit(1);\n     }\n \n+    // Print successful tests too\n+    let debug = false;\n+    // Run tests in sequentially\n+    let no_headless = false;\n     const options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n@@ -84,13 +122,15 @@ async function main(argv) {\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n         ];\n         if (opts[\"debug\"]) {\n+            debug = true;\n             args.push(\"--debug\");\n         }\n         if (opts[\"show_text\"]) {\n             args.push(\"--show-text\");\n         }\n         if (opts[\"no_headless\"]) {\n             args.push(\"--no-headless\");\n+            no_headless = true;\n         }\n         options.parseArguments(args);\n     } catch (error) {\n@@ -101,25 +141,85 @@ async function main(argv) {\n     let failed = false;\n     let files;\n     if (opts[\"files\"].length === 0) {\n-        files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+        files = fs.readdirSync(opts[\"tests_folder\"]);\n     } else {\n-        files = opts[\"files\"].filter(file => path.extname(file) == \".goml\");\n+        files = opts[\"files\"];\n+    }\n+    files = files.filter(file => path.extname(file) == \".goml\");\n+    if (files.length === 0) {\n+        console.error(\"rustdoc-gui: No test selected\");\n+        process.exit(2);\n     }\n-\n     files.sort();\n-    for (var i = 0; i < files.length; ++i) {\n-        const testPath = path.join(opts[\"tests_folder\"], files[i]);\n-        await runTest(testPath, options).then(out => {\n-            const [output, nb_failures] = out;\n-            console.log(output);\n-            if (nb_failures > 0) {\n+\n+    console.log(`Running ${files.length} rustdoc-gui tests...`);\n+    process.setMaxListeners(files.length + 1);\n+    let tests = [];\n+    let results = {\n+        successful: [],\n+        failed: [],\n+        errored: [],\n+    };\n+    const status_bar = char_printer(files.length);\n+    for (let i = 0; i < files.length; ++i) {\n+        const file_name = files[i];\n+        const testPath = path.join(opts[\"tests_folder\"], file_name);\n+        tests.push(\n+            runTest(testPath, options)\n+            .then(out => {\n+                const [output, nb_failures] = out;\n+                results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n+                    file_name: file_name,\n+                    output: output,\n+                });\n+                if (nb_failures > 0) {\n+                    status_bar.erroneous()\n+                    failed = true;\n+                } else {\n+                    status_bar.successful()\n+                }\n+            })\n+            .catch(err => {\n+                results.errored.push({\n+                    file_name: file_name,\n+                    output: err,\n+                });\n+                status_bar.erroneous();\n                 failed = true;\n-            }\n-        }).catch(err => {\n-            console.error(err);\n-            failed = true;\n+            })\n+        );\n+        if (no_headless) {\n+            await tests[i];\n+        }\n+    }\n+    if (!no_headless) {\n+        await Promise.all(tests);\n+    }\n+    status_bar.finish();\n+\n+    if (debug) {\n+        results.successful.sort(by_filename);\n+        results.successful.forEach(r => {\n+            console.log(r.output);\n         });\n     }\n+\n+    if (results.failed.length > 0) {\n+        console.log(\"\");\n+        results.failed.sort(by_filename);\n+        results.failed.forEach(r => {\n+            console.log(r.output);\n+        });\n+    }\n+    if (results.errored.length > 0) {\n+        console.log(os.EOL);\n+        // print run errors on the bottom so developers see them better\n+        results.errored.sort(by_filename);\n+        results.errored.forEach(r => {\n+            console.error(r.output);\n+        });\n+    }\n+\n     if (failed) {\n         process.exit(1);\n     }"}]}