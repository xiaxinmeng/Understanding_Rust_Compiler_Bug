{"sha": "c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWQxY2UwMzMzMmUyYzRhZmZiMGFkMDRiNTAzNDE1Y2E4Y2IxZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T16:04:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T16:04:39Z"}, "message": "Rustfmt", "tree": {"sha": "1414e6f89b341077a2165ec544cd6132ca364aab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1414e6f89b341077a2165ec544cd6132ca364aab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "html_url": "https://github.com/rust-lang/rust/commit/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d331758f6db35418259eb0a332b81127c87002bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d331758f6db35418259eb0a332b81127c87002bd", "html_url": "https://github.com/rust-lang/rust/commit/d331758f6db35418259eb0a332b81127c87002bd"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "84955d4454414187220699e8e31646e7cc958c64", "filename": "src/constant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "patch": "@@ -11,7 +11,11 @@ pub struct ConstantCx {\n }\n \n impl ConstantCx {\n-    pub fn finalize<'a, 'tcx: 'a, B: Backend>(mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, module: &mut Module<B>) {\n+    pub fn finalize<'a, 'tcx: 'a, B: Backend>(\n+        mut self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        module: &mut Module<B>,\n+    ) {\n         println!(\"todo allocs: {:?}\", self.todo_allocs);\n         define_all_allocs(tcx, module, &mut self);\n         println!(\"done {:?}\", self.done);\n@@ -111,11 +115,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     let alloc = fx.tcx.const_value_to_allocation(const_);\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n-    let data_id = get_global_for_alloc_id(\n-        fx.module,\n-        fx.constants,\n-        alloc_id,\n-    );\n+    let data_id = get_global_for_alloc_id(fx.module, fx.constants, alloc_id);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     // TODO: does global_value return a ptr of a val?\n     let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n@@ -143,7 +143,7 @@ fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n     data_id\n }\n \n-fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a> (\n+fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n@@ -196,4 +196,4 @@ fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T>\n     } else {\n         None\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7781de1fb3e33aec043a56a528837eca95d2ac20", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "patch": "@@ -68,7 +68,7 @@ mod prelude {\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable, TypeVariants,\n     };\n-    pub use rustc_data_structures::{indexed_vec::Idx, sync::Lrc, fx::FxHashMap};\n+    pub use rustc_data_structures::{fx::FxHashMap, indexed_vec::Idx, sync::Lrc};\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::codemap::DUMMY_SP;\n@@ -258,7 +258,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut log = ::std::fs::File::create(\"../target/log.txt\").unwrap();\n \n             let before = ::std::time::Instant::now();\n-            let mono_items = collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0;\n+            let mono_items =\n+                collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager)\n+                    .0;\n \n             // TODO: move to the end of this function when compiling libcore doesn't have unimplemented stuff anymore\n             save_incremental(tcx);"}]}