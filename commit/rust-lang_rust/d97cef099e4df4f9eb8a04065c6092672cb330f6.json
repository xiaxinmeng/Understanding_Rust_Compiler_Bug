{"sha": "d97cef099e4df4f9eb8a04065c6092672cb330f6", "node_id": "C_kwDOAAsO6NoAKGQ5N2NlZjA5OWU0ZGY0ZjllYjhhMDQwNjVjNjA5MjY3MmNiMzMwZjY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-06T00:09:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T00:09:34Z"}, "message": "Rollup merge of #111251 - mj10021:issue-109502-follow-up, r=oli-obk\n\nIssue 109502 follow up, remove unnecessary Vec::new() from compile_test()\n\nAs mentioned in comment on PR #110773 , adding a separate function to pass the test passes into the `dump-mir` is a bit nicer", "tree": {"sha": "0b21527ba26ed1b7c438f6f8d21a9e814f7a5bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b21527ba26ed1b7c438f6f8d21a9e814f7a5bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97cef099e4df4f9eb8a04065c6092672cb330f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVZq+CRBK7hj4Ov3rIwAA6dgIABHvZe4FPwBzcDjoKWFaI3r+\nzlg2IYZEziooN5pjZYIMiyQkuTrVaTPpWBjojzLoU1AYazM/+Vh+d6te/H2WrgXP\nxyZK97zJncj9EFKTveDejbhmkXx135Iogfx92cicSMglUTfiwy+8jTzivoIQsZ9v\nrlL6tF1b/H6Ui9U4Gdez2+LIfdsV9rvdtYH3V/hkmveQPtMGbrQQ7DJX9AqMF2jn\n0LtAKfUWF9e3SaKAD7tsXAp3lRMMHPmFEjxUiws7XHhC9PPXb72zl4W2ZwdcH9s2\nVwKuuWRS9o4FOqF0FDO15l3wdPOOSX484A/AJsrflSw4l2LKn66BxnqCfXUle40=\n=kbNr\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b21527ba26ed1b7c438f6f8d21a9e814f7a5bd1\nparent ce71f570f4ef9ba2355fef6b6a46436680ac544c\nparent 2da54a9dc61cb72887ab6af9e90853cfb8270889\nauthor Yuki Okushi <jtitor@2k36.org> 1683331774 +0900\ncommitter GitHub <noreply@github.com> 1683331774 +0900\n\nRollup merge of #111251 - mj10021:issue-109502-follow-up, r=oli-obk\n\nIssue 109502 follow up, remove unnecessary Vec::new() from compile_test()\n\nAs mentioned in comment on PR #110773 , adding a separate function to pass the test passes into the `dump-mir` is a bit nicer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97cef099e4df4f9eb8a04065c6092672cb330f6", "html_url": "https://github.com/rust-lang/rust/commit/d97cef099e4df4f9eb8a04065c6092672cb330f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97cef099e4df4f9eb8a04065c6092672cb330f6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce71f570f4ef9ba2355fef6b6a46436680ac544c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce71f570f4ef9ba2355fef6b6a46436680ac544c", "html_url": "https://github.com/rust-lang/rust/commit/ce71f570f4ef9ba2355fef6b6a46436680ac544c"}, {"sha": "2da54a9dc61cb72887ab6af9e90853cfb8270889", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da54a9dc61cb72887ab6af9e90853cfb8270889", "html_url": "https://github.com/rust-lang/rust/commit/2da54a9dc61cb72887ab6af9e90853cfb8270889"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "4ede46037894b1e20a0f7bffdb637e912abe44b4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d97cef099e4df4f9eb8a04065c6092672cb330f6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97cef099e4df4f9eb8a04065c6092672cb330f6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d97cef099e4df4f9eb8a04065c6092672cb330f6", "patch": "@@ -319,8 +319,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_cfail_test(&self) {\n         let pm = self.pass_mode();\n-        let proc_res =\n-            self.compile_test(WillExecute::No, self.should_emit_metadata(pm), Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, self.should_emit_metadata(pm));\n         self.check_if_test_should_compile(&proc_res, pm);\n         self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n@@ -348,7 +347,7 @@ impl<'test> TestCx<'test> {\n     fn run_rfail_test(&self) {\n         let pm = self.pass_mode();\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm), Vec::new());\n+        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm));\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -396,7 +395,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_cpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n-        let proc_res = self.compile_test(WillExecute::No, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -411,7 +410,7 @@ impl<'test> TestCx<'test> {\n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -441,7 +440,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         let should_run = self.run_if_enabled();\n-        let mut proc_res = self.compile_test(should_run, Emit::None, Vec::new());\n+        let mut proc_res = self.compile_test(should_run, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -687,7 +686,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -807,7 +806,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compiler_run_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compiler_run_result = self.compile_test(should_run, Emit::None);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -1044,7 +1043,7 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1483,7 +1482,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn compile_test(&self, will_execute: WillExecute, emit: Emit, passes: Vec<String>) -> ProcRes {\n+    fn compile_test(&self, will_execute: WillExecute, emit: Emit) -> ProcRes {\n+        self.compile_test_general(will_execute, emit, self.props.local_pass_mode(), Vec::new())\n+    }\n+\n+    fn compile_test_with_passes(\n+        &self,\n+        will_execute: WillExecute,\n+        emit: Emit,\n+        passes: Vec<String>,\n+    ) -> ProcRes {\n         self.compile_test_general(will_execute, emit, self.props.local_pass_mode(), passes)\n     }\n \n@@ -2791,7 +2799,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test(WillExecute::No, Emit::None, Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -3340,7 +3348,7 @@ impl<'test> TestCx<'test> {\n         let pm = self.pass_mode();\n         let should_run = self.should_run(pm);\n         let emit_metadata = self.should_emit_metadata(pm);\n-        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n         self.check_if_test_should_compile(&proc_res, pm);\n \n         // if the user specified a format in the ui test\n@@ -3523,7 +3531,7 @@ impl<'test> TestCx<'test> {\n         let emit_metadata = self.should_emit_metadata(pm);\n         let passes = self.get_passes();\n \n-        let proc_res = self.compile_test(should_run, emit_metadata, passes);\n+        let proc_res = self.compile_test_with_passes(should_run, emit_metadata, passes);\n         self.check_mir_dump();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);"}]}