{"sha": "47b74cadf9774f624ff13f8c7929c66be8247fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Yjc0Y2FkZjk3NzRmNjI0ZmYxM2Y4Yzc5MjljNjZiZTgyNDdmYzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T18:24:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T18:24:22Z"}, "message": "Merge #7970\n\n7970: Fix incorrect diagnostics for failing built in macros r=jonas-schievink a=brandondong\n\n**Reproduction:**\r\n1. Use a built in macro in such a way that rust-analyzer fails to expand it. For example:\r\n\r\n**lib.rs**\r\n```\r\ninclude!(\"<valid file but without a .rs extension so it is not indexed by rust-analyzer>\");\r\n```\r\n2. rust-analyzer highlights the macro call and says the macro itself cannot be resolved even though include! is in the standard library (unresolved-macro-call diagnostic).\r\n3. No macro-error diagnostic is raised.\r\n\r\n**Root cause for incorrect unresolved-macro-call diagnostic:**\r\n1. collector:collect_macro_call is able to resolve include! in legacy scope but the expansion fails. Therefore, it's pushed into unexpanded_macros to be retried with module scope.\r\n2. include! fails at the resolution step in collector:resolve_macros now that it's using module scope. Therefore, it's retained in unexpanded_macros.\r\n3. Finally, collector:finish tries resolving the remaining unexpanded macros but only with module scope. include! again fails at the resolution step so a diagnostic is created.\r\n\r\n**Root cause for missing macro-error diagnostic:**\r\n1. In collector:resolve_macros, directive.legacy is None since eager expansion failed in collector:collect_macro_call. The macro_call_as_call_id fails to resolve since we're retrying in module scope. Therefore, collect_macro_expansion is not called for the macro and no macro-error diagnostic is generated.\r\n\r\n**Fix:**\r\n- In collector:collect_macro_call, do not add failing built-in macros to the unexpanded_macros list and immediately raise the macro-error diagnostic. This is in contrast to lazy macros which are resolved in collector::resolve_macros and later expanded in collect_macro_expansion where a macro-error diagnostic may be raised.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\nCo-authored-by: brandondong <brandondong604@hotmail.com>", "tree": {"sha": "6dc42e70ef3635bb53354b4e8991f517eb9b389d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc42e70ef3635bb53354b4e8991f517eb9b389d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b74cadf9774f624ff13f8c7929c66be8247fc8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT6ZWCRBK7hj4Ov3rIwAAdHIIAEEJ8oNXGh8bVNchrysPMAqj\nHpiW85DUR8lgIB52JZmUJwdC2PihiFrGRX1xLDZQciQM2zDl97qPG4CFOfeYNwwA\nRveyeodKDOHZzx+7kjo/WuA+pHE+jde2i+k7NtQJpEmQsAQqp6T1xGCNyeCuxolO\nyK0QXhqqGdntD0sCn2gDJrFSjEIQlsITAjgOqahqQAl3pb+ubNJ6P0ccsFk3a7g/\nfyqLnSzwVBqUsF3/XA7lza93ilIZEIVNLAAnk+jHNAr+OP1LZttNKpJ5garqe2Hr\ns4r3wydH+om/6/zbbvjG0zW7lvuvtQ7v6LrBbQTwC3BetT2Bp+Vu6jJZlOWTMWg=\n=g4rk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dc42e70ef3635bb53354b4e8991f517eb9b389d\nparent e24453c5ee46546b0852c15500d51f77b10a7a6f\nparent ebb10da563f1c3a0ebf48c1022bceb9641b6e964\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615832662 +0000\ncommitter GitHub <noreply@github.com> 1615832662 +0000\n\nMerge #7970\n\n7970: Fix incorrect diagnostics for failing built in macros r=jonas-schievink a=brandondong\n\n**Reproduction:**\r\n1. Use a built in macro in such a way that rust-analyzer fails to expand it. For example:\r\n\r\n**lib.rs**\r\n```\r\ninclude!(\"<valid file but without a .rs extension so it is not indexed by rust-analyzer>\");\r\n```\r\n2. rust-analyzer highlights the macro call and says the macro itself cannot be resolved even though include! is in the standard library (unresolved-macro-call diagnostic).\r\n3. No macro-error diagnostic is raised.\r\n\r\n**Root cause for incorrect unresolved-macro-call diagnostic:**\r\n1. collector:collect_macro_call is able to resolve include! in legacy scope but the expansion fails. Therefore, it's pushed into unexpanded_macros to be retried with module scope.\r\n2. include! fails at the resolution step in collector:resolve_macros now that it's using module scope. Therefore, it's retained in unexpanded_macros.\r\n3. Finally, collector:finish tries resolving the remaining unexpanded macros but only with module scope. include! again fails at the resolution step so a diagnostic is created.\r\n\r\n**Root cause for missing macro-error diagnostic:**\r\n1. In collector:resolve_macros, directive.legacy is None since eager expansion failed in collector:collect_macro_call. The macro_call_as_call_id fails to resolve since we're retrying in module scope. Therefore, collect_macro_expansion is not called for the macro and no macro-error diagnostic is generated.\r\n\r\n**Fix:**\r\n- In collector:collect_macro_call, do not add failing built-in macros to the unexpanded_macros list and immediately raise the macro-error diagnostic. This is in contrast to lazy macros which are resolved in collector::resolve_macros and later expanded in collect_macro_expansion where a macro-error diagnostic may be raised.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\nCo-authored-by: brandondong <brandondong604@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b74cadf9774f624ff13f8c7929c66be8247fc8", "html_url": "https://github.com/rust-lang/rust/commit/47b74cadf9774f624ff13f8c7929c66be8247fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b74cadf9774f624ff13f8c7929c66be8247fc8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24453c5ee46546b0852c15500d51f77b10a7a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24453c5ee46546b0852c15500d51f77b10a7a6f", "html_url": "https://github.com/rust-lang/rust/commit/e24453c5ee46546b0852c15500d51f77b10a7a6f"}, {"sha": "ebb10da563f1c3a0ebf48c1022bceb9641b6e964", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb10da563f1c3a0ebf48c1022bceb9641b6e964", "html_url": "https://github.com/rust-lang/rust/commit/ebb10da563f1c3a0ebf48c1022bceb9641b6e964"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "7188bb299d2b78bf8c1cc60bdbb64caed9a1cff0", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=47b74cadf9774f624ff13f8c7929c66be8247fc8", "patch": "@@ -97,7 +97,7 @@ impl Diagnostic for UnresolvedImport {\n \n // Diagnostic: unresolved-macro-call\n //\n-// This diagnostic is triggered if rust-analyzer is unable to resolove path to a\n+// This diagnostic is triggered if rust-analyzer is unable to resolve the path to a\n // macro in a macro invocation.\n #[derive(Debug)]\n pub struct UnresolvedMacroCall {"}, {"sha": "81cf652b0df6c66f44921d1323ce83acf81ad2e8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=47b74cadf9774f624ff13f8c7929c66be8247fc8", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n     builtin_macro::find_builtin_macro,\n     name::{AsName, Name},\n     proc_macro::ProcMacroExpander,\n-    HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n+    HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use hir_expand::{InFile, MacroCallLoc};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -1455,7 +1455,8 @@ impl ModCollector<'_, '_> {\n         let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n \n         // Case 1: try to resolve in legacy scope and expand macro_rules\n-        if let Ok(Ok(macro_call_id)) = macro_call_as_call_id(\n+        let mut error = None;\n+        match macro_call_as_call_id(\n             &ast_id,\n             self.def_collector.db,\n             self.def_collector.def_map.krate,\n@@ -1468,16 +1469,28 @@ impl ModCollector<'_, '_> {\n                     )\n                 })\n             },\n-            &mut |_err| (),\n+            &mut |err| error = Some(err),\n         ) {\n-            self.def_collector.unexpanded_macros.push(MacroDirective {\n-                module_id: self.module_id,\n-                ast_id,\n-                legacy: Some(macro_call_id),\n-                depth: self.macro_depth + 1,\n-            });\n+            Ok(Ok(macro_call_id)) => {\n+                self.def_collector.unexpanded_macros.push(MacroDirective {\n+                    module_id: self.module_id,\n+                    ast_id,\n+                    legacy: Some(macro_call_id),\n+                    depth: self.macro_depth + 1,\n+                });\n \n-            return;\n+                return;\n+            }\n+            Ok(Err(_)) => {\n+                // Built-in macro failed eager expansion.\n+                self.def_collector.def_map.diagnostics.push(DefDiagnostic::macro_error(\n+                    self.module_id,\n+                    MacroCallKind::FnLike(ast_id.ast_id),\n+                    error.unwrap().to_string(),\n+                ));\n+                return;\n+            }\n+            Err(UnresolvedMacro) => (),\n         }\n \n         // Case 2: resolve in module scope, expand during name resolution."}, {"sha": "c22ef46fd659f774cc95b27afd3db2644a93630a", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b74cadf9774f624ff13f8c7929c66be8247fc8/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=47b74cadf9774f624ff13f8c7929c66be8247fc8", "patch": "@@ -155,3 +155,48 @@ fn inactive_via_cfg_attr() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn unresolved_legacy_scope_macro() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          macro_rules! m { () => {} }\n+\n+          m!();\n+          m2!();\n+        //^^^^^^ unresolved macro call\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn unresolved_module_scope_macro() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          mod mac {\n+            #[macro_export]\n+            macro_rules! m { () => {} }\n+          }\n+\n+          self::m!();\n+          self::m2!();\n+        //^^^^^^^^^^^^ unresolved macro call\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn builtin_macro_fails_expansion() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          #[rustc_builtin_macro]\n+          macro_rules! include { () => {} }\n+\n+          include!(\"doesntexist\");\n+        //^^^^^^^^^^^^^^^^^^^^^^^^ could not convert tokens\n+        \"#,\n+    );\n+}"}]}