{"sha": "9e86a434a770b453ded7dabd3203efc9c61eb2e5", "node_id": "C_kwDOAAsO6NoAKDllODZhNDM0YTc3MGI0NTNkZWQ3ZGFiZDMyMDNlZmM5YzYxZWIyZTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-29T13:46:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-29T13:46:30Z"}, "message": "Rollup merge of #92274 - woppopo:const_deallocate, r=oli-obk\n\nAdd `intrinsics::const_deallocate`\n\nTracking issue: #79597\nRelated: #91884\n\nThis allows deallocation of a memory allocated by `intrinsics::const_allocate`. At the moment, this can be only used to reduce memory usage, but in the future this may be useful to detect memory leaks (If an allocated memory remains after evaluation, raise an error...?).", "tree": {"sha": "9debcae2fcad4bc105599636e6c65d1b3a5173d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9debcae2fcad4bc105599636e6c65d1b3a5173d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e86a434a770b453ded7dabd3203efc9c61eb2e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh9UU2CRBK7hj4Ov3rIwAAJf4IAA9Pi6wpR0dfvpQTQQ2oocRf\nemQTnP8LlUUC9k4gIQtGa1Gh6rfkjJ2JVbSjkmD93UWOtMJ6ism4DHpDkU7hL/+v\nM7n2A8CmdfbTNtFfyVCqpwCh6kqMDBtPtyaS2HU3QQNa39qzzgwgAYhSytW4RmVX\n7uqPinedmB6SvHCxymrMuCXYLmOmOWxClsqwqFVTk+zEn9sZN/WixFbZqiupJEHP\nwKSJLDQAmYAJlNAi3Ox3nI6Zji8LSDw4KsJ3PWpxMWe7VPhsoFI+/Nmx6CvoQZsy\nQNX7wBYd4/Y0zghU46/TqYcGlvI785tAZN+7l8WbMMRFwuZlZ+iS1u3XC1QkWWk=\n=/sAM\n-----END PGP SIGNATURE-----\n", "payload": "tree 9debcae2fcad4bc105599636e6c65d1b3a5173d5\nparent 11898a56c202076a3506928a11fcf402f6e1af3a\nparent 9728cc4e26c936e17a107ceeccf029bde4e7e1f0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643463990 +0100\ncommitter GitHub <noreply@github.com> 1643463990 +0100\n\nRollup merge of #92274 - woppopo:const_deallocate, r=oli-obk\n\nAdd `intrinsics::const_deallocate`\n\nTracking issue: #79597\nRelated: #91884\n\nThis allows deallocation of a memory allocated by `intrinsics::const_allocate`. At the moment, this can be only used to reduce memory usage, but in the future this may be useful to detect memory leaks (If an allocated memory remains after evaluation, raise an error...?).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e86a434a770b453ded7dabd3203efc9c61eb2e5", "html_url": "https://github.com/rust-lang/rust/commit/9e86a434a770b453ded7dabd3203efc9c61eb2e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e86a434a770b453ded7dabd3203efc9c61eb2e5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11898a56c202076a3506928a11fcf402f6e1af3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11898a56c202076a3506928a11fcf402f6e1af3a", "html_url": "https://github.com/rust-lang/rust/commit/11898a56c202076a3506928a11fcf402f6e1af3a"}, {"sha": "9728cc4e26c936e17a107ceeccf029bde4e7e1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9728cc4e26c936e17a107ceeccf029bde4e7e1f0", "html_url": "https://github.com/rust-lang/rust/commit/9728cc4e26c936e17a107ceeccf029bde4e7e1f0"}], "stats": {"total": 278, "additions": 274, "deletions": 4}, "files": [{"sha": "c654232c10a5755c8bf3aa8383d36509f27e5d9a", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -369,6 +369,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n \n+            sym::const_allocate => {\n+                // returns a null pointer at runtime.\n+                bx.const_null(bx.type_i8p())\n+            }\n+\n+            sym::const_deallocate => {\n+                // nop at runtime.\n+                return;\n+            }\n+\n             // This requires that atomic intrinsics follow a specific naming pattern:\n             // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n             name if name_str.starts_with(\"atomic_\") => {"}, {"sha": "89717b75f12815abea8069f2d36d695b7ff3b205", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -347,6 +347,33 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 )?;\n                 ecx.write_pointer(ptr, dest)?;\n             }\n+            sym::const_deallocate => {\n+                let ptr = ecx.read_pointer(&args[0])?;\n+                let size = ecx.read_scalar(&args[1])?.to_machine_usize(ecx)?;\n+                let align = ecx.read_scalar(&args[2])?.to_machine_usize(ecx)?;\n+\n+                let size = Size::from_bytes(size);\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n+                };\n+\n+                // If an allocation is created in an another const,\n+                // we don't deallocate it.\n+                let (alloc_id, _, _) = ecx.memory.ptr_get_alloc(ptr)?;\n+                let is_allocated_in_another_const = matches!(\n+                    ecx.tcx.get_global_alloc(alloc_id),\n+                    Some(interpret::GlobalAlloc::Memory(_))\n+                );\n+\n+                if !is_allocated_in_another_const {\n+                    ecx.memory.deallocate(\n+                        ptr,\n+                        Some((size, align)),\n+                        interpret::MemoryKind::Machine(MemoryKind::Heap),\n+                    )?;\n+                }\n+            }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!(\n                     \"calling intrinsic `{}`\","}, {"sha": "9fba9c77d0711bbdbab279610951a4b086c41f38", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -461,6 +461,7 @@ symbols! {\n         const_async_blocks,\n         const_compare_raw_pointers,\n         const_constructor,\n+        const_deallocate,\n         const_eval_limit,\n         const_eval_select,\n         const_eval_select_ct,"}, {"sha": "74f6f50d41289c83fb359418989117fb98ebe92d", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -297,6 +297,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::const_allocate => {\n                 (0, vec![tcx.types.usize, tcx.types.usize], tcx.mk_mut_ptr(tcx.types.u8))\n             }\n+            sym::const_deallocate => (\n+                0,\n+                vec![tcx.mk_mut_ptr(tcx.types.u8), tcx.types.usize, tcx.types.usize],\n+                tcx.mk_unit(),\n+            ),\n \n             sym::ptr_offset_from => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)"}, {"sha": "b5228397f0a9990f10cd245c838c307dec120cfe", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -1914,10 +1914,31 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n \n-    /// Allocate at compile time. Should not be called at runtime.\n+    /// Allocates a block of memory at compile time.\n+    /// At runtime, just returns a null pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// - The `align` argument must be a power of two.\n+    ///    - At compile time, a compile error occurs if this constraint is violated.\n+    ///    - At runtime, it is not checked.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n \n+    /// Deallocates a memory which allocated by `intrinsics::const_allocate` at compile time.\n+    /// At runtime, does nothing.\n+    ///\n+    /// # Safety\n+    ///\n+    /// - The `align` argument must be a power of two.\n+    ///    - At compile time, a compile error occurs if this constraint is violated.\n+    ///    - At runtime, it is not checked.\n+    /// - If the `ptr` is created in an another const, this intrinsic doesn't deallocate it.\n+    /// - If the `ptr` is pointing to a local variable, this intrinsic doesn't deallocate it.\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn const_deallocate(ptr: *mut u8, size: usize, align: usize);\n+\n     /// Determines whether the raw bytes of the two values are equal.\n     ///\n     /// This is particularly handy for arrays, since it allows things like just"}, {"sha": "df940de479532a6ad55d3b96856a58b08aa8961f", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -80,3 +80,25 @@ fn test_hints_in_const_contexts() {\n         assert!(42u32 == core::hint::black_box(42u32));\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_const_allocate_at_runtime() {\n+    use core::intrinsics::const_allocate;\n+    unsafe {\n+        assert!(const_allocate(4, 4).is_null());\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_const_deallocate_at_runtime() {\n+    use core::intrinsics::const_deallocate;\n+    const X: &u32 = &42u32;\n+    let x = &0u32;\n+    unsafe {\n+        const_deallocate(X as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(x as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(core::ptr::null_mut(), 1, 1); // nop\n+    }\n+}"}, {"sha": "1d49d7e47cb69e7ca8ddfb29b425b2be1f6240e7", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -13,6 +13,7 @@\n #![feature(const_bool_to_option)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_assume_init_read)]"}, {"sha": "ac9e8b64b48972476ffa83557b561f4032b8afb9", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -6,11 +6,10 @@ use std::intrinsics;\n const FOO: i32 = foo();\n const fn foo() -> i32 {\n     unsafe {\n-        let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+        let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n         //~^ error: evaluation of constant value failed\n     }\n     1\n-\n }\n \n fn main() {}"}, {"sha": "2628a78455c76b3f5a5f3100852c11807ecb8a26", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | const FOO: i32 = foo();\n    |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n ...\n-LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2"}, {"sha": "407e69d41a0fa2c8073533c52717afdca0da773e", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(inline_const)]\n+\n+use std::intrinsics;\n+\n+struct ZST;\n+\n+fn main() {\n+    const {\n+        unsafe {\n+            let _ = intrinsics::const_allocate(0, 0) as *mut ZST;\n+        }\n+    }\n+}"}, {"sha": "aac90cd54cc413f4597ec4eab5d603af3609a4de", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_mut_refs)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+};\n+\n+const Y: &u32 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4) as *mut u32;\n+    *ptr = 42;\n+    &*ptr\n+};\n+\n+const Z: &u32 = &42;\n+\n+const _Z: () = unsafe {\n+    let ptr1 = Y as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr1, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 4, 2); // nop\n+\n+    let ptr2 = Z as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr2, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 4, 2); // nop\n+};\n+\n+fn main() {\n+    assert_eq!(*Y, 42);\n+    assert_eq!(*Z, 42);\n+}"}, {"sha": "b6d89a58dce7bde266d6f9b85b324fd748482f7c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,22 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_mut_refs)]\n+\n+use std::intrinsics;\n+\n+const _X: &'static u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    &*ptr\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Y: u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    let reference = &*ptr;\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    *reference\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "4eb1c42e1f7670ab9756251047636fc958bdf8a1", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:10:5\n+   |\n+LL |     &*ptr\n+   |     ^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:18:5\n+   |\n+LL |     *reference\n+   |     ^^^^^^^^^^ pointer to alloc4 was dereferenced after this allocation got freed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4010b476990dcc4bf7355fa50b36118e67bf208c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,13 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "8177a08504b0b32779434cfc4e514c1059d31c4e", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_duplicate.rs:9:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "031d70fdc8897489f9f87c43453c83601694c9ea", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,29 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 2);\n+    //~^ error: evaluation of constant value failed\n+};\n+const _Y: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 2, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Z: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 3, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _W: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 3);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "650b409b1908a30a7fda38572f080c8ec8d44cf6", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:8:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc2 has size 4 and alignment 4, but gave size 4 and alignment 2\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:13:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 2, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc4 has size 4 and alignment 4, but gave size 2 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:19:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 3, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc6 has size 4 and alignment 4, but gave size 3 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:25:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ align has to be a power of 2, `3` is not a power of 2\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "84fb4d2ea870f2b73802b397e7d95563eb4978dc", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_zero_sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e86a434a770b453ded7dabd3203efc9c61eb2e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs?ref=9e86a434a770b453ded7dabd3203efc9c61eb2e5", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(inline_const)]\n+\n+use std::intrinsics;\n+\n+fn main() {\n+    const {\n+        unsafe {\n+            let ptr1 = intrinsics::const_allocate(0, 0);\n+            let ptr2 = intrinsics::const_allocate(0, 0);\n+            intrinsics::const_deallocate(ptr1, 0, 0);\n+            intrinsics::const_deallocate(ptr2, 0, 0);\n+        }\n+    }\n+}"}]}