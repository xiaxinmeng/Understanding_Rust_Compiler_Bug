{"sha": "ffafd1528094cc9355e751d4b0595a89a11a9a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWZkMTUyODA5NGNjOTM1NWU3NTFkNGIwNTk1YTg5YTExYTlhOGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-15T07:10:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T07:10:02Z"}, "message": "Rollup merge of #71030 - petrochenkov:linkorder2, r=nagisa\n\nrustc_target: Refactor target specifications related to Windows and UEFI\n\n- LLD support is improved.\n- Code is cleaned up.\n- Target specs are organized in a more hierarchical way.\n- Possible issues in UWP and UEFI platforms are identified (see FIXMEs).\n\nThe code is better read per-commit.", "tree": {"sha": "449efb380fe5fc1bd494da17254789e220559ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449efb380fe5fc1bd494da17254789e220559ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffafd1528094cc9355e751d4b0595a89a11a9a8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelrNKCRBK7hj4Ov3rIwAAdHIIABsEtnL6FX3o5LGoOGxOzATU\nIsn+xkglHcs3BKZrgUIBtTJrX2pgxiWEmGQtl1iyzqzBrnuTKnyz0Qvq27Mw2bKV\ncpInq3McHHi7z7aYuRom1SNLgxlG2UCjDjY+zZc9Nr5FraARKL4ZKDGIZmCAugsG\nvowPZnI2J+hpWy0H07cb9p4YN4v3YwQi/l79GK6sR2MkFdGBsMZwV55HMsM406Oz\nLpXVR1xfY4xUsLChvH87qhBcBeIgwa8YgmiN8RcGXMYeh10TXD6PV/dhbAzEQHV9\nhe68ig/5k4Jsqn9Bw8phvdvntTlogDd7cabqauBgMtOVZurtOVV1POxUpX7LI5s=\n=Drla\n-----END PGP SIGNATURE-----\n", "payload": "tree 449efb380fe5fc1bd494da17254789e220559ea5\nparent 629e51b7619c99e5810d399146110556a051597a\nparent 8392e477e73c12566803411396b0ff18a0864c81\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586934602 +0200\ncommitter GitHub <noreply@github.com> 1586934602 +0200\n\nRollup merge of #71030 - petrochenkov:linkorder2, r=nagisa\n\nrustc_target: Refactor target specifications related to Windows and UEFI\n\n- LLD support is improved.\n- Code is cleaned up.\n- Target specs are organized in a more hierarchical way.\n- Possible issues in UWP and UEFI platforms are identified (see FIXMEs).\n\nThe code is better read per-commit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffafd1528094cc9355e751d4b0595a89a11a9a8e", "html_url": "https://github.com/rust-lang/rust/commit/ffafd1528094cc9355e751d4b0595a89a11a9a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffafd1528094cc9355e751d4b0595a89a11a9a8e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629e51b7619c99e5810d399146110556a051597a", "url": "https://api.github.com/repos/rust-lang/rust/commits/629e51b7619c99e5810d399146110556a051597a", "html_url": "https://github.com/rust-lang/rust/commit/629e51b7619c99e5810d399146110556a051597a"}, {"sha": "8392e477e73c12566803411396b0ff18a0864c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8392e477e73c12566803411396b0ff18a0864c81", "html_url": "https://github.com/rust-lang/rust/commit/8392e477e73c12566803411396b0ff18a0864c81"}], "stats": {"total": 444, "additions": 219, "deletions": 225}, "files": [{"sha": "d58d9b91c73ac86b8a015255f30863efaef0b265", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -12,7 +12,7 @@ use rustc_session::search_paths::PathKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -182,7 +182,9 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n     // To comply with the Windows App Certification Kit,\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target.target;\n-    if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n+    if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n+        && t.target_vendor == \"uwp\"\n+    {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n             if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n@@ -1530,13 +1532,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.debuginfo();\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    // We want to, by default, prevent the compiler from accidentally leaking in\n-    // any system libraries, so we may explicitly ask linkers to not link to any\n-    // libraries by default. Note that this does not happen for windows because\n-    // windows pulls in some large number of libraries and I couldn't quite\n-    // figure out which subset we wanted.\n-    //\n-    // This is all naturally configurable via the standard methods as well.\n+    // We want to prevent the compiler from accidentally leaking in any system libraries,\n+    // so by default we tell linkers not to link to any default libraries.\n     if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n         && sess.target.target.options.no_default_libraries\n     {"}, {"sha": "d8c5ddf586f453af016f1319095a882198a9a1a9", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -631,15 +631,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n     }\n \n     fn no_default_libraries(&mut self) {\n-        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n-        // as there's been trouble in the past of linking the C++ standard\n-        // library required by LLVM. This likely needs to happen one day, but\n-        // in general Windows is also a more controlled environment than\n-        // Unix, so it's not necessarily as critical that this be implemented.\n-        //\n-        // Note that there are also some licensing worries about statically\n-        // linking some libraries which require a specific agreement, so it may\n-        // not ever be possible for us to pass this flag.\n+        self.cmd.arg(\"/NODEFAULTLIB\");\n     }\n \n     fn include_path(&mut self, path: &Path) {"}, {"sha": "ebe901e4f274d1bdac78fd21a9105926d529fd6c", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,6 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "8652d1051ad05094f2562bdf5cd7f645902a225a", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,6 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "b7fcda63db00b9bffd93d91ba3a202772fca4da2", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "340090fd43b7c9ff29d0be1f9c700e752a817a45", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "c7062e1ca5196fa8ebe0e012f562e71bf90d4bc0", "filename": "src/librustc_target/spec/dragonfly_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "d2a087ab62f9feb67686fe5743b8d2eb94b648ae", "filename": "src/librustc_target/spec/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "4060b126cddb78ee07b8118e5bde2ef00f26dd32", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "3d7ae6c302d9c56d09437c33417cc6efdad3c089", "filename": "src/librustc_target/spec/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "b9f94023e7a791b9c03dcf124036c6be8e9c028f", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "1f9b195e2e6980049e7b65ddfd6eacae684a14c7", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "d12afe5a40bcc8882bb09cae3db63a8a684da149", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_base::opts();\n+    let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces"}, {"sha": "9d0922b8ce5a957014bbc3fd02fd666c10a177ff", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,18 +1,24 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n-    // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/LARGEADDRESSAWARE\".to_string());\n-\n-    // Ensure the linker will only produce an image if it can also produce a table of\n-    // the image's safe exception handlers.\n-    // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/SAFESEH\".to_string());\n+    let pre_link_args_msvc = vec![\n+        // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n+        // space available to x86 Windows binaries on x86_64.\n+        \"/LARGEADDRESSAWARE\".to_string(),\n+        // Ensure the linker will only produce an image if it can also produce a table of\n+        // the image's safe exception handlers.\n+        // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n+        \"/SAFESEH\".to_string(),\n+    ];\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n     Ok(Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),"}, {"sha": "221d5f0785cd2e421ac1a17ae35f1b071128c974", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -8,7 +8,7 @@\n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::uefi_base::opts();\n+    let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n \n@@ -23,11 +23,6 @@ pub fn target() -> TargetResult {\n     // arguments, thus giving you access to full MMX/SSE acceleration.\n     base.features = \"-mmx,-sse,+soft-float\".to_string();\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of i686 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     // Use -GNU here, because of the reason below:\n     // Background and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic"}, {"sha": "4e582fb8c63ab61af0885a4d5ee9943a4d4dbb9b", "filename": "src/librustc_target/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_uwp_base::opts();\n+    let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces"}, {"sha": "5caad10161d8ebd3f566abbb2151c7cda21e7eb6", "filename": "src/librustc_target/spec/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n //use std::process::Command;\n \n // Use GCC to locate code for crt* libraries from the host, not from L4Re. Note"}, {"sha": "52892fc35924edd17ab955f5f2010493e00fdcdd", "filename": "src/librustc_target/spec/linux_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "4a900d1b02cbfc47050a02230305df1c0530a1f3", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "6ff812754aa7d391f81f74c59c72afcc54c26f79", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -37,7 +37,6 @@\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n-use std::default::Default;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{fmt, io};\n@@ -60,18 +59,19 @@ mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n mod linux_musl_base;\n+mod msvc_base;\n mod netbsd_base;\n mod openbsd_base;\n mod redox_base;\n mod riscv_base;\n mod solaris_base;\n mod thumb_base;\n-mod uefi_base;\n+mod uefi_msvc_base;\n mod vxworks_base;\n mod wasm32_base;\n-mod windows_base;\n+mod windows_gnu_base;\n mod windows_msvc_base;\n-mod windows_uwp_base;\n+mod windows_uwp_gnu_base;\n mod windows_uwp_msvc_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -309,23 +309,14 @@ macro_rules! supported_targets {\n         }\n \n         #[cfg(test)]\n-        mod test_json_encode_decode {\n-            use rustc_serialize::json::ToJson;\n-            use super::Target;\n-            $(use super::$module;)+\n+        mod tests {\n+            mod tests_impl;\n \n+            // Cannot put this into a separate file without duplication, make an exception.\n             $(\n-                #[test] // `#[test]` - this is hard to put into a separate file, make an exception\n+                #[test] // `#[test]`\n                 fn $module() {\n-                    // Grab the TargetResult struct. If we successfully retrieved\n-                    // a Target, then the test JSON encoding/decoding can run for this\n-                    // Target on this testing platform (i.e., checking the iOS targets\n-                    // only on a Mac test platform).\n-                    let _ = $module::target().map(|original| {\n-                        let as_json = original.to_json();\n-                        let parsed = Target::from_json(as_json).unwrap();\n-                        assert_eq!(original, parsed);\n-                    });\n+                    tests_impl::test_target(super::$module::target());\n                 }\n             )+\n         }\n@@ -538,7 +529,8 @@ pub struct Target {\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n-    /// Linker flavor\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line.\n     pub linker_flavor: LinkerFlavor,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -566,7 +558,8 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// LLD flavor\n+    /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n+    /// without clarifying its flavor in any way.\n     pub lld_flavor: LldFlavor,\n \n     /// Linker arguments that are passed *before* any user-defined libraries."}, {"sha": "817a322a9e4dac4e320fea06dbbeb35e5d032434", "filename": "src/librustc_target/spec/msvc_base.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -0,0 +1,35 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let pre_link_args_msvc = vec![\n+        // Suppress the verbose logo and authorship debugging output, which would needlessly\n+        // clog any log files.\n+        \"/NOLOGO\".to_string(),\n+        // Tell the compiler that non-code sections can be marked as non-executable,\n+        // including stack pages.\n+        // UEFI is fully compatible to non-executable data pages.\n+        // In fact, firmware might enforce this, so we better let the linker know about this,\n+        // so it will fail if the compiler ever tries placing code on the stack\n+        // (e.g., trampoline constructs and alike).\n+        \"/NXCOMPAT\".to_string(),\n+    ];\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+\n+    TargetOptions {\n+        executables: true,\n+        is_like_windows: true,\n+        is_like_msvc: true,\n+        // set VSLANG to 1033 can prevent link.exe from using\n+        // language packs, and avoid generating Non-UTF-8 error\n+        // messages if a link error occurred.\n+        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n+        lld_flavor: LldFlavor::Link,\n+        pre_link_args,\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "95c4749f9c74c5543760b4a174de37132ff0183a", "filename": "src/librustc_target/spec/netbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "cadd14df69352837868549a0fcf99802ef1417ea", "filename": "src/librustc_target/spec/openbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "18cafe654d17f5486d5dd4fb0339041ed9ea3883", "filename": "src/librustc_target/spec/redox_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fredox_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "8d3a3563f4164a87fc6de8803e52be11da28a16f", "filename": "src/librustc_target/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::TargetOptions;\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "4cf186bdd7c1a718e20fff9fe9b4648e99c4d443", "filename": "src/librustc_target/spec/tests/tests_impl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -0,0 +1,43 @@\n+use super::super::*;\n+\n+pub(super) fn test_target(target: TargetResult) {\n+    // Grab the TargetResult struct. If we successfully retrieved\n+    // a Target, then the test JSON encoding/decoding can run for this\n+    // Target on this testing platform (i.e., checking the iOS targets\n+    // only on a Mac test platform).\n+    if let Ok(original) = target {\n+        original.check_consistency();\n+        let as_json = original.to_json();\n+        let parsed = Target::from_json(as_json).unwrap();\n+        assert_eq!(original, parsed);\n+    }\n+}\n+\n+impl Target {\n+    fn check_consistency(&self) {\n+        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n+        // If you target really needs to deviate from the rules below, whitelist it\n+        // and document the reasons.\n+        assert_eq!(\n+            self.linker_flavor == LinkerFlavor::Msvc\n+                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n+            self.options.lld_flavor == LldFlavor::Link,\n+        );\n+        for args in &[\n+            &self.options.pre_link_args,\n+            &self.options.pre_link_args_crt,\n+            &self.options.late_link_args,\n+            &self.options.late_link_args_dynamic,\n+            &self.options.late_link_args_static,\n+            &self.options.post_link_args,\n+        ] {\n+            assert_eq!(\n+                args.get(&LinkerFlavor::Msvc),\n+                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n+            );\n+            if args.contains_key(&LinkerFlavor::Msvc) {\n+                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+            }\n+        }\n+    }\n+}"}, {"sha": "eca095b5942898298036c837b5e7dd369df56389", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -28,7 +28,6 @@\n // build scripts / gcc flags.\n \n use crate::spec::{PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults"}, {"sha": "21d62d252e09ad2d059d2757bfd30ed45acbdd9f", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n@@ -10,7 +10,12 @@ pub fn target() -> TargetResult {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/OPT:NOLBR\".to_string());\n+    let pre_link_args_msvc = \"/OPT:NOLBR\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .push(pre_link_args_msvc);\n \n     // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n     // implemented for windows/arm in LLVM"}, {"sha": "d09da9478fb2b356a834639416ea7a307559df96", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/629e51b7619c99e5810d399146110556a051597a/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629e51b7619c99e5810d399146110556a051597a/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=629e51b7619c99e5810d399146110556a051597a", "patch": "@@ -1,67 +0,0 @@\n-// This defines a base target-configuration for native UEFI systems. The UEFI specification has\n-// quite detailed sections on the ABI of all the supported target architectures. In almost all\n-// cases it simply follows what Microsoft Windows does. Hence, whenever in doubt, see the MSDN\n-// documentation.\n-// UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n-// linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n-// by the loader if the pre-chosen memory location is already in use.\n-// UEFI forbids running code on anything but the boot-CPU. No interrupts are allowed other than\n-// the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n-// code runs in the same environment, no process separation is supported.\n-\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n-\n-pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-\n-    pre_link_args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Link),\n-        vec![\n-            // Suppress the verbose logo and authorship debugging output, which would needlessly\n-            // clog any log files.\n-            \"/NOLOGO\".to_string(),\n-            // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n-            // non-code sections can be marked as non-executable, including stack pages. In fact,\n-            // firmware might enforce this, so we better let the linker know about this, so it\n-            // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n-            // constructs and alike).\n-            \"/NXCOMPAT\".to_string(),\n-            // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n-            // must be freestanding.\n-            \"/nodefaultlib\".to_string(),\n-            // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n-            // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n-            // spec.\n-            \"/entry:efi_main\".to_string(),\n-            // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n-            // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n-            // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n-            // which is very likely the most common option. Individual projects can override this\n-            // with custom linker flags.\n-            // The subsystem-type only has minor effects on the application. It defines the memory\n-            // regions the application is loaded into (runtime-drivers need to be put into\n-            // reserved areas), as well as whether a return from the entry-point is treated as\n-            // exit (default for applications).\n-            \"/subsystem:efi_application\".to_string(),\n-        ],\n-    );\n-\n-    TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        disable_redzone: true,\n-        exe_suffix: \".efi\".to_string(),\n-        allows_weak_linkage: false,\n-        panic_strategy: PanicStrategy::Abort,\n-        stack_probes: true,\n-        singlethread: true,\n-        emit_debug_gdb_scripts: false,\n-\n-        linker: Some(\"rust-lld\".to_string()),\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args,\n-\n-        ..Default::default()\n-    }\n-}"}, {"sha": "3f7c78c8e7d47cb79876fd834ba7f83629a91828", "filename": "src/librustc_target/spec/uefi_msvc_base.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -0,0 +1,58 @@\n+// This defines a base target-configuration for native UEFI systems. The UEFI specification has\n+// quite detailed sections on the ABI of all the supported target architectures. In almost all\n+// cases it simply follows what Microsoft Windows does. Hence, whenever in doubt, see the MSDN\n+// documentation.\n+// UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n+// linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n+// by the loader if the pre-chosen memory location is already in use.\n+// UEFI forbids running code on anything but the boot-CPU. No interrupts are allowed other than\n+// the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n+// code runs in the same environment, no process separation is supported.\n+\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let mut base = super::msvc_base::opts();\n+\n+    let pre_link_args_msvc = vec![\n+        // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n+        // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n+        // spec.\n+        \"/entry:efi_main\".to_string(),\n+        // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n+        // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n+        // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n+        // which is very likely the most common option. Individual projects can override this\n+        // with custom linker flags.\n+        // The subsystem-type only has minor effects on the application. It defines the memory\n+        // regions the application is loaded into (runtime-drivers need to be put into\n+        // reserved areas), as well as whether a return from the entry-point is treated as\n+        // exit (default for applications).\n+        \"/subsystem:efi_application\".to_string(),\n+    ];\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n+\n+    TargetOptions {\n+        disable_redzone: true,\n+        exe_suffix: \".efi\".to_string(),\n+        allows_weak_linkage: false,\n+        panic_strategy: PanicStrategy::Abort,\n+        stack_probes: true,\n+        singlethread: true,\n+        linker: Some(\"rust-lld\".to_string()),\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_windows: false,\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_msvc: false,\n+\n+        ..base\n+    }\n+}"}, {"sha": "1b25c51278d4a51653f685935afc975e18fe0a8d", "filename": "src/librustc_target/spec/vxworks_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args_crt = LinkArgs::new();"}, {"sha": "33ecb1d0d48ceb28b2b657e2fc3f698069f286fc", "filename": "src/librustc_target/spec/windows_gnu_base.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();", "previous_filename": "src/librustc_target/spec/windows_base.rs"}, {"sha": "77171f8672e8a2b7ea8a26a11604be5db1c04431", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,36 +1,30 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n-use std::default::Default;\n+use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    let pre_args = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n-    let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Msvc, pre_args.clone());\n-    args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_args);\n+    let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        function_sections: true,\n         dynamic_linking: true,\n-        executables: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        // set VSLANG to 1033 can prevent link.exe from using\n-        // language packs, and avoid generating Non-UTF-8 error\n-        // messages if a link error occurred.\n-        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args: args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n+        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n+        // as there's been trouble in the past of linking the C++ standard\n+        // library required by LLVM. This likely needs to happen one day, but\n+        // in general Windows is also a more controlled environment than\n+        // Unix, so it's not necessarily as critical that this be implemented.\n+        //\n+        // Note that there are also some licensing worries about statically\n+        // linking some libraries which require a specific agreement, so it may\n+        // not ever be possible for us to pass this flag.\n+        no_default_libraries: false,\n \n-        ..Default::default()\n+        ..base\n     }\n }"}, {"sha": "dd3b60344be228db161716f3fc57456f695836ec", "filename": "src/librustc_target/spec/windows_uwp_gnu_base.rs", "status": "renamed", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,9 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let base = super::windows_gnu_base::opts();\n+\n+    // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n         LinkerFlavor::Gcc,\n@@ -14,7 +16,10 @@ pub fn opts() -> TargetOptions {\n         ],\n     );\n \n+    // FIXME: This should be updated for the exception machinery changes from #67502.\n     let mut late_link_args = LinkArgs::new();\n+    let late_link_args_dynamic = LinkArgs::new();\n+    let late_link_args_static = LinkArgs::new();\n     late_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n@@ -33,31 +38,17 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        // FIXME(#13846) this should be enabled for windows\n-        function_sections: false,\n-        linker: Some(\"gcc\".to_string()),\n-        dynamic_linking: true,\n         executables: false,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"lib\".to_string(),\n-        staticlib_suffix: \".a\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        allows_weak_linkage: false,\n+        limit_rdylib_exports: false,\n         pre_link_args,\n-        pre_link_objects_exe: vec![\n-            \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n-        ],\n+        // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n+        pre_link_objects_exe: vec![\"rsbegin.o\".to_string()],\n+        // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n         pre_link_objects_dll: vec![\"rsbegin.o\".to_string()],\n         late_link_args,\n-        post_link_objects: vec![\"rsend.o\".to_string()],\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n-        requires_uwtable: true,\n-        limit_rdylib_exports: false,\n+        late_link_args_dynamic,\n+        late_link_args_static,\n \n-        ..Default::default()\n+        ..base\n     }\n }", "previous_filename": "src/librustc_target/spec/windows_uwp_base.rs"}, {"sha": "04ffa1a0addbeb4b38727a23670c88c4e938145b", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,37 +1,14 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n+use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Msvc,\n-        vec![\n-            \"/NOLOGO\".to_string(),\n-            \"/NXCOMPAT\".to_string(),\n-            \"/APPCONTAINER\".to_string(),\n-            \"mincore.lib\".to_string(),\n-        ],\n-    );\n+    let mut opts = super::windows_msvc_base::opts();\n \n-    TargetOptions {\n-        function_sections: true,\n-        dynamic_linking: true,\n-        executables: true,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: String::new(),\n-        staticlib_suffix: \".lib\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        pre_link_args: args,\n-        crt_static_allows_dylibs: true,\n-        crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n-        requires_uwtable: true,\n+    let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n+    opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    opts.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n-        ..Default::default()\n-    }\n+    opts\n }"}, {"sha": "eb97fa56814d85c7469439488f9ed7a472d27515", "filename": "src/librustc_target/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_base::opts();\n+    let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "12edc29330a49057c6cf2c1fc41b3658bf28961b", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -8,7 +8,7 @@\n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::uefi_base::opts();\n+    let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n@@ -28,11 +28,6 @@ pub fn target() -> TargetResult {\n     // places no locality-restrictions, so it fits well here.\n     base.code_model = Some(\"large\".to_string());\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of x86-64 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     Ok(Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "ad6002f6b89e40fb4fe4526958871be4da67d334", "filename": "src/librustc_target/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffafd1528094cc9355e751d4b0595a89a11a9a8e/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=ffafd1528094cc9355e751d4b0595a89a11a9a8e", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_uwp_base::opts();\n+    let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}]}