{"sha": "3c0c3874fc75c730efba0702579bfeef34eecf31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMGMzODc0ZmM3NWM3MzBlZmJhMDcwMjU3OWJmZWVmMzRlZWNmMzE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-09T20:31:49Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-09T20:35:18Z"}, "message": "Implement @jackh726's suggestions", "tree": {"sha": "f8e4a9c57f619e3879936501711d61a08b8ba586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e4a9c57f619e3879936501711d61a08b8ba586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0c3874fc75c730efba0702579bfeef34eecf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0c3874fc75c730efba0702579bfeef34eecf31", "html_url": "https://github.com/rust-lang/rust/commit/3c0c3874fc75c730efba0702579bfeef34eecf31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0c3874fc75c730efba0702579bfeef34eecf31/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439ef6d76279268eb80e33afffafa22597e22776", "url": "https://api.github.com/repos/rust-lang/rust/commits/439ef6d76279268eb80e33afffafa22597e22776", "html_url": "https://github.com/rust-lang/rust/commit/439ef6d76279268eb80e33afffafa22597e22776"}], "stats": {"total": 142, "additions": 65, "deletions": 77}, "files": [{"sha": "9b82d8afd2be1244feb22e4a3356d8ed71478b85", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 59, "deletions": 72, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/3c0c3874fc75c730efba0702579bfeef34eecf31/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0c3874fc75c730efba0702579bfeef34eecf31/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3c0c3874fc75c730efba0702579bfeef34eecf31", "patch": "@@ -1821,21 +1821,19 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n     crate fn add_missing_lifetime_specifiers_label(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        spans: Vec<Span>,\n-        counts: Vec<usize>,\n+        spans_with_counts: Vec<(Span, usize)>,\n         lifetime_names: &FxHashSet<Symbol>,\n         lifetime_spans: Vec<Span>,\n         params: &[ElisionFailureInfo],\n     ) {\n-        let snippets: Vec<Option<String>> = spans\n+        let snippets: Vec<Option<String>> = spans_with_counts\n             .iter()\n-            .copied()\n-            .map(|span| self.tcx.sess.source_map().span_to_snippet(span).ok())\n+            .map(|(span, _)| self.tcx.sess.source_map().span_to_snippet(*span).ok())\n             .collect();\n \n-        for (span, count) in spans.iter().zip(counts.iter()) {\n+        for (span, count) in &spans_with_counts {\n             err.span_label(\n-                span.clone(),\n+                *span,\n                 format!(\n                     \"expected {} lifetime parameter{}\",\n                     if *count == 1 { \"named\".to_string() } else { count.to_string() },\n@@ -1847,7 +1845,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         let suggest_existing =\n             |err: &mut DiagnosticBuilder<'_>,\n              name: &str,\n-             formatters: &Vec<Option<Box<dyn Fn(&str) -> String>>>| {\n+             formatters: Vec<Option<Box<dyn Fn(&str) -> String>>>| {\n                 if let Some(MissingLifetimeSpot::HigherRanked { span: for_span, span_type }) =\n                     self.missing_named_lifetime_spots.iter().rev().next()\n                 {\n@@ -1892,9 +1890,9 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         }\n                     }\n                     introduce_suggestion.push((*for_span, for_sugg));\n-                    for (span, formatter) in spans.iter().copied().zip(formatters.iter()) {\n+                    for ((span, _), formatter) in spans_with_counts.iter().zip(formatters.iter()) {\n                         if let Some(formatter) = formatter {\n-                            introduce_suggestion.push((span, formatter(&lt_name)));\n+                            introduce_suggestion.push((*span, formatter(&lt_name)));\n                         }\n                     }\n                     err.multipart_suggestion_with_style(\n@@ -1905,12 +1903,12 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     );\n                 }\n \n-                let mut spans_suggs: Vec<_> = Vec::new();\n-                for (span, fmt) in spans.iter().copied().zip(formatters.iter()) {\n-                    if let Some(formatter) = fmt {\n-                        spans_suggs.push((span, formatter(name)));\n-                    }\n-                }\n+                let spans_suggs: Vec<_> = formatters\n+                    .into_iter()\n+                    .filter_map(|fmt| fmt)\n+                    .zip(spans_with_counts.iter())\n+                    .map(|(formatter, (span, _))| (*span, formatter(name)))\n+                    .collect();\n                 err.multipart_suggestion_with_style(\n                     &format!(\n                         \"consider using the `{}` lifetime\",\n@@ -1921,7 +1919,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     SuggestionStyle::ShowAlways,\n                 );\n             };\n-        let suggest_new = |err: &mut DiagnosticBuilder<'_>, suggs: &Vec<Option<String>>| {\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, suggs: Vec<Option<String>>| {\n             for missing in self.missing_named_lifetime_spots.iter().rev() {\n                 let mut introduce_suggestion = vec![];\n                 let msg;\n@@ -1967,8 +1965,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     }\n                     MissingLifetimeSpot::Static => {\n                         let mut spans_suggs = Vec::new();\n-                        for ((span, snippet), count) in\n-                            spans.iter().copied().zip(snippets.iter()).zip(counts.iter().copied())\n+                        for ((span, count), snippet) in\n+                            spans_with_counts.iter().copied().zip(snippets.iter())\n                         {\n                             let (span, sugg) = match snippet.as_deref() {\n                                 Some(\"&\") => (span.shrink_to_hi(), \"'static \".to_owned()),\n@@ -2018,7 +2016,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         }\n                     }\n                 }\n-                for (span, sugg) in spans.iter().copied().zip(suggs.iter()) {\n+                for ((span, _), sugg) in spans_with_counts.iter().copied().zip(suggs.iter()) {\n                     if let Some(sugg) = sugg {\n                         introduce_suggestion.push((span, sugg.to_string()));\n                     }\n@@ -2039,68 +2037,57 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         match &lifetime_names[..] {\n             [name] => {\n                 let mut suggs: Vec<Option<Box<dyn Fn(&str) -> String>>> = Vec::new();\n-                for (snippet, count) in snippets.iter().cloned().zip(counts.iter().copied()) {\n-                    if snippet == Some(\"&\".to_string()) {\n-                        suggs.push(Some(Box::new(|name| format!(\"&{} \", name))));\n-                    } else if snippet == Some(\"'_\".to_string()) {\n-                        suggs.push(Some(Box::new(|n| n.to_string())));\n-                    } else if snippet == Some(\"\".to_string()) {\n-                        suggs.push(Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))));\n-                    } else if let Some(snippet) = snippet {\n-                        if !snippet.ends_with('>') {\n-                            suggs.push(Some(Box::new(move |name| {\n-                                format!(\n-                                    \"{}<{}>\",\n-                                    snippet,\n-                                    std::iter::repeat(name.to_string())\n-                                        .take(count)\n-                                        .collect::<Vec<_>>()\n-                                        .join(\", \")\n-                                )\n-                            })));\n-                        } else {\n-                            suggs.push(None);\n-                        }\n-                    } else {\n-                        suggs.push(None);\n-                    }\n+                for (snippet, (_, count)) in snippets.iter().zip(spans_with_counts.iter().copied())\n+                {\n+                    suggs.push(match snippet.as_deref() {\n+                        Some(\"&\") => Some(Box::new(|name| format!(\"&{} \", name))),\n+                        Some(\"'_\") => Some(Box::new(|n| n.to_string())),\n+                        Some(\"\") => Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))),\n+                        Some(snippet) if !snippet.ends_with('>') => Some(Box::new(move |name| {\n+                            format!(\n+                                \"{}<{}>\",\n+                                snippet,\n+                                std::iter::repeat(name.to_string())\n+                                    .take(count)\n+                                    .collect::<Vec<_>>()\n+                                    .join(\", \")\n+                            )\n+                        })),\n+                        _ => None,\n+                    });\n                 }\n-                suggest_existing(err, &name.as_str()[..], &suggs);\n+                suggest_existing(err, &name.as_str()[..], suggs);\n             }\n             [] => {\n-                let mut suggs: Vec<Option<String>> = Vec::new();\n-                for (snippet, count) in snippets.iter().cloned().zip(counts.iter().copied()) {\n-                    if snippet == Some(\"&\".to_string()) {\n-                        suggs.push(Some(\"&'a \".to_string()));\n-                    } else if snippet == Some(\"'_\".to_string()) {\n-                        suggs.push(Some(\"'a\".to_string()));\n-                    } else if let Some(snippet) = snippet {\n-                        if snippet == \"\" {\n-                            suggs.push(Some(\n-                                std::iter::repeat(\"'a, \").take(count).collect::<Vec<_>>().join(\"\"),\n-                            ));\n-                        } else {\n-                            suggs.push(Some(format!(\n-                                \"{}<{}>\",\n-                                snippet,\n-                                std::iter::repeat(\"'a\").take(count).collect::<Vec<_>>().join(\", \")\n-                            )));\n+                let mut suggs = Vec::new();\n+                for (snippet, (_, count)) in\n+                    snippets.iter().cloned().zip(spans_with_counts.iter().copied())\n+                {\n+                    suggs.push(match snippet.as_deref() {\n+                        Some(\"&\") => Some(\"&'a \".to_string()),\n+                        Some(\"'_\") => Some(\"'a\".to_string()),\n+                        Some(\"\") => {\n+                            Some(std::iter::repeat(\"'a, \").take(count).collect::<Vec<_>>().join(\"\"))\n                         }\n-                    } else {\n-                        suggs.push(None);\n-                    }\n+                        Some(snippet) => Some(format!(\n+                            \"{}<{}>\",\n+                            snippet,\n+                            std::iter::repeat(\"'a\").take(count).collect::<Vec<_>>().join(\", \"),\n+                        )),\n+                        None => None,\n+                    });\n                 }\n-                suggest_new(err, &suggs);\n+                suggest_new(err, suggs);\n             }\n             lts if lts.len() > 1 => {\n                 err.span_note(lifetime_spans, \"these named lifetimes are available to use\");\n \n                 let mut spans_suggs: Vec<_> = Vec::new();\n-                for (span, snippet) in spans.iter().copied().zip(snippets.iter()) {\n-                    if Some(\"\") == snippet.as_deref() {\n-                        spans_suggs.push((span, \"'lifetime, \".to_string()));\n-                    } else if Some(\"&\") == snippet.as_deref() {\n-                        spans_suggs.push((span, \"&'lifetime \".to_string()));\n+                for ((span, _), snippet) in spans_with_counts.iter().copied().zip(snippets.iter()) {\n+                    match snippet.as_deref() {\n+                        Some(\"\") => spans_suggs.push((span, \"'lifetime, \".to_string())),\n+                        Some(\"&\") => spans_suggs.push((span, \"&'lifetime \".to_string())),\n+                        _ => {}\n                     }\n                 }\n "}, {"sha": "e8d21af435887ad907d5f6ebac045b0fdda371c8", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c0c3874fc75c730efba0702579bfeef34eecf31/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0c3874fc75c730efba0702579bfeef34eecf31/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=3c0c3874fc75c730efba0702579bfeef34eecf31", "patch": "@@ -3038,8 +3038,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         spans.sort();\n         let mut spans_dedup = spans.clone();\n         spans_dedup.dedup();\n-        let counts: Vec<_> =\n-            spans_dedup.iter().map(|sp| spans.iter().filter(|nsp| *nsp == sp).count()).collect();\n+        let spans_with_counts: Vec<_> = spans_dedup\n+            .into_iter()\n+            .map(|sp| (sp, spans.iter().filter(|nsp| *nsp == &sp).count()))\n+            .collect();\n \n         let mut err = self.report_missing_lifetime_specifiers(spans.clone(), lifetime_refs.len());\n \n@@ -3052,8 +3054,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         self.add_missing_lifetime_specifiers_label(\n             &mut err,\n-            spans,\n-            counts,\n+            spans_with_counts,\n             &lifetime_names,\n             lifetime_spans,\n             error.unwrap_or(&[]),"}, {"sha": "aa246aaa3d45efb3006632356d86dca41797ce79", "filename": "src/test/ui/suggestions/issue-84592.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.rs?ref=3c0c3874fc75c730efba0702579bfeef34eecf31", "previous_filename": "src/test/ui/issues/issue-84592.rs"}, {"sha": "02f9241a6d2dae3fdbb5e13aa35870c777f2702f", "filename": "src/test/ui/suggestions/issue-84592.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr?ref=3c0c3874fc75c730efba0702579bfeef34eecf31", "previous_filename": "src/test/ui/issues/issue-84592.stderr"}, {"sha": "8334bc68ae72943a0cd3a0b8eddb861c62ba0829", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0c3874fc75c730efba0702579bfeef34eecf31/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=3c0c3874fc75c730efba0702579bfeef34eecf31", "patch": "@@ -8,7 +8,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 1388;\n-const ISSUES_ENTRY_LIMIT: usize = 2557;\n+const ISSUES_ENTRY_LIMIT: usize = 2551;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}