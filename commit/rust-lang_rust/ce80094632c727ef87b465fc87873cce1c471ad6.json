{"sha": "ce80094632c727ef87b465fc87873cce1c471ad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODAwOTQ2MzJjNzI3ZWY4N2I0NjVmYzg3ODczY2NlMWM0NzFhZDY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-30T01:56:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:42Z"}, "message": "Make save-analysis work for `if let` etc.", "tree": {"sha": "f9685ea43998a48f3ffb2bf9a66503b687418ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9685ea43998a48f3ffb2bf9a66503b687418ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce80094632c727ef87b465fc87873cce1c471ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce80094632c727ef87b465fc87873cce1c471ad6", "html_url": "https://github.com/rust-lang/rust/commit/ce80094632c727ef87b465fc87873cce1c471ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce80094632c727ef87b465fc87873cce1c471ad6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f3752270098fb26ff41fc2e5cfbeca2dffeec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f3752270098fb26ff41fc2e5cfbeca2dffeec0", "html_url": "https://github.com/rust-lang/rust/commit/08f3752270098fb26ff41fc2e5cfbeca2dffeec0"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "256774756b8a900abc00058a34dff12f5c682151", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce80094632c727ef87b465fc87873cce1c471ad6/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce80094632c727ef87b465fc87873cce1c471ad6/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=ce80094632c727ef87b465fc87873cce1c471ad6", "patch": "@@ -1132,12 +1132,20 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 // walk the body\n                 self.nest(ex.id, |v| v.visit_block(&**body));\n             }\n-            ast::ExprForLoop(ref pattern, ref subexpression, ref block, _) => {\n+            ast::ExprForLoop(ref pattern, ref subexpression, ref block, _) |\n+            ast::ExprWhileLet(ref pattern, ref subexpression, ref block, _) => {\n                 let value = self.span.snippet(mk_sp(ex.span.lo, subexpression.span.hi));\n                 self.process_var_decl(pattern, value);\n                 visit::walk_expr(self, subexpression);\n                 visit::walk_block(self, block);\n             }\n+            ast::ExprIfLet(ref pattern, ref subexpression, ref block, ref opt_else) => {\n+                let value = self.span.snippet(mk_sp(ex.span.lo, subexpression.span.hi));\n+                self.process_var_decl(pattern, value);\n+                visit::walk_expr(self, subexpression);\n+                visit::walk_block(self, block);\n+                opt_else.as_ref().map(|el| visit::walk_expr(self, el));\n+            }\n             _ => {\n                 visit::walk_expr(self, ex)\n             }"}, {"sha": "3e4ba5af80c4de604c7c11528d0abaa4bd1b6093", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce80094632c727ef87b465fc87873cce1c471ad6/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce80094632c727ef87b465fc87873cce1c471ad6/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=ce80094632c727ef87b465fc87873cce1c471ad6", "patch": "@@ -339,8 +339,27 @@ fn main() { // foo\n     if let SomeEnum::Strings(..) = s7 {\n         println!(\"hello!\");\n     }\n+\n+    for i in 0..5 {\n+        foo_foo(i);\n+    }\n+\n+    if let Some(x) = None {\n+        foo_foo(x);\n+    }\n+\n+    if false {\n+    } else if let Some(y) = None {\n+        foo_foo(y);\n+    }\n+\n+    while let Some(z) = None {\n+        foo_foo(z);\n+    }\n }\n \n+fn foo_foo(_: i32) {}\n+\n impl Iterator for nofields {\n     type Item = (usize, usize);\n "}]}