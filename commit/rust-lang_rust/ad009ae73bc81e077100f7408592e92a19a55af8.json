{"sha": "ad009ae73bc81e077100f7408592e92a19a55af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMDA5YWU3M2JjODFlMDc3MTAwZjc0MDg1OTJlOTJhMTlhNTVhZjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-16T07:36:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T07:06:28Z"}, "message": "fix using copy_op to transmute", "tree": {"sha": "10370a2eb61fab1f9793ae6e5bf209c0dea9e2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10370a2eb61fab1f9793ae6e5bf209c0dea9e2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad009ae73bc81e077100f7408592e92a19a55af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad009ae73bc81e077100f7408592e92a19a55af8", "html_url": "https://github.com/rust-lang/rust/commit/ad009ae73bc81e077100f7408592e92a19a55af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad009ae73bc81e077100f7408592e92a19a55af8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d86b0136c28fdf938669aceaa7af1743a89a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d86b0136c28fdf938669aceaa7af1743a89a15", "html_url": "https://github.com/rust-lang/rust/commit/23d86b0136c28fdf938669aceaa7af1743a89a15"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "e92143c56f80ea0a8aad221f4b586767b1d23bc4", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad009ae73bc81e077100f7408592e92a19a55af8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad009ae73bc81e077100f7408592e92a19a55af8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ad009ae73bc81e077100f7408592e92a19a55af8", "patch": "@@ -520,22 +520,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         trace!(\"write_value: {:?} <- {:?}\", *dest, src_val);\n         // See if we can avoid an allocation. This is the counterpart to `try_read_value`,\n         // but not factored as a separate function.\n-        match dest.place {\n+        let mplace = match dest.place {\n             Place::Local { frame, local } => {\n                 match *self.stack[frame].locals[local].access_mut()? {\n                     Operand::Immediate(ref mut dest_val) => {\n                         // Yay, we can just change the local directly.\n                         *dest_val = src_val;\n                         return Ok(());\n                     },\n-                    _ => {},\n+                    Operand::Indirect(mplace) => mplace, // already in memory\n                 }\n             },\n-            _ => {},\n+            Place::Ptr(mplace) => mplace, // already in memory\n         };\n \n-        // Slow path: write to memory\n-        let dest = self.force_allocation(dest)?;\n+        // This is already in memory, write there.\n+        let dest = MPlaceTy { mplace, layout: dest.layout };\n         self.write_value_to_mplace(src_val, dest)\n     }\n \n@@ -565,7 +565,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             Value::ScalarPair(a_val, b_val) => {\n                 let (a, b) = match dest.layout.abi {\n                     layout::Abi::ScalarPair(ref a, ref b) => (&a.value, &b.value),\n-                    _ => bug!(\"write_value_to_ptr: invalid ScalarPair layout: {:#?}\", dest.layout)\n+                    _ => bug!(\"write_value_to_mplace: invalid ScalarPair layout: {:#?}\", dest.layout)\n                 };\n                 let (a_size, b_size) = (a.size(&self), b.size(&self));\n                 let (a_align, b_align) = (a.align(&self), b.align(&self));\n@@ -591,8 +591,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n         let (src_ptr, src_align) = match self.try_read_value(src)? {\n             Ok(src_val) =>\n-                // Yay, we got a value that we can write directly.\n-                return self.write_value(src_val, dest),\n+                // Yay, we got a value that we can write directly.  We write with the\n+                // *source layout*, because that was used to load, and if they do not match\n+                // this is a transmute we want to support.\n+                return self.write_value(src_val, PlaceTy { place: *dest, layout: src.layout }),\n             Err(mplace) => mplace.to_scalar_ptr_align(),\n         };\n         // Slow path, this does not fit into an immediate. Just memcpy."}]}