{"sha": "a9108ebb7661b9145f29a65bc8589b68a7a3b443", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MTA4ZWJiNzY2MWI5MTQ1ZjI5YTY1YmM4NTg5YjY4YTdhM2I0NDM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-03-16T21:05:16Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-03-18T15:13:15Z"}, "message": "filter suggestions from extern prelude", "tree": {"sha": "dd3e1d6fad49c99fd9864dedf32e9dc43987166d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3e1d6fad49c99fd9864dedf32e9dc43987166d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9108ebb7661b9145f29a65bc8589b68a7a3b443", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlyPtZgWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdAs9B/9I82ZZWzpvzNG+J1BNwT7ammxX\nWT+4IRTf0Y7tzb2r4aDNsB93fLCOxa57ECmk7JEYPEQBgsrVcGQoBxDCjb6jPx+6\n2loXZdYR8+0cK8cHBwI1kyHwQKi8TdHmMAHm55G2VYn81jT/A480PdpniIRidBB9\nhoayj1KnLqQhnDDvhkOtVmKNe2WsXFolc5hCyr5VS2QWHUEyKFxWeJVlK56TC74m\nA6QowKMWhOFVEtG2fcUvyBvS35ANwODYdUJt5m+5lhngjxt69RE/rotdJmEXUyBJ\nWqQNZ8Ib7D4NOmkqegP1D0mmANXevpTQXJgpwEBXmwLgQj6vsuXklMslNsX0\n=xYo8\n-----END PGP SIGNATURE-----", "payload": "tree dd3e1d6fad49c99fd9864dedf32e9dc43987166d\nparent 16e7e05e95a6a5a1e0dba54ae722274bd7d725f7\nauthor Andy Russell <arussell123@gmail.com> 1552770316 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1552921995 -0400\n\nfilter suggestions from extern prelude\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9108ebb7661b9145f29a65bc8589b68a7a3b443", "html_url": "https://github.com/rust-lang/rust/commit/a9108ebb7661b9145f29a65bc8589b68a7a3b443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9108ebb7661b9145f29a65bc8589b68a7a3b443/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "html_url": "https://github.com/rust-lang/rust/commit/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "a4e1b9ad6244ce31334c38e23bf753ff7c6db642", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a9108ebb7661b9145f29a65bc8589b68a7a3b443", "patch": "@@ -4046,13 +4046,27 @@ impl<'a> Resolver<'a> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.extern_prelude.iter().map(|(ident, _)| {\n-                                TypoSuggestion {\n-                                    candidate: ident.name,\n-                                    article: \"a\",\n-                                    kind: \"crate\",\n-                                }\n+                            names.extend(self.extern_prelude.clone().iter().flat_map(|(ident, _)| {\n+                                self.crate_loader\n+                                    .maybe_process_path_extern(ident.name, ident.span)\n+                                    .and_then(|crate_id| {\n+                                        let crate_mod = Def::Mod(DefId {\n+                                            krate: crate_id,\n+                                            index: CRATE_DEF_INDEX,\n+                                        });\n+\n+                                        if filter_fn(crate_mod) {\n+                                            Some(TypoSuggestion {\n+                                                candidate: ident.name,\n+                                                article: \"a\",\n+                                                kind: \"crate\",\n+                                            })\n+                                        } else {\n+                                            None\n+                                        }\n+                                    })\n                             }));\n+\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }"}, {"sha": "cf7de578c7d42f514f3aa93656a1bb8686543b70", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=a9108ebb7661b9145f29a65bc8589b68a7a3b443", "patch": "@@ -20,7 +20,7 @@ error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:44:10\n    |\n LL | #[derive(attr_proc_macra)]\n-   |          ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n+   |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n   --> $DIR/resolve-error.rs:49:5"}, {"sha": "e90bbef6d5c5fed6886279b9828d56063e5affd6", "filename": "src/test/ui/suggestions/auxiliary/foo.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Ffoo.rs?ref=a9108ebb7661b9145f29a65bc8589b68a7a3b443", "patch": "@@ -0,0 +1,3 @@\n+//! Contains a struct with almost the same name as itself, to trigger Levenshtein suggestions.\n+\n+pub struct Foo;"}, {"sha": "bb93ef4549dc2c82f32ba623468a96c8a323076f", "filename": "src/test/ui/suggestions/no-extern-crate-in-type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.rs?ref=a9108ebb7661b9145f29a65bc8589b68a7a3b443", "patch": "@@ -0,0 +1,7 @@\n+// aux-build:foo.rs\n+\n+extern crate foo;\n+\n+type Output = Option<Foo>; //~ ERROR cannot find type `Foo`\n+\n+fn main() {}"}, {"sha": "d4a5a956714c99a88b7c025a942a649ed0cced3d", "filename": "src/test/ui/suggestions/no-extern-crate-in-type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9108ebb7661b9145f29a65bc8589b68a7a3b443/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=a9108ebb7661b9145f29a65bc8589b68a7a3b443", "patch": "@@ -0,0 +1,13 @@\n+error[E0412]: cannot find type `Foo` in this scope\n+  --> $DIR/no-extern-crate-in-type.rs:5:22\n+   |\n+LL | type Output = Option<Foo>;\n+   |                      ^^^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use foo::Foo;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}