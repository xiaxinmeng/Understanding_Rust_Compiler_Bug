{"sha": "1e507d44505a336fb60ee1dbd121bd986788296e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTA3ZDQ0NTA1YTMzNmZiNjBlZTFkYmQxMjFiZDk4Njc4ODI5NmU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-24T18:30:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-24T18:30:39Z"}, "message": "address nits", "tree": {"sha": "42eb8fc2f8b8a9cee91cefe695366093231ef831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42eb8fc2f8b8a9cee91cefe695366093231ef831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e507d44505a336fb60ee1dbd121bd986788296e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e507d44505a336fb60ee1dbd121bd986788296e", "html_url": "https://github.com/rust-lang/rust/commit/1e507d44505a336fb60ee1dbd121bd986788296e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e507d44505a336fb60ee1dbd121bd986788296e/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "581e5ee45e00965df45dbb96fcdd869b378d2ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/581e5ee45e00965df45dbb96fcdd869b378d2ffe", "html_url": "https://github.com/rust-lang/rust/commit/581e5ee45e00965df45dbb96fcdd869b378d2ffe"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "0c802356af10d8ac3b1fcb585a8495cbb29381f3", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=1e507d44505a336fb60ee1dbd121bd986788296e", "patch": "@@ -207,8 +207,10 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             }\n             'B' => {\n                 assert_eq!(self.next(), '[');\n-                // this is totally wrong, but nobody relevant cares about\n-                // this field - it will die soon(TM).\n+                // this is the wrong NodeId, but `param_id` is only accessed\n+                // by the receiver-matching code in collect, which won't\n+                // be going down this code path, and anyway I will kill it\n+                // the moment wfcheck becomes the standard.\n                 let node_id = self.parse_uint() as ast::NodeId;\n                 assert_eq!(self.next(), '|');\n                 let space = self.parse_param_space();\n@@ -249,8 +251,12 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n \n     fn parse_scope(&mut self) -> region::CodeExtent {\n         self.tcx.region_maps.bogus_code_extent(match self.next() {\n-            // the scopes created here are totally bogus with their\n-            // NodeIDs\n+            // This creates scopes with the wrong NodeId. This isn't\n+            // actually a problem because scopes only exist *within*\n+            // functions, and functions aren't loaded until trans which\n+            // doesn't care about regions.\n+            //\n+            // May still be worth fixing though.\n             'P' => {\n                 assert_eq!(self.next(), '[');\n                 let fn_id = self.parse_uint() as ast::NodeId;"}, {"sha": "4ea55d2d4e42cbe93f7751a58160aa6247b3a2b6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1e507d44505a336fb60ee1dbd121bd986788296e", "patch": "@@ -1365,7 +1365,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     /// the crate numbers back to the original source crate.\n     ///\n     /// Scopes will end up as being totally bogus. This can actually\n-    /// be fixed through.\n+    /// be fixed though.\n     ///\n     /// Unboxed closures are cloned along with the function being\n     /// inlined, and all side tables use interned node IDs, so we"}, {"sha": "61fa08c462069a0c3ca5c1bc4ed5071135aedcd6", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=1e507d44505a336fb60ee1dbd121bd986788296e", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n             // ReFree rather than dumping Debug output on the user.\n             //\n             // We shouldn't really be having unification failures with ReVar\n-            // and ReLateBound through.\n+            // and ReLateBound though.\n             ty::ReSkolemized(..) | ty::ReVar(_) | ty::ReLateBound(..) => {\n                 (format!(\"lifetime {:?}\", region), None)\n             }"}, {"sha": "37b9d8aa645bcb6c94e098af49f2e251444091bf", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e507d44505a336fb60ee1dbd121bd986788296e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=1e507d44505a336fb60ee1dbd121bd986788296e", "patch": "@@ -177,6 +177,14 @@ impl CodeExtentData {\n }\n \n impl CodeExtent {\n+    #[inline]\n+    fn into_option(self) -> Option<CodeExtent> {\n+        if self == ROOT_CODE_EXTENT {\n+            None\n+        } else {\n+            Some(self)\n+        }\n+    }\n     pub fn node_id(&self, region_maps: &RegionMaps) -> ast::NodeId {\n         region_maps.code_extent_data(*self).node_id()\n     }\n@@ -325,7 +333,7 @@ impl RegionMaps {\n                 // have (bogus) NodeId-s that overlap items created during\n                 // inlining.\n                 // We probably shouldn't be creating bogus code extents\n-                // through.\n+                // though.\n                 let idx = *o.get();\n                 if parent == DUMMY_CODE_EXTENT {\n                     info!(\"CodeExtent({}) = {:?} [parent={}] BOGUS!\",\n@@ -413,10 +421,7 @@ impl RegionMaps {\n \n     pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n-        match self.scope_map.borrow()[id.0 as usize] {\n-            ROOT_CODE_EXTENT => None,\n-            c => Some(c)\n-        }\n+        self.scope_map.borrow()[id.0 as usize].into_option()\n     }\n \n     #[allow(dead_code)] // used in middle::cfg\n@@ -445,32 +450,33 @@ impl RegionMaps {\n             None => { }\n         }\n \n+        let scope_map : &[CodeExtent] = &self.scope_map.borrow();\n+        let code_extents: &[CodeExtentData] = &self.code_extents.borrow();\n+\n         // else, locate the innermost terminating scope\n         // if there's one. Static items, for instance, won't\n         // have an enclosing scope, hence no scope will be\n         // returned.\n+        let expr_extent = self.node_extent(expr_id);\n         // For some reason, the expr's scope itself is skipped here.\n-        let mut id = match self.opt_encl_scope(self.node_extent(expr_id)) {\n+        let mut id = match scope_map[expr_extent.0 as usize].into_option() {\n             Some(i) => i,\n-            None => { return None; }\n+            _ => return None\n         };\n \n-        loop { match self.opt_encl_scope(id) {\n-            Some(p) => {\n-                match self.code_extent_data(p) {\n-                    CodeExtentData::DestructionScope(..) => {\n-                        debug!(\"temporary_scope({:?}) = {:?} [enclosing]\",\n-                               expr_id, id);\n-                        return Some(id);\n-                    }\n-                    _ => id = p\n+        while let Some(p) = scope_map[id.0 as usize].into_option() {\n+            match code_extents[p.0 as usize] {\n+                CodeExtentData::DestructionScope(..) => {\n+                    debug!(\"temporary_scope({:?}) = {:?} [enclosing]\",\n+                           expr_id, id);\n+                    return Some(id);\n                 }\n+                _ => id = p\n             }\n-            None => {\n-                debug!(\"temporary_scope({:?}) = None\", expr_id);\n-                return None;\n-            }\n-        } }\n+        }\n+\n+        debug!(\"temporary_scope({:?}) = None\", expr_id);\n+        return None;\n     }\n \n     pub fn var_region(&self, id: ast::NodeId) -> ty::Region {\n@@ -591,24 +597,20 @@ impl RegionMaps {\n             let mut i = 0;\n             while i < 32 {\n                 buf[i] = scope;\n-                let superscope = scope_map[scope.0 as usize];\n-                if superscope == ROOT_CODE_EXTENT {\n-                    return &buf[..i+1];\n-                } else {\n-                    scope = superscope;\n+                match scope_map[scope.0 as usize].into_option() {\n+                    Some(superscope) => scope = superscope,\n+                    _ => return &buf[..i+1]\n                 }\n                 i += 1;\n             }\n \n             *vec = Vec::with_capacity(64);\n-            vec.extend((*buf).into_iter());\n+            vec.push_all(buf);\n             loop {\n                 vec.push(scope);\n-                let superscope = scope_map[scope.0 as usize];\n-                if superscope == ROOT_CODE_EXTENT {\n-                    return &*vec;\n-                } else {\n-                    scope = superscope;\n+                match scope_map[scope.0 as usize].into_option() {\n+                    Some(superscope) => scope = superscope,\n+                    _ => return &*vec\n                 }\n             }\n         }"}]}