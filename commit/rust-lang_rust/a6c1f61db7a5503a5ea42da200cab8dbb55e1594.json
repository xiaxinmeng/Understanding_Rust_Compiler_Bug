{"sha": "a6c1f61db7a5503a5ea42da200cab8dbb55e1594", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzFmNjFkYjdhNTUwM2E1ZWE0MmRhMjAwY2FiOGRiYjU1ZTE1OTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-14T08:22:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T08:22:52Z"}, "message": "Rollup merge of #71909 - Dolpheyn:doc-from-trait-for-option, r=steveklabnik\n\nDocument From trait for Option implementations\n\nAdd documentation for ```From``` trait for ```std::option::Option``` implementations\n\nThis PR solves a part of #51430 ( CC @skade )\n\nThis is my first PR ever in contributing for OSS. I'm happy to learn and make any changes if necessary :)", "tree": {"sha": "a056cfcb49c1dbad642a47dda072c29f036f3d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a056cfcb49c1dbad642a47dda072c29f036f3d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c1f61db7a5503a5ea42da200cab8dbb55e1594", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevP/cCRBK7hj4Ov3rIwAAdHIIAI7knXBRzIQSkA3Q4L2x9X6i\nUfOOM0KIPu1KQPPkhtDrs0a/taOipjD+K76YBSaEddyIQmLROgNzNT9hv7UVEUBG\nEs6yzJGja3q/Ndi51rgKy2JSbqSrzx4RoOaLOPB5Vd872gx2u290+6ibYXDahAKo\ncEXneLVF5wpFHjrupai6ZfM2/SY1SG8y8TjqOqiwUAPNKNfl0nZYAj2nuj83OkAA\nRhbe9ds55ejjuR4kPokpLkVVHj+cQ7gjmIg/fMP87FjMKSb344Bluw8bYDmxKijL\nxhex49zfdoKOPUjUDSKqNbrs+2fFxbCDiV3ArniIpCbDxZb0inBKIMKQYdtT7Lg=\n=7vFh\n-----END PGP SIGNATURE-----\n", "payload": "tree a056cfcb49c1dbad642a47dda072c29f036f3d27\nparent 720ec68435224a453ffeccb080c0d219df2e55c4\nparent 6c3856f3ec5bbcd1c748d01a463f04a8fef0bd6c\nauthor Ralf Jung <post@ralfj.de> 1589444572 +0200\ncommitter GitHub <noreply@github.com> 1589444572 +0200\n\nRollup merge of #71909 - Dolpheyn:doc-from-trait-for-option, r=steveklabnik\n\nDocument From trait for Option implementations\n\nAdd documentation for ```From``` trait for ```std::option::Option``` implementations\n\nThis PR solves a part of #51430 ( CC @skade )\n\nThis is my first PR ever in contributing for OSS. I'm happy to learn and make any changes if necessary :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c1f61db7a5503a5ea42da200cab8dbb55e1594", "html_url": "https://github.com/rust-lang/rust/commit/a6c1f61db7a5503a5ea42da200cab8dbb55e1594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c1f61db7a5503a5ea42da200cab8dbb55e1594/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "720ec68435224a453ffeccb080c0d219df2e55c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/720ec68435224a453ffeccb080c0d219df2e55c4", "html_url": "https://github.com/rust-lang/rust/commit/720ec68435224a453ffeccb080c0d219df2e55c4"}, {"sha": "6c3856f3ec5bbcd1c748d01a463f04a8fef0bd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3856f3ec5bbcd1c748d01a463f04a8fef0bd6c", "html_url": "https://github.com/rust-lang/rust/commit/6c3856f3ec5bbcd1c748d01a463f04a8fef0bd6c"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "e8483875c97e5b87eebea50b5b4bd253ab6914d5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1f61db7a5503a5ea42da200cab8dbb55e1594/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1f61db7a5503a5ea42da200cab8dbb55e1594/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a6c1f61db7a5503a5ea42da200cab8dbb55e1594", "patch": "@@ -1357,20 +1357,65 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n impl<T> From<T> for Option<T> {\n+    /// Copies `val` into a new `Some`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let o: Option<u8> = Option::from(67);\n+    ///\n+    /// assert_eq!(Some(67), o);\n+    /// ```\n     fn from(val: T) -> Option<T> {\n         Some(val)\n     }\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n+    /// Converts from `&Option<T>` to `Option<&T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Converts an `Option<`[`String`]`>` into an `Option<`[`usize`]`>`, preserving the original.\n+    /// The [`map`] method takes the `self` argument by value, consuming the original,\n+    /// so this technique uses `as_ref` to first take an `Option` to a reference\n+    /// to the value inside the original.\n+    ///\n+    /// [`map`]: ../../std/option/enum.Option.html#method.map\n+    /// [`String`]: ../../std/string/struct.String.html\n+    /// [`usize`]: ../../std/primitive.usize.html\n+    ///\n+    /// ```\n+    /// let s: Option<String> = Some(String::from(\"Hello, Rustaceans!\"));\n+    /// let o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());\n+    ///\n+    /// println!(\"Can still print s: {:?}\", s);\n+    ///\n+    /// assert_eq!(o, Some(18));\n+    /// ```\n     fn from(o: &'a Option<T>) -> Option<&'a T> {\n         o.as_ref()\n     }\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T> {\n+    /// Converts from `&mut Option<T>` to `Option<&mut T>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut s = Some(String::from(\"Hello\"));\n+    /// let o: Option<&mut String> = Option::from(&mut s);\n+    ///\n+    /// match o {\n+    ///     Some(t) => *t = String::from(\"Hello, Rustaceans!\"),\n+    ///     None => (),\n+    /// }\n+    ///\n+    /// assert_eq!(s, Some(String::from(\"Hello, Rustaceans!\")));\n+    /// ```\n     fn from(o: &'a mut Option<T>) -> Option<&'a mut T> {\n         o.as_mut()\n     }"}]}