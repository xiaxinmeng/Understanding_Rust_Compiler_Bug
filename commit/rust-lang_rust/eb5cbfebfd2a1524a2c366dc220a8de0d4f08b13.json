{"sha": "eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWNiZmViZmQyYTE1MjRhMmMzNjZkYzIyMGE4ZGUwZDRmMDhiMTM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-25T14:37:03Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-25T14:37:03Z"}, "message": "Take &Pat", "tree": {"sha": "43276ff26437e1777ca2d1d820cefabef15db03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43276ff26437e1777ca2d1d820cefabef15db03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "html_url": "https://github.com/rust-lang/rust/commit/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd7a9b723484115d447f68729f5074ea7cae409c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7a9b723484115d447f68729f5074ea7cae409c", "html_url": "https://github.com/rust-lang/rust/commit/cd7a9b723484115d447f68729f5074ea7cae409c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0f3d54e295f3e997497ed4c24b14acb820c050bf", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "patch": "@@ -20,7 +20,7 @@ pub type PatIdMap = HashMap<Ident, NodeId>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the NodeId of their namesake in the first pattern.\n-pub fn pat_id_map(dm: resolve::DefMap, pat: @Pat) -> PatIdMap {\n+pub fn pat_id_map(dm: resolve::DefMap, pat: &Pat) -> PatIdMap {\n     let mut map = HashMap::new();\n     do pat_bindings(dm, pat) |_bm, p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n@@ -52,7 +52,7 @@ pub fn pat_is_const(dm: resolve::DefMap, pat: &Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_binding(dm: resolve::DefMap, pat: @Pat) -> bool {\n+pub fn pat_is_binding(dm: resolve::DefMap, pat: &Pat) -> bool {\n     match pat.node {\n         PatIdent(*) => {\n             !pat_is_variant_or_struct(dm, pat) &&\n@@ -62,7 +62,7 @@ pub fn pat_is_binding(dm: resolve::DefMap, pat: @Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: @Pat) -> bool {\n+pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: &Pat) -> bool {\n     match pat.node {\n         PatIdent(*) => pat_is_binding(dm, pat),\n         PatWild | PatWildMulti => true,\n@@ -73,7 +73,7 @@ pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: @Pat) -> bool {\n /// Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n /// `match foo() { Some(a) => (), None => () }`\n pub fn pat_bindings(dm: resolve::DefMap,\n-                    pat: @Pat,\n+                    pat: &Pat,\n                     it: |BindingMode, NodeId, Span, &Path|) {\n     do walk_pat(pat) |p| {\n         match p.node {\n@@ -86,15 +86,15 @@ pub fn pat_bindings(dm: resolve::DefMap,\n     };\n }\n \n-pub fn pat_binding_ids(dm: resolve::DefMap, pat: @Pat) -> ~[NodeId] {\n+pub fn pat_binding_ids(dm: resolve::DefMap, pat: &Pat) -> ~[NodeId] {\n     let mut found = ~[];\n     pat_bindings(dm, pat, |_bm, b_id, _sp, _pt| found.push(b_id) );\n     return found;\n }\n \n /// Checks if the pattern contains any patterns that bind something to\n /// an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(*)`.\n-pub fn pat_contains_bindings(dm: resolve::DefMap, pat: @Pat) -> bool {\n+pub fn pat_contains_bindings(dm: resolve::DefMap, pat: &Pat) -> bool {\n     let mut contains_bindings = false;\n     do walk_pat(pat) |p| {\n         if pat_is_binding(dm, p) {"}, {"sha": "7191c5723f1738c06a49ef9490a0ba51bfdf1fa4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "patch": "@@ -636,7 +636,7 @@ pub fn is_item_impl(item: @ast::item) -> bool {\n     }\n }\n \n-pub fn walk_pat(pat: @Pat, it: |@Pat| -> bool) -> bool {\n+pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n     if !it(pat) {\n         return false;\n     }"}]}