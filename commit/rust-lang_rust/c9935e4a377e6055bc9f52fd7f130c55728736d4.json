{"sha": "c9935e4a377e6055bc9f52fd7f130c55728736d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTM1ZTRhMzc3ZTYwNTViYzlmNTJmZDdmMTMwYzU1NzI4NzM2ZDQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-20T00:32:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-21T09:00:57Z"}, "message": "Fix incremental compilation hashing.", "tree": {"sha": "559bc152ce30c9399dd28ae7b593093911aabec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559bc152ce30c9399dd28ae7b593093911aabec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9935e4a377e6055bc9f52fd7f130c55728736d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9935e4a377e6055bc9f52fd7f130c55728736d4", "html_url": "https://github.com/rust-lang/rust/commit/c9935e4a377e6055bc9f52fd7f130c55728736d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9935e4a377e6055bc9f52fd7f130c55728736d4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc74068642d288534df0d6c2a454663920c5e97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc74068642d288534df0d6c2a454663920c5e97d", "html_url": "https://github.com/rust-lang/rust/commit/cc74068642d288534df0d6c2a454663920c5e97d"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "4bad264ac8749d7c0b71ef12564d51d75c3cc52f", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c9935e4a377e6055bc9f52fd7f130c55728736d4/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9935e4a377e6055bc9f52fd7f130c55728736d4/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=c9935e4a377e6055bc9f52fd7f130c55728736d4", "patch": "@@ -18,7 +18,7 @@ use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n use syntax::tokenstream;\n use rustc::hir;\n@@ -247,6 +247,8 @@ enum SawExprComponent<'a> {\n     SawExprBinary(hir::BinOp_),\n     SawExprUnary(hir::UnOp),\n     SawExprLit(ast::LitKind),\n+    SawExprLitStr(InternedString, ast::StrStyle),\n+    SawExprLitFloat(InternedString, Option<ast::FloatTy>),\n     SawExprCast,\n     SawExprType,\n     SawExprIf,\n@@ -315,7 +317,7 @@ fn saw_expr<'a>(node: &'a Expr_,\n         ExprUnary(op, _)         => {\n             (SawExprUnary(op), unop_can_panic_at_runtime(op))\n         }\n-        ExprLit(ref lit)         => (SawExprLit(lit.node.clone()), false),\n+        ExprLit(ref lit)         => (saw_lit(lit), false),\n         ExprCast(..)             => (SawExprCast, false),\n         ExprType(..)             => (SawExprType, false),\n         ExprIf(..)               => (SawExprIf, false),\n@@ -342,6 +344,15 @@ fn saw_expr<'a>(node: &'a Expr_,\n     }\n }\n \n+fn saw_lit(lit: &ast::Lit) -> SawExprComponent<'static> {\n+    match lit.node {\n+        ast::LitKind::Str(s, style) => SawExprLitStr(s.as_str(), style),\n+        ast::LitKind::Float(s, ty) => SawExprLitFloat(s.as_str(), Some(ty)),\n+        ast::LitKind::FloatUnsuffixed(s) => SawExprLitFloat(s.as_str(), None),\n+        ref node @ _ => SawExprLit(node.clone()),\n+    }\n+}\n+\n #[derive(Hash)]\n enum SawItemComponent {\n     SawItemExternCrate,\n@@ -875,23 +886,16 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n \n         // ignoring span information, it doesn't matter here\n         self.hash_discriminant(&meta_item.node);\n-        let name = &*meta_item.name.as_str();\n+        meta_item.name.as_str().len().hash(self.st);\n+        meta_item.name.as_str().hash(self.st);\n+\n         match meta_item.node {\n-            ast::MetaItemKind::Word => {\n-                name.len().hash(self.st);\n-                name.hash(self.st);\n-            }\n-            ast::MetaItemKind::NameValue(ref lit) => {\n-                name.len().hash(self.st);\n-                name.hash(self.st);\n-                lit.node.hash(self.st);\n-            }\n+            ast::MetaItemKind::Word => {}\n+            ast::MetaItemKind::NameValue(ref lit) => saw_lit(lit).hash(self.st),\n             ast::MetaItemKind::List(ref items) => {\n-                name.len().hash(self.st);\n-                name.hash(self.st);\n                 // Sort subitems so the hash does not depend on their order\n                 let indices = self.indices_sorted_by(&items, |p| {\n-                    (p.name(), fnv::hash(&p.literal().map(|i| &i.node)))\n+                    (p.name().map(Symbol::as_str), fnv::hash(&p.literal().map(saw_lit)))\n                 });\n                 items.len().hash(self.st);\n                 for (index, &item_index) in indices.iter().enumerate() {\n@@ -903,7 +907,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                             self.hash_meta_item(meta_item);\n                         }\n                         ast::NestedMetaItemKind::Literal(ref lit) => {\n-                            lit.node.hash(self.st);\n+                            saw_lit(lit).hash(self.st);\n                         }\n                     }\n                 }"}]}