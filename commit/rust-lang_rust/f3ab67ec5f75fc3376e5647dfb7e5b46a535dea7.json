{"sha": "f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYWI2N2VjNWY3NWZjMzM3NmU1NjQ3ZGZiN2U1YjQ2YTUzNWRlYTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T02:45:10Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T23:32:09Z"}, "message": "syntax: add {read,emit}_enum_struct_variant{,_field}", "tree": {"sha": "083fcfea436e9d43ca32cf59a08dfa263e1bf91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083fcfea436e9d43ca32cf59a08dfa263e1bf91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "html_url": "https://github.com/rust-lang/rust/commit/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "html_url": "https://github.com/rust-lang/rust/commit/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "4a3447700bc8fbbcb1ad1f4328f0f741de7c096e", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "patch": "@@ -335,6 +335,20 @@ pub mod reader {\n             f()\n         }\n \n+        fn read_enum_struct_variant<T>(&self, _names: &[&str], f: &fn(uint) -> T) -> T {\n+            debug!(\"read_enum_struct_variant()\");\n+            let idx = self._next_uint(EsEnumVid);\n+            debug!(\"  idx=%u\", idx);\n+            do self.push_doc(self.next_doc(EsEnumBody)) {\n+                f(idx)\n+            }\n+        }\n+\n+        fn read_enum_struct_variant_field<T>(&self, name: &str, idx: uint, f: &fn() -> T) -> T {\n+            debug!(\"read_enum_struct_variant_arg(name=%?, idx=%u)\", name, idx);\n+            f()\n+        }\n+\n         fn read_struct<T>(&self, name: &str, _len: uint, f: &fn() -> T) -> T {\n             debug!(\"read_struct(name=%s)\", name);\n             f()\n@@ -636,13 +650,23 @@ pub mod writer {\n             self._emit_label(name);\n             self.wr_tag(EsEnum as uint, f)\n         }\n+\n         fn emit_enum_variant(&self, _v_name: &str, v_id: uint, _cnt: uint,\n                              f: &fn()) {\n             self._emit_tagged_uint(EsEnumVid, v_id);\n             self.wr_tag(EsEnumBody as uint, f)\n         }\n+\n         fn emit_enum_variant_arg(&self, _idx: uint, f: &fn()) { f() }\n \n+        fn emit_enum_struct_variant(&self, v_name: &str, v_id: uint, cnt: uint, f: &fn()) {\n+            self.emit_enum_variant(v_name, v_id, cnt, f)\n+        }\n+\n+        fn emit_enum_struct_variant_field(&self, _f_name: &str, idx: uint, f: &fn()) {\n+            self.emit_enum_variant_arg(idx, f)\n+        }\n+\n         fn emit_struct(&self, _name: &str, _len: uint, f: &fn()) { f() }\n         #[cfg(stage0)]\n         fn emit_field(&self, name: &str, _idx: uint, f: &fn()) {"}, {"sha": "f5cd8b4bd6830a1c1d1e0224118c28170e1999d4", "filename": "src/libstd/json.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "patch": "@@ -109,6 +109,7 @@ impl serialize::Encoder for Encoder {\n     fn emit_str(&self, v: &str) { self.wr.write_str(escape_str(v)) }\n \n     fn emit_enum(&self, _name: &str, f: &fn()) { f() }\n+\n     fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n         // enums are encoded as strings or vectors:\n         // Bunny => \"Bunny\"\n@@ -126,10 +127,18 @@ impl serialize::Encoder for Encoder {\n     }\n \n     fn emit_enum_variant_arg(&self, idx: uint, f: &fn()) {\n-        if (idx != 0) {self.wr.write_char(',');}\n+        if idx != 0 {self.wr.write_char(',');}\n         f();\n     }\n \n+    fn emit_enum_struct_variant(&self, name: &str, id: uint, cnt: uint, f: &fn()) {\n+        self.emit_enum_variant(name, id, cnt, f)\n+    }\n+\n+    fn emit_enum_struct_variant_field(&self, _field: &str, idx: uint, f: &fn()) {\n+        self.emit_enum_variant_arg(idx, f)\n+    }\n+\n     fn emit_struct(&self, _name: &str, _len: uint, f: &fn()) {\n         self.wr.write_char('{');\n         f();\n@@ -232,6 +241,7 @@ impl serialize::Encoder for PrettyEncoder {\n     fn emit_str(&self, v: &str) { self.wr.write_str(escape_str(v)); }\n \n     fn emit_enum(&self, _name: &str, f: &fn()) { f() }\n+\n     fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n         if cnt == 0 {\n             self.wr.write_str(escape_str(name));\n@@ -249,6 +259,7 @@ impl serialize::Encoder for PrettyEncoder {\n             self.wr.write_char(']');\n         }\n     }\n+\n     fn emit_enum_variant_arg(&self, idx: uint, f: &fn()) {\n         if idx != 0 {\n             self.wr.write_str(\",\\n\");\n@@ -257,6 +268,15 @@ impl serialize::Encoder for PrettyEncoder {\n         f()\n     }\n \n+    fn emit_enum_struct_variant(&self, name: &str, id: uint, cnt: uint, f: &fn()) {\n+        self.emit_enum_variant(name, id, cnt, f)\n+    }\n+\n+    fn emit_enum_struct_variant_field(&self, _field: &str, idx: uint, f: &fn()) {\n+        self.emit_enum_variant_arg(idx, f)\n+    }\n+\n+\n     fn emit_struct(&self, _name: &str, len: uint, f: &fn()) {\n         if len == 0 {\n             self.wr.write_str(\"{}\");\n@@ -864,6 +884,17 @@ impl serialize::Decoder for Decoder {\n         f()\n     }\n \n+    fn read_enum_struct_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T {\n+        debug!(\"read_enum_struct_variant(names=%?)\", names);\n+        self.read_enum_variant(names, f)\n+    }\n+\n+\n+    fn read_enum_struct_variant_field<T>(&self, name: &str, idx: uint, f: &fn() -> T) -> T {\n+        debug!(\"read_enum_struct_variant_field(name=%?, idx=%u)\", name, idx);\n+        self.read_enum_variant_arg(idx, f)\n+    }\n+\n     fn read_struct<T>(&self, name: &str, len: uint, f: &fn() -> T) -> T {\n         debug!(\"read_struct(name=%s, len=%u)\", name, len);\n         let value = f();"}, {"sha": "68ae9a6641726410abf5c2719c972b7ed2a706cd", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "patch": "@@ -45,8 +45,12 @@ pub trait Encoder {\n \n     // Compound types:\n     fn emit_enum(&self, name: &str, f: &fn());\n-    fn emit_enum_variant(&self, v_name: &str, v_id: uint, sz: uint, f: &fn());\n-    fn emit_enum_variant_arg(&self, idx: uint, f: &fn());\n+\n+    fn emit_enum_variant(&self, v_name: &str, v_id: uint, len: uint, f: &fn());\n+    fn emit_enum_variant_arg(&self, a_idx: uint, f: &fn());\n+\n+    fn emit_enum_struct_variant(&self, v_name: &str, v_id: uint, len: uint, f: &fn());\n+    fn emit_enum_struct_variant_field(&self, f_name: &str, f_idx: uint, f: &fn());\n \n     fn emit_struct(&self, name: &str, len: uint, f: &fn());\n     #[cfg(stage0)]\n@@ -97,8 +101,12 @@ pub trait Decoder {\n \n     // Compound types:\n     fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T;\n+\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n-    fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n+    fn read_enum_variant_arg<T>(&self, a_idx: uint, f: &fn() -> T) -> T;\n+\n+    fn read_enum_struct_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n+    fn read_enum_struct_variant_field<T>(&self, &f_name: &str, f_idx: uint, f: &fn() -> T) -> T;\n \n     fn read_struct<T>(&self, s_name: &str, len: uint, f: &fn() -> T) -> T;\n     #[cfg(stage0)]"}, {"sha": "e53a8f361b5fe47a4b909b1acb4b68342e01e124", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "patch": "@@ -1253,6 +1253,14 @@ mod test {\n             self.add_to_log(CallToEmitEnumVariantArg (idx)); f();\n         }\n \n+        fn emit_enum_struct_variant(&self, name: &str, id: uint, cnt: uint, f: &fn()) {\n+            self.emit_enum_variant(name, id, cnt, f)\n+        }\n+\n+        fn emit_enum_struct_variant_field(&self, _name: &str, idx: uint, f: &fn()) {\n+            self.emit_enum_variant_arg(idx, f)\n+        }\n+\n         fn emit_struct(&self, name: &str, +len: uint, f: &fn()) {\n             self.add_to_log(CallToEmitStruct (name.to_str(),len)); f();\n         }"}]}