{"sha": "94946db60d84d1a6a5d45dc7be7e778882637367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OTQ2ZGI2MGQ4NGQxYTZhNWQ0NWRjN2JlN2U3Nzg4ODI2MzczNjc=", "commit": {"author": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-13T09:46:41Z"}, "committer": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-13T09:46:41Z"}, "message": "Manually alligned comments.", "tree": {"sha": "1ec10afca93ea1f53d6bc81f3430fb0cfc6540c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec10afca93ea1f53d6bc81f3430fb0cfc6540c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94946db60d84d1a6a5d45dc7be7e778882637367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94946db60d84d1a6a5d45dc7be7e778882637367", "html_url": "https://github.com/rust-lang/rust/commit/94946db60d84d1a6a5d45dc7be7e778882637367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94946db60d84d1a6a5d45dc7be7e778882637367/comments", "author": null, "committer": null, "parents": [{"sha": "5943af31e7adbb6a713755dbfd4f60158d12b91e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5943af31e7adbb6a713755dbfd4f60158d12b91e", "html_url": "https://github.com/rust-lang/rust/commit/5943af31e7adbb6a713755dbfd4f60158d12b91e"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "12a5c1311705d34c9835ccba0dec2e0f2ba4ca97", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94946db60d84d1a6a5d45dc7be7e778882637367/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94946db60d84d1a6a5d45dc7be7e778882637367/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=94946db60d84d1a6a5d45dc7be7e778882637367", "patch": "@@ -56,8 +56,8 @@ pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) {\n                                            parts.next().map(|s| s.trim()),\n                                            parts.next()) {\n                 (Some(part0), None, None) => {\n-                // if the single argument is a log-level string or number,\n-                // treat that as a global fallback\n+                    // if the single argument is a log-level string or number,\n+                    // treat that as a global fallback\n                     match parse_log_level(part0) {\n                         Some(num) => (num, None),\n                         None => (::MAX_LOG_LEVEL, Some(part0)),"}]}