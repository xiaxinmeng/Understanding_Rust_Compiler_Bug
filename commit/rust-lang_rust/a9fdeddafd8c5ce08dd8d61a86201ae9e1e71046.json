{"sha": "a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "node_id": "C_kwDOAAsO6NoAKGE5ZmRlZGRhZmQ4YzVjZTA4ZGQ4ZDYxYTg2MjAxYWU5ZTFlNzEwNDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T20:33:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-27T20:33:34Z"}, "message": "Rollup merge of #105765 - estebank:range-typo, r=compiler-errors\n\nDetect likely `.` -> `..` typo in method calls\n\nFix #65015.", "tree": {"sha": "98b05a2bb5bb36407c6697975aa5af18ecab47b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b05a2bb5bb36407c6697975aa5af18ecab47b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjq1aeCRBK7hj4Ov3rIwAAMFsIAB4s0U5nlNoJHjqlYcC5KW79\nL4rD1i6ZTpINLaJVZoUsoLW1zcbiGFp3T7SsMOITwWF9QWQFHvTP+YtQu9PUi1yZ\nen99kpafpAreSKGGe0cO27Wkf7KvSa3E05OGW0cZsH9PY3wtvgQprclMeC1X3yPh\ngUDPsX3oNVukxHEP2DmKMHmMwJXsD9e0TtGqGf/nJKY0cxmm3HrOmVigOYVPD61V\nNZv+eIpT8bPgIla3Pn1FotnGz8IOIuOw3ORZNZ6u5O9I9GDVSSqk44ObZgXuPZp+\n3+ZZc8nkD9NpibLlZXyvcRY8kkaBC7dFjD5RTrqjd+ydmkam0Lpt09a86SqzkZ0=\n=/6Hc\n-----END PGP SIGNATURE-----\n", "payload": "tree 98b05a2bb5bb36407c6697975aa5af18ecab47b7\nparent 4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3\nparent 7e84273b7fcaa0f6578c97fd71e27453ef300c31\nauthor Michael Goulet <michael@errs.io> 1672173214 -0800\ncommitter GitHub <noreply@github.com> 1672173214 -0800\n\nRollup merge of #105765 - estebank:range-typo, r=compiler-errors\n\nDetect likely `.` -> `..` typo in method calls\n\nFix #65015.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "html_url": "https://github.com/rust-lang/rust/commit/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "html_url": "https://github.com/rust-lang/rust/commit/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3"}, {"sha": "7e84273b7fcaa0f6578c97fd71e27453ef300c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e84273b7fcaa0f6578c97fd71e27453ef300c31", "html_url": "https://github.com/rust-lang/rust/commit/7e84273b7fcaa0f6578c97fd71e27453ef300c31"}], "stats": {"total": 184, "additions": 177, "deletions": 7}, "files": [{"sha": "1360383a75a958d80ca77a32a80c5d3700f6af65", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "patch": "@@ -74,6 +74,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n+        self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1607,4 +1608,69 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    /// Identify when the user has written `foo..bar()` instead of `foo.bar()`.\n+    pub fn check_for_range_as_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        checked_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) {\n+        if !hir::is_range_literal(expr) {\n+            return;\n+        }\n+        let hir::ExprKind::Struct(\n+            hir::QPath::LangItem(LangItem::Range, ..),\n+            [start, end],\n+            _,\n+        ) = expr.kind else { return; };\n+        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        if let Some(hir::Node::ExprField(_)) = self.tcx.hir().find(parent) {\n+            // Ignore `Foo { field: a..Default::default() }`\n+            return;\n+        }\n+        let mut expr = end.expr;\n+        while let hir::ExprKind::MethodCall(_, rcvr, ..) = expr.kind {\n+            // Getting to the root receiver and asserting it is a fn call let's us ignore cases in\n+            // `src/test/ui/methods/issues/issue-90315.stderr`.\n+            expr = rcvr;\n+        }\n+        let hir::ExprKind::Call(method_name, _) = expr.kind else { return; };\n+        let ty::Adt(adt, _) = checked_ty.kind() else { return; };\n+        if self.tcx.lang_items().range_struct() != Some(adt.did()) {\n+            return;\n+        }\n+        if let ty::Adt(adt, _) = expected_ty.kind()\n+            && self.tcx.lang_items().range_struct() == Some(adt.did())\n+        {\n+            return;\n+        }\n+        // Check if start has method named end.\n+        let hir::ExprKind::Path(hir::QPath::Resolved(None, p)) = method_name.kind else { return; };\n+        let [hir::PathSegment { ident, .. }] = p.segments else { return; };\n+        let self_ty = self.typeck_results.borrow().expr_ty(start.expr);\n+        let Ok(_pick) = self.probe_for_name(\n+            probe::Mode::MethodCall,\n+            *ident,\n+            probe::IsSuggestion(true),\n+            self_ty,\n+            expr.hir_id,\n+            probe::ProbeScope::AllTraits,\n+        ) else { return; };\n+        let mut sugg = \".\";\n+        let mut span = start.expr.span.between(end.expr.span);\n+        if span.lo() + BytePos(2) == span.hi() {\n+            // There's no space between the start, the range op and the end, suggest removal which\n+            // will be more noticeable than the replacement of `..` with `.`.\n+            span = span.with_lo(span.lo() + BytePos(1));\n+            sugg = \"\";\n+        }\n+        err.span_suggestion_verbose(\n+            span,\n+            \"you likely meant to write a method call instead of a range\",\n+            sugg,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n }"}, {"sha": "49e069f58c979040d202ab131e729fd152a875f8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_errors::{DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n+use rustc_errors::{Applicability, DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -536,6 +536,9 @@ struct DiagnosticMetadata<'ast> {\n     in_assignment: Option<&'ast Expr>,\n     is_assign_rhs: bool,\n \n+    /// Used to detect possible `.` -> `..` typo when calling methods.\n+    in_range: Option<(&'ast Expr, &'ast Expr)>,\n+\n     /// If we are currently in a trait object definition. Used to point at the bounds when\n     /// encountering a struct or enum.\n     current_trait_object: Option<&'ast [ast::GenericBound]>,\n@@ -3320,17 +3323,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn smart_resolve_path_fragment(\n         &mut self,\n         qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         source: PathSource<'ast>,\n         finalize: Finalize,\n     ) -> PartialRes {\n-        debug!(\n-            \"smart_resolve_path_fragment(qself={:?}, path={:?}, finalize={:?})\",\n-            qself, path, finalize,\n-        );\n         let ns = source.namespace();\n \n         let Finalize { node_id, path_span, .. } = finalize;\n@@ -3341,8 +3341,28 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n                 let def_id = this.parent_scope.module.nearest_parent_mod();\n                 let instead = res.is_some();\n-                let suggestion =\n-                    if res.is_none() { this.report_missing_type_error(path) } else { None };\n+                let suggestion = if let Some((start, end)) = this.diagnostic_metadata.in_range\n+                    && path[0].ident.span.lo() == end.span.lo()\n+                {\n+                    let mut sugg = \".\";\n+                    let mut span = start.span.between(end.span);\n+                    if span.lo() + BytePos(2) == span.hi() {\n+                        // There's no space between the start, the range op and the end, suggest\n+                        // removal which will look better.\n+                        span = span.with_lo(span.lo() + BytePos(1));\n+                        sugg = \"\";\n+                    }\n+                    Some((\n+                        span,\n+                        \"you might have meant to write `.` instead of `..`\",\n+                        sugg.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    ))\n+                } else if res.is_none() {\n+                    this.report_missing_type_error(path)\n+                } else {\n+                    None\n+                };\n \n                 this.r.use_injections.push(UseError {\n                     err,\n@@ -4005,6 +4025,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.visit_expr(rhs);\n                 self.diagnostic_metadata.is_assign_rhs = false;\n             }\n+            ExprKind::Range(Some(ref start), Some(ref end), RangeLimits::HalfOpen) => {\n+                self.diagnostic_metadata.in_range = Some((start, end));\n+                self.resolve_expr(start, Some(expr));\n+                self.resolve_expr(end, Some(expr));\n+                self.diagnostic_metadata.in_range = None;\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "ac662edafe6b010d3c10a81524a2920ab48b0986", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs?ref=a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "patch": "@@ -0,0 +1,30 @@\n+fn as_ref() -> Option<Vec<u8>> {\n+    None\n+}\n+struct Type {\n+    option: Option<Vec<u8>>\n+}\n+trait Trait {\n+    fn foo(&self) -> Vec<u8>;\n+}\n+impl Trait for Option<Vec<u8>> {\n+    fn foo(&self) -> Vec<u8> {\n+        vec![1, 2, 3]\n+    }\n+}\n+\n+impl Type {\n+    fn method(&self) -> Option<Vec<u8>> {\n+        self.option..as_ref().map(|x| x)\n+        //~^ ERROR E0308\n+    }\n+    fn method2(&self) -> &u8 {\n+        self.option..foo().get(0)\n+        //~^ ERROR E0425\n+        //~| ERROR E0308\n+    }\n+}\n+\n+fn main() {\n+    let _ = Type { option: None }.method();\n+}"}, {"sha": "c84f94678914f5917bbeda9709bbd93f65c6bbfe", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr?ref=a9fdeddafd8c5ce08dd8d61a86201ae9e1e71046", "patch": "@@ -0,0 +1,48 @@\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/method-access-to-range-literal-typo.rs:22:22\n+   |\n+LL |         self.option..foo().get(0)\n+   |                      ^^^ not found in this scope\n+   |\n+help: you might have meant to write `.` instead of `..`\n+   |\n+LL -         self.option..foo().get(0)\n+LL +         self.option.foo().get(0)\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/method-access-to-range-literal-typo.rs:18:9\n+   |\n+LL |     fn method(&self) -> Option<Vec<u8>> {\n+   |                         --------------- expected `Option<Vec<u8>>` because of return type\n+LL |         self.option..as_ref().map(|x| x)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `Range`\n+   |\n+   = note: expected enum `Option<_>`\n+            found struct `std::ops::Range<Option<_>>`\n+help: you likely meant to write a method call instead of a range\n+   |\n+LL -         self.option..as_ref().map(|x| x)\n+LL +         self.option.as_ref().map(|x| x)\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/method-access-to-range-literal-typo.rs:22:9\n+   |\n+LL |     fn method2(&self) -> &u8 {\n+   |                          --- expected `&u8` because of return type\n+LL |         self.option..foo().get(0)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&u8`, found struct `Range`\n+   |\n+   = note: expected reference `&u8`\n+                 found struct `std::ops::Range<Option<Vec<u8>>>`\n+help: you likely meant to write a method call instead of a range\n+   |\n+LL -         self.option..foo().get(0)\n+LL +         self.option.foo().get(0)\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}]}