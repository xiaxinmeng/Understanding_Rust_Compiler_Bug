{"sha": "a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWI1NjczZThmNWQxZjhkNTY5YmM3Yzk4NGEyOTNhOTcyYTdiYjA=", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-17T06:31:14Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-17T06:31:14Z"}, "message": "Follow established ErrorEmitted pattern", "tree": {"sha": "61eb44cada0b64cd0fbf137bb2cc5f2600755330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61eb44cada0b64cd0fbf137bb2cc5f2600755330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0103f5df8fff2ccdbfb03adfe432b69c7840cf42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0103f5df8fff2ccdbfb03adfe432b69c7840cf42", "html_url": "https://github.com/rust-lang/rust/commit/0103f5df8fff2ccdbfb03adfe432b69c7840cf42"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "1080d9c2c37eec862c0ef5844fbba5498bc3425c", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "patch": "@@ -121,11 +121,8 @@ impl Expander {\n                 err.get_or_insert(e);\n             })?;\n         let call_id = match call_id {\n-            Some(it) => it,\n-            None => {\n-                if err.is_none() {\n-                    log::warn!(\"no error despite `as_call_id_with_errors` returning `None`\");\n-                }\n+            Ok(it) => it,\n+            Err(_) => {\n                 return Ok(ExpandResult { value: None, err });\n             }\n         };"}, {"sha": "6758411a0c1ab22184e6a60ef761e6abd6ec7519", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "patch": "@@ -58,7 +58,7 @@ use std::{\n use base_db::{impl_intern_key, salsa, CrateId};\n use hir_expand::{\n     ast_id_map::FileAstId,\n-    eager::{expand_eager_macro, ErrorEmitted},\n+    eager::{expand_eager_macro, ErrorEmitted, ErrorSink},\n     hygiene::Hygiene,\n     AstId, HirFileId, InFile, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n@@ -583,7 +583,7 @@ pub trait AsMacroCall {\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n-        self.as_call_id_with_errors(db, krate, resolver, &mut |_| ()).ok()?\n+        self.as_call_id_with_errors(db, krate, resolver, &mut |_| ()).ok()?.ok()\n     }\n \n     fn as_call_id_with_errors(\n@@ -592,7 +592,7 @@ pub trait AsMacroCall {\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n         error_sink: &mut dyn FnMut(mbe::ExpandError),\n-    ) -> Result<Option<MacroCallId>, UnresolvedMacro>;\n+    ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro>;\n }\n \n impl AsMacroCall for InFile<&ast::MacroCall> {\n@@ -601,18 +601,19 @@ impl AsMacroCall for InFile<&ast::MacroCall> {\n         db: &dyn db::DefDatabase,\n         krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n-        error_sink: &mut dyn FnMut(mbe::ExpandError),\n-    ) -> Result<Option<MacroCallId>, UnresolvedMacro> {\n+        mut error_sink: &mut dyn FnMut(mbe::ExpandError),\n+    ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro> {\n         let ast_id = AstId::new(self.file_id, db.ast_id_map(self.file_id).ast_id(self.value));\n         let h = Hygiene::new(db.upcast(), self.file_id);\n         let path = self.value.path().and_then(|path| path::ModPath::from_src(path, &h));\n \n-        let path = match path {\n-            None => {\n-                error_sink(mbe::ExpandError::Other(\"malformed macro invocation\".into()));\n-                return Ok(None);\n+        let path = match error_sink\n+            .option(path, || mbe::ExpandError::Other(\"malformed macro invocation\".into()))\n+        {\n+            Ok(path) => path,\n+            Err(error) => {\n+                return Ok(Err(error));\n             }\n-            Some(path) => path,\n         };\n \n         macro_call_as_call_id(\n@@ -622,7 +623,6 @@ impl AsMacroCall for InFile<&ast::MacroCall> {\n             resolver,\n             error_sink,\n         )\n-        .map(Result::ok)\n     }\n }\n "}, {"sha": "dc618a9ee1f5354ede4c1f75aaec77a33290b43a", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79b5673e8f5d1f8d569bc7c984a293a972a7bb0/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=a79b5673e8f5d1f8d569bc7c984a293a972a7bb0", "patch": "@@ -35,7 +35,7 @@ pub struct ErrorEmitted {\n     _private: (),\n }\n \n-trait ErrorSink {\n+pub trait ErrorSink {\n     fn emit(&mut self, err: mbe::ExpandError);\n \n     fn option<T>("}]}