{"sha": "4a439769ecd292106d62270d171568ac7aa0164b", "node_id": "C_kwDOAAsO6NoAKDRhNDM5NzY5ZWNkMjkyMTA2ZDYyMjcwZDE3MTU2OGFjN2FhMDE2NGI", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2021-03-17T16:23:09Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2021-10-22T07:58:24Z"}, "message": "Implement split_array and split_array_mut", "tree": {"sha": "7ea0a2103202a69570c9cba1727af2a500f0e6a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea0a2103202a69570c9cba1727af2a500f0e6a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a439769ecd292106d62270d171568ac7aa0164b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a439769ecd292106d62270d171568ac7aa0164b", "html_url": "https://github.com/rust-lang/rust/commit/4a439769ecd292106d62270d171568ac7aa0164b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a439769ecd292106d62270d171568ac7aa0164b/comments", "author": null, "committer": null, "parents": [{"sha": "42983a28ab3c70728da7a9b932b667c978dd898d", "url": "https://api.github.com/repos/rust-lang/rust/commits/42983a28ab3c70728da7a9b932b667c978dd898d", "html_url": "https://github.com/rust-lang/rust/commit/42983a28ab3c70728da7a9b932b667c978dd898d"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "73340fda2cbccc26b2a387039dabdb757a484534", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=4a439769ecd292106d62270d171568ac7aa0164b", "patch": "@@ -500,6 +500,84 @@ impl<T, const N: usize> [T; N] {\n         // items.\n         unsafe { collect_into_array_unchecked(&mut self.iter_mut()) }\n     }\n+\n+    /// Divides one array reference into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, M)` (excluding\n+    /// the index `M` itself) and the second will contain all\n+    /// indices from `[M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = [1, 2, 3, 4, 5, 6];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.split_array_ref::<0>();\n+    ///    assert_eq!(left, &[]);\n+    ///    assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_array_ref::<2>();\n+    ///     assert_eq!(left, &[1, 2]);\n+    ///     assert_eq!(right, &[3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_array_ref::<6>();\n+    ///     assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n+    ///     assert_eq!(right, &[]);\n+    /// }\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn split_array_ref<const M: usize>(&self) -> (&[T; M], &[T]) {\n+        (&self[..]).split_array_ref::<M>()\n+    }\n+\n+    /// Divides one mutable array reference into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, M)` (excluding\n+    /// the index `M` itself) and the second will contain all\n+    /// indices from `[M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// let (left, right) = v.split_array_mut::<2>();\n+    /// assert_eq!(left, &mut [1, 0][..]);\n+    /// assert_eq!(right, &mut [3, 0, 5, 6]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn split_array_mut<const M: usize>(&mut self) -> (&mut [T; M], &mut [T]) {\n+        (&mut self[..]).split_array_mut::<M>()\n+    }\n }\n \n /// Pulls `N` items from `iter` and returns them as an array. If the iterator"}, {"sha": "aaa00653b99c274cc6fda272fe74402d3143bfaa", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=4a439769ecd292106d62270d171568ac7aa0164b", "patch": "@@ -1665,6 +1665,80 @@ impl<T> [T] {\n         unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }\n     }\n \n+    /// Divides one slice into an array and a remainder slice at an index.\n+    ///\n+    /// The array will contain all indices from `[0, N)` (excluding\n+    /// the index `N` itself) and the slice will contain all\n+    /// indices from `[N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = &[1, 2, 3, 4, 5, 6][..];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.split_array_ref::<0>();\n+    ///    assert_eq!(left, &[]);\n+    ///    assert_eq!(right, [1, 2, 3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_array_ref::<2>();\n+    ///     assert_eq!(left, &[1, 2]);\n+    ///     assert_eq!(right, [3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_array_ref::<6>();\n+    ///     assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n+    ///     assert_eq!(right, []);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn split_array_ref<const N: usize>(&self) -> (&[T; N], &[T]) {\n+        let (a, b) = self.split_at(N);\n+        // SAFETY: a points to [T; N]? Yes it's [T] of length N (checked by split_at)\n+        unsafe { (&*(a.as_ptr() as *const [T; N]), b) }\n+    }\n+\n+    /// Divides one mutable slice into an array and a remainder slice at an index.\n+    ///\n+    /// The array will contain all indices from `[0, N)` (excluding\n+    /// the index `N` itself) and the slice will contain all\n+    /// indices from `[N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = &mut [1, 0, 3, 0, 5, 6][..];\n+    /// let (left, right) = v.split_array_mut::<2>();\n+    /// assert_eq!(left, &mut [1, 0]);\n+    /// assert_eq!(right, [3, 0, 5, 6]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn split_array_mut<const N: usize>(&mut self) -> (&mut [T; N], &mut [T]) {\n+        let (a, b) = self.split_at_mut(N);\n+        // SAFETY: a points to [T; N]? Yes it's [T] of length N (checked by split_at_mut)\n+        unsafe { (&mut *(a.as_mut_ptr() as *mut [T; N]), b) }\n+    }\n+\n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`. The matched element is not contained in the subslices.\n     ///"}, {"sha": "1d4307ca0fbda2bc54484822c0a2ce5ba9ad81d7", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=4a439769ecd292106d62270d171568ac7aa0164b", "patch": "@@ -436,3 +436,36 @@ where\n     std::panic::set_hook(prev_hook);\n     result\n }\n+\n+#[test]\n+fn array_split_array_mut() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    {\n+        let (left, right) = v.split_array_mut::<0>();\n+        assert_eq!(left, &mut []);\n+        assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    }\n+\n+    {\n+        let (left, right) = v.split_array_mut::<6>();\n+        assert_eq!(left, &mut [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, &mut []);\n+    }\n+}\n+\n+#[should_panic]\n+#[test]\n+fn array_split_array_ref_out_of_bounds() {\n+    let v = [1, 2, 3, 4, 5, 6];\n+\n+    v.split_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn array_split_array_mut_out_of_bounds() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    v.split_array_mut::<7>();\n+}"}, {"sha": "507a79c3de1c480b2f01bdb7b8d9727d93295baa", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=4a439769ecd292106d62270d171568ac7aa0164b", "patch": "@@ -70,6 +70,7 @@\n #![feature(integer_atomics)]\n #![feature(int_roundings)]\n #![feature(slice_group_by)]\n+#![feature(split_array)]\n #![feature(trusted_random_access)]\n #![feature(unsize)]\n #![feature(unzip_option)]"}, {"sha": "7a008345243c0d6265bd254adf3313fa6431188b", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a439769ecd292106d62270d171568ac7aa0164b/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=4a439769ecd292106d62270d171568ac7aa0164b", "patch": "@@ -2191,3 +2191,36 @@ mod swap_panics {\n         x.swap(2, 5);\n     }\n }\n+\n+#[test]\n+fn slice_split_array_mut() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    {\n+        let (left, right) = v.split_array_mut::<0>();\n+        assert_eq!(left, &mut []);\n+        assert_eq!(right, [1, 2, 3, 4, 5, 6]);\n+    }\n+\n+    {\n+        let (left, right) = v.split_array_mut::<6>();\n+        assert_eq!(left, &mut [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, []);\n+    }\n+}\n+\n+#[should_panic]\n+#[test]\n+fn slice_split_array_ref_out_of_bounds() {\n+    let v = &[1, 2, 3, 4, 5, 6][..];\n+\n+    v.split_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn slice_split_array_mut_out_of_bounds() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    v.split_array_mut::<7>();\n+}"}]}