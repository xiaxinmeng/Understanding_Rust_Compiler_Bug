{"sha": "3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTU5YzZkNWJhNDg2NDNlODk4MmU3Y2FkYmMxNzQ1ZTlmMjlmNjI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T23:43:42Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T23:49:49Z"}, "message": "Revert linked failure (renaming runtime fns)\nRevert \"Rename runtime *_locked() and *_unlocked() fns to *_inner() (closes #2864)\"\n\nThis reverts commit b897696a3abde84e57cda3f6e4267be3b647835c.", "tree": {"sha": "bb28040b138d3ef6edb719904bfb733c265754e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb28040b138d3ef6edb719904bfb733c265754e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "html_url": "https://github.com/rust-lang/rust/commit/3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b159c6d5ba48643e8982e7cadbc1745e9f29f62/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a10f52c5793b358a16e3e98db4b16c65ba8e254b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10f52c5793b358a16e3e98db4b16c65ba8e254b", "html_url": "https://github.com/rust-lang/rust/commit/a10f52c5793b358a16e3e98db4b16c65ba8e254b"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "250e075d2f993ba726877768b6112516317cf99f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b159c6d5ba48643e8982e7cadbc1745e9f29f62/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3b159c6d5ba48643e8982e7cadbc1745e9f29f62/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "patch": "@@ -231,11 +231,11 @@ void rust_task::start()\n bool\n rust_task::must_fail_from_being_killed() {\n     scoped_lock with(lifecycle_lock);\n-    return must_fail_from_being_killed_inner();\n+    return must_fail_from_being_killed_unlocked();\n }\n \n bool\n-rust_task::must_fail_from_being_killed_inner() {\n+rust_task::must_fail_from_being_killed_unlocked() {\n     lifecycle_lock.must_have_lock();\n     return killed && !reentered_rust_stack && disallow_kill == 0;\n }\n@@ -275,8 +275,8 @@ rust_task::kill() {\n     // Unblock the task so it can unwind.\n \n     if (state == task_state_blocked &&\n-        must_fail_from_being_killed_inner()) {\n-        wakeup_inner(cond);\n+        must_fail_from_being_killed_unlocked()) {\n+        wakeup_locked(cond);\n     }\n \n     LOG(this, task, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n@@ -377,10 +377,10 @@ void\n rust_task::transition(rust_task_state src, rust_task_state dst,\n                       rust_cond *cond, const char* cond_name) {\n     scoped_lock with(lifecycle_lock);\n-    transition_inner(src, dst, cond, cond_name);\n+    transition_locked(src, dst, cond, cond_name);\n }\n \n-void rust_task::transition_inner(rust_task_state src, rust_task_state dst,\n+void rust_task::transition_locked(rust_task_state src, rust_task_state dst,\n                                   rust_cond *cond, const char* cond_name) {\n     lifecycle_lock.must_have_lock();\n     sched_loop->transition(this, src, dst, cond, cond_name);\n@@ -398,12 +398,12 @@ rust_task::set_state(rust_task_state state,\n bool\n rust_task::block(rust_cond *on, const char* name) {\n     scoped_lock with(lifecycle_lock);\n-    return block_inner(on, name);\n+    return block_locked(on, name);\n }\n \n bool\n-rust_task::block_inner(rust_cond *on, const char* name) {\n-    if (must_fail_from_being_killed_inner()) {\n+rust_task::block_locked(rust_cond *on, const char* name) {\n+    if (must_fail_from_being_killed_unlocked()) {\n         // We're already going to die. Don't block. Tell the task to fail\n         return false;\n     }\n@@ -413,25 +413,25 @@ rust_task::block_inner(rust_cond *on, const char* name) {\n     assert(cond == NULL && \"Cannot block an already blocked task.\");\n     assert(on != NULL && \"Cannot block on a NULL object.\");\n \n-    transition_inner(task_state_running, task_state_blocked, on, name);\n+    transition_locked(task_state_running, task_state_blocked, on, name);\n \n     return true;\n }\n \n void\n rust_task::wakeup(rust_cond *from) {\n     scoped_lock with(lifecycle_lock);\n-    wakeup_inner(from);\n+    wakeup_locked(from);\n }\n \n void\n-rust_task::wakeup_inner(rust_cond *from) {\n+rust_task::wakeup_locked(rust_cond *from) {\n     assert(cond != NULL && \"Cannot wake up unblocked task.\");\n     LOG(this, task, \"Blocked on 0x%\" PRIxPTR \" woken up on 0x%\" PRIxPTR,\n                         (uintptr_t) cond, (uintptr_t) from);\n     assert(cond == from && \"Cannot wake up blocked task on wrong condition.\");\n \n-    transition_inner(task_state_blocked, task_state_running, NULL, \"none\");\n+    transition_locked(task_state_blocked, task_state_running, NULL, \"none\");\n }\n \n void\n@@ -685,7 +685,7 @@ rust_task::wait_event(bool *killed) {\n     scoped_lock with(lifecycle_lock);\n \n     if(!event_reject) {\n-        block_inner(&event_cond, \"waiting on event\");\n+        block_locked(&event_cond, \"waiting on event\");\n         lifecycle_lock.unlock();\n         yield(killed);\n         lifecycle_lock.lock();\n@@ -702,7 +702,7 @@ rust_task::signal_event(void *event) {\n     this->event = event;\n     event_reject = true;\n     if(task_state_blocked == state) {\n-        wakeup_inner(&event_cond);\n+        wakeup_locked(&event_cond);\n     }\n }\n "}, {"sha": "82896bf27b4e64b9a75d22a05cb76b1b6913e10b", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b159c6d5ba48643e8982e7cadbc1745e9f29f62/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/3b159c6d5ba48643e8982e7cadbc1745e9f29f62/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=3b159c6d5ba48643e8982e7cadbc1745e9f29f62", "patch": "@@ -208,10 +208,10 @@ rust_task : public kernel_owned<rust_task>\n \n     void transition(rust_task_state src, rust_task_state dst,\n                     rust_cond *cond, const char* cond_name);\n-    void transition_inner(rust_task_state src, rust_task_state dst,\n+    void transition_locked(rust_task_state src, rust_task_state dst,\n                            rust_cond *cond, const char* cond_name);\n \n-    bool must_fail_from_being_killed_inner();\n+    bool must_fail_from_being_killed_unlocked();\n     // Called by rust_task_fail to unwind on failure\n     void begin_failure(char const *expr,\n                        char const *file,\n@@ -226,8 +226,8 @@ rust_task : public kernel_owned<rust_task>\n                                char const *file,\n                                size_t line);\n \n-    bool block_inner(rust_cond *on, const char* name);\n-    void wakeup_inner(rust_cond *from);\n+    bool block_locked(rust_cond *on, const char* name);\n+    void wakeup_locked(rust_cond *from);\n \n public:\n "}]}