{"sha": "94cf23bfc4738990e6c74424450bc40f0beb2b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Y2YyM2JmYzQ3Mzg5OTBlNmM3NDQyNDQ1MGJjNDBmMGJlYjJiNjI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-24T21:04:53Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-24T21:04:53Z"}, "message": "Merge #1029\n\n1029: Add impl members assist shold not copy docstrings, attrs and default methods r=matklad a=gfreezy\n\n1. `add missing impl members` assist should not copy docstrings, attrs and default methods\r\n2. Add `add impl default members` assist\r\n\r\nfixed #1022\n\nCo-authored-by: gfreezy <gfreezy@gmail.com>", "tree": {"sha": "149e3aa0d6717e3159fc149ba03b7d1633368f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149e3aa0d6717e3159fc149ba03b7d1633368f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94cf23bfc4738990e6c74424450bc40f0beb2b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94cf23bfc4738990e6c74424450bc40f0beb2b62", "html_url": "https://github.com/rust-lang/rust/commit/94cf23bfc4738990e6c74424450bc40f0beb2b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94cf23bfc4738990e6c74424450bc40f0beb2b62/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "449eea11617e79c90b5d8de0959ef2bbe2a5d730", "url": "https://api.github.com/repos/rust-lang/rust/commits/449eea11617e79c90b5d8de0959ef2bbe2a5d730", "html_url": "https://github.com/rust-lang/rust/commit/449eea11617e79c90b5d8de0959ef2bbe2a5d730"}, {"sha": "02383b91d51c160f4f91aa9da7d2a7c11482b76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02383b91d51c160f4f91aa9da7d2a7c11482b76e", "html_url": "https://github.com/rust-lang/rust/commit/02383b91d51c160f4f91aa9da7d2a7c11482b76e"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "e13f54c4fa11634d5d97e6797f2409866befd9b7", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 99, "deletions": 24, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/94cf23bfc4738990e6c74424450bc40f0beb2b62/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cf23bfc4738990e6c74424450bc40f0beb2b62/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=94cf23bfc4738990e6c74424450bc40f0beb2b62", "patch": "@@ -9,7 +9,35 @@ use ra_fmt::{leading_indent, reindent};\n \n use itertools::Itertools;\n \n-pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+enum AddMissingImplMembersMode {\n+    DefaultMethodsOnly,\n+    NoDefaultMethods,\n+}\n+\n+pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    add_missing_impl_members_inner(\n+        ctx,\n+        AddMissingImplMembersMode::NoDefaultMethods,\n+        \"add_impl_missing_members\",\n+        \"add missing impl members\",\n+    )\n+}\n+\n+pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    add_missing_impl_members_inner(\n+        ctx,\n+        AddMissingImplMembersMode::DefaultMethodsOnly,\n+        \"add_impl_default_members\",\n+        \"add impl default members\",\n+    )\n+}\n+\n+fn add_missing_impl_members_inner(\n+    mut ctx: AssistCtx<impl HirDatabase>,\n+    mode: AddMissingImplMembersMode,\n+    assist_id: &'static str,\n+    label: &'static str,\n+) -> Option<Assist> {\n     let impl_node = ctx.node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n \n@@ -35,14 +63,18 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         trait_fns\n             .into_iter()\n             .filter(|t| def_name(t).is_some())\n+            .filter(|t| match mode {\n+                AddMissingImplMembersMode::DefaultMethodsOnly => t.body().is_some(),\n+                AddMissingImplMembersMode::NoDefaultMethods => t.body().is_none(),\n+            })\n             .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n             .collect()\n     };\n     if missing_fns.is_empty() {\n         return None;\n     }\n \n-    ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add missing impl members\", |edit| {\n+    ctx.add_action(AssistId(assist_id), label, |edit| {\n         let (parent_indent, indent) = {\n             // FIXME: Find a way to get the indent already used in the file.\n             // Now, we copy the indent of first item or indent with 4 spaces relative to impl block\n@@ -103,11 +135,13 @@ fn build_func_body(def: &ast::FnDef) -> String {\n     let mut buf = String::new();\n \n     for child in def.syntax().children() {\n-        if child.kind() == SyntaxKind::SEMI {\n-            buf.push_str(\" { unimplemented!() }\")\n-        } else {\n-            child.text().push_to(&mut buf);\n-        }\n+        match (child.prev_sibling().map(|c| c.kind()), child.kind()) {\n+            (_, SyntaxKind::SEMI) => buf.push_str(\" { unimplemented!() }\"),\n+            (_, SyntaxKind::ATTR) | (_, SyntaxKind::COMMENT) => {}\n+            (Some(SyntaxKind::ATTR), SyntaxKind::WHITESPACE)\n+            | (Some(SyntaxKind::COMMENT), SyntaxKind::WHITESPACE) => {}\n+            _ => child.text().push_to(&mut buf),\n+        };\n     }\n \n     buf.trim_end().to_string()\n@@ -180,8 +214,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) -> u32 { 42 }<|>\n+    fn foo(&self) { unimplemented!() }<|>\n }\",\n         );\n     }\n@@ -193,7 +226,7 @@ impl Foo for S {\n             \"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S {<|>}\",\n+impl Foo for S { <|> }\",\n             \"\n trait Foo { fn foo(&self); }\n struct S;\n@@ -232,8 +265,8 @@ impl Foo for S { <|> }\",\n     }\n \n     #[test]\n-    fn test_ignore_unnamed_trait_members() {\n-        check_assist(\n+    fn test_ignore_unnamed_trait_members_and_default_methods() {\n+        check_assist_not_applicable(\n             add_missing_impl_members,\n             \"\n trait Foo {\n@@ -242,15 +275,6 @@ trait Foo {\n }\n struct S;\n impl Foo for S { <|> }\",\n-            \"\n-trait Foo {\n-    fn (arg: u32);\n-    fn valid(some: u32) -> bool { false }\n-}\n-struct S;\n-impl Foo for S {\n-    fn valid(some: u32) -> bool { false }<|>\n-}\",\n         )\n     }\n \n@@ -260,7 +284,7 @@ impl Foo for S {\n             add_missing_impl_members,\n             \"\n trait Foo {\n-    fn valid(some: u32) -> bool { false }\n+    fn valid(some: u32) -> bool;\n }\n struct S;\n \n@@ -269,15 +293,66 @@ mod my_mod {\n }\",\n             \"\n trait Foo {\n-    fn valid(some: u32) -> bool { false }\n+    fn valid(some: u32) -> bool;\n }\n struct S;\n \n mod my_mod {\n     impl crate::Foo for S {\n-        fn valid(some: u32) -> bool { false }<|>\n+        fn valid(some: u32) -> bool { unimplemented!() }<|>\n+    }\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_with_docstring_and_attrs() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+#[doc(alias = \"test alias\")]\n+trait Foo {\n+    /// doc string\n+    #[must_use]\n+    fn foo(&self);\n+}\n+struct S;\n+impl Foo for S {}<|>\"#,\n+            r#\"\n+#[doc(alias = \"test alias\")]\n+trait Foo {\n+    /// doc string\n+    #[must_use]\n+    fn foo(&self);\n+}\n+struct S;\n+impl Foo for S {\n+    fn foo(&self) { unimplemented!() }<|>\n+}\"#,\n+        )\n     }\n+\n+    #[test]\n+    fn test_default_methods() {\n+        check_assist(\n+            add_missing_default_members,\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+    fn foo(some: u32) -> bool;\n+}\n+struct S;\n+impl Foo for S { <|> }\",\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+    fn foo(some: u32) -> bool;\n+}\n+struct S;\n+impl Foo for S {\n+    fn valid(some: u32) -> bool { false }<|>\n }\",\n         )\n     }\n+\n }"}, {"sha": "fc36e8cc97f72270b31bc93021b0f3860785de93", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94cf23bfc4738990e6c74424450bc40f0beb2b62/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cf23bfc4738990e6c74424450bc40f0beb2b62/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=94cf23bfc4738990e6c74424450bc40f0beb2b62", "patch": "@@ -112,6 +112,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         remove_dbg::remove_dbg,\n         auto_import::auto_import,\n         add_missing_impl_members::add_missing_impl_members,\n+        add_missing_impl_members::add_missing_default_members,\n     ]\n }\n "}]}