{"sha": "7f4599a84822345115411d1aad4a7c3c4a66142f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDU5OWE4NDgyMjM0NTExNTQxMWQxYWFkNGE3YzNjNGE2NjE0MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-11T22:03:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-11T22:03:46Z"}, "message": "Auto merge of #6557 - rail-rain:extending_cast_ptr_alignment, r=phansch\n\nCatch `pointer::cast` too in `cast_ptr_alignment`\n\nFixes #4708\n\nAlthough there were some discussion in the issue, this PR implements the original feature. I think `cast_ptr_alignment` should exist as it is, separated from `ptr_as_ptr`.\n\n---\n\nchangelog: Extend `cast_ptr_alignment` lint for the `pointer::cast` method", "tree": {"sha": "fe7972ec2b8d19c573dd243f6b8170c0416c4510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7972ec2b8d19c573dd243f6b8170c0416c4510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f4599a84822345115411d1aad4a7c3c4a66142f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4599a84822345115411d1aad4a7c3c4a66142f", "html_url": "https://github.com/rust-lang/rust/commit/7f4599a84822345115411d1aad4a7c3c4a66142f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f4599a84822345115411d1aad4a7c3c4a66142f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eed27f374e0c67e289c83cff47f251ba0ab853c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eed27f374e0c67e289c83cff47f251ba0ab853c", "html_url": "https://github.com/rust-lang/rust/commit/1eed27f374e0c67e289c83cff47f251ba0ab853c"}, {"sha": "53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "html_url": "https://github.com/rust-lang/rust/commit/53f87310cd2fd965daf22f155cb4a2536ef8c8c6"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "75042d846d87206ec4afde6f8d25b06b0b42c8af", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f4599a84822345115411d1aad4a7c3c4a66142f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4599a84822345115411d1aad4a7c3c4a66142f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7f4599a84822345115411d1aad4a7c3c4a66142f", "patch": "@@ -8,7 +8,6 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -33,9 +32,9 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n-    last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args, multispan_sugg,\n-    numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_hir_ty_cfg_dependant,\n+    is_type_diagnostic_item, last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args,\n+    multispan_sugg, numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n     snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then, unsext,\n };\n@@ -1282,8 +1281,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts from a less-strictly-aligned pointer to a\n-    /// more-strictly-aligned pointer\n+    /// **What it does:** Checks for casts, using `as` or `pointer::cast`,\n+    /// from a less-strictly-aligned pointer to a more-strictly-aligned pointer\n     ///\n     /// **Why is this bad?** Dereferencing the resulting pointer may be undefined\n     /// behavior.\n@@ -1296,6 +1295,9 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let _ = (&1u8 as *const u8) as *const u16;\n     /// let _ = (&mut 1u8 as *mut u8) as *mut u16;\n+    ///\n+    /// (&1u8 as *const u8).cast::<u16>();\n+    /// (&mut 1u8 as *mut u8).cast::<u16>();\n     /// ```\n     pub CAST_PTR_ALIGNMENT,\n     pedantic,\n@@ -1637,12 +1639,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             return;\n         }\n         if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n-            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n-                if let Res::Def(_, def_id) = path.res {\n-                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n-                        return;\n-                    }\n-                }\n+            if is_hir_ty_cfg_dependant(cx, cast_to) {\n+                return;\n             }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n@@ -1692,6 +1690,19 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             }\n \n             lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n+        } else if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind {\n+            if_chain! {\n+            if method_path.ident.name == sym!(cast);\n+            if let Some(generic_args) = method_path.args;\n+            if let [GenericArg::Type(cast_to)] = generic_args.args;\n+            // There probably is no obvious reason to do this, just to be consistent with `as` cases.\n+            if !is_hir_ty_cfg_dependant(cx, cast_to);\n+            then {\n+                let (cast_from, cast_to) =\n+                    (cx.typeck_results().expr_ty(&args[0]), cx.typeck_results().expr_ty(expr));\n+                lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n+            }\n+            }\n         }\n     }\n }"}, {"sha": "27f4cb2b254408b576533829b4fe7e829ec7cec6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f4599a84822345115411d1aad4a7c3c4a66142f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4599a84822345115411d1aad4a7c3c4a66142f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7f4599a84822345115411d1aad4a7c3c4a66142f", "patch": "@@ -1686,6 +1686,18 @@ macro_rules! unwrap_cargo_metadata {\n     }};\n }\n \n+pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n+    if_chain! {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+        if let Res::Def(_, def_id) = path.res;\n+        then {\n+            cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "d011e84b115a7aee99a7f049af33f3fac36be4d2", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f4599a84822345115411d1aad4a7c3c4a66142f/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4599a84822345115411d1aad4a7c3c4a66142f/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=7f4599a84822345115411d1aad4a7c3c4a66142f", "patch": "@@ -12,6 +12,10 @@ fn main() {\n     (&1u8 as *const u8) as *const u16;\n     (&mut 1u8 as *mut u8) as *mut u16;\n \n+    // cast to more-strictly-aligned type, but with the `pointer::cast` function.\n+    (&1u8 as *const u8).cast::<u16>();\n+    (&mut 1u8 as *mut u8).cast::<u16>();\n+\n     /* These should be ok */\n \n     // not a pointer type"}, {"sha": "7998b787b91fbd70cb353d0c1ef990d11e6018d7", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f4599a84822345115411d1aad4a7c3c4a66142f/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f4599a84822345115411d1aad4a7c3c4a66142f/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=7f4599a84822345115411d1aad4a7c3c4a66142f", "patch": "@@ -12,5 +12,17 @@ error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1\n LL |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n+  --> $DIR/cast_alignment.rs:16:5\n+   |\n+LL |     (&1u8 as *const u8).cast::<u16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n+  --> $DIR/cast_alignment.rs:17:5\n+   |\n+LL |     (&mut 1u8 as *mut u8).cast::<u16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}]}