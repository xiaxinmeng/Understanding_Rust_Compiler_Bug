{"sha": "fbe60a2e284035d16c2a1ee743ee88db418689aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTYwYTJlMjg0MDM1ZDE2YzJhMWVlNzQzZWU4OGRiNDE4Njg5YWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T18:27:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T18:38:15Z"}, "message": "simplify", "tree": {"sha": "c09cf0434ecf282cf1763d34cf838952db105e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09cf0434ecf282cf1763d34cf838952db105e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe60a2e284035d16c2a1ee743ee88db418689aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe60a2e284035d16c2a1ee743ee88db418689aa", "html_url": "https://github.com/rust-lang/rust/commit/fbe60a2e284035d16c2a1ee743ee88db418689aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe60a2e284035d16c2a1ee743ee88db418689aa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcce07d2d1b07cf4578af65b00a243e743a67f05", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcce07d2d1b07cf4578af65b00a243e743a67f05", "html_url": "https://github.com/rust-lang/rust/commit/fcce07d2d1b07cf4578af65b00a243e743a67f05"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "c20ff53bf9c53a1a981a8fcb880f9a6795bffc70", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fbe60a2e284035d16c2a1ee743ee88db418689aa/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe60a2e284035d16c2a1ee743ee88db418689aa/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=fbe60a2e284035d16c2a1ee743ee88db418689aa", "patch": "@@ -322,9 +322,9 @@ pub struct ParamList {\n }\n impl ParamList {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n     pub fn self_param(&self) -> Option<SelfParam> { support::child(&self.syntax) }\n     pub fn comma_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![,]) }\n+    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -357,17 +357,6 @@ impl BlockExpr {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Param {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for Param {}\n-impl ast::TypeAscriptionOwner for Param {}\n-impl Param {\n-    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n-    pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -383,6 +372,17 @@ impl SelfParam {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Param {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for Param {}\n+impl ast::TypeAscriptionOwner for Param {}\n+impl Param {\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1724,8 +1724,8 @@ impl AstNode for BlockExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Param {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n+impl AstNode for SelfParam {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1735,8 +1735,8 @@ impl AstNode for Param {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for SelfParam {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n+impl AstNode for Param {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3599,12 +3599,12 @@ impl std::fmt::Display for BlockExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Param {\n+impl std::fmt::Display for SelfParam {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for SelfParam {\n+impl std::fmt::Display for Param {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "8c4f953b020df0b499299053843c7e19a5b53ac9", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbe60a2e284035d16c2a1ee743ee88db418689aa/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/fbe60a2e284035d16c2a1ee743ee88db418689aa/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=fbe60a2e284035d16c2a1ee743ee88db418689aa", "patch": "@@ -54,9 +54,8 @@ Abi =\n \n ParamList =\n   '('(\n-    (Param (',' Param)* ','?)?\n-  | SelfParam ','?\n-  | SelfParam ',' (Param (',' Param)* ','?)\n+    SelfParam\n+  | (SelfParam ',')? (Param (',' Param)* ','?)?\n   )')'\n \n SelfParam ="}]}