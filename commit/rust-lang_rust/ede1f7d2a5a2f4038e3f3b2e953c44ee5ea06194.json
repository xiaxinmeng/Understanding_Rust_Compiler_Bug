{"sha": "ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTFmN2QyYTVhMmY0MDM4ZTNmM2IyZTk1M2M0NGVlNWVhMDYxOTQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-08-23T08:14:52Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-08-23T08:14:52Z"}, "message": "use String::new() instead of String::from(\"\"), \"\".to_string(), \"\".to_owned() or \"\".into()", "tree": {"sha": "cdaa95ead9a05ae228478333ccd15b88ac115ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdaa95ead9a05ae228478333ccd15b88ac115ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "html_url": "https://github.com/rust-lang/rust/commit/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73077e10603b3586828f2d3d067f804c2fc0a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73077e10603b3586828f2d3d067f804c2fc0a1f", "html_url": "https://github.com/rust-lang/rust/commit/e73077e10603b3586828f2d3d067f804c2fc0a1f"}], "stats": {"total": 266, "additions": 133, "deletions": 133}, "files": [{"sha": "b05ea9a5ed4b0c424da114335e582151e1729c46", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -1330,7 +1330,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             s\n         };\n         let var_description = match var_origin {\n-            infer::MiscVariable(_) => \"\".to_string(),\n+            infer::MiscVariable(_) => String::new(),\n             infer::PatternRegion(_) => \" for pattern\".to_string(),\n             infer::AddrOfRegion(_) => \" for borrow expression\".to_string(),\n             infer::Autoref(_) => \" for autoref\".to_string(),"}, {"sha": "2ede575c739968d6d32ac835b14711bd9f0b50f2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -2105,7 +2105,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     region\n                 } else {\n                     // Do not even print 'static\n-                    \"\".to_owned()\n+                    String::new()\n                 };\n                 write!(fmt, \"&{}{}{:?}\", region, kind_str, place)\n             }"}, {"sha": "a58bb4724d2e27fd85bfb4a1362bfdff70fa2f95", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -1051,7 +1051,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (rustc --print target-cpus for details)\"),\n-    target_feature: String = (\"\".to_string(), parse_string, [TRACKED],\n+    target_feature: String = (String::new(), parse_string, [TRACKED],\n         \"target specific attributes (rustc --print target-features for details)\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n@@ -1085,7 +1085,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n          \"metadata to mangle symbol names with\"),\n-    extra_filename: String = (\"\".to_string(), parse_string, [UNTRACKED],\n+    extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n          \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n@@ -1992,7 +1992,7 @@ pub fn build_session_options_and_crate_config(\n     };\n     if cg.target_feature == \"help\" {\n         prints.push(PrintRequest::TargetFeatures);\n-        cg.target_feature = \"\".to_string();\n+        cg.target_feature = String::new();\n     }\n     if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::RelocationModels);"}, {"sha": "405b320f3feaf29486afa68a7c81d64dc32999b5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                           if len > 5 {\n                               format!(\"\\nand {} others\", len - 4)\n                           } else {\n-                              \"\".to_owned()\n+                              String::new()\n                           }\n                           ));\n     }\n@@ -917,7 +917,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                  remove_refs);\n \n                         err.span_suggestion_short_with_applicability(\n-                            sp, &format_str, String::from(\"\"), Applicability::MachineApplicable\n+                            sp, &format_str, String::new(), Applicability::MachineApplicable\n                         );\n                         break;\n                     }\n@@ -1116,7 +1116,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         .collect::<Vec<String>>()\n                                         .join(\", \"))\n                         } else {\n-                            \"\".to_owned()\n+                            String::new()\n                         },\n                     );\n                     err.span_suggestion_with_applicability("}, {"sha": "69bdeec6eea230099bd209572893ea8542b7753a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -120,13 +120,13 @@ impl IntercrateAmbiguityCause {\n             &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n                 let self_desc = if let &Some(ref ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n-                } else { \"\".to_string() };\n+                } else { String::new() };\n                 format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n             }\n             &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n                 let self_desc = if let &Some(ref ty) = self_desc {\n                     format!(\" for type `{}`\", ty)\n-                } else { \"\".to_string() };\n+                } else { String::new() };\n                 format!(\"upstream crates may add new impl of trait `{}`{} \\\n                          in future versions\",\n                         trait_desc, self_desc)"}, {"sha": "bdfba7c3e3a37665c7132c22eb1c15b416191210", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -213,7 +213,7 @@ fn print_time_passes_entry_internal(what: &str, dur: Duration) {\n             let mb = n as f64 / 1_000_000.0;\n             format!(\"; rss: {}MB\", mb.round() as usize)\n         }\n-        None => \"\".to_owned(),\n+        None => String::new(),\n     };\n     println!(\"{}time: {}{}\\t{}\",\n              \"  \".repeat(indentation),"}, {"sha": "74ff1a5f4fd0d395ef5121a025c5589a7679370e", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -73,7 +73,7 @@ macro_rules! define_categories {\n                         (format!(\"{:.2}\",\n                         (((hits as f32) / (total as f32)) * 100.0)), total.to_string())\n                     } else {\n-                        (\"\".into(), \"\".into())\n+                        (String::new(), String::new())\n                     };\n \n                     writeln!("}, {"sha": "f10361cb076bd2fd1e02bc4cac45ebc6856e46bb", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n                 .span_suggestion_short_with_applicability(\n                     mut_span,\n                     \"remove this `mut`\",\n-                    \"\".to_owned(),\n+                    String::new(),\n                     Applicability::MachineApplicable)\n                 .emit();\n         }"}, {"sha": "640c23ebf9ddc4c295fa9f561129c88ca3743b25", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -140,21 +140,21 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n             let gens_str = if gens.iter().any(|&u| u != 0) {\n                 format!(\" gen: {}\", bits_to_string(gens))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             let action_kills = &self.action_kills[start .. end];\n             let action_kills_str = if action_kills.iter().any(|&u| u != 0) {\n                 format!(\" action_kill: {}\", bits_to_string(action_kills))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             let scope_kills = &self.scope_kills[start .. end];\n             let scope_kills_str = if scope_kills.iter().any(|&u| u != 0) {\n                 format!(\" scope_kill: {}\", bits_to_string(scope_kills))\n             } else {\n-                \"\".to_string()\n+                String::new()\n             };\n \n             ps.synth_comment("}, {"sha": "c177ed85c3482ce49f419ecc7ac8a5961990a723", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n     fn dataflow_for(&self, e: EntryOrExit, n: &Node<'a>) -> String {\n         let id = n.1.data.id();\n         debug!(\"dataflow_for({:?}, id={:?}) {:?}\", e, id, self.variants);\n-        let mut sets = \"\".to_string();\n+        let mut sets = String::new();\n         let mut seen_one = false;\n         for &variant in &self.variants {\n             if seen_one { sets.push_str(\" \"); } else { seen_one = true; }"}, {"sha": "0221cfd9b2c28c3601eea39627cf22260f52b3e3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -1191,7 +1191,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                               member_descriptions);\n                 vec![\n                     MemberDescription {\n-                        name: \"\".to_string(),\n+                        name: String::new(),\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: self.layout.size,\n@@ -1220,7 +1220,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                                   variant_type_metadata,\n                                                   member_descriptions);\n                     MemberDescription {\n-                        name: \"\".to_string(),\n+                        name: String::new(),\n                         type_metadata: variant_type_metadata,\n                         offset: Size::ZERO,\n                         size: variant.size,"}, {"sha": "56cb3e9dbb829feacb179ebc2aa59b98e717f261", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -85,7 +85,7 @@ pub fn html_of_effect(eff: &Effect) -> (String, String) {\n fn html_of_duration(_start: &Instant, dur: &Duration) -> (String, String) {\n     use rustc::util::common::duration_to_secs_str;\n     (duration_to_secs_str(dur.clone()),\n-     \"\".to_string()\n+     String::new()\n     )\n }\n "}, {"sha": "c08cf3d039df53ec68a345d97fe86911924395f6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -798,7 +798,7 @@ impl EmitterWriter {\n                                                          // at by \"in this macro invocation\"\n                                                          format!(\" (#{})\", i + 1)\n                                                      } else {\n-                                                         \"\".to_string()\n+                                                         String::new()\n                                                      })));\n                         }\n                         // Check to make sure we're not in any <*macros>\n@@ -813,7 +813,7 @@ impl EmitterWriter {\n                                                          // backtrace is multiple levels deep\n                                                          format!(\" (#{})\", i + 1)\n                                                      } else {\n-                                                         \"\".to_string()\n+                                                         String::new()\n                                                      })));\n                             if !always_backtrace {\n                                 break;\n@@ -1065,7 +1065,7 @@ impl EmitterWriter {\n                     let col = if let Some(first_annotation) = first_line.annotations.first() {\n                         format!(\":{}\", first_annotation.start_col + 1)\n                     } else {\n-                        \"\".to_string()\n+                        String::new()\n                     };\n                     format!(\"{}:{}{}\",\n                             annotated_file.file.name,"}, {"sha": "4922e7910544b02d8683638aa4518c0b1363ccb6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -794,7 +794,7 @@ impl EarlyLintPass for DeprecatedAttr {\n                     err.span_suggestion_short_with_applicability(\n                         attr.span,\n                         \"remove this attribute\",\n-                        \"\".to_owned(),\n+                        String::new(),\n                         Applicability::MachineApplicable\n                     );\n                     err.emit();\n@@ -1250,7 +1250,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                                 err.span_suggestion_short_with_applicability(\n                                     no_mangle_attr.span,\n                                     \"remove this attribute\",\n-                                    \"\".to_owned(),\n+                                    String::new(),\n                                     // Use of `#[no_mangle]` suggests FFI intent; correct\n                                     // fix may be to monomorphize source by hand\n                                     Applicability::MaybeIncorrect"}, {"sha": "31ca3244434742029b441205ad1ce6ecc76a0bcc", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -327,7 +327,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             err.span_suggestion_short_with_applicability(\n                 mut_span,\n                 \"remove this `mut`\",\n-                \"\".to_owned(),\n+                String::new(),\n                 Applicability::MachineApplicable);\n \n             err.buffer(&mut mbcx.errors_buffer);"}, {"sha": "251586cd7949d43183901d5d32dbbb0f3b882de3", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     } else {\n                         item_msg = format!(\"data in a {}\", pointer_type);\n-                        reason = \"\".to_string();\n+                        reason = String::new();\n                     }\n                 }\n             }\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             Place::Static(box Static { def_id, ty: _ }) => {\n                 if let Place::Static(_) = access_place {\n                     item_msg = format!(\"immutable static item `{}`\", access_place_desc.unwrap());\n-                    reason = \"\".to_string();\n+                    reason = String::new();\n                 } else {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     let static_name = &self.tcx.item_name(*def_id);"}, {"sha": "b67780ccdbc10282d2cb654ff884e3bba319fc34", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -474,7 +474,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     ) -> DiagnosticBuilder<'cx> {\n         let moved_path = moved_path\n             .map(|mp| format!(\": `{}`\", mp))\n-            .unwrap_or(\"\".to_owned());\n+            .unwrap_or(String::new());\n \n         let err = struct_span_err!(\n             self,"}, {"sha": "c60f9293d58e71428481cec776465b558a81d418", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -994,7 +994,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 let lev_suggestion =\n                     match find_best_match_for_name(names, &ident.as_str(), None) {\n                         Some(name) => format!(\". Did you mean to use `{}`?\", name),\n-                        None => \"\".to_owned(),\n+                        None => String::new(),\n                     };\n                 let msg = match module {\n                     ModuleOrUniformRoot::Module(module) => {"}, {"sha": "1549634e9b590c91f9c3a9c27003165b0c7e1852", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -1050,7 +1050,7 @@ impl<'a> DumpHandler<'a> {\n                     .iter()\n                     .any(|ct| *ct == CrateType::Executable);\n                 let mut out_name = if executable {\n-                    \"\".to_owned()\n+                    String::new()\n                 } else {\n                     \"lib\".to_owned()\n                 };"}, {"sha": "16dd27887faad8a254a269357e2772e570700d26", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "8f7ee11d575eee8412d08292704091a715149ad2", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -22,8 +22,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "540aac2c3383238f8408e5007ec0c22e93c56b1a", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "087b0fa543f0d61e5864565efd041a11b918b3a7", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "541f0564a01e2cfd82f1db1efdc24e8d75cfb3dd", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "32fb7002026eb3057f6e5d5505dc294cfbd7ff77", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"hermit\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c4afd1143fc21c952ed867de356bfc6d47ebf075", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "1cf214d09cc7cea47091c062ffae84dce09777ae", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -36,8 +36,8 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),"}, {"sha": "81c24fa10fac601e27ec091873da879c1223920a", "filename": "src/librustc_target/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_openbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c5e3385a91ca1bd70853c4fd1ba4414e78c7f4d4", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "c111d2ffe8b4aee12503c8fed8e28ce09857c198", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -22,8 +22,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "0f7b2ad7630e85145f1d6d1e6c87bcc699ec4d65", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "06abe0b2c9e4f3aca8a20a64451b743a2cb760d5", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -28,7 +28,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "44e611f04b48eab684130b00d8977479f8438f33", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a5f35d0a773675eabf6dda72ff033a3e351e9466", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "da70a3ad04d46b77249069b4b805767b4d8152e9", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -40,7 +40,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"asmjs\".to_string(),"}, {"sha": "15fd384f9ced389543633cb7e353659f721265a3", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "a298b550fea6570d45ad3e3cb488df3b65e17d9d", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-p:32:32-f64:32:64-f80:128-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"macos\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "6aa139893eba1af85a40ec35fa093a82298417c5", "filename": "src/librustc_target/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -31,7 +31,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "637bca71add71e22321100831017e1450d16ea7c", "filename": "src/librustc_target/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "fa02f0dd634519f7082b0ea633c0a8900885c81a", "filename": "src/librustc_target/spec/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "e11a455911d75b4441838e7d1f21abc4be62eac1", "filename": "src/librustc_target/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "775d80b0cfd7e345d7a2cbee1637b81e3d31fa20", "filename": "src/librustc_target/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"haiku\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a9c0c11aab5c6220d6e00d0138dd6fe6f0fc0357", "filename": "src/librustc_target/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "471d6bd475603739b9ec43b80e569f85c0af4649", "filename": "src/librustc_target/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "7608ccab66f3d17ac4f53075c3d5ddbc0e6f2b15", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -686,7 +686,7 @@ impl Default for TargetOptions {\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n-            features: \"\".to_string(),\n+            features: String::new(),\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n@@ -698,7 +698,7 @@ impl Default for TargetOptions {\n             function_sections: true,\n             dll_prefix: \"lib\".to_string(),\n             dll_suffix: \".so\".to_string(),\n-            exe_suffix: \"\".to_string(),\n+            exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,"}, {"sha": "0958a958986933d589232710c7e7fb9eda4e7e89", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -19,8 +19,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".to_string(),\n         arch: \"msp430\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "740222c9608054400464792a6e1901b732297cf9", "filename": "src/librustc_target/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "ce56cdd44bb2ff2c87d0937d79211d11b21be00c", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> TargetResult {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         arch: \"riscv32\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,"}, {"sha": "c663aa344daf8c080665be9ca22278df74b18763", "filename": "src/librustc_target/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "8bc233107b8bb5bf1c49616c65392bb7c76e2c5c", "filename": "src/librustc_target/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -30,7 +30,7 @@ pub fn target() -> TargetResult {\n         // just be confusing.\n         arch: \"sparc64\".to_string(),\n         target_os: \"solaris\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "bfac1ba45e1c7b89016270ebb7265f1da4add78a", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,8 +21,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "0207f38dea848b82c3c6907e84abc54903e5bd15", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -30,8 +30,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "bb1a42f0e289ec89109daa2f71c804059f660824", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -29,8 +29,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "1eac13afd9ae55e6c550ad3b7a9baa8a47242963", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,8 +21,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {"}, {"sha": "60ad2d232493324c8208480036be3310fe76e6fb", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -43,7 +43,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "b4c09f86b8a97c96c34bd96513a8e20b02b5c38d", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -40,7 +40,7 @@ pub fn target() -> Result<Target, String> {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "6c368e09003a39afc7a9aeed62242944a3908735", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> Result<Target, String> {\n \n         // relatively self-explanatory!\n         exe_suffix: \".wasm\".to_string(),\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".wasm\".to_string(),\n         linker_is_gnu: false,\n \n@@ -65,7 +65,7 @@ pub fn target() -> Result<Target, String> {\n         // This is basically guaranteed to change in the future, don't rely on\n         // this. Use `not(target_os = \"emscripten\")` for now.\n         target_os: \"unknown\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),"}, {"sha": "29049b1427570ce4616541f40baab69dd8c4e83c", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -77,10 +77,10 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"gcc\".to_string()),\n         dynamic_linking: true,\n         executables: true,\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"\".to_string(),\n+        staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         no_default_libraries: true,\n         target_family: Some(\"windows\".to_string()),"}, {"sha": "27879de9ab55678ab651c14655d7fe146373d186", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,10 +21,10 @@ pub fn opts() -> TargetOptions {\n         function_sections: true,\n         dynamic_linking: true,\n         executables: true,\n-        dll_prefix: \"\".to_string(),\n+        dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"\".to_string(),\n+        staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,"}, {"sha": "150590ba68d7656df426a5d97d1d1e301917c8bc", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"macos\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "e184ec2435878a5233f593728e79114a194af36b", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"ios\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {"}, {"sha": "62148a740dff56833b1495b1f823d7652c429d96", "filename": "src/librustc_target/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,8 +25,8 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: String::new(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })"}, {"sha": "ea67dc6bdef12fa8af328193aeb8ce21c2b84825", "filename": "src/librustc_target/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "af846653af7274eecad7aeef551bc9fd3bee3946", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -33,7 +33,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"rumprun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "beb23dce06249a6782d681f6237514ef947e16ed", "filename": "src/librustc_target/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"solaris\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"sun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "a98fc80716bcb40d069941b374aa2b29658bab60", "filename": "src/librustc_target/spec/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"bitrig\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "16df9000683b7d9972b49bef979ac53def99ed68", "filename": "src/librustc_target/spec/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -26,7 +26,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "4c14a321febe6159865635e03dc29608fe3d79c3", "filename": "src/librustc_target/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "4515b3308717eaa0234e5361ad067555c12575fe", "filename": "src/librustc_target/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "7e6b56866e4c70e250619cc65bdf2f7246831661", "filename": "src/librustc_target/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"haiku\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "c879e94e6e65a67f83bcb29405318e94c9b03cdf", "filename": "src/librustc_target/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"hermit\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "de53c9e99ed86a5d900c2a0b211bb62bd3820fb7", "filename": "src/librustc_target/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"netbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "de22c77d1e0561b316e56c3a565afc6c858f83dd", "filename": "src/librustc_target/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "12a354b499efa871cae21abb7526ab824c29756a", "filename": "src/librustc_target/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"redox\".to_string(),\n-        target_env: \"\".to_string(),\n+        target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,"}, {"sha": "0a1218a9bdffcfa5c51c74c9d98e24707174b538", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -3471,7 +3471,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             displayable_field_names.sort();\n \n             let truncated_fields_error = if len <= 3 {\n-                \"\".to_string()\n+                String::new()\n             } else {\n                 format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 {\"\"} else {\"s\"})\n             };\n@@ -4783,7 +4783,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         err.span_suggestion_with_applicability(\n             span_semi,\n             \"consider removing this semicolon\",\n-            \"\".to_string(),\n+            String::new(),\n             Applicability::MachineApplicable);\n     }\n "}, {"sha": "52e6663792b26935f6fd704c524809a33eb8d00e", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -142,7 +142,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n                 .span_suggestion_short_with_applicability(\n                     span,\n                     \"remove it\",\n-                    \"\".to_string(),\n+                    String::new(),\n                     Applicability::MachineApplicable)\n                 .emit();\n             continue;"}, {"sha": "5c23d0f6b399083a1172e7ee631ca9d5f721fde1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -568,7 +568,7 @@ impl Clean<Item> for doctree::Module {\n         let name = if self.name.is_some() {\n             self.name.expect(\"No name provided\").clean(cx)\n         } else {\n-            \"\".to_string()\n+            String::new()\n         };\n \n         // maintain a stack of mod ids, for doc comment path resolution\n@@ -1760,7 +1760,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                 values: sig.skip_binder().inputs().iter().map(|t| {\n                     Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map_or(\"\".to_string(), |name| name.to_string()),\n+                        name: names.next().map_or(String::new(), |name| name.to_string()),\n                     }\n                 }).collect(),\n             },\n@@ -3596,7 +3596,7 @@ impl Clean<Item> for hir::ForeignItem {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n                     mutability: if mutbl {Mutable} else {Immutable},\n-                    expr: \"\".to_string(),\n+                    expr: String::new(),\n                 })\n             }\n             hir::ForeignItemKind::Type => {\n@@ -3628,7 +3628,7 @@ impl ToSource for syntax_pos::Span {\n         debug!(\"converting span {:?} to snippet\", self.clean(cx));\n         let sn = match cx.sess().source_map().span_to_snippet(*self) {\n             Ok(x) => x.to_string(),\n-            Err(_) => \"\".to_string()\n+            Err(_) => String::new()\n         };\n         debug!(\"got snippet {}\", sn);\n         sn\n@@ -3824,19 +3824,19 @@ impl Clean<Stability> for attr::Stability {\n             feature: self.feature.to_string(),\n             since: match self.level {\n                 attr::Stable {ref since} => since.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             deprecated_since: match self.rustc_depr {\n                 Some(attr::RustcDeprecation {ref since, ..}) => since.to_string(),\n-                _=> \"\".to_string(),\n+                _=> String::new(),\n             },\n             deprecated_reason: match self.rustc_depr {\n                 Some(ref depr) => depr.reason.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             unstable_reason: match self.level {\n                 attr::Unstable { reason: Some(ref reason), .. } => reason.to_string(),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             },\n             issue: match self.level {\n                 attr::Unstable {issue, ..} => Some(issue),\n@@ -3855,8 +3855,8 @@ impl<'a> Clean<Stability> for &'a attr::Stability {\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext) -> Deprecation {\n         Deprecation {\n-            since: self.since.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n-            note: self.note.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n+            since: self.since.as_ref().map_or(String::new(), |s| s.to_string()),\n+            note: self.note.as_ref().map_or(String::new(), |s| s.to_string()),\n         }\n     }\n }"}, {"sha": "7643aade83b7df8f48c99db21990565fefe27631", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -620,7 +620,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n             let lt = match *l {\n                 Some(ref l) => format!(\"{} \", *l),\n-                _ => \"\".to_string(),\n+                _ => String::new(),\n             };\n             let m = MutableSpace(mutability);\n             let amp = if f.alternate() {"}, {"sha": "582f31ce7c716620ff05e973024444984061ac2d", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -156,13 +156,13 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                 root_path = page.root_path,\n                 suffix=page.resource_suffix)\n     } else {\n-        \"\".to_owned()\n+        String::new()\n     },\n     content   = *t,\n     root_path = page.root_path,\n     css_class = page.css_class,\n     logo      = if layout.logo.is_empty() {\n-        \"\".to_string()\n+        String::new()\n     } else {\n         format!(\"<a href='{}{}/index.html'>\\\n                  <img src='{}' alt='logo' width='100'></a>\",\n@@ -173,7 +173,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     description = page.description,\n     keywords = page.keywords,\n     favicon   = if layout.favicon.is_empty() {\n-        \"\".to_string()\n+        String::new()\n     } else {\n         format!(r#\"<link rel=\"shortcut icon\" href=\"{}\">\"#, layout.favicon)\n     },"}, {"sha": "8fb3b570f8a4b38f83818e8e1e1bb99d7ece235d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -504,8 +504,8 @@ pub fn run(mut krate: clean::Crate,\n         local_sources: FxHashMap(),\n         issue_tracker_base_url: None,\n         layout: layout::Layout {\n-            logo: \"\".to_string(),\n-            favicon: \"\".to_string(),\n+            logo: String::new(),\n+            favicon: String::new(),\n             external_html: external_html.clone(),\n             krate: krate.name.clone(),\n         },\n@@ -2183,7 +2183,7 @@ fn shorter<'a>(s: Option<&'a str>) -> String {\n                 !chr.is_whitespace()\n             })\n         }).collect::<Vec<_>>().join(\"\\n\"),\n-        None => \"\".to_string()\n+        None => String::new()\n     }\n }\n \n@@ -2479,7 +2479,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        stab_docs = stab_docs,\n                        docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n                        class = myitem.type_(),\n-                       stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n+                       stab = myitem.stability_class().unwrap_or(String::new()),\n                        unsafety_flag = unsafety_flag,\n                        href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n                        title_type = myitem.type_(),"}, {"sha": "e4b9e3216b13b7cf06c064a1d0276a5e2ca9be4e", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -184,7 +184,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n         Ok(..) => {\n             // Add this input file to the code map to make it available as\n             // dependency information, but don't enter it's contents\n-            cx.source_map().new_source_file(file.into(), \"\".to_string());\n+            cx.source_map().new_source_file(file.into(), String::new());\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         }"}, {"sha": "172a48ddba2d94382e011d6e4488c3b6addc2c85", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -230,7 +230,7 @@ fn trim_whitespace_prefix_and_push_line(lines: &mut Vec<String>, s: String, col:\n             if col < len {\n                 (&s[col..len]).to_string()\n             } else {\n-                \"\".to_string()\n+                String::new()\n             }\n         }\n         None => s,"}, {"sha": "74f6a65cc262d01dba2d35fb8404773babcfb161", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -684,7 +684,7 @@ impl<'a> Parser<'a> {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on Iterator.\n             let b = i.next()\n-                     .map_or(\"\".to_string(), |t| t.to_string());\n+                     .map_or(String::new(), |t| t.to_string());\n             i.enumerate().fold(b, |mut b, (i, a)| {\n                 if tokens.len() > 2 && i == tokens.len() - 2 {\n                     b.push_str(\", or \");\n@@ -786,7 +786,7 @@ impl<'a> Parser<'a> {\n         } else {\n             err.span_label(self.span, \"expected identifier\");\n             if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                err.span_suggestion(self.span, \"remove this comma\", \"\".into());\n+                err.span_suggestion(self.span, \"remove this comma\", String::new());\n             }\n         }\n         err\n@@ -2506,7 +2506,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion_short_with_applicability(\n                         self.span,\n                         \"remove this comma\",\n-                        \"\".to_owned(),\n+                        String::new(),\n                         Applicability::MachineApplicable\n                     );\n                     err.note(\"the base struct must always be the last field\");\n@@ -3473,7 +3473,7 @@ impl<'a> Parser<'a> {\n                 e.span_suggestion_short_with_applicability(\n                     match_span,\n                     \"try removing this `match`\",\n-                    \"\".to_owned(),\n+                    String::new(),\n                     Applicability::MaybeIncorrect // speculative\n                 );\n             }\n@@ -3850,7 +3850,7 @@ impl<'a> Parser<'a> {\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n-                        err.span_suggestion_short(sp, \"remove this comma\", \"\".into());\n+                        err.span_suggestion_short(sp, \"remove this comma\", String::new());\n                     }\n                     err.emit();\n                     break;\n@@ -3890,7 +3890,7 @@ impl<'a> Parser<'a> {\n                 err.multipart_suggestion(\n                     \"move the `..` to the end of the field list\",\n                     vec![\n-                        (etc_span, \"\".into()),\n+                        (etc_span, String::new()),\n                         (self.span, format!(\"{}.. }}\", if ate_comma { \"\" } else { \", \" })),\n                     ],\n                 );\n@@ -6190,7 +6190,7 @@ impl<'a> Parser<'a> {\n             if token_str == \";\" {\n                 let msg = \"consider removing this semicolon\";\n                 err.span_suggestion_short_with_applicability(\n-                    self.span, msg, \"\".to_string(), Applicability::MachineApplicable\n+                    self.span, msg, String::new(), Applicability::MachineApplicable\n                 );\n                 if !items.is_empty() {  // Issue #51603\n                     let previous_item = &items[items.len()-1];"}, {"sha": "8f91db8efa71a66a9096560dd73557040a29f0a3", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -1030,7 +1030,7 @@ mod tests {\n         cm.new_source_file(PathBuf::from(\"blork.rs\").into(),\n                        \"first line.\\nsecond line\".to_string());\n         cm.new_source_file(PathBuf::from(\"empty.rs\").into(),\n-                       \"\".to_string());\n+                       String::new());\n         cm.new_source_file(PathBuf::from(\"blork2.rs\").into(),\n                        \"first line.\\nsecond line\".to_string());\n         cm"}, {"sha": "f7e0788a884c3a60586decd5d7e2d67c4db16344", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -102,7 +102,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 let deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n \n                 let mbps = if bs.mb_s == 0 {\n-                    \"\".into()\n+                    String::new()\n                 } else {\n                     format!(r#\", \"mib_per_second\": {}\"#, bs.mb_s)\n                 };"}, {"sha": "db856a1dcf94fe4fc2defe721673bd1c76c5fd2e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -559,7 +559,7 @@ impl Config {\n             let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n \n             match strs.len() {\n-                1 => (strs.pop().unwrap(), \"\".to_owned()),\n+                1 => (strs.pop().unwrap(), String::new()),\n                 2 => {\n                     let end = strs.pop().unwrap();\n                     (strs.pop().unwrap(), end)"}, {"sha": "74f66c0a0516921deebd4d8d54e2993b4f35ecec", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=ede1f7d2a5a2f4038e3f3b2e953c44ee5ea06194", "patch": "@@ -252,7 +252,7 @@ pub fn collect_lib_features(base_src_path: &Path) -> Features {\n     // add it to the set of known library features so we can still generate docs.\n     lib_features.insert(\"compiler_builtins_lib\".to_owned(), Feature {\n         level: Status::Unstable,\n-        since: \"\".to_owned(),\n+        since: String::new(),\n         has_gate_test: false,\n         tracking_issue: None,\n     });"}]}