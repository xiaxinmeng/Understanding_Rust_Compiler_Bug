{"sha": "cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZmYzYTM1YTJmODcxNDkxYjZkOGY3M2I2MDI1ZmQzY2MwYTNiZTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:01:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:01:44Z"}, "message": "Merge LinkerInfo::to_linker into get_linker", "tree": {"sha": "bb2f756d48009da435805368f3d0ced007189851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2f756d48009da435805368f3d0ced007189851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "html_url": "https://github.com/rust-lang/rust/commit/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b061cbeac9169366d03681d07b6100c59ec24d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b061cbeac9169366d03681d07b6100c59ec24d6", "html_url": "https://github.com/rust-lang/rust/commit/0b061cbeac9169366d03681d07b6100c59ec24d6"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "b04fbe8f0d25b7f99944e571ab575b189748b7e1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "patch": "@@ -1713,11 +1713,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n ) -> Command {\n     let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n-    let base_cmd = super::linker::get_linker(sess, path, flavor, crt_objects_fallback);\n-    // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n-    // to the linker args construction.\n-    assert!(base_cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-    let cmd = &mut *codegen_results.crate_info.linker_info.to_linker(base_cmd, &sess, flavor);\n+    let cmd = &mut *super::linker::get_linker(\n+        sess,\n+        path,\n+        flavor,\n+        crt_objects_fallback,\n+        &codegen_results.crate_info.linker_info,\n+    );\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n     // ------------ Early order-dependent options ------------"}, {"sha": "c5a595cbf082aa5691d7e8714d786d8321ab9626", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "patch": "@@ -56,52 +56,18 @@ impl LinkerInfo {\n                 .collect(),\n         }\n     }\n-\n-    pub fn to_linker<'a>(\n-        &'a self,\n-        cmd: Command,\n-        sess: &'a Session,\n-        flavor: LinkerFlavor,\n-    ) -> Box<dyn Linker + 'a> {\n-        match flavor {\n-            LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-                Box::new(MsvcLinker { cmd, sess, info: self }) as Box<dyn Linker>\n-            }\n-            LinkerFlavor::Em => Box::new(EmLinker { cmd, sess, info: self }) as Box<dyn Linker>,\n-            LinkerFlavor::Gcc => {\n-                Box::new(GccLinker { cmd, sess, info: self, hinted_static: false, is_ld: false })\n-                    as Box<dyn Linker>\n-            }\n-\n-            LinkerFlavor::Lld(LldFlavor::Ld)\n-            | LinkerFlavor::Lld(LldFlavor::Ld64)\n-            | LinkerFlavor::Ld => {\n-                Box::new(GccLinker { cmd, sess, info: self, hinted_static: false, is_ld: true })\n-                    as Box<dyn Linker>\n-            }\n-\n-            LinkerFlavor::Lld(LldFlavor::Wasm) => {\n-                Box::new(WasmLd::new(cmd, sess, self)) as Box<dyn Linker>\n-            }\n-\n-            LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-            LinkerFlavor::BpfLinker => {\n-                Box::new(BpfLinker { cmd, sess, info: self }) as Box<dyn Linker>\n-            }\n-        }\n-    }\n }\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-pub fn get_linker(\n-    sess: &Session,\n+pub fn get_linker<'a>(\n+    sess: &'a Session,\n     linker: &Path,\n     flavor: LinkerFlavor,\n     self_contained: bool,\n-) -> Command {\n+    info: &'a LinkerInfo,\n+) -> Box<dyn Linker + 'a> {\n     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n     // If our linker looks like a batch script on Windows then to execute this\n@@ -181,7 +147,35 @@ pub fn get_linker(\n     }\n     cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n \n-    cmd\n+    // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n+    // to the linker args construction.\n+    assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n+\n+    match flavor {\n+        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n+            Box::new(MsvcLinker { cmd, sess, info }) as Box<dyn Linker>\n+        }\n+        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess, info }) as Box<dyn Linker>,\n+        LinkerFlavor::Gcc => {\n+            Box::new(GccLinker { cmd, sess, info, hinted_static: false, is_ld: false })\n+                as Box<dyn Linker>\n+        }\n+\n+        LinkerFlavor::Lld(LldFlavor::Ld)\n+        | LinkerFlavor::Lld(LldFlavor::Ld64)\n+        | LinkerFlavor::Ld => {\n+            Box::new(GccLinker { cmd, sess, info, hinted_static: false, is_ld: true })\n+                as Box<dyn Linker>\n+        }\n+\n+        LinkerFlavor::Lld(LldFlavor::Wasm) => {\n+            Box::new(WasmLd::new(cmd, sess, info)) as Box<dyn Linker>\n+        }\n+\n+        LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n+\n+        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess, info }) as Box<dyn Linker>,\n+    }\n }\n \n /// Linker abstraction used by `back::link` to build up the command to invoke a"}]}