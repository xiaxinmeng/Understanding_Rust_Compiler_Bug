{"sha": "120bfde3c22ed662cd4d3c35e91a739a86d0e990", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMGJmZGUzYzIyZWQ2NjJjZDRkM2MzNWU5MWE3MzlhODZkMGU5OTA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-21T20:18:18Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-21T21:04:37Z"}, "message": "Add tests", "tree": {"sha": "f10fe8412874714edcc2d317ab7822b9bbf80a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10fe8412874714edcc2d317ab7822b9bbf80a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120bfde3c22ed662cd4d3c35e91a739a86d0e990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120bfde3c22ed662cd4d3c35e91a739a86d0e990", "html_url": "https://github.com/rust-lang/rust/commit/120bfde3c22ed662cd4d3c35e91a739a86d0e990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120bfde3c22ed662cd4d3c35e91a739a86d0e990/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1cdc834dded79aea685214562da81d60e270ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1cdc834dded79aea685214562da81d60e270ce", "html_url": "https://github.com/rust-lang/rust/commit/3d1cdc834dded79aea685214562da81d60e270ce"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "e78bc734bbee9dbd1f3cb6f2b3af945ed64a611a", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/120bfde3c22ed662cd4d3c35e91a739a86d0e990/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120bfde3c22ed662cd4d3c35e91a739a86d0e990/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=120bfde3c22ed662cd4d3c35e91a739a86d0e990", "patch": "@@ -220,9 +220,10 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let expansion = syntax_node_to_token_tree(expansion.syntax()).unwrap().0;\n         let file = token_tree_to_macro_items(&expansion);\n         let file = file.unwrap().syntax().debug_dump().trim().to_string();\n-        let file = file.replace(\"C_C__C\", \"$crate\");\n+        let tree = tree.unwrap().syntax().debug_dump().trim().to_string();\n \n-        assert_eq!(tree.unwrap().syntax().debug_dump().trim(), file,);\n+        let file = file.replace(\"C_C__C\", \"$crate\");\n+        assert_eq!(tree, file,);\n     }\n \n     #[test]\n@@ -348,6 +349,21 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         assert_expansion(&rules, \"foo! { foo, bar }\", \"fn baz {foo () ; bar () ;}\");\n     }\n \n+    #[test]\n+    fn test_match_group_pattern_with_multiple_statement_without_semi() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ ($ i:ident),*) => ( fn baz { $ (\n+                $i()\n+            );*} );            \n+        }\n+\"#,\n+        );\n+\n+        assert_expansion(&rules, \"foo! { foo, bar }\", \"fn baz {foo () ; bar () ;}\");\n+    }\n+\n     #[test]\n     fn test_match_group_empty_fixed_token() {\n         let rules = create_rules(\n@@ -691,6 +707,33 @@ MACRO_ITEMS@[0; 40)\n         );\n     }\n \n+    #[test]\n+    fn test_ty_with_complex_type() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ i:ty) => (\n+                fn bar() -> $ i { unimplemented!() }\n+            )\n+        }\n+\"#,\n+        );\n+\n+        // Reference lifetime struct with generic type\n+        assert_expansion(\n+            &rules,\n+            \"foo! { &'a Baz<u8> }\",\n+            \"fn bar () -> & 'a Baz < u8 > {unimplemented ! ()}\",\n+        );\n+\n+        // extern \"Rust\" func type\n+        assert_expansion(\n+            &rules,\n+            r#\"foo! { extern \"Rust\" fn() -> Ret }\"#,\n+            r#\"fn bar () -> extern \"Rust\" fn () -> Ret {unimplemented ! ()}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_pat_() {\n         let rules = create_rules(\n@@ -853,6 +896,26 @@ MACRO_ITEMS@[0; 40)\n     }\n \n     // The following tests are based on real world situations\n+    #[test]\n+    fn test_vec() {\n+        let rules = create_rules(\n+            r#\"\n+         macro_rules! vec {\n+            ($($item:expr),*) => {\n+                {\n+                    let mut v = Vec::new();\n+                    $(\n+                        v.push($item);\n+                    )*\n+                    v\n+                }\n+            };\n+}\n+\"#,\n+        );\n+        assert_expansion(&rules, r#\"vec!();\"#, r#\"{let mut v = Vec :: new () ;  v}\"#);\n+    }\n+\n     #[test]\n     fn test_winapi_struct() {\n         // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/macros.rs#L366\n@@ -886,4 +949,26 @@ macro_rules! STRUCT {\n         assert_expansion(&rules, r#\"STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\"#, \n         \"# [repr (C)] # [derive (Copy)] # [cfg_attr (target_arch = \\\"x86\\\" , repr (packed))] pub struct D3DCONTENTPROTECTIONCAPS {pub Caps : u8 ,} impl Clone for D3DCONTENTPROTECTIONCAPS {# [inline] fn clone (& self) -> D3DCONTENTPROTECTIONCAPS {* self}} # [cfg (feature = \\\"impl-default\\\")] impl Default for D3DCONTENTPROTECTIONCAPS {# [inline] fn default () -> D3DCONTENTPROTECTIONCAPS {unsafe {$crate :: _core :: mem :: zeroed ()}}}\");\n     }\n+\n+    #[test]\n+    fn test_int_base() {\n+        let rules = create_rules(\n+            r#\"\n+macro_rules! int_base {\n+    ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl fmt::$Trait for $T {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                $Radix.fmt_int(*self as $U, f)\n+            }\n+        }\n+    }\n+}            \n+\"#,\n+        );\n+\n+        assert_expansion(&rules, r#\" int_base!{Binary for isize as usize -> Binary}\"#, \n+        \"# [stable (feature = \\\"rust1\\\" , since = \\\"1.0.0\\\")] impl fmt :: Binary for isize {fn fmt (& self , f : & mut fmt :: Formatter < \\'_ >) -> fmt :: Result {Binary . fmt_int (* self as usize , f)}}\"\n+        );\n+    }\n }"}]}