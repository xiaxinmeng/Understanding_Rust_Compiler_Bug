{"sha": "7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "node_id": "C_kwDOAAsO6NoAKDc1NjdmMWYzMWQ1ZTk2ODM4MGIxZTFjNTA4OGIwMGEwNjA2ZWExYTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-11T16:41:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T21:35:02Z"}, "message": "Adapt interpreter.", "tree": {"sha": "c70fcadf98e8e96e03abebf26254cb93a36c05fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c70fcadf98e8e96e03abebf26254cb93a36c05fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "html_url": "https://github.com/rust-lang/rust/commit/7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7567f1f31d5e968380b1e1c5088b00a0606ea1a0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1480b1c524cad3a7ee0253496b7b026484e53371", "url": "https://api.github.com/repos/rust-lang/rust/commits/1480b1c524cad3a7ee0253496b7b026484e53371", "html_url": "https://github.com/rust-lang/rust/commit/1480b1c524cad3a7ee0253496b7b026484e53371"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "35f12ac9dbd7185e92a8b2ff7c50d72252e65e47", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7567f1f31d5e968380b1e1c5088b00a0606ea1a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7567f1f31d5e968380b1e1c5088b00a0606ea1a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "patch": "@@ -569,16 +569,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.cx().check_overflow() {\n-            if let AssertKind::OverflowNeg(_)\n-            | AssertKind::Overflow(\n-                mir::BinOp::Add\n-                | mir::BinOp::Sub\n-                | mir::BinOp::Mul\n-                | mir::BinOp::Shl\n-                | mir::BinOp::Shr,\n-                ..,\n-            ) = *msg\n-            {\n+            let unchecked_overflow = match msg {\n+                AssertKind::OverflowNeg(..) => true,\n+                AssertKind::Overflow(op, ..) => op.is_checkable(),\n+                _ => false,\n+            };\n+            if unchecked_overflow {\n                 const_cond = Some(expected);\n             }\n         }"}, {"sha": "919eaca90ce69ce5c1a931babb18504e8bd75a05", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7567f1f31d5e968380b1e1c5088b00a0606ea1a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7567f1f31d5e968380b1e1c5088b00a0606ea1a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=7567f1f31d5e968380b1e1c5088b00a0606ea1a0", "patch": "@@ -137,8 +137,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n+                let ignored = !self.tcx.sess.overflow_checks()\n+                    && match msg {\n+                        mir::AssertKind::OverflowNeg(..) => true,\n+                        mir::AssertKind::Overflow(op, ..) => op.is_checkable(),\n+                        _ => false,\n+                    };\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n-                if expected == cond_val {\n+                if ignored || expected == cond_val {\n                     self.go_to_block(target);\n                 } else {\n                     M::assert_panic(self, msg, cleanup)?;"}]}