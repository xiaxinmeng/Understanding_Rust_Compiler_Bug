{"sha": "b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzJmNmQ5ZmU5Y2U4MjJhYTM4Y2IxNjRlNGRjZTNlNGZhZjVjYzQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-14T22:36:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-15T08:16:18Z"}, "message": "Avoid loading and parsing unconfigured non-inline modules.", "tree": {"sha": "92c75982e16da9d4b774f200b63fa6037bdedd54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c75982e16da9d4b774f200b63fa6037bdedd54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "html_url": "https://github.com/rust-lang/rust/commit/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5736db916ac30ca67945bbf0aee41ced1fcf05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5736db916ac30ca67945bbf0aee41ced1fcf05", "html_url": "https://github.com/rust-lang/rust/commit/5a5736db916ac30ca67945bbf0aee41ced1fcf05"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "abbbbe1e3d1cc49df8cedf47c749ce909ddfbab3", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "patch": "@@ -126,7 +126,7 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     // Determine if a node with the given attributes should be included in this configuation.\n-    fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             // When not compiling with --test we should not compile the #[test] functions\n             if !self.should_test && is_test_or_bench(attr) {"}, {"sha": "fd2ae3b49083ee945f03b4f42c3f30c4ce61f909", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b232f6d9fe9ce822aa38cb164e4dce3e4faf5cc4", "patch": "@@ -5291,20 +5291,29 @@ impl<'a> Parser<'a> {\n \n     /// Parse a `mod <foo> { ... }` or `mod <foo>;` item\n     fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        let outer_attrs = ::config::StripUnconfigured {\n-            config: &self.cfg,\n-            sess: self.sess,\n-            should_test: false, // irrelevant\n-            features: None, // don't perform gated feature checking\n-        }.process_cfg_attrs(outer_attrs.to_owned());\n+        let (in_cfg, outer_attrs) = {\n+            let mut strip_unconfigured = ::config::StripUnconfigured {\n+                config: &self.cfg,\n+                sess: self.sess,\n+                should_test: false, // irrelevant\n+                features: None, // don't perform gated feature checking\n+            };\n+            let outer_attrs = strip_unconfigured.process_cfg_attrs(outer_attrs.to_owned());\n+            (strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n+        };\n \n         let id_span = self.span;\n         let id = self.parse_ident()?;\n         if self.check(&token::Semi) {\n             self.bump();\n-            // This mod is in an external file. Let's go get it!\n-            let (m, attrs) = self.eval_src_mod(id, &outer_attrs, id_span)?;\n-            Ok((id, m, Some(attrs)))\n+            if in_cfg {\n+                // This mod is in an external file. Let's go get it!\n+                let (m, attrs) = self.eval_src_mod(id, &outer_attrs, id_span)?;\n+                Ok((id, m, Some(attrs)))\n+            } else {\n+                let placeholder = ast::Mod { inner: syntax_pos::DUMMY_SP, items: Vec::new() };\n+                Ok((id, ItemKind::Mod(placeholder), None))\n+            }\n         } else {\n             let directory = self.directory.clone();\n             self.push_directory(id, &outer_attrs);"}]}