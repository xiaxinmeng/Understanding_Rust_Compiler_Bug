{"sha": "f177b7cb91acd9debd1ed974e6521edb2ab6b097", "node_id": "C_kwDOAAsO6NoAKGYxNzdiN2NiOTFhY2Q5ZGViZDFlZDk3NGU2NTIxZWRiMmFiNmIwOTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T11:19:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T11:19:30Z"}, "message": "Auto merge of #109303 - matthiaskrgr:rollup-usj4ef5, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107416 (Error code E0794 for late-bound lifetime parameter error.)\n - #108772 (Speed up tidy quite a lot)\n - #109193 (Add revisions for -Zlower-impl-trait-in-trait-to-assoc-ty fixed tests)\n - #109234 (Tweak implementation of overflow checking assertions)\n - #109238 (Fix generics mismatch errors for RPITITs on -Zlower-impl-trait-in-trait-to-assoc-ty)\n - #109283 (rustdoc: reduce allocations in `visibility_to_src_with_space`)\n - #109287 (Use `size_of_val` instead of manual calculation)\n - #109288 (Stabilise `unix_socket_abstract`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "19401efe737d61d8b2ac9fac15cce45dd9ba3cfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19401efe737d61d8b2ac9fac15cce45dd9ba3cfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f177b7cb91acd9debd1ed974e6521edb2ab6b097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f177b7cb91acd9debd1ed974e6521edb2ab6b097", "html_url": "https://github.com/rust-lang/rust/commit/f177b7cb91acd9debd1ed974e6521edb2ab6b097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f177b7cb91acd9debd1ed974e6521edb2ab6b097/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "html_url": "https://github.com/rust-lang/rust/commit/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c"}, {"sha": "49a152885d6050529f2d71645564c73e205f9da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a152885d6050529f2d71645564c73e205f9da6", "html_url": "https://github.com/rust-lang/rust/commit/49a152885d6050529f2d71645564c73e205f9da6"}], "stats": {"total": 1073, "additions": 760, "deletions": 313}, "files": [{"sha": "04d2597ecc69665cf358f4d54774528edd6a14e6", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -42,6 +42,7 @@ no_llvm_build\n /llvm/\n /mingw-build/\n build/\n+!/compiler/rustc_mir_build/src/build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "1b8e9312e2f587f6095a2643f35844aad980b54a", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -346,17 +346,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 crate::abi::codegen_return(fx);\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n-                if !fx.tcx.sess.overflow_checks() {\n-                    let overflow_not_to_check = match msg {\n-                        AssertKind::OverflowNeg(..) => true,\n-                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n-                    if overflow_not_to_check {\n-                        let target = fx.get_block(*target);\n-                        fx.bcx.ins().jump(target, &[]);\n-                        continue;\n-                    }\n+                if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n+                    let target = fx.get_block(*target);\n+                    fx.bcx.ins().jump(target, &[]);\n+                    continue;\n                 }\n                 let cond = codegen_operand(fx, cond).load_scalar(fx);\n "}, {"sha": "c34f1dbf8569da79ebbfdb083e20f68f95745de2", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -46,7 +46,7 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 // NOTE: ideally, we want the effects of both `unchecked_smul` and `unchecked_umul`\n                 // (resulting in `mul nsw nuw` in LLVM IR), since we know that the multiplication\n                 // cannot signed wrap, and that both operands are non-negative. But at the time of writing,\n-                // `BuilderMethods` can't do this, and it doesn't seem to enable any further optimizations.\n+                // the `LLVM-C` binding can't do this, and it doesn't seem to enable any further optimizations.\n                 bx.unchecked_smul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n                 bx.const_usize(unit.align.abi.bytes()),\n             )"}, {"sha": "f9aa2aecf65bc550296c1391af305275d6a06d3f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -563,15 +563,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // with #[rustc_inherit_overflow_checks] and inlined from\n         // another crate (mostly core::num generic/#[inline] fns),\n         // while the current crate doesn't use overflow checks.\n-        if !bx.cx().check_overflow() {\n-            let overflow_not_to_check = match msg {\n-                AssertKind::OverflowNeg(..) => true,\n-                AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                _ => false,\n-            };\n-            if overflow_not_to_check {\n-                const_cond = Some(expected);\n-            }\n+        if !bx.cx().check_overflow() && msg.is_optional_overflow_check() {\n+            const_cond = Some(expected);\n         }\n \n         // Don't codegen the panic block if success if known."}, {"sha": "c134d3a6b2f2a41b40bfc5f70ecbebd5f4776050", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -155,7 +155,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Whether Assert(OverflowNeg) and Assert(Overflow) MIR terminators should actually\n     /// check for overflow.\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n@@ -474,7 +474,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         false\n     }\n "}, {"sha": "c2d1bc11c37b5e62edc51a9344de56ac23ea04b4", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -138,12 +138,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let ignored = M::ignore_checkable_overflow_assertions(self)\n-                    && match msg {\n-                        mir::AssertKind::OverflowNeg(..) => true,\n-                        mir::AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n+                let ignored =\n+                    M::ignore_optional_overflow_checks(self) && msg.is_optional_overflow_check();\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n                 if ignored || expected == cond_val {\n                     self.go_to_block(target);"}, {"sha": "d104ff0891d34d06b95089a27cb19b78ce7853ed", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -513,6 +513,7 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n E0792: include_str!(\"./error_codes/E0792.md\"),\n E0793: include_str!(\"./error_codes/E0793.md\"),\n+E0794: include_str!(\"./error_codes/E0794.md\"),\n }\n \n // Undocumented removed error codes. Note that many removed error codes are documented."}, {"sha": "a33802885c00644762f370b176313767ff23ad8d", "filename": "compiler/rustc_error_codes/src/error_codes/E0794.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,64 @@\n+A lifetime parameter of a function definition is called *late-bound* if it both:\n+\n+1. appears in an argument type\n+2. does not appear in a generic type constraint\n+\n+You cannot specify lifetime arguments for late-bound lifetime parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0794\n+fn foo<'a>(x: &'a str) -> &'a str { x }\n+let _ = foo::<'static>;\n+```\n+\n+The type of a concrete instance of a generic function is universally quantified\n+over late-bound lifetime parameters. This is because we want the function to\n+work for any lifetime substituted for the late-bound lifetime parameter, no\n+matter where the function is called. Consequently, it doesn't make sense to\n+specify arguments for late-bound lifetime parameters, since they are not\n+resolved until the function's call site(s).\n+\n+To fix the issue, remove the specified lifetime:\n+\n+```\n+fn foo<'a>(x: &'a str) -> &'a str { x }\n+let _ = foo;\n+```\n+\n+### Additional information\n+\n+Lifetime parameters that are not late-bound are called *early-bound*.\n+Confusion may arise from the fact that late-bound and early-bound\n+lifetime parameters are declared the same way in function definitions.\n+When referring to a function pointer type, universal quantification over\n+late-bound lifetime parameters can be made explicit:\n+\n+```\n+trait BarTrait<'a> {}\n+\n+struct Bar<'a> {\n+    s: &'a str\n+}\n+\n+impl<'a> BarTrait<'a> for Bar<'a> {}\n+\n+fn bar<'a, 'b, T>(x: &'a str, _t: T) -> &'a str\n+where T: BarTrait<'b>\n+{\n+    x\n+}\n+\n+let bar_fn: for<'a> fn(&'a str, Bar<'static>) -> &'a str = bar; // OK\n+let bar_fn2 = bar::<'static, Bar>; // Not allowed\n+let bar_fn3 = bar::<Bar>; // OK\n+```\n+\n+In the definition of `bar`, the lifetime parameter `'a` is late-bound, while\n+`'b` is early-bound. This is reflected in the type annotation for `bar_fn`,\n+where `'a` is universally quantified and `'b` is substituted by a specific\n+lifetime. It is not allowed to explicitly specify early-bound lifetime\n+arguments when late-bound lifetime parameters are present (as for `bar_fn2`,\n+see issue #42868: https://github.com/rust-lang/rust/issues/42868), although the\n+types that are constrained by early-bound parameters can be specified (as for\n+`bar_fn3`)."}, {"sha": "3b5c67de2390e69198ca0bde9b9676c2843cb973", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -612,7 +612,7 @@ pub(crate) fn prohibit_explicit_late_bound_lifetimes(\n         if position == GenericArgPosition::Value\n             && args.num_lifetime_params() != param_counts.lifetimes\n         {\n-            let mut err = tcx.sess.struct_span_err(span, msg);\n+            let mut err = struct_span_err!(tcx.sess, span, E0794, \"{}\", msg);\n             err.span_note(span_late, note);\n             err.emit();\n         } else {"}, {"sha": "32b6aeed5f8cc3de34a03a97587dd9bd4b14ecbc", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1205,6 +1205,17 @@ fn compare_number_of_generics<'tcx>(\n         return Ok(());\n     }\n \n+    // We never need to emit a separate error for RPITITs, since if an RPITIT\n+    // has mismatched type or const generic arguments, then the method that it's\n+    // inheriting the generics from will also have mismatched arguments, and\n+    // we'll report an error for that instead. Delay a bug for safety, though.\n+    if tcx.opt_rpitit_info(trait_.def_id).is_some() {\n+        return Err(tcx.sess.delay_span_bug(\n+            rustc_span::DUMMY_SP,\n+            \"errors comparing numbers of generics of trait/impl functions were not emitted\",\n+        ));\n+    }\n+\n     let matchings = [\n         (\"type\", trait_own_counts.types, impl_own_counts.types),\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),"}, {"sha": "42c0354d03af5eddc5c9f5eee54c490d7173336d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1268,6 +1268,13 @@ impl<'tcx> BasicBlockData<'tcx> {\n }\n \n impl<O> AssertKind<O> {\n+    /// Returns true if this an overflow checking assertion controlled by -C overflow-checks.\n+    pub fn is_optional_overflow_check(&self) -> bool {\n+        use AssertKind::*;\n+        use BinOp::*;\n+        matches!(self, OverflowNeg(..) | Overflow(Add | Sub | Mul | Shl | Shr, ..))\n+    }\n+\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n     /// The caller is expected to handle `BoundsCheck` separately.\n@@ -1992,16 +1999,6 @@ impl BorrowKind {\n     }\n }\n \n-impl BinOp {\n-    /// The checkable operators are those whose overflow checking behavior is controlled by\n-    /// -Coverflow-checks option. The remaining operators have either no overflow conditions (e.g.,\n-    /// BitAnd, BitOr, BitXor) or are always checked for overflow (e.g., Div, Rem).\n-    pub fn is_checkable(self) -> bool {\n-        use self::BinOp::*;\n-        matches!(self, Add | Sub | Mul | Shl | Shr)\n-    }\n-}\n-\n impl<'tcx> Debug for Rvalue<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Rvalue::*;"}, {"sha": "b16b6616415aab79f5fba0ee3ac487f4a607a228", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -646,8 +646,7 @@ pub enum TerminatorKind<'tcx> {\n     /// When overflow checking is disabled and this is run-time MIR (as opposed to compile-time MIR\n     /// that is used for CTFE), the following variants of this terminator behave as `goto target`:\n     /// - `OverflowNeg(..)`,\n-    /// - `Overflow(op, ..)` if op is a \"checkable\" operation (add, sub, mul, shl, shr, but NOT\n-    /// div or rem).\n+    /// - `Overflow(op, ..)` if op is add, sub, mul, shl, shr, but NOT div or rem.\n     Assert {\n         cond: Operand<'tcx>,\n         expected: bool,"}, {"sha": "140d1154718f741ff101d91fc7ae5abf943f540e", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -73,19 +73,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[lhs], LocalInfo::Boring, NeedsTemporary::Maybe)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[lhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::Maybe\n+                    )\n                 );\n                 let rhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[rhs], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[rhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[arg], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[arg],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n@@ -272,8 +287,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[source], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[source],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n@@ -502,8 +522,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Category::of(&expr.kind),\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n-                let operand =\n-                    unpack!(block = this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No));\n+                let operand = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Use(operand))\n             }\n         }\n@@ -662,8 +684,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Repeating a const does nothing\n         } else {\n             // For a non-const, we may need to generate an appropriate `Drop`\n-            let value_operand =\n-                unpack!(block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No));\n+            let value_operand = unpack!(\n+                block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No)\n+            );\n             if let Operand::Move(to_drop) = value_operand {\n                 let success = this.cfg.start_new_block();\n                 this.cfg.terminate("}, {"sha": "2d52102db2cc6335674bdb308cd0640b841ad201", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -2252,7 +2252,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 user_ty: None,\n                 source_info,\n                 internal: false,\n-                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n+                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(\n+                    BindingForm::RefForGuard,\n+                ))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "80d8b27336c5438ec4a1818e0f4d07c9733fd727", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -876,21 +876,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    **self.local_decls[local].local_info.as_mut().assert_crate_local() = if let Some(kind) = param.self_kind {\n-                        LocalInfo::User(\n-                            BindingForm::ImplicitSelf(kind),\n-                        )\n-                    } else {\n-                        let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                        LocalInfo::User(BindingForm::Var(\n-                            VarBindingForm {\n+                    **self.local_decls[local].local_info.as_mut().assert_crate_local() =\n+                        if let Some(kind) = param.self_kind {\n+                            LocalInfo::User(BindingForm::ImplicitSelf(kind))\n+                        } else {\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n+                            LocalInfo::User(BindingForm::Var(VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n-                            },\n-                        ))\n-                    };\n+                            }))\n+                        };\n                     self.var_indices.insert(var, LocalsForNode::One(local));\n                 }\n                 _ => {"}, {"sha": "4e7bae7bcb05a53f6df970701c59c02c8eb365a7", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -834,7 +834,7 @@ mod impls {\n \n                 #[inline]\n                 fn hash_slice<H: ~const Hasher>(data: &[$ty], state: &mut H) {\n-                    let newlen = data.len() * mem::size_of::<$ty>();\n+                    let newlen = mem::size_of_val(data);\n                     let ptr = data.as_ptr() as *const u8;\n                     // SAFETY: `ptr` is valid and aligned, as this macro is only used\n                     // for numeric primitives which have no padding. The new slice only"}, {"sha": "4e88ab8ff5c5204c1fd7f2fa4d99a0d8f96f36be", "filename": "library/std/src/os/android/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,8 +1,8 @@\n //! Android-specific networking functionality.\n \n-#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "fcb3bb8348558cedcb7cd8e41b10d684054a49a5", "filename": "library/std/src/os/linux/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,8 +1,8 @@\n //! Linux-specific networking functionality.\n \n-#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "ea8102c9cc0aff771b3376d9f06406973ba4ea72", "filename": "library/std/src/os/net/linux_ext/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -4,7 +4,7 @@ use crate::os::unix::net::SocketAddr;\n use crate::sealed::Sealed;\n \n /// Platform-specific extensions to [`SocketAddr`].\n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub trait SocketAddrExt: Sealed {\n     /// Creates a Unix socket address in the abstract namespace.\n     ///\n@@ -22,7 +22,6 @@ pub trait SocketAddrExt: Sealed {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, SocketAddr};\n     /// use std::os::linux::net::SocketAddrExt;\n     ///\n@@ -38,6 +37,7 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     fn from_abstract_name<N>(name: N) -> crate::io::Result<SocketAddr>\n     where\n         N: AsRef<[u8]>;\n@@ -47,7 +47,6 @@ pub trait SocketAddrExt: Sealed {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, SocketAddr};\n     /// use std::os::linux::net::SocketAddrExt;\n     ///\n@@ -60,5 +59,6 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     fn as_abstract_name(&self) -> Option<&[u8]>;\n }"}, {"sha": "e7423dce6135b2219a657e40621051127523f961", "filename": "library/std/src/os/net/linux_ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -2,7 +2,7 @@\n \n #![doc(cfg(any(target_os = \"linux\", target_os = \"android\")))]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub(crate) mod addr;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "52a0da5bf1a65b31f4b903cf2c042f3b5e4a0dd9", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -245,12 +245,12 @@ impl SocketAddr {\n     }\n }\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n impl Sealed for SocketAddr {}\n \n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n impl linux_ext::addr::SocketAddrExt for SocketAddr {\n     fn as_abstract_name(&self) -> Option<&[u8]> {\n         if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }"}, {"sha": "e64569758a04a11ae4fb3b67805a2414886e8b0c", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -102,7 +102,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -119,7 +118,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixDatagram> {\n         unsafe {\n             let socket = UnixDatagram::unbound()?;\n@@ -217,7 +216,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -235,7 +233,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn connect_addr(&self, socket_addr: &SocketAddr) -> io::Result<()> {\n         unsafe {\n             cvt(libc::connect(\n@@ -523,7 +521,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -535,7 +532,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn send_to_addr(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize> {\n         unsafe {\n             let count = cvt(libc::sendto("}, {"sha": "83f0debe6765abb0d15268062a78f1bd557c4c18", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -90,7 +90,6 @@ impl UnixListener {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -107,7 +106,7 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixListener> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "65cb4ae07a50426424f187fbe902bd99e860e083", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -106,7 +106,6 @@ impl UnixStream {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, UnixStream};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -123,7 +122,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ````\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn connect_addr(socket_addr: &SocketAddr) -> io::Result<UnixStream> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "baddc9da48db8b5de4bc3fbfec40b78ea88bf55a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1118,7 +1118,11 @@ impl Step for Tidy {\n         cmd.arg(&builder.src);\n         cmd.arg(&builder.initial_cargo);\n         cmd.arg(&builder.out);\n-        cmd.arg(builder.jobs().to_string());\n+        // Tidy is heavily IO constrained. Still respect `-j`, but use a higher limit if `jobs` hasn't been configured.\n+        let jobs = builder.config.jobs.unwrap_or_else(|| {\n+            8 * std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get) as u32\n+        });\n+        cmd.arg(jobs.to_string());\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "d526a8be0811adc383daba96a070d3bcffd35505", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1502,27 +1502,27 @@ pub(crate) fn visibility_to_src_with_space<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'tcx>,\n     item_did: DefId,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-    let to_print = match visibility {\n-        None => String::new(),\n-        Some(ty::Visibility::Public) => \"pub \".to_owned(),\n+    let to_print: Cow<'static, str> = match visibility {\n+        None => \"\".into(),\n+        Some(ty::Visibility::Public) => \"pub \".into(),\n         Some(ty::Visibility::Restricted(vis_did)) => {\n             // FIXME(camelid): This may not work correctly if `item_did` is a module.\n             //                 However, rustdoc currently never displays a module's\n             //                 visibility, so it shouldn't matter.\n             let parent_module = find_nearest_parent_module(tcx, item_did);\n \n             if vis_did.is_crate_root() {\n-                \"pub(crate) \".to_owned()\n+                \"pub(crate) \".into()\n             } else if parent_module == Some(vis_did) {\n                 // `pub(in foo)` where `foo` is the parent module\n                 // is the same as no visibility modifier\n-                String::new()\n+                \"\".into()\n             } else if parent_module.and_then(|parent| find_nearest_parent_module(tcx, parent))\n                 == Some(vis_did)\n             {\n-                \"pub(super) \".to_owned()\n+                \"pub(super) \".into()\n             } else {\n-                format!(\"pub(in {}) \", tcx.def_path_str(vis_did))\n+                format!(\"pub(in {}) \", tcx.def_path_str(vis_did)).into()\n             }\n         }\n     };"}, {"sha": "c4baeb2a73bf53eee78d9af0d000af202eec0827", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -822,7 +822,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n+    fn ignore_optional_overflow_checks(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         !ecx.tcx.sess.overflow_checks()\n     }\n "}, {"sha": "070ce93f97c174c16771dc8f52854bae457c0905", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -103,7 +103,7 @@ mod os_impl {\n \n         // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n         // (e.g. using `git ls-files`).\n-        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+        walk_no_read(&[path], |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n             let file = entry.path();\n             let extension = file.extension();\n             let scripts = [\"py\", \"sh\", \"ps1\"];"}, {"sha": "84b133068055b174303c1d22878ee6ae07256bdb", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,21 +1,15 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n-use crate::walk::{filter_dirs, walk};\n+use crate::walk::{filter_dirs, filter_not_rust, walk};\n use std::path::Path;\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, filter_dirs, &mut |entry, contents| {\n-        let filename = entry.path();\n-        let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n-        if !is_rust {\n-            return;\n-        }\n-\n+    walk(test_dir, |path| filter_dirs(path) || filter_not_rust(path), &mut |entry, contents| {\n         for (i, line) in contents.lines().enumerate() {\n             if line.contains(\"borrowck_graphviz_postflow\") {\n-                tidy_error!(bad, \"{}:{}: {}\", filename.display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n+                tidy_error!(bad, \"{}:{}: {}\", entry.path().display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n             }\n         }\n     });"}, {"sha": "f18feda533c9ca104b033b2ffef59429eda0ebd0", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -9,8 +9,9 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n-use crate::walk::{filter_dirs, walk, walk_many};\n+use crate::walk::{filter_dirs, filter_not_rust, walk, walk_many};\n use std::collections::hash_map::{Entry, HashMap};\n+use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::num::NonZeroU32;\n@@ -101,17 +102,15 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        filter_dirs,\n+        |path| {\n+            filter_dirs(path)\n+                || filter_not_rust(path)\n+                || path.file_name() == Some(OsStr::new(\"features.rs\"))\n+                || path.file_name() == Some(OsStr::new(\"diagnostic_list.rs\"))\n+        },\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n-            if !filename.ends_with(\".rs\")\n-                || filename == \"features.rs\"\n-                || filename == \"diagnostic_list.rs\"\n-            {\n-                return;\n-            }\n-\n             let filen_underscore = filename.replace('-', \"_\").replace(\".rs\", \"\");\n             let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n "}, {"sha": "f59406c404bab9d4f29be5fa6e9ee47b6b4ae1ea", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -13,7 +13,7 @@ use std::path::PathBuf;\n use std::process;\n use std::str::FromStr;\n use std::sync::atomic::{AtomicBool, Ordering};\n-use std::thread::{scope, ScopedJoinHandle};\n+use std::thread::{self, scope, ScopedJoinHandle};\n \n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n@@ -55,16 +55,28 @@ fn main() {\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n-            ($p:ident $(, $args:expr)* ) => {\n+            ($p:ident) => {\n+                check!(@ $p, name=format!(\"{}\", stringify!($p)));\n+            };\n+            ($p:ident, $path:expr $(, $args:expr)* ) => {\n+                let shortened = $path.strip_prefix(&root_path).unwrap();\n+                let name = if shortened == std::path::Path::new(\"\") {\n+                    format!(\"{} (.)\", stringify!($p))\n+                } else {\n+                    format!(\"{} ({})\", stringify!($p), shortened.display())\n+                };\n+                check!(@ $p, name=name, $path $(,$args)*);\n+            };\n+            (@ $p:ident, name=$name:expr $(, $args:expr)* ) => {\n                 drain_handles(&mut handles);\n \n-                let handle = s.spawn(|| {\n+                let handle = thread::Builder::new().name($name).spawn_scoped(s, || {\n                     let mut flag = false;\n                     $p::check($($args, )* &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n-                });\n+                }).unwrap();\n                 handles.push_back(handle);\n             }\n         }\n@@ -108,7 +120,6 @@ fn main() {\n         check!(edition, &library_path);\n \n         check!(alphabetical, &src_path);\n-        check!(alphabetical, &tests_path);\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n "}, {"sha": "a965c98f48491ceff2acea5f3faea512d9ec85a5", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -19,7 +19,7 @@\n \n use crate::walk::{filter_dirs, walk};\n use regex::{Regex, RegexSet};\n-use std::path::Path;\n+use std::{ffi::OsStr, path::Path};\n \n /// Error code markdown is restricted to 80 columns because they can be\n /// displayed on the console with --example.\n@@ -228,21 +228,33 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        filter_dirs(path) || skip_markdown_path(path)\n+        if path.file_name().map_or(false, |name| name.to_string_lossy().starts_with(\".#\")) {\n+            // vim or emacs temporary file\n+            return true;\n+        }\n+\n+        if filter_dirs(path) || skip_markdown_path(path) {\n+            return true;\n+        }\n+\n+        let extensions = [\"rs\", \"py\", \"js\", \"sh\", \"c\", \"cpp\", \"h\", \"md\", \"css\", \"ftl\", \"goml\"];\n+        if extensions.iter().all(|e| path.extension() != Some(OsStr::new(e))) {\n+            return true;\n+        }\n+\n+        // We only check CSS files in rustdoc.\n+        path.extension().map_or(false, |e| e == \"css\") && !is_in(path, \"src\", \"librustdoc\")\n     }\n+\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n+\n     walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions =\n-            [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\", \".goml\"];\n-        if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n-            return;\n-        }\n \n         let is_style_file = filename.ends_with(\".css\");\n         let under_rustfmt = filename.ends_with(\".rs\") &&\n@@ -253,11 +265,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     a.ends_with(\"src/doc/book\")\n             });\n \n-        if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n-            // We only check CSS files in rustdoc.\n-            return;\n-        }\n-\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }"}, {"sha": "e0fa6aceb853c05686d14618f0348220ec158cc1", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -4,6 +4,8 @@\n use std::collections::BTreeMap;\n use std::path::Path;\n \n+use crate::walk::filter_not_rust;\n+\n const COMMENT: &str = \"//\";\n const LLVM_COMPONENTS_HEADER: &str = \"needs-llvm-components:\";\n const COMPILE_FLAGS_HEADER: &str = \"compile-flags:\";\n@@ -35,61 +37,57 @@ struct RevisionInfo<'a> {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    crate::walk::walk(\n-        path,\n-        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n-        &mut |entry, content| {\n-            let file = entry.path().display();\n-            let mut header_map = BTreeMap::new();\n-            iter_header(content, &mut |cfg, directive| {\n-                if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n-                    let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                    let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n-                    for component in value.split(' ') {\n-                        let component = component.trim();\n-                        if !component.is_empty() {\n-                            comp_vec.push(component);\n-                        }\n-                    }\n-                } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n-                    let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n-                    if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n-                        if let Some((arch, _)) =\n-                            v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n-                        {\n-                            let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                            info.target_arch.replace(arch);\n-                        } else {\n-                            eprintln!(\"{file}: seems to have a malformed --target value\");\n-                            *bad = true;\n-                        }\n+    crate::walk::walk(path, filter_not_rust, &mut |entry, content| {\n+        let file = entry.path().display();\n+        let mut header_map = BTreeMap::new();\n+        iter_header(content, &mut |cfg, directive| {\n+            if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n+                let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n+                for component in value.split(' ') {\n+                    let component = component.trim();\n+                    if !component.is_empty() {\n+                        comp_vec.push(component);\n                     }\n                 }\n-            });\n-            for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n-                let rev = rev.unwrap_or(\"[unspecified]\");\n-                match (target_arch, llvm_components) {\n-                    (None, None) => {}\n-                    (Some(_), None) => {\n-                        eprintln!(\n-                            \"{}: revision {} should specify `{}` as it has `--target` set\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n+            } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n+                let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n+                if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n+                    if let Some((arch, _)) =\n+                        v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n+                    {\n+                        let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                        info.target_arch.replace(arch);\n+                    } else {\n+                        eprintln!(\"{file}: seems to have a malformed --target value\");\n                         *bad = true;\n                     }\n-                    (None, Some(_)) => {\n-                        eprintln!(\n-                            \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n-                        *bad = true;\n-                    }\n-                    (Some(_), Some(_)) => {\n-                        // FIXME: check specified components against the target architectures we\n-                        // gathered.\n-                    }\n                 }\n             }\n-        },\n-    );\n+        });\n+        for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n+            let rev = rev.unwrap_or(\"[unspecified]\");\n+            match (target_arch, llvm_components) {\n+                (None, None) => {}\n+                (Some(_), None) => {\n+                    eprintln!(\n+                        \"{}: revision {} should specify `{}` as it has `--target` set\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (None, Some(_)) => {\n+                    eprintln!(\n+                        \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (Some(_), Some(_)) => {\n+                    // FIXME: check specified components against the target architectures we\n+                    // gathered.\n+                }\n+            }\n+        }\n+    });\n }"}, {"sha": "66f5c932be2a0fca00b21dce473e605e2a45abaf", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 59, "deletions": 63, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -3,87 +3,83 @@\n //! - there are no stray `.stderr` files\n \n use ignore::Walk;\n-use ignore::WalkBuilder;\n+use std::collections::HashMap;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 940;\n const ISSUES_ENTRY_LIMIT: usize = 1978;\n \n-fn check_entries(path: &Path, bad: &mut bool) {\n-    for dir in Walk::new(&path.join(\"ui\")) {\n+fn check_entries(tests_path: &Path, bad: &mut bool) {\n+    let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n+\n+    for dir in Walk::new(&tests_path.join(\"ui\")) {\n         if let Ok(entry) = dir {\n-            if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {\n-                let dir_path = entry.path();\n-                // Use special values for these dirs.\n-                let is_root = path.join(\"ui\") == dir_path;\n-                let is_issues_dir = path.join(\"ui/issues\") == dir_path;\n-                let limit = if is_root {\n-                    ROOT_ENTRY_LIMIT\n-                } else if is_issues_dir {\n-                    ISSUES_ENTRY_LIMIT\n-                } else {\n-                    ENTRY_LIMIT\n-                };\n+            let parent = entry.path().parent().unwrap().to_path_buf();\n+            *directories.entry(parent).or_default() += 1;\n+        }\n+    }\n \n-                let count = WalkBuilder::new(&dir_path)\n-                    .max_depth(Some(1))\n-                    .build()\n-                    .into_iter()\n-                    .collect::<Vec<_>>()\n-                    .len()\n-                    - 1; // remove the dir itself\n+    for (dir_path, count) in directories {\n+        // Use special values for these dirs.\n+        let is_root = tests_path.join(\"ui\") == dir_path;\n+        let is_issues_dir = tests_path.join(\"ui/issues\") == dir_path;\n+        let limit = if is_root {\n+            ROOT_ENTRY_LIMIT\n+        } else if is_issues_dir {\n+            ISSUES_ENTRY_LIMIT\n+        } else {\n+            ENTRY_LIMIT\n+        };\n \n-                if count > limit {\n-                    tidy_error!(\n-                        bad,\n-                        \"following path contains more than {} entries, \\\n-                            you should move the test to some relevant subdirectory (current: {}): {}\",\n-                        limit,\n-                        count,\n-                        dir_path.display()\n-                    );\n-                }\n-            }\n+        if count > limit {\n+            tidy_error!(\n+                bad,\n+                \"following path contains more than {} entries, \\\n+                    you should move the test to some relevant subdirectory (current: {}): {}\",\n+                limit,\n+                count,\n+                dir_path.display()\n+            );\n         }\n     }\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n-    for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n-            let file_path = entry.path();\n-            if let Some(ext) = file_path.extension() {\n-                if ext == \"stderr\" || ext == \"stdout\" {\n-                    // Test output filenames have one of the formats:\n-                    // ```\n-                    // $testname.stderr\n-                    // $testname.$mode.stderr\n-                    // $testname.$revision.stderr\n-                    // $testname.$revision.$mode.stderr\n-                    // ```\n-                    //\n-                    // For now, just make sure that there is a corresponding\n-                    // `$testname.rs` file.\n-                    //\n-                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n-                    // must strip all of them.\n-                    let testname =\n-                        file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n-                    if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n-                        tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n-                    }\n+    let (ui, ui_fulldeps) = (path.join(\"ui\"), path.join(\"ui-fulldeps\"));\n+    let paths = [ui.as_path(), ui_fulldeps.as_path()];\n+    crate::walk::walk_no_read(&paths, |_| false, &mut |entry| {\n+        let file_path = entry.path();\n+        if let Some(ext) = file_path.extension() {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have one of the formats:\n+                // ```\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                // ```\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // `$testname.rs` file.\n+                //\n+                // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                // must strip all of them.\n+                let testname =\n+                    file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n+                if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n+                    tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n+                }\n \n-                    if let Ok(metadata) = fs::metadata(file_path) {\n-                        if metadata.len() == 0 {\n-                            tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n-                        }\n+                if let Ok(metadata) = fs::metadata(file_path) {\n+                    if metadata.len() == 0 {\n+                        tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n                     }\n                 }\n             }\n-        });\n-    }\n+        }\n+    });\n }"}, {"sha": "2ade22c209f5aa157e2e39ac88b8913f9d98b212", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,6 +1,6 @@\n use ignore::DirEntry;\n \n-use std::{fs::File, io::Read, path::Path};\n+use std::{ffi::OsStr, fs::File, io::Read, path::Path};\n \n /// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n@@ -33,23 +33,26 @@ pub fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-pub fn walk_many(\n-    paths: &[&Path],\n+/// Filter for only files that end in `.rs`.\n+pub fn filter_not_rust(path: &Path) -> bool {\n+    path.extension() != Some(OsStr::new(\"rs\")) && !path.is_dir()\n+}\n+\n+pub fn walk(\n+    path: &Path,\n     skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n-    for path in paths {\n-        walk(path, skip.clone(), f);\n-    }\n+    walk_many(&[path], skip, f);\n }\n \n-pub fn walk(\n-    path: &Path,\n-    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     let mut contents = Vec::new();\n-    walk_no_read(path, skip, &mut |entry| {\n+    walk_no_read(paths, skip, &mut |entry| {\n         contents.clear();\n         let mut file = t!(File::open(entry.path()), entry.path());\n         t!(file.read_to_end(&mut contents), entry.path());\n@@ -62,11 +65,14 @@ pub fn walk(\n }\n \n pub(crate) fn walk_no_read(\n-    path: &Path,\n+    paths: &[&Path],\n     skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let mut walker = ignore::WalkBuilder::new(path);\n+    let mut walker = ignore::WalkBuilder::new(paths[0]);\n+    for path in &paths[1..] {\n+        walker.add(path);\n+    }\n     let walker = walker.filter_entry(move |e| !skip(e.path()));\n     for entry in walker.build() {\n         if let Ok(entry) = entry {"}, {"sha": "7ccf2f2301d2404c1689c718d8837d9d60c2460e", "filename": "tests/ui/async-await/async-trait-fn.current.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,42 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:6:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn bar(&self) {}\n+   |     -----^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:8:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "7ccf2f2301d2404c1689c718d8837d9d60c2460e", "filename": "tests/ui/async-await/async-trait-fn.next.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,42 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:6:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn bar(&self) {}\n+   |     -----^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:8:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "04123badb5383f21353f74d56589d6e94ba61551", "filename": "tests/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`"}, {"sha": "68ebe3507ac35d2dbc0910212ff534e4d80ec4ef", "filename": "tests/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,5 +1,5 @@\n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:3:5\n+  --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn foo() {}\n    |     -----^^^^^^^^^\n@@ -12,7 +12,7 @@ LL |     async fn foo() {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:4:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn bar(&self) {}\n    |     -----^^^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     async fn bar(&self) {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:6:5\n    |\n LL |     async fn baz() {\n    |     -----^^^^^^^^^"}, {"sha": "c47b99e657e1462fc1ba70d2a0564954415275c5", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.current.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,5 +1,5 @@\n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:3:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n    |\n LL | async fn foo() {}\n    | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -8,7 +8,7 @@ LL | async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:5:12\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -17,7 +17,7 @@ LL | fn baz() { async fn foo() {} }\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:7:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -26,7 +26,7 @@ LL | async fn async_baz() {\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -35,7 +35,7 @@ LL |     async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:14:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -44,7 +44,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -80,7 +80,7 @@ LL |             async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n    |\n LL |     async fn foo() {}\n    |     -----^^^^^^^^^", "previous_filename": "tests/ui/async-await/edition-deny-async-fns-2015.stderr"}, {"sha": "c47b99e657e1462fc1ba70d2a0564954415275c5", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.next.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,98 @@\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+   |\n+LL | async fn foo() {}\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+   |\n+LL | fn baz() { async fn foo() {} }\n+   |            ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+   |\n+LL | async fn async_baz() {\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+   |\n+LL |     async fn bar() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n+   |\n+LL |         async fn bar() {}\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+   |\n+LL |         async fn foo() {}\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n+   |\n+LL |             async fn bar() {}\n+   |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "d4c30dc9d828d9dbf86fb45b3f663410a7496f9b", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,4 +1,6 @@\n // edition:2015\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n "}, {"sha": "be23384e049da851cc674be2a4c73ecd814b1755", "filename": "tests/ui/async-await/in-trait/generics-mismatch.current.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:13:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "be23384e049da851cc674be2a4c73ecd814b1755", "filename": "tests/ui/async-await/in-trait/generics-mismatch.next.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:13:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "fc29783c0e32e820570e090c4e2902932f0df62e", "filename": "tests/ui/async-await/in-trait/generics-mismatch.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    async fn foo<T>();\n+}\n+\n+impl Foo for () {\n+    async fn foo<const N: usize>() {}\n+    //~^ ERROR: method `foo` has an incompatible generic parameter for trait `Foo` [E0053]\n+}\n+\n+fn main() {}"}, {"sha": "3518aa05cecc2f786d68cb2007defcc2910c01b5", "filename": "tests/ui/async-await/in-trait/generics-mismatch.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:11:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "a5efc757156567589331d7541917d17fc52d7b59", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:3:12\n+  --> $DIR/return-type-suggestion.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:8:9\n+  --> $DIR/return-type-suggestion.rs:10:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`", "previous_filename": "tests/ui/async-await/in-trait/return-type-suggestion.stderr"}, {"sha": "a5efc757156567589331d7541917d17fc52d7b59", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.next.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/return-type-suggestion.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-type-suggestion.rs:10:9\n+   |\n+LL |         Ok(())\n+   |         ^^^^^^- help: consider using a semicolon here: `;`\n+   |         |\n+   |         expected `()`, found `Result<(), _>`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<(), _>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3de66306d9ab89f455a85792385d73212a0ba8b5", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "463a37d7e3d1357f3c4d6d8d63c9ff8a3c15aa11", "filename": "tests/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n@@ -10,7 +10,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n@@ -22,7 +22,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n@@ -34,7 +34,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n@@ -94,7 +94,7 @@ LL |     let _ = [0; bar::<N>()];\n    |\n    = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n@@ -106,7 +106,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n@@ -134,7 +134,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n@@ -146,7 +146,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n@@ -160,3 +160,4 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n \n error: aborting due to 16 previous errors\n \n+For more information about this error, try `rustc --explain E0794`."}, {"sha": "a7bd9c62b0ee36ba1d9f52a18a479b15fd93759d", "filename": "tests/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -216,7 +216,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _: [u8; bar::<{ N }>()];\n    |                       +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n@@ -228,7 +228,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n@@ -251,7 +251,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n@@ -263,7 +263,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n@@ -294,7 +294,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n@@ -306,7 +306,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n@@ -329,7 +329,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n@@ -341,7 +341,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n@@ -355,5 +355,5 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n \n error: aborting due to 36 previous errors\n \n-Some errors have detailed explanations: E0658, E0747.\n+Some errors have detailed explanations: E0658, E0747, E0794.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "3c24eff9ae3016400f655e8e1b1f37e2a0a78a08", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/default-body-with-rpit.rs:11:9\n+  --> $DIR/default-body-with-rpit.rs:13:9\n    |\n LL |         \"\"\n    |         ^^ expected `impl Debug`, got `&'static str`\n    |\n note: previous use here\n-  --> $DIR/default-body-with-rpit.rs:10:39\n+  --> $DIR/default-body-with-rpit.rs:12:39\n    |\n LL |       async fn baz(&self) -> impl Debug {\n    |  _______________________________________^\n@@ -14,7 +14,7 @@ LL | |     }\n    | |_____^\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/default-body-with-rpit.rs:10:28\n+  --> $DIR/default-body-with-rpit.rs:12:28\n    |\n LL |     async fn baz(&self) -> impl Debug {\n    |                            ^^^^^^^^^^ cannot resolve opaque type", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.stderr"}, {"sha": "3c24eff9ae3016400f655e8e1b1f37e2a0a78a08", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.next.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,24 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/default-body-with-rpit.rs:13:9\n+   |\n+LL |         \"\"\n+   |         ^^ expected `impl Debug`, got `&'static str`\n+   |\n+note: previous use here\n+  --> $DIR/default-body-with-rpit.rs:12:39\n+   |\n+LL |       async fn baz(&self) -> impl Debug {\n+   |  _______________________________________^\n+LL | |         \"\"\n+LL | |     }\n+   | |_____^\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/default-body-with-rpit.rs:12:28\n+   |\n+LL |     async fn baz(&self) -> impl Debug {\n+   |                            ^^^^^^^^^^ cannot resolve opaque type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "6bcc7b9ef95f0a40ae6f21fe31f225089040d964", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,5 +1,7 @@\n // edition:2021\n // known-bug: #108304\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "653016cf009a9dc2284ba72e6e501ce328f5438a", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/doesnt-satisfy.rs:9:17\n+  --> $DIR/doesnt-satisfy.rs:12:17\n    |\n LL |     fn bar() -> () {}\n    |                 ^^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `Foo::bar::{opaque#0}`\n-  --> $DIR/doesnt-satisfy.rs:5:22\n+  --> $DIR/doesnt-satisfy.rs:8:22\n    |\n LL |     fn bar() -> impl std::fmt::Display;\n    |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::bar::{opaque#0}`", "previous_filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.stderr"}, {"sha": "bbfa089ceef92157f6ec000e09ee22b3485df943", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/doesnt-satisfy.rs:12:17\n+   |\n+LL |     fn bar() -> () {}\n+   |                 ^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `Foo::{opaque#0}`\n+  --> $DIR/doesnt-satisfy.rs:8:22\n+   |\n+LL |     fn bar() -> impl std::fmt::Display;\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fcd0b51eea4fc29361b4eda7621a07fe7caaa24f", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "310edbcb6cd1efc175144c569bdecf7c16c4f0a9", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,5 +1,5 @@\n error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/generics-mismatch.rs:11:12\n+  --> $DIR/generics-mismatch.rs:14:12\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |           - expected 0 type parameters", "previous_filename": "tests/ui/impl-trait/in-trait/generics-mismatch.stderr"}, {"sha": "310edbcb6cd1efc175144c569bdecf7c16c4f0a9", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/generics-mismatch.rs:14:12\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |           - expected 0 type parameters\n+...\n+LL |     fn bar<T>(&self) {}\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "9259ca193d1de79e085334798fe1a2cfbdcac029", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "6aa8ff461a9a92434cb9272087cc3cdced91adf3", "filename": "tests/ui/late-bound-lifetimes/issue-80618.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,8 @@\n+fn foo<'a>(x: &'a str) -> &'a str {\n+    x\n+}\n+\n+fn main() {\n+    let _ = foo::<'static>;\n+//~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present [E0794]\n+}"}, {"sha": "cf7423fc16feb43b59680d311bd4d725f67de0de", "filename": "tests/ui/late-bound-lifetimes/issue-80618.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -0,0 +1,15 @@\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/issue-80618.rs:6:19\n+   |\n+LL |     let _ = foo::<'static>;\n+   |                   ^^^^^^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/issue-80618.rs:1:8\n+   |\n+LL | fn foo<'a>(x: &'a str) -> &'a str {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0794`."}, {"sha": "645d8b8d14ad2c2d986d277eaaa793017532121e", "filename": "tests/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -30,7 +30,7 @@ note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:27:15\n    |\n LL |     S::late::<'static>(S, &0, &0);\n@@ -42,7 +42,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:29:15\n    |\n LL |     S::late::<'static, 'static>(S, &0, &0);\n@@ -54,7 +54,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:31:15\n    |\n LL |     S::late::<'static, 'static, 'static>(S, &0, &0);\n@@ -66,7 +66,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:34:21\n    |\n LL |     S::late_early::<'static, 'static>(S, &0);\n@@ -78,7 +78,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:36:21\n    |\n LL |     S::late_early::<'static, 'static, 'static>(S, &0);\n@@ -90,7 +90,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:40:24\n    |\n LL |     S::late_implicit::<'static>(S, &0, &0);\n@@ -102,7 +102,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:42:24\n    |\n LL |     S::late_implicit::<'static, 'static>(S, &0, &0);\n@@ -114,7 +114,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:44:24\n    |\n LL |     S::late_implicit::<'static, 'static, 'static>(S, &0, &0);\n@@ -126,7 +126,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:47:30\n    |\n LL |     S::late_implicit_early::<'static, 'static>(S, &0);\n@@ -138,7 +138,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:49:30\n    |\n LL |     S::late_implicit_early::<'static, 'static, 'static>(S, &0);\n@@ -150,7 +150,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:52:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static>(&S);\n@@ -162,7 +162,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:54:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static, 'static>(&S);\n@@ -174,7 +174,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:57:28\n    |\n LL |     S::late_unused_early::<'static, 'static>(S);\n@@ -186,7 +186,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:59:28\n    |\n LL |     S::late_unused_early::<'static, 'static, 'static>(S);\n@@ -232,4 +232,5 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n \n error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0794.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "b215d5832171f6192ccc250f51dc5e0783f27f1b", "filename": "tests/ui/methods/method-call-lifetime-args.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f177b7cb91acd9debd1ed974e6521edb2ab6b097/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr?ref=f177b7cb91acd9debd1ed974e6521edb2ab6b097", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args.rs:9:15\n    |\n LL |     S::late::<'static>(S, &0, &0);\n@@ -10,7 +10,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args.rs:11:24\n    |\n LL |     S::late_implicit::<'static>(S, &0, &0);\n@@ -24,3 +24,4 @@ LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0794`."}]}