{"sha": "45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb", "node_id": "C_kwDOAAsO6NoAKDQ1ZmQ1ZTY5N2Y2ZDdjZjFkMDljNmM0NjVjYjAwOGVhYmQxYzYzZmI", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-06-24T12:19:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-06-24T12:19:18Z"}, "message": "Improve comments", "tree": {"sha": "4d5e675d3c5095b30c013b4c75990111517b7ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d5e675d3c5095b30c013b4c75990111517b7ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb", "html_url": "https://github.com/rust-lang/rust/commit/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80c34867fab85bfa0ac3661e8abd264991af324", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80c34867fab85bfa0ac3661e8abd264991af324", "html_url": "https://github.com/rust-lang/rust/commit/c80c34867fab85bfa0ac3661e8abd264991af324"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "9901df2af088f67ffd22f23c6fe6f715a7c7ac02", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=45fd5e697f6d7cf1d09c6c465cb008eabd1c63fb", "patch": "@@ -421,15 +421,15 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    /// When the fixed-point loop reaches a stable state, we might still have some unresolved\n-    /// attributes (or unexpanded attribute proc macros) left over. This takes one of them, and\n-    /// feeds the item it's applied to back into name resolution.\n+    /// When the fixed-point loop reaches a stable state, we might still have\n+    /// some unresolved attributes left over. This takes one of them, and feeds\n+    /// the item it's applied to back into name resolution.\n     ///\n     /// This effectively ignores the fact that the macro is there and just treats the items as\n     /// normal code.\n     ///\n-    /// This improves UX when proc macros are turned off or don't work, and replicates the behavior\n-    /// before we supported proc. attribute macros.\n+    /// This improves UX for unresolved attributes, and replicates the\n+    /// behavior before we supported proc. attribute macros.\n     fn reseed_with_unresolved_attribute(&mut self) -> ReachedFixedPoint {\n         cov_mark::hit!(unresolved_attribute_fallback);\n \n@@ -1229,6 +1229,7 @@ impl DefCollector<'_> {\n                     );\n                     let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call_id);\n \n+                    // If proc attribute macro expansion is disabled, skip expanding it here\n                     if !self.db.enable_proc_attr_macros() {\n                         self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                             directive.module_id,\n@@ -1250,8 +1251,10 @@ impl DefCollector<'_> {\n \n                     if let MacroDefKind::ProcMacro(exp, ..) = loc.def.kind {\n                         if exp.is_dummy() {\n-                            // Proc macros that cannot be expanded are treated as not\n-                            // resolved, in order to fall back later.\n+                            // If there's no expander for the proc macro (e.g.\n+                            // because proc macros are disabled, or building the\n+                            // proc macro crate failed), report this and skip\n+                            // expansion like we would if it was disabled\n                             self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                                 directive.module_id,\n                                 loc.kind,"}]}