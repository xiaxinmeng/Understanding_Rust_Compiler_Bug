{"sha": "6d2033512b37a7e6f1b659404e471c2352b2f83f", "node_id": "C_kwDOAAsO6NoAKDZkMjAzMzUxMmIzN2E3ZTZmMWI2NTk0MDRlNDcxYzIzNTJiMmY4M2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-09T05:02:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-09T05:02:30Z"}, "message": "Rollup merge of #99207 - 5225225:msan-eager-checks, r=jackh726\n\nEnable eager checks for memory sanitizer\n\nFixes #99179", "tree": {"sha": "d2d8198e91f260ced19116f49abe156b930060d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d8198e91f260ced19116f49abe156b930060d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2033512b37a7e6f1b659404e471c2352b2f83f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGsjmCRBK7hj4Ov3rIwAApVoIABUu50XnoPsBeZNNdAQKmC2h\npTDGiGDWY0rtVD8maHfPXndsVf4GLKWxVYpcv3i6mLlzJHm52M9DvQex4wDuTwCI\nl8NxTRTKXiZ87ztsWbjM4hnW7DZZiROv0XN1dte+7oYZn2qsdc2/R6TMmeB/MjWC\nudCJPEpyc+cuToxFmxC+hi5Cn+dSGVJCyWQI1RZYcSgNvgRyQ3KQv3WtYjg1kf/c\nr08Z8quJreKVJNaptY+rTw27MN4cZ31ElUcuPdnrpV5jmgI9y5LKlqsJ8WnI4wWD\noo2vK8CbHRz4ujs6Gw8EL9L1/UWYr3LIHS5Bnx72aMsvZSJRvj4vUNz3YmTyP40=\n=IK5z\n-----END PGP SIGNATURE-----\n", "payload": "tree d2d8198e91f260ced19116f49abe156b930060d6\nparent 7200da0217f99e929e58d0b40483097db37270ac\nparent 16525cc4c34649c564e9544ec1d9c45c4c4f4e52\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662699750 +0200\ncommitter GitHub <noreply@github.com> 1662699750 +0200\n\nRollup merge of #99207 - 5225225:msan-eager-checks, r=jackh726\n\nEnable eager checks for memory sanitizer\n\nFixes #99179\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2033512b37a7e6f1b659404e471c2352b2f83f", "html_url": "https://github.com/rust-lang/rust/commit/6d2033512b37a7e6f1b659404e471c2352b2f83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2033512b37a7e6f1b659404e471c2352b2f83f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7200da0217f99e929e58d0b40483097db37270ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7200da0217f99e929e58d0b40483097db37270ac", "html_url": "https://github.com/rust-lang/rust/commit/7200da0217f99e929e58d0b40483097db37270ac"}, {"sha": "16525cc4c34649c564e9544ec1d9c45c4c4f4e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/16525cc4c34649c564e9544ec1d9c45c4c4f4e52", "html_url": "https://github.com/rust-lang/rust/commit/16525cc4c34649c564e9544ec1d9c45c4c4f4e52"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "26f5225f6b445b820518fc74c26cada13e98308f", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d2033512b37a7e6f1b659404e471c2352b2f83f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2033512b37a7e6f1b659404e471c2352b2f83f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=6d2033512b37a7e6f1b659404e471c2352b2f83f", "patch": "@@ -19,6 +19,7 @@ use rustc_target::abi::call::ArgAbi;\n pub use rustc_target::abi::call::*;\n use rustc_target::abi::{self, HasDataLayout, Int};\n pub use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::SanitizerSet;\n \n use libc::c_uint;\n use smallvec::SmallVec;\n@@ -90,6 +91,13 @@ fn get_attrs<'ll>(this: &ArgAttributes, cx: &CodegenCx<'ll, '_>) -> SmallVec<[&'\n         if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n             attrs.push(llvm::AttributeKind::NoAlias.create_attr(cx.llcx));\n         }\n+    } else if cx.tcx.sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n+        // If we're not optimising, *but* memory sanitizer is on, emit noundef, since it affects\n+        // memory sanitizer's behavior.\n+\n+        if regular.contains(ArgAttribute::NoUndef) {\n+            attrs.push(llvm::AttributeKind::NoUndef.create_attr(cx.llcx));\n+        }\n     }\n \n     attrs"}, {"sha": "24e18826048983f2e51cc4f0f2546328b8aa16a4", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d2033512b37a7e6f1b659404e471c2352b2f83f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6d2033512b37a7e6f1b659404e471c2352b2f83f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=6d2033512b37a7e6f1b659404e471c2352b2f83f", "patch": "@@ -134,7 +134,12 @@ extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n-      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#if LLVM_VERSION_GE(14, 0)\n+      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel, /*EagerChecks=*/true}\n+#else\n+      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}\n+#endif\n+  ));\n #else\n   report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n #endif\n@@ -930,10 +935,18 @@ LLVMRustOptimizeWithNewPassManager(\n \n   if (SanitizerOptions) {\n     if (SanitizerOptions->SanitizeMemory) {\n+#if LLVM_VERSION_GE(14, 0)\n+      MemorySanitizerOptions Options(\n+          SanitizerOptions->SanitizeMemoryTrackOrigins,\n+          SanitizerOptions->SanitizeMemoryRecover,\n+          /*CompileKernel=*/false,\n+          /*EagerChecks=*/true);\n+#else\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n           SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false);\n+#endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n #if LLVM_VERSION_GE(14, 0) && LLVM_VERSION_LT(16, 0)"}, {"sha": "8a0590bf16c529efee1814baf539ba006871cff4", "filename": "src/test/ui/sanitize/memory-eager.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d2033512b37a7e6f1b659404e471c2352b2f83f/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2033512b37a7e6f1b659404e471c2352b2f83f/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs?ref=6d2033512b37a7e6f1b659404e471c2352b2f83f", "patch": "@@ -0,0 +1,38 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-memory\n+// min-llvm-version: 14.0.0\n+//\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n+//\n+// run-fail\n+// error-pattern: MemorySanitizer: use-of-uninitialized-value\n+// error-pattern: Uninitialized value was created by an allocation\n+// error-pattern: in the stack frame of function 'random'\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![feature(bench_black_box)]\n+\n+use std::hint::black_box;\n+use std::mem::MaybeUninit;\n+\n+#[inline(never)]\n+#[no_mangle]\n+#[allow(invalid_value)]\n+fn random() -> char {\n+    let r = unsafe { MaybeUninit::uninit().assume_init() };\n+    // Avoid optimizing everything out.\n+    black_box(r)\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    random();\n+    0\n+}"}, {"sha": "14d4de65dd378ed0358cbda7de43503b7a1e5630", "filename": "src/test/ui/sanitize/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d2033512b37a7e6f1b659404e471c2352b2f83f/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2033512b37a7e6f1b659404e471c2352b2f83f/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=6d2033512b37a7e6f1b659404e471c2352b2f83f", "patch": "@@ -1,7 +1,10 @@\n // needs-sanitizer-support\n // needs-sanitizer-memory\n //\n-// compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n //\n // run-fail\n // error-pattern: MemorySanitizer: use-of-uninitialized-value\n@@ -22,9 +25,9 @@ use std::mem::MaybeUninit;\n #[inline(never)]\n #[no_mangle]\n fn random() -> [isize; 32] {\n-    let r = unsafe { MaybeUninit::uninit().assume_init() };\n+    let r = MaybeUninit::uninit();\n     // Avoid optimizing everything out.\n-    black_box(r)\n+    unsafe { std::intrinsics::volatile_load(r.as_ptr()) }\n }\n \n #[inline(never)]\n@@ -39,6 +42,6 @@ fn xor(a: &[isize]) -> isize {\n \n #[start]\n fn main(_: isize, _: *const *const u8) -> isize {\n-    let r = random();\n+    let r = black_box(random as fn() -> [isize; 32])();\n     xor(&r)\n }"}]}