{"sha": "092c4595fef374cc10cc44ada67a14e773f1b49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmM0NTk1ZmVmMzc0Y2MxMGNjNDRhZGE2N2ExNGU3NzNmMWI0OWU=", "commit": {"author": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-04-17T10:53:13Z"}, "committer": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-04-17T18:51:07Z"}, "message": "fix redundant_pattern_matching lint\n\n- now it handles `while let` case\n- better suggestions in `if let` case", "tree": {"sha": "9df787098257f40a3749a33a856a891ed209004b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df787098257f40a3749a33a856a891ed209004b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092c4595fef374cc10cc44ada67a14e773f1b49e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEopQOAF0V9HUfAT+fRv3WL5zBFNsFAl6Z+psACgkQRv3WL5zB\nFNsYzw/5AfeEcotF2tpNkiZS8SwUQWqvbpmdmzHGisQGuqUONyPfsPEe7lCspjay\njJh/eRh7OKKVduRqzcW9/UbvudhT0cvqkqeNTvPlBS/RZ3WG/S7Zq9j6gk+kx4Ju\n7rYgivs/qJFbLfaQLWeGKNNsWuzsMWkyBJ/QKRq6xtiLL9Z/ajfDDWEjGALODMHV\ng2qvODFbIazt/vIjdQ/ua8gTzf8bUyR8OePWQsbuDjnwPAJAMHGLpl6MVW4VpVNe\nzxJS9zT4xM0v2SGMiBlx2JvmYZXiYuo8Dx6BAaJDROoOIVSAaEklK2K1jt6ejED/\nxKSsu+CFN6pr0pHNauxFOLLioc9atn5cPS5b0lBkp+Jiarf0MvGU+tMP6duN8TcI\nNO/YJyOsMIRd7v5rlDVBR40nk9G+9O/mxU7FAG5ufHRyTk/bflwn9ehH7LChy1X8\njdBqdNoQ0efducFGGwqeDwBCBeRLUmncI2yKVhpkUT8myrpGnIEaKD7NS5MWbukV\n5sjQ2OE8VRdenAxiswWuhMvRrTebWIzeur8cCCx8Mi8dw9D+GeO2WzMYHhwLgKP4\nQX8VRCqwHAlJMBDxCCreFbUx4F2Cd8Wk5AEznjMYIW+Rb8+hzYK2P+gsQ/jN8Qx5\nBsHtZtOPTb6PgsZeKT1wz4HRh9eFybMDuDcQmBcPJN0fUatKQkA=\n=g7eD\n-----END PGP SIGNATURE-----", "payload": "tree 9df787098257f40a3749a33a856a891ed209004b\nparent f1fb815603e05a6c48f53e18a16e4804dface48a\nauthor Aleksei Latyshev <alex_700_95@mail.ru> 1587120793 +0300\ncommitter Aleksei Latyshev <alex_700_95@mail.ru> 1587149467 +0300\n\nfix redundant_pattern_matching lint\n\n- now it handles `while let` case\n- better suggestions in `if let` case\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092c4595fef374cc10cc44ada67a14e773f1b49e", "html_url": "https://github.com/rust-lang/rust/commit/092c4595fef374cc10cc44ada67a14e773f1b49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092c4595fef374cc10cc44ada67a14e773f1b49e/comments", "author": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1fb815603e05a6c48f53e18a16e4804dface48a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fb815603e05a6c48f53e18a16e4804dface48a", "html_url": "https://github.com/rust-lang/rust/commit/f1fb815603e05a6c48f53e18a16e4804dface48a"}], "stats": {"total": 204, "additions": 153, "deletions": 51}, "files": [{"sha": "334ceed64c231564550c7cf2f43579d138d96d5a", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/092c4595fef374cc10cc44ada67a14e773f1b49e/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092c4595fef374cc10cc44ada67a14e773f1b49e/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=092c4595fef374cc10cc44ada67a14e773f1b49e", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n@@ -48,9 +49,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPatternMatching {\n         if let ExprKind::Match(op, arms, ref match_source) = &expr.kind {\n             match match_source {\n                 MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n-                MatchSource::IfLetDesugar { contains_else_clause } => {\n-                    find_sugg_for_if_let(cx, expr, op, arms, *contains_else_clause)\n-                },\n+                MatchSource::IfLetDesugar { .. } => find_sugg_for_if_let(cx, expr, op, arms, \"if\"),\n+                MatchSource::WhileLetDesugar => find_sugg_for_if_let(cx, expr, op, arms, \"while\"),\n                 _ => return,\n             }\n         }\n@@ -62,7 +62,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n     expr: &'tcx Expr<'_>,\n     op: &Expr<'_>,\n     arms: &[Arm<'_>],\n-    has_else: bool,\n+    keyword: &'static str,\n ) {\n     let good_method = match arms[0].pat.kind {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n@@ -86,20 +86,32 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n         _ => return,\n     };\n \n-    let maybe_semi = if has_else { \"\" } else { \";\" };\n+    // check that `while_let_on_iterator` lint does not trigger\n+    if_chain! {\n+        if keyword == \"while\";\n+        if let ExprKind::MethodCall(method_path, _, _) = op.kind;\n+        if method_path.ident.name == sym!(next);\n+        if match_trait_method(cx, op, &paths::ITERATOR);\n+        then {\n+            return;\n+        }\n+    }\n \n     span_lint_and_then(\n         cx,\n         REDUNDANT_PATTERN_MATCHING,\n         arms[0].pat.span,\n         &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n         |diag| {\n-            let span = expr.span.to(op.span);\n+            // in the case of WhileLetDesugar expr.span == op.span incorrectly.\n+            // this is a workaround to restore true value of expr.span\n+            let expr_span = expr.span.to(arms[1].span);\n+            let span = expr_span.until(op.span.shrink_to_hi());\n             diag.span_suggestion(\n                 span,\n                 \"try this\",\n-                format!(\"{}.{}{}\", snippet(cx, op.span, \"_\"), good_method, maybe_semi),\n-                Applicability::MaybeIncorrect, // snippet\n+                format!(\"{} {}.{}\", keyword, snippet(cx, op.span, \"_\"), good_method),\n+                Applicability::MachineApplicable, // snippet\n             );\n         },\n     );"}, {"sha": "c58db5493ad07ae8bae6b154184eafdc0a34a69c", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=092c4595fef374cc10cc44ada67a14e773f1b49e", "patch": "@@ -2,16 +2,37 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool)]\n \n fn main() {\n-    Ok::<i32, i32>(42).is_ok();\n+    if Ok::<i32, i32>(42).is_ok() {}\n \n-    Err::<i32, i32>(42).is_err();\n+    if Err::<i32, i32>(42).is_err() {}\n \n-    None::<()>.is_none();\n+    if None::<()>.is_none() {}\n \n-    Some(42).is_some();\n+    if Some(42).is_some() {}\n+\n+    if Some(42).is_some() {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while Some(42).is_some() {}\n+\n+    while Some(42).is_none() {}\n+\n+    while None::<()>.is_none() {}\n+\n+    while Ok::<i32, i32>(10).is_ok() {}\n+\n+    while Ok::<i32, i32>(10).is_err() {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while v.pop().is_some() {\n+        foo();\n+    }\n \n     if Ok::<i32, i32>(42).is_ok() {}\n \n@@ -39,22 +60,34 @@ fn main() {\n \n     let _ = None::<()>.is_none();\n \n-    let _ = Ok::<usize, ()>(4).is_ok();\n+    let _ = if Ok::<usize, ()>(4).is_ok() { true } else { false };\n \n     let _ = does_something();\n     let _ = returns_unit();\n \n     let opt = Some(false);\n-    let x = opt.is_some();\n+    let x = if opt.is_some() { true } else { false };\n     takes_bool(x);\n }\n \n fn takes_bool(_: bool) {}\n \n+fn foo() {}\n+\n+fn bar() {}\n+\n fn does_something() -> bool {\n-    Ok::<i32, i32>(4).is_ok()\n+    if Ok::<i32, i32>(4).is_ok() {\n+        true\n+    } else {\n+        false\n+    }\n }\n \n fn returns_unit() {\n-    Ok::<i32, i32>(4).is_ok();\n+    if Ok::<i32, i32>(4).is_ok() {\n+        true\n+    } else {\n+        false\n+    };\n }"}, {"sha": "9a9b3fb5ca04a44cabc88548717bd7cb70c4aec4", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=092c4595fef374cc10cc44ada67a14e773f1b49e", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n@@ -13,6 +13,27 @@ fn main() {\n \n     if let Some(_) = Some(42) {}\n \n+    if let Some(_) = Some(42) {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while let Some(_) = v.pop() {\n+        foo();\n+    }\n+\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n@@ -72,6 +93,10 @@ fn main() {\n \n fn takes_bool(_: bool) {}\n \n+fn foo() {}\n+\n+fn bar() {}\n+\n fn does_something() -> bool {\n     if let Ok(_) = Ok::<i32, i32>(4) {\n         true"}, {"sha": "6285a7f5fcd166dd6194c8978cadbd2dd37b9ab8", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092c4595fef374cc10cc44ada67a14e773f1b49e/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=092c4595fef374cc10cc44ada67a14e773f1b49e", "patch": "@@ -2,30 +2,72 @@ error: redundant pattern matching, consider using `is_ok()`\n   --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok();`\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n   --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n-   |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err();`\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n   --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let None = None::<()> {}\n-   |     -------^^^^---------------- help: try this: `None::<()>.is_none();`\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^-------------- help: try this: `Some(42).is_some();`\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n+   |\n+LL |     if let Some(_) = Some(42) {\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:22:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n+   |\n+LL |     while let None = Some(42) {}\n+   |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:28:5\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:33:15\n+   |\n+LL |     while let Some(_) = v.pop() {\n+   |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:49:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:33:5\n+  --> $DIR/redundant_pattern_matching.rs:54:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -43,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:38:5\n+  --> $DIR/redundant_pattern_matching.rs:59:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -52,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:43:5\n+  --> $DIR/redundant_pattern_matching.rs:64:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -61,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:48:5\n+  --> $DIR/redundant_pattern_matching.rs:69:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -70,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:53:5\n+  --> $DIR/redundant_pattern_matching.rs:74:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -79,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:58:13\n+  --> $DIR/redundant_pattern_matching.rs:79:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -89,38 +131,28 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:63:20\n+  --> $DIR/redundant_pattern_matching.rs:84:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n-   |             -------^^^^^--------------------------------------------- help: try this: `Ok::<usize, ()>(4).is_ok()`\n+   |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:20\n+  --> $DIR/redundant_pattern_matching.rs:90:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n-   |             -------^^^^^^^------------------------------ help: try this: `opt.is_some()`\n+   |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:76:12\n+  --> $DIR/redundant_pattern_matching.rs:101:12\n    |\n-LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n-   |  _____-      ^^^^^\n-LL | |         true\n-LL | |     } else {\n-LL | |         false\n-LL | |     }\n-   | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n+LL |     if let Ok(_) = Ok::<i32, i32>(4) {\n+   |     -------^^^^^-------------------- help: try this: `if Ok::<i32, i32>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:84:12\n+  --> $DIR/redundant_pattern_matching.rs:109:12\n    |\n-LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n-   |  _____-      ^^^^^\n-LL | |         true\n-LL | |     } else {\n-LL | |         false\n-LL | |     };\n-   | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n+LL |     if let Ok(_) = Ok::<i32, i32>(4) {\n+   |     -------^^^^^-------------------- help: try this: `if Ok::<i32, i32>(4).is_ok()`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 22 previous errors\n "}]}