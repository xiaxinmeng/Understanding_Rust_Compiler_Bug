{"sha": "614ba3ab8622ce69df862234cadae50b951ca386", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNGJhM2FiODYyMmNlNjlkZjg2MjIzNGNhZGFlNTBiOTUxY2EzODY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-30T17:32:44Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-30T17:32:44Z"}, "message": "Merge pull request #255 from TimNN/precedence-negative-literal\n\nadd precedence_negative_literal lint", "tree": {"sha": "08f96b7b65d7b365bc5f61c2ddbdd95f204885eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f96b7b65d7b365bc5f61c2ddbdd95f204885eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/614ba3ab8622ce69df862234cadae50b951ca386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/614ba3ab8622ce69df862234cadae50b951ca386", "html_url": "https://github.com/rust-lang/rust/commit/614ba3ab8622ce69df862234cadae50b951ca386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/614ba3ab8622ce69df862234cadae50b951ca386/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298728ed652fd48583c563eddb1707b392e7a18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/298728ed652fd48583c563eddb1707b392e7a18b", "html_url": "https://github.com/rust-lang/rust/commit/298728ed652fd48583c563eddb1707b392e7a18b"}, {"sha": "ef0c933550937ed0db47fb9da9f0aa32e75c865b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0c933550937ed0db47fb9da9f0aa32e75c865b", "html_url": "https://github.com/rust-lang/rust/commit/ef0c933550937ed0db47fb9da9f0aa32e75c865b"}], "stats": {"total": 126, "additions": 79, "deletions": 47}, "files": [{"sha": "1a1b6fe5956213dcab03b0b510abc2b4f4cf572b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/614ba3ab8622ce69df862234cadae50b951ca386/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/614ba3ab8622ce69df862234cadae50b951ca386/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=614ba3ab8622ce69df862234cadae50b951ca386", "patch": "@@ -39,7 +39,7 @@ name\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                   | warn    | using a return statement like `return expr;` where an expression would suffice\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)               | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)             | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                             | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                             | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                   | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)             | warn    | using Range::step_by(0), which produces an infinite iterator\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)"}, {"sha": "c72c5b1d7a7fbb98513e507151c3a3d17b364eef", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/614ba3ab8622ce69df862234cadae50b951ca386/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614ba3ab8622ce69df862234cadae50b951ca386/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=614ba3ab8622ce69df862234cadae50b951ca386", "patch": "@@ -40,6 +40,7 @@ pub mod lifetimes;\n pub mod loops;\n pub mod ranges;\n pub mod matches;\n+pub mod precedence;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -52,7 +53,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n     reg.register_lint_pass(box approx_const::ApproxConstant as LintPassObject);\n     reg.register_lint_pass(box misc::FloatCmp as LintPassObject);\n-    reg.register_lint_pass(box misc::Precedence as LintPassObject);\n+    reg.register_lint_pass(box precedence::Precedence as LintPassObject);\n     reg.register_lint_pass(box eta_reduction::EtaPass as LintPassObject);\n     reg.register_lint_pass(box identity_op::IdentityOp as LintPassObject);\n     reg.register_lint_pass(box mut_mut::MutMut as LintPassObject);\n@@ -109,10 +110,10 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::CMP_OWNED,\n         misc::FLOAT_CMP,\n         misc::MODULO_ONE,\n-        misc::PRECEDENCE,\n         misc::TOPLEVEL_REF_ARG,\n         mut_mut::MUT_MUT,\n         needless_bool::NEEDLESS_BOOL,\n+        precedence::PRECEDENCE,\n         ptr_arg::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         returns::LET_AND_RETURN,"}, {"sha": "ef9f4248c0c63cb54a6568901585766d0aa24a1a", "filename": "src/misc.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/614ba3ab8622ce69df862234cadae50b951ca386/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614ba3ab8622ce69df862234cadae50b951ca386/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=614ba3ab8622ce69df862234cadae50b951ca386", "patch": "@@ -109,50 +109,6 @@ fn is_float(cx: &Context, expr: &Expr) -> bool {\n     }\n }\n \n-declare_lint!(pub PRECEDENCE, Warn,\n-              \"expressions where precedence may trip up the unwary reader of the source; \\\n-               suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\");\n-\n-#[derive(Copy,Clone)]\n-pub struct Precedence;\n-\n-impl LintPass for Precedence {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PRECEDENCE)\n-    }\n-\n-    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n-        if let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n-            if is_bit_op(op) && (is_arith_expr(left) || is_arith_expr(right)) {\n-                span_lint(cx, PRECEDENCE, expr.span,\n-                    \"operator precedence can trip the unwary. Consider adding parentheses \\\n-                     to the subexpression\");\n-            }\n-        }\n-    }\n-}\n-\n-fn is_arith_expr(expr : &Expr) -> bool {\n-    match expr.node {\n-        ExprBinary(Spanned { node: op, ..}, _, _) => is_arith_op(op),\n-        _ => false\n-    }\n-}\n-\n-fn is_bit_op(op : BinOp_) -> bool {\n-    match op {\n-        BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => true,\n-        _ => false\n-    }\n-}\n-\n-fn is_arith_op(op : BinOp_) -> bool {\n-    match op {\n-        BiAdd | BiSub | BiMul | BiDiv | BiRem => true,\n-        _ => false\n-    }\n-}\n-\n declare_lint!(pub CMP_OWNED, Warn,\n               \"creating owned instances for comparing with others, e.g. `x == \\\"foo\\\".to_string()`\");\n "}, {"sha": "1d89adf9df877b4c6a0d7dd734803ff197cf6773", "filename": "src/precedence.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/614ba3ab8622ce69df862234cadae50b951ca386/src%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614ba3ab8622ce69df862234cadae50b951ca386/src%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprecedence.rs?ref=614ba3ab8622ce69df862234cadae50b951ca386", "patch": "@@ -0,0 +1,65 @@\n+use rustc::lint::*;\n+use syntax::ast::*;\n+use syntax::codemap::Spanned;\n+\n+use utils::span_lint;\n+\n+declare_lint!(pub PRECEDENCE, Warn,\n+              \"catches operations where precedence may be unclear. See the wiki for a \\\n+               list of cases caught\");\n+\n+#[derive(Copy,Clone)]\n+pub struct Precedence;\n+\n+impl LintPass for Precedence {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PRECEDENCE)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n+            if is_bit_op(op) && (is_arith_expr(left) || is_arith_expr(right)) {\n+                span_lint(cx, PRECEDENCE, expr.span,\n+                    \"operator precedence can trip the unwary. Consider adding parentheses \\\n+                     to the subexpression\");\n+            }\n+        }\n+\n+        if let ExprUnary(UnNeg, ref rhs) = expr.node {\n+            if let ExprMethodCall(_, _, ref args) = rhs.node {\n+                if let Some(slf) = args.first() {\n+                    if let ExprLit(ref lit) = slf.node {\n+                        match lit.node {\n+                            LitInt(..) | LitFloat(..) | LitFloatUnsuffixed(..) =>\n+                                span_lint(cx, PRECEDENCE, expr.span,\n+                                    \"unary minus has lower precedence than method call. Consider \\\n+                                     adding parentheses to clarify your intent\"),\n+                                _ => ()\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_arith_expr(expr : &Expr) -> bool {\n+    match expr.node {\n+        ExprBinary(Spanned { node: op, ..}, _, _) => is_arith_op(op),\n+        _ => false\n+    }\n+}\n+\n+fn is_bit_op(op : BinOp_) -> bool {\n+    match op {\n+        BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => true,\n+        _ => false\n+    }\n+}\n+\n+fn is_arith_op(op : BinOp_) -> bool {\n+    match op {\n+        BiAdd | BiSub | BiMul | BiDiv | BiRem => true,\n+        _ => false\n+    }\n+}"}, {"sha": "71dcd4930084893bc522e8a8f5a1804bfcf172bf", "filename": "tests/compile-fail/precedence.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/614ba3ab8622ce69df862234cadae50b951ca386/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614ba3ab8622ce69df862234cadae50b951ca386/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=614ba3ab8622ce69df862234cadae50b951ca386", "patch": "@@ -13,4 +13,14 @@ fn main() {\n     format!(\"{} vs. {}\", 3 | 2 - 1, (3 | 2) - 1);   //~ERROR operator precedence can trip\n     format!(\"{} vs. {}\", 3 & 5 - 2, (3 & 5) - 2);   //~ERROR operator precedence can trip\n \n+    format!(\"{} vs. {}\", -1i32.abs(), (-1i32).abs()); //~ERROR unary minus has lower precedence\n+    format!(\"{} vs. {}\", -1f32.abs(), (-1f32).abs()); //~ERROR unary minus has lower precedence\n+\n+    // These should not trigger an error\n+    let _ = (-1i32).abs();\n+    let _ = (-1f32).abs();\n+    let _ = -(1i32).abs();\n+    let _ = -(1f32).abs();\n+    let _ = -(1i32.abs());\n+    let _ = -(1f32.abs());\n }"}]}