{"sha": "74768e9a6ccac85f813e4125c76f9cb52a2ac618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzY4ZTlhNmNjYWM4NWY4MTNlNDEyNWM3NmY5Y2I1MmEyYWM2MTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-18T08:11:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-23T07:19:25Z"}, "message": "Add long diagnostics for E0139 (type parameters in transmute)", "tree": {"sha": "f5755389b80e9b646192ce027af31f0db1fc458f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5755389b80e9b646192ce027af31f0db1fc458f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74768e9a6ccac85f813e4125c76f9cb52a2ac618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74768e9a6ccac85f813e4125c76f9cb52a2ac618", "html_url": "https://github.com/rust-lang/rust/commit/74768e9a6ccac85f813e4125c76f9cb52a2ac618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74768e9a6ccac85f813e4125c76f9cb52a2ac618/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3080df36e27ed74399f9fe22e4796e209abd2b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/3080df36e27ed74399f9fe22e4796e209abd2b69", "html_url": "https://github.com/rust-lang/rust/commit/3080df36e27ed74399f9fe22e4796e209abd2b69"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "02f4cea87ca5f764339f5805621e49ff2cde02aa", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/74768e9a6ccac85f813e4125c76f9cb52a2ac618/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74768e9a6ccac85f813e4125c76f9cb52a2ac618/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=74768e9a6ccac85f813e4125c76f9cb52a2ac618", "patch": "@@ -821,6 +821,70 @@ This error indicates that the compiler found multiple functions with the\n point into a Rust program.\n \"##,\n \n+// FIXME link this to the relevant turpl chapters for instilling fear of the\n+//       transmute gods in the user\n+E0139: r##\"\n+There are various restrictions on transmuting between types in Rust; for example\n+types being transmuted must have the same size. To apply all these restrictions,\n+the compiler must know the exact types that may be transmuted. When type\n+parameters are involved, this cannot always be done.\n+\n+So, for example, the following is not allowed:\n+\n+```\n+struct Foo<T>(Vec<T>)\n+\n+fn foo<T>(x: Vec<T>) {\n+    // we are transmuting between Vec<T> and Foo<T> here\n+    let y: Foo<T> = unsafe { transmute(x) };\n+    // do something with y\n+}\n+```\n+\n+In this specific case there's a good chance that the transmute is harmless (but\n+this is not guaranteed by Rust). However, when alignment and enum optimizations\n+come into the picture, it's quite likely that the sizes may or may not match\n+with different type parameter substitutions. It's not possible to check this for\n+_all_ possible types, so `transmute()` simply only accepts types without any\n+unsubstituted type parameters.\n+\n+If you need this, there's a good chance you're doing something wrong. Keep in\n+mind that Rust doesn't guarantee much about the layout of different structs\n+(even two structs with identical declarations may have different layouts). If\n+there is a solution that avoids the transmute entirely, try it instead.\n+\n+If it's possible, hand-monomorphize the code by writing the function for each\n+possible type substitution. It's possible to use traits to do this cleanly,\n+for example:\n+\n+```\n+trait MyTransmutableType {\n+    fn transmute(Vec<Self>) -> Foo<Self>\n+}\n+\n+impl MyTransmutableType for u8 {\n+    fn transmute(x: Foo<u8>) -> Vec<u8> {\n+        transmute(x)\n+    }\n+}\n+impl MyTransmutableType for String {\n+    fn transmute(x: Foo<String>) -> Vec<String> {\n+        transmute(x)\n+    }\n+}\n+// ... more impls for the types you intend to transmute\n+\n+fn foo<T: MyTransmutableType>(x: Vec<T>) {\n+    let y: Foo<T> = <T as MyTransmutableType>::transmute(x);\n+    // do something with y\n+}\n+```\n+\n+Each impl will be checked for a size match in the transmute as usual, and since\n+there are no unbound type parameters involved, this should compile unless there\n+is a size mismatch in one of the impls.\n+\"##,\n+\n E0152: r##\"\n Lang items are already implemented in the standard library. Unless you are\n writing a free-standing application (e.g. a kernel), you do not need to provide\n@@ -1608,7 +1672,6 @@ register_diagnostics! {\n     // E0006 // merged with E0005\n //  E0134,\n //  E0135,\n-    E0139,\n     E0264, // unknown external lang item\n     E0269, // not all control paths return a value\n     E0270, // computation may converge in a function marked as diverging"}]}