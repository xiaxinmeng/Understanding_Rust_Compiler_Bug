{"sha": "a445f234a64cdbbf946af012b94dccf91447b5ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDVmMjM0YTY0Y2RiYmY5NDZhZjAxMmI5NGRjY2Y5MTQ0N2I1ZmY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-09T16:42:14Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-09T16:42:14Z"}, "message": "review comment: further refinement of comment above `fn is_adt_dtorck`.", "tree": {"sha": "f6882baffd3c430962bdeb65a302c26e08c5bfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6882baffd3c430962bdeb65a302c26e08c5bfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a445f234a64cdbbf946af012b94dccf91447b5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a445f234a64cdbbf946af012b94dccf91447b5ff", "html_url": "https://github.com/rust-lang/rust/commit/a445f234a64cdbbf946af012b94dccf91447b5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a445f234a64cdbbf946af012b94dccf91447b5ff/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34076bc0c9fb9ee718e1cebc407547eef730a080", "url": "https://api.github.com/repos/rust-lang/rust/commits/34076bc0c9fb9ee718e1cebc407547eef730a080", "html_url": "https://github.com/rust-lang/rust/commit/34076bc0c9fb9ee718e1cebc407547eef730a080"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "a8f7a4db1338de9ab3adeb94275147c04166d323", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a445f234a64cdbbf946af012b94dccf91447b5ff/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a445f234a64cdbbf946af012b94dccf91447b5ff/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=a445f234a64cdbbf946af012b94dccf91447b5ff", "patch": "@@ -566,9 +566,18 @@ impl<'tcx> ty::ctxt<'tcx> {\n         }\n     }\n \n-    /// Returns true if this ADT is a dtorck type, i.e. whether it\n-    /// being safe for destruction requires all borrowed pointers\n-    /// reachable by it to have lifetimes strictly greater than self.\n+    /// Returns true if this ADT is a dtorck type.\n+    ///\n+    /// Invoking the destructor of a dtorck type during usual cleanup\n+    /// (e.g. the glue emitted for stack unwinding) requires all\n+    /// lifetimes in the type-structure of `adt` to strictly outlive\n+    /// the adt value itself.\n+    ///\n+    /// If `adt` is not dtorck, then the adt's destructor can be\n+    /// invoked even when there are lifetimes in the type-structure of\n+    /// `adt` that do not strictly outlive the adt value itself.\n+    /// (This allows programs to make cyclic structures without\n+    /// resorting to unasfe means; see RFCs 769 and 1238).\n     pub fn is_adt_dtorck(&self, adt: ty::AdtDef<'tcx>) -> bool {\n         let dtor_method = match adt.destructor() {\n             Some(dtor) => dtor,"}]}