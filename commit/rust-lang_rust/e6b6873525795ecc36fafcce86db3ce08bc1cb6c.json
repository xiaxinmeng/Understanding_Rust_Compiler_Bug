{"sha": "e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjY4NzM1MjU3OTVlY2MzNmZhZmNjZTg2ZGIzY2UwOGJjMWNiNmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-18T03:56:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:22Z"}, "message": "switch to Lrc", "tree": {"sha": "4a712f3cea377e498784424f125ae2cf0cb90088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a712f3cea377e498784424f125ae2cf0cb90088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "html_url": "https://github.com/rust-lang/rust/commit/e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb2c997d4eb34b616bb391442c2ab3b5a2f20e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2c997d4eb34b616bb391442c2ab3b5a2f20e36", "html_url": "https://github.com/rust-lang/rust/commit/fb2c997d4eb34b616bb391442c2ab3b5a2f20e36"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "44925608164018764b10ecd701f6b6935887702a", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "patch": "@@ -247,7 +247,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n         // The current value of `vid` is a lower bound LB -- i.e., we\n         // know that `LB <= vid` must be true.\n-        let pick_lower_bound = match var_values.value(pick_vid) {\n+        let pick_lower_bound: ty::Region<'tcx> = match var_values.value(pick_vid) {\n             VarValue::ErrorValue => return false,\n             VarValue::Value(r) => r,\n         };\n@@ -270,12 +270,12 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // if there >1 option, we only make a choice if there is a\n         // single *least* choice -- i.e., some available region that\n         // is `<=` all the others.\n-        let mut least_choice = match options.next() {\n-            Some(r) => r,\n+        let mut least_choice: ty::Region<'tcx> = match options.next() {\n+            Some(&r) => r,\n             None => return false,\n         };\n         debug!(\"enforce_pick_constraint: least_choice={:?}\", least_choice);\n-        for option in options {\n+        for &option in options {\n             debug!(\"enforce_pick_constraint: option={:?}\", option);\n             if !self.sub_concrete_regions(least_choice, option) {\n                 if self.sub_concrete_regions(option, least_choice) {"}, {"sha": "d887dc13f59d2d14ec36fdbf6475d86c5e756a2e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "patch": "@@ -26,11 +26,11 @@ use crate::ty::{FloatVid, IntVid, TyVid, ConstVid};\n use crate::util::nodemap::FxHashMap;\n \n use errors::DiagnosticBuilder;\n+use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n-use std::rc::Rc;\n use syntax::ast;\n use syntax_pos::symbol::InternedString;\n use syntax_pos::Span;\n@@ -913,7 +913,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n-        in_regions: &Rc<Vec<ty::Region<'tcx>>>,\n+        in_regions: &Lrc<Vec<ty::Region<'tcx>>>,\n     ) {\n         debug!(\"pick_constraint({:?} <: {:?})\", region, in_regions);\n         self.borrow_region_constraints()"}, {"sha": "0571de8680f8b313ca418e237670584b712a8b25", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "patch": "@@ -11,7 +11,7 @@ use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use crate::util::nodemap::DefIdMap;\n use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::FxHashMap;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n@@ -428,7 +428,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // Create the set of option regions: each region in the hidden\n         // type can be equal to any of the region parameters of the\n         // opaque type definition.\n-        let option_regions: Rc<Vec<ty::Region<'tcx>>> = Rc::new(\n+        let option_regions: Lrc<Vec<ty::Region<'tcx>>> = Lrc::new(\n             abstract_type_generics\n                 .params\n                 .iter()"}, {"sha": "a8a2ae343a5925aeb797d3a087fe726e7605e8fc", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b6873525795ecc36fafcce86db3ce08bc1cb6c/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e6b6873525795ecc36fafcce86db3ce08bc1cb6c", "patch": "@@ -8,6 +8,7 @@ use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use crate::hir::def_id::DefId;\n use crate::ty::ReStatic;\n@@ -19,7 +20,6 @@ use syntax_pos::Span;\n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem};\n use std::ops::Range;\n-use std::rc::Rc;\n \n mod leak_check;\n \n@@ -166,7 +166,7 @@ pub struct PickConstraint<'tcx> {\n     pub pick_region: Region<'tcx>,\n \n     /// the options O1..On\n-    pub option_regions: Rc<Vec<Region<'tcx>>>,\n+    pub option_regions: Lrc<Vec<Region<'tcx>>>,\n }\n \n BraceStructTypeFoldableImpl! {\n@@ -694,7 +694,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         pick_region: ty::Region<'tcx>,\n-        option_regions: &Rc<Vec<ty::Region<'tcx>>>,\n+        option_regions: &Lrc<Vec<ty::Region<'tcx>>>,\n     ) {\n         debug!(\"pick_constraint({:?} in {:#?})\", pick_region, option_regions);\n "}]}