{"sha": "24289a050a8eeb1385f73acb7c1a6de804840d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Mjg5YTA1MGE4ZWViMTM4NWY3M2FjYjdjMWE2ZGU4MDQ4NDBkOGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-08T23:18:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-08T23:18:55Z"}, "message": "Sidestep ICE in `type_of_def_id()` when called from `return_type_impl_trait`", "tree": {"sha": "da3884fc865c96bc448249ceedea8b9fde0b161b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3884fc865c96bc448249ceedea8b9fde0b161b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24289a050a8eeb1385f73acb7c1a6de804840d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24289a050a8eeb1385f73acb7c1a6de804840d8d", "html_url": "https://github.com/rust-lang/rust/commit/24289a050a8eeb1385f73acb7c1a6de804840d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24289a050a8eeb1385f73acb7c1a6de804840d8d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a42b2ceb46887e9941cec667eac99844dd7ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a42b2ceb46887e9941cec667eac99844dd7ad0", "html_url": "https://github.com/rust-lang/rust/commit/25a42b2ceb46887e9941cec667eac99844dd7ad0"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "da0bec80a891d9d17ca5f31e0ba12282b63e4b29", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=24289a050a8eeb1385f73acb7c1a6de804840d8d", "patch": "@@ -17,7 +17,7 @@ use session::Session;\n use session::config::{BorrowckMode, OutputFilenames};\n use session::config::CrateType;\n use middle;\n-use hir::{TraitCandidate, HirId, ItemLocalId, Node};\n+use hir::{TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n use hir::def::{Def, Export};\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use hir::map as hir_map;\n@@ -1602,6 +1602,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         scope_def_id: DefId,\n     ) -> Option<Ty<'tcx>> {\n+        // HACK: `type_of_def_id()` will fail on these (#55796), so return None\n+        let node_id = self.hir.as_local_node_id(scope_def_id).unwrap();\n+        match self.hir.get(node_id) {\n+            Node::Item(item) => {\n+                match item.node {\n+                    ItemKind::Trait(..)\n+                    | ItemKind::TraitAlias(..)\n+                    | ItemKind::Mod(..)\n+                    | ItemKind::ForeignMod(..)\n+                    | ItemKind::GlobalAsm(..)\n+                    | ItemKind::ExternCrate(..)\n+                    | ItemKind::Use(..) => {\n+                        return None;\n+                    }\n+                    _ => { /* type_of_def_id() will work */ }\n+                }\n+            }\n+            _ => { /* type_of_def_id() will work or panic */ }\n+        }\n+\n         let ret_ty = self.type_of(scope_def_id);\n         match ret_ty.sty {\n             ty::FnDef(_, _) => {"}, {"sha": "b48d4a9c022f42dbe1aadab24058278dd2aef4a9", "filename": "src/test/ui/issues/issue-55796.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=24289a050a8eeb1385f73acb7c1a6de804840d8d", "patch": "@@ -0,0 +1,22 @@\n+pub trait EdgeTrait<N> {\n+    fn target(&self) -> N;\n+}\n+\n+pub trait Graph<'a> {\n+    type Node;\n+    type Edge: EdgeTrait<Self::Node>;\n+    type NodesIter: Iterator<Item = Self::Node> + 'a;\n+    type EdgesIter: Iterator<Item = Self::Edge> + 'a;\n+\n+    fn nodes(&'a self) -> Self::NodesIter;\n+    fn out_edges(&'a self, u: &Self::Node) -> Self::EdgesIter;\n+    fn in_edges(&'a self, u: &Self::Node) -> Self::EdgesIter;\n+\n+    fn out_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n+        Box::new(self.out_edges(u).map(|e| e.target()))\n+    }\n+\n+    fn in_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n+        Box::new(self.in_edges(u).map(|e| e.target()))\n+    }\n+}"}, {"sha": "60ce8293a5ceb4e4ee54219687464b9351c6413c", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24289a050a8eeb1385f73acb7c1a6de804840d8d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=24289a050a8eeb1385f73acb7c1a6de804840d8d", "patch": "@@ -0,0 +1,50 @@\n+error[E0601]: `main` function not found in crate `issue_55796`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-55796.rs`\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the trait at 5:17...\n+  --> $DIR/issue-55796.rs:5:17\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 ^^\n+note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/issue-55796.rs:20:9\n+   |\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the trait at 5:17...\n+  --> $DIR/issue-55796.rs:5:17\n+   |\n+LL | pub trait Graph<'a> {\n+   |                 ^^\n+note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:20:39: 20:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:20:9\n+   |\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0495, E0601.\n+For more information about an error, try `rustc --explain E0495`."}]}