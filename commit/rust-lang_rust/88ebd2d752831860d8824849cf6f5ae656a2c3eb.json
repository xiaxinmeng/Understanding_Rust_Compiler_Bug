{"sha": "88ebd2d752831860d8824849cf6f5ae656a2c3eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZWJkMmQ3NTI4MzE4NjBkODgyNDg0OWNmNmY1YWU2NTZhMmMzZWI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T12:43:34Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:52:47Z"}, "message": "Rename the Heap type to Global\n\n\u2026 since it is the entry point for what\u2019s registered with `#[global_allocator]`", "tree": {"sha": "b80e6b5363e53c36b87d8e69e07a44958cfd2646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80e6b5363e53c36b87d8e69e07a44958cfd2646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ebd2d752831860d8824849cf6f5ae656a2c3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ebd2d752831860d8824849cf6f5ae656a2c3eb", "html_url": "https://github.com/rust-lang/rust/commit/88ebd2d752831860d8824849cf6f5ae656a2c3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ebd2d752831860d8824849cf6f5ae656a2c3eb/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "743c29bdc5b0a75c648e1317aa5d1d816007f176", "url": "https://api.github.com/repos/rust-lang/rust/commits/743c29bdc5b0a75c648e1317aa5d1d816007f176", "html_url": "https://github.com/rust-lang/rust/commit/743c29bdc5b0a75c648e1317aa5d1d816007f176"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "1bd95cfd08c11afeb50f01019bf55407ddeb38e1", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/88ebd2d752831860d8824849cf6f5ae656a2c3eb/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ebd2d752831860d8824849cf6f5ae656a2c3eb/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=88ebd2d752831860d8824849cf6f5ae656a2c3eb", "patch": "@@ -77,9 +77,14 @@ extern \"Rust\" {\n }\n \n #[derive(Copy, Clone, Default, Debug)]\n-pub struct Heap;\n+pub struct Global;\n \n-unsafe impl Alloc for Heap {\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"type renamed to `Global`\")]\n+pub use self::Global as Heap;\n+\n+\n+unsafe impl Alloc for Global {\n     #[inline]\n     unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n         let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n@@ -240,8 +245,8 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Heap.alloc(layout).unwrap_or_else(|err| {\n-            Heap.oom(err)\n+        Global.alloc(layout).unwrap_or_else(|err| {\n+            Global.oom(err)\n         })\n     }\n }\n@@ -254,7 +259,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\n     if size != 0 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Heap.dealloc(ptr as *mut u8, layout);\n+        Global.dealloc(ptr as *mut u8, layout);\n     }\n }\n \n@@ -263,22 +268,22 @@ mod tests {\n     extern crate test;\n     use self::test::Bencher;\n     use boxed::Box;\n-    use heap::{Heap, Alloc, Layout};\n+    use heap::{Global, Alloc, Layout};\n \n     #[test]\n     fn allocate_zeroed() {\n         unsafe {\n             let layout = Layout::from_size_align(1024, 1).unwrap();\n-            let ptr = Heap.alloc_zeroed(layout.clone())\n-                .unwrap_or_else(|e| Heap.oom(e));\n+            let ptr = Global.alloc_zeroed(layout.clone())\n+                .unwrap_or_else(|e| Global.oom(e));\n \n             let end = ptr.offset(layout.size() as isize);\n             let mut i = ptr;\n             while i < end {\n                 assert_eq!(*i, 0);\n                 i = i.offset(1);\n             }\n-            Heap.dealloc(ptr, layout);\n+            Global.dealloc(ptr, layout);\n         }\n     }\n "}]}