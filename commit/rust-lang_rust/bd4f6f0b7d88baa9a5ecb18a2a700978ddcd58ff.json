{"sha": "bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNGY2ZjBiN2Q4OGJhYTlhNWVjYjE4YTJhNzAwOTc4ZGRjZDU4ZmY=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-21T22:49:06Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-21T22:49:06Z"}, "message": "Move `next_disambiguator` to `Resolver`", "tree": {"sha": "42b11dcc667edc4edf179d8a070f75ed7a17be34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b11dcc667edc4edf179d8a070f75ed7a17be34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "html_url": "https://github.com/rust-lang/rust/commit/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "html_url": "https://github.com/rust-lang/rust/commit/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "79b70682739326b1ea18c4254e7cbc83fbade8d1", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "patch": "@@ -87,7 +87,6 @@ pub struct Definitions {\n     parent_modules_of_macro_defs: FxHashMap<ExpnId, DefId>,\n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expansions_that_defined: FxHashMap<LocalDefId, ExpnId>,\n-    next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n }\n \n /// A unique identifier that we can use to lookup a definition\n@@ -350,7 +349,6 @@ impl Definitions {\n             def_id_to_hir_id: Default::default(),\n             hir_id_to_def_id: Default::default(),\n             expansions_that_defined: Default::default(),\n-            next_disambiguator: Default::default(),\n             parent_modules_of_macro_defs: Default::default(),\n         }\n     }\n@@ -366,20 +364,14 @@ impl Definitions {\n         parent: LocalDefId,\n         data: DefPathData,\n         expn_id: ExpnId,\n+        mut next_disambiguator: impl FnMut(LocalDefId, DefPathData) -> u32,\n     ) -> LocalDefId {\n         debug!(\"create_def(parent={:?}, data={:?}, expn_id={:?})\", parent, data, expn_id);\n \n         // The root node must be created with `create_root_def()`.\n         assert!(data != DefPathData::CrateRoot);\n \n-        // Find the next free disambiguator for this key.\n-        let disambiguator = {\n-            let next_disamb = self.next_disambiguator.entry((parent, data)).or_insert(0);\n-            let disambiguator = *next_disamb;\n-            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n-            disambiguator\n-        };\n-\n+        let disambiguator = next_disambiguator(parent, data);\n         let key = DefKey {\n             parent: Some(parent.local_def_index),\n             disambiguated_data: DisambiguatedDefPathData { data, disambiguator },"}, {"sha": "ce068b8ac69a45bda1ce19184773ca6f70c564dc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bd4f6f0b7d88baa9a5ecb18a2a700978ddcd58ff", "patch": "@@ -982,6 +982,8 @@ pub struct Resolver<'a> {\n     /// When collecting definitions from an AST fragment produced by a macro invocation `ExpnId`\n     /// we know what parent node that fragment should be attached to thanks to this table.\n     invocation_parents: FxHashMap<ExpnId, LocalDefId>,\n+\n+    next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1142,7 +1144,16 @@ impl ResolverAstLowering for Resolver<'_> {\n             self.definitions.def_key(self.node_id_to_def_id[&node_id]),\n         );\n \n-        let def_id = self.definitions.create_def(parent, data, expn_id);\n+        // Find the next free disambiguator for this key.\n+        let next_disambiguator = &mut self.next_disambiguator;\n+        let next_disambiguator = |parent, data| {\n+            let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);\n+            let disambiguator = *next_disamb;\n+            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n+            disambiguator\n+        };\n+\n+        let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator);\n \n         assert_eq!(self.def_id_to_span.push(span), def_id);\n \n@@ -1322,6 +1333,7 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id,\n             placeholder_field_indices: Default::default(),\n             invocation_parents,\n+            next_disambiguator: Default::default(),\n         }\n     }\n "}]}