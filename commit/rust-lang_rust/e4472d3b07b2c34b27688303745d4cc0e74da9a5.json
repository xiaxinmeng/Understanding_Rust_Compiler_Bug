{"sha": "e4472d3b07b2c34b27688303745d4cc0e74da9a5", "node_id": "C_kwDOAAsO6NoAKGU0NDcyZDNiMDdiMmMzNGIyNzY4ODMwMzc0NWQ0Y2MwZTc0ZGE5YTU", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-11-06T22:12:25Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-07T14:12:58Z"}, "message": "refactor: dedupe associated item visitation", "tree": {"sha": "08d8b80e7cb3ecc35cbab5afa1160efa8e7908e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d8b80e7cb3ecc35cbab5afa1160efa8e7908e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4472d3b07b2c34b27688303745d4cc0e74da9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4472d3b07b2c34b27688303745d4cc0e74da9a5", "html_url": "https://github.com/rust-lang/rust/commit/e4472d3b07b2c34b27688303745d4cc0e74da9a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4472d3b07b2c34b27688303745d4cc0e74da9a5/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c5c74951db8673aa3e3edba8393ce90346f96f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c5c74951db8673aa3e3edba8393ce90346f96f", "html_url": "https://github.com/rust-lang/rust/commit/19c5c74951db8673aa3e3edba8393ce90346f96f"}], "stats": {"total": 90, "additions": 35, "deletions": 55}, "files": [{"sha": "25b0085b3eff08f4cf96e02609a1f1068e41406c", "filename": "src/visitor.rs", "status": "modified", "additions": 35, "deletions": 55, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e4472d3b07b2c34b27688303745d4cc0e74da9a5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4472d3b07b2c34b27688303745d4cc0e74da9a5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e4472d3b07b2c34b27688303745d4cc0e74da9a5", "patch": "@@ -615,85 +615,65 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.push_rewrite(span, rewrite);\n     }\n \n-    pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n-        skip_out_of_file_lines_range_visitor!(self, ti.span);\n+    fn visit_assoc_item(&mut self, visitor_kind: &ItemVisitorKind<'_>) {\n+        use ItemVisitorKind::*;\n+        // TODO(calebcartwright): Not sure the skip spans are correct\n+        let (ai, skip_span, assoc_ctxt) = match visitor_kind {\n+            AssocTraitItem(ai) => (*ai, ai.span(), visit::AssocCtxt::Trait),\n+            AssocImplItem(ai) => (*ai, ai.span, visit::AssocCtxt::Impl),\n+            _ => unreachable!(),\n+        };\n+        skip_out_of_file_lines_range_visitor!(self, ai.span);\n \n-        if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ti.attrs.as_slice(), ti.span(), ti.span());\n+        if self.visit_attrs(&ai.attrs, ast::AttrStyle::Outer) {\n+            self.push_skipped_with_span(&ai.attrs.as_slice(), skip_span, skip_span);\n             return;\n         }\n \n         // TODO(calebcartwright): consider enabling box_patterns feature gate\n-        match ti.kind {\n-            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n-            ast::AssocItemKind::Fn(ref fn_kind) => {\n+        match (&ai.kind, visitor_kind) {\n+            (ast::AssocItemKind::Const(..), AssocTraitItem(_)) => {\n+                self.visit_static(&StaticParts::from_trait_item(&ai))\n+            }\n+            (ast::AssocItemKind::Const(..), AssocImplItem(_)) => {\n+                self.visit_static(&StaticParts::from_impl_item(&ai))\n+            }\n+            (ast::AssocItemKind::Fn(ref fn_kind), _) => {\n                 let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n                 if let Some(ref body) = block {\n-                    let inner_attrs = inner_attributes(&ti.attrs);\n-                    let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n+                    let inner_attrs = inner_attributes(&ai.attrs);\n+                    let fn_ctxt = visit::FnCtxt::Assoc(assoc_ctxt);\n                     self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &ti.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, ai.ident, sig, &ai.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n-                        ti.span,\n+                        ai.span,\n                         defaultness,\n                         Some(&inner_attrs),\n                     );\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ti.ident, sig, &ti.vis, generics, ti.span);\n-                    self.push_rewrite(ti.span, rewrite);\n+                        self.rewrite_required_fn(indent, ai.ident, sig, &ai.vis, generics, ai.span);\n+                    self.push_rewrite(ai.span, rewrite);\n                 }\n             }\n-            ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                use ItemVisitorKind::AssocTraitItem;\n-                self.visit_ty_alias_kind(ty_alias_kind, &AssocTraitItem(&ti), ti.span);\n+            (ast::AssocItemKind::TyAlias(ref ty_alias_kind), _) => {\n+                self.visit_ty_alias_kind(ty_alias_kind, visitor_kind, ai.span);\n             }\n-            ast::AssocItemKind::MacCall(ref mac) => {\n-                self.visit_mac(mac, Some(ti.ident), MacroPosition::Item);\n+            (ast::AssocItemKind::MacCall(ref mac), _) => {\n+                self.visit_mac(mac, Some(ai.ident), MacroPosition::Item);\n             }\n+            _ => unreachable!(),\n         }\n     }\n \n-    pub(crate) fn visit_impl_item(&mut self, ii: &ast::AssocItem) {\n-        skip_out_of_file_lines_range_visitor!(self, ii.span);\n-\n-        if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(ii.attrs.as_slice(), ii.span, ii.span);\n-            return;\n-        }\n+    pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n+        self.visit_assoc_item(&ItemVisitorKind::AssocTraitItem(ti));\n+    }\n \n-        match ii.kind {\n-            ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n-                    let inner_attrs = inner_attributes(&ii.attrs);\n-                    let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n-                    self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ii.ident, sig, &ii.vis, Some(body)),\n-                        generics,\n-                        &sig.decl,\n-                        ii.span,\n-                        defaultness,\n-                        Some(&inner_attrs),\n-                    );\n-                } else {\n-                    let indent = self.block_indent;\n-                    let rewrite =\n-                        self.rewrite_required_fn(indent, ii.ident, sig, &ii.vis, generics, ii.span);\n-                    self.push_rewrite(ii.span, rewrite);\n-                }\n-            }\n-            ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n-            ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                use ItemVisitorKind::AssocImplItem;\n-                self.visit_ty_alias_kind(ty_alias_kind, &AssocImplItem(&ii), ii.span);\n-            }\n-            ast::AssocItemKind::MacCall(ref mac) => {\n-                self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);\n-            }\n-        }\n+    pub(crate) fn visit_impl_item(&mut self, ii: &ast::AssocItem) {\n+        self.visit_assoc_item(&ItemVisitorKind::AssocImplItem(ii));\n     }\n \n     fn visit_mac(&mut self, mac: &ast::MacCall, ident: Option<symbol::Ident>, pos: MacroPosition) {"}]}