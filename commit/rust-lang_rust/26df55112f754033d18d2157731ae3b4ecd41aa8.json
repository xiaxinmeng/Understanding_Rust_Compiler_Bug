{"sha": "26df55112f754033d18d2157731ae3b4ecd41aa8", "node_id": "C_kwDOAAsO6NoAKDI2ZGY1NTExMmY3NTQwMzNkMThkMjE1NzczMWFlM2I0ZWNkNDFhYTg", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-12T08:34:39Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-12-20T10:12:13Z"}, "message": "Fix adjacent code", "tree": {"sha": "8dc153cba1b80632f54b5218a630f52daa623c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc153cba1b80632f54b5218a630f52daa623c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26df55112f754033d18d2157731ae3b4ecd41aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26df55112f754033d18d2157731ae3b4ecd41aa8", "html_url": "https://github.com/rust-lang/rust/commit/26df55112f754033d18d2157731ae3b4ecd41aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26df55112f754033d18d2157731ae3b4ecd41aa8/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed519ad746e31f64c4e9255be561785612532d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed519ad746e31f64c4e9255be561785612532d37", "html_url": "https://github.com/rust-lang/rust/commit/ed519ad746e31f64c4e9255be561785612532d37"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "c8e54d7b8e0c350446c0fe0f0eee6ac0e221fe38", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv\n \n                         diag.span_suggestion(\n                             expr.span,\n-                            &format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n+                            format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n                             sugg,\n                             rustc_errors::Applicability::HasPlaceholders,\n                         );"}, {"sha": "9891955a4efe8a11ca49e2d157429f5ab29f2c22", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -377,7 +377,7 @@ fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symb\n         call_site,\n         &format!(\"`format!` in `{name}!` args\"),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"combine the `format!(..)` arguments with the outer `{name}!(..)` call\"\n             ));\n             diag.help(\"or consider changing `format!` to `format_args!`\");"}, {"sha": "b8d4abdbb781acacba0f3910ff55526347ea8b9c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         );\n                         diag.span_label(\n                             def.variants[variants_size[1].ind].span,\n-                            &if variants_size[1].fields_size.is_empty() {\n+                            if variants_size[1].fields_size.is_empty() {\n                                 \"the second-largest variant carries no data at all\".to_owned()\n                             } else {\n                                 format!("}, {"sha": "9eba46756299c57bc178a48fc92b65a4af99fc38", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -361,7 +361,7 @@ fn check_for_is_empty<'tcx>(\n             db.span_note(span, \"`is_empty` defined here\");\n         }\n         if let Some(self_kind) = self_kind {\n-            db.note(&output.expected_sig(self_kind));\n+            db.note(output.expected_sig(self_kind));\n         }\n     });\n }"}, {"sha": "f95b9538cef38685c2615b0343a6eba09bc1522a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -335,7 +335,7 @@ pub fn read_conf(sess: &Session, path: &io::Result<Option<PathBuf>>) -> Conf {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n-            sess.struct_err(&format!(\"error finding Clippy's configuration file: {error}\"))\n+            sess.struct_err(format!(\"error finding Clippy's configuration file: {error}\"))\n                 .emit();\n             return Conf::default();\n         },"}, {"sha": "1953ee8a717525a9ab3ac883bc0def758fa5875b", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                                 applicability,\n                             );\n \n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"`{name}` is of type `{int_name}`, making it ineligible for `Iterator::enumerate`\"\n                             ));\n                         },"}, {"sha": "af7c0563555792bfabba1cf1776cf44abaf66225", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n-                                    &help,\n+                                    help,\n                                     format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n                                     Applicability::MachineApplicable\n                                 );"}, {"sha": "c795c1d9a16c321b9a9260df72206653d8516558", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n \n                     let test_span = expr.span.until(then.span);\n                     span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {kind_word} manually\"), |diag| {\n-                        diag.span_note(test_span, &format!(\"the {kind_word} was tested here\"));\n+                        diag.span_note(test_span, format!(\"the {kind_word} was tested here\"));\n                         multispan_sugg(\n                             diag,\n                             &format!(\"try using the `strip_{kind_word}` method\"),"}, {"sha": "122088f4857cd5925b37b8c744fecaf34b3578ed", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -36,7 +36,7 @@ pub fn check(\n                 expr.span,\n                 &format!(\"calling `to_string` on `{arg_ty}`\"),\n                 |diag| {\n-                    diag.help(&format!(\n+                    diag.help(format!(\n                         \"`{self_ty}` implements `ToString` through a slower blanket impl, but `{deref_self_ty}` has a fast specialization of `ToString`\"\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;"}, {"sha": "279175e20c37fcd5126f908a4cd32ba4663e4a04", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n                         application = Applicability::Unspecified;\n                         diag.span_help(\n                             pat.span,\n-                            &format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n+                            format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n                         );\n                     }\n                 }"}, {"sha": "4c6328481e438817cf82f843466ff3f406dc456f", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                 suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{unwrap_snippet}, \")));\n             }\n \n-            diag.multipart_suggestion(&format!(\"use `{suggest}` instead\"), suggestion, applicability);\n+            diag.multipart_suggestion(format!(\"use `{suggest}` instead\"), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "d00708e828eaeb791391a8797bd6980d8e36399a", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -167,7 +167,7 @@ fn check_manual_split_once_indirect(\n             };\n             diag.span_suggestion_verbose(\n                 local.span,\n-                &format!(\"try `{r}split_once`\"),\n+                format!(\"try `{r}split_once`\"),\n                 format!(\"let ({lhs}, {rhs}) = {self_snip}.{r}split_once({pat_snip}){unwrap};\"),\n                 app,\n             );"}, {"sha": "47e2e744112c5a1dc89d29c1d27d0033a9edf3bf", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -62,7 +62,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n                         diag.span_suggestion(\n                             span,\n-                            &format!(\"use `{simplify_using}(..)` instead\"),\n+                            format!(\"use `{simplify_using}(..)` instead\"),\n                             format!(\"{simplify_using}({})\", snippet(cx, body_expr.span, \"..\")),\n                             applicability,\n                         );"}, {"sha": "5a9387b34cc1931a68adf7ae5f3fa013e3d72592", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -284,7 +284,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion(\n                         assign.lhs_span,\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         let_snippet,\n                         Applicability::MachineApplicable,\n                     );\n@@ -304,7 +304,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n@@ -335,7 +335,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );"}, {"sha": "7376ab0c846d954c7c3c39e75b177a83e5f4ff82", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -125,7 +125,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             if is_string { \"string\" } else { \"byte string\" }\n         ),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"octal escapes are not supported, `\\\\0` is always a null {}\",\n                 if is_string { \"character\" } else { \"byte\" }\n             ));\n@@ -139,7 +139,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             // suggestion 2: unambiguous null byte\n             diag.span_suggestion(\n                 span,\n-                &format!(\n+                format!(\n                     \"if the null {} is intended, disambiguate using\",\n                     if is_string { \"character\" } else { \"byte\" }\n                 ),"}, {"sha": "015f6c14e7612f2c724711b9fed7f8786c433f02", "filename": "clippy_lints/src/operators/misrefactored_assign_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -50,7 +50,7 @@ fn lint_misrefactored_assign_op(\n                 let long = format!(\"{snip_a} = {}\", sugg::make_binop(op.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n-                    &format!(\n+                    format!(\n                         \"did you mean `{snip_a} = {snip_a} {} {snip_r}` or `{long}`? Consider replacing it with\",\n                         op.as_str()\n                     ),"}, {"sha": "f35bfb0b4ed884c01f8a1641e8a0e71e31c783f1", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     |diag| {\n                                         diag.span_note(\n                                             trait_method_span,\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         // iterate on trait_spans?\n                                         diag.span_note(\n                                             trait_spans[0],\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );"}, {"sha": "17e9cc5f6b7c7a7d72a5fd73fed5f043c366708d", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -132,7 +132,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(&format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n+                diag.note(format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n             }\n         },\n     );\n@@ -214,7 +214,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                                 Applicability::MaybeIncorrect,\n                             );\n                             diag.note(\n-                                &format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n+                                format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n                             );\n                         }\n                     });"}, {"sha": "af0242348ac295facaeff4a24e661b6c8863e3e6", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -91,7 +91,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute to `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -119,16 +119,16 @@ pub(super) fn check<'tcx>(\n                     ),\n                     |diag| {\n                         if let Some(same_adt_did) = same_adt_did {\n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"two instances of the same generic type (`{}`) may have different layouts\",\n                                 cx.tcx.item_name(same_adt_did)\n                             ));\n                         } else {\n                             if from_ty_orig.peel_refs() != from_ty {\n-                                diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                             }\n                             if to_ty_orig.peel_refs() != to_ty {\n-                                diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                             }\n                         }\n                     },\n@@ -146,7 +146,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -163,7 +163,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute into `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );"}, {"sha": "b79d4e915a2718b70ae063b686aa7ad66918ddd0", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n             &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n             |diag| {\n                 if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                    let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n+                    let sugg = arg.as_ty(to_ty.to_string()).to_string();\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }\n             },"}, {"sha": "871c3fadbba71b84f7c1d18364f44fb40fb9293f", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -61,7 +61,7 @@ pub(super) fn check<'tcx>(\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        diag.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()), Applicability::Unspecified);\n+                        diag.span_suggestion(e.span, \"try\", arg.as_ty(to_ty.to_string()), Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "f9b9a66b5fa461b17e2e99dd41da1dfd8192ccaf", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             &format!(\"usage of `{outer_sym}<{generic_snippet}>`\"),\n             |diag| {\n                 diag.span_suggestion(hir_ty.span, \"try\", format!(\"{generic_snippet}\"), applicability);\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{generic_snippet}` is already a pointer, `{outer_sym}<{generic_snippet}>` allocates a pointer on the heap\"\n                 ));\n             },\n@@ -78,7 +78,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                     format!(\"{outer_sym}<{generic_snippet}>\"),\n                     applicability,\n                 );\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n             },\n@@ -91,10 +91,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             hir_ty.span,\n             &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n-                diag.help(&format!(\n+                diag.help(format!(\n                     \"consider using just `{outer_sym}<{generic_snippet}>` or `{inner_sym}<{generic_snippet}>`\"\n                 ));\n             },"}, {"sha": "ef9f740f7047c08b00c022b2ca6c74c7e7ab162d", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -129,7 +129,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n \n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n-                        &format!(\"use {singular}unit literal{plural} instead\"),\n+                        format!(\"use {singular}unit literal{plural} instead\"),\n                         args_to_recover\n                             .iter()\n                             .map(|arg| (arg.span, \"()\".to_string()))\n@@ -142,7 +142,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                     let it_or_them = if plural { \"them\" } else { \"it\" };\n                     db.span_suggestion(\n                         expr.span,\n-                        &format!(\n+                        format!(\n                             \"{or}move the expression{empty_or_s} in front of the call and replace {it_or_them} with the unit literal `()`\"\n                         ),\n                         sugg,"}, {"sha": "df3350388817ed9ca3765d3bd6c1a45882611353", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -377,7 +377,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     // print!(\"\\n\"), write!(f, \"\\n\")\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (format_string_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );\n@@ -388,7 +388,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     let newline_span = format_string_span.with_lo(hi - BytePos(3)).with_hi(hi - BytePos(1));\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (newline_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "812f6fe71a0a0c7faf9efd8b002055072082dafb", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -17,7 +17,7 @@ use std::env;\n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{lint}\",\n                 &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                     // extract just major + minor version and ignore patch versions"}, {"sha": "8f25fea678f19df58aded7d4add8a5f288e7e32e", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}, {"sha": "e6b3995a689b3d077b22da927959d31f59389a9a", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26df55112f754033d18d2157731ae3b4ecd41aa8/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df55112f754033d18d2157731ae3b4ecd41aa8/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=26df55112f754033d18d2157731ae3b4ecd41aa8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}]}