{"sha": "d6923ddf64f22769842dbb50c45253f1627eb709", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OTIzZGRmNjRmMjI3Njk4NDJkYmI1MGM0NTI1M2YxNjI3ZWI3MDk=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-10T07:29:24Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-21T07:22:59Z"}, "message": "Removed unecessary indirection in Bitv\n\nBitvVariant is the same size as it was before (16 bytes).", "tree": {"sha": "524c0569432d90b7c87cbc4b23f4fa6fd41b6ac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524c0569432d90b7c87cbc4b23f4fa6fd41b6ac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6923ddf64f22769842dbb50c45253f1627eb709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6923ddf64f22769842dbb50c45253f1627eb709", "html_url": "https://github.com/rust-lang/rust/commit/d6923ddf64f22769842dbb50c45253f1627eb709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6923ddf64f22769842dbb50c45253f1627eb709/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32a02cdba6a56d62650616299ad04d0f4a128b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32a02cdba6a56d62650616299ad04d0f4a128b0", "html_url": "https://github.com/rust-lang/rust/commit/b32a02cdba6a56d62650616299ad04d0f4a128b0"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "f099593e86f2999d749d62ad96273e23ac82080a", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d6923ddf64f22769842dbb50c45253f1627eb709/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6923ddf64f22769842dbb50c45253f1627eb709/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=d6923ddf64f22769842dbb50c45253f1627eb709", "patch": "@@ -215,7 +215,7 @@ impl BigBitv {\n }\n \n #[deriving(Clone)]\n-enum BitvVariant { Big(~BigBitv), Small(~SmallBitv) }\n+enum BitvVariant { Big(BigBitv), Small(SmallBitv) }\n \n enum Op {Union, Intersect, Assign, Difference}\n \n@@ -241,20 +241,20 @@ impl Bitv {\n         match self.rep {\n           Small(ref mut s) => match other.rep {\n             Small(ref s1) => match op {\n-              Union      => s.union(*s1,      self.nbits),\n-              Intersect  => s.intersect(*s1,  self.nbits),\n-              Assign     => s.become(*s1,     self.nbits),\n-              Difference => s.difference(*s1, self.nbits)\n+              Union      => s.union(s1,      self.nbits),\n+              Intersect  => s.intersect(s1,  self.nbits),\n+              Assign     => s.become(s1,     self.nbits),\n+              Difference => s.difference(s1, self.nbits)\n             },\n             Big(_) => die()\n           },\n           Big(ref mut s) => match other.rep {\n             Small(_) => die(),\n             Big(ref s1) => match op {\n-              Union      => s.union(*s1,      self.nbits),\n-              Intersect  => s.intersect(*s1,  self.nbits),\n-              Assign     => s.become(*s1,     self.nbits),\n-              Difference => s.difference(*s1, self.nbits)\n+              Union      => s.union(s1,      self.nbits),\n+              Intersect  => s.intersect(s1,  self.nbits),\n+              Assign     => s.become(s1,     self.nbits),\n+              Difference => s.difference(s1, self.nbits)\n             }\n           }\n         }\n@@ -265,14 +265,14 @@ impl Bitv {\n impl Bitv {\n     pub fn new(nbits: uint, init: bool) -> Bitv {\n         let rep = if nbits <= uint::bits {\n-            Small(~SmallBitv::new(if init {!0} else {0}))\n+            Small(SmallBitv::new(if init {!0} else {0}))\n         }\n         else {\n             let nelems = nbits/uint::bits +\n                          if nbits % uint::bits == 0 {0} else {1};\n             let elem = if init {!0u} else {0u};\n             let s = vec::from_elem(nelems, elem);\n-            Big(~BigBitv::new(s))\n+            Big(BigBitv::new(s))\n         };\n         Bitv {rep: rep, nbits: nbits}\n     }\n@@ -341,11 +341,11 @@ impl Bitv {\n       if self.nbits != v1.nbits { return false; }\n       match self.rep {\n         Small(ref b) => match v1.rep {\n-          Small(ref b1) => b.equals(*b1, self.nbits),\n+          Small(ref b1) => b.equals(b1, self.nbits),\n           _ => false\n         },\n         Big(ref s) => match v1.rep {\n-          Big(ref s1) => s.equals(*s1, self.nbits),\n+          Big(ref s1) => s.equals(s1, self.nbits),\n           Small(_) => return false\n         }\n       }\n@@ -614,8 +614,8 @@ impl BitvSet {\n         }\n         let Bitv{rep, _} = bitv;\n         match rep {\n-            Big(~b) => BitvSet{ size: size, bitv: b },\n-            Small(~SmallBitv{bits}) =>\n+            Big(b) => BitvSet{ size: size, bitv: b },\n+            Small(SmallBitv{bits}) =>\n                 BitvSet{ size: size, bitv: BigBitv{ storage: ~[bits] } },\n         }\n     }\n@@ -628,7 +628,7 @@ impl BitvSet {\n     pub fn unwrap(self) -> Bitv {\n         let cap = self.capacity();\n         let BitvSet{bitv, _} = self;\n-        return Bitv{ nbits:cap, rep: Big(~bitv) };\n+        return Bitv{ nbits:cap, rep: Big(bitv) };\n     }\n \n     #[inline]"}]}