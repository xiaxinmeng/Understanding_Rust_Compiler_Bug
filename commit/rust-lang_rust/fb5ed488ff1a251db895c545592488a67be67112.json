{"sha": "fb5ed488ff1a251db895c545592488a67be67112", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNWVkNDg4ZmYxYTI1MWRiODk1YzU0NTU5MjQ4OGE2N2JlNjcxMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-24T05:38:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-24T05:38:10Z"}, "message": "Auto merge of #59199 - estebank:untrack-errors, r=eddyb\n\nRemove `track_errors` from `check_match`, `typeck_item_bodies` and `register_plugins`\n\nIn the spirit of continuing through errors in type checking (#39275), remove `track_errors` from a couple of locations in the codebase.", "tree": {"sha": "512e88a7e19600b3086deb3f04bdcc97ebf6331d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512e88a7e19600b3086deb3f04bdcc97ebf6331d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5ed488ff1a251db895c545592488a67be67112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5ed488ff1a251db895c545592488a67be67112", "html_url": "https://github.com/rust-lang/rust/commit/fb5ed488ff1a251db895c545592488a67be67112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5ed488ff1a251db895c545592488a67be67112/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f5ba0ee5e49090d149e2a2df422901d538cbb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f5ba0ee5e49090d149e2a2df422901d538cbb7", "html_url": "https://github.com/rust-lang/rust/commit/93f5ba0ee5e49090d149e2a2df422901d538cbb7"}, {"sha": "57236324ee7c914b7446f6c09057b4e06c4210b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57236324ee7c914b7446f6c09057b4e06c4210b9", "html_url": "https://github.com/rust-lang/rust/commit/57236324ee7c914b7446f6c09057b4e06c4210b9"}], "stats": {"total": 95, "additions": 45, "deletions": 50}, "files": [{"sha": "a2d7815920e0b2418d63b3da4965578a9bd62949", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -272,7 +272,7 @@ rustc_query_append! { [define_queries!][ <'tcx>\n \n     TypeChecking {\n         [] fn typeck_item_bodies:\n-                typeck_item_bodies_dep_node(CrateNum) -> Result<(), ErrorReported>,\n+                typeck_item_bodies_dep_node(CrateNum) -> (),\n \n         [] fn typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n     },\n@@ -325,8 +325,7 @@ rustc_query_append! { [define_queries!][ <'tcx>\n     },\n \n     TypeChecking {\n-        [] fn check_match: CheckMatch(DefId)\n-            -> Result<(), ErrorReported>,\n+        [] fn check_match: CheckMatch(DefId) -> (),\n \n         /// Performs part of the privacy check and computes \"access levels\".\n         [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Lrc<AccessLevels>,"}, {"sha": "c199829b298c00c07c54973d112e1fc38c7b0029", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -323,22 +323,20 @@ pub fn register_plugins<'a>(\n         ..\n     } = registry;\n \n-    sess.track_errors(|| {\n-        let mut ls = sess.lint_store.borrow_mut();\n-        for pass in early_lint_passes {\n-            ls.register_early_pass(Some(sess), true, false, pass);\n-        }\n-        for pass in late_lint_passes {\n-            ls.register_late_pass(Some(sess), true, pass);\n-        }\n+    let mut ls = sess.lint_store.borrow_mut();\n+    for pass in early_lint_passes {\n+        ls.register_early_pass(Some(sess), true, false, pass);\n+    }\n+    for pass in late_lint_passes {\n+        ls.register_late_pass(Some(sess), true, pass);\n+    }\n \n-        for (name, (to, deprecated_name)) in lint_groups {\n-            ls.register_group(Some(sess), true, name, deprecated_name, to);\n-        }\n+    for (name, (to, deprecated_name)) in lint_groups {\n+        ls.register_group(Some(sess), true, name, deprecated_name, to);\n+    }\n \n-        *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-        *sess.plugin_attributes.borrow_mut() = attributes.clone();\n-    })?;\n+    *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n+    *sess.plugin_attributes.borrow_mut() = attributes.clone();\n \n     Ok((krate, PluginInfo {\n         syntax_exts,"}, {"sha": "be3d730c61a1d30eb6cc6c9d65c2d25ae9e8cc6e", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -439,11 +439,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.simplify_candidate(&mut candidate);\n \n         if !candidate.match_pairs.is_empty() {\n-            span_bug!(\n+            // ICE if no other errors have been emitted. This used to be a hard error that wouldn't\n+            // be reached because `hair::pattern::check_match::check_match` wouldn't have let the\n+            // compiler continue. In our tests this is only ever hit by\n+            // `ui/consts/const-match-check.rs` with `--cfg eval1`, and that file already generates\n+            // a different error before hand.\n+            self.hir.tcx().sess.delay_span_bug(\n                 candidate.match_pairs[0].pattern.span,\n-                \"match pairs {:?} remaining after simplifying \\\n-                 irrefutable pattern\",\n-                candidate.match_pairs\n+                &format!(\n+                    \"match pairs {:?} remaining after simplifying irrefutable pattern\",\n+                    candidate.match_pairs,\n+                ),\n             );\n         }\n "}, {"sha": "8c774e0d54cced74b57d1fb037c4127ed9df4b0e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::util::common::ErrorReported;\n \n use syntax::ast::Mutability;\n use syntax::source_map::{Span, DUMMY_SP};\n@@ -619,9 +618,8 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n         let tables = tcx.typeck_tables_of(def_id);\n \n         // Do match-check before building MIR\n-        if let Err(ErrorReported) = tcx.check_match(def_id) {\n-            return Err(ErrorHandled::Reported)\n-        }\n+        // FIXME(#59378) check_match may have errored but we're not checking for that anymore\n+        tcx.check_match(def_id);\n \n         if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind_by_hir_id(id) {\n             tcx.mir_const_qualif(def_id);"}, {"sha": "50df676aea9fb96502c81eb57e9ea238a60d803e", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, Ty, TyCtxt, TyKind};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc::util::common::ErrorReported;\n \n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n@@ -27,25 +26,20 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-) -> Result<(), ErrorReported> {\n+pub(crate) fn check_match<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n-        return Ok(());\n+        return;\n     };\n \n-    tcx.sess.track_errors(|| {\n-        MatchVisitor {\n-            tcx,\n-            tables: tcx.body_tables(body_id),\n-            region_scope_tree: &tcx.region_scope_tree(def_id),\n-            param_env: tcx.param_env(def_id),\n-            identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n-        }.visit_body(tcx.hir().body(body_id));\n-    })\n+    MatchVisitor {\n+        tcx,\n+        tables: tcx.body_tables(body_id),\n+        region_scope_tree: &tcx.region_scope_tree(def_id),\n+        param_env: tcx.param_env(def_id),\n+        identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n+    }.visit_body(tcx.hir().body(body_id));\n }\n \n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {"}, {"sha": "1054619f0f808c042ba62ca9af551d78618556bd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -702,15 +702,11 @@ fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId)\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n-                                -> Result<(), ErrorReported>\n-{\n+fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n-    Ok(tcx.sess.track_errors(|| {\n-        tcx.par_body_owners(|body_owner_def_id| {\n-            tcx.ensure().typeck_tables_of(body_owner_def_id);\n-        });\n-    })?)\n+    tcx.par_body_owners(|body_owner_def_id| {\n+        tcx.ensure().typeck_tables_of(body_owner_def_id);\n+    });\n }\n \n fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {"}, {"sha": "b2c2b233c81ab3402d7dfc5e2844198de63668b6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -363,7 +363,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n         })\n     })?;\n \n-    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE))?;\n+    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE));\n \n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);"}, {"sha": "05e046219090689560f741ceee2bf004e952062e", "filename": "src/test/ui/issues/issue-26217.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ed488ff1a251db895c545592488a67be67112/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ed488ff1a251db895c545592488a67be67112/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs?ref=fb5ed488ff1a251db895c545592488a67be67112", "patch": "@@ -1,6 +1,10 @@\n fn foo<T>() where for<'a> T: 'a {}\n \n-fn main<'a>() {\n+fn bar<'a>() {\n     foo::<&'a i32>();\n     //~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n }\n+\n+fn main() {\n+    bar();\n+}"}]}