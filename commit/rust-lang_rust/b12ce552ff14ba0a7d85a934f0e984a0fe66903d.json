{"sha": "b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "node_id": "C_kwDOAAsO6NoAKGIxMmNlNTUyZmYxNGJhMGE3ZDg1YTkzNGYwZTk4NGEwZmU2NjkwM2Q", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:44:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:44:41Z"}, "message": "rename some more types for consistency", "tree": {"sha": "81a786ae0c523885006523aea4fc5327567e36f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a786ae0c523885006523aea4fc5327567e36f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "html_url": "https://github.com/rust-lang/rust/commit/b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595490e8dd13e84a9c7f44f22489a723772fbf70", "url": "https://api.github.com/repos/rust-lang/rust/commits/595490e8dd13e84a9c7f44f22489a723772fbf70", "html_url": "https://github.com/rust-lang/rust/commit/595490e8dd13e84a9c7f44f22489a723772fbf70"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "10e6e252e94b70428b58a4a7511522307c305266", "filename": "src/tools/miri/src/borrow_tracker/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -200,7 +200,7 @@ impl GlobalStateInner {\n         FrameState { call_id, protected_tags: SmallVec::new() }\n     }\n \n-    pub fn end_call(&mut self, frame: &machine::FrameData<'_>) {\n+    pub fn end_call(&mut self, frame: &machine::FrameExtra<'_>) {\n         for tag in &frame\n             .borrow_tracker\n             .as_ref()"}, {"sha": "dd2102043d29016783b0173988b151b951a5e0ca", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -59,7 +59,7 @@ use super::{\n     weak_memory::EvalContextExt as _,\n };\n \n-pub type AllocExtra = VClockAlloc;\n+pub type AllocState = VClockAlloc;\n \n /// Valid atomic read-write orderings, alias of atomic::Ordering (not non-exhaustive).\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "03f9ed351fb694db10a0d7e7f9a081db80bc29b8", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -113,7 +113,7 @@ pub struct Thread<'mir, 'tcx> {\n     thread_name: Option<Vec<u8>>,\n \n     /// The virtual call stack.\n-    stack: Vec<Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>>,\n+    stack: Vec<Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>>,\n \n     /// The function to call when the stack ran empty, to figure out what to do next.\n     /// Conceptually, this is the interpreter implementation of the things that happen 'after' the\n@@ -232,7 +232,7 @@ impl VisitTags for Thread<'_, '_> {\n     }\n }\n \n-impl VisitTags for Frame<'_, '_, Provenance, FrameData<'_>> {\n+impl VisitTags for Frame<'_, '_, Provenance, FrameExtra<'_>> {\n     fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         let Frame {\n             return_place,\n@@ -385,20 +385,20 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     }\n \n     /// Borrow the stack of the active thread.\n-    pub fn active_thread_stack(&self) -> &[Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>] {\n+    pub fn active_thread_stack(&self) -> &[Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>] {\n         &self.threads[self.active_thread].stack\n     }\n \n     /// Mutably borrow the stack of the active thread.\n     fn active_thread_stack_mut(\n         &mut self,\n-    ) -> &mut Vec<Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>> {\n+    ) -> &mut Vec<Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>> {\n         &mut self.threads[self.active_thread].stack\n     }\n \n     pub fn all_stacks(\n         &self,\n-    ) -> impl Iterator<Item = &[Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>]> {\n+    ) -> impl Iterator<Item = &[Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>]> {\n         self.threads.iter().map(|t| &t.stack[..])\n     }\n \n@@ -921,15 +921,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     }\n \n     #[inline]\n-    fn active_thread_stack(&self) -> &[Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>] {\n+    fn active_thread_stack(&self) -> &[Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>] {\n         let this = self.eval_context_ref();\n         this.machine.threads.active_thread_stack()\n     }\n \n     #[inline]\n     fn active_thread_stack_mut(\n         &mut self,\n-    ) -> &mut Vec<Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>> {\n+    ) -> &mut Vec<Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>> {\n         let this = self.eval_context_mut();\n         this.machine.threads.active_thread_stack_mut()\n     }"}, {"sha": "391681444d9ba03ce2c26b413a77ebe7eee2acf4", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -93,7 +93,7 @@ use super::{\n     vector_clock::{VClock, VTimestamp, VectorIdx},\n };\n \n-pub type AllocExtra = StoreBufferAlloc;\n+pub type AllocState = StoreBufferAlloc;\n \n // Each store buffer must be bounded otherwise it will grow indefinitely.\n // However, bounding the store buffer means restricting the amount of weak"}, {"sha": "8f6a5fbc1f01cfe65b0152711f8529fd1ef01a00", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -988,7 +988,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         self.stack()[frame_idx].current_span()\n     }\n \n-    fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameData<'tcx>>] {\n+    fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameExtra<'tcx>>] {\n         self.threads.active_thread_stack()\n     }\n "}, {"sha": "42519797976b7795805ca245c1ccd0c3ec80640d", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -106,7 +106,7 @@ pub use crate::eval::{\n pub use crate::helpers::EvalContextExt as _;\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n-    AllocExtra, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind,\n+    AllocExtra, FrameExtra, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind,\n     PrimitiveLayouts, Provenance, ProvenanceExtra, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;"}, {"sha": "c110229c985db78600cd18626a2b1899852047df", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -37,7 +37,7 @@ pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but\n pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n \n /// Extra data stored with each stack frame\n-pub struct FrameData<'tcx> {\n+pub struct FrameExtra<'tcx> {\n     /// Extra data for Stacked Borrows.\n     pub borrow_tracker: Option<borrow_tracker::FrameState>,\n \n@@ -58,20 +58,20 @@ pub struct FrameData<'tcx> {\n     pub is_user_relevant: bool,\n }\n \n-impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n+impl<'tcx> std::fmt::Debug for FrameExtra<'tcx> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         // Omitting `timing`, it does not support `Debug`.\n-        let FrameData { borrow_tracker, catch_unwind, timing: _, is_user_relevant: _ } = self;\n+        let FrameExtra { borrow_tracker, catch_unwind, timing: _, is_user_relevant: _ } = self;\n         f.debug_struct(\"FrameData\")\n             .field(\"borrow_tracker\", borrow_tracker)\n             .field(\"catch_unwind\", catch_unwind)\n             .finish()\n     }\n }\n \n-impl VisitTags for FrameData<'_> {\n+impl VisitTags for FrameExtra<'_> {\n     fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n-        let FrameData { catch_unwind, borrow_tracker, timing: _, is_user_relevant: _ } = self;\n+        let FrameExtra { catch_unwind, borrow_tracker, timing: _, is_user_relevant: _ } = self;\n \n         catch_unwind.visit_tags(visit);\n         borrow_tracker.visit_tags(visit);\n@@ -258,10 +258,10 @@ pub struct AllocExtra {\n     pub borrow_tracker: Option<borrow_tracker::AllocState>,\n     /// Data race detection via the use of a vector-clock,\n     ///  this is only added if it is enabled.\n-    pub data_race: Option<data_race::AllocExtra>,\n+    pub data_race: Option<data_race::AllocState>,\n     /// Weak memory emulation via the use of store buffers,\n     ///  this is only added if it is enabled.\n-    pub weak_memory: Option<weak_memory::AllocExtra>,\n+    pub weak_memory: Option<weak_memory::AllocState>,\n }\n \n impl VisitTags for AllocExtra {\n@@ -736,7 +736,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     type MemoryKind = MiriMemoryKind;\n     type ExtraFnVal = Dlsym;\n \n-    type FrameExtra = FrameData<'tcx>;\n+    type FrameExtra = FrameExtra<'tcx>;\n     type AllocExtra = AllocExtra;\n \n     type Provenance = Provenance;\n@@ -908,14 +908,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n             .map(|bt| bt.borrow_mut().new_allocation(id, alloc.size(), kind, &ecx.machine));\n \n         let race_alloc = ecx.machine.data_race.as_ref().map(|data_race| {\n-            data_race::AllocExtra::new_allocation(\n+            data_race::AllocState::new_allocation(\n                 data_race,\n                 &ecx.machine.threads,\n                 alloc.size(),\n                 kind,\n             )\n         });\n-        let buffer_alloc = ecx.machine.weak_memory.then(weak_memory::AllocExtra::new_allocation);\n+        let buffer_alloc = ecx.machine.weak_memory.then(weak_memory::AllocState::new_allocation);\n         let alloc: Allocation<Provenance, Self::AllocExtra> = alloc.adjust_from_tcx(\n             &ecx.tcx,\n             AllocExtra { borrow_tracker, data_race: race_alloc, weak_memory: buffer_alloc },\n@@ -1070,7 +1070,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     fn init_frame_extra(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         frame: Frame<'mir, 'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>> {\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>> {\n         // Start recording our event before doing anything else\n         let timing = if let Some(profiler) = ecx.machine.profiler.as_ref() {\n             let fn_name = frame.instance.to_string();\n@@ -1088,7 +1088,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n \n         let borrow_tracker = ecx.machine.borrow_tracker.as_ref();\n \n-        let extra = FrameData {\n+        let extra = FrameExtra {\n             borrow_tracker: borrow_tracker.map(|bt| bt.borrow_mut().new_frame(&ecx.machine)),\n             catch_unwind: None,\n             timing,\n@@ -1157,7 +1157,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     #[inline(always)]\n     fn after_stack_pop(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        mut frame: Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>,\n+        mut frame: Frame<'mir, 'tcx, Provenance, FrameExtra<'tcx>>,\n         unwinding: bool,\n     ) -> InterpResult<'tcx, StackPopJump> {\n         if frame.extra.is_user_relevant {"}, {"sha": "db3e42facadd03958c1d8725b7c44be4645692db", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ce552ff14ba0a7d85a934f0e984a0fe66903d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=b12ce552ff14ba0a7d85a934f0e984a0fe66903d", "patch": "@@ -125,7 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n     fn handle_stack_pop_unwind(\n         &mut self,\n-        mut extra: FrameData<'tcx>,\n+        mut extra: FrameExtra<'tcx>,\n         unwinding: bool,\n     ) -> InterpResult<'tcx, StackPopJump> {\n         let this = self.eval_context_mut();"}]}