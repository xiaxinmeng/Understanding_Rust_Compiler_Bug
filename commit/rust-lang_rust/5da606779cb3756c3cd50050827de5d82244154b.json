{"sha": "5da606779cb3756c3cd50050827de5d82244154b", "node_id": "C_kwDOAAsO6NoAKDVkYTYwNjc3OWNiMzc1NmMzY2Q1MDA1MDgyN2RlNWQ4MjI0NDE1NGI", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-14T14:20:32Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-31T10:28:38Z"}, "message": "Uplift clippy::cast_ref_to_mut to rustc", "tree": {"sha": "23f29aec8040cd8bfcd349ebd8360566e1e9a4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f29aec8040cd8bfcd349ebd8360566e1e9a4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da606779cb3756c3cd50050827de5d82244154b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da606779cb3756c3cd50050827de5d82244154b", "html_url": "https://github.com/rust-lang/rust/commit/5da606779cb3756c3cd50050827de5d82244154b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da606779cb3756c3cd50050827de5d82244154b/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51ad131e6ba90ec2da67f35a44531494a9f07f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51ad131e6ba90ec2da67f35a44531494a9f07f3", "html_url": "https://github.com/rust-lang/rust/commit/a51ad131e6ba90ec2da67f35a44531494a9f07f3"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "98fe3821947d5a6b55cab266932ab553e49679eb", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -155,6 +155,8 @@ lint_builtin_unused_doc_comment = unused doc comment\n lint_builtin_while_true = denote infinite loops with `loop {\"{\"} ... {\"}\"}`\n     .suggestion = use `loop`\n \n+lint_cast_ref_to_mut = casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+\n lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}\n \n lint_check_name_unknown = unknown lint: `{$lint_name}`"}, {"sha": "84308d48c10bc28969df2db3fec668f418649eab", "filename": "compiler/rustc_lint/src/cast_ref_to_mut.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -0,0 +1,72 @@\n+use rustc_ast::Mutability;\n+use rustc_hir::{Expr, ExprKind, MutTy, TyKind, UnOp};\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+use crate::{lints::CastRefToMutDiag, LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `cast_ref_to_mut` lint checks for casts of `&T` to `&mut T`\n+    /// without using interior mutability.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// fn x(r: &i32) {\n+    ///     unsafe {\n+    ///         *(r as *const i32 as *mut i32) += 1;\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Casting `&T` to `&mut T` without using interior mutability is undefined behavior,\n+    /// as it's a violation of Rust reference aliasing requirements.\n+    ///\n+    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n+    /// mutable.\n+    CAST_REF_TO_MUT,\n+    Deny,\n+    \"casts of `&T` to `&mut T` without interior mutability\"\n+}\n+\n+declare_lint_pass!(CastRefToMut => [CAST_REF_TO_MUT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for CastRefToMut {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        let ExprKind::Unary(UnOp::Deref, e) = &expr.kind else { return; };\n+\n+        let e = e.peel_blocks();\n+        let e = if let ExprKind::Cast(e, t) = e.kind\n+            && let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind {\n+            e\n+        } else if let ExprKind::MethodCall(_, expr, [], _) = e.kind\n+            && let Some(def_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n+            && cx.tcx.is_diagnostic_item(sym::ptr_cast_mut, def_id) {\n+            expr\n+        } else {\n+            return;\n+        };\n+\n+        let e = e.peel_blocks();\n+        let e = if let ExprKind::Cast(e, t) = e.kind\n+            && let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind {\n+            e\n+        } else if let ExprKind::Call(path, [arg]) = e.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && cx.tcx.is_diagnostic_item(sym::ptr_from_ref, def_id) {\n+            arg\n+        } else {\n+            return;\n+        };\n+\n+        let e = e.peel_blocks();\n+        if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind() {\n+            cx.emit_spanned_lint(CAST_REF_TO_MUT, expr.span, CastRefToMutDiag);\n+        }\n+    }\n+}"}, {"sha": "5e3f057d4283428c202a08beab9e3f4f9f2fe959", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -50,6 +50,7 @@ extern crate tracing;\n \n mod array_into_iter;\n pub mod builtin;\n+mod cast_ref_to_mut;\n mod context;\n mod deref_into_dyn_supertrait;\n mod drop_forget_useless;\n@@ -97,6 +98,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use cast_ref_to_mut::*;\n use deref_into_dyn_supertrait::*;\n use drop_forget_useless::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n@@ -214,6 +216,7 @@ late_lint_methods!(\n             BoxPointers: BoxPointers,\n             PathStatements: PathStatements,\n             LetUnderscore: LetUnderscore,\n+            CastRefToMut: CastRefToMut,\n             // Depends on referenced function signatures in expressions\n             UnusedResults: UnusedResults,\n             NonUpperCaseGlobals: NonUpperCaseGlobals,"}, {"sha": "fd15f7952023a2fb2b201f65eedb11364e156cf7", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -718,6 +718,11 @@ pub enum InvalidFromUtf8Diag {\n     },\n }\n \n+// cast_ref_to_mut.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_cast_ref_to_mut)]\n+pub struct CastRefToMutDiag;\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "745d7070143662010359fc38d4cdb6273bead131", "filename": "tests/ui/lint/cast_ref_to_mut.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -0,0 +1,50 @@\n+// check-fail\n+\n+#![feature(ptr_from_ref)]\n+\n+extern \"C\" {\n+    // N.B., mutability can be easily incorrect in FFI calls -- as\n+    // in C, the default is mutable pointers.\n+    fn ffi(c: *mut u8);\n+    fn int_ffi(c: *mut i32);\n+}\n+\n+fn main() {\n+    let s = String::from(\"Hello\");\n+    let a = &s;\n+    unsafe {\n+        let num = &3i32;\n+        let mut_num = &mut 3i32;\n+\n+        (*(a as *const _ as *mut String)).push_str(\" world\");\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(a as *const _ as *mut String) += \" world\";\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = &mut *(num as *const i32 as *mut i32);\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = &mut *(num as *const i32).cast_mut();\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = *{ num as *const i32 }.cast_mut();\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *std::ptr::from_ref(num).cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *std::ptr::from_ref({ num }).cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *{ std::ptr::from_ref(num) }.cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(std::ptr::from_ref({ num }) as *mut i32) += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+\n+        // Shouldn't be warned against\n+        println!(\"{}\", *(num as *const _ as *const i16));\n+        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n+        ffi(a.as_ptr() as *mut _);\n+        int_ffi(num as *const _ as *mut _);\n+        int_ffi(&3 as *const _ as *mut _);\n+        let mut value = 3;\n+        let value: *const i32 = &mut value;\n+        *(value as *const i16 as *mut i16) = 42;\n+    }\n+}"}, {"sha": "baff00d6c04196ccbd2b58266f082218de583efa", "filename": "tests/ui/lint/cast_ref_to_mut.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5da606779cb3756c3cd50050827de5d82244154b/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da606779cb3756c3cd50050827de5d82244154b/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr?ref=5da606779cb3756c3cd50050827de5d82244154b", "patch": "@@ -0,0 +1,64 @@\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:19:9\n+   |\n+LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(cast_ref_to_mut)]` on by default\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:21:9\n+   |\n+LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:23:9\n+   |\n+LL |         *(a as *const _ as *mut String) += \" world\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:25:25\n+   |\n+LL |         let _num = &mut *(num as *const i32 as *mut i32);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:27:25\n+   |\n+LL |         let _num = &mut *(num as *const i32).cast_mut();\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:29:20\n+   |\n+LL |         let _num = *{ num as *const i32 }.cast_mut();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:31:9\n+   |\n+LL |         *std::ptr::from_ref(num).cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:33:9\n+   |\n+LL |         *std::ptr::from_ref({ num }).cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:35:9\n+   |\n+LL |         *{ std::ptr::from_ref(num) }.cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:37:9\n+   |\n+LL |         *(std::ptr::from_ref({ num }) as *mut i32) += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+"}]}