{"sha": "f91f369949588d74e35fabbf775db3757d5b206d", "node_id": "C_kwDOAAsO6NoAKGY5MWYzNjk5NDk1ODhkNzRlMzVmYWJiZjc3NWRiMzc1N2Q1YjIwNmQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-17T15:03:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T15:03:03Z"}, "message": "Rollup merge of #106148 - chenyukang:yukang/fix-105061-unused, r=lcnr\n\nFix unused_parens issue for higher ranked function pointers\n\nfixes #105061\n\nr? `@lcnr`", "tree": {"sha": "8eb6db9423d33100c47b67081dd25e88e391875f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb6db9423d33100c47b67081dd25e88e391875f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91f369949588d74e35fabbf775db3757d5b206d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxrinCRBK7hj4Ov3rIwAAh1wIAIV84G3EKZ09X4pvsfWgHc05\ndXkR8Q5x2Eos7k4BrxTXqzgZzUZKCfrRJueli/Ohm/VnDMRP4oFb8lPafzVo9/hS\n5Oj8YppjC9p+P7E72TuZ9JLf4QcRanFZQkiAaEb3etj8AwFGyosypaGlgVO/TixR\nZ51qOA5xwqdBqt+uEY3dp1/2PCBKaFyYaLtLPQqfiTGE5B5M988GnkYBSXo5VaKy\nNRVwYwA6t9wicWcXIOB7PZQjuiSPRXQHTMCHerOrEUd60CRLtIetEsX07rfVa5h0\nQgPnxSvSdVny+otRzwNFOQNJaaxASrrv1+RJjC6ZThyBDum0/lKfamn3ktKPGLU=\n=u3Fh\n-----END PGP SIGNATURE-----\n", "payload": "tree 8eb6db9423d33100c47b67081dd25e88e391875f\nparent 09faa266dac3a7e85f57a7b02e9ee181076207b7\nparent 9d74bb832f2529535a9896ba0ff2797679907415\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1673967783 +0530\ncommitter GitHub <noreply@github.com> 1673967783 +0530\n\nRollup merge of #106148 - chenyukang:yukang/fix-105061-unused, r=lcnr\n\nFix unused_parens issue for higher ranked function pointers\n\nfixes #105061\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91f369949588d74e35fabbf775db3757d5b206d", "html_url": "https://github.com/rust-lang/rust/commit/f91f369949588d74e35fabbf775db3757d5b206d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91f369949588d74e35fabbf775db3757d5b206d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09faa266dac3a7e85f57a7b02e9ee181076207b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/09faa266dac3a7e85f57a7b02e9ee181076207b7", "html_url": "https://github.com/rust-lang/rust/commit/09faa266dac3a7e85f57a7b02e9ee181076207b7"}, {"sha": "9d74bb832f2529535a9896ba0ff2797679907415", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d74bb832f2529535a9896ba0ff2797679907415", "html_url": "https://github.com/rust-lang/rust/commit/9d74bb832f2529535a9896ba0ff2797679907415"}], "stats": {"total": 252, "additions": 224, "deletions": 28}, "files": [{"sha": "337a19dd024d2fec195601c77de253036df847bf", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -248,7 +248,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n+        lint_callback!(self, enter_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n+        lint_callback!(self, exit_where_predicate, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {"}, {"sha": "d6be4da03286f75f1e4868e5bac454b345008a8b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -145,7 +145,7 @@ early_lint_methods!(\n     [\n         pub BuiltinCombinedEarlyLintPass,\n         [\n-            UnusedParens: UnusedParens,\n+            UnusedParens: UnusedParens::new(),\n             UnusedBraces: UnusedBraces,\n             UnusedImportBraces: UnusedImportBraces,\n             UnsafeCode: UnsafeCode,"}, {"sha": "0bf01c4e567814f1f720de66362f310cf5c0f934", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -171,6 +171,9 @@ macro_rules! early_lint_methods {\n \n             /// Counterpart to `enter_lint_attrs`.\n             fn exit_lint_attrs(a: &[ast::Attribute]);\n+\n+            fn enter_where_predicate(a: &ast::WherePredicate);\n+            fn exit_where_predicate(a: &ast::WherePredicate);\n         ]);\n     )\n }"}, {"sha": "4c9b3df2dbd33d706d04c3cc5e911ceeb9c70a2c", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -824,7 +824,17 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n+pub struct UnusedParens {\n+    with_self_ty_parens: bool,\n+}\n+\n+impl UnusedParens {\n+    pub fn new() -> Self {\n+        Self { with_self_ty_parens: false }\n+    }\n+}\n+\n+impl_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedDelimLint for UnusedParens {\n     const DELIM_STR: &'static str = \"parentheses\";\n@@ -999,36 +1009,58 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let ast::TyKind::Paren(r) = &ty.kind {\n-            match &r.kind {\n-                ast::TyKind::TraitObject(..) => {}\n-                ast::TyKind::BareFn(b) if b.generic_params.len() > 0 => {}\n-                ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n-                ast::TyKind::Array(_, len) => {\n-                    self.check_unused_delims_expr(\n-                        cx,\n-                        &len.value,\n-                        UnusedDelimsCtx::ArrayLenExpr,\n-                        false,\n-                        None,\n-                        None,\n-                    );\n-                }\n-                _ => {\n-                    let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n-                        Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n-                    } else {\n-                        None\n-                    };\n-                    self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+        match &ty.kind {\n+            ast::TyKind::Array(_, len) => {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    &len.value,\n+                    UnusedDelimsCtx::ArrayLenExpr,\n+                    false,\n+                    None,\n+                    None,\n+                );\n+            }\n+            ast::TyKind::Paren(r) => {\n+                match &r.kind {\n+                    ast::TyKind::TraitObject(..) => {}\n+                    ast::TyKind::BareFn(b)\n+                        if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n+                    ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n+                    _ => {\n+                        let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n+                            Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n+                        } else {\n+                            None\n+                        };\n+                        self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+                    }\n                 }\n+                self.with_self_ty_parens = false;\n             }\n+            _ => {}\n         }\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         <Self as UnusedDelimLint>::check_item(self, cx, item)\n     }\n+\n+    fn enter_where_predicate(&mut self, _: &EarlyContext<'_>, pred: &ast::WherePredicate) {\n+        use rustc_ast::{WhereBoundPredicate, WherePredicate};\n+        if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                bounded_ty,\n+                bound_generic_params,\n+                ..\n+            }) = pred &&\n+            let ast::TyKind::Paren(_) = &bounded_ty.kind &&\n+            bound_generic_params.is_empty() {\n+                self.with_self_ty_parens = true;\n+        }\n+    }\n+\n+    fn exit_where_predicate(&mut self, _: &EarlyContext<'_>, _: &ast::WherePredicate) {\n+        assert!(!self.with_self_ty_parens);\n+    }\n }\n \n declare_lint! {"}, {"sha": "3581484050dd1a4e506574b46d99ce609c5ed996", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -374,10 +374,10 @@ static_assert!((TAG_MASK + 1).is_power_of_two());\n static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n \n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE_MESSAGE), TAG_SIMPLE_MESSAGE);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_CUSTOM), TAG_CUSTOM);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_OS), TAG_OS);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE), TAG_SIMPLE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE_MESSAGE, TAG_SIMPLE_MESSAGE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_CUSTOM, TAG_CUSTOM);\n+static_assert!(@usize_eq: TAG_MASK & TAG_OS, TAG_OS);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE, TAG_SIMPLE);\n \n // This is obviously true (`TAG_CUSTOM` is `0b01`), but in `Repr::new_custom` we\n // offset a pointer by this value, and expect it to both be within the same"}, {"sha": "9b06a4fde04d76cdd2890a2a7f6c1e48cc2be621", "filename": "tests/ui/lint/unused/issue-105061-array-lint.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,11 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+fn main() {\n+    let _x: ([u32; 3]); //~ ERROR unnecessary parentheses around type\n+    let _y: [u8; (3)]; //~ ERROR unnecessary parentheses around const expression\n+    let _z: ([u8; (3)]);\n+    //~^ ERROR unnecessary parentheses around const expression\n+    //~| ERROR unnecessary parentheses around type\n+\n+}"}, {"sha": "7eb761aee431f29919371feeb0ec7904b5d28b24", "filename": "tests/ui/lint/unused/issue-105061-array-lint.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,56 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-array-lint.rs:5:13\n+   |\n+LL |     let _x: ([u32; 3]);\n+   |             ^        ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061-array-lint.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     let _x: ([u32; 3]);\n+LL +     let _x: [u32; 3];\n+   |\n+\n+error: unnecessary parentheses around const expression\n+  --> $DIR/issue-105061-array-lint.rs:6:18\n+   |\n+LL |     let _y: [u8; (3)];\n+   |                  ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _y: [u8; (3)];\n+LL +     let _y: [u8; 3];\n+   |\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-array-lint.rs:7:13\n+   |\n+LL |     let _z: ([u8; (3)]);\n+   |             ^         ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _z: ([u8; (3)]);\n+LL +     let _z: [u8; (3)];\n+   |\n+\n+error: unnecessary parentheses around const expression\n+  --> $DIR/issue-105061-array-lint.rs:7:19\n+   |\n+LL |     let _z: ([u8; (3)]);\n+   |                   ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _z: ([u8; (3)]);\n+LL +     let _z: ([u8; 3]);\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "7e4e09473493a2cff2b723c4d43ba54502d6b59a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,23 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+struct Inv<'a>(&'a mut &'a ());\n+\n+trait Trait<'a> {}\n+impl<'b> Trait<'b> for for<'a> fn(Inv<'a>) {}\n+\n+fn with_bound()\n+where\n+    for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>, //~ ERROR unnecessary parentheses around type\n+{}\n+\n+trait Hello<T> {}\n+fn with_dyn_bound<T>()\n+where\n+    (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T> //~ ERROR unnecessary parentheses around type\n+{}\n+\n+fn main() {\n+    with_bound();\n+    with_dyn_bound();\n+}"}, {"sha": "e591f1ffb6b897f6e8daeff38c32376301d2505a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,32 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-should-lint.rs:11:13\n+   |\n+LL |     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n+   |             ^                   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061-should-lint.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n+LL +     for<'b> for<'a> fn(Inv<'a>): Trait<'b>,\n+   |\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-should-lint.rs:17:16\n+   |\n+LL |     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+   |                ^                  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+LL +     (dyn Hello<for<'b> fn(&'b ())>): Hello<T>\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "92d636d0ac62de4acbd857a8dc2a69c7af676e80", "filename": "tests/ui/lint/unused/issue-105061.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,17 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+struct Inv<'a>(&'a mut &'a ());\n+\n+trait Trait {}\n+impl Trait for (for<'a> fn(Inv<'a>),) {}\n+\n+\n+fn with_bound()\n+where\n+    ((for<'a> fn(Inv<'a>)),): Trait, //~ ERROR unnecessary parentheses around type\n+{}\n+\n+fn main() {\n+    with_bound();\n+}"}, {"sha": "f07aa2012df5f48d6a346eeef830f0ef01090614", "filename": "tests/ui/lint/unused/issue-105061.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f91f369949588d74e35fabbf775db3757d5b206d/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr?ref=f91f369949588d74e35fabbf775db3757d5b206d", "patch": "@@ -0,0 +1,20 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061.rs:12:6\n+   |\n+LL |     ((for<'a> fn(Inv<'a>)),): Trait,\n+   |      ^                   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     ((for<'a> fn(Inv<'a>)),): Trait,\n+LL +     (for<'a> fn(Inv<'a>),): Trait,\n+   |\n+\n+error: aborting due to previous error\n+"}]}