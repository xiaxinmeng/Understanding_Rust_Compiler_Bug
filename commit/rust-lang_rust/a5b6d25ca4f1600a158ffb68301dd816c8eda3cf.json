{"sha": "a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "node_id": "C_kwDOAAsO6NoAKGE1YjZkMjVjYTRmMTYwMGExNThmZmI2ODMwMWRkODE2YzhlZGEzY2Y", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-17T01:10:40Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-17T01:10:40Z"}, "message": "use get_diagnostic_name for checking macro_call", "tree": {"sha": "7013f9cad4e9336752c725ab545a99aa9d3bced1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7013f9cad4e9336752c725ab545a99aa9d3bced1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "html_url": "https://github.com/rust-lang/rust/commit/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb4cef123a53534aaaa3956d4edf079d8482c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb4cef123a53534aaaa3956d4edf079d8482c6b", "html_url": "https://github.com/rust-lang/rust/commit/7cb4cef123a53534aaaa3956d4edf079d8482c6b"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "9d1ca3588b3ca8db7a6e8df9da3c1ca7dfda533b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b6d25ca4f1600a158ffb68301dd816c8eda3cf/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a5b6d25ca4f1600a158ffb68301dd816c8eda3cf", "patch": "@@ -13,11 +13,9 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::walk_chain;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{BytePos, Span, Symbol};\n+use rustc_span::{sym, BytePos, Span, Symbol};\n use std::borrow::Cow;\n \n-const ACCEPTABLE_MACRO: [&str; 2] = [\"todo\", \"unimplemented\"];\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for consecutive `if`s with the same condition.\n@@ -394,7 +392,10 @@ fn acceptable_macro(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(call_expr, _)  = expr.kind\n         && let ExprKind::Path(QPath::Resolved(None, path)) = call_expr.kind\n         && macro_backtrace(path.span).any(|macro_call| {\n-            ACCEPTABLE_MACRO.contains(&cx.tcx.item_name(macro_call.def_id).as_str())\n+            matches!(\n+                &cx.tcx.get_diagnostic_name(macro_call.def_id),\n+                Some(sym::todo_macro | sym::unimplemented_macro)\n+            )\n     }) {\n         return true;\n     }"}]}