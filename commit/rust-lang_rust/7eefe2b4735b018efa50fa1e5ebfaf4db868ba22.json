{"sha": "7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZWZlMmI0NzM1YjAxOGVmYTUwZmExZTVlYmZhZjRkYjg2OGJhMjI=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-05-14T03:07:34Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-05-16T02:03:02Z"}, "message": "Fix rustdoc panic with `impl Trait` in type parameters", "tree": {"sha": "bb3c4126187f25cc7d5c7479b6031b1dd3f3410e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3c4126187f25cc7d5c7479b6031b1dd3f3410e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "html_url": "https://github.com/rust-lang/rust/commit/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e44fc6c52d9674ed09958512e3bf09bc55bccecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44fc6c52d9674ed09958512e3bf09bc55bccecf", "html_url": "https://github.com/rust-lang/rust/commit/e44fc6c52d9674ed09958512e3bf09bc55bccecf"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "c233e57a8018eb5af05b226117be975b99f3d4e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "patch": "@@ -1754,16 +1754,39 @@ pub struct Generics {\n \n impl Clean<Generics> for hir::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n+        // Synthetic type-parameters are inserted after normal ones.\n+        // In order for normal parameters to be able to refer to synthetic ones,\n+        // scans them first.\n+        fn is_impl_trait(param: &hir::GenericParam) -> bool {\n+            if let hir::GenericParam::Type(ref tp) = param {\n+                tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait)\n+            } else {\n+                false\n+            }\n+        }\n+        let impl_trait_params = self.params\n+            .iter()\n+            .filter(|p| is_impl_trait(p))\n+            .map(|p| {\n+                let p = p.clean(cx);\n+                if let GenericParamDef::Type(ref tp) = p {\n+                    cx.impl_trait_bounds\n+                        .borrow_mut()\n+                        .insert(tp.did, tp.bounds.clone());\n+                } else {\n+                    unreachable!()\n+                }\n+                p\n+            })\n+            .collect::<Vec<_>>();\n+\n         let mut params = Vec::with_capacity(self.params.len());\n-        for p in &self.params {\n+        for p in self.params.iter().filter(|p| !is_impl_trait(p)) {\n             let p = p.clean(cx);\n-            if let GenericParamDef::Type(ref tp) = p {\n-                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n-                    cx.impl_trait_bounds.borrow_mut().insert(tp.did, tp.bounds.clone());\n-                }\n-            }\n             params.push(p);\n         }\n+        params.extend(impl_trait_params);\n+\n         let mut g = Generics {\n             params,\n             where_predicates: self.where_clause.predicates.clean(cx)"}, {"sha": "1c1124282d478655d884e90fab35f750c28433e9", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefe2b4735b018efa50fa1e5ebfaf4db868ba22/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=7eefe2b4735b018efa50fa1e5ebfaf4db868ba22", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(universal_impl_trait)]\n #![crate_name = \"foo\"]\n \n use std::io::Read;\n+use std::borrow::Borrow;\n \n // @has foo/fn.foo.html\n // @has - //pre 'foo('\n@@ -51,3 +51,15 @@ impl<T> S<T> {\n // @has - 'method</a>('\n // @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n impl<T> Trait for S<T> {}\n+\n+// @has foo/fn.much_universe.html\n+// @matches - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n+// @matches - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n+// @matches - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n+pub fn much_universe<\n+    T: Borrow<impl Trait>,\n+    U: IntoIterator<Item = impl Iterator<Item = impl Clone>>,\n+>(\n+    _: impl Read + Clone,\n+) {\n+}"}]}