{"sha": "198ba3bd1cfedc7115f91d549a352da2b25050b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OGJhM2JkMWNmZWRjNzExNWY5MWQ1NDlhMzUyZGEyYjI1MDUwYjc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-10-22T21:30:03Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-06T02:24:15Z"}, "message": "Injecting expressions in place of counters where helpful\n\nImplementing the Graph traits for the BasicCoverageBlock\ngraph.\n\noptimized replacement of counters with expressions plus new BCB graphviz\n\n* Avoid adding coverage to unreachable blocks.\n* Special case for Goto at the end of the body. Make it non-reportable.\n\nImproved debugging and formatting options (from env)\n\nDon't automatically add counters to BCBs without CoverageSpans. They may\nstill get counters but only if there are dependencies from\nother BCBs that have spans, I think.\n\nMake CodeRegions optional for Counters too. It is\npossible to inject counters (`llvm.instrprof.increment` intrinsic calls\nwithout corresponding code regions in the coverage map. An expression\ncan still uses these counter values.\n\nRefactored instrument_coverage.rs -> instrument_coverage/mod.rs, and\nthen broke up the mod into multiple files.\n\nCompiling with coverage, with the expression optimization, works on\nthe json5format crate and its dependencies.\n\nRefactored debug features from mod.rs to debug.rs", "tree": {"sha": "8a6b3755806c0e8a315dab3e3ea4caf87cd50b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6b3755806c0e8a315dab3e3ea4caf87cd50b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198ba3bd1cfedc7115f91d549a352da2b25050b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198ba3bd1cfedc7115f91d549a352da2b25050b7", "html_url": "https://github.com/rust-lang/rust/commit/198ba3bd1cfedc7115f91d549a352da2b25050b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198ba3bd1cfedc7115f91d549a352da2b25050b7/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3291d28e9ac1173f033d240bc5f3f145c9c8dd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/3291d28e9ac1173f033d240bc5f3f145c9c8dd59", "html_url": "https://github.com/rust-lang/rust/commit/3291d28e9ac1173f033d240bc5f3f145c9c8dd59"}], "stats": {"total": 2587, "additions": 1984, "deletions": 603}, "files": [{"sha": "75e8abaf2a9e909353b3bddef4d951eb98e812c5", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -58,7 +58,11 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMRustCoverageCreatePGOFuncNameVar(llfn, mangled_fn_name.as_ptr()) }\n     }\n \n-    fn set_function_source_hash(&mut self, instance: Instance<'tcx>, function_source_hash: u64) -> bool {\n+    fn set_function_source_hash(\n+        &mut self,\n+        instance: Instance<'tcx>,\n+        function_source_hash: u64,\n+    ) -> bool {\n         if let Some(coverage_context) = self.coverage_context() {\n             debug!(\n                 \"ensuring function source hash is set for instance={:?}; function_source_hash={}\",\n@@ -69,6 +73,7 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .set_function_source_hash(function_source_hash);\n+            true\n         } else {\n             false\n         }\n@@ -92,6 +97,7 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .add_counter(function_source_hash, id, region);\n+            true\n         } else {\n             false\n         }\n@@ -105,8 +111,8 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         op: Op,\n         rhs: ExpressionOperandId,\n         region: Option<CodeRegion>,\n-    ) {\n-        if let Some(coverage_context) = self.coverage_context() -> bool {\n+    ) -> bool {\n+        if let Some(coverage_context) = self.coverage_context() {\n             debug!(\n                 \"adding counter expression to coverage_map: instance={:?}, id={:?}, {:?} {:?} {:?}; \\\n                 region: {:?}\",\n@@ -117,19 +123,24 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .add_counter_expression(id, lhs, op, rhs, region);\n+            true\n         } else {\n             false\n         }\n     }\n \n     fn add_coverage_unreachable(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool {\n         if let Some(coverage_context) = self.coverage_context() {\n-            debug!(\"adding unreachable code to coverage_map: instance={:?}, at {:?}\", instance, region,);\n+            debug!(\n+                \"adding unreachable code to coverage_map: instance={:?}, at {:?}\",\n+                instance, region,\n+            );\n             let mut coverage_map = coverage_context.function_coverage_map.borrow_mut();\n             coverage_map\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .add_unreachable_region(region);\n+            true\n         } else {\n             false\n         }"}, {"sha": "339e0d95fdffce55d927ffd1248b4e4555532df4", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -24,10 +24,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let fn_name = bx.create_pgo_func_name_var(self.instance);\n                     let hash = bx.const_u64(function_source_hash);\n                     let num_counters = bx.const_u32(coverageinfo.num_counters);\n-                    let id = bx.const_u32(u32::from(id));\n+                    let index = bx.const_u32(u32::from(id));\n                     debug!(\n                         \"codegen intrinsic instrprof.increment(fn_name={:?}, hash={:?}, num_counters={:?}, index={:?})\",\n-                        fn_name, hash, num_counters, id,\n+                        fn_name, hash, num_counters, index,\n                     );\n                     bx.instrprof_increment(fn_name, hash, num_counters, index);\n                 }"}, {"sha": "7da38880d603c295954dabb563e6a6169bd2cfa4", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -11,15 +11,19 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n \n     /// Returns true if the function source hash was added to the coverage map; false if\n     /// `-Z instrument-coverage` is not enabled (a coverage map is not being generated).\n-    fn set_function_source_hash(&mut self, instance: Instance<'tcx>, function_source_hash: u64) -> bool;\n+    fn set_function_source_hash(\n+        &mut self,\n+        instance: Instance<'tcx>,\n+        function_source_hash: u64,\n+    ) -> bool;\n \n     /// Returns true if the counter was added to the coverage map; false if `-Z instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n     fn add_coverage_counter(\n         &mut self,\n         instance: Instance<'tcx>,\n         function_source_hash: u64,\n-        id: CounterValueReference,\n+        index: CounterValueReference,\n         region: CodeRegion,\n     ) -> bool;\n \n@@ -33,7 +37,7 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n         op: Op,\n         rhs: ExpressionOperandId,\n         region: Option<CodeRegion>,\n-    );\n+    ) -> bool;\n \n     /// Returns true if the region was added to the coverage map; false if `-Z instrument-coverage`\n     /// is not enabled (a coverage map is not being generated)."}, {"sha": "a3ae30215248661e3c15d3c7dce8b5450e0acf06", "filename": "compiler/rustc_mir/src/transform/coverage/counters.rs", "status": "modified", "additions": 521, "deletions": 3, "changes": 524, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,7 +1,15 @@\n+use super::Error;\n+\n use super::debug;\n+use super::graph;\n+use super::spans;\n \n-use debug::DebugCounters;\n+use debug::{DebugCounters, NESTED_INDENT};\n+use graph::{BasicCoverageBlock, BcbBranch, CoverageGraph, TraverseCoverageGraphWithLoops};\n+use spans::CoverageSpan;\n \n+use rustc_data_structures::graph::WithNumNodes;\n+use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::coverage::*;\n \n /// Manages the counter and expression indexes/IDs to generate `CoverageKind` components for MIR\n@@ -29,7 +37,19 @@ impl CoverageCounters {\n         self.debug_counters.enable();\n     }\n \n-    pub fn make_counter<F>(&mut self, debug_block_label_fn: F) -> CoverageKind\n+    /// Makes `CoverageKind` `Counter`s and `Expressions` for the `BasicCoverageBlocks` directly or\n+    /// indirectly associated with `CoverageSpans`, and returns additional `Expression`s\n+    /// representing intermediate values.\n+    pub fn make_bcb_counters(\n+        &mut self,\n+        basic_coverage_blocks: &mut CoverageGraph,\n+        coverage_spans: &Vec<CoverageSpan>,\n+    ) -> Result<Vec<CoverageKind>, Error> {\n+        let mut bcb_counters = BcbCounters::new(self, basic_coverage_blocks);\n+        bcb_counters.make_bcb_counters(coverage_spans)\n+    }\n+\n+    fn make_counter<F>(&mut self, debug_block_label_fn: F) -> CoverageKind\n     where\n         F: Fn() -> Option<String>,\n     {\n@@ -43,7 +63,7 @@ impl CoverageCounters {\n         counter\n     }\n \n-    pub fn make_expression<F>(\n+    fn make_expression<F>(\n         &mut self,\n         lhs: ExpressionOperandId,\n         op: Op,\n@@ -61,6 +81,17 @@ impl CoverageCounters {\n         expression\n     }\n \n+    pub fn make_identity_counter(&mut self, counter_operand: ExpressionOperandId) -> CoverageKind {\n+        let some_debug_block_label = if self.debug_counters.is_enabled() {\n+            self.debug_counters.some_block_label(counter_operand).cloned()\n+        } else {\n+            None\n+        };\n+        self.make_expression(counter_operand, Op::Add, ExpressionOperandId::ZERO, || {\n+            some_debug_block_label.clone()\n+        })\n+    }\n+\n     /// Counter IDs start from one and go up.\n     fn next_counter(&mut self) -> CounterValueReference {\n         assert!(self.next_counter_id < u32::MAX - self.num_expressions);\n@@ -79,3 +110,490 @@ impl CoverageCounters {\n         InjectedExpressionId::from(next)\n     }\n }\n+\n+/// Traverse the `CoverageGraph` and add either a `Counter` or `Expression` to every BCB, to be\n+/// injected with `CoverageSpan`s. `Expressions` have no runtime overhead, so if a viable expression\n+/// (adding or subtracting two other counters or expressions) can compute the same result as an\n+/// embedded counter, an `Expression` should be used.\n+struct BcbCounters<'a> {\n+    coverage_counters: &'a mut CoverageCounters,\n+    basic_coverage_blocks: &'a mut CoverageGraph,\n+}\n+\n+impl<'a> BcbCounters<'a> {\n+    fn new(\n+        coverage_counters: &'a mut CoverageCounters,\n+        basic_coverage_blocks: &'a mut CoverageGraph,\n+    ) -> Self {\n+        Self { coverage_counters, basic_coverage_blocks }\n+    }\n+\n+    /// If two `CoverageGraph` branch from another `BasicCoverageBlock`, one of the branches\n+    /// can be counted by `Expression` by subtracting the other branch from the branching\n+    /// block. Otherwise, the `BasicCoverageBlock` executed the least should have the `Counter`.\n+    /// One way to predict which branch executes the least is by considering loops. A loop is exited\n+    /// at a branch, so the branch that jumps to a `BasicCoverageBlock` outside the loop is almost\n+    /// always executed less than the branch that does not exit the loop.\n+    ///\n+    /// Returns any non-code-span expressions created to represent intermediate values (such as to\n+    /// add two counters so the result can be subtracted from another counter), or an Error with\n+    /// message for subsequent debugging.\n+    fn make_bcb_counters(\n+        &mut self,\n+        coverage_spans: &Vec<CoverageSpan>,\n+    ) -> Result<Vec<CoverageKind>, Error> {\n+        debug!(\"make_bcb_counters(): adding a counter or expression to each BasicCoverageBlock\");\n+        let num_bcbs = self.basic_coverage_blocks.num_nodes();\n+        let mut collect_intermediate_expressions = Vec::with_capacity(num_bcbs);\n+\n+        let mut bcbs_with_coverage = BitSet::new_empty(num_bcbs);\n+        for covspan in coverage_spans {\n+            bcbs_with_coverage.insert(covspan.bcb);\n+        }\n+\n+        // FIXME(richkadel): Add more comments to explain the logic here and in the rest of this\n+        // function, and refactor this function to break it up into smaller functions that are\n+        // easier to understand.\n+\n+        let mut traversal = TraverseCoverageGraphWithLoops::new(&self.basic_coverage_blocks);\n+        while let Some(bcb) = traversal.next(self.basic_coverage_blocks) {\n+            if bcbs_with_coverage.contains(bcb) {\n+                debug!(\"{:?} has at least one `CoverageSpan`. Get or make its counter\", bcb);\n+                let branching_counter_operand =\n+                    self.get_or_make_counter_operand(bcb, &mut collect_intermediate_expressions)?;\n+\n+                if self.bcb_needs_branch_counters(bcb) {\n+                    self.make_branch_counters(\n+                        &mut traversal,\n+                        bcb,\n+                        branching_counter_operand,\n+                        &mut collect_intermediate_expressions,\n+                    )?;\n+                }\n+            } else {\n+                debug!(\n+                    \"{:?} does not have any `CoverageSpan`s. A counter will only be added if \\\n+                    and when a covered BCB has an expression dependency.\",\n+                    bcb,\n+                );\n+            }\n+        }\n+\n+        if traversal.is_complete() {\n+            Ok(collect_intermediate_expressions)\n+        } else {\n+            Error::from_string(format!(\n+                \"`TraverseCoverageGraphWithLoops` missed some `BasicCoverageBlock`s: {:?}\",\n+                traversal.unvisited(),\n+            ))\n+        }\n+    }\n+\n+    fn make_branch_counters(\n+        &mut self,\n+        traversal: &mut TraverseCoverageGraphWithLoops,\n+        branching_bcb: BasicCoverageBlock,\n+        branching_counter_operand: ExpressionOperandId,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<(), Error> {\n+        let branches = self.bcb_branches(branching_bcb);\n+        debug!(\n+            \"{:?} has some branch(es) without counters:\\n  {}\",\n+            branching_bcb,\n+            branches\n+                .iter()\n+                .map(|branch| {\n+                    format!(\"{:?}: {:?}\", branch, branch.counter(&self.basic_coverage_blocks))\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n  \"),\n+        );\n+\n+        let expression_branch = self.choose_preferred_expression_branch(traversal, &branches);\n+        // Assign a Counter or Expression to each branch, plus additional\n+        // `Expression`s, as needed, to sum up intermediate results.\n+        let mut some_sumup_counter_operand = None;\n+        for branch in branches {\n+            if branch != expression_branch {\n+                let branch_counter_operand = if branch.is_only_path_to_target() {\n+                    debug!(\n+                        \"  {:?} has only one incoming edge (from {:?}), so adding a \\\n+                        counter\",\n+                        branch, branching_bcb\n+                    );\n+                    self.get_or_make_counter_operand(\n+                        branch.target_bcb,\n+                        collect_intermediate_expressions,\n+                    )?\n+                } else {\n+                    debug!(\"  {:?} has multiple incoming edges, so adding an edge counter\", branch);\n+                    self.get_or_make_edge_counter_operand(\n+                        branching_bcb,\n+                        branch.target_bcb,\n+                        collect_intermediate_expressions,\n+                    )?\n+                };\n+                if let Some(sumup_counter_operand) =\n+                    some_sumup_counter_operand.replace(branch_counter_operand)\n+                {\n+                    let intermediate_expression = self.coverage_counters.make_expression(\n+                        branch_counter_operand,\n+                        Op::Add,\n+                        sumup_counter_operand,\n+                        || None,\n+                    );\n+                    debug!(\n+                        \"  [new intermediate expression: {}]\",\n+                        self.format_counter(&intermediate_expression)\n+                    );\n+                    let intermediate_expression_operand = intermediate_expression.as_operand_id();\n+                    collect_intermediate_expressions.push(intermediate_expression);\n+                    some_sumup_counter_operand.replace(intermediate_expression_operand);\n+                }\n+            }\n+        }\n+        let sumup_counter_operand =\n+            some_sumup_counter_operand.expect(\"sumup_counter_operand should have a value\");\n+        debug!(\n+            \"Making an expression for the selected expression_branch: {:?} \\\n+            (expression_branch predecessors: {:?})\",\n+            expression_branch,\n+            self.bcb_predecessors(expression_branch.target_bcb),\n+        );\n+        let expression = self.coverage_counters.make_expression(\n+            branching_counter_operand,\n+            Op::Subtract,\n+            sumup_counter_operand,\n+            || Some(format!(\"{:?}\", expression_branch)),\n+        );\n+        debug!(\"{:?} gets an expression: {}\", expression_branch, self.format_counter(&expression));\n+        let bcb = expression_branch.target_bcb;\n+        if expression_branch.is_only_path_to_target() {\n+            self.basic_coverage_blocks[bcb].set_counter(expression)?;\n+        } else {\n+            self.basic_coverage_blocks[bcb].set_edge_counter_from(branching_bcb, expression)?;\n+        }\n+        Ok(())\n+    }\n+\n+    fn get_or_make_counter_operand(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        self.recursive_get_or_make_counter_operand(bcb, collect_intermediate_expressions, 1)\n+    }\n+\n+    fn recursive_get_or_make_counter_operand(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+        debug_indent_level: usize,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        Ok({\n+            if let Some(counter_kind) = self.basic_coverage_blocks[bcb].counter() {\n+                debug!(\n+                    \"{}{:?} already has a counter: {}\",\n+                    NESTED_INDENT.repeat(debug_indent_level),\n+                    bcb,\n+                    self.format_counter(counter_kind),\n+                );\n+                counter_kind.as_operand_id()\n+            } else {\n+                let one_path_to_target = self.bcb_has_one_path_to_target(bcb);\n+                if one_path_to_target || self.bcb_predecessors(bcb).contains(&bcb) {\n+                    let counter_kind =\n+                        self.coverage_counters.make_counter(|| Some(format!(\"{:?}\", bcb)));\n+                    if one_path_to_target {\n+                        debug!(\n+                            \"{}{:?} gets a new counter: {}\",\n+                            NESTED_INDENT.repeat(debug_indent_level),\n+                            bcb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                    } else {\n+                        debug!(\n+                            \"{}{:?} has itself as its own predecessor. It can't be part of its own \\\n+                            Expression sum, so it will get its own new counter: {}. (Note, the \\\n+                            compiled code will generate an infinite loop.)\",\n+                            NESTED_INDENT.repeat(debug_indent_level),\n+                            bcb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                    }\n+                    self.basic_coverage_blocks[bcb].set_counter(counter_kind)?\n+                } else {\n+                    let mut predecessors = self.bcb_predecessors(bcb).clone().into_iter();\n+                    debug!(\n+                        \"{}{:?} has multiple incoming edges and will get an expression that sums \\\n+                        them up...\",\n+                        NESTED_INDENT.repeat(debug_indent_level),\n+                        bcb,\n+                    );\n+                    let first_edge_counter_operand = self\n+                        .recursive_get_or_make_edge_counter_operand(\n+                            predecessors.next().unwrap(),\n+                            bcb,\n+                            collect_intermediate_expressions,\n+                            debug_indent_level + 1,\n+                        )?;\n+                    let mut some_sumup_edge_counter_operand = None;\n+                    for predecessor in predecessors {\n+                        let edge_counter_operand = self\n+                            .recursive_get_or_make_edge_counter_operand(\n+                                predecessor,\n+                                bcb,\n+                                collect_intermediate_expressions,\n+                                debug_indent_level + 1,\n+                            )?;\n+                        if let Some(sumup_edge_counter_operand) =\n+                            some_sumup_edge_counter_operand.replace(edge_counter_operand)\n+                        {\n+                            let intermediate_expression = self.coverage_counters.make_expression(\n+                                sumup_edge_counter_operand,\n+                                Op::Add,\n+                                edge_counter_operand,\n+                                || None,\n+                            );\n+                            debug!(\n+                                \"{}new intermediate expression: {}\",\n+                                NESTED_INDENT.repeat(debug_indent_level),\n+                                self.format_counter(&intermediate_expression)\n+                            );\n+                            let intermediate_expression_operand =\n+                                intermediate_expression.as_operand_id();\n+                            collect_intermediate_expressions.push(intermediate_expression);\n+                            some_sumup_edge_counter_operand\n+                                .replace(intermediate_expression_operand);\n+                        }\n+                    }\n+                    let counter_kind = self.coverage_counters.make_expression(\n+                        first_edge_counter_operand,\n+                        Op::Add,\n+                        some_sumup_edge_counter_operand.unwrap(),\n+                        || Some(format!(\"{:?}\", bcb)),\n+                    );\n+                    debug!(\n+                        \"{}{:?} gets a new counter (sum of predecessor counters): {}\",\n+                        NESTED_INDENT.repeat(debug_indent_level),\n+                        bcb,\n+                        self.format_counter(&counter_kind)\n+                    );\n+                    self.basic_coverage_blocks[bcb].set_counter(counter_kind)?\n+                }\n+            }\n+        })\n+    }\n+\n+    fn get_or_make_edge_counter_operand(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        self.recursive_get_or_make_edge_counter_operand(\n+            from_bcb,\n+            to_bcb,\n+            collect_intermediate_expressions,\n+            1,\n+        )\n+    }\n+\n+    fn recursive_get_or_make_edge_counter_operand(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+        debug_indent_level: usize,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        Ok({\n+            let successors = self.bcb_successors(from_bcb).iter();\n+            if successors.len() > 1 {\n+                if let Some(counter_kind) =\n+                    self.basic_coverage_blocks[to_bcb].edge_counter_from(from_bcb)\n+                {\n+                    debug!(\n+                        \"{}Edge {:?}->{:?} already has a counter: {}\",\n+                        NESTED_INDENT.repeat(debug_indent_level),\n+                        from_bcb,\n+                        to_bcb,\n+                        self.format_counter(counter_kind)\n+                    );\n+                    counter_kind.as_operand_id()\n+                } else {\n+                    let counter_kind = self\n+                        .coverage_counters\n+                        .make_counter(|| Some(format!(\"{:?}->{:?}\", from_bcb, to_bcb)));\n+                    debug!(\n+                        \"{}Edge {:?}->{:?} gets a new counter: {}\",\n+                        NESTED_INDENT.repeat(debug_indent_level),\n+                        from_bcb,\n+                        to_bcb,\n+                        self.format_counter(&counter_kind)\n+                    );\n+                    self.basic_coverage_blocks[to_bcb]\n+                        .set_edge_counter_from(from_bcb, counter_kind)?\n+                }\n+            } else {\n+                self.recursive_get_or_make_counter_operand(\n+                    from_bcb,\n+                    collect_intermediate_expressions,\n+                    debug_indent_level + 1,\n+                )?\n+            }\n+        })\n+    }\n+\n+    /// Select a branch for the expression, either the recommended `reloop_branch`, or\n+    /// if none was found, select any branch.\n+    fn choose_preferred_expression_branch(\n+        &self,\n+        traversal: &TraverseCoverageGraphWithLoops,\n+        branches: &Vec<BcbBranch>,\n+    ) -> BcbBranch {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+\n+        let some_reloop_branch = self.find_some_reloop_branch(traversal, &branches);\n+        if let Some(reloop_branch_without_counter) =\n+            some_reloop_branch.filter(branch_needs_a_counter)\n+        {\n+            debug!(\n+                \"Selecting reloop_branch={:?} that still needs a counter, to get the \\\n+                `Expression`\",\n+                reloop_branch_without_counter\n+            );\n+            reloop_branch_without_counter\n+        } else {\n+            let &branch_without_counter = branches\n+                .iter()\n+                .find(|&&branch| branch.counter(&self.basic_coverage_blocks).is_none())\n+                .expect(\n+                    \"needs_branch_counters was `true` so there should be at least one \\\n+                    branch\",\n+                );\n+            debug!(\n+                \"Selecting any branch={:?} that still needs a counter, to get the \\\n+                `Expression` because there was no `reloop_branch`, or it already had a \\\n+                counter\",\n+                branch_without_counter\n+            );\n+            branch_without_counter\n+        }\n+    }\n+\n+    /// At most one of the branches (or its edge, from the branching_bcb,\n+    /// if the branch has multiple incoming edges) can have a counter computed by\n+    /// expression.\n+    ///\n+    /// If at least one of the branches leads outside of a loop (`found_loop_exit` is\n+    /// true), and at least one other branch does not exit the loop (the first of which\n+    /// is captured in `some_reloop_branch`), it's likely any reloop branch will be\n+    /// executed far more often than loop exit branch, making the reloop branch a better\n+    /// candidate for an expression.\n+    fn find_some_reloop_branch(\n+        &self,\n+        traversal: &TraverseCoverageGraphWithLoops,\n+        branches: &Vec<BcbBranch>,\n+    ) -> Option<BcbBranch> {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+\n+        let mut some_reloop_branch: Option<BcbBranch> = None;\n+        for context in traversal.context_stack.iter().rev() {\n+            if let Some((backedge_from_bcbs, _)) = &context.loop_backedges {\n+                let mut found_loop_exit = false;\n+                for &branch in branches.iter() {\n+                    if backedge_from_bcbs.iter().any(|&backedge_from_bcb| {\n+                        self.bcb_is_dominated_by(backedge_from_bcb, branch.target_bcb)\n+                    }) {\n+                        if let Some(reloop_branch) = some_reloop_branch {\n+                            if reloop_branch.counter(&self.basic_coverage_blocks).is_none() {\n+                                // we already found a candidate reloop_branch that still\n+                                // needs a counter\n+                                continue;\n+                            }\n+                        }\n+                        // The path from branch leads back to the top of the loop. Set this\n+                        // branch as the `reloop_branch`. If this branch already has a\n+                        // counter, and we find another reloop branch that doesn't have a\n+                        // counter yet, that branch will be selected as the `reloop_branch`\n+                        // instead.\n+                        some_reloop_branch = Some(branch);\n+                    } else {\n+                        // The path from branch leads outside this loop\n+                        found_loop_exit = true;\n+                    }\n+                    if found_loop_exit\n+                        && some_reloop_branch.filter(branch_needs_a_counter).is_some()\n+                    {\n+                        // Found both a branch that exits the loop and a branch that returns\n+                        // to the top of the loop (`reloop_branch`), and the `reloop_branch`\n+                        // doesn't already have a counter.\n+                        break;\n+                    }\n+                }\n+                if !found_loop_exit {\n+                    debug!(\n+                        \"No branches exit the loop, so any branch without an existing \\\n+                        counter can have the `Expression`.\"\n+                    );\n+                    break;\n+                }\n+                if some_reloop_branch.is_some() {\n+                    debug!(\n+                        \"Found a branch that exits the loop and a branch the loops back to \\\n+                        the top of the loop (`reloop_branch`). The `reloop_branch` will \\\n+                        get the `Expression`, as long as it still needs a counter.\"\n+                    );\n+                    break;\n+                }\n+                // else all branches exited this loop context, so run the same checks with\n+                // the outer loop(s)\n+            }\n+        }\n+        some_reloop_branch\n+    }\n+\n+    #[inline]\n+    fn bcb_predecessors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+        &self.basic_coverage_blocks.predecessors[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_successors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+        &self.basic_coverage_blocks.successors[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_branches(&self, from_bcb: BasicCoverageBlock) -> Vec<BcbBranch> {\n+        self.bcb_successors(from_bcb)\n+            .iter()\n+            .map(|&to_bcb| BcbBranch::from_to(from_bcb, to_bcb, &self.basic_coverage_blocks))\n+            .collect::<Vec<_>>()\n+    }\n+\n+    fn bcb_needs_branch_counters(&self, bcb: BasicCoverageBlock) -> bool {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+        let branches = self.bcb_branches(bcb);\n+        branches.len() > 1 && branches.iter().any(branch_needs_a_counter)\n+    }\n+\n+    /// Returns true if the BasicCoverageBlock has zero or one incoming edge. (If zero, it should be\n+    /// the entry point for the function.)\n+    #[inline]\n+    fn bcb_has_one_path_to_target(&self, bcb: BasicCoverageBlock) -> bool {\n+        self.bcb_predecessors(bcb).len() <= 1\n+    }\n+\n+    #[inline]\n+    fn bcb_is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n+        self.basic_coverage_blocks.is_dominated_by(node, dom)\n+    }\n+\n+    #[inline]\n+    fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n+        self.coverage_counters.debug_counters.format_counter(counter_kind)\n+    }\n+}"}, {"sha": "7080975aee5cec5e80748de79a98cb1b32ca8692", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 302, "deletions": 8, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -13,6 +13,8 @@ use rustc_middle::ty::TyCtxt;\n \n use std::lazy::SyncOnceCell;\n \n+pub const NESTED_INDENT: &str = \"    \";\n+\n const RUSTC_COVERAGE_DEBUG_OPTIONS: &str = \"RUSTC_COVERAGE_DEBUG_OPTIONS\";\n \n pub(crate) fn debug_options<'a>() -> &'a DebugOptions {\n@@ -24,20 +26,29 @@ pub(crate) fn debug_options<'a>() -> &'a DebugOptions {\n /// Parses and maintains coverage-specific debug options captured from the environment variable\n /// \"RUSTC_COVERAGE_DEBUG_OPTIONS\", if set. Options can be set on the command line by, for example:\n ///\n-///     $ RUSTC_COVERAGE_DEBUG_OPTIONS=counter-format=block cargo build\n+///     $ RUSTC_COVERAGE_DEBUG_OPTIONS=counter-format=block,allow_unused_expressions=n cargo build\n #[derive(Debug, Clone)]\n pub(crate) struct DebugOptions {\n+    pub allow_unused_expressions: bool,\n     counter_format: ExpressionFormat,\n }\n \n impl DebugOptions {\n     fn new() -> Self {\n+        let mut allow_unused_expressions = true;\n         let mut counter_format = ExpressionFormat::default();\n \n         if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n             for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(\",\") {\n                 let mut setting = setting_str.splitn(2, \"=\");\n                 match setting.next() {\n+                    Some(option) if option == \"allow_unused_expressions\" => {\n+                        allow_unused_expressions = bool_option_val(option, setting.next());\n+                        debug!(\n+                            \"{} env option `allow_unused_expressions` is set to {}\",\n+                            RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n+                        );\n+                    }\n                     Some(option) if option == \"counter_format\" => {\n                         if let Some(strval) = setting.next() {\n                             counter_format = counter_format_option_val(strval);\n@@ -66,7 +77,26 @@ impl DebugOptions {\n             }\n         }\n \n-        Self { counter_format }\n+        Self { allow_unused_expressions, counter_format }\n+    }\n+}\n+\n+fn bool_option_val(option: &str, some_strval: Option<&str>) -> bool {\n+    if let Some(val) = some_strval {\n+        if vec![\"yes\", \"y\", \"on\", \"true\"].contains(&val) {\n+            true\n+        } else if vec![\"no\", \"n\", \"off\", \"false\"].contains(&val) {\n+            false\n+        } else {\n+            bug!(\n+                \"Unsupported value `{}` for option `{}` in environment variable {}\",\n+                option,\n+                val,\n+                RUSTC_COVERAGE_DEBUG_OPTIONS\n+            )\n+        }\n+    } else {\n+        true\n     }\n }\n \n@@ -147,6 +177,14 @@ impl DebugCounters {\n         }\n     }\n \n+    pub fn some_block_label(&self, operand: ExpressionOperandId) -> Option<&String> {\n+        self.some_counters.as_ref().map_or(None, |counters| {\n+            counters\n+                .get(&operand)\n+                .map_or(None, |debug_counter| debug_counter.some_block_label.as_ref())\n+        })\n+    }\n+\n     pub fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n         match *counter_kind {\n             CoverageKind::Counter { .. } => {\n@@ -242,16 +280,22 @@ impl DebugCounter {\n pub(crate) struct GraphvizData {\n     some_bcb_to_coverage_spans_with_counters:\n         Option<FxHashMap<BasicCoverageBlock, Vec<(CoverageSpan, CoverageKind)>>>,\n+    some_bcb_to_dependency_counters: Option<FxHashMap<BasicCoverageBlock, Vec<CoverageKind>>>,\n     some_edge_to_counter: Option<FxHashMap<(BasicCoverageBlock, BasicBlock), CoverageKind>>,\n }\n \n impl GraphvizData {\n     pub fn new() -> Self {\n-        Self { some_bcb_to_coverage_spans_with_counters: None, some_edge_to_counter: None }\n+        Self {\n+            some_bcb_to_coverage_spans_with_counters: None,\n+            some_bcb_to_dependency_counters: None,\n+            some_edge_to_counter: None,\n+        }\n     }\n \n     pub fn enable(&mut self) {\n         self.some_bcb_to_coverage_spans_with_counters = Some(FxHashMap::default());\n+        self.some_bcb_to_dependency_counters = Some(FxHashMap::default());\n         self.some_edge_to_counter = Some(FxHashMap::default());\n     }\n \n@@ -287,6 +331,187 @@ impl GraphvizData {\n             None\n         }\n     }\n+\n+    pub fn add_bcb_dependency_counter(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        counter_kind: &CoverageKind,\n+    ) {\n+        if let Some(bcb_to_dependency_counters) = self.some_bcb_to_dependency_counters.as_mut() {\n+            bcb_to_dependency_counters\n+                .entry(bcb)\n+                .or_insert_with(|| Vec::new())\n+                .push(counter_kind.clone());\n+        }\n+    }\n+\n+    pub fn get_bcb_dependency_counters(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+    ) -> Option<&Vec<CoverageKind>> {\n+        if let Some(bcb_to_dependency_counters) = self.some_bcb_to_dependency_counters.as_ref() {\n+            bcb_to_dependency_counters.get(&bcb)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn set_edge_counter(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bb: BasicBlock,\n+        counter_kind: &CoverageKind,\n+    ) {\n+        if let Some(edge_to_counter) = self.some_edge_to_counter.as_mut() {\n+            edge_to_counter.insert((from_bcb, to_bb), counter_kind.clone()).expect_none(\n+                \"invalid attempt to insert more than one edge counter for the same edge\",\n+            );\n+        }\n+    }\n+\n+    pub fn get_edge_counter(\n+        &self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bb: BasicBlock,\n+    ) -> Option<&CoverageKind> {\n+        if let Some(edge_to_counter) = self.some_edge_to_counter.as_ref() {\n+            edge_to_counter.get(&(from_bcb, to_bb))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// If enabled, this struct captures additional data used to track whether expressions were used,\n+/// directly or indirectly, to compute the coverage counts for all `CoverageSpan`s, and any that are\n+/// _not_ used are retained in the `unused_expressions` Vec, to be included in debug output (logs\n+/// and/or a `CoverageGraph` graphviz output).\n+pub(crate) struct UsedExpressions {\n+    some_used_expression_operands:\n+        Option<FxHashMap<ExpressionOperandId, Vec<InjectedExpressionId>>>,\n+    some_unused_expressions:\n+        Option<Vec<(CoverageKind, Option<BasicCoverageBlock>, BasicCoverageBlock)>>,\n+}\n+\n+impl UsedExpressions {\n+    pub fn new() -> Self {\n+        Self { some_used_expression_operands: None, some_unused_expressions: None }\n+    }\n+\n+    pub fn enable(&mut self) {\n+        self.some_used_expression_operands = Some(FxHashMap::default());\n+        self.some_unused_expressions = Some(Vec::new());\n+    }\n+\n+    pub fn is_enabled(&mut self) -> bool {\n+        self.some_used_expression_operands.is_some()\n+    }\n+\n+    pub fn add_expression_operands(&mut self, expression: &CoverageKind) {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_mut() {\n+            if let CoverageKind::Expression { id, lhs, rhs, .. } = *expression {\n+                used_expression_operands.entry(lhs).or_insert_with(|| Vec::new()).push(id);\n+                used_expression_operands.entry(rhs).or_insert_with(|| Vec::new()).push(id);\n+            }\n+        }\n+    }\n+\n+    pub fn expression_is_used(&mut self, expression: &CoverageKind) -> bool {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_ref() {\n+            used_expression_operands.contains_key(&expression.as_operand_id())\n+        } else {\n+            false\n+        }\n+    }\n+\n+    pub fn add_unused_expression_if_not_found(\n+        &mut self,\n+        expression: &CoverageKind,\n+        edge_from_bcb: Option<BasicCoverageBlock>,\n+        target_bcb: BasicCoverageBlock,\n+    ) {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_ref() {\n+            if !used_expression_operands.contains_key(&expression.as_operand_id()) {\n+                self.some_unused_expressions.as_mut().unwrap().push((\n+                    expression.clone(),\n+                    edge_from_bcb,\n+                    target_bcb,\n+                ));\n+            }\n+        }\n+    }\n+\n+    /// Return the list of unused counters (if any) as a tuple with the counter (`CoverageKind`),\n+    /// optional `from_bcb` (if it was an edge counter), and `target_bcb`.\n+    pub fn get_unused_expressions(\n+        &self,\n+    ) -> Vec<(CoverageKind, Option<BasicCoverageBlock>, BasicCoverageBlock)> {\n+        if let Some(unused_expressions) = self.some_unused_expressions.as_ref() {\n+            unused_expressions.clone()\n+        } else {\n+            Vec::new()\n+        }\n+    }\n+\n+    /// If enabled, validate that every BCB or edge counter not directly associated with a coverage\n+    /// span is at least indirectly associated (it is a dependency of a BCB counter that _is_\n+    /// associated with a coverage span).\n+    pub fn validate(\n+        &mut self,\n+        bcb_counters_without_direct_coverage_spans: &Vec<(\n+            Option<BasicCoverageBlock>,\n+            BasicCoverageBlock,\n+            CoverageKind,\n+        )>,\n+    ) {\n+        if self.is_enabled() {\n+            let mut not_validated = bcb_counters_without_direct_coverage_spans\n+                .iter()\n+                .map(|(_, _, counter_kind)| counter_kind)\n+                .collect::<Vec<_>>();\n+            let mut validating_count = 0;\n+            while not_validated.len() != validating_count {\n+                let to_validate = not_validated.split_off(0);\n+                validating_count = to_validate.len();\n+                for counter_kind in to_validate {\n+                    if self.expression_is_used(counter_kind) {\n+                        self.add_expression_operands(counter_kind);\n+                    } else {\n+                        not_validated.push(counter_kind);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn alert_on_unused_expressions(&self, debug_counters: &DebugCounters) {\n+        if let Some(unused_expressions) = self.some_unused_expressions.as_ref() {\n+            for (counter_kind, edge_from_bcb, target_bcb) in unused_expressions {\n+                let unused_counter_message = if let Some(from_bcb) = edge_from_bcb.as_ref() {\n+                    format!(\n+                        \"non-coverage edge counter found without a dependent expression, in \\\n+                        {:?}->{:?}; counter={}\",\n+                        from_bcb,\n+                        target_bcb,\n+                        debug_counters.format_counter(&counter_kind),\n+                    )\n+                } else {\n+                    format!(\n+                        \"non-coverage counter found without a dependent expression, in {:?}; \\\n+                        counter={}\",\n+                        target_bcb,\n+                        debug_counters.format_counter(&counter_kind),\n+                    )\n+                };\n+\n+                if debug_options().allow_unused_expressions {\n+                    debug!(\"WARNING: {}\", unused_counter_message);\n+                } else {\n+                    bug!(\"{}\", unused_counter_message);\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Generates the MIR pass `CoverageSpan`-specific spanview dump file.\n@@ -337,6 +562,8 @@ pub(crate) fn dump_coverage_graphviz(\n     basic_coverage_blocks: &CoverageGraph,\n     debug_counters: &DebugCounters,\n     graphviz_data: &GraphvizData,\n+    intermediate_expressions: &Vec<CoverageKind>,\n+    debug_used_expressions: &UsedExpressions,\n ) {\n     let mir_source = mir_body.source;\n     let def_id = mir_source.def_id();\n@@ -347,21 +574,62 @@ pub(crate) fn dump_coverage_graphviz(\n             debug_counters,\n             &basic_coverage_blocks[bcb],\n             graphviz_data.get_bcb_coverage_spans_with_counters(bcb),\n+            graphviz_data.get_bcb_dependency_counters(bcb),\n+            // intermediate_expressions are injected into the mir::START_BLOCK, so\n+            // include them in the first BCB.\n+            if bcb.index() == 0 { Some(&intermediate_expressions) } else { None },\n         )\n     };\n     let edge_labels = |from_bcb| {\n         let from_bcb_data = &basic_coverage_blocks[from_bcb];\n         let from_terminator = from_bcb_data.terminator(mir_body);\n-        from_terminator\n-            .kind\n-            .fmt_successor_labels()\n+        let mut edge_labels = from_terminator.kind.fmt_successor_labels();\n+        edge_labels.retain(|label| label.to_string() != \"unreachable\");\n+        let edge_counters = from_terminator\n+            .successors()\n+            .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n+        edge_labels\n             .iter()\n-            .map(|label| label.to_string())\n+            .zip(edge_counters)\n+            .map(|(label, some_counter)| {\n+                if let Some(counter) = some_counter {\n+                    format!(\"{}\\n{}\", label, debug_counters.format_counter(counter))\n+                } else {\n+                    label.to_string()\n+                }\n+            })\n             .collect::<Vec<_>>()\n     };\n     let graphviz_name = format!(\"Cov_{}_{}\", def_id.krate.index(), def_id.index.index());\n-    let graphviz_writer =\n+    let mut graphviz_writer =\n         GraphvizWriter::new(basic_coverage_blocks, &graphviz_name, node_content, edge_labels);\n+    let unused_expressions = debug_used_expressions.get_unused_expressions();\n+    if unused_expressions.len() > 0 {\n+        graphviz_writer.set_graph_label(&format!(\n+            \"Unused expressions:\\n  {}\",\n+            unused_expressions\n+                .as_slice()\n+                .iter()\n+                .map(|(counter_kind, edge_from_bcb, target_bcb)| {\n+                    if let Some(from_bcb) = edge_from_bcb.as_ref() {\n+                        format!(\n+                            \"{:?}->{:?}: {}\",\n+                            from_bcb,\n+                            target_bcb,\n+                            debug_counters.format_counter(&counter_kind),\n+                        )\n+                    } else {\n+                        format!(\n+                            \"{:?}: {}\",\n+                            target_bcb,\n+                            debug_counters.format_counter(&counter_kind),\n+                        )\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n  \")\n+        ));\n+    }\n     let mut file = pretty::create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n         .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n     graphviz_writer\n@@ -375,9 +643,22 @@ fn bcb_to_string_sections(\n     debug_counters: &DebugCounters,\n     bcb_data: &BasicCoverageBlockData,\n     some_coverage_spans_with_counters: Option<&Vec<(CoverageSpan, CoverageKind)>>,\n+    some_dependency_counters: Option<&Vec<CoverageKind>>,\n+    some_intermediate_expressions: Option<&Vec<CoverageKind>>,\n ) -> Vec<String> {\n     let len = bcb_data.basic_blocks.len();\n     let mut sections = Vec::new();\n+    if let Some(collect_intermediate_expressions) = some_intermediate_expressions {\n+        sections.push(\n+            collect_intermediate_expressions\n+                .iter()\n+                .map(|expression| {\n+                    format!(\"Intermediate {}\", debug_counters.format_counter(expression))\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\"),\n+        );\n+    }\n     if let Some(coverage_spans_with_counters) = some_coverage_spans_with_counters {\n         sections.push(\n             coverage_spans_with_counters\n@@ -393,6 +674,19 @@ fn bcb_to_string_sections(\n                 .join(\"\\n\"),\n         );\n     }\n+    if let Some(dependency_counters) = some_dependency_counters {\n+        sections.push(format!(\n+            \"Non-coverage counters:\\n  {}\",\n+            dependency_counters\n+                .iter()\n+                .map(|counter| debug_counters.format_counter(counter))\n+                .collect::<Vec<_>>()\n+                .join(\"  \\n\"),\n+        ));\n+    }\n+    if let Some(counter_kind) = &bcb_data.counter_kind {\n+        sections.push(format!(\"{:?}\", counter_kind));\n+    }\n     let non_term_blocks = bcb_data.basic_blocks[0..len - 1]\n         .iter()\n         .map(|&bb| format!(\"{:?}: {}\", bb, term_type(&mir_body[bb].terminator().kind)))"}, {"sha": "8406254170196a712d19eba7cf0308c0477bb070", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 319, "deletions": 2, "changes": 321, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,7 +1,11 @@\n+use super::Error;\n+\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::dominators::{self, Dominators};\n-use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes};\n+use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes, WithStartNode};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n \n use std::ops::{Index, IndexMut};\n@@ -183,6 +187,13 @@ impl CoverageGraph {\n         self.bcbs.iter_enumerated()\n     }\n \n+    #[inline(always)]\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl Iterator<Item = (BasicCoverageBlock, &mut BasicCoverageBlockData)> {\n+        self.bcbs.iter_enumerated_mut()\n+    }\n+\n     #[inline(always)]\n     pub fn bcb_from_bb(&self, bb: BasicBlock) -> Option<BasicCoverageBlock> {\n         if bb.index() < self.bb_to_bcb.len() { self.bb_to_bcb[bb] } else { None }\n@@ -293,12 +304,14 @@ rustc_index::newtype_index! {\n #[derive(Debug, Clone)]\n pub(crate) struct BasicCoverageBlockData {\n     pub basic_blocks: Vec<BasicBlock>,\n+    pub counter_kind: Option<CoverageKind>,\n+    edge_from_bcbs: Option<FxHashMap<BasicCoverageBlock, CoverageKind>>,\n }\n \n impl BasicCoverageBlockData {\n     pub fn from(basic_blocks: Vec<BasicBlock>) -> Self {\n         assert!(basic_blocks.len() > 0);\n-        Self { basic_blocks }\n+        Self { basic_blocks, counter_kind: None, edge_from_bcbs: None }\n     }\n \n     #[inline(always)]\n@@ -316,6 +329,91 @@ impl BasicCoverageBlockData {\n         &mir_body[self.last_bb()].terminator()\n     }\n \n+    #[inline(always)]\n+    pub fn set_counter(\n+        &mut self,\n+        counter_kind: CoverageKind,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        debug_assert!(\n+            // If the BCB has an edge counter (to be injected into a new `BasicBlock`), it can also\n+            // have an expression (to be injected into an existing `BasicBlock` represented by this\n+            // `BasicCoverageBlock`).\n+            self.edge_from_bcbs.is_none() || counter_kind.is_expression(),\n+            \"attempt to add a `Counter` to a BCB target with existing incoming edge counters\"\n+        );\n+        let operand = counter_kind.as_operand_id();\n+        let expect_none = self.counter_kind.replace(counter_kind);\n+        if expect_none.is_some() {\n+            return Error::from_string(format!(\n+                \"attempt to set a BasicCoverageBlock coverage counter more than once; \\\n+                {:?} already had counter {:?}\",\n+                self,\n+                expect_none.unwrap(),\n+            ));\n+        }\n+        Ok(operand)\n+    }\n+\n+    #[inline(always)]\n+    pub fn counter(&self) -> Option<&CoverageKind> {\n+        self.counter_kind.as_ref()\n+    }\n+\n+    #[inline(always)]\n+    pub fn take_counter(&mut self) -> Option<CoverageKind> {\n+        self.counter_kind.take()\n+    }\n+\n+    #[inline(always)]\n+    pub fn set_edge_counter_from(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        counter_kind: CoverageKind,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        if level_enabled!(tracing::Level::DEBUG) {\n+            // If the BCB has an edge counter (to be injected into a new `BasicBlock`), it can also\n+            // have an expression (to be injected into an existing `BasicBlock` represented by this\n+            // `BasicCoverageBlock`).\n+            if !self.counter_kind.as_ref().map_or(true, |c| c.is_expression()) {\n+                return Error::from_string(format!(\n+                    \"attempt to add an incoming edge counter from {:?} when the target BCB already \\\n+                    has a `Counter`\",\n+                    from_bcb\n+                ));\n+            }\n+        }\n+        let operand = counter_kind.as_operand_id();\n+        let expect_none = self\n+            .edge_from_bcbs\n+            .get_or_insert_with(|| FxHashMap::default())\n+            .insert(from_bcb, counter_kind);\n+        if expect_none.is_some() {\n+            return Error::from_string(format!(\n+                \"attempt to set an edge counter more than once; from_bcb: \\\n+                {:?} already had counter {:?}\",\n+                from_bcb,\n+                expect_none.unwrap(),\n+            ));\n+        }\n+        Ok(operand)\n+    }\n+\n+    #[inline(always)]\n+    pub fn edge_counter_from(&self, from_bcb: BasicCoverageBlock) -> Option<&CoverageKind> {\n+        if let Some(edge_from_bcbs) = &self.edge_from_bcbs {\n+            edge_from_bcbs.get(&from_bcb)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn take_edge_counters(\n+        &mut self,\n+    ) -> Option<impl Iterator<Item = (BasicCoverageBlock, CoverageKind)>> {\n+        self.edge_from_bcbs.take().map_or(None, |m| Some(m.into_iter()))\n+    }\n+\n     pub fn id(&self) -> String {\n         format!(\n             \"@{}\",\n@@ -328,6 +426,56 @@ impl BasicCoverageBlockData {\n     }\n }\n \n+/// Represents a successor from a branching BasicCoverageBlock (such as the arms of a `SwitchInt`)\n+/// as either the successor BCB itself, if it has only one incoming edge, or the successor _plus_\n+/// the specific branching BCB, representing the edge between the two. The latter case\n+/// distinguishes this incoming edge from other incoming edges to the same `target_bcb`.\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub(crate) struct BcbBranch {\n+    pub edge_from_bcb: Option<BasicCoverageBlock>,\n+    pub target_bcb: BasicCoverageBlock,\n+}\n+\n+impl BcbBranch {\n+    pub fn from_to(\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        basic_coverage_blocks: &CoverageGraph,\n+    ) -> Self {\n+        let edge_from_bcb = if basic_coverage_blocks.predecessors[to_bcb].len() > 1 {\n+            Some(from_bcb)\n+        } else {\n+            None\n+        };\n+        Self { edge_from_bcb, target_bcb: to_bcb }\n+    }\n+\n+    pub fn counter<'a>(\n+        &self,\n+        basic_coverage_blocks: &'a CoverageGraph,\n+    ) -> Option<&'a CoverageKind> {\n+        if let Some(from_bcb) = self.edge_from_bcb {\n+            basic_coverage_blocks[self.target_bcb].edge_counter_from(from_bcb)\n+        } else {\n+            basic_coverage_blocks[self.target_bcb].counter()\n+        }\n+    }\n+\n+    pub fn is_only_path_to_target(&self) -> bool {\n+        self.edge_from_bcb.is_none()\n+    }\n+}\n+\n+impl std::fmt::Debug for BcbBranch {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        if let Some(from_bcb) = self.edge_from_bcb {\n+            write!(fmt, \"{:?}->{:?}\", from_bcb, self.target_bcb)\n+        } else {\n+            write!(fmt, \"{:?}\", self.target_bcb)\n+        }\n+    }\n+}\n+\n fn bcb_filtered_successors<'a, 'tcx>(\n     body: &'tcx &'a mir::Body<'tcx>,\n     term_kind: &'tcx TerminatorKind<'tcx>,\n@@ -344,6 +492,175 @@ fn bcb_filtered_successors<'a, 'tcx>(\n     .filter(move |&&successor| body[successor].terminator().kind != TerminatorKind::Unreachable)\n }\n \n+/// Maintains separate worklists for each loop in the BasicCoverageBlock CFG, plus one for the\n+/// CoverageGraph outside all loops. This supports traversing the BCB CFG in a way that\n+/// ensures a loop is completely traversed before processing Blocks after the end of the loop.\n+#[derive(Debug)]\n+pub(crate) struct TraversalContext {\n+    /// From one or more backedges returning to a loop header.\n+    pub loop_backedges: Option<(Vec<BasicCoverageBlock>, BasicCoverageBlock)>,\n+\n+    /// worklist, to be traversed, of CoverageGraph in the loop with the given loop\n+    /// backedges, such that the loop is the inner inner-most loop containing these\n+    /// CoverageGraph\n+    pub worklist: Vec<BasicCoverageBlock>,\n+}\n+\n+pub(crate) struct TraverseCoverageGraphWithLoops {\n+    pub backedges: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    pub context_stack: Vec<TraversalContext>,\n+    visited: BitSet<BasicCoverageBlock>,\n+}\n+\n+impl TraverseCoverageGraphWithLoops {\n+    pub fn new(basic_coverage_blocks: &CoverageGraph) -> Self {\n+        let start_bcb = basic_coverage_blocks.start_node();\n+        let backedges = find_loop_backedges(basic_coverage_blocks);\n+        let mut context_stack = Vec::new();\n+        context_stack.push(TraversalContext { loop_backedges: None, worklist: vec![start_bcb] });\n+        // `context_stack` starts with a `TraversalContext` for the main function context (beginning\n+        // with the `start` BasicCoverageBlock of the function). New worklists are pushed to the top\n+        // of the stack as loops are entered, and popped off of the stack when a loop's worklist is\n+        // exhausted.\n+        let visited = BitSet::new_empty(basic_coverage_blocks.num_nodes());\n+        Self { backedges, context_stack, visited }\n+    }\n+\n+    pub fn next(&mut self, basic_coverage_blocks: &CoverageGraph) -> Option<BasicCoverageBlock> {\n+        debug!(\n+            \"TraverseCoverageGraphWithLoops::next - context_stack: {:?}\",\n+            self.context_stack.iter().rev().collect::<Vec<_>>()\n+        );\n+        while let Some(next_bcb) = {\n+            // Strip contexts with empty worklists from the top of the stack\n+            while self.context_stack.last().map_or(false, |context| context.worklist.is_empty()) {\n+                self.context_stack.pop();\n+            }\n+            // Pop the next bcb off of the current context_stack. If none, all BCBs were visited.\n+            self.context_stack.last_mut().map_or(None, |context| context.worklist.pop())\n+        } {\n+            if !self.visited.insert(next_bcb) {\n+                debug!(\"Already visited: {:?}\", next_bcb);\n+                continue;\n+            }\n+            debug!(\"Visiting {:?}\", next_bcb);\n+            if self.backedges[next_bcb].len() > 0 {\n+                debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n+                self.context_stack.push(TraversalContext {\n+                    loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n+                    worklist: Vec::new(),\n+                });\n+            }\n+            self.extend_worklist(basic_coverage_blocks, next_bcb);\n+            return Some(next_bcb);\n+        }\n+        None\n+    }\n+\n+    pub fn extend_worklist(\n+        &mut self,\n+        basic_coverage_blocks: &CoverageGraph,\n+        bcb: BasicCoverageBlock,\n+    ) {\n+        let successors = &basic_coverage_blocks.successors[bcb];\n+        debug!(\"{:?} has {} successors:\", bcb, successors.len());\n+        for &successor in successors {\n+            if successor == bcb {\n+                debug!(\n+                    \"{:?} has itself as its own successor. (Note, the compiled code will \\\n+                    generate an infinite loop.)\",\n+                    bcb\n+                );\n+                // Don't re-add this successor to the worklist. We are already processing it.\n+                break;\n+            }\n+            for context in self.context_stack.iter_mut().rev() {\n+                // Add successors of the current BCB to the appropriate context. Successors that\n+                // stay within a loop are added to the BCBs context worklist. Successors that\n+                // exit the loop (they are not dominated by the loop header) must be reachable\n+                // from other BCBs outside the loop, and they will be added to a different\n+                // worklist.\n+                //\n+                // Branching blocks (with more than one successor) must be processed before\n+                // blocks with only one successor, to prevent unnecessarily complicating\n+                // `Expression`s by creating a Counter in a `BasicCoverageBlock` that the\n+                // branching block would have given an `Expression` (or vice versa).\n+                let (some_successor_to_add, some_loop_header) =\n+                    if let Some((_, loop_header)) = context.loop_backedges {\n+                        if basic_coverage_blocks.is_dominated_by(successor, loop_header) {\n+                            (Some(successor), Some(loop_header))\n+                        } else {\n+                            (None, None)\n+                        }\n+                    } else {\n+                        (Some(successor), None)\n+                    };\n+                if let Some(successor_to_add) = some_successor_to_add {\n+                    if basic_coverage_blocks.successors[successor_to_add].len() > 1 {\n+                        debug!(\n+                            \"{:?} successor is branching. Prioritize it at the beginning of \\\n+                            the {}\",\n+                            successor_to_add,\n+                            if let Some(loop_header) = some_loop_header {\n+                                format!(\"worklist for the loop headed by {:?}\", loop_header)\n+                            } else {\n+                                String::from(\"non-loop worklist\")\n+                            },\n+                        );\n+                        context.worklist.insert(0, successor_to_add);\n+                    } else {\n+                        debug!(\n+                            \"{:?} successor is non-branching. Defer it to the end of the {}\",\n+                            successor_to_add,\n+                            if let Some(loop_header) = some_loop_header {\n+                                format!(\"worklist for the loop headed by {:?}\", loop_header)\n+                            } else {\n+                                String::from(\"non-loop worklist\")\n+                            },\n+                        );\n+                        context.worklist.push(successor_to_add);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn is_complete(&self) -> bool {\n+        self.visited.count() == self.visited.domain_size()\n+    }\n+\n+    pub fn unvisited(&self) -> Vec<BasicCoverageBlock> {\n+        let mut unvisited_set: BitSet<BasicCoverageBlock> =\n+            BitSet::new_filled(self.visited.domain_size());\n+        unvisited_set.subtract(&self.visited);\n+        unvisited_set.iter().collect::<Vec<_>>()\n+    }\n+}\n+\n+fn find_loop_backedges(\n+    basic_coverage_blocks: &CoverageGraph,\n+) -> IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>> {\n+    let num_bcbs = basic_coverage_blocks.num_nodes();\n+    let mut backedges = IndexVec::from_elem_n(Vec::<BasicCoverageBlock>::new(), num_bcbs);\n+\n+    // Identify loops by their backedges\n+    for (bcb, _) in basic_coverage_blocks.iter_enumerated() {\n+        for &successor in &basic_coverage_blocks.successors[bcb] {\n+            if basic_coverage_blocks.is_dominated_by(bcb, successor) {\n+                let loop_header = successor;\n+                let backedge_from_bcb = bcb;\n+                debug!(\n+                    \"Found BCB backedge: {:?} -> loop_header: {:?}\",\n+                    backedge_from_bcb, loop_header\n+                );\n+                backedges[loop_header].push(backedge_from_bcb);\n+            }\n+        }\n+    }\n+    backedges\n+}\n+\n pub struct ShortCircuitPreorder<\n     'a,\n     'tcx,"}, {"sha": "c84ccf19213b826c71c7fc4af9a80732cb046de5", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 289, "deletions": 34, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -6,7 +6,7 @@ mod graph;\n mod spans;\n \n use counters::CoverageCounters;\n-use graph::CoverageGraph;\n+use graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use spans::{CoverageSpan, CoverageSpans};\n \n use crate::transform::MirPass;\n@@ -21,11 +21,26 @@ use rustc_middle::hir;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::{self, BasicBlock, Coverage, Statement, StatementKind};\n+use rustc_middle::mir::{\n+    self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n+};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n use rustc_span::{CharPos, Pos, SourceFile, Span, Symbol};\n \n+/// A simple error message wrapper for `coverage::Error`s.\n+#[derive(Debug)]\n+pub(crate) struct Error {\n+    message: String,\n+}\n+\n+impl Error {\n+    pub fn from_string<T>(message: String) -> Result<T, Error> {\n+        Err(Self { message })\n+    }\n+}\n+\n /// Inserts `StatementKind::Coverage` statements that either instrument the binary with injected\n /// counters, via intrinsic `llvm.instrprof.increment`, and/or inject metadata used during codegen\n /// to construct the coverage map.\n@@ -104,13 +119,18 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n \n         let mut graphviz_data = debug::GraphvizData::new();\n+        let mut debug_used_expressions = debug::UsedExpressions::new();\n \n         let dump_graphviz = tcx.sess.opts.debugging_opts.dump_mir_graphviz;\n         if dump_graphviz {\n             graphviz_data.enable();\n             self.coverage_counters.enable_debug();\n         }\n \n+        if dump_graphviz || level_enabled!(tracing::Level::DEBUG) {\n+            debug_used_expressions.enable();\n+        }\n+\n         ////////////////////////////////////////////////////\n         // Compute `CoverageSpan`s from the `CoverageGraph`.\n         let coverage_spans = CoverageSpans::generate_coverage_spans(\n@@ -129,7 +149,53 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n             );\n         }\n \n-        self.inject_coverage_span_counters(coverage_spans, &mut graphviz_data);\n+        ////////////////////////////////////////////////////\n+        // Create an optimized mix of `Counter`s and `Expression`s for the `CoverageGraph`. Ensure\n+        // every `CoverageSpan` has a `Counter` or `Expression` assigned to its `BasicCoverageBlock`\n+        // and all `Expression` dependencies (operands) are also generated, for any other\n+        // `BasicCoverageBlock`s not already associated with a `CoverageSpan`.\n+        //\n+        // Intermediate expressions (used to compute other `Expression` values), which have no\n+        // direct associate to any `BasicCoverageBlock`, are returned in the method `Result`.\n+        let intermediate_expressions_or_error = self\n+            .coverage_counters\n+            .make_bcb_counters(&mut self.basic_coverage_blocks, &coverage_spans);\n+\n+        let (result, intermediate_expressions) = match intermediate_expressions_or_error {\n+            Ok(intermediate_expressions) => {\n+                // If debugging, add any intermediate expressions (which are not associated with any\n+                // BCB) to the `debug_used_expressions` map.\n+                if debug_used_expressions.is_enabled() {\n+                    for intermediate_expression in &intermediate_expressions {\n+                        debug_used_expressions.add_expression_operands(intermediate_expression);\n+                    }\n+                }\n+\n+                ////////////////////////////////////////////////////\n+                // Remove the counter or edge counter from of each `CoverageSpan`s associated\n+                // `BasicCoverageBlock`, and inject a `Coverage` statement into the MIR.\n+                self.inject_coverage_span_counters(\n+                    coverage_spans,\n+                    &mut graphviz_data,\n+                    &mut debug_used_expressions,\n+                );\n+\n+                ////////////////////////////////////////////////////\n+                // For any remaining `BasicCoverageBlock` counters (that were not associated with\n+                // any `CoverageSpan`), inject `Coverage` statements (_without_ code region `Span`s)\n+                // to ensure `BasicCoverageBlock` counters that other `Expression`s may depend on\n+                // are in fact counted, even though they don't directly contribute to counting\n+                // their own independent code region's coverage.\n+                self.inject_indirect_counters(&mut graphviz_data, &mut debug_used_expressions);\n+\n+                // Intermediate expressions will be injected as the final step, after generating\n+                // debug output, if any.\n+                ////////////////////////////////////////////////////\n+\n+                (Ok(()), intermediate_expressions)\n+            }\n+            Err(e) => (Err(e), Vec::new()),\n+        };\n \n         if graphviz_data.is_enabled() {\n             // Even if there was an error, a partial CoverageGraph can still generate a useful\n@@ -141,19 +207,40 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                 &self.basic_coverage_blocks,\n                 &self.coverage_counters.debug_counters,\n                 &graphviz_data,\n+                &intermediate_expressions,\n+                &debug_used_expressions,\n             );\n         }\n+\n+        if let Err(e) = result {\n+            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e)\n+        };\n+\n+        // Depending on current `debug_options()`, `alert_on_unused_expressions()` could panic, so\n+        // this check is performed as late as possible, to allow other debug output (logs and dump\n+        // files), which might be helpful in analyzing unused expressions, to still be generated.\n+        debug_used_expressions.alert_on_unused_expressions(&self.coverage_counters.debug_counters);\n+\n+        ////////////////////////////////////////////////////\n+        // Finally, inject the intermediate expressions collected along the way.\n+        for intermediate_expression in intermediate_expressions {\n+            inject_intermediate_expression(self.mir_body, intermediate_expression);\n+        }\n     }\n \n     /// Inject a counter for each `CoverageSpan`. There can be multiple `CoverageSpan`s for a given\n-    /// BCB, but only one actual counter needs to be incremented per BCB. `bcb_counters` maps each\n+    /// BCB, but only one actual counter needs to be incremented per BCB. `bb_counters` maps each\n     /// `bcb` to its `Counter`, when injected. Subsequent `CoverageSpan`s for a BCB that already has\n     /// a `Counter` will inject an `Expression` instead, and compute its value by adding `ZERO` to\n     /// the BCB `Counter` value.\n+    ///\n+    /// If debugging, add every BCB `Expression` associated with a `CoverageSpan`s to the\n+    /// `used_expression_operands` map.\n     fn inject_coverage_span_counters(\n         &mut self,\n         coverage_spans: Vec<CoverageSpan>,\n         graphviz_data: &mut debug::GraphvizData,\n+        debug_used_expressions: &mut debug::UsedExpressions,\n     ) {\n         let tcx = self.tcx;\n         let source_map = tcx.sess.source_map();\n@@ -165,40 +252,194 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         for covspan in coverage_spans {\n             let bcb = covspan.bcb;\n             let span = covspan.span;\n-            if let Some(&counter_operand) = bcb_counters[bcb].as_ref() {\n-                let expression = self.coverage_counters.make_expression(\n-                    counter_operand,\n-                    Op::Add,\n-                    ExpressionOperandId::ZERO,\n-                    || Some(format!(\"{:?}\", bcb)),\n-                );\n-                debug!(\n-                    \"Injecting counter expression {:?} at: {:?}:\\n{}\\n==========\",\n-                    expression,\n-                    span,\n-                    source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n-                );\n-                graphviz_data.add_bcb_coverage_span_with_counter(bcb, &covspan, &expression);\n-                let bb = self.basic_coverage_blocks[bcb].leader_bb();\n-                let code_region = make_code_region(file_name, &source_file, span, body_span);\n-                inject_statement(self.mir_body, expression, bb, Some(code_region));\n+            let counter_kind = if let Some(&counter_operand) = bcb_counters[bcb].as_ref() {\n+                self.coverage_counters.make_identity_counter(counter_operand)\n+            } else if let Some(counter_kind) = self.bcb_data_mut(bcb).take_counter() {\n+                bcb_counters[bcb] = Some(counter_kind.as_operand_id());\n+                debug_used_expressions.add_expression_operands(&counter_kind);\n+                counter_kind\n             } else {\n-                let counter = self.coverage_counters.make_counter(|| Some(format!(\"{:?}\", bcb)));\n-                debug!(\n-                    \"Injecting counter {:?} at: {:?}:\\n{}\\n==========\",\n-                    counter,\n-                    span,\n-                    source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n-                );\n-                let counter_operand = counter.as_operand_id();\n-                bcb_counters[bcb] = Some(counter_operand);\n-                graphviz_data.add_bcb_coverage_span_with_counter(bcb, &covspan, &counter);\n-                let bb = self.basic_coverage_blocks[bcb].leader_bb();\n-                let code_region = make_code_region(file_name, &source_file, span, body_span);\n-                inject_statement(self.mir_body, counter, bb, Some(code_region));\n+                bug!(\"Every BasicCoverageBlock should have a Counter or Expression\");\n+            };\n+            graphviz_data.add_bcb_coverage_span_with_counter(bcb, &covspan, &counter_kind);\n+            let some_code_region = if self.is_code_region_redundant(bcb, span, body_span) {\n+                None\n+            } else {\n+                Some(make_code_region(file_name, &source_file, span, body_span))\n+            };\n+            inject_statement(self.mir_body, counter_kind, self.bcb_last_bb(bcb), some_code_region);\n+        }\n+    }\n+\n+    /// Returns true if the type of `BasicCoverageBlock` (specifically, it's `BasicBlock`s\n+    /// `TerminatorKind`) with the given `Span` (relative to the `body_span`) is known to produce\n+    /// a redundant coverage count.\n+    ///\n+    /// There is at least one case for this, and if it's not handled, the last line in a function\n+    /// will be double-counted.\n+    ///\n+    /// If this method returns `true`, the counter (which other `Expressions` may depend on) is\n+    /// still injected, but without an associated code region.\n+    fn is_code_region_redundant(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+        span: Span,\n+        body_span: Span,\n+    ) -> bool {\n+        if span.hi() == body_span.hi() {\n+            // All functions execute a `Return`-terminated `BasicBlock`, regardless of how the\n+            // function returns; but only some functions also _can_ return after a `Goto` block\n+            // that ends on the closing brace of the function (with the `Return`). When this\n+            // happens, the last character is counted 2 (or possibly more) times, when we know\n+            // the function returned only once (of course). By giving all `Goto` terminators at\n+            // the end of a function a `non-reportable` code region, they are still counted\n+            // if appropriate, but they don't increment the line counter, as long as their is\n+            // also a `Return` on that last line.\n+            if let TerminatorKind::Goto { .. } = self.bcb_terminator(bcb).kind {\n+                return true;\n             }\n         }\n+        false\n     }\n+\n+    /// `inject_coverage_span_counters()` looped through the `CoverageSpan`s and injected the\n+    /// counter from the `CoverageSpan`s `BasicCoverageBlock`, removing it from the BCB in the\n+    /// process (via `take_counter()`).\n+    ///\n+    /// Any other counter associated with a `BasicCoverageBlock`, or its incoming edge, but not\n+    /// associated with a `CoverageSpan`, should only exist if the counter is a `Expression`\n+    /// dependency (one of the expression operands). Collect them, and inject the additional\n+    /// counters into the MIR, without a reportable coverage span.\n+    fn inject_indirect_counters(\n+        &mut self,\n+        graphviz_data: &mut debug::GraphvizData,\n+        debug_used_expressions: &mut debug::UsedExpressions,\n+    ) {\n+        let mut bcb_counters_without_direct_coverage_spans = Vec::new();\n+        for (target_bcb, target_bcb_data) in self.basic_coverage_blocks.iter_enumerated_mut() {\n+            if let Some(counter_kind) = target_bcb_data.take_counter() {\n+                bcb_counters_without_direct_coverage_spans.push((None, target_bcb, counter_kind));\n+            }\n+            if let Some(edge_counters) = target_bcb_data.take_edge_counters() {\n+                for (from_bcb, counter_kind) in edge_counters {\n+                    bcb_counters_without_direct_coverage_spans.push((\n+                        Some(from_bcb),\n+                        target_bcb,\n+                        counter_kind,\n+                    ));\n+                }\n+            }\n+        }\n+\n+        // If debug is enabled, validate that every BCB or edge counter not directly associated\n+        // with a coverage span is at least indirectly associated (it is a dependency of a BCB\n+        // counter that _is_ associated with a coverage span).\n+        debug_used_expressions.validate(&bcb_counters_without_direct_coverage_spans);\n+\n+        for (edge_from_bcb, target_bcb, counter_kind) in bcb_counters_without_direct_coverage_spans\n+        {\n+            debug_used_expressions.add_unused_expression_if_not_found(\n+                &counter_kind,\n+                edge_from_bcb,\n+                target_bcb,\n+            );\n+\n+            match counter_kind {\n+                CoverageKind::Counter { .. } => {\n+                    let inject_to_bb = if let Some(from_bcb) = edge_from_bcb {\n+                        // The MIR edge starts `from_bb` (the outgoing / last BasicBlock in\n+                        // `from_bcb`) and ends at `to_bb` (the incoming / first BasicBlock in the\n+                        // `target_bcb`; also called the `leader_bb`).\n+                        let from_bb = self.bcb_last_bb(from_bcb);\n+                        let to_bb = self.bcb_leader_bb(target_bcb);\n+\n+                        let new_bb = inject_edge_counter_basic_block(self.mir_body, from_bb, to_bb);\n+                        graphviz_data.set_edge_counter(from_bcb, new_bb, &counter_kind);\n+                        debug!(\n+                            \"Edge {:?} (last {:?}) -> {:?} (leader {:?}) requires a new MIR \\\n+                            BasicBlock {:?}, for unclaimed edge counter {}\",\n+                            edge_from_bcb,\n+                            from_bb,\n+                            target_bcb,\n+                            to_bb,\n+                            new_bb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                        new_bb\n+                    } else {\n+                        let target_bb = self.bcb_last_bb(target_bcb);\n+                        graphviz_data.add_bcb_dependency_counter(target_bcb, &counter_kind);\n+                        debug!(\n+                            \"{:?} ({:?}) gets a new Coverage statement for unclaimed counter {}\",\n+                            target_bcb,\n+                            target_bb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                        target_bb\n+                    };\n+\n+                    inject_statement(self.mir_body, counter_kind, inject_to_bb, None);\n+                }\n+                CoverageKind::Expression { .. } => {\n+                    inject_intermediate_expression(self.mir_body, counter_kind)\n+                }\n+                _ => bug!(\"CoverageKind should be a counter\"),\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn bcb_leader_bb(&self, bcb: BasicCoverageBlock) -> BasicBlock {\n+        self.bcb_data(bcb).leader_bb()\n+    }\n+\n+    #[inline]\n+    fn bcb_last_bb(&self, bcb: BasicCoverageBlock) -> BasicBlock {\n+        self.bcb_data(bcb).last_bb()\n+    }\n+\n+    #[inline]\n+    fn bcb_terminator(&self, bcb: BasicCoverageBlock) -> &Terminator<'tcx> {\n+        self.bcb_data(bcb).terminator(self.mir_body)\n+    }\n+\n+    #[inline]\n+    fn bcb_data(&self, bcb: BasicCoverageBlock) -> &BasicCoverageBlockData {\n+        &self.basic_coverage_blocks[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_data_mut(&mut self, bcb: BasicCoverageBlock) -> &mut BasicCoverageBlockData {\n+        &mut self.basic_coverage_blocks[bcb]\n+    }\n+\n+    #[inline]\n+    fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n+        self.coverage_counters.debug_counters.format_counter(counter_kind)\n+    }\n+}\n+\n+fn inject_edge_counter_basic_block(\n+    mir_body: &mut mir::Body<'tcx>,\n+    from_bb: BasicBlock,\n+    to_bb: BasicBlock,\n+) -> BasicBlock {\n+    let span = mir_body[from_bb].terminator().source_info.span.shrink_to_hi();\n+    let new_bb = mir_body.basic_blocks_mut().push(BasicBlockData {\n+        statements: vec![], // counter will be injected here\n+        terminator: Some(Terminator {\n+            source_info: SourceInfo::outermost(span),\n+            kind: TerminatorKind::Goto { target: to_bb },\n+        }),\n+        is_cleanup: false,\n+    });\n+    let edge_ref = mir_body[from_bb]\n+        .terminator_mut()\n+        .successors_mut()\n+        .find(|successor| **successor == to_bb)\n+        .expect(\"from_bb should have a successor for to_bb\");\n+    *edge_ref = new_bb;\n+    new_bb\n }\n \n fn inject_statement(\n@@ -223,6 +464,20 @@ fn inject_statement(\n     data.statements.push(statement);\n }\n \n+// Non-code expressions are injected into the coverage map, without generating executable code.\n+fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n+    debug_assert!(if let CoverageKind::Expression { .. } = expression { true } else { false });\n+    debug!(\"  injecting non-code expression {:?}\", expression);\n+    let inject_in_bb = mir::START_BLOCK;\n+    let data = &mut mir_body[inject_in_bb];\n+    let source_info = data.terminator().source_info;\n+    let statement = Statement {\n+        source_info,\n+        kind: StatementKind::Coverage(box Coverage { kind: expression, code_region: None }),\n+    };\n+    data.statements.push(statement);\n+}\n+\n /// Convert the Span into its file name, start line and column, and end line and column\n fn make_code_region(\n     file_name: Symbol,"}, {"sha": "efc06bdea57a6e00f40bccdcdcd9ec888c716ce2", "filename": "src/test/mir-opt/coverage_graphviz.bar.InstrumentCoverage.0.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,5 +2,5 @@ digraph Cov_0_4 {\n     graph [fontname=\"Courier, monospace\"];\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n-    bcb0__Cov_0_4 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 19:5-20:2<br/>    19:5-19:9: @0[0]: _0 = const true<br/>    20:2-20:2: @0.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb0: Return</td></tr></table>>];\n+    bcb0__Cov_0_4 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 19:5-20:2<br/>    19:5-19:9: @0[0]: _0 = const true<br/>    20:2-20:2: @0.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb0: Return</td></tr></table>>];\n }"}, {"sha": "5ddd112fe62e6ec270ff72051c32ce80ada26fcf", "filename": "src/test/mir-opt/coverage_graphviz.main.InstrumentCoverage.0.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,9 +2,9 @@ digraph Cov_0_3 {\n     graph [fontname=\"Courier, monospace\"];\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n-    bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb2) at 14:6-14:6<br/>    14:6-14:6: @4.Goto: goto -&gt; bb0</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n+    bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 - bcb1) at 14:6-14:6<br/>    14:6-14:6: @4.Goto: goto -&gt; bb0</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n     bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb1) at 12:13-12:18<br/>    12:13-12:18: @5[0]: _0 = const ()<br/>Expression(bcb1 + 0) at 15:2-15:2<br/>    15:2-15:2: @5.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb3: FalseEdge</td></tr><tr><td align=\"left\" balign=\"left\">bb5: Return</td></tr></table>>];\n-    bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 11:12-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb6]<br/>    11:12-11:17: @2[0]: FakeRead(ForMatchedPlace, _2)</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n+    bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 11:12-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb6]<br/>    11:12-11:17: @2[0]: FakeRead(ForMatchedPlace, _2)</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n     bcb2__Cov_0_3 -> bcb0__Cov_0_3 [label=<>];\n     bcb0__Cov_0_3 -> bcb2__Cov_0_3 [label=<false>];\n     bcb0__Cov_0_3 -> bcb1__Cov_0_3 [label=<otherwise>];"}, {"sha": "c67d0e2ffe656f5d3e0b0ae84e3f00c633217305", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -8,7 +8,6 @@\n       let mut _3: !;                       // in scope 0 at /the/src/instrument_coverage.rs:12:18: 14:10\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:12:12 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n@@ -22,25 +21,26 @@\n   \n       bb2: {\n           FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:12:12 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb3: {\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n-+         Coverage::Expression(4294967295) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb4: {\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n-+         Coverage::Counter(3) for /the/src/instrument_coverage.rs:15:6 - 15:7; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n++         Coverage::Expression(4294967295) = 1 - 2 for /the/src/instrument_coverage.rs:15:6 - 15:7; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb5: {\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n++         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }\n   "}, {"sha": "bd2e2d56d4a5593fbceedbad7d6cd36fc9cea6b6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.drop_trait.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.drop_trait.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.drop_trait.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.drop_trait.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,8 +21,8 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 6,\n-              \"covered\": 6,\n+              \"count\": 5,\n+              \"covered\": 5,\n               \"notcovered\": 0,\n               \"percent\": 100\n             }\n@@ -46,8 +46,8 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 6,\n-          \"covered\": 6,\n+          \"count\": 5,\n+          \"covered\": 5,\n           \"notcovered\": 0,\n           \"percent\": 100\n         }"}, {"sha": "a50f4657e20aa284bde020249222daadb006548c", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.generics.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.generics.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.generics.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.generics.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,8 +21,8 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 7,\n-              \"covered\": 7,\n+              \"count\": 6,\n+              \"covered\": 6,\n               \"notcovered\": 0,\n               \"percent\": 100\n             }\n@@ -46,8 +46,8 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 7,\n-          \"covered\": 7,\n+          \"count\": 6,\n+          \"covered\": 6,\n           \"notcovered\": 0,\n           \"percent\": 100\n         }"}, {"sha": "36f81ceae19bf396747ccd828cb20b857424b458", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.if_else.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if_else.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if_else.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if_else.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 29,\n-              \"covered\": 21,\n-              \"percent\": 72.41379310344827\n+              \"count\": 28,\n+              \"covered\": 19,\n+              \"percent\": 67.85714285714286\n             },\n             \"regions\": {\n-              \"count\": 9,\n-              \"covered\": 7,\n+              \"count\": 7,\n+              \"covered\": 5,\n               \"notcovered\": 2,\n-              \"percent\": 77.77777777777779\n+              \"percent\": 71.42857142857143\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 29,\n-          \"covered\": 21,\n-          \"percent\": 72.41379310344827\n+          \"count\": 28,\n+          \"covered\": 19,\n+          \"percent\": 67.85714285714286\n         },\n         \"regions\": {\n-          \"count\": 9,\n-          \"covered\": 7,\n+          \"count\": 7,\n+          \"covered\": 5,\n           \"notcovered\": 2,\n-          \"percent\": 77.77777777777779\n+          \"percent\": 71.42857142857143\n         }\n       }\n     }"}, {"sha": "929e769b50a98dd066a4ab70bfa6e86986776d4e", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 94.73684210526315\n             },\n             \"regions\": {\n-              \"count\": 18,\n-              \"covered\": 15,\n+              \"count\": 17,\n+              \"covered\": 14,\n               \"notcovered\": 3,\n-              \"percent\": 83.33333333333334\n+              \"percent\": 82.35294117647058\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 94.73684210526315\n         },\n         \"regions\": {\n-          \"count\": 18,\n-          \"covered\": 15,\n+          \"count\": 17,\n+          \"covered\": 14,\n           \"notcovered\": 3,\n-          \"percent\": 83.33333333333334\n+          \"percent\": 82.35294117647058\n         }\n       }\n     }"}, {"sha": "d93458b6143729b215ed94976de67bd502dc4935", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.various_conditions.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.various_conditions.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.various_conditions.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.various_conditions.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 46.93877551020408\n             },\n             \"regions\": {\n-              \"count\": 70,\n-              \"covered\": 19,\n+              \"count\": 69,\n+              \"covered\": 18,\n               \"notcovered\": 51,\n-              \"percent\": 27.142857142857142\n+              \"percent\": 26.08695652173913\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 46.93877551020408\n         },\n         \"regions\": {\n-          \"count\": 70,\n-          \"covered\": 19,\n+          \"count\": 69,\n+          \"covered\": 18,\n           \"notcovered\": 51,\n-          \"percent\": 27.142857142857142\n+          \"percent\": 26.08695652173913\n         }\n       }\n     }"}, {"sha": "a9e01604ccd5bb3203675524e3278b2191172c36", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while_early_return.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_return.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n-              \"count\": 10,\n-              \"covered\": 8,\n+              \"count\": 9,\n+              \"covered\": 7,\n               \"notcovered\": 2,\n-              \"percent\": 80\n+              \"percent\": 77.77777777777779\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n-          \"count\": 10,\n-          \"covered\": 8,\n+          \"count\": 9,\n+          \"covered\": 7,\n           \"notcovered\": 2,\n-          \"percent\": 80\n+          \"percent\": 77.77777777777779\n         }\n       }\n     }"}, {"sha": "72aa020ca1691a1941397341855bd334e486c97c", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.drop_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.drop_trait.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -24,7 +24,7 @@\n    24|       |    let _ = Firework { strength: 1000 };\n    25|       |\n    26|       |    Ok(())\n-   27|      2|}\n+   27|      1|}\n    28|       |\n    29|       |// Expected program output:\n    30|       |//   Exiting with error..."}, {"sha": "86199d7476302c92f3a65fd5c36f84b2ce044226", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.generics.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.generics.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -57,7 +57,7 @@\n    35|       |    let _ = Firework { strength: 1000 };\n    36|       |\n    37|       |    Ok(())\n-   38|      2|}\n+   38|      1|}\n    39|       |\n    40|       |// Expected program output:\n    41|       |//   Exiting with error..."}, {"sha": "5f899723e255467c407a637ee65789bda31058b2", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.if_else.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if_else.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -20,7 +20,7 @@\n    20|      0|        countdown\n    21|      0|        =\n    22|      0|            100\n-   23|      1|    }\n+   23|       |    }\n    24|       |\n    25|       |    if\n    26|      1|        is_true\n@@ -36,6 +36,6 @@\n    36|      0|        =\n    37|      0|            100\n    38|      0|        ;\n-   39|      1|    }\n+   39|      0|    }\n    40|      1|}\n "}, {"sha": "94c63c9a2b9060b1ecbebccc6d64e97edb3d52cc", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -33,5 +33,5 @@\n    32|      5|        }\n    33|      5|    }\n    34|      0|    Ok(())\n-   35|      2|}\n+   35|      1|}\n "}, {"sha": "173ff4aa4c48154b7c32ca11ed922d6887b0caeb", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.various_conditions.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.various_conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.various_conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.various_conditions.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -65,5 +65,5 @@\n    64|       |    } else {\n    65|      0|        return;\n    66|       |    };\n-   67|      2|}\n+   67|      1|}\n "}, {"sha": "26041136d2f4c460ac4a12f540857e5b2b6dade6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.while_early_return.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_return.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -33,7 +33,7 @@\n    33|       |        ;\n    34|       |    }\n    35|      0|    Ok(())\n-   36|      2|}\n+   36|      1|}\n    37|       |\n    38|       |// ISSUE(77553): Originally, this test had `Err(1)` on line 22 (instead of `Ok(())`) and\n    39|       |// `std::process::exit(2)` on line 26 (instead of `Err(1)`); and this worked as expected on Linux"}, {"sha": "ef43bbd78a6b55a3048ecded5403148ce01b8c59", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.closure.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,8 +2,8 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 20:21 -> 20:38, #1\n Counter in file 0 21:20 -> 21:28, (#1 + 0)\n Counter in file 0 21:29 -> 23:18, #2\n-Counter in file 0 23:18 -> 23:19, #3\n-Counter in file 0 24:17 -> 25:14, #4\n+Counter in file 0 23:18 -> 23:19, (#1 - #2)\n+Counter in file 0 24:17 -> 25:14, (#2 + (#1 - #2))\n Counter in file 0 3:11 -> 18:13, #1\n Counter in file 0 25:14 -> 33:9, (#1 + 0)\n Counter in file 0 40:6 -> 60:13, (#1 + 0)\n@@ -12,18 +12,18 @@ Counter in file 0 82:6 -> 93:2, (#1 + 0)\n Counter in file 0 77:13 -> 77:30, #1\n Counter in file 0 78:12 -> 78:20, (#1 + 0)\n Counter in file 0 78:21 -> 80:10, #2\n-Counter in file 0 80:10 -> 80:11, #3\n-Counter in file 0 81:9 -> 82:6, #4\n+Counter in file 0 80:10 -> 80:11, (#1 - #2)\n+Counter in file 0 81:9 -> 82:6, (#2 + (#1 - #2))\n Counter in file 0 62:21 -> 62:38, #1\n Counter in file 0 63:20 -> 63:28, (#1 + 0)\n Counter in file 0 63:29 -> 65:18, #2\n-Counter in file 0 65:18 -> 65:19, #3\n-Counter in file 0 66:17 -> 67:14, #4\n+Counter in file 0 65:18 -> 65:19, (#1 - #2)\n+Counter in file 0 66:17 -> 67:14, (#2 + (#1 - #2))\n Counter in file 0 35:13 -> 35:30, #1\n Counter in file 0 36:12 -> 36:20, (#1 + 0)\n Counter in file 0 36:21 -> 38:10, #2\n-Counter in file 0 38:10 -> 38:11, #3\n-Counter in file 0 39:9 -> 40:6, #4\n+Counter in file 0 38:10 -> 38:11, (#1 - #2)\n+Counter in file 0 39:9 -> 40:6, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/closure.rs\n Combined regions:\n   3:11 -> 18:13 (count=1)"}, {"sha": "9716284f525218d9db7e63423526a4caf0f7ddae", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.drop_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -3,7 +3,7 @@ Counter in file 0 9:24 -> 11:6, #1\n Counter in file 0 15:9 -> 17:42, #1\n Counter in file 0 19:8 -> 19:12, (#1 + 0)\n Counter in file 0 20:9 -> 21:22, #2\n-Counter in file 0 27:1 -> 27:2, #4\n+Counter in file 0 27:1 -> 27:2, (#2 + 0)\n Emitting segments for file: ../coverage/drop_trait.rs\n Combined regions:\n   9:24 -> 11:6 (count=2)"}, {"sha": "5fbfe69b891c0388749fd4396a2131882490f96c", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.generics.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -4,7 +4,7 @@ Counter in file 0 17:24 -> 19:6, #1\n Counter in file 0 23:9 -> 28:28, #1\n Counter in file 0 30:8 -> 30:12, (#1 + 0)\n Counter in file 0 31:9 -> 32:22, #2\n-Counter in file 0 38:1 -> 38:2, #4\n+Counter in file 0 38:1 -> 38:2, (#2 + 0)\n Counter in file 0 10:49 -> 12:6, #1\n Counter in file 0 10:49 -> 12:6, #1\n Emitting segments for file: ../coverage/generics.rs"}, {"sha": "48c9278a239179ce4ab9f0e41d7875ebb19faca3", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.if.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,8 +2,8 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 8:5 -> 18:10, #1\n Counter in file 0 21:9 -> 21:16, (#1 + 0)\n Counter in file 0 22:5 -> 27:6, #2\n-Counter in file 0 27:6 -> 27:7, #3\n-Counter in file 0 28:1 -> 28:2, #4\n+Counter in file 0 27:6 -> 27:7, (#1 - #2)\n+Counter in file 0 28:1 -> 28:2, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/if.rs\n Combined regions:\n   8:5 -> 18:10 (count=1)"}, {"sha": "1adf92300bfbd8c57b697a85d61bada466fbd6db", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.if_else.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,11 +1,11 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/if_else.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/if_else \n Counter in file 0 7:9 -> 11:16, #1\n Counter in file 0 12:5 -> 17:6, #2\n-Counter in file 0 20:9 -> 22:16, #3\n-Counter in file 0 26:9 -> 26:16, #4\n-Counter in file 0 27:5 -> 32:6, #5\n-Counter in file 0 34:5 -> 39:6, #6\n-Counter in file 0 40:1 -> 40:2, #7\n+Counter in file 0 20:9 -> 22:16, (#1 - #2)\n+Counter in file 0 26:9 -> 26:16, (#2 + (#1 - #2))\n+Counter in file 0 27:5 -> 32:6, #3\n+Counter in file 0 34:5 -> 39:6, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 40:1 -> 40:2, (#3 + ((#2 + (#1 - #2)) - #3))\n Emitting segments for file: ../coverage/if_else.rs\n Combined regions:\n   7:9 -> 11:16 (count=1)"}, {"sha": "0678be30dc341ddfdf46f22bba8821c4bac922b6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.inner_items.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -6,11 +6,11 @@ Counter in file 0 21:9 -> 22:6, (#2 + 0)\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 12:6, #2\n-Counter in file 0 12:6 -> 12:7, #3\n-Counter in file 0 48:8 -> 48:15, #4\n-Counter in file 0 48:16 -> 50:6, #5\n-Counter in file 0 50:6 -> 50:7, #6\n-Counter in file 0 52:9 -> 57:2, #7\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 48:8 -> 48:15, (#2 + (#1 - #2))\n+Counter in file 0 48:16 -> 50:6, #3\n+Counter in file 0 50:6 -> 50:7, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 52:9 -> 57:2, (#3 + ((#2 + (#1 - #2)) - #3))\n Counter in file 0 33:42 -> 36:10, #1\n Counter in file 0 41:37 -> 41:41, #1\n Counter in file 0 42:13 -> 43:10, #2"}, {"sha": "e955fcd8ba05e721c221b0e6a8c2324315b24d97", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.lazy_boolean.txt", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,40 +2,40 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:42, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 14:6, #2\n-Counter in file 0 14:6 -> 14:7, #3\n-Counter in file 0 16:9 -> 16:17, #4\n-Counter in file 0 18:13 -> 18:18, #5\n-Counter in file 0 20:13 -> 20:18, #6\n-Counter in file 0 20:18 -> 20:19, #7\n-Counter in file 0 20:18 -> 20:19, #8\n-Counter in file 0 23:9 -> 23:17, #9\n-Counter in file 0 25:13 -> 25:18, (#4 + 0)\n-Counter in file 0 27:13 -> 27:18, #10\n-Counter in file 0 27:18 -> 27:19, #11\n-Counter in file 0 27:18 -> 27:19, #12\n-Counter in file 0 29:9 -> 29:17, #13\n-Counter in file 0 29:20 -> 29:25, (#9 + 0)\n-Counter in file 0 29:29 -> 29:34, #14\n-Counter in file 0 29:34 -> 29:35, #15\n-Counter in file 0 29:34 -> 29:35, #16\n-Counter in file 0 30:9 -> 30:17, #17\n-Counter in file 0 30:20 -> 30:25, (#13 + 0)\n-Counter in file 0 30:29 -> 30:34, #18\n-Counter in file 0 30:34 -> 30:35, #19\n-Counter in file 0 30:34 -> 30:35, #20\n-Counter in file 0 33:9 -> 34:16, (#17 + 0)\n-Counter in file 0 35:5 -> 38:6, #21\n-Counter in file 0 38:6 -> 38:7, #22\n-Counter in file 0 41:9 -> 41:16, #23\n-Counter in file 0 42:5 -> 45:6, #24\n-Counter in file 0 47:5 -> 50:6, #25\n-Counter in file 0 52:8 -> 52:16, #26\n-Counter in file 0 52:17 -> 54:6, #27\n-Counter in file 0 54:6 -> 54:7, #28\n-Counter in file 0 56:8 -> 56:15, #29\n-Counter in file 0 56:16 -> 58:6, #30\n-Counter in file 0 58:12 -> 60:6, #31\n-Counter in file 0 61:1 -> 61:2, #32\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 16:9 -> 16:17, ((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4))\n+Counter in file 0 18:13 -> 18:18, (#2 + (#1 - #2))\n+Counter in file 0 20:13 -> 20:18, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 20:18 -> 20:19, (#3 + #4)\n+Counter in file 0 20:18 -> 20:19, (((#2 + (#1 - #2)) - #3) - #4)\n+Counter in file 0 23:9 -> 23:17, ((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6))\n+Counter in file 0 25:13 -> 25:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) + 0)\n+Counter in file 0 27:13 -> 27:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5)\n+Counter in file 0 27:18 -> 27:19, (#5 + #6)\n+Counter in file 0 27:18 -> 27:19, ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)\n+Counter in file 0 29:9 -> 29:17, ((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8))\n+Counter in file 0 29:20 -> 29:25, (((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) + 0)\n+Counter in file 0 29:29 -> 29:34, #7\n+Counter in file 0 29:34 -> 29:35, ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)\n+Counter in file 0 29:34 -> 29:35, (#7 - #8)\n+Counter in file 0 30:9 -> 30:17, ((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10))\n+Counter in file 0 30:20 -> 30:25, (((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) + 0)\n+Counter in file 0 30:29 -> 30:34, #9\n+Counter in file 0 30:34 -> 30:35, ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)\n+Counter in file 0 30:34 -> 30:35, (#9 - #10)\n+Counter in file 0 33:9 -> 34:16, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) + 0)\n+Counter in file 0 35:5 -> 38:6, #11\n+Counter in file 0 38:6 -> 38:7, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)\n+Counter in file 0 41:9 -> 41:16, (#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11))\n+Counter in file 0 42:5 -> 45:6, #12\n+Counter in file 0 47:5 -> 50:6, ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)\n+Counter in file 0 52:8 -> 52:16, (#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12))\n+Counter in file 0 52:17 -> 54:6, #13\n+Counter in file 0 54:6 -> 54:7, ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)\n+Counter in file 0 56:8 -> 56:15, (#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13))\n+Counter in file 0 56:16 -> 58:6, #14\n+Counter in file 0 58:12 -> 60:6, ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14)\n+Counter in file 0 61:1 -> 61:2, (#14 + ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14))\n Emitting segments for file: ../coverage/lazy_boolean.rs\n Combined regions:\n   7:9 -> 9:42 (count=1)"}, {"sha": "171b77c9cc74951517cbad4f5d5284ae085791fd", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.loops_and_branches.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_and_branches.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,12 +1,12 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/loops_and_branches.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/loops_and_branches \n Counter in file 0 10:12 -> 10:16, #1\n Counter in file 0 11:16 -> 11:21, #2\n-Counter in file 0 14:14 -> 14:15, #6\n-Counter in file 0 15:13 -> 15:31, #7\n-Counter in file 0 15:31 -> 15:32, #8\n-Counter in file 0 17:10 -> 17:11, #10\n-Counter in file 0 18:9 -> 18:15, #11\n-Counter in file 0 19:5 -> 19:6, #12\n+Counter in file 0 14:14 -> 14:15, (#2 - #5)\n+Counter in file 0 15:13 -> 15:31, (0 + (#2 - #5))\n+Counter in file 0 15:31 -> 15:32, #4\n+Counter in file 0 17:10 -> 17:11, #3\n+Counter in file 0 18:9 -> 18:15, (#3 + 0)\n+Counter in file 0 19:5 -> 19:6, (#4 + (#3 + 0))\n Counter in file 0 22:11 -> 25:2, #1\n Emitting segments for file: ../coverage/loops_and_branches.rs\n Combined regions:"}, {"sha": "ac376c4f36a40cdd9698e8bfa783c0451eb38423", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.nested_loops.txt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,22 +1,22 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/nested_loops.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/nested_loops \n Counter in file 0 2:9 -> 3:27, #1\n-Counter in file 0 5:19 -> 5:32, #2\n-Counter in file 0 6:13 -> 7:24, #3\n-Counter in file 0 8:13 -> 8:14, #4\n-Counter in file 0 8:18 -> 8:23, #5\n-Counter in file 0 9:16 -> 9:22, (#4 + 0)\n-Counter in file 0 10:17 -> 10:22, #6\n-Counter in file 0 12:13 -> 12:19, #7\n-Counter in file 0 13:13 -> 13:19, #8\n-Counter in file 0 14:16 -> 14:22, (#8 + 0)\n-Counter in file 0 15:17 -> 16:27, #9\n-Counter in file 0 17:21 -> 17:33, #10\n-Counter in file 0 19:21 -> 21:14, #11\n-Counter in file 0 21:14 -> 21:15, #12\n-Counter in file 0 22:10 -> 22:11, #13\n-Counter in file 0 23:9 -> 23:23, #14\n-Counter in file 0 24:6 -> 24:7, #15\n-Counter in file 0 25:1 -> 25:2, #16\n+Counter in file 0 5:19 -> 5:32, (#1 + #2)\n+Counter in file 0 6:13 -> 7:24, ((#1 + #2) - #3)\n+Counter in file 0 8:13 -> 8:14, ((((#1 + #2) - #3) + (#5 + #6)) - #7)\n+Counter in file 0 8:18 -> 8:23, (((#1 + #2) - #3) + (#5 + #6))\n+Counter in file 0 9:16 -> 9:22, (((((#1 + #2) - #3) + (#5 + #6)) - #7) + 0)\n+Counter in file 0 10:17 -> 10:22, #8\n+Counter in file 0 12:13 -> 12:19, #9\n+Counter in file 0 13:13 -> 13:19, #10\n+Counter in file 0 14:16 -> 14:22, (#10 + 0)\n+Counter in file 0 15:17 -> 16:27, #11\n+Counter in file 0 17:21 -> 17:33, #4\n+Counter in file 0 19:21 -> 21:14, #5\n+Counter in file 0 21:14 -> 21:15, #6\n+Counter in file 0 22:10 -> 22:11, (#5 + #6)\n+Counter in file 0 23:9 -> 23:23, #2\n+Counter in file 0 24:6 -> 24:7, #3\n+Counter in file 0 25:1 -> 25:2, (#4 + #3)\n Emitting segments for file: ../coverage/nested_loops.rs\n Combined regions:\n   2:9 -> 3:27 (count=1)"}, {"sha": "148768f423ba0f5370d7ee27ec07cfdb6bd20de6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.simple_loop.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,12 +2,12 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 12:9 -> 12:16, (#1 + 0)\n Counter in file 0 13:5 -> 18:6, #2\n-Counter in file 0 18:6 -> 18:7, #3\n-Counter in file 0 23:13 -> 25:14, #4\n-Counter in file 0 27:13 -> 27:18, #5\n-Counter in file 0 30:9 -> 32:10, #6\n-Counter in file 0 34:6 -> 34:7, #7\n-Counter in file 0 35:1 -> 35:2, (#5 + 0)\n+Counter in file 0 18:6 -> 18:7, (#1 - #2)\n+Counter in file 0 23:13 -> 25:14, ((#2 + (#1 - #2)) + #3)\n+Counter in file 0 27:13 -> 27:18, #4\n+Counter in file 0 30:9 -> 32:10, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + (#1 - #2))\n+Counter in file 0 35:1 -> 35:2, (#4 + 0)\n Emitting segments for file: ../coverage/simple_loop.rs\n Combined regions:\n   7:9 -> 9:26 (count=1)"}, {"sha": "2a3c004fa7abe8cbcf82337ea65c3decfd39b621", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.simple_match.txt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,18 +2,18 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 12:6, #2\n-Counter in file 0 12:6 -> 12:7, #3\n-Counter in file 0 15:9 -> 15:10, #4\n-Counter in file 0 17:9 -> 17:13, #5\n-Counter in file 0 22:13 -> 22:22, (#4 + 0)\n-Counter in file 0 24:13 -> 24:14, #6\n-Counter in file 0 26:17 -> 28:18, (#4 + 0)\n-Counter in file 0 28:18 -> 28:19, #7\n-Counter in file 0 30:13 -> 37:14, (#6 + 0)\n-Counter in file 0 40:13 -> 40:15, #8\n-Counter in file 0 42:6 -> 42:7, #9\n-Counter in file 0 42:6 -> 42:7, #10\n-Counter in file 0 43:1 -> 43:2, #11\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 15:9 -> 15:10, (((#2 + (#1 - #2)) + (#3 + #4)) - #5)\n+Counter in file 0 17:9 -> 17:13, ((#2 + (#1 - #2)) + (#3 + #4))\n+Counter in file 0 22:13 -> 22:22, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 24:13 -> 24:14, #3\n+Counter in file 0 26:17 -> 28:18, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 28:18 -> 28:19, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) - #3)\n+Counter in file 0 30:13 -> 37:14, (#3 + 0)\n+Counter in file 0 40:13 -> 40:15, #4\n+Counter in file 0 42:6 -> 42:7, (#2 + (#1 - #2))\n+Counter in file 0 42:6 -> 42:7, (#3 + #4)\n+Counter in file 0 43:1 -> 43:2, #5\n Emitting segments for file: ../coverage/simple_match.rs\n Combined regions:\n   7:9 -> 9:26 (count=1)"}, {"sha": "5180ddd7de669d8745af0dc91f6f66f00acd50e5", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.tight_infinite_loop.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_infinite_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_infinite_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_infinite_loop.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,6 +1,6 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/tight_infinite_loop.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/tight_infinite_loop \n Counter in file 0 2:8 -> 2:13, #1\n-Counter in file 0 5:1 -> 5:2, #4\n+Counter in file 0 5:1 -> 5:2, (#1 - #2)\n Emitting segments for file: ../coverage/tight_infinite_loop.rs\n Combined regions:\n   2:8 -> 2:13 (count=1)"}, {"sha": "30109a1e200208363cd7c510020882335fa7dbcd", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.try_error_result.txt", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,22 +1,21 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/try_error_result.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/try_error_result \n Counter in file 0 13:9 -> 14:23, #1\n-Counter in file 0 17:9 -> 17:10, #2\n-Counter in file 0 19:9 -> 19:14, #3\n-Counter in file 0 21:9 -> 25:26, #4\n-Counter in file 0 27:13 -> 27:41, #5\n-Counter in file 0 27:41 -> 27:42, #6\n-Counter in file 0 31:13 -> 31:42, #7\n-Counter in file 0 31:42 -> 31:43, #8\n-Counter in file 0 32:10 -> 32:11, #9\n-Counter in file 0 32:10 -> 32:11, #10\n-Counter in file 0 33:6 -> 33:7, #11\n-Counter in file 0 34:5 -> 34:11, #12\n-Counter in file 0 35:1 -> 35:2, #13\n-Counter in file 0 35:1 -> 35:2, #14\n+Counter in file 0 17:9 -> 17:10, ((#1 + (#2 + #3)) - #4)\n+Counter in file 0 19:9 -> 19:14, (#1 + (#2 + #3))\n+Counter in file 0 21:9 -> 25:26, #7\n+Counter in file 0 27:13 -> 27:41, #8\n+Counter in file 0 27:41 -> 27:42, #5\n+Counter in file 0 31:13 -> 31:42, (#7 - #8)\n+Counter in file 0 31:42 -> 31:43, #6\n+Counter in file 0 32:10 -> 32:11, #2\n+Counter in file 0 32:10 -> 32:11, #3\n+Counter in file 0 33:6 -> 33:7, (#2 + #3)\n+Counter in file 0 34:5 -> 34:11, #4\n+Counter in file 0 35:1 -> 35:2, ((#5 + #6) + #4)\n Counter in file 0 5:8 -> 5:20, #1\n Counter in file 0 6:9 -> 6:16, #2\n-Counter in file 0 8:9 -> 8:15, #3\n-Counter in file 0 10:1 -> 10:2, #4\n+Counter in file 0 8:9 -> 8:15, (#1 - #2)\n+Counter in file 0 10:1 -> 10:2, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/try_error_result.rs\n Combined regions:\n   5:8 -> 5:20 (count=6)\n@@ -34,7 +33,7 @@ Combined regions:\n   32:10 -> 32:11 (count=5)\n   33:6 -> 33:7 (count=5)\n   34:5 -> 34:11 (count=0)\n-  35:1 -> 35:2 (count=2)\n+  35:1 -> 35:2 (count=1)\n Segment at 5:8 (count = 6), RegionEntry\n Segment at 5:20 (count = 0), Skipped\n Segment at 6:9 (count = 1), RegionEntry\n@@ -63,5 +62,5 @@ Segment at 33:6 (count = 5), RegionEntry\n Segment at 33:7 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n Segment at 34:11 (count = 0), Skipped\n-Segment at 35:1 (count = 2), RegionEntry\n+Segment at 35:1 (count = 1), RegionEntry\n Segment at 35:2 (count = 0), Skipped"}, {"sha": "b229410a495a358eee0a853987db2af6bc9f661f", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.various_conditions.txt", "status": "modified", "additions": 68, "deletions": 69, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.various_conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.various_conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.various_conditions.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,73 +2,72 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 4:9 -> 4:26, #1\n Counter in file 0 5:8 -> 5:12, (#1 + 0)\n Counter in file 0 5:13 -> 7:6, #2\n-Counter in file 0 10:9 -> 10:10, #4\n-Counter in file 0 10:16 -> 10:29, #5\n-Counter in file 0 11:9 -> 12:10, #6\n-Counter in file 0 13:15 -> 13:28, #7\n-Counter in file 0 14:12 -> 14:25, #8\n-Counter in file 0 14:29 -> 14:42, #9\n-Counter in file 0 14:42 -> 14:43, #10\n-Counter in file 0 14:42 -> 14:43, #11\n-Counter in file 0 14:46 -> 14:60, #12\n-Counter in file 0 14:60 -> 14:61, #13\n-Counter in file 0 14:60 -> 14:61, #14\n-Counter in file 0 14:61 -> 16:10, #15\n-Counter in file 0 16:10 -> 16:11, #16\n-Counter in file 0 17:9 -> 18:18, #17\n-Counter in file 0 20:9 -> 20:15, #18\n-Counter in file 0 23:9 -> 23:26, (#4 + 0)\n-Counter in file 0 24:8 -> 24:12, (#4 + 0)\n-Counter in file 0 24:13 -> 26:6, #19\n-Counter in file 0 28:8 -> 28:21, #21\n-Counter in file 0 29:9 -> 29:23, #22\n-Counter in file 0 30:15 -> 30:28, #23\n-Counter in file 0 31:12 -> 31:25, #24\n-Counter in file 0 31:29 -> 31:42, #25\n-Counter in file 0 31:42 -> 31:43, #26\n-Counter in file 0 31:42 -> 31:43, #27\n-Counter in file 0 31:46 -> 31:60, #28\n-Counter in file 0 31:60 -> 31:61, #29\n-Counter in file 0 31:60 -> 31:61, #30\n-Counter in file 0 31:61 -> 33:10, #31\n-Counter in file 0 33:10 -> 33:11, #32\n-Counter in file 0 34:9 -> 34:23, #33\n-Counter in file 0 36:9 -> 36:15, #34\n-Counter in file 0 39:9 -> 39:26, #35\n-Counter in file 0 40:8 -> 40:12, (#35 + 0)\n-Counter in file 0 40:13 -> 42:6, #36\n-Counter in file 0 44:9 -> 44:10, #38\n-Counter in file 0 44:16 -> 44:29, #39\n-Counter in file 0 45:9 -> 45:23, #40\n-Counter in file 0 46:15 -> 46:28, #41\n-Counter in file 0 47:12 -> 47:25, #42\n-Counter in file 0 47:29 -> 47:42, #43\n-Counter in file 0 47:42 -> 47:43, #44\n-Counter in file 0 47:42 -> 47:43, #45\n-Counter in file 0 47:46 -> 47:60, #46\n-Counter in file 0 47:60 -> 47:61, #47\n-Counter in file 0 47:60 -> 47:61, #48\n-Counter in file 0 47:61 -> 49:10, #49\n-Counter in file 0 49:10 -> 49:11, #50\n-Counter in file 0 50:9 -> 50:23, #51\n-Counter in file 0 52:13 -> 54:15, #52\n-Counter in file 0 57:9 -> 57:10, #53\n-Counter in file 0 57:16 -> 57:29, (#38 + 0)\n-Counter in file 0 58:9 -> 58:23, #54\n-Counter in file 0 59:15 -> 59:28, #55\n-Counter in file 0 60:12 -> 60:25, #56\n-Counter in file 0 60:29 -> 60:42, #57\n-Counter in file 0 60:42 -> 60:43, #58\n-Counter in file 0 60:42 -> 60:43, #59\n-Counter in file 0 60:46 -> 60:60, #60\n-Counter in file 0 60:60 -> 60:61, #61\n-Counter in file 0 60:60 -> 60:61, #62\n-Counter in file 0 60:61 -> 62:10, #63\n-Counter in file 0 62:10 -> 62:11, #64\n-Counter in file 0 63:9 -> 63:23, #65\n-Counter in file 0 65:9 -> 65:15, #66\n-Counter in file 0 67:1 -> 67:2, #67\n-Counter in file 0 67:1 -> 67:2, #68\n+Counter in file 0 10:9 -> 10:10, (#4 + #11)\n+Counter in file 0 10:16 -> 10:29, (#2 + 0)\n+Counter in file 0 11:9 -> 12:10, #4\n+Counter in file 0 13:15 -> 13:28, ((#2 + 0) - #3)\n+Counter in file 0 14:12 -> 14:25, #5\n+Counter in file 0 14:29 -> 14:42, (#5 - #13)\n+Counter in file 0 14:42 -> 14:43, (#13 + #14)\n+Counter in file 0 14:42 -> 14:43, ((#5 - #13) - #14)\n+Counter in file 0 14:46 -> 14:60, #21\n+Counter in file 0 14:60 -> 14:61, (#17 + #18)\n+Counter in file 0 14:60 -> 14:61, (#21 - #18)\n+Counter in file 0 14:61 -> 16:10, #22\n+Counter in file 0 16:10 -> 16:11, #23\n+Counter in file 0 17:9 -> 18:18, #11\n+Counter in file 0 20:9 -> 20:15, (((#2 + 0) - #3) - #5)\n+Counter in file 0 23:9 -> 23:26, ((#4 + #11) + 0)\n+Counter in file 0 24:8 -> 24:12, ((#4 + #11) + 0)\n+Counter in file 0 24:13 -> 26:6, #12\n+Counter in file 0 28:8 -> 28:21, (#12 + 0)\n+Counter in file 0 29:9 -> 29:23, #16\n+Counter in file 0 30:15 -> 30:28, ((#12 + 0) - #15)\n+Counter in file 0 31:12 -> 31:25, (((#12 + 0) - #15) - #8)\n+Counter in file 0 31:29 -> 31:42, ((((#12 + 0) - #15) - #8) - #24)\n+Counter in file 0 31:42 -> 31:43, (((((#12 + 0) - #15) - #8) - #24) - #25)\n+Counter in file 0 31:42 -> 31:43, (#24 + #25)\n+Counter in file 0 31:46 -> 31:60, #32\n+Counter in file 0 31:60 -> 31:61, (#28 + #29)\n+Counter in file 0 31:60 -> 31:61, (#32 - #29)\n+Counter in file 0 31:61 -> 33:10, #33\n+Counter in file 0 33:10 -> 33:11, #34\n+Counter in file 0 34:9 -> 34:23, #19\n+Counter in file 0 36:9 -> 36:15, #8\n+Counter in file 0 39:9 -> 39:26, (#16 + #19)\n+Counter in file 0 40:8 -> 40:12, ((#16 + #19) + 0)\n+Counter in file 0 40:13 -> 42:6, #20\n+Counter in file 0 44:9 -> 44:10, (#27 + #30)\n+Counter in file 0 44:16 -> 44:29, (#20 + 0)\n+Counter in file 0 45:9 -> 45:23, #27\n+Counter in file 0 46:15 -> 46:28, ((#20 + 0) - #26)\n+Counter in file 0 47:12 -> 47:25, (((#20 + 0) - #26) - #7)\n+Counter in file 0 47:29 -> 47:42, ((((#20 + 0) - #26) - #7) - #35)\n+Counter in file 0 47:42 -> 47:43, (#35 + #36)\n+Counter in file 0 47:42 -> 47:43, (((((#20 + 0) - #26) - #7) - #35) - #36)\n+Counter in file 0 47:46 -> 47:60, #41\n+Counter in file 0 47:60 -> 47:61, (#37 + #38)\n+Counter in file 0 47:60 -> 47:61, (#41 - #38)\n+Counter in file 0 47:61 -> 49:10, #42\n+Counter in file 0 49:10 -> 49:11, #43\n+Counter in file 0 50:9 -> 50:23, #30\n+Counter in file 0 52:13 -> 54:15, #7\n+Counter in file 0 57:9 -> 57:10, (#9 + #10)\n+Counter in file 0 57:16 -> 57:29, ((#27 + #30) + 0)\n+Counter in file 0 58:9 -> 58:23, #9\n+Counter in file 0 59:15 -> 59:28, ((#27 + #30) - #31)\n+Counter in file 0 60:12 -> 60:25, (((#27 + #30) - #31) - #6)\n+Counter in file 0 60:29 -> 60:42, ((((#27 + #30) - #31) - #6) - #39)\n+Counter in file 0 60:42 -> 60:43, (#39 + #40)\n+Counter in file 0 60:42 -> 60:43, (((((#27 + #30) - #31) - #6) - #39) - #40)\n+Counter in file 0 60:46 -> 60:60, #46\n+Counter in file 0 60:60 -> 60:61, (#46 - #45)\n+Counter in file 0 60:60 -> 60:61, (#44 + #45)\n+Counter in file 0 60:61 -> 62:10, #47\n+Counter in file 0 62:10 -> 62:11, #48\n+Counter in file 0 63:9 -> 63:23, #10\n+Counter in file 0 65:9 -> 65:15, #6\n+Counter in file 0 67:1 -> 67:2, ((#9 + #10) + (((#6 + #7) + #8) + (((#2 + 0) - #3) - #5)))\n Emitting segments for file: ../coverage/various_conditions.rs\n Combined regions:\n   4:9 -> 4:26 (count=1)\n@@ -131,7 +130,7 @@ Combined regions:\n   62:10 -> 62:11 (count=0)\n   63:9 -> 63:23 (count=0)\n   65:9 -> 65:15 (count=0)\n-  67:1 -> 67:2 (count=2)\n+  67:1 -> 67:2 (count=1)\n Segment at 4:9 (count = 1), RegionEntry\n Segment at 4:26 (count = 0), Skipped\n Segment at 5:8 (count = 1), RegionEntry\n@@ -236,5 +235,5 @@ Segment at 63:9 (count = 0), RegionEntry\n Segment at 63:23 (count = 0), Skipped\n Segment at 65:9 (count = 0), RegionEntry\n Segment at 65:15 (count = 0), Skipped\n-Segment at 67:1 (count = 2), RegionEntry\n+Segment at 67:1 (count = 1), RegionEntry\n Segment at 67:2 (count = 0), Skipped"}, {"sha": "d496805955f782184ad1a7764fc80acc93ec9524", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,8 +1,8 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/while.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/while \n Counter in file 0 2:9 -> 2:16, #1\n-Counter in file 0 3:11 -> 3:20, #2\n-Counter in file 0 3:21 -> 4:6, #3\n-Counter in file 0 5:1 -> 5:2, #4\n+Counter in file 0 3:11 -> 3:20, (#1 + #2)\n+Counter in file 0 3:21 -> 4:6, #2\n+Counter in file 0 5:1 -> 5:2, ((#1 + #2) - #2)\n Emitting segments for file: ../coverage/while.rs\n Combined regions:\n   2:9 -> 2:16 (count=1)"}, {"sha": "a343f5056ac29b03f091ebe23ed186aa0356d297", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while_early_return.txt", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_return.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,14 +1,13 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/while_early_return.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-base/coverage-reports-base/while_early_return \n Counter in file 0 5:9 -> 5:27, #1\n-Counter in file 0 7:9 -> 9:10, #2\n-Counter in file 0 12:13 -> 14:14, #3\n-Counter in file 0 18:21 -> 20:22, #4\n-Counter in file 0 22:21 -> 22:27, #5\n-Counter in file 0 26:21 -> 26:27, #6\n-Counter in file 0 30:9 -> 32:10, #7\n-Counter in file 0 35:5 -> 35:11, #8\n-Counter in file 0 36:1 -> 36:2, #9\n-Counter in file 0 36:1 -> 36:2, #10\n+Counter in file 0 7:9 -> 9:10, (#1 + #2)\n+Counter in file 0 12:13 -> 14:14, ((#1 + #2) - #3)\n+Counter in file 0 18:21 -> 20:22, #6\n+Counter in file 0 22:21 -> 22:27, #4\n+Counter in file 0 26:21 -> 26:27, #5\n+Counter in file 0 30:9 -> 32:10, #2\n+Counter in file 0 35:5 -> 35:11, #3\n+Counter in file 0 36:1 -> 36:2, ((#4 + #5) + #3)\n Emitting segments for file: ../coverage/while_early_return.rs\n Combined regions:\n   5:9 -> 5:27 (count=1)\n@@ -19,7 +18,7 @@ Combined regions:\n   26:21 -> 26:27 (count=1)\n   30:9 -> 32:10 (count=6)\n   35:5 -> 35:11 (count=0)\n-  36:1 -> 36:2 (count=2)\n+  36:1 -> 36:2 (count=1)\n Segment at 5:9 (count = 1), RegionEntry\n Segment at 5:27 (count = 0), Skipped\n Segment at 7:9 (count = 7), RegionEntry\n@@ -36,5 +35,5 @@ Segment at 30:9 (count = 6), RegionEntry\n Segment at 32:10 (count = 0), Skipped\n Segment at 35:5 (count = 0), RegionEntry\n Segment at 35:11 (count = 0), Skipped\n-Segment at 36:1 (count = 2), RegionEntry\n+Segment at 36:1 (count = 1), RegionEntry\n Segment at 36:2 (count = 0), Skipped"}, {"sha": "bd2e2d56d4a5593fbceedbad7d6cd36fc9cea6b6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.drop_trait.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.drop_trait.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.drop_trait.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.drop_trait.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,8 +21,8 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 6,\n-              \"covered\": 6,\n+              \"count\": 5,\n+              \"covered\": 5,\n               \"notcovered\": 0,\n               \"percent\": 100\n             }\n@@ -46,8 +46,8 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 6,\n-          \"covered\": 6,\n+          \"count\": 5,\n+          \"covered\": 5,\n           \"notcovered\": 0,\n           \"percent\": 100\n         }"}, {"sha": "a50f4657e20aa284bde020249222daadb006548c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.generics.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.generics.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.generics.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.generics.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,8 +21,8 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 7,\n-              \"covered\": 7,\n+              \"count\": 6,\n+              \"covered\": 6,\n               \"notcovered\": 0,\n               \"percent\": 100\n             }\n@@ -46,8 +46,8 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 7,\n-          \"covered\": 7,\n+          \"count\": 6,\n+          \"covered\": 6,\n           \"notcovered\": 0,\n           \"percent\": 100\n         }"}, {"sha": "36f81ceae19bf396747ccd828cb20b857424b458", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.if_else.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if_else.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if_else.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if_else.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 29,\n-              \"covered\": 21,\n-              \"percent\": 72.41379310344827\n+              \"count\": 28,\n+              \"covered\": 19,\n+              \"percent\": 67.85714285714286\n             },\n             \"regions\": {\n-              \"count\": 9,\n-              \"covered\": 7,\n+              \"count\": 7,\n+              \"covered\": 5,\n               \"notcovered\": 2,\n-              \"percent\": 77.77777777777779\n+              \"percent\": 71.42857142857143\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 29,\n-          \"covered\": 21,\n-          \"percent\": 72.41379310344827\n+          \"count\": 28,\n+          \"covered\": 19,\n+          \"percent\": 67.85714285714286\n         },\n         \"regions\": {\n-          \"count\": 9,\n-          \"covered\": 7,\n+          \"count\": 7,\n+          \"covered\": 5,\n           \"notcovered\": 2,\n-          \"percent\": 77.77777777777779\n+          \"percent\": 71.42857142857143\n         }\n       }\n     }"}, {"sha": "929e769b50a98dd066a4ab70bfa6e86986776d4e", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 94.73684210526315\n             },\n             \"regions\": {\n-              \"count\": 18,\n-              \"covered\": 15,\n+              \"count\": 17,\n+              \"covered\": 14,\n               \"notcovered\": 3,\n-              \"percent\": 83.33333333333334\n+              \"percent\": 82.35294117647058\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 94.73684210526315\n         },\n         \"regions\": {\n-          \"count\": 18,\n-          \"covered\": 15,\n+          \"count\": 17,\n+          \"covered\": 14,\n           \"notcovered\": 3,\n-          \"percent\": 83.33333333333334\n+          \"percent\": 82.35294117647058\n         }\n       }\n     }"}, {"sha": "d93458b6143729b215ed94976de67bd502dc4935", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.various_conditions.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.various_conditions.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.various_conditions.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.various_conditions.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 46.93877551020408\n             },\n             \"regions\": {\n-              \"count\": 70,\n-              \"covered\": 19,\n+              \"count\": 69,\n+              \"covered\": 18,\n               \"notcovered\": 51,\n-              \"percent\": 27.142857142857142\n+              \"percent\": 26.08695652173913\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 46.93877551020408\n         },\n         \"regions\": {\n-          \"count\": 70,\n-          \"covered\": 19,\n+          \"count\": 69,\n+          \"covered\": 18,\n           \"notcovered\": 51,\n-          \"percent\": 27.142857142857142\n+          \"percent\": 26.08695652173913\n         }\n       }\n     }"}, {"sha": "a9e01604ccd5bb3203675524e3278b2191172c36", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while_early_return.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_return.json?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n-              \"count\": 10,\n-              \"covered\": 8,\n+              \"count\": 9,\n+              \"covered\": 7,\n               \"notcovered\": 2,\n-              \"percent\": 80\n+              \"percent\": 77.77777777777779\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n-          \"count\": 10,\n-          \"covered\": 8,\n+          \"count\": 9,\n+          \"covered\": 7,\n           \"notcovered\": 2,\n-          \"percent\": 80\n+          \"percent\": 77.77777777777779\n         }\n       }\n     }"}, {"sha": "72aa020ca1691a1941397341855bd334e486c97c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.drop_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.drop_trait.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -24,7 +24,7 @@\n    24|       |    let _ = Firework { strength: 1000 };\n    25|       |\n    26|       |    Ok(())\n-   27|      2|}\n+   27|      1|}\n    28|       |\n    29|       |// Expected program output:\n    30|       |//   Exiting with error..."}, {"sha": "86199d7476302c92f3a65fd5c36f84b2ce044226", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.generics.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.generics.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -57,7 +57,7 @@\n    35|       |    let _ = Firework { strength: 1000 };\n    36|       |\n    37|       |    Ok(())\n-   38|      2|}\n+   38|      1|}\n    39|       |\n    40|       |// Expected program output:\n    41|       |//   Exiting with error..."}, {"sha": "5f899723e255467c407a637ee65789bda31058b2", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.if_else.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if_else.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -20,7 +20,7 @@\n    20|      0|        countdown\n    21|      0|        =\n    22|      0|            100\n-   23|      1|    }\n+   23|       |    }\n    24|       |\n    25|       |    if\n    26|      1|        is_true\n@@ -36,6 +36,6 @@\n    36|      0|        =\n    37|      0|            100\n    38|      0|        ;\n-   39|      1|    }\n+   39|      0|    }\n    40|      1|}\n "}, {"sha": "94c63c9a2b9060b1ecbebccc6d64e97edb3d52cc", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -33,5 +33,5 @@\n    32|      5|        }\n    33|      5|    }\n    34|      0|    Ok(())\n-   35|      2|}\n+   35|      1|}\n "}, {"sha": "173ff4aa4c48154b7c32ca11ed922d6887b0caeb", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.various_conditions.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.various_conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.various_conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.various_conditions.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -65,5 +65,5 @@\n    64|       |    } else {\n    65|      0|        return;\n    66|       |    };\n-   67|      2|}\n+   67|      1|}\n "}, {"sha": "26041136d2f4c460ac4a12f540857e5b2b6dade6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.while_early_return.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_return.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -33,7 +33,7 @@\n    33|       |        ;\n    34|       |    }\n    35|      0|    Ok(())\n-   36|      2|}\n+   36|      1|}\n    37|       |\n    38|       |// ISSUE(77553): Originally, this test had `Err(1)` on line 22 (instead of `Ok(())`) and\n    39|       |// `std::process::exit(2)` on line 26 (instead of `Err(1)`); and this worked as expected on Linux"}, {"sha": "d443ba0aba3a0bf6d699c914f05b475cfbc5aeb2", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.closure.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,8 +2,8 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 20:21 -> 20:38, #1\n Counter in file 0 21:20 -> 21:28, (#1 + 0)\n Counter in file 0 21:29 -> 23:18, #2\n-Counter in file 0 23:18 -> 23:19, #3\n-Counter in file 0 24:17 -> 25:14, #4\n+Counter in file 0 23:18 -> 23:19, (#1 - #2)\n+Counter in file 0 24:17 -> 25:14, (#2 + (#1 - #2))\n Counter in file 0 3:11 -> 18:13, #1\n Counter in file 0 25:14 -> 33:9, (#1 + 0)\n Counter in file 0 40:6 -> 60:13, (#1 + 0)\n@@ -12,18 +12,18 @@ Counter in file 0 82:6 -> 93:2, (#1 + 0)\n Counter in file 0 77:13 -> 77:30, #1\n Counter in file 0 78:12 -> 78:20, (#1 + 0)\n Counter in file 0 78:21 -> 80:10, #2\n-Counter in file 0 80:10 -> 80:11, #3\n-Counter in file 0 81:9 -> 82:6, #4\n+Counter in file 0 80:10 -> 80:11, (#1 - #2)\n+Counter in file 0 81:9 -> 82:6, (#2 + (#1 - #2))\n Counter in file 0 62:21 -> 62:38, #1\n Counter in file 0 63:20 -> 63:28, (#1 + 0)\n Counter in file 0 63:29 -> 65:18, #2\n-Counter in file 0 65:18 -> 65:19, #3\n-Counter in file 0 66:17 -> 67:14, #4\n+Counter in file 0 65:18 -> 65:19, (#1 - #2)\n+Counter in file 0 66:17 -> 67:14, (#2 + (#1 - #2))\n Counter in file 0 35:13 -> 35:30, #1\n Counter in file 0 36:12 -> 36:20, (#1 + 0)\n Counter in file 0 36:21 -> 38:10, #2\n-Counter in file 0 38:10 -> 38:11, #3\n-Counter in file 0 39:9 -> 40:6, #4\n+Counter in file 0 38:10 -> 38:11, (#1 - #2)\n+Counter in file 0 39:9 -> 40:6, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/closure.rs\n Combined regions:\n   3:11 -> 18:13 (count=1)"}, {"sha": "08fbbd13adbe1cc402101167aa9b1814933348ae", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.drop_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -3,7 +3,7 @@ Counter in file 0 9:24 -> 11:6, #1\n Counter in file 0 15:9 -> 17:42, #1\n Counter in file 0 19:8 -> 19:12, (#1 + 0)\n Counter in file 0 20:9 -> 21:22, #2\n-Counter in file 0 27:1 -> 27:2, #4\n+Counter in file 0 27:1 -> 27:2, (#2 + 0)\n Emitting segments for file: ../coverage/drop_trait.rs\n Combined regions:\n   9:24 -> 11:6 (count=2)"}, {"sha": "eb707c5e7acc2cf50f735e4bae2ff48530d8434e", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.generics.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -4,7 +4,7 @@ Counter in file 0 17:24 -> 19:6, #1\n Counter in file 0 23:9 -> 28:28, #1\n Counter in file 0 30:8 -> 30:12, (#1 + 0)\n Counter in file 0 31:9 -> 32:22, #2\n-Counter in file 0 38:1 -> 38:2, #4\n+Counter in file 0 38:1 -> 38:2, (#2 + 0)\n Counter in file 0 10:49 -> 12:6, #1\n Counter in file 0 10:49 -> 12:6, #1\n Emitting segments for file: ../coverage/generics.rs"}, {"sha": "d186f440ddb1f53b12daa32072126d8976536e8c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.if.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,8 +2,8 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 8:5 -> 18:10, #1\n Counter in file 0 21:9 -> 21:16, (#1 + 0)\n Counter in file 0 22:5 -> 27:6, #2\n-Counter in file 0 27:6 -> 27:7, #3\n-Counter in file 0 28:1 -> 28:2, #4\n+Counter in file 0 27:6 -> 27:7, (#1 - #2)\n+Counter in file 0 28:1 -> 28:2, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/if.rs\n Combined regions:\n   8:5 -> 18:10 (count=1)"}, {"sha": "8220060f26ff25a50c6304048331dea9f4f04ecb", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.if_else.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,11 +1,11 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/if_else.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/if_else \n Counter in file 0 7:9 -> 11:16, #1\n Counter in file 0 12:5 -> 17:6, #2\n-Counter in file 0 20:9 -> 22:16, #3\n-Counter in file 0 26:9 -> 26:16, #4\n-Counter in file 0 27:5 -> 32:6, #5\n-Counter in file 0 34:5 -> 39:6, #6\n-Counter in file 0 40:1 -> 40:2, #7\n+Counter in file 0 20:9 -> 22:16, (#1 - #2)\n+Counter in file 0 26:9 -> 26:16, (#2 + (#1 - #2))\n+Counter in file 0 27:5 -> 32:6, #3\n+Counter in file 0 34:5 -> 39:6, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 40:1 -> 40:2, (#3 + ((#2 + (#1 - #2)) - #3))\n Emitting segments for file: ../coverage/if_else.rs\n Combined regions:\n   7:9 -> 11:16 (count=1)"}, {"sha": "c173cc20f815aa76a8d7088c0296bede276c4115", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.inner_items.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -6,11 +6,11 @@ Counter in file 0 21:9 -> 22:6, (#2 + 0)\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 12:6, #2\n-Counter in file 0 12:6 -> 12:7, #3\n-Counter in file 0 48:8 -> 48:15, #4\n-Counter in file 0 48:16 -> 50:6, #5\n-Counter in file 0 50:6 -> 50:7, #6\n-Counter in file 0 52:9 -> 57:2, #7\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 48:8 -> 48:15, (#2 + (#1 - #2))\n+Counter in file 0 48:16 -> 50:6, #3\n+Counter in file 0 50:6 -> 50:7, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 52:9 -> 57:2, (#3 + ((#2 + (#1 - #2)) - #3))\n Counter in file 0 33:42 -> 36:10, #1\n Counter in file 0 41:37 -> 41:41, #1\n Counter in file 0 42:13 -> 43:10, #2"}, {"sha": "191a3a58355d28f336bfd9f5415a65ec1b702fdd", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.lazy_boolean.txt", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,40 +2,40 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:42, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 14:6, #2\n-Counter in file 0 14:6 -> 14:7, #3\n-Counter in file 0 16:9 -> 16:17, #4\n-Counter in file 0 18:13 -> 18:18, #5\n-Counter in file 0 20:13 -> 20:18, #6\n-Counter in file 0 20:18 -> 20:19, #7\n-Counter in file 0 20:18 -> 20:19, #8\n-Counter in file 0 23:9 -> 23:17, #9\n-Counter in file 0 25:13 -> 25:18, (#4 + 0)\n-Counter in file 0 27:13 -> 27:18, #10\n-Counter in file 0 27:18 -> 27:19, #11\n-Counter in file 0 27:18 -> 27:19, #12\n-Counter in file 0 29:9 -> 29:17, #13\n-Counter in file 0 29:20 -> 29:25, (#9 + 0)\n-Counter in file 0 29:29 -> 29:34, #14\n-Counter in file 0 29:34 -> 29:35, #15\n-Counter in file 0 29:34 -> 29:35, #16\n-Counter in file 0 30:9 -> 30:17, #17\n-Counter in file 0 30:20 -> 30:25, (#13 + 0)\n-Counter in file 0 30:29 -> 30:34, #18\n-Counter in file 0 30:34 -> 30:35, #19\n-Counter in file 0 30:34 -> 30:35, #20\n-Counter in file 0 33:9 -> 34:16, (#17 + 0)\n-Counter in file 0 35:5 -> 38:6, #21\n-Counter in file 0 38:6 -> 38:7, #22\n-Counter in file 0 41:9 -> 41:16, #23\n-Counter in file 0 42:5 -> 45:6, #24\n-Counter in file 0 47:5 -> 50:6, #25\n-Counter in file 0 52:8 -> 52:16, #26\n-Counter in file 0 52:17 -> 54:6, #27\n-Counter in file 0 54:6 -> 54:7, #28\n-Counter in file 0 56:8 -> 56:15, #29\n-Counter in file 0 56:16 -> 58:6, #30\n-Counter in file 0 58:12 -> 60:6, #31\n-Counter in file 0 61:1 -> 61:2, #32\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 16:9 -> 16:17, ((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4))\n+Counter in file 0 18:13 -> 18:18, (#2 + (#1 - #2))\n+Counter in file 0 20:13 -> 20:18, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 20:18 -> 20:19, (#3 + #4)\n+Counter in file 0 20:18 -> 20:19, (((#2 + (#1 - #2)) - #3) - #4)\n+Counter in file 0 23:9 -> 23:17, ((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6))\n+Counter in file 0 25:13 -> 25:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) + 0)\n+Counter in file 0 27:13 -> 27:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5)\n+Counter in file 0 27:18 -> 27:19, (#5 + #6)\n+Counter in file 0 27:18 -> 27:19, ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)\n+Counter in file 0 29:9 -> 29:17, ((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8))\n+Counter in file 0 29:20 -> 29:25, (((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) + 0)\n+Counter in file 0 29:29 -> 29:34, #7\n+Counter in file 0 29:34 -> 29:35, ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)\n+Counter in file 0 29:34 -> 29:35, (#7 - #8)\n+Counter in file 0 30:9 -> 30:17, ((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10))\n+Counter in file 0 30:20 -> 30:25, (((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) + 0)\n+Counter in file 0 30:29 -> 30:34, #9\n+Counter in file 0 30:34 -> 30:35, ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)\n+Counter in file 0 30:34 -> 30:35, (#9 - #10)\n+Counter in file 0 33:9 -> 34:16, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) + 0)\n+Counter in file 0 35:5 -> 38:6, #11\n+Counter in file 0 38:6 -> 38:7, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)\n+Counter in file 0 41:9 -> 41:16, (#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11))\n+Counter in file 0 42:5 -> 45:6, #12\n+Counter in file 0 47:5 -> 50:6, ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)\n+Counter in file 0 52:8 -> 52:16, (#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12))\n+Counter in file 0 52:17 -> 54:6, #13\n+Counter in file 0 54:6 -> 54:7, ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)\n+Counter in file 0 56:8 -> 56:15, (#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13))\n+Counter in file 0 56:16 -> 58:6, #14\n+Counter in file 0 58:12 -> 60:6, ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14)\n+Counter in file 0 61:1 -> 61:2, (#14 + ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14))\n Emitting segments for file: ../coverage/lazy_boolean.rs\n Combined regions:\n   7:9 -> 9:42 (count=1)"}, {"sha": "235557ba3495c796600fbd7f67f424a49e7ce156", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.loops_and_branches.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_and_branches.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,12 +1,12 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/loops_and_branches.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/loops_and_branches \n Counter in file 0 10:12 -> 10:16, #1\n Counter in file 0 11:16 -> 11:21, #2\n-Counter in file 0 14:14 -> 14:15, #6\n-Counter in file 0 15:13 -> 15:31, #7\n-Counter in file 0 15:31 -> 15:32, #8\n-Counter in file 0 17:10 -> 17:11, #10\n-Counter in file 0 18:9 -> 18:15, #11\n-Counter in file 0 19:5 -> 19:6, #12\n+Counter in file 0 14:14 -> 14:15, (#2 - #5)\n+Counter in file 0 15:13 -> 15:31, (0 + (#2 - #5))\n+Counter in file 0 15:31 -> 15:32, #4\n+Counter in file 0 17:10 -> 17:11, #3\n+Counter in file 0 18:9 -> 18:15, (#3 + 0)\n+Counter in file 0 19:5 -> 19:6, (#4 + (#3 + 0))\n Counter in file 0 22:11 -> 25:2, #1\n Emitting segments for file: ../coverage/loops_and_branches.rs\n Combined regions:"}, {"sha": "6bc26f94ac7c08b4daf02b1893f85e7d205cfd44", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.nested_loops.txt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,22 +1,22 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/nested_loops.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/nested_loops \n Counter in file 0 2:9 -> 3:27, #1\n-Counter in file 0 5:19 -> 5:32, #2\n-Counter in file 0 6:13 -> 7:24, #3\n-Counter in file 0 8:13 -> 8:14, #4\n-Counter in file 0 8:18 -> 8:23, #5\n-Counter in file 0 9:16 -> 9:22, (#4 + 0)\n-Counter in file 0 10:17 -> 10:22, #6\n-Counter in file 0 12:13 -> 12:19, #7\n-Counter in file 0 13:13 -> 13:19, #8\n-Counter in file 0 14:16 -> 14:22, (#8 + 0)\n-Counter in file 0 15:17 -> 16:27, #9\n-Counter in file 0 17:21 -> 17:33, #10\n-Counter in file 0 19:21 -> 21:14, #11\n-Counter in file 0 21:14 -> 21:15, #12\n-Counter in file 0 22:10 -> 22:11, #13\n-Counter in file 0 23:9 -> 23:23, #14\n-Counter in file 0 24:6 -> 24:7, #15\n-Counter in file 0 25:1 -> 25:2, #16\n+Counter in file 0 5:19 -> 5:32, (#1 + #2)\n+Counter in file 0 6:13 -> 7:24, ((#1 + #2) - #3)\n+Counter in file 0 8:13 -> 8:14, ((((#1 + #2) - #3) + (#5 + #6)) - #7)\n+Counter in file 0 8:18 -> 8:23, (((#1 + #2) - #3) + (#5 + #6))\n+Counter in file 0 9:16 -> 9:22, (((((#1 + #2) - #3) + (#5 + #6)) - #7) + 0)\n+Counter in file 0 10:17 -> 10:22, #8\n+Counter in file 0 12:13 -> 12:19, #9\n+Counter in file 0 13:13 -> 13:19, #10\n+Counter in file 0 14:16 -> 14:22, (#10 + 0)\n+Counter in file 0 15:17 -> 16:27, #11\n+Counter in file 0 17:21 -> 17:33, #4\n+Counter in file 0 19:21 -> 21:14, #5\n+Counter in file 0 21:14 -> 21:15, #6\n+Counter in file 0 22:10 -> 22:11, (#5 + #6)\n+Counter in file 0 23:9 -> 23:23, #2\n+Counter in file 0 24:6 -> 24:7, #3\n+Counter in file 0 25:1 -> 25:2, (#4 + #3)\n Emitting segments for file: ../coverage/nested_loops.rs\n Combined regions:\n   2:9 -> 3:27 (count=1)"}, {"sha": "5ab9a99d6868f0242fa2ae5b673f86f198e21931", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.partial_eq_counter_without_region.txt", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq_counter_without_region.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,8 +1,5 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/partial_eq_counter_without_region.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/partial_eq_counter_without_region \n-Counter in file 0 4:39 -> 4:49, #1\n-Counter in file 0 4:39 -> 4:49, #2\n-Counter in file 0 4:39 -> 4:49, #3\n-Counter in file 0 4:48 -> 4:49, #4\n+Counter in file 0 4:48 -> 4:49, ((#1 + #2) + ((#3 + #4) + ((#5 + #6) + #7)))\n Counter in file 0 8:5 -> 8:17, #1\n Counter in file 0 21:11 -> 26:2, #1\n Counter in file 0 4:39 -> 4:40, #1\n@@ -11,15 +8,8 @@ Counter in file 0 7:5 -> 7:6, #1\n Counter in file 0 8:5 -> 8:17, #1\n Counter in file 0 4:39 -> 4:40, #1\n Counter in file 0 4:48 -> 4:49, (#1 + 0)\n-Counter in file 0 4:24 -> 4:33, #1\n-Counter in file 0 4:24 -> 4:33, #2\n-Counter in file 0 4:24 -> 4:33, #3\n-Counter in file 0 4:24 -> 4:33, #4\n-Counter in file 0 4:32 -> 4:33, #5\n-Counter in file 0 4:51 -> 4:54, #1\n-Counter in file 0 4:51 -> 4:54, #2\n-Counter in file 0 4:51 -> 4:54, #3\n-Counter in file 0 4:53 -> 4:54, #4\n+Counter in file 0 4:32 -> 4:33, ((#4 + #5) + #6)\n+Counter in file 0 4:53 -> 4:54, (#1 + (#2 + (#3 + #4)))\n Counter in file 0 13:9 -> 18:6, #1\n Counter in file 0 7:5 -> 7:6, #1\n Counter in file 0 4:39 -> 4:40, #1\n@@ -33,9 +23,7 @@ Counter in file 0 4:17 -> 4:22, #1\n Counter in file 0 8:5 -> 8:17, #1\n Counter in file 0 4:39 -> 4:40, #1\n Counter in file 0 4:48 -> 4:49, (#1 + 0)\n-Counter in file 0 4:24 -> 4:33, #1\n-Counter in file 0 4:24 -> 4:33, #2\n-Counter in file 0 4:32 -> 4:33, #3\n+Counter in file 0 4:32 -> 4:33, (#3 + (#1 + #2))\n Emitting segments for file: ../coverage/partial_eq_counter_without_region.rs\n Combined regions:\n   4:17 -> 4:22 (count=2)"}, {"sha": "60d861e9d2e15412c3f3c503c95a0891b59c675c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.simple_loop.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,12 +2,12 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 12:9 -> 12:16, (#1 + 0)\n Counter in file 0 13:5 -> 18:6, #2\n-Counter in file 0 18:6 -> 18:7, #3\n-Counter in file 0 23:13 -> 25:14, #4\n-Counter in file 0 27:13 -> 27:18, #5\n-Counter in file 0 30:9 -> 32:10, #6\n-Counter in file 0 34:6 -> 34:7, #7\n-Counter in file 0 35:1 -> 35:2, (#5 + 0)\n+Counter in file 0 18:6 -> 18:7, (#1 - #2)\n+Counter in file 0 23:13 -> 25:14, ((#2 + (#1 - #2)) + #3)\n+Counter in file 0 27:13 -> 27:18, #4\n+Counter in file 0 30:9 -> 32:10, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + (#1 - #2))\n+Counter in file 0 35:1 -> 35:2, (#4 + 0)\n Emitting segments for file: ../coverage/simple_loop.rs\n Combined regions:\n   7:9 -> 9:26 (count=1)"}, {"sha": "1683b68e96641de57c8b7dfbf4c3abcf3806ec5a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.simple_match.txt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,18 +2,18 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 7:9 -> 9:26, #1\n Counter in file 0 10:8 -> 10:15, (#1 + 0)\n Counter in file 0 10:16 -> 12:6, #2\n-Counter in file 0 12:6 -> 12:7, #3\n-Counter in file 0 15:9 -> 15:10, #4\n-Counter in file 0 17:9 -> 17:13, #5\n-Counter in file 0 22:13 -> 22:22, (#4 + 0)\n-Counter in file 0 24:13 -> 24:14, #6\n-Counter in file 0 26:17 -> 28:18, (#4 + 0)\n-Counter in file 0 28:18 -> 28:19, #7\n-Counter in file 0 30:13 -> 37:14, (#6 + 0)\n-Counter in file 0 40:13 -> 40:15, #8\n-Counter in file 0 42:6 -> 42:7, #9\n-Counter in file 0 42:6 -> 42:7, #10\n-Counter in file 0 43:1 -> 43:2, #11\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 15:9 -> 15:10, (((#2 + (#1 - #2)) + (#3 + #4)) - #5)\n+Counter in file 0 17:9 -> 17:13, ((#2 + (#1 - #2)) + (#3 + #4))\n+Counter in file 0 22:13 -> 22:22, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 24:13 -> 24:14, #3\n+Counter in file 0 26:17 -> 28:18, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 28:18 -> 28:19, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) - #3)\n+Counter in file 0 30:13 -> 37:14, (#3 + 0)\n+Counter in file 0 40:13 -> 40:15, #4\n+Counter in file 0 42:6 -> 42:7, (#2 + (#1 - #2))\n+Counter in file 0 42:6 -> 42:7, (#3 + #4)\n+Counter in file 0 43:1 -> 43:2, #5\n Emitting segments for file: ../coverage/simple_match.rs\n Combined regions:\n   7:9 -> 9:26 (count=1)"}, {"sha": "39a3cf5458c64711c86fd89f0b4007447ad94c39", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.tight_infinite_loop.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_infinite_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_infinite_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_infinite_loop.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,6 +1,6 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/tight_infinite_loop.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/tight_infinite_loop \n Counter in file 0 2:8 -> 2:13, #1\n-Counter in file 0 5:1 -> 5:2, #4\n+Counter in file 0 5:1 -> 5:2, (#1 - #2)\n Emitting segments for file: ../coverage/tight_infinite_loop.rs\n Combined regions:\n   2:8 -> 2:13 (count=1)"}, {"sha": "9cfc05e874a51d599617b5088c9aeeff4e794368", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.try_error_result.txt", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,22 +1,21 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/try_error_result.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/try_error_result \n Counter in file 0 13:9 -> 14:23, #1\n-Counter in file 0 17:9 -> 17:10, #2\n-Counter in file 0 19:9 -> 19:14, #3\n-Counter in file 0 21:9 -> 25:26, #4\n-Counter in file 0 27:13 -> 27:41, #5\n-Counter in file 0 27:41 -> 27:42, #6\n-Counter in file 0 31:13 -> 31:42, #7\n-Counter in file 0 31:42 -> 31:43, #8\n-Counter in file 0 32:10 -> 32:11, #9\n-Counter in file 0 32:10 -> 32:11, #10\n-Counter in file 0 33:6 -> 33:7, #11\n-Counter in file 0 34:5 -> 34:11, #12\n-Counter in file 0 35:1 -> 35:2, #13\n-Counter in file 0 35:1 -> 35:2, #14\n+Counter in file 0 17:9 -> 17:10, ((#1 + (#2 + #3)) - #4)\n+Counter in file 0 19:9 -> 19:14, (#1 + (#2 + #3))\n+Counter in file 0 21:9 -> 25:26, #7\n+Counter in file 0 27:13 -> 27:41, #8\n+Counter in file 0 27:41 -> 27:42, #5\n+Counter in file 0 31:13 -> 31:42, (#7 - #8)\n+Counter in file 0 31:42 -> 31:43, #6\n+Counter in file 0 32:10 -> 32:11, #2\n+Counter in file 0 32:10 -> 32:11, #3\n+Counter in file 0 33:6 -> 33:7, (#2 + #3)\n+Counter in file 0 34:5 -> 34:11, #4\n+Counter in file 0 35:1 -> 35:2, ((#5 + #6) + #4)\n Counter in file 0 5:8 -> 5:20, #1\n Counter in file 0 6:9 -> 6:16, #2\n-Counter in file 0 8:9 -> 8:15, #3\n-Counter in file 0 10:1 -> 10:2, #4\n+Counter in file 0 8:9 -> 8:15, (#1 - #2)\n+Counter in file 0 10:1 -> 10:2, (#2 + (#1 - #2))\n Emitting segments for file: ../coverage/try_error_result.rs\n Combined regions:\n   5:8 -> 5:20 (count=6)\n@@ -34,7 +33,7 @@ Combined regions:\n   32:10 -> 32:11 (count=5)\n   33:6 -> 33:7 (count=5)\n   34:5 -> 34:11 (count=0)\n-  35:1 -> 35:2 (count=2)\n+  35:1 -> 35:2 (count=1)\n Segment at 5:8 (count = 6), RegionEntry\n Segment at 5:20 (count = 0), Skipped\n Segment at 6:9 (count = 1), RegionEntry\n@@ -63,5 +62,5 @@ Segment at 33:6 (count = 5), RegionEntry\n Segment at 33:7 (count = 0), Skipped\n Segment at 34:5 (count = 0), RegionEntry\n Segment at 34:11 (count = 0), Skipped\n-Segment at 35:1 (count = 2), RegionEntry\n+Segment at 35:1 (count = 1), RegionEntry\n Segment at 35:2 (count = 0), Skipped"}, {"sha": "ba80cadbd3c8a52f727eb0b430fa6a1799db3b79", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.various_conditions.txt", "status": "modified", "additions": 68, "deletions": 69, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.various_conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.various_conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.various_conditions.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -2,73 +2,72 @@ Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/\n Counter in file 0 4:9 -> 4:26, #1\n Counter in file 0 5:8 -> 5:12, (#1 + 0)\n Counter in file 0 5:13 -> 7:6, #2\n-Counter in file 0 10:9 -> 10:10, #4\n-Counter in file 0 10:16 -> 10:29, #5\n-Counter in file 0 11:9 -> 12:10, #6\n-Counter in file 0 13:15 -> 13:28, #7\n-Counter in file 0 14:12 -> 14:25, #8\n-Counter in file 0 14:29 -> 14:42, #9\n-Counter in file 0 14:42 -> 14:43, #10\n-Counter in file 0 14:42 -> 14:43, #11\n-Counter in file 0 14:46 -> 14:60, #12\n-Counter in file 0 14:60 -> 14:61, #13\n-Counter in file 0 14:60 -> 14:61, #14\n-Counter in file 0 14:61 -> 16:10, #15\n-Counter in file 0 16:10 -> 16:11, #16\n-Counter in file 0 17:9 -> 18:18, #17\n-Counter in file 0 20:9 -> 20:15, #18\n-Counter in file 0 23:9 -> 23:26, (#4 + 0)\n-Counter in file 0 24:8 -> 24:12, (#4 + 0)\n-Counter in file 0 24:13 -> 26:6, #19\n-Counter in file 0 28:8 -> 28:21, #21\n-Counter in file 0 29:9 -> 29:23, #22\n-Counter in file 0 30:15 -> 30:28, #23\n-Counter in file 0 31:12 -> 31:25, #24\n-Counter in file 0 31:29 -> 31:42, #25\n-Counter in file 0 31:42 -> 31:43, #26\n-Counter in file 0 31:42 -> 31:43, #27\n-Counter in file 0 31:46 -> 31:60, #28\n-Counter in file 0 31:60 -> 31:61, #29\n-Counter in file 0 31:60 -> 31:61, #30\n-Counter in file 0 31:61 -> 33:10, #31\n-Counter in file 0 33:10 -> 33:11, #32\n-Counter in file 0 34:9 -> 34:23, #33\n-Counter in file 0 36:9 -> 36:15, #34\n-Counter in file 0 39:9 -> 39:26, #35\n-Counter in file 0 40:8 -> 40:12, (#35 + 0)\n-Counter in file 0 40:13 -> 42:6, #36\n-Counter in file 0 44:9 -> 44:10, #38\n-Counter in file 0 44:16 -> 44:29, #39\n-Counter in file 0 45:9 -> 45:23, #40\n-Counter in file 0 46:15 -> 46:28, #41\n-Counter in file 0 47:12 -> 47:25, #42\n-Counter in file 0 47:29 -> 47:42, #43\n-Counter in file 0 47:42 -> 47:43, #44\n-Counter in file 0 47:42 -> 47:43, #45\n-Counter in file 0 47:46 -> 47:60, #46\n-Counter in file 0 47:60 -> 47:61, #47\n-Counter in file 0 47:60 -> 47:61, #48\n-Counter in file 0 47:61 -> 49:10, #49\n-Counter in file 0 49:10 -> 49:11, #50\n-Counter in file 0 50:9 -> 50:23, #51\n-Counter in file 0 52:13 -> 54:15, #52\n-Counter in file 0 57:9 -> 57:10, #53\n-Counter in file 0 57:16 -> 57:29, (#38 + 0)\n-Counter in file 0 58:9 -> 58:23, #54\n-Counter in file 0 59:15 -> 59:28, #55\n-Counter in file 0 60:12 -> 60:25, #56\n-Counter in file 0 60:29 -> 60:42, #57\n-Counter in file 0 60:42 -> 60:43, #58\n-Counter in file 0 60:42 -> 60:43, #59\n-Counter in file 0 60:46 -> 60:60, #60\n-Counter in file 0 60:60 -> 60:61, #61\n-Counter in file 0 60:60 -> 60:61, #62\n-Counter in file 0 60:61 -> 62:10, #63\n-Counter in file 0 62:10 -> 62:11, #64\n-Counter in file 0 63:9 -> 63:23, #65\n-Counter in file 0 65:9 -> 65:15, #66\n-Counter in file 0 67:1 -> 67:2, #67\n-Counter in file 0 67:1 -> 67:2, #68\n+Counter in file 0 10:9 -> 10:10, (#4 + #11)\n+Counter in file 0 10:16 -> 10:29, (#2 + 0)\n+Counter in file 0 11:9 -> 12:10, #4\n+Counter in file 0 13:15 -> 13:28, ((#2 + 0) - #3)\n+Counter in file 0 14:12 -> 14:25, #5\n+Counter in file 0 14:29 -> 14:42, (#5 - #13)\n+Counter in file 0 14:42 -> 14:43, (#13 + #14)\n+Counter in file 0 14:42 -> 14:43, ((#5 - #13) - #14)\n+Counter in file 0 14:46 -> 14:60, #21\n+Counter in file 0 14:60 -> 14:61, (#17 + #18)\n+Counter in file 0 14:60 -> 14:61, (#21 - #18)\n+Counter in file 0 14:61 -> 16:10, #22\n+Counter in file 0 16:10 -> 16:11, #23\n+Counter in file 0 17:9 -> 18:18, #11\n+Counter in file 0 20:9 -> 20:15, (((#2 + 0) - #3) - #5)\n+Counter in file 0 23:9 -> 23:26, ((#4 + #11) + 0)\n+Counter in file 0 24:8 -> 24:12, ((#4 + #11) + 0)\n+Counter in file 0 24:13 -> 26:6, #12\n+Counter in file 0 28:8 -> 28:21, (#12 + 0)\n+Counter in file 0 29:9 -> 29:23, #16\n+Counter in file 0 30:15 -> 30:28, ((#12 + 0) - #15)\n+Counter in file 0 31:12 -> 31:25, (((#12 + 0) - #15) - #8)\n+Counter in file 0 31:29 -> 31:42, ((((#12 + 0) - #15) - #8) - #24)\n+Counter in file 0 31:42 -> 31:43, (((((#12 + 0) - #15) - #8) - #24) - #25)\n+Counter in file 0 31:42 -> 31:43, (#24 + #25)\n+Counter in file 0 31:46 -> 31:60, #32\n+Counter in file 0 31:60 -> 31:61, (#28 + #29)\n+Counter in file 0 31:60 -> 31:61, (#32 - #29)\n+Counter in file 0 31:61 -> 33:10, #33\n+Counter in file 0 33:10 -> 33:11, #34\n+Counter in file 0 34:9 -> 34:23, #19\n+Counter in file 0 36:9 -> 36:15, #8\n+Counter in file 0 39:9 -> 39:26, (#16 + #19)\n+Counter in file 0 40:8 -> 40:12, ((#16 + #19) + 0)\n+Counter in file 0 40:13 -> 42:6, #20\n+Counter in file 0 44:9 -> 44:10, (#27 + #30)\n+Counter in file 0 44:16 -> 44:29, (#20 + 0)\n+Counter in file 0 45:9 -> 45:23, #27\n+Counter in file 0 46:15 -> 46:28, ((#20 + 0) - #26)\n+Counter in file 0 47:12 -> 47:25, (((#20 + 0) - #26) - #7)\n+Counter in file 0 47:29 -> 47:42, ((((#20 + 0) - #26) - #7) - #35)\n+Counter in file 0 47:42 -> 47:43, (#35 + #36)\n+Counter in file 0 47:42 -> 47:43, (((((#20 + 0) - #26) - #7) - #35) - #36)\n+Counter in file 0 47:46 -> 47:60, #41\n+Counter in file 0 47:60 -> 47:61, (#37 + #38)\n+Counter in file 0 47:60 -> 47:61, (#41 - #38)\n+Counter in file 0 47:61 -> 49:10, #42\n+Counter in file 0 49:10 -> 49:11, #43\n+Counter in file 0 50:9 -> 50:23, #30\n+Counter in file 0 52:13 -> 54:15, #7\n+Counter in file 0 57:9 -> 57:10, (#9 + #10)\n+Counter in file 0 57:16 -> 57:29, ((#27 + #30) + 0)\n+Counter in file 0 58:9 -> 58:23, #9\n+Counter in file 0 59:15 -> 59:28, ((#27 + #30) - #31)\n+Counter in file 0 60:12 -> 60:25, (((#27 + #30) - #31) - #6)\n+Counter in file 0 60:29 -> 60:42, ((((#27 + #30) - #31) - #6) - #39)\n+Counter in file 0 60:42 -> 60:43, (#39 + #40)\n+Counter in file 0 60:42 -> 60:43, (((((#27 + #30) - #31) - #6) - #39) - #40)\n+Counter in file 0 60:46 -> 60:60, #46\n+Counter in file 0 60:60 -> 60:61, (#46 - #45)\n+Counter in file 0 60:60 -> 60:61, (#44 + #45)\n+Counter in file 0 60:61 -> 62:10, #47\n+Counter in file 0 62:10 -> 62:11, #48\n+Counter in file 0 63:9 -> 63:23, #10\n+Counter in file 0 65:9 -> 65:15, #6\n+Counter in file 0 67:1 -> 67:2, ((#9 + #10) + (((#6 + #7) + #8) + (((#2 + 0) - #3) - #5)))\n Emitting segments for file: ../coverage/various_conditions.rs\n Combined regions:\n   4:9 -> 4:26 (count=1)\n@@ -131,7 +130,7 @@ Combined regions:\n   62:10 -> 62:11 (count=0)\n   63:9 -> 63:23 (count=0)\n   65:9 -> 65:15 (count=0)\n-  67:1 -> 67:2 (count=2)\n+  67:1 -> 67:2 (count=1)\n Segment at 4:9 (count = 1), RegionEntry\n Segment at 4:26 (count = 0), Skipped\n Segment at 5:8 (count = 1), RegionEntry\n@@ -236,5 +235,5 @@ Segment at 63:9 (count = 0), RegionEntry\n Segment at 63:23 (count = 0), Skipped\n Segment at 65:9 (count = 0), RegionEntry\n Segment at 65:15 (count = 0), Skipped\n-Segment at 67:1 (count = 2), RegionEntry\n+Segment at 67:1 (count = 1), RegionEntry\n Segment at 67:2 (count = 0), Skipped"}, {"sha": "76cf1e92ecd3b4b32e4b88383e8d1650b3cc5cac", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,8 +1,8 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/while.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/while \n Counter in file 0 2:9 -> 2:16, #1\n-Counter in file 0 3:11 -> 3:20, #2\n-Counter in file 0 3:21 -> 4:6, #3\n-Counter in file 0 5:1 -> 5:2, #4\n+Counter in file 0 3:11 -> 3:20, (#1 + #2)\n+Counter in file 0 3:21 -> 4:6, #2\n+Counter in file 0 5:1 -> 5:2, ((#1 + #2) - #2)\n Emitting segments for file: ../coverage/while.rs\n Combined regions:\n   2:9 -> 2:16 (count=1)"}, {"sha": "60f389fc9d46796b9421a3d655035515d8880cd8", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while_early_return.txt", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_return.txt?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -1,14 +1,13 @@\n Args: /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-cov show --debug --Xdemangler=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler --show-line-counts-or-regions --instr-profile=/usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/while_early_return.profdata /usr/local/google/home/richkadel/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/coverage-reports-deadcode/coverage-reports-deadcode/while_early_return \n Counter in file 0 5:9 -> 5:27, #1\n-Counter in file 0 7:9 -> 9:10, #2\n-Counter in file 0 12:13 -> 14:14, #3\n-Counter in file 0 18:21 -> 20:22, #4\n-Counter in file 0 22:21 -> 22:27, #5\n-Counter in file 0 26:21 -> 26:27, #6\n-Counter in file 0 30:9 -> 32:10, #7\n-Counter in file 0 35:5 -> 35:11, #8\n-Counter in file 0 36:1 -> 36:2, #9\n-Counter in file 0 36:1 -> 36:2, #10\n+Counter in file 0 7:9 -> 9:10, (#1 + #2)\n+Counter in file 0 12:13 -> 14:14, ((#1 + #2) - #3)\n+Counter in file 0 18:21 -> 20:22, #6\n+Counter in file 0 22:21 -> 22:27, #4\n+Counter in file 0 26:21 -> 26:27, #5\n+Counter in file 0 30:9 -> 32:10, #2\n+Counter in file 0 35:5 -> 35:11, #3\n+Counter in file 0 36:1 -> 36:2, ((#4 + #5) + #3)\n Emitting segments for file: ../coverage/while_early_return.rs\n Combined regions:\n   5:9 -> 5:27 (count=1)\n@@ -19,7 +18,7 @@ Combined regions:\n   26:21 -> 26:27 (count=1)\n   30:9 -> 32:10 (count=6)\n   35:5 -> 35:11 (count=0)\n-  36:1 -> 36:2 (count=2)\n+  36:1 -> 36:2 (count=1)\n Segment at 5:9 (count = 1), RegionEntry\n Segment at 5:27 (count = 0), Skipped\n Segment at 7:9 (count = 7), RegionEntry\n@@ -36,5 +35,5 @@ Segment at 30:9 (count = 6), RegionEntry\n Segment at 32:10 (count = 0), Skipped\n Segment at 35:5 (count = 0), RegionEntry\n Segment at 35:11 (count = 0), Skipped\n-Segment at 36:1 (count = 2), RegionEntry\n+Segment at 36:1 (count = 1), RegionEntry\n Segment at 36:2 (count = 0), Skipped"}, {"sha": "494e6f20ea7635d083740659934cc87244889565", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -114,6 +114,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @6[2]: _19 = ()\n 26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,6,7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @10.Goto: goto -&gt; bb11\"><span class=\"annotation\">@1,3,4,5,9,10\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3,4,5,9,10</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:2-27:2: @8.Goto: goto -&gt; bb11\"><span class=\"annotation\">@2,6,7,8\u298a</span>\u2038<span class=\"annotation\">\u2989@2,6,7,8</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6dc893d28ff524f756e7c41b824727d65aabbc92", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -162,6 +162,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:13-35:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 37:8-37:10: @9[2]: _25 = ()\n 37:5-37:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@4,6,7,8,12,13\u298a</span>\u2038<span class=\"annotation\">\u2989@4,6,7,8,12,13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:2-38:2: @11.Goto: goto -&gt; bb14\"><span class=\"annotation\">@5,9,10,11\u298a</span>\u2038<span class=\"annotation\">\u2989@5,9,10,11</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b51c5c84c0d6e31580988f8af17b783910438b65", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -128,36 +128,36 @@\n 20:9-22:16: @5[1]: _6 = const ()\">        =</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"20:9-22:16: @5[0]: _5 = const 100_i32\n 20:9-22:16: @5[1]: _6 = const ()\">            100<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:6-23:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>\u2038<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @7[3]: _8 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:16: @7[3]: _8 = _1\n 26:9-26:16: @7[4]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\"><span class=\"annotation\">@9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">            100</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@9</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:6-39:6: @10.Goto: goto -&gt; bb11\"><span class=\"annotation\">@8,10\u298a</span>\u2038<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+34:5-39:6: @9[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:2-40:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "9f9933423406e619b90a45cb2e46ebbdc5dc47b8", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -67,7 +67,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:12-8:14: @2[1]: _4 = ()\n 8:9-8:15: @2[2]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _4)\"><span class=\"annotation\">@2\u298a</span>Ok(())<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:6-9:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:2-10:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:2-10:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "494e6f20ea7635d083740659934cc87244889565", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -114,6 +114,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @6[2]: _19 = ()\n 26:5-26:11: @6[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,6,7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @10.Goto: goto -&gt; bb11\"><span class=\"annotation\">@1,3,4,5,9,10\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3,4,5,9,10</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:2-27:2: @8.Goto: goto -&gt; bb11\"><span class=\"annotation\">@2,6,7,8\u298a</span>\u2038<span class=\"annotation\">\u2989@2,6,7,8</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6dc893d28ff524f756e7c41b824727d65aabbc92", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -162,6 +162,6 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:13-35:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 37:8-37:10: @9[2]: _25 = ()\n 37:5-37:11: @9[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@4,6,7,8,12,13\u298a</span>\u2038<span class=\"annotation\">\u2989@4,6,7,8,12,13</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:2-38:2: @11.Goto: goto -&gt; bb14\"><span class=\"annotation\">@5,9,10,11\u298a</span>\u2038<span class=\"annotation\">\u2989@5,9,10,11</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:2-38:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "b51c5c84c0d6e31580988f8af17b783910438b65", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -128,36 +128,36 @@\n 20:9-22:16: @5[1]: _6 = const ()\">        =</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"20:9-22:16: @5[0]: _5 = const 100_i32\n 20:9-22:16: @5[1]: _6 = const ()\">            100<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:6-23:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>\u2038<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @7[3]: _8 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:9-26:16: @7[3]: _8 = _1\n 26:9-26:16: @7[4]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">            10</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:9-30:15: @10[0]: _5 = const 10_i32\n 27:5-32:6: @10[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\"><span class=\"annotation\">@9\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        =</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">            100</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n 34:5-39:6: @9[1]: _0 = const ()\">        ;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n-34:5-39:6: @9[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@9</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:6-39:6: @10.Goto: goto -&gt; bb11\"><span class=\"annotation\">@8,10\u298a</span>\u2038<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"35:9-37:16: @9[0]: _5 = const 100_i32\n+34:5-39:6: @9[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:2-40:2: @11.Return: return\"><span class=\"annotation\">@11\u298a</span>\u2038<span class=\"annotation\">\u2989@11</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "9f9933423406e619b90a45cb2e46ebbdc5dc47b8", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/198ba3bd1cfedc7115f91d549a352da2b25050b7/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=198ba3bd1cfedc7115f91d549a352da2b25050b7", "patch": "@@ -67,7 +67,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:12-8:14: @2[1]: _4 = ()\n 8:9-8:15: @2[2]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _4)\"><span class=\"annotation\">@2\u298a</span>Ok(())<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:6-9:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:2-10:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:2-10:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}]}