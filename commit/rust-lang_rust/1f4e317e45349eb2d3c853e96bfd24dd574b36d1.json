{"sha": "1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGUzMTdlNDUzNDllYjJkM2M4NTNlOTZiZmQyNGRkNTc0YjM2ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T11:59:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T11:59:11Z"}, "message": "Auto merge of #30929 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #30591, #30781, #30836, #30864, #30896, #30898, #30908, #30921, #30925\n- Failed merges:", "tree": {"sha": "88ad81e57e6ad22f242754edf6143167fda74a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ad81e57e6ad22f242754edf6143167fda74a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "html_url": "https://github.com/rust-lang/rust/commit/1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70a60a02bca4c1fb75a0eb0ecf80acb73972f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66", "html_url": "https://github.com/rust-lang/rust/commit/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66"}, {"sha": "4f8d584aa586a4e31be3b73233d37cd0ee2ba03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8d584aa586a4e31be3b73233d37cd0ee2ba03b", "html_url": "https://github.com/rust-lang/rust/commit/4f8d584aa586a4e31be3b73233d37cd0ee2ba03b"}], "stats": {"total": 824, "additions": 600, "deletions": 224}, "files": [{"sha": "0255b04caa3163a331f1a406b590234ce92e211b", "filename": "configure", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -499,13 +499,18 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=aarch64\n         ;;\n \n-    # At some point, when ppc64[le] support happens, this will need to do\n-    # something clever. For now it's safe to assume that we're only ever\n-    # interested in building 32 bit.\n-    powerpc | ppc | ppc64)\n+    powerpc | ppc)\n         CFG_CPUTYPE=powerpc\n         ;;\n \n+    powerpc64 | ppc64)\n+        CFG_CPUTYPE=powerpc64\n+        ;;\n+\n+    powerpc64le | ppc64le)\n+        CFG_CPUTYPE=powerpc64le\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;"}, {"sha": "a9e8585ad6db5f8bea8e8eb0b8827b392cfc9c42", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -0,0 +1,24 @@\n+# powerpc64-unknown-linux-gnu configuration\n+CROSS_PREFIX_powerpc64-unknown-linux-gnu=powerpc64-linux-gnu-\n+CC_powerpc64-unknown-linux-gnu=$(CC)\n+CXX_powerpc64-unknown-linux-gnu=$(CXX)\n+CPP_powerpc64-unknown-linux-gnu=$(CPP)\n+AR_powerpc64-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_powerpc64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_powerpc64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_powerpc64-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_powerpc64-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_powerpc64-unknown-linux-gnu =\n+CFG_WINDOWSY_powerpc64-unknown-linux-gnu :=\n+CFG_UNIXY_powerpc64-unknown-linux-gnu := 1\n+CFG_LDPATH_powerpc64-unknown-linux-gnu :=\n+CFG_RUN_powerpc64-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_powerpc64-unknown-linux-gnu=$(call CFG_RUN_powerpc64-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_powerpc64-unknown-linux-gnu := powerpc64-unknown-linux-gnu"}, {"sha": "a2049331ab2e994c3edbff53e06728dc4984219d", "filename": "mk/cfg/powerpc64le-unknown-linux-gnu.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -0,0 +1,24 @@\n+# powerpc64le-unknown-linux-gnu configuration\n+CROSS_PREFIX_powerpc64le-unknown-linux-gnu=powerpc64le-linux-gnu-\n+CC_powerpc64le-unknown-linux-gnu=$(CC)\n+CXX_powerpc64le-unknown-linux-gnu=$(CXX)\n+CPP_powerpc64le-unknown-linux-gnu=$(CPP)\n+AR_powerpc64le-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_powerpc64le-unknown-linux-gnu := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_powerpc64le-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_powerpc64le-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_powerpc64le-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_powerpc64le-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_powerpc64le-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_powerpc64le-unknown-linux-gnu =\n+CFG_WINDOWSY_powerpc64le-unknown-linux-gnu :=\n+CFG_UNIXY_powerpc64le-unknown-linux-gnu := 1\n+CFG_LDPATH_powerpc64le-unknown-linux-gnu :=\n+CFG_RUN_powerpc64le-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_powerpc64le-unknown-linux-gnu=$(call CFG_RUN_powerpc64le-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_powerpc64le-unknown-linux-gnu := powerpc64le-unknown-linux-gnu"}, {"sha": "103ca463f7a58e2755a50e198070ecdfd8507073", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -38,6 +38,8 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"mips\", \"mips\"),\n     (\"msp430\", \"msp430\"),\n     (\"powerpc\", \"powerpc\"),\n+    (\"powerpc64\", \"powerpc64\"),\n+    (\"powerpc64le\", \"powerpc64le\"),\n     (\"s390x\", \"systemz\"),\n     (\"sparc\", \"sparc\"),\n     (\"x86_64\", \"x86_64\"),"}, {"sha": "849c5f1212a571f8da422c5c775b9b174b84ed5a", "filename": "src/doc/book/crates-and-modules.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcrates-and-modules.md?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -2,7 +2,7 @@\n \n When a project starts getting large, it\u2019s considered good software\n engineering practice to split it up into a bunch of smaller pieces, and then\n-fit them together. It\u2019s also important to have a well-defined interface, so\n+fit them together. It is also important to have a well-defined interface, so\n that some of your functionality is private, and some is public. To facilitate\n these kinds of things, Rust has a module system.\n "}, {"sha": "e9d271e7537685b299cc710ecf8ed9fc1c5460b1", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -505,9 +505,11 @@ Cargo checks to see if any of your project\u2019s files have been modified, and onl\n rebuilds your project if they\u2019ve changed since the last time you built it.\n \n With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n-but it will become useful in future. With complex projects composed of multiple\n-crates, it\u2019s much easier to let Cargo coordinate the build. With Cargo, you can\n-run `cargo build`, and it should work the right way.\n+but it will become useful in future. This is especially true when you start\n+using crates; these are synonymous with a \u2018library\u2019 or \u2018package\u2019 in other\n+programming languages. For complex projects composed of multiple crates, it\u2019s\n+much easier to let Cargo coordinate the build. Using Cargo, you can run `cargo\n+build`, and it should work the right way.\n \n ## Building for Release\n "}, {"sha": "b786b59ec986de641ccd7b88d89d7a6ed1ad69b9", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -2044,7 +2044,7 @@ The following configurations must be defined by the implementation:\n   production.  For example, it controls the behavior of the standard library's\n   `debug_assert!` macro.\n * `target_arch = \"...\"` - Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n-  `\"mips\"`, `\"powerpc\"`, `\"arm\"`, or `\"aarch64\"`.\n+  `\"mips\"`, `\"powerpc\"`, `\"powerpc64\"`, `\"powerpc64le\"`, `\"arm\"`, or `\"aarch64\"`.\n * `target_endian = \"...\"` - Endianness of the target CPU, either `\"little\"` or\n   `\"big\"`.\n * `target_env = \"..\"` - An option provided by the compiler by default"}, {"sha": "91d229b819df197b84987f7f0b2002cfb8a05c00", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -55,7 +55,9 @@ extern \"C\" {\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86\",\n               target_arch = \"x86_64\",\n-              target_arch = \"aarch64\")))]\n+              target_arch = \"aarch64\",\n+              target_arch = \"powerpc64\",\n+              target_arch = \"powerpc64le\")))]\n const MIN_ALIGN: usize = 16;\n \n // MALLOCX_ALIGN(a) macro"}, {"sha": "ffb6999d6e3fef7ef932832ecbb65f219cdcd8bd", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -29,7 +29,9 @@ extern crate libc;\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n               target_arch = \"mipsel\",\n-              target_arch = \"powerpc\")))]\n+              target_arch = \"powerpc\",\n+              target_arch = \"powerpc64\",\n+              target_arch = \"powerpc64le\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\")))]"}, {"sha": "3689312bed1d4e3a204c7436a762a89bd7a356d9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -16,9 +16,6 @@\n \n use lint::{LintPass, LateLintPass, LintArray};\n \n-// name of the future-incompatible group\n-pub const FUTURE_INCOMPATIBLE: &'static str = \"future_incompatible\";\n-\n declare_lint! {\n     pub CONST_ERR,\n     Warn,"}, {"sha": "1abfa2bfc59d1bf5b7d67ad0f68bfad9580481f3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -76,10 +76,22 @@ pub struct LintStore {\n     /// is true if the lint group was added by a plugin.\n     lint_groups: FnvHashMap<&'static str, (Vec<LintId>, bool)>,\n \n+    /// Extra info for future incompatibility lints, descibing the\n+    /// issue or RFC that caused the incompatibility.\n+    future_incompatible: FnvHashMap<LintId, FutureIncompatibleInfo>,\n+\n     /// Maximum level a lint can be\n     lint_cap: Option<Level>,\n }\n \n+/// Extra information for a future incompatibility lint. See the call\n+/// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n+/// guidelines.\n+pub struct FutureIncompatibleInfo {\n+    pub id: LintId,\n+    pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n+}\n+\n /// The targed of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -124,6 +136,7 @@ impl LintStore {\n             late_passes: Some(vec!()),\n             by_name: FnvHashMap(),\n             levels: FnvHashMap(),\n+            future_incompatible: FnvHashMap(),\n             lint_groups: FnvHashMap(),\n             lint_cap: None,\n         }\n@@ -183,6 +196,20 @@ impl LintStore {\n         }\n     }\n \n+    pub fn register_future_incompatible(&mut self,\n+                                        sess: Option<&Session>,\n+                                        lints: Vec<FutureIncompatibleInfo>) {\n+        let ids = lints.iter().map(|f| f.id).collect();\n+        self.register_group(sess, false, \"future_incompatible\", ids);\n+        for info in lints {\n+            self.future_incompatible.insert(info.id, info);\n+        }\n+    }\n+\n+    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n+        self.future_incompatible.get(&id)\n+    }\n+\n     pub fn register_group(&mut self, sess: Option<&Session>,\n                           from_plugin: bool, name: &'static str,\n                           to: Vec<LintId>) {\n@@ -418,14 +445,18 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     };\n \n     // Check for future incompatibility lints and issue a stronger warning.\n-    let future_incompat_lints = &lints.lint_groups[builtin::FUTURE_INCOMPATIBLE];\n-    let this_id = LintId::of(lint);\n-    if future_incompat_lints.0.iter().any(|&id| id == this_id) {\n-        let msg = \"this lint will become a HARD ERROR in a future release!\";\n+    if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n+        let explanation = format!(\"this was previously accepted by the compiler \\\n+                                   but is being phased out; \\\n+                                   it will become a hard error in a future release!\");\n+        let citation = format!(\"for more information, see {}\",\n+                               future_incompatible.reference);\n         if let Some(sp) = span {\n-            err.span_note(sp, msg);\n+            err.fileline_warn(sp, &explanation);\n+            err.fileline_note(sp, &citation);\n         } else {\n-            err.note(msg);\n+            err.warn(&explanation);\n+            err.note(&citation);\n         }\n     }\n "}, {"sha": "6061525ef398cc09da3749f08068d88c4113e3c6", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -41,7 +41,7 @@ use rustc_front::hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, GatherNodeLevels};\n+                        raw_struct_lint, GatherNodeLevels, FutureIncompatibleInfo};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "51149101e0c2dd441586d35a197cb59cd191fa86", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -80,7 +80,7 @@ pub struct Target {\n     /// Vendor name to use for conditional compilation.\n     pub target_vendor: String,\n     /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n-    /// \"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".\n+    /// \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\" and \"powerpc64le\". \"mips\" includes \"mipsel\".\n     pub arch: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -413,6 +413,8 @@ impl Target {\n             mips_unknown_linux_gnu,\n             mipsel_unknown_linux_gnu,\n             powerpc_unknown_linux_gnu,\n+            powerpc64_unknown_linux_gnu,\n+            powerpc64le_unknown_linux_gnu,\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,\n             aarch64_unknown_linux_gnu,"}, {"sha": "83970e73b933ce598fa770b36bac5acfc225b1a9", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"powerpc64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "0f5252fdc23a5cec36fefca01e5409f22387d37a", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"powerpc64le\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "53acbe3af67433f500bffd3aae1476c82493513d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -54,6 +54,7 @@ pub use rustc::util as util;\n \n use session::Session;\n use lint::LintId;\n+use lint::FutureIncompatibleInfo;\n \n mod bad_style;\n mod builtin;\n@@ -144,9 +145,29 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n-    add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n-                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT,\n-                    MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT);\n+    // Guidelines for creating a future incompatibility lint:\n+    //\n+    // - Create a lint defaulting to warn as normal, with ideally the same error\n+    //   message you would normally give\n+    // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n+    //   and include the full URL.\n+    // - Later, change lint to error\n+    // - Eventually, remove lint\n+    store.register_future_incompatible(sess, vec![\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PRIVATE_IN_PUBLIC),\n+            reference: \"the explanation for E0446 (`--explain E0446`)\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n+            reference: \"PR 30742 <https://github.com/rust-lang/rust/pull/30724>\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT),\n+            reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/\\\n+                        master/text/0218-empty-struct-with-braces.md>\",\n+        },\n+        ]);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "d3da93a3e080d53508928af23f0c8b0068568b03", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -329,9 +329,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            for export in self.export_map.get(&id).expect(\"module isn't found in export map\") {\n-                if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n-                    self.update(node_id, Some(AccessLevel::Exported));\n+            if let Some(exports) = self.export_map.get(&id) {\n+                for export in exports {\n+                    if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n+                        self.update(node_id, Some(AccessLevel::Exported));\n+                    }\n                 }\n             }\n         }\n@@ -1528,7 +1530,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                                         lint::builtin::PRIVATE_IN_PUBLIC,\n                                         node_id,\n                                         ty.span,\n-                                        \"private type in public interface (error E0446)\".to_string()\n+                                        format!(\"private type in public interface\"),\n                                     );\n                                 }\n                             }"}, {"sha": "8464d3ef298708187449cd32d5cd78b6ff86b477", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -101,7 +101,6 @@ use resolve_imports::Shadowable;\n pub mod diagnostics;\n \n mod check_unused;\n-mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n@@ -4014,9 +4013,6 @@ pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n     resolve_imports::resolve_imports(&mut resolver);\n     session.abort_if_errors();\n \n-    record_exports::record(&mut resolver);\n-    session.abort_if_errors();\n-\n     resolver\n }\n "}, {"sha": "13f4348f79522052aa2b735df00d24be3f055798", "filename": "src/librustc_resolve/record_exports.rs", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=a70a60a02bca4c1fb75a0eb0ecf80acb73972f66", "patch": "@@ -1,154 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// Export recording\n-//\n-// This pass simply determines what all \"export\" keywords refer to and\n-// writes the results into the export map.\n-//\n-// FIXME #4953 This pass will be removed once exports change to per-item.\n-// Then this operation can simply be performed as part of item (or import)\n-// processing.\n-\n-use {Module, NameBinding, Resolver};\n-use Namespace::{TypeNS, ValueNS};\n-\n-use build_reduced_graph;\n-use module_to_string;\n-\n-use rustc::middle::def::Export;\n-use syntax::ast;\n-\n-use std::ops::{Deref, DerefMut};\n-\n-struct ExportRecorder<'a, 'b: 'a, 'tcx: 'b> {\n-    resolver: &'a mut Resolver<'b, 'tcx>,\n-}\n-\n-// Deref and DerefMut impls allow treating ExportRecorder as Resolver.\n-impl<'a, 'b, 'tcx:'b> Deref for ExportRecorder<'a, 'b, 'tcx> {\n-    type Target = Resolver<'b, 'tcx>;\n-\n-    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n-        &*self.resolver\n-    }\n-}\n-\n-impl<'a, 'b, 'tcx:'b> DerefMut for ExportRecorder<'a, 'b, 'tcx> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n-        &mut *self.resolver\n-    }\n-}\n-\n-impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n-    fn record_exports_for_module_subtree(&mut self, module_: Module<'b>) {\n-        // If this isn't a local krate, then bail out. We don't need to record\n-        // exports for nonlocal crates.\n-\n-        match module_.def_id() {\n-            Some(def_id) if def_id.is_local() => {\n-                // OK. Continue.\n-                debug!(\"(recording exports for module subtree) recording exports for local \\\n-                        module `{}`\",\n-                       module_to_string(module_));\n-            }\n-            None => {\n-                // Record exports for the root module.\n-                debug!(\"(recording exports for module subtree) recording exports for root module \\\n-                        `{}`\",\n-                       module_to_string(module_));\n-            }\n-            Some(_) => {\n-                // Bail out.\n-                debug!(\"(recording exports for module subtree) not recording exports for `{}`\",\n-                       module_to_string(module_));\n-                return;\n-            }\n-        }\n-\n-        self.record_exports_for_module(module_);\n-        build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n-\n-        for (_, child_name_bindings) in module_.children.borrow().iter() {\n-            match child_name_bindings.type_ns.module() {\n-                None => {\n-                    // Nothing to do.\n-                }\n-                Some(child_module) => {\n-                    self.record_exports_for_module_subtree(child_module);\n-                }\n-            }\n-        }\n-\n-        for (_, child_module) in module_.anonymous_children.borrow().iter() {\n-            self.record_exports_for_module_subtree(child_module);\n-        }\n-    }\n-\n-    fn record_exports_for_module(&mut self, module_: Module<'b>) {\n-        let mut exports = Vec::new();\n-\n-        self.add_exports_for_module(&mut exports, module_);\n-        match module_.def_id() {\n-            Some(def_id) => {\n-                let node_id = self.ast_map.as_local_node_id(def_id).unwrap();\n-                self.export_map.insert(node_id, exports);\n-                debug!(\"(computing exports) writing exports for {} (some)\", node_id);\n-            }\n-            None => {}\n-        }\n-    }\n-\n-    fn add_export_of_namebinding(&mut self,\n-                                 exports: &mut Vec<Export>,\n-                                 name: ast::Name,\n-                                 namebinding: &NameBinding) {\n-        match namebinding.def() {\n-            Some(d) => {\n-                debug!(\"(computing exports) YES: export '{}' => {:?}\",\n-                       name,\n-                       d.def_id());\n-                exports.push(Export {\n-                    name: name,\n-                    def_id: d.def_id(),\n-                });\n-            }\n-            d_opt => {\n-                debug!(\"(computing exports) NO: {:?}\", d_opt);\n-            }\n-        }\n-    }\n-\n-    fn add_exports_for_module(&mut self, exports: &mut Vec<Export>, module_: Module<'b>) {\n-        for (name, import_resolution) in module_.import_resolutions.borrow().iter() {\n-            let xs = [TypeNS, ValueNS];\n-            for &ns in &xs {\n-                if !import_resolution[ns].is_public {\n-                    continue;\n-                }\n-\n-                match import_resolution[ns].target {\n-                    Some(ref target) => {\n-                        debug!(\"(computing exports) maybe export '{}'\", name);\n-                        self.add_export_of_namebinding(exports, *name, &target.binding)\n-                    }\n-                    _ => (),\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-pub fn record(resolver: &mut Resolver) {\n-    let mut recorder = ExportRecorder { resolver: resolver };\n-    let root_module = recorder.graph_root;\n-    recorder.record_exports_for_module_subtree(root_module);\n-}"}, {"sha": "abaf45cb1704d0abcf2ecf756f9306e2673b277d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -688,6 +688,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             id: directive.id,\n                             is_public: directive.is_public\n                         };\n+\n+                        self.add_export(module_, target, &import_resolution[namespace]);\n                         *used_public = name_binding.is_public();\n                     }\n                     UnboundResult => {\n@@ -827,6 +829,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         dest_import_resolution[ns] = ImportResolution {\n                             id: id, is_public: is_public, target: Some(target.clone())\n                         };\n+                        self.add_export(module_, *name, &dest_import_resolution[ns]);\n                     }\n                     _ => {}\n                 }\n@@ -919,6 +922,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             id: id,\n                             is_public: is_public\n                         };\n+                        self.add_export(module_, name, &dest_import_resolution[namespace]);\n                     }\n                 } else {\n                     // FIXME #30159: This is required for backwards compatability.\n@@ -935,6 +939,19 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                                            name);\n     }\n \n+    fn add_export(&mut self, module: Module<'b>, name: Name, resolution: &ImportResolution<'b>) {\n+        if !resolution.is_public { return }\n+        let node_id = match module.def_id() {\n+            Some(def_id) => self.resolver.ast_map.as_local_node_id(def_id).unwrap(),\n+            None => return,\n+        };\n+        let export = match resolution.target.as_ref().unwrap().binding.def() {\n+            Some(def) => Export { name: name, def_id: def.def_id() },\n+            None => return,\n+        };\n+        self.resolver.export_map.entry(node_id).or_insert(Vec::new()).push(export);\n+    }\n+\n     /// Checks that imported names and items don't have the same name.\n     fn check_for_conflicting_import(&mut self,\n                                     import_resolution: &ImportResolutionPerNamespace,"}, {"sha": "4bfbb8b69f0acee7fd17163e36b9c3c7baddd6ad", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -19,6 +19,7 @@ use trans::cabi_x86_win64;\n use trans::cabi_arm;\n use trans::cabi_aarch64;\n use trans::cabi_powerpc;\n+use trans::cabi_powerpc64;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n@@ -127,6 +128,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"powerpc64\" | \"powerpc64le\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               ),\n     }"}, {"sha": "cba73004279d60083a24fd666b9e41f5571d20a3", "filename": "src/librustc_trans/trans/cabi_powerpc64.rs", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -0,0 +1,259 @@\n+// Copyright 2014-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: The PowerPC64 ABI needs to zero or sign extend function\n+// call parameters, but compute_abi_info() is passed LLVM types\n+// which have no sign information.\n+//\n+// Alignment of 128 bit types is not currently handled, this will\n+// need to be fixed when PowerPC vector support is added.\n+\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Attribute};\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type) -> usize {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        _ => panic!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> {\n+    fn check_array(ty: Type) -> Option<(Type, u64)> {\n+        let len = ty.array_length() as u64;\n+        if len == 0 {\n+            return None\n+        }\n+        let elt = ty.element_type();\n+\n+        // if our element is an HFA/HVA, so are we; multiply members by our len\n+        is_homogenous_aggregate_ty(elt).map(|(base_ty, members)| (base_ty, len * members))\n+    }\n+\n+    fn check_struct(ty: Type) -> Option<(Type, u64)> {\n+        let str_tys = ty.field_types();\n+        if str_tys.len() == 0 {\n+            return None\n+        }\n+\n+        let mut prev_base_ty = None;\n+        let mut members = 0;\n+        for opt_homog_agg in str_tys.iter().map(|t| is_homogenous_aggregate_ty(*t)) {\n+            match (prev_base_ty, opt_homog_agg) {\n+                // field isn't itself an HFA, so we aren't either\n+                (_, None) => return None,\n+\n+                // first field - store its type and number of members\n+                (None, Some((field_ty, field_members))) => {\n+                    prev_base_ty = Some(field_ty);\n+                    members = field_members;\n+                },\n+\n+                // 2nd or later field - give up if it's a different type; otherwise incr. members\n+                (Some(prev_ty), Some((field_ty, field_members))) => {\n+                    if prev_ty != field_ty {\n+                        return None;\n+                    }\n+                    members += field_members;\n+                }\n+            }\n+        }\n+\n+        // Because of previous checks, we know prev_base_ty is Some(...) because\n+        //   1. str_tys has at least one element; and\n+        //   2. prev_base_ty was filled in (or we would've returned early)\n+        let (base_ty, members) = (prev_base_ty.unwrap(), members);\n+\n+        // Ensure there is no padding.\n+        if ty_size(ty) == ty_size(base_ty) * (members as usize) {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    let homog_agg = match ty.kind() {\n+        Float  => Some((ty, 1)),\n+        Double => Some((ty, 1)),\n+        Array  => check_array(ty),\n+        Struct => check_struct(ty),\n+        _ => None\n+    };\n+\n+    // Ensure we have at most eight uniquely addressable members\n+    homog_agg.and_then(|(base_ty, members)| {\n+        if members > 0 && members <= 8 {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+\n+    // The PowerPC64 big endian ABI doesn't return aggregates in registers\n+    if ccx.sess().target.target.arch == \"powerpc64\" {\n+        return ArgType::indirect(ty, Some(Attribute::StructRet))\n+    }\n+\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ty) {\n+        let llty = Type::array(&base_ty, members);\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+    let size = ty_size(ty);\n+    if size <= 16 {\n+        let llty = if size <= 1 {\n+            Type::i8(ccx)\n+        } else if size <= 2 {\n+            Type::i16(ccx)\n+        } else if size <= 4 {\n+            Type::i32(ccx)\n+        } else if size <= 8 {\n+            Type::i64(ccx)\n+        } else {\n+            Type::array(&Type::i64(ccx), ((size + 7 ) / 8 ) as u64)\n+        };\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+\n+    ArgType::indirect(ty, Some(Attribute::StructRet))\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(Attribute::ZExt) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ty) {\n+        let llty = Type::array(&base_ty, members);\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+\n+    ArgType::direct(\n+        ty,\n+        Some(struct_ty(ccx, ty)),\n+        None,\n+        None\n+    )\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    }\n+}\n+\n+fn coerce_to_long(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let long_ty = Type::i64(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 64;\n+    while n > 0 {\n+        args.push(long_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 64;\n+    if r > 0 {\n+        args.push(Type::ix(ccx, r as u64));\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_long(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    let mut arg_tys = Vec::new();\n+    for &aty in atys {\n+        let ty = classify_arg_ty(ccx, aty);\n+        arg_tys.push(ty);\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "f474e288efe86b8363269df53ad6a3bee601b5c0", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -31,6 +31,7 @@ mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_mips;\n mod cabi_powerpc;\n+mod cabi_powerpc64;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}, {"sha": "dfa144699b217ad0a6ec540dbf96f096ca41dccc", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -595,14 +595,10 @@ fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: b\n     let name = pprust::path_to_string(path);\n     let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\", name);\n     if lint {\n-        let expanded_msg =\n-            format!(\"{}; RFC 218 disallowed matching of unit variants or unit structs via {}(..)\",\n-                    msg,\n-                    name);\n         sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n                       pat.id,\n                       pat.span,\n-                      expanded_msg);\n+                      msg);\n     } else {\n         span_err!(sess, pat.span, E0164, \"{}\", msg);\n     }"}, {"sha": "af2824d0930d2e8ed8058264054a10d95d0185d0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -1917,8 +1917,8 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                 lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n                 param.id,\n                 param.span,\n-                format!(\"defaults for type parameters are only allowed \\\n-                         on `struct` or `enum` definitions (see issue #27336)\"));\n+                format!(\"defaults for type parameters are only allowed on type definitions, \\\n+                         like `struct` or `enum`\"));\n         }\n     }\n "}, {"sha": "6726f5222475550266d5930d4ac57f3875f6b449", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -615,6 +615,8 @@ pub mod consts {\n     /// - mips\n     /// - mipsel\n     /// - powerpc\n+    /// - powerpc64\n+    /// - powerpc64le\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n@@ -867,6 +869,16 @@ mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n }\n \n+#[cfg(target_arch = \"powerpc64\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"powerpc64\";\n+}\n+\n+#[cfg(target_arch = \"powerpc64le\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"powerpc64le\";\n+}\n+\n #[cfg(target_arch = \"le32\")]\n mod arch {\n     pub const ARCH: &'static str = \"le32\";"}, {"sha": "953d0917141d10337b9b262009577691d889d31f", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -205,7 +205,8 @@ mod arch {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\",\n+          target_arch = \"powerpc64le\"))]\n mod arch {\n     use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_int};"}, {"sha": "b4d493953030e8e7f7e3ee8e168859aa0435934e", "filename": "src/libstd/os/openbsd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fraw.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -16,7 +16,7 @@ use os::raw::c_long;\n use os::unix::raw::{uid_t, gid_t};\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;"}, {"sha": "62080fee48ec1178e62e0acecd44199ca47918b3", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -14,11 +14,17 @@\n \n #[cfg(any(target_os = \"android\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                       target_arch = \"arm\"))))]\n+                                       target_arch = \"arm\",\n+                                       target_arch = \"powerpc\",\n+                                       target_arch = \"powerpc64\",\n+                                       target_arch = \"powerpc64le\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n-                                           target_arch = \"arm\")))))]\n+                                           target_arch = \"arm\",\n+                                           target_arch = \"powerpc\",\n+                                           target_arch = \"powerpc64\",\n+                                           target_arch = \"powerpc64le\")))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;"}, {"sha": "619f100f1a137ad9092498d19a68306915742c04", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -30,14 +30,19 @@ mod imp {\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n-                  target_arch = \"powerpc\")))]\n+                  target_arch = \"powerpc\",\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         #[cfg(target_arch = \"x86_64\")]\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;\n-        #[cfg(any(target_arch = \"arm\", target_arch = \"powerpc\"))]\n+        #[cfg(target_arch = \"arm\")]\n         const NR_GETRANDOM: libc::c_long = 384;\n+        #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\"))]\n+        const NR_GETRANDOM: libc::c_long = 359;\n         #[cfg(target_arch = \"aarch64\")]\n         const NR_GETRANDOM: libc::c_long = 278;\n \n@@ -51,7 +56,9 @@ mod imp {\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n-                      target_arch = \"powerpc\"))))]\n+                      target_arch = \"powerpc\",\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"powerpc64le\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -88,7 +95,9 @@ mod imp {\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n-                  target_arch = \"powerpc\")))]\n+                  target_arch = \"powerpc\",\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"powerpc64le\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, Ordering};\n         use sync::Once;\n@@ -116,7 +125,9 @@ mod imp {\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n-                      target_arch = \"powerpc\"))))]\n+                      target_arch = \"powerpc\",\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"powerpc64le\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     /// A random number generator that retrieves randomness straight from"}, {"sha": "77d1eed96231df0626e517e679c4657e59ab03c6", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -83,7 +83,8 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(target_arch = \"powerpc\")]\n+#[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\",\n+          target_arch = \"powerpc64le\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n #[repr(C)]"}, {"sha": "f885733c2d18ff9c1b556a65162dbf9f3c086249", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -23,6 +23,7 @@ pub use self::duration::Duration;\n mod duration;\n \n /// A measurement of a monotonically increasing clock.\n+///  Opaque and useful only with `Duration`.\n ///\n /// Instants are always guaranteed to be greater than any previously measured\n /// instant when created, and are often useful for tasks such as measuring\n@@ -42,8 +43,8 @@ mod duration;\n #[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n pub struct Instant(time::Instant);\n \n-/// A measurement of the system clock appropriate for timestamps such as those\n-/// on files on the filesystem.\n+/// A measurement of the system clock, useful for talking to\n+/// external entities like the file system or other processes.\n ///\n /// Distinct from the `Instant` type, this time measurement **is not\n /// monotonic**. This means that you can save a file to the file system, then"}, {"sha": "6983c74696ac833979307e9c7dd632a663152e1e", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -161,6 +161,17 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), None);\n         self\n     }\n+    pub fn warn(&mut self, msg: &str) -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Warning, msg, None, None);\n+        self\n+    }\n+    pub fn span_warn(&mut self,\n+                     sp: Span,\n+                     msg: &str)\n+                     -> &mut DiagnosticBuilder<'a> {\n+        self.sub(Level::Warning, msg, Some(sp), None);\n+        self\n+    }\n     pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n         self.sub(Level::Help, msg, None, None);\n         self\n@@ -190,6 +201,13 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), Some(EndSpan(sp)));\n         self\n     }\n+    pub fn fileline_warn(&mut self ,\n+                         sp: Span,\n+                         msg: &str)\n+                         -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Warning, msg, Some(sp), Some(FileLine(sp)));\n+        self\n+    }\n     pub fn fileline_note(&mut self ,\n                          sp: Span,\n                          msg: &str)"}, {"sha": "f64c9d36025a3f847d6bcb97285567e13c8c8576", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -2,6 +2,7 @@ S 2015-12-18 3391630\n   bitrig-x86_64 6476e1562df02389b55553b4c88b1f4fd121cd40\n   freebsd-i386 7e624c50494402e1feb14c743d659fbd71b448f5\n   freebsd-x86_64 91724d4e655807a2a2e940ac50992ebeaac16ea9\n+  dragonfly-x86_64 e74d79488e88ac2de3bd03afd5959d2ae6e2b628\n   linux-i386 a09c4a4036151d0cb28e265101669731600e01f2\n   linux-x86_64 97e2a5eb8904962df8596e95d6e5d9b574d73bf4\n   macos-i386 ca52d2d3ba6497ed007705ee3401cf7efc136ca1"}, {"sha": "55a4226c6632da8685dd5c58fd556c6469e79834", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -24,7 +24,7 @@ pub extern \"win64\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n }\n \n #[inline(never)]\n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+#[cfg(not(target_arch = \"x86_64\"))]\n pub extern fn foo(a: isize, b: isize, c: isize, d: isize) {\n     assert_eq!(a, 1);\n     assert_eq!(b, 2);"}, {"sha": "cffd9fd9b49385d49e438ce866b1b5c098adbbcf", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -32,12 +32,14 @@ fn main() { //~ ERROR: compilation successful\n     // }\n     match e1 {\n         Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n     }\n     // Rejected by parser as yet\n     // match e2 {\n     //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n     match e2 {\n         E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n     }\n }"}, {"sha": "9aab06ce14ee16b324075fcaed44fbedc7c63766", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -26,23 +26,34 @@ mod types {\n     }\n \n     pub type Alias = Priv; //~ WARN private type in public interface\n+    //~^ WARNING hard error\n     pub enum E {\n         V1(Priv), //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         V2 { field: Priv }, //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     pub trait Tr {\n         const C: Priv = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         fn f1(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     extern {\n         pub static ES: Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         pub fn ef1(arg: Priv); //~ WARN private type in public interface\n+        //~^ WARNING hard error\n         pub fn ef2() -> Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -53,14 +64,21 @@ mod traits {\n \n     pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n     //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n+    //~^ WARNING hard error\n     pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         type Alias: PrivTr; //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n         fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     }\n     impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n }\n \n mod traits_where {\n@@ -69,12 +87,17 @@ mod traits_where {\n     pub trait PubTr {}\n \n     pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     }\n     impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n }\n \n mod generics {\n@@ -84,9 +107,13 @@ mod generics {\n     pub trait PubTr<T> {}\n \n     pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n }\n \n mod impls {\n@@ -113,6 +140,7 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -179,22 +207,27 @@ mod aliases_pub {\n     pub trait Tr1: PrivUseAliasTr {} // OK\n     // This should be OK, if type aliases are substituted\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n \n     impl PrivAlias {\n         pub fn f(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     // This doesn't even parse\n     // impl <Priv as PrivTr>::AssocAlias {\n     //     pub fn f(arg: Priv) {} // WARN private type in public interface\n     // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -217,8 +250,11 @@ mod aliases_priv {\n     impl PrivTr for Priv {}\n \n     pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n+        //~^ WARNING hard error\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n      //~^ WARN private type in public interface\n+        //~| WARNING hard error\n+        //~| WARNING hard error\n \n     impl PrivUseAlias {\n         pub fn f(arg: Priv) {} // OK"}, {"sha": "06f08dc13c6b484ed2684904133954a128413d84", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -13,18 +13,22 @@\n \n mod m1 {\n     pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n mod m4 {\n     pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING hard error\n }\n \n enum E { V }"}, {"sha": "9291329fac37f6b75c3e0504efe9769f6259f0fa", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -13,5 +13,5 @@\n \n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| NOTE HARD ERROR\n+//~| WARNING hard error\n fn main() {}"}, {"sha": "bb4b9cfecf7b62b609742d245f0a3d16d66dd854", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(any(target_pointer_width = \"32\"))]\n fn target() {\n     assert_eq!(-1000isize as usize >> 3_usize, 536870787_usize);\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n+#[cfg(any(target_pointer_width = \"64\"))]\n fn target() {\n     assert_eq!(-1000isize as usize >> 3_usize, 2305843009213693827_usize);\n }"}, {"sha": "4e4c98e50bca167c89217ec9697e82329a7a8220", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -21,3 +21,9 @@ pub fn main() { }\n \n #[cfg(target_arch = \"aarch64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"powerpc64\")]\n+pub fn main() { }\n+\n+#[cfg(target_arch = \"powerpc64le\")]\n+pub fn main() { }"}, {"sha": "a4720d48213ce43f527d0a369631d4d0b11d217a", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -35,7 +35,7 @@ mod m {\n     }\n \n     #[main]\n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+    #[cfg(not(target_arch = \"x86\"))]\n     pub fn main() {\n         unsafe {\n             assert_eq!(::rusti::pref_align_of::<u64>(), 8);"}, {"sha": "5587f68bd18544465c2aa5c8fb8dd7929ed233f4", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -23,13 +23,13 @@ impl Drop for Kitty {\n     fn drop(&mut self) {}\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch=\"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 8 as usize);\n     assert_eq!(mem::size_of::<Kitty>(), 16 as usize);\n }\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(target_pointer_width = \"32\")]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 4 as usize);\n     assert_eq!(mem::size_of::<Kitty>(), 8 as usize);"}, {"sha": "4a115c737da3a5752e82873a5c473475551dc274", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -35,14 +35,6 @@ struct Outer {\n     t: Inner\n }\n \n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n-mod m {\n-    pub fn align() -> usize { 4 }\n-    pub fn size() -> usize { 8 }\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n mod m {\n     pub fn align() -> usize { 4 }\n     pub fn size() -> usize { 8 }"}, {"sha": "25cd77845ea03bf9ef8389ce4265614b549ecad6", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -49,7 +49,7 @@ mod m {\n         pub fn size() -> usize { 12 }\n     }\n \n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n+    #[cfg(not(target_arch = \"x86\"))]\n     pub mod m {\n         pub fn align() -> usize { 8 }\n         pub fn size() -> usize { 16 }"}, {"sha": "6f23263790cb777ff0c0f8e4c56122f85598a467", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e317e45349eb2d3c853e96bfd24dd574b36d1/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=1f4e317e45349eb2d3c853e96bfd24dd574b36d1", "patch": "@@ -43,7 +43,7 @@ fn test1() {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n fn test2() {\n     unsafe {\n         let f = Floats { a: 1.234567890e-15_f64,\n@@ -59,7 +59,7 @@ fn test2() {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(target_pointer_width = \"32\")]\n fn test2() {\n }\n "}]}