{"sha": "e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyN2I4ZjdmMDJhNmQ5Zjk2M2FhZTU4MjNiYmUwN2E5NjJjMDRlMzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T00:10:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:20:36Z"}, "message": "Add JIT testing to compiletest with --jit", "tree": {"sha": "09be7f25d6d1ca664fa30c170c1b8a6dff98f55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09be7f25d6d1ca664fa30c170c1b8a6dff98f55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "html_url": "https://github.com/rust-lang/rust/commit/e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b999973c0ffa86738daab277cd6e985248ef08aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b999973c0ffa86738daab277cd6e985248ef08aa", "html_url": "https://github.com/rust-lang/rust/commit/b999973c0ffa86738daab277cd6e985248ef08aa"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "714f04e4a9d8bcdb4886fa4556e101c9f9361771", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "patch": "@@ -49,5 +49,10 @@ type config = {\n     // Flags to pass to the compiler\n     rustcflags: Option<~str>,\n \n+    // Run tests using the JIT\n+    jit: bool,\n+\n     // Explain what's going on\n-    verbose: bool};\n+    verbose: bool\n+\n+};"}, {"sha": "7a33fa50e5551597fb4b8c6b3352307d4d49bf68", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "patch": "@@ -32,7 +32,8 @@ fn parse_config(args: ~[~str]) -> config {\n           getopts::reqopt(~\"mode\"), getopts::optflag(~\"ignored\"),\n           getopts::optopt(~\"runtool\"), getopts::optopt(~\"rustcflags\"),\n           getopts::optflag(~\"verbose\"),\n-          getopts::optopt(~\"logfile\")];\n+          getopts::optopt(~\"logfile\"),\n+          getopts::optflag(~\"jit\")];\n \n     assert (vec::is_not_empty(args));\n     let args_ = vec::tail(args);\n@@ -64,6 +65,7 @@ fn parse_config(args: ~[~str]) -> config {\n                               |s| Path(s)),\n          runtool: getopts::opt_maybe_str(matches, ~\"runtool\"),\n          rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n+         jit: getopts::opt_present(matches, ~\"jit\"),\n          verbose: getopts::opt_present(matches, ~\"verbose\")};\n }\n \n@@ -81,6 +83,7 @@ fn log_config(config: config) {\n     logv(c, fmt!(\"filter: %s\", opt_str(config.filter)));\n     logv(c, fmt!(\"runtool: %s\", opt_str(config.runtool)));\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(config.rustcflags)));\n+    logv(c, fmt!(\"jit: %b\", config.jit));\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }"}, {"sha": "e456b4469fa20d3a4c62d7ca11f03825684fca07", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e27b8f7f02a6d9f963aae5823bbe07a962c04e33/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=e27b8f7f02a6d9f963aae5823bbe07a962c04e33", "patch": "@@ -48,11 +48,15 @@ fn run_cfail_test(config: config, props: test_props, testfile: &Path) {\n }\n \n fn run_rfail_test(config: config, props: test_props, testfile: &Path) {\n-    let mut procres = compile_test(config, props, testfile);\n+    let procres = if !config.jit {\n+        let procres = compile_test(config, props, testfile);\n \n-    if procres.status != 0 { fatal_procres(~\"compilation failed!\", procres); }\n+        if procres.status != 0 { fatal_procres(~\"compilation failed!\", procres); }\n \n-    procres = exec_compiled_test(config, props, testfile);\n+        exec_compiled_test(config, props, testfile)\n+    } else {\n+        jit_test(config, props, testfile)\n+    };\n \n     // The value our Makefile configures valgrind to return on failure\n     const valgrind_err: int = 100;\n@@ -76,13 +80,19 @@ fn check_correct_failure_status(procres: procres) {\n }\n \n fn run_rpass_test(config: config, props: test_props, testfile: &Path) {\n-    let mut procres = compile_test(config, props, testfile);\n+    if !config.jit {\n+        let mut procres = compile_test(config, props, testfile);\n+\n+        if procres.status != 0 { fatal_procres(~\"compilation failed!\", procres); }\n \n-    if procres.status != 0 { fatal_procres(~\"compilation failed!\", procres); }\n+        procres = exec_compiled_test(config, props, testfile);\n \n-    procres = exec_compiled_test(config, props, testfile);\n+        if procres.status != 0 { fatal_procres(~\"test run failed!\", procres); }\n+    } else {\n+        let mut procres = jit_test(config, props, testfile);\n \n-    if procres.status != 0 { fatal_procres(~\"test run failed!\", procres); }\n+        if procres.status != 0 { fatal_procres(~\"jit failed!\", procres); }\n+    }\n }\n \n fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n@@ -295,10 +305,19 @@ type procres = {status: int, stdout: ~str, stderr: ~str, cmdline: ~str};\n \n fn compile_test(config: config, props: test_props,\n                 testfile: &Path) -> procres {\n+    compile_test_(config, props, testfile, [])\n+}\n+\n+fn jit_test(config: config, props: test_props, testfile: &Path) -> procres {\n+    compile_test_(config, props, testfile, [~\"--jit\"])\n+}\n+\n+fn compile_test_(config: config, props: test_props,\n+                 testfile: &Path, extra_args: &[~str]) -> procres {\n     let link_args = ~[~\"-L\", aux_output_dir_name(config, testfile).to_str()];\n     compose_and_run_compiler(\n         config, props, testfile,\n-        make_compile_args(config, props, link_args,\n+        make_compile_args(config, props, link_args + extra_args,\n                           make_exe_name, testfile),\n         None)\n }"}]}