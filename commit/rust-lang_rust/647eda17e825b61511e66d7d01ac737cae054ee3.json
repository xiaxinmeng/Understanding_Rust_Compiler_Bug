{"sha": "647eda17e825b61511e66d7d01ac737cae054ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2VkYTE3ZTgyNWI2MTUxMWU2NmQ3ZDAxYWM3MzdjYWUwNTRlZTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-20T17:32:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T17:32:07Z"}, "message": "Rollup merge of #66457 - cjgillot:just_hashstable, r=Zoxc\n\nJust derive Hashstable in librustc\n\nSplit out of #66279\n\nr? @Zoxc", "tree": {"sha": "e1b43fd2d71c4f2275f9f3568e2c68f81a91f78e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b43fd2d71c4f2275f9f3568e2c68f81a91f78e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647eda17e825b61511e66d7d01ac737cae054ee3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1XiXCRBK7hj4Ov3rIwAAdHIIAEPSFwvQEC7wgZN7VEi06PQC\nX9Tqp2fpv+zo8spaIimepzDt77Aw19B8+9i+mRCurZYGjIYTMSpPQzTfXQ8zGCVd\nN6bOlyfPHz4xwfw0G/F/Go0wsoCrj7jMRgXWv7T6m5CUFe9cm0+CTdPBDvDoIU0l\nIP+ny2b6jo0FP8CU87QNGQC/si8TQJXELX/EhhANvcfoLD9upIEJgDyIk3SsRisG\n8Bsi8xD6JmDPwVqsOxYVI3CIddSM40NPHMnQRAz1mPHAJirU0+EDRms8CHsT27H+\nYok52iaToDVmGcysfkEA2WXCh/l0RwoX1vvzZD2BQKfV3Jh2nSa6lCCtTsWFNkI=\n=qfXr\n-----END PGP SIGNATURE-----\n", "payload": "tree e1b43fd2d71c4f2275f9f3568e2c68f81a91f78e\nparent 00cbc75c74cda031a5e9df592cca95644f17ec8f\nparent 579625b9e738e606b91fa315c75ab4909fa090be\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574271127 +0100\ncommitter GitHub <noreply@github.com> 1574271127 +0100\n\nRollup merge of #66457 - cjgillot:just_hashstable, r=Zoxc\n\nJust derive Hashstable in librustc\n\nSplit out of #66279\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647eda17e825b61511e66d7d01ac737cae054ee3", "html_url": "https://github.com/rust-lang/rust/commit/647eda17e825b61511e66d7d01ac737cae054ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647eda17e825b61511e66d7d01ac737cae054ee3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cbc75c74cda031a5e9df592cca95644f17ec8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cbc75c74cda031a5e9df592cca95644f17ec8f", "html_url": "https://github.com/rust-lang/rust/commit/00cbc75c74cda031a5e9df592cca95644f17ec8f"}, {"sha": "579625b9e738e606b91fa315c75ab4909fa090be", "url": "https://api.github.com/repos/rust-lang/rust/commits/579625b9e738e606b91fa315c75ab4909fa090be", "html_url": "https://github.com/rust-lang/rust/commit/579625b9e738e606b91fa315c75ab4909fa090be"}], "stats": {"total": 400, "additions": 70, "deletions": 330}, "files": [{"sha": "d5d66f899871049012046dbeda5dae8454a3f232", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -3719,6 +3719,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n+ \"rustc_macros\",\n  \"rustc_target\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "17ab0c187a2fc1c4a14c88c60dd6a4f63f55fa61", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> DepNodeParams<'tcx> for HirId {\n /// the need to be mapped or unmapped. (This ensures we can serialize\n /// them even in the absence of a tcx.)\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable)]\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct WorkProductId {\n     hash: Fingerprint\n }\n@@ -599,7 +599,3 @@ impl WorkProductId {\n         }\n     }\n }\n-\n-impl_stable_hash_for!(struct crate::dep_graph::WorkProductId {\n-    hash\n-});"}, {"sha": "2b3bc37c87ccbe8a2e4c9f2d9d4c9a73d3f5e601", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -313,11 +313,9 @@ pub enum DefPathData {\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n-         RustcEncodable, RustcDecodable)]\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct DefPathHash(pub Fingerprint);\n \n-impl_stable_hash_for!(tuple_struct DefPathHash { fingerprint });\n-\n impl Borrow<Fingerprint> for DefPathHash {\n     #[inline]\n     fn borrow(&self) -> &Fingerprint {"}, {"sha": "465673082e50af32e59f6e9f31a962b62d26e54a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -1215,7 +1215,7 @@ impl UnOp {\n }\n \n /// A statement.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub struct Stmt {\n     pub hir_id: HirId,\n     pub kind: StmtKind,"}, {"sha": "816e93698bce961ad6a2a483afc001633ea59995", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -140,13 +140,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n \n impl_stable_hash_for_spanned!(hir::BinOpKind);\n \n-impl_stable_hash_for!(struct hir::Stmt {\n-    hir_id,\n-    kind,\n-    span,\n-});\n-\n-\n impl_stable_hash_for_spanned!(ast::Name);\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr {"}, {"sha": "fd8ccce6833522d3368e16704133f4ce220effc0", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default, HashStable)]\n pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     //\n@@ -89,10 +89,6 @@ fn is_free_or_static(r: Region<'_>) -> bool {\n     }\n }\n \n-impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n-    relation\n-});\n-\n impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n     type Lifted = FreeRegionMap<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<FreeRegionMap<'tcx>> {"}, {"sha": "d84102ff3c5d8caf07a6b37895cf9b397b210ce7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -543,18 +543,11 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid,\n }\n \n-impl_stable_hash_for!(enum self::Level {\n-    Allow,\n-    Warn,\n-    Deny,\n-    Forbid\n-});\n-\n impl Level {\n     /// Converts a level to a lower-case string.\n     pub fn as_str(self) -> &'static str {\n@@ -590,7 +583,7 @@ impl Level {\n }\n \n /// How a lint level was set.\n-#[derive(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n@@ -603,12 +596,6 @@ pub enum LintSource {\n     CommandLine(Symbol),\n }\n \n-impl_stable_hash_for!(enum self::LintSource {\n-    Default,\n-    Node(name, span, reason),\n-    CommandLine(text)\n-});\n-\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;"}, {"sha": "7182f031824025ae74579522461e017390f262c1", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -11,17 +11,12 @@ use crate::ty::subst::SubstsRef;\n /// kind of crate, including cdylibs which export very few things.\n /// `Rust` will only be exported if the crate produced is a Rust\n /// dylib.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum SymbolExportLevel {\n     C,\n     Rust,\n }\n \n-impl_stable_hash_for!(enum self::SymbolExportLevel {\n-    C,\n-    Rust\n-});\n-\n impl SymbolExportLevel {\n     pub fn is_below_threshold(self, threshold: SymbolExportLevel) -> bool {\n         threshold == SymbolExportLevel::Rust // export everything from Rust dylibs"}, {"sha": "c13c44c413d776fe45942b409b6ac7e21e2c4958", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -207,20 +207,14 @@ struct NamedRegionMap {\n }\n \n /// See [`NamedRegionMap`].\n-#[derive(Default)]\n+#[derive(Default, HashStable)]\n pub struct ResolveLifetimes {\n     defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n     late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n     object_lifetime_defaults:\n         FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n }\n \n-impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n-    defs,\n-    late_bound,\n-    object_lifetime_defaults\n-});\n-\n struct LifetimeContext<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,"}, {"sha": "411a47423c5aa7c93f0917e49e0790756f83c63f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -52,7 +52,7 @@ enum AnnotationKind {\n }\n \n /// An entry in the `depr_map`.\n-#[derive(Clone)]\n+#[derive(Clone, HashStable)]\n pub struct DeprecationEntry {\n     /// The metadata of the attribute associated with this entry.\n     pub attr: Deprecation,\n@@ -61,11 +61,6 @@ pub struct DeprecationEntry {\n     origin: Option<HirId>,\n }\n \n-impl_stable_hash_for!(struct self::DeprecationEntry {\n-    attr,\n-    origin\n-});\n-\n impl DeprecationEntry {\n     fn local(attr: Deprecation, id: HirId) -> DeprecationEntry {\n         DeprecationEntry {\n@@ -90,6 +85,7 @@ impl DeprecationEntry {\n }\n \n /// A stability index, giving the stability level for items and methods.\n+#[derive(HashStable)]\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n@@ -103,13 +99,6 @@ pub struct Index<'tcx> {\n     active_features: FxHashSet<Symbol>,\n }\n \n-impl_stable_hash_for!(struct self::Index<'tcx> {\n-    stab_map,\n-    depr_map,\n-    staged_api,\n-    active_features\n-});\n-\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "f849361e08be9e0b0dbfd36267a8972af043e586", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -4,7 +4,6 @@ use super::{\n     Pointer, InterpResult, AllocId, ScalarMaybeUndef, write_target_uint, read_target_uint, Scalar,\n };\n \n-use crate::mir;\n use crate::ty::layout::{Size, Align};\n \n use rustc_data_structures::sorted_map::SortedMap;\n@@ -787,14 +786,13 @@ type Block = u64;\n \n /// A bitmask where each bit refers to the byte with the same index. If the bit is `true`, the byte\n /// is defined. If it is `false` the byte is undefined.\n-#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: Size,\n }\n \n-impl_stable_hash_for!(struct mir::interpret::UndefMask{blocks, len});\n-\n impl UndefMask {\n     pub const BLOCK_SIZE: u64 = 64;\n "}, {"sha": "52c72de7579e1e22f76ecb7c50355e2eba972986", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -458,7 +458,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,\n@@ -583,11 +583,6 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n }\n \n-impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});\n-\n /// Gets the bytes of a constant slice value.\n pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n     if let ConstValue::Slice { data, start, end } = val {"}, {"sha": "79468b68055d4e508a6698e6f32499f25887d576", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -70,7 +70,8 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// The various \"big phases\" that MIR goes through.\n ///\n /// Warning: ordering of variants is significant.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable,\n+         Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum MirPhase {\n     Build = 0,\n     Const = 1,\n@@ -86,7 +87,7 @@ impl MirPhase {\n }\n \n /// The lowered representation of a single function.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, TypeFoldable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable, TypeFoldable)]\n pub struct Body<'tcx> {\n     /// A list of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n@@ -412,24 +413,6 @@ pub enum Safety {\n     ExplicitUnsafe(hir::HirId),\n }\n \n-impl_stable_hash_for!(struct Body<'tcx> {\n-    phase,\n-    basic_blocks,\n-    source_scopes,\n-    source_scope_local_data,\n-    yield_ty,\n-    generator_drop,\n-    generator_layout,\n-    local_decls,\n-    user_type_annotations,\n-    arg_count,\n-    __upvar_debuginfo_codegen_only_do_not_use,\n-    spread_arg,\n-    control_flow_destroyed,\n-    span,\n-    cache\n-});\n-\n impl<'tcx> Index<BasicBlock> for Body<'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n@@ -609,7 +592,7 @@ pub enum LocalKind {\n     ReturnPointer,\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct VarBindingForm<'tcx> {\n     /// Is variable bound via `x`, `mut x`, `ref x`, or `ref mut x`?\n     pub binding_mode: ty::BindingMode,\n@@ -642,7 +625,7 @@ pub enum BindingForm<'tcx> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,\n@@ -659,28 +642,6 @@ pub enum ImplicitSelfKind {\n \n CloneTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n \n-impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n-    binding_mode,\n-    opt_ty_info,\n-    opt_match_place,\n-    pat_span\n-});\n-\n-impl_stable_hash_for!(enum self::ImplicitSelfKind {\n-    Imm,\n-    Mut,\n-    ImmRef,\n-    MutRef,\n-    None\n-});\n-\n-impl_stable_hash_for!(enum self::MirPhase {\n-    Build,\n-    Const,\n-    Validated,\n-    Optimized,\n-});\n-\n mod binding_form_impl {\n     use crate::ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -707,7 +668,7 @@ mod binding_form_impl {\n /// involved in borrow_check errors, e.g., explanations of where the\n /// temporaries come from, when their destructors are run, and/or how\n /// one might revise the code to satisfy the borrow checker's rules.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct BlockTailInfo {\n     /// If `true`, then the value resulting from evaluating this tail\n     /// expression is ignored by the block's expression context.\n@@ -717,8 +678,6 @@ pub struct BlockTailInfo {\n     pub tail_result_is_ignored: bool,\n }\n \n-impl_stable_hash_for!(struct BlockTailInfo { tail_result_is_ignored });\n-\n /// A MIR local.\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n@@ -1746,7 +1705,8 @@ pub enum PlaceBase<'tcx> {\n }\n \n /// We store the normalized type to avoid requiring normalization when reading MIR\n-#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub kind: StaticKind<'tcx>,\n@@ -1768,12 +1728,6 @@ pub enum StaticKind<'tcx> {\n     Static,\n }\n \n-impl_stable_hash_for!(struct Static<'tcx> {\n-    ty,\n-    kind,\n-    def_id\n-});\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub enum ProjectionElem<V, T> {"}, {"sha": "34daf185b29527e182d47ee790835f1ead8ec6e3", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -251,7 +251,7 @@ pub struct CodegenUnit<'tcx> {\n     size_estimate: Option<usize>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Linkage {\n     External,\n     AvailableExternally,\n@@ -266,33 +266,13 @@ pub enum Linkage {\n     Common,\n }\n \n-impl_stable_hash_for!(enum self::Linkage {\n-    External,\n-    AvailableExternally,\n-    LinkOnceAny,\n-    LinkOnceODR,\n-    WeakAny,\n-    WeakODR,\n-    Appending,\n-    Internal,\n-    Private,\n-    ExternalWeak,\n-    Common\n-});\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n pub enum Visibility {\n     Default,\n     Hidden,\n     Protected,\n }\n \n-impl_stable_hash_for!(enum self::Visibility {\n-    Default,\n-    Hidden,\n-    Protected\n-});\n-\n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n         CodegenUnit {"}, {"sha": "785b4122d087359eee25fab69bd84cdc02c73ccf", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -79,7 +79,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, Default, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -114,7 +114,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n \n /// A set of constraints that need to be satisfied in order for\n /// a type to be valid for destruction.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct DtorckConstraint<'tcx> {\n     /// Types that are required to be alive in order for this\n     /// type to be valid for destruction.\n@@ -152,15 +152,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n         result\n     }\n }\n-impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n-    kinds, overflows\n-});\n-\n-impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n-    outlives,\n-    dtorck_types,\n-    overflows\n-});\n \n /// This returns true if the type `ty` is \"trivial\" for\n /// dropck-outlives -- that is, if it doesn't require any types to"}, {"sha": "be846287e290c1a5a4b993efb3beacda8ba7fe40", "filename": "src/librustc/traits/query/method_autoderef.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::sync::Lrc;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::Ty;\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct CandidateStep<'tcx> {\n     pub self_ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,\n     pub autoderefs: usize,\n@@ -15,7 +15,7 @@ pub struct CandidateStep<'tcx> {\n     pub unsize: bool,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct MethodAutoderefStepsResult<'tcx> {\n     /// The valid autoderef steps that could be find.\n     pub steps: Lrc<Vec<CandidateStep<'tcx>>>,\n@@ -26,20 +26,8 @@ pub struct MethodAutoderefStepsResult<'tcx> {\n     pub reached_recursion_limit: bool,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct MethodAutoderefBadTy<'tcx> {\n     pub reached_raw_pointer: bool,\n     pub ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,\n }\n-\n-impl_stable_hash_for!(struct MethodAutoderefBadTy<'tcx> {\n-    reached_raw_pointer, ty\n-});\n-\n-impl_stable_hash_for!(struct MethodAutoderefStepsResult<'tcx> {\n-    reached_recursion_limit, steps, opt_bad_ty\n-});\n-\n-impl_stable_hash_for!(struct CandidateStep<'tcx> {\n-    self_ty, autoderefs, from_unsafe_deref, unsize\n-});"}, {"sha": "66683cab95960409216a1a795d78c018b6d31c9a", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -40,7 +40,7 @@ pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::normalize::Normalize<T>>>;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct NoSolution;\n \n pub type Fallible<T> = Result<T, NoSolution>;\n@@ -50,5 +50,3 @@ impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n         NoSolution\n     }\n }\n-\n-impl_stable_hash_for!(struct NoSolution { });"}, {"sha": "09c7f45c22b0a32f364de4dcda1b3b658950f4e3", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -193,7 +193,3 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         constant.eval(self.infcx.tcx, self.param_env)\n     }\n }\n-\n-impl_stable_hash_for!(struct NormalizationResult<'tcx> {\n-    normalized_ty\n-});"}, {"sha": "ee8b73f86a61a033520a68361326684dc1123675", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::UserSubsts;\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct AscribeUserType<'tcx> {\n     pub mir_ty: Ty<'tcx>,\n     pub def_id: DefId,\n@@ -38,9 +38,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct AscribeUserType<'tcx> {\n-        mir_ty, def_id, user_substs\n-    }\n-}"}, {"sha": "8ea800cced2134a351b7b541032305748b4830ae", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Eq<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n@@ -35,7 +35,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n         tcx.type_op_eq(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct Eq<'tcx> { a, b }\n-}"}, {"sha": "6f45d76a8e9d7d9b4ffd23a06848aa7195de5613", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -39,7 +39,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n         tcx.implied_outlives_bounds(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct ImpliedOutlivesBounds<'tcx> { ty }\n-}"}, {"sha": "f905d5a019ec8c3d30a2a608a91ecc5669fe7a4a", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -4,7 +4,7 @@ use crate::traits::query::Fallible;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Normalize<T> {\n     pub value: T,\n }\n@@ -82,9 +82,3 @@ impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    impl<T> for struct Normalize<T> {\n-        value\n-    }\n-}"}, {"sha": "83d51b6d3ebf78500cd227dd13080ebe078d2455", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{DropckOutlivesResult, trivial_dropck\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }\n@@ -53,7 +53,3 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx.dropck_outlives(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct DropckOutlives<'tcx> { dropped_ty }\n-}"}, {"sha": "c0a0cbe9a3876029ae201bd03874ed69639de6d8", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct ProvePredicate<'tcx> {\n     pub predicate: Predicate<'tcx>,\n }\n@@ -44,7 +44,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct ProvePredicate<'tcx> { predicate }\n-}"}, {"sha": "76292f9dea085cc29425c9e2a7da6c07c52e2b09", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct Subtype<'tcx> {\n     pub sub: Ty<'tcx>,\n     pub sup: Ty<'tcx>,\n@@ -35,7 +35,3 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n         tcx.type_op_subtype(canonicalized)\n     }\n }\n-\n-impl_stable_hash_for! {\n-    struct Subtype<'tcx> { sub, sup }\n-}"}, {"sha": "ffc94cf2b125eb870905c98e4f9bdb64b79dfa3c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -367,7 +367,6 @@ enum BuiltinImplConditions<'tcx> {\n     Ambiguous,\n }\n \n-#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n /// The result of trait evaluation. The order is important\n /// here as the evaluation of a list is the maximum of the\n /// evaluations.\n@@ -380,6 +379,7 @@ enum BuiltinImplConditions<'tcx> {\n ///     all the \"potential success\" candidates can potentially succeed,\n ///     so they are noops when unioned with a definite error, and within\n ///     the categories it's easy to see that the unions are correct.\n+#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq, HashStable)]\n pub enum EvaluationResult {\n     /// Evaluation successful\n     EvaluatedToOk,\n@@ -478,21 +478,10 @@ impl EvaluationResult {\n     }\n }\n \n-impl_stable_hash_for!(enum self::EvaluationResult {\n-    EvaluatedToOk,\n-    EvaluatedToOkModuloRegions,\n-    EvaluatedToAmbig,\n-    EvaluatedToUnknown,\n-    EvaluatedToRecur,\n-    EvaluatedToErr\n-});\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n /// Indicates that trait evaluation caused overflow.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub struct OverflowError;\n \n-impl_stable_hash_for!(struct OverflowError {});\n-\n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(OverflowError: OverflowError) -> SelectionError<'tcx> {\n         SelectionError::Overflow"}, {"sha": "d945c756f6662d1045b8f333528c597273513a5c", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -24,7 +24,7 @@ use crate::util::nodemap::{DefIdMap, FxHashMap};\n ///   parents of a given specializing impl, which is needed for extracting\n ///   default items amongst other things. In the simple \"chain\" rule, every impl\n ///   has at most one parent.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub struct Graph {\n     // All impls have a parent; the \"root\" impls have as their parent the `def_id`\n     // of the trait.\n@@ -535,8 +535,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for Children {\n         ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, nonblanket_impls);\n     }\n }\n-\n-impl_stable_hash_for!(struct self::Graph {\n-    parent,\n-    children\n-});"}, {"sha": "491e09dff09506561cbbf5d09e447aa3565bf018", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -2,7 +2,7 @@ use crate::hir::BindingAnnotation::*;\n use crate::hir::BindingAnnotation;\n use crate::hir::Mutability;\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable)]\n pub enum BindingMode {\n     BindByReference(Mutability),\n     BindByValue(Mutability),\n@@ -20,8 +20,3 @@ impl BindingMode {\n         }\n     }\n }\n-\n-impl_stable_hash_for!(enum self::BindingMode {\n-    BindByReference(mutability),\n-    BindByValue(mutability)\n-});"}, {"sha": "a54bf5079cac4f189f7ec0510625752b037d84dc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -1590,12 +1590,11 @@ rustc_index::newtype_index! {\n     /// type -- an idealized representative of \"types in general\" that we\n     /// use for checking generic functions.\n     pub struct UniverseIndex {\n+        derive [HashStable]\n         DEBUG_FORMAT = \"U{}\",\n     }\n }\n \n-impl_stable_hash_for!(struct UniverseIndex { private });\n-\n impl UniverseIndex {\n     pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n \n@@ -1839,7 +1838,7 @@ bitflags! {\n }\n \n /// Definition of a variant -- a struct's fields or a enum variant.\n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct VariantDef {\n     /// `DefId` that identifies the variant itself.\n     /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.\n@@ -1848,6 +1847,7 @@ pub struct VariantDef {\n     /// If this variant is a struct variant, then this is `None`.\n     pub ctor_def_id: Option<DefId>,\n     /// Variant or struct name.\n+    #[stable_hasher(project(name))]\n     pub ident: Ident,\n     /// Discriminant of this variant.\n     pub discr: VariantDiscr,\n@@ -1927,17 +1927,6 @@ impl<'tcx> VariantDef {\n     }\n }\n \n-impl_stable_hash_for!(struct VariantDef {\n-    def_id,\n-    ctor_def_id,\n-    ident -> (ident.name),\n-    discr,\n-    fields,\n-    ctor_kind,\n-    flags,\n-    recovered\n-});\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum VariantDiscr {\n     /// Explicit value for this variant, i.e., `X = 123`.\n@@ -2061,7 +2050,7 @@ impl Into<DataTypeKind> for AdtKind {\n }\n \n bitflags! {\n-    #[derive(RustcEncodable, RustcDecodable, Default)]\n+    #[derive(RustcEncodable, RustcDecodable, Default, HashStable)]\n     pub struct ReprFlags: u8 {\n         const IS_C               = 1 << 0;\n         const IS_SIMD            = 1 << 1;\n@@ -2076,26 +2065,16 @@ bitflags! {\n     }\n }\n \n-impl_stable_hash_for!(struct ReprFlags {\n-    bits\n-});\n-\n /// Represents the repr options provided by the user,\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable,\n+         Default, HashStable)]\n pub struct ReprOptions {\n     pub int: Option<attr::IntType>,\n     pub align: Option<Align>,\n     pub pack: Option<Align>,\n     pub flags: ReprFlags,\n }\n \n-impl_stable_hash_for!(struct ReprOptions {\n-    align,\n-    pack,\n-    int,\n-    flags\n-});\n-\n impl ReprOptions {\n     pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {\n         let mut flags = ReprFlags::empty();\n@@ -3439,17 +3418,13 @@ pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Vec<DefId>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`.\n     pub name: Symbol\n }\n \n-impl_stable_hash_for!(struct self::SymbolName {\n-    name\n-});\n-\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {"}, {"sha": "07258717cd9d4a668dc9769545f7fe33da3146e2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -1204,6 +1204,7 @@ rustc_index::newtype_index! {\n     /// is the outer fn.\n     ///\n     /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n+    #[derive(HashStable)]\n     pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n@@ -1379,21 +1380,20 @@ rustc_index::newtype_index! {\n     pub struct BoundVar { .. }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub enum BoundTyKind {\n     Anon,\n     Param(Symbol),\n }\n \n-impl_stable_hash_for!(struct BoundTy { var, kind });\n-impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n-\n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n         BoundTy {\n@@ -1518,8 +1518,6 @@ impl DebruijnIndex {\n     }\n }\n \n-impl_stable_hash_for!(struct DebruijnIndex { private });\n-\n /// Region utilities\n impl RegionKind {\n     /// Is this region named by the user?"}, {"sha": "9bc6d32b7cb385a990e483a6a2431cfa9bbf1183", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -22,6 +22,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "08640476f7ab720e21b7feb0d9d45aab1238a4ef", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -18,6 +18,7 @@ use rustc::mir::interpret::{\n     InterpResult, truncate, sign_extend,\n };\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_macros::HashStable;\n \n use super::{\n     Immediate, Operand, MemPlace, MPlaceTy, Place, PlaceTy, ScalarMaybeUndef,\n@@ -93,7 +94,7 @@ pub struct Frame<'mir, 'tcx, Tag=(), Extra=()> {\n     pub stmt: usize,\n }\n \n-#[derive(Clone, Eq, PartialEq, Debug)] // Miri debug-prints these\n+#[derive(Clone, Eq, PartialEq, Debug, HashStable)] // Miri debug-prints these\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n@@ -109,15 +110,16 @@ pub enum StackPopCleanup {\n }\n \n /// State of a local variable including a memoized layout\n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, HashStable)]\n pub struct LocalState<'tcx, Tag=(), Id=AllocId> {\n     pub value: LocalValue<Tag, Id>,\n     /// Don't modify if `Some`, this is only used to prevent computing the layout twice\n+    #[stable_hasher(ignore)]\n     pub layout: Cell<Option<TyLayout<'tcx>>>,\n }\n \n /// Current value of a local variable\n-#[derive(Clone, PartialEq, Eq, Debug)] // Miri debug-prints these\n+#[derive(Clone, PartialEq, Eq, Debug, HashStable)] // Miri debug-prints these\n pub enum LocalValue<Tag=(), Id=AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,"}, {"sha": "cfa70164cdce430aca3e9f16fdee91132a76f8f2", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -18,6 +18,7 @@ use super::{\n     MemPlace, MPlaceTy, PlaceTy, Place,\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n+use rustc_macros::HashStable;\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -26,7 +27,7 @@ pub use rustc::mir::interpret::ScalarMaybeUndef;\n /// operations and fat pointers. This idea was taken from rustc's codegen.\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub enum Immediate<Tag=(), Id=AllocId> {\n     Scalar(ScalarMaybeUndef<Tag, Id>),\n     ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n@@ -103,7 +104,7 @@ impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n pub enum Operand<Tag=(), Id=AllocId> {\n     Immediate(Immediate<Tag, Id>),\n     Indirect(MemPlace<Tag, Id>),"}, {"sha": "088fbe1695efd3cedc0619341264bb4949518516", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -12,14 +12,15 @@ use rustc::ty::layout::{\n     self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n };\n use rustc::ty::TypeFoldable;\n+use rustc_macros::HashStable;\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, InterpResult, Pointer, PointerArithmetic,\n     InterpCx, Machine, AllocMap, AllocationExtra,\n     RawConst, Immediate, ImmTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind, LocalValue,\n };\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n pub struct MemPlace<Tag=(), Id=AllocId> {\n     /// A place may have an integral pointer for ZSTs, and since it might\n     /// be turned back into a reference before ever being dereferenced.\n@@ -32,7 +33,7 @@ pub struct MemPlace<Tag=(), Id=AllocId> {\n     pub meta: Option<Scalar<Tag, Id>>,\n }\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n pub enum Place<Tag=(), Id=AllocId> {\n     /// A place referring to a value allocated in the `Memory` system.\n     Ptr(MemPlace<Tag, Id>),"}, {"sha": "b460badd1fdac3353ec54e9737ba7c0968025e5e", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647eda17e825b61511e66d7d01ac737cae054ee3/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=647eda17e825b61511e66d7d01ac737cae054ee3", "patch": "@@ -19,6 +19,7 @@ use rustc::ty::layout::{Align, Size};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_macros::HashStable;\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n@@ -197,21 +198,12 @@ impl_snapshot_for!(enum ScalarMaybeUndef {\n     Undef,\n });\n \n-impl_stable_hash_for!(struct crate::interpret::MemPlace {\n-    ptr,\n-    align,\n-    meta,\n-});\n impl_snapshot_for!(struct MemPlace {\n     ptr,\n     meta,\n     align -> *align, // just copy alignment verbatim\n });\n \n-impl_stable_hash_for!(enum crate::interpret::Place {\n-    Ptr(mem_place),\n-    Local { frame, local },\n-});\n impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     where Ctx: SnapshotContext<'a>,\n {\n@@ -229,29 +221,16 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     }\n }\n \n-impl_stable_hash_for!(enum crate::interpret::Immediate {\n-    Scalar(x),\n-    ScalarPair(x, y),\n-});\n impl_snapshot_for!(enum Immediate {\n     Scalar(s),\n     ScalarPair(s, t),\n });\n \n-impl_stable_hash_for!(enum crate::interpret::Operand {\n-    Immediate(x),\n-    Indirect(x),\n-});\n impl_snapshot_for!(enum Operand {\n     Immediate(v),\n     Indirect(m),\n });\n \n-impl_stable_hash_for!(enum crate::interpret::LocalValue {\n-    Dead,\n-    Uninitialized,\n-    Live(x),\n-});\n impl_snapshot_for!(enum LocalValue {\n     Dead,\n     Uninitialized,\n@@ -314,11 +293,6 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     }\n }\n \n-impl_stable_hash_for!(enum crate::interpret::eval_context::StackPopCleanup {\n-    Goto { ret, unwind },\n-    None { cleanup },\n-});\n-\n #[derive(Eq, PartialEq)]\n struct FrameSnapshot<'a, 'tcx> {\n     instance: ty::Instance<'tcx>,\n@@ -383,11 +357,6 @@ impl<'a, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a LocalState<'tcx>\n     }\n }\n \n-impl_stable_hash_for!(struct LocalState<'tcx> {\n-    value,\n-    layout -> _,\n-});\n-\n impl<'b, 'mir, 'tcx> SnapshotContext<'b>\n     for Memory<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>\n {\n@@ -399,7 +368,10 @@ impl<'b, 'mir, 'tcx> SnapshotContext<'b>\n /// The virtual machine state during const-evaluation at a given point in time.\n /// We assume the `CompileTimeInterpreter` has no interesting extra state that\n /// is worth considering here.\n+#[derive(HashStable)]\n struct InterpSnapshot<'mir, 'tcx> {\n+    // Not hashing memory: Avoid hashing memory all the time during execution\n+    #[stable_hasher(ignore)]\n     memory: Memory<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n     stack: Vec<Frame<'mir, 'tcx>>,\n }\n@@ -434,12 +406,6 @@ impl<'mir, 'tcx> Hash for InterpSnapshot<'mir, 'tcx> {\n     }\n }\n \n-impl_stable_hash_for!(impl<> for struct InterpSnapshot<'mir, 'tcx> {\n-    // Not hashing memory: Avoid hashing memory all the time during execution\n-    memory -> _,\n-    stack,\n-});\n-\n impl<'mir, 'tcx> Eq for InterpSnapshot<'mir, 'tcx> {}\n \n impl<'mir, 'tcx> PartialEq for InterpSnapshot<'mir, 'tcx> {"}]}