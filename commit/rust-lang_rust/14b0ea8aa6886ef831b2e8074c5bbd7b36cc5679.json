{"sha": "14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjBlYThhYTY4ODZlZjgzMWIyZTgwNzRjNWJiZDdiMzZjYzU2Nzk=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-24T16:17:22Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:51Z"}, "message": "fix up tests", "tree": {"sha": "9cd184c705e5779c227b585b4dcfb9ef151e9ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cd184c705e5779c227b585b4dcfb9ef151e9ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "html_url": "https://github.com/rust-lang/rust/commit/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72605ac6273720f768753365e2c53249943af3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72605ac6273720f768753365e2c53249943af3e", "html_url": "https://github.com/rust-lang/rust/commit/c72605ac6273720f768753365e2c53249943af3e"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "544053096fec5560e84e7d8eb6a343309462fa75", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "patch": "@@ -674,10 +674,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// map.insert(3, \"a\");\n     /// map.insert(5, \"b\");\n     /// map.insert(8, \"c\");\n-    /// for (&key, &value) in map.range(Included(&4), Included(&8)) {\n+    /// for (&key, &value) in map.range((Included(&4), Included(&8))) {\n     ///     println!(\"{}: {}\", key, value);\n     /// }\n-    /// assert_eq!(Some((&5, &\"b\")), map.range(Included(&4), Unbounded).next());\n+    /// assert_eq!(Some((&5, &\"b\")), map.range((Included(&4), Unbounded)).next());\n     /// ```\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\","}, {"sha": "a63e2e6765e48d145db220f68adac51033a7e4f4", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "patch": "@@ -224,10 +224,10 @@ impl<T: Ord> BTreeSet<T> {\n     /// set.insert(3);\n     /// set.insert(5);\n     /// set.insert(8);\n-    /// for &elem in set.range(Included(&4), Included(&8)) {\n+    /// for &elem in set.range((Included(&4), Included(&8))) {\n     ///     println!(\"{}\", elem);\n     /// }\n-    /// assert_eq!(Some(&5), set.range(Included(&4), Unbounded).next());\n+    /// assert_eq!(Some(&5), set.range((Included(&4), Unbounded)).next());\n     /// ```\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\","}, {"sha": "0326b92203a1cc11d7da0dc32f3e5ff6e27fd1d5", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "patch": "@@ -19,47 +19,51 @@ use Bound::{self, Excluded, Included, Unbounded};\n \n /// **RangeArgument** is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b` or `c..d`.\n-pub trait RangeArgument<T> {\n-    /// Start index (inclusive)\n+pub trait RangeArgument<T: ?Sized> {\n+    /// Start index bound\n     ///\n-    /// Return start value if present, else `None`.\n+    /// Return start value as a `Bound`\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n+    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///\n     /// # fn main() {\n     /// use collections::range::RangeArgument;\n+    /// use collections::Bound::*;\n     ///\n-    /// assert_eq!((..10).start(), None);\n-    /// assert_eq!((3..10).start(), Some(&3));\n+    /// assert_eq!((..10).start(), Unbounded);\n+    /// assert_eq!((3..10).start(), Included(&3));\n     /// # }\n     /// ```\n     fn start(&self) -> Bound<&T> {\n         Unbounded\n     }\n \n-    /// End index (exclusive)\n+    /// End index bound\n     ///\n-    /// Return end value if present, else `None`.\n+    /// Return end value as a `Bound`\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n+    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///\n     /// # fn main() {\n     /// use collections::range::RangeArgument;\n+    /// use collections::Bound::*;\n     ///\n-    /// assert_eq!((3..).end(), None);\n-    /// assert_eq!((3..10).end(), Some(&10));\n+    /// assert_eq!((3..).end(), Unbounded);\n+    /// assert_eq!((3..10).end(), Excluded(&10));\n     /// # }\n     /// ```\n     fn end(&self) -> Bound<&T> {"}]}